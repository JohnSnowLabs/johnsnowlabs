Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index", "reference/autosummary/sparknlp_jsl/annotator/er/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/flattener/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/regex/index", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index", "reference/autosummary/sparknlp_jsl/nlp_test/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/transpiler/builder/index", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index", "reference/autosummary/sparknlp_jsl/transpiler/converter/index", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index", "reference/autosummary/sparknlp_jsl/transpiler/index", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/java_helper/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/flattener/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/builder/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/converter/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/java_helper/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deidentication_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.extractive_summarization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er.entity_ruler_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.flattener</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.handle_exception_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher.text_matcher_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.text2sql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter.internal_document_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.white_black_list_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias.bias_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.class_names</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.externalSources</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.nlu_2_python</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.python_2_scala</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.source_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.uploader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.java_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.risk_adjustment_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.run_transpiled_code</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "healthcar": [0, 1, 10, 12, 33, 35, 41, 102], "i": [0, 10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 33, 35, 36, 39, 41, 43, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 77, 78, 80, 81, 84, 86, 87, 88, 89, 91, 94, 95, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 124, 126, 127, 130, 131, 132, 142, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 167, 169, 171, 172, 174, 175, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 202, 203, 206, 207, 208, 210, 214, 215, 218, 219, 220, 222, 225, 226, 232, 235, 239, 240, 242, 246, 248, 250], "commerci": 0, "extens": [0, 80], "clinic": [0, 43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 76, 78, 80, 81, 88, 89, 95, 98, 99, 100, 101, 103, 105, 109, 112, 113, 114, 115, 117, 120, 121, 125, 126, 127, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 169, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 203, 206, 208, 221, 235], "biomed": 0, "text": [0, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 82, 84, 88, 94, 95, 98, 99, 100, 101, 102, 103, 105, 107, 109, 112, 113, 114, 115, 117, 120, 121, 122, 124, 126, 127, 130, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208, 210, 216, 218, 219, 223, 224, 232, 237, 246], "mine": 0, "If": [0, 10, 12, 13, 22, 23, 24, 33, 35, 36, 41, 43, 48, 50, 51, 52, 53, 54, 55, 63, 64, 65, 66, 68, 69, 70, 72, 78, 81, 84, 86, 87, 88, 89, 91, 95, 99, 101, 103, 104, 107, 110, 112, 113, 114, 115, 120, 121, 124, 130, 131, 132, 140, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 175, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 206, 207, 208, 210, 214, 222, 226, 232, 235, 239, 240, 242], "you": [0, 10, 33, 41, 42, 43, 51, 66, 68, 69, 72, 88, 99, 102, 109, 112, 114, 120, 122, 130, 140, 144, 146, 165, 172, 178, 180, 200, 207, 221, 222, 224], "don": [0, 52, 110, 120, 218, 219], "t": [0, 10, 23, 24, 43, 52, 89, 99, 109, 110, 112, 120, 126, 127, 142, 144, 160, 165, 167, 172, 178, 195, 200, 202, 207, 218, 219, 224, 250], "have": [0, 23, 24, 41, 43, 50, 52, 53, 55, 68, 81, 95, 99, 102, 112, 117, 120, 131, 144, 146, 150, 151, 160, 169, 172, 178, 180, 184, 185, 195, 203, 207, 210, 214, 218, 223], "subscript": 0, "yet": [0, 24, 130], "can": [0, 10, 23, 33, 41, 43, 44, 45, 48, 50, 52, 63, 64, 65, 66, 68, 69, 70, 72, 76, 81, 84, 86, 88, 89, 95, 99, 101, 107, 109, 110, 112, 114, 115, 117, 120, 124, 126, 127, 130, 131, 144, 146, 153, 157, 159, 160, 165, 167, 171, 172, 178, 180, 187, 191, 194, 195, 200, 202, 206, 207, 214, 215, 218, 219, 221, 224, 235, 239, 240, 242], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": [0, 81], "try": [0, 57, 58, 89, 95, 104, 120, 140, 153, 161, 187, 196], "http": [0, 20, 22, 23, 24, 41, 76, 114, 120, 176], "www": [0, 236], "johnsnowlab": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 125, 126, 127, 130, 134, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 227], "com": [0, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 125, 126, 127, 130, 134, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 227, 236], "provid": [0, 22, 23, 24, 41, 43, 51, 64, 66, 69, 84, 88, 94, 99, 100, 117, 120, 138, 144, 146, 160, 171, 172, 178, 180, 195, 206, 207, 222, 225, 226, 232, 234, 239, 248, 249], "specif": [0, 10, 33, 81, 99, 114, 130, 131, 172, 207, 210, 232, 246, 248], "annot": [0, 10, 33, 41, 136, 137, 138, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 167, 169, 171, 172, 174, 176, 177, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 202, 203, 206, 207, 208, 210, 219, 221, 223, 224, 227, 237, 246], "pipelin": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 142, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208, 209, 210, 215, 219, 221, 246], "model": [0, 1, 5, 8, 10, 12, 15, 16, 23, 24, 28, 31, 33, 35, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 78, 80, 81, 84, 88, 89, 91, 94, 95, 98, 99, 100, 101, 102, 103, 109, 112, 113, 114, 115, 117, 120, 121, 124, 125, 126, 127, 131, 134, 137, 140, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 175, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 215, 218, 219, 221, 224, 227, 235, 247], "embed": [0, 10, 12, 16, 18, 33, 35, 39, 43, 45, 48, 50, 53, 55, 59, 63, 64, 65, 68, 70, 72, 74, 76, 86, 88, 92, 98, 99, 100, 101, 112, 113, 114, 115, 120, 122, 131, 143, 144, 146, 151, 153, 156, 159, 160, 162, 169, 171, 172, 176, 178, 180, 185, 187, 190, 194, 195, 197, 203, 206, 207, 218, 219, 227], "entiti": [0, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 64, 66, 68, 69, 72, 73, 74, 76, 78, 81, 84, 87, 88, 94, 95, 99, 100, 101, 102, 103, 104, 110, 112, 113, 114, 115, 117, 119, 120, 122, 132, 144, 146, 150, 151, 153, 156, 157, 169, 171, 172, 174, 177, 178, 180, 184, 185, 187, 190, 191, 203, 206, 207, 208, 210, 214, 218, 219, 220, 222, 224, 237, 239, 246], "recognit": [0, 24, 51, 64, 99, 103, 171, 172, 174, 206, 207, 208], "link": [0, 76], "normal": [0, 13, 24, 36, 57, 58, 92, 120, 131, 153, 160, 161, 175, 176, 187, 195, 196, 218, 227], "assert": [0, 10, 33, 41, 48, 88, 92, 149, 158, 176, 183, 192, 224, 225, 227, 237, 243], "statu": [0, 43, 44, 45, 144, 178, 224, 248], "detect": [0, 44, 246], "de": [0, 69, 72, 146, 180, 222, 239], "identif": [0, 222], "relat": [0, 10, 33, 41, 53, 55, 81, 112, 113, 114, 115, 131, 132, 150, 151, 156, 157, 169, 177, 184, 185, 190, 191, 203, 210, 219, 232, 237], "extract": [0, 41, 43, 45, 48, 50, 66, 76, 80, 82, 84, 88, 94, 99, 100, 112, 113, 115, 120, 130, 144, 153, 156, 157, 172, 178, 187, 190, 191, 207, 209, 210, 218, 219, 233], "spell": [0, 143, 218, 227], "check": [0, 10, 33, 41, 43, 45, 66, 105, 109, 114, 131, 165, 200, 235, 250], "correct": [0, 214], "The": [0, 10, 13, 20, 21, 22, 23, 24, 33, 36, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 76, 78, 80, 81, 84, 86, 88, 89, 94, 95, 99, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 120, 122, 124, 125, 126, 127, 130, 131, 132, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 169, 171, 172, 174, 175, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 203, 206, 207, 208, 209, 215, 218, 220, 221, 222, 223, 224, 228, 232, 233, 234, 235, 239, 242, 248], "librari": [0, 1, 41, 63, 64, 65, 77, 140, 147, 159, 171, 176, 181, 194, 206, 226, 232], "offer": [0, 248], "access": [0, 41], "sever": [0, 23, 43, 48, 69, 72, 120, 144, 146, 178, 180, 248], "transform": [0, 13, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 88, 94, 95, 99, 100, 103, 104, 105, 110, 112, 113, 114, 115, 117, 120, 121, 141, 144, 146, 147, 151, 153, 156, 157, 159, 160, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 191, 194, 195, 203, 206, 207, 208, 210, 227, 232], "jsl": [0, 41, 53, 55, 151, 169, 176, 185, 203, 227, 237, 246], "bert": [0, 63, 64, 65, 80, 81, 99, 113, 115, 120, 122, 156, 157, 159, 171, 172, 190, 191, 194, 206, 207], "biobert": [0, 210], "clinicalbert": 0, "glove": [0, 45], "med": 0, "icd": [0, 120, 153, 187, 248], "o": [0, 24, 64, 72, 74, 98, 101, 171, 206, 222, 224, 250], "It": [0, 22, 24, 41, 48, 52, 69, 70, 81, 84, 86, 87, 88, 89, 99, 101, 130, 131, 132, 146, 160, 172, 175, 180, 195, 207, 210, 218, 220, 226, 232, 233, 239], "also": [0, 24, 63, 64, 65, 68, 76, 81, 84, 99, 101, 110, 112, 117, 120, 138, 146, 159, 171, 172, 175, 180, 194, 206, 207, 218], "includ": [0, 21, 41, 43, 48, 51, 69, 95, 99, 101, 109, 114, 115, 120, 128, 131, 132, 144, 165, 172, 178, 200, 207, 218, 219, 226, 232, 233, 237], "over": [0, 19, 69, 99, 130, 172, 207, 218, 219, 246, 248], "50": [0, 10, 24, 33, 53, 55, 89, 150, 151, 169, 172, 184, 185, 203], "pre": [0, 41, 50, 53, 55, 63, 64, 65, 66, 77, 80, 99, 103, 112, 113, 115, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 206, 207, 208], "train": [0, 2, 9, 10, 12, 15, 22, 23, 24, 25, 32, 33, 35, 38, 41, 43, 44, 45, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 80, 81, 86, 89, 94, 95, 98, 99, 100, 101, 103, 104, 112, 113, 115, 117, 120, 121, 131, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 169, 171, 172, 174, 176, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 203, 206, 207, 208, 210, 215, 218, 227], "recogn": [0, 81, 99, 101, 103, 115, 172, 207], "follow": [0, 19, 20, 48, 51, 66, 69, 72, 87, 99, 101, 117, 120, 130, 146, 172, 175, 180, 207, 210, 222, 224, 232, 233, 236], "mani": [0, 18, 76, 81, 124], "more": [0, 18, 19, 22, 23, 44, 50, 63, 65, 69, 77, 81, 101, 102, 146, 147, 159, 171, 180, 181, 194, 206], "support": [0, 10, 33, 61, 69, 72, 99, 146, 160, 180, 195], "sign": [0, 224, 227], "symptom": [0, 81, 88, 112], "treatment": [0, 114, 115, 157, 191, 224], "procedur": 0, "test": [0, 43, 49, 51, 94, 99, 114, 115, 117, 122, 144, 160, 172, 178, 195, 207, 210, 215, 218, 219, 220, 224, 225, 240], "lab": [0, 41, 176, 224, 237], "section": [0, 68, 102, 226, 232], "drug": [0, 81, 101, 105, 114, 115, 157, 191, 222], "name": [0, 6, 10, 12, 20, 22, 24, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 140, 142, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 206, 207, 208, 214, 218, 219, 220, 221, 222, 223, 224, 225, 232, 235, 239, 240, 246, 248], "dosag": [0, 81, 101, 105], "strength": [0, 81, 101], "rout": 0, "durat": 0, "frequenc": [0, 24, 41, 101, 218, 219], "risk": [0, 175, 248], "factor": [0, 24, 175], "smoke": 0, "obes": 0, "diabet": [0, 50, 80], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 64, 88, 171, 206, 222], "subdivis": 0, "cell": [0, 12, 18, 19, 20, 22, 23, 24, 35, 64, 99, 171, 172, 206, 207, 214, 222], "structur": [0, 115, 131, 157, 191, 222, 239], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 68, 69, 73, 74, 88, 95, 98, 127, 146, 175, 180, 222, 248], "gender": [0, 69, 72, 88, 95, 98, 146, 180, 210], "height": [0, 15, 38, 216], "weight": [0, 22, 24, 41, 80, 81, 131, 177, 216], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 224], "sensit": [0, 43, 48, 52, 66, 78, 80, 95, 112, 113, 114, 130, 131, 132, 232], "data": [0, 22, 23, 24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 88, 89, 91, 94, 95, 98, 99, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 126, 127, 130, 131, 142, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208, 210, 214, 215, 218, 219, 222, 224, 232, 239], "patient": [0, 43, 52, 53, 55, 66, 69, 70, 72, 74, 81, 109, 110, 144, 151, 165, 169, 175, 178, 185, 200, 203, 222, 248], "address": [0, 43, 45, 50, 57, 58, 59, 60, 61, 68, 76, 80, 81, 89, 94, 95, 100, 109, 117, 120, 125, 126, 127, 162, 165, 166, 167, 197, 200, 201, 202, 207], "phone": [0, 69, 146, 180, 222], "email": [0, 69, 222], "date": [0, 42, 68, 69, 70, 73, 104, 117, 122, 142, 146, 180, 222, 235, 239], "identifi": [0, 49, 50, 51, 95, 114, 120, 122, 215, 222, 224, 248, 250], "For": [0, 19, 24, 41, 45, 48, 63, 64, 68, 69, 77, 80, 81, 84, 94, 98, 99, 103, 105, 112, 113, 114, 115, 117, 120, 130, 146, 147, 156, 157, 159, 160, 171, 172, 174, 180, 181, 190, 191, 194, 195, 206, 207, 208, 221], "inform": [0, 1, 23, 24, 66, 68, 70, 88, 95, 101, 104, 105, 112, 131, 146, 175, 180, 218, 224, 248], "visit": [0, 78, 112], "our": 0, "site": [0, 66], "built": [0, 24, 160, 195, 226], "top": [0, 50, 63, 64, 65, 99, 124, 159, 171, 172, 194, 206, 207, 224], "apach": [0, 176], "x": [0, 13, 20, 21, 24, 36, 130, 214], "us": [0, 1, 10, 12, 18, 19, 20, 22, 23, 24, 35, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 76, 77, 80, 81, 84, 87, 88, 89, 94, 95, 99, 100, 101, 103, 104, 107, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 127, 130, 131, 134, 142, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 169, 171, 172, 174, 176, 177, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 203, 206, 207, 208, 210, 215, 218, 219, 221, 222, 224, 226, 233, 237, 239, 246, 248], "need": [0, 10, 18, 23, 24, 33, 45, 66, 69, 80, 84, 99, 100, 110, 112, 117, 120, 146, 172, 180, 207, 224], "java": [0, 68, 102, 124, 125, 134, 136, 137, 143, 164, 166, 199, 201, 221, 242], "8": [0, 24, 63, 65, 81, 99, 130, 159, 171, 172, 194, 206, 207, 224], "ar": [0, 10, 19, 20, 21, 23, 24, 33, 41, 43, 48, 50, 51, 52, 53, 54, 55, 57, 58, 61, 63, 64, 65, 66, 68, 69, 72, 73, 76, 78, 80, 81, 84, 87, 89, 91, 95, 99, 101, 102, 103, 105, 107, 109, 112, 113, 114, 115, 120, 122, 124, 126, 127, 130, 131, 132, 140, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 165, 167, 171, 172, 174, 175, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 200, 202, 206, 207, 208, 210, 214, 218, 219, 222, 224, 235, 237, 239, 248, 250], "pyspark": [0, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 78, 80, 81, 84, 89, 94, 95, 98, 99, 100, 101, 104, 109, 112, 113, 115, 117, 121, 125, 126, 127, 140, 144, 146, 147, 151, 153, 156, 157, 159, 160, 161, 165, 166, 167, 169, 171, 172, 178, 180, 181, 185, 187, 190, 191, 194, 195, 196, 200, 201, 202, 203, 206, 207, 209, 210, 215, 218, 219, 222, 223, 224, 237, 246], "6": [0, 10, 24, 33, 47, 94, 114, 121, 160, 195, 224], "7": [0, 2, 25, 224], "recommend": [0, 76, 99, 172, 207], "basic": [0, 22, 24], "knowledg": [0, 76, 120], "framework": 0, "work": [0, 99, 131, 172, 207, 228, 248], "environ": [0, 68, 240], "befor": [0, 24, 45, 50, 99, 102, 124, 125, 130, 134, 137, 164, 166, 172, 199, 201, 207, 248], "pleas": [0, 41, 63, 64, 73, 94, 99, 113, 117, 120, 156, 159, 160, 171, 172, 190, 194, 195, 206, 207, 221], "refer": [0, 1, 41, 50, 68, 69, 70, 72, 73, 77, 112, 120, 146, 147, 180, 181, 239], "document": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 82, 84, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 130, 142, 144, 146, 147, 151, 153, 156, 157, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 191, 194, 195, 196, 200, 202, 203, 206, 207, 208, 210, 214, 218, 219, 223, 224, 237], "first": [0, 23, 24, 49, 51, 66, 68, 69, 78, 80, 99, 110, 112, 117, 146, 172, 180, 207, 224, 233], "let": [0, 112, 120], "": [0, 10, 24, 41, 45, 53, 68, 69, 72, 76, 80, 84, 102, 107, 109, 117, 120, 124, 125, 126, 127, 128, 131, 134, 136, 137, 164, 165, 166, 167, 175, 199, 200, 201, 202, 218, 219, 220, 222], "make": [0, 41, 66, 69, 70, 88, 102, 146, 180, 218], "sure": [0, 41, 69, 146, 180], "version": [0, 10, 33, 72, 101, 112, 138, 140, 175, 176, 221, 235, 248], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 224], "extra": [0, 48, 101], "index": [0, 13, 36, 43, 44, 99, 102, 130, 144, 178, 214, 215, 237], "url": [0, 41, 69, 222], "pypi": [0, 176], "secret": [0, 41, 176], "code": [0, 21, 24, 41, 66, 69, 70, 120, 131, 153, 175, 187, 222, 224, 226, 228, 232, 233, 234, 246, 248, 249], "upgrad": [0, 248], "part": [0, 24, 69, 70, 77, 147, 181, 214, 215, 240], "split": [0, 18, 24, 51, 89, 99, 130, 215, 218, 224, 237, 250], "e": [0, 24, 45, 50, 53, 63, 64, 65, 66, 69, 72, 81, 84, 99, 102, 109, 110, 114, 120, 127, 144, 146, 153, 159, 165, 171, 172, 178, 180, 187, 194, 200, 206, 207, 210, 214, 218, 219, 222, 235, 239, 250], "onli": [0, 20, 21, 24, 41, 50, 53, 69, 72, 88, 89, 95, 99, 107, 109, 112, 114, 117, 124, 126, 127, 130, 146, 165, 167, 172, 180, 200, 202, 207, 218, 219, 224], "avail": [0, 10, 21, 33, 50, 63, 64, 81, 95, 99, 101, 109, 126, 127, 159, 160, 165, 167, 171, 172, 194, 195, 200, 202, 206, 207, 221], "user": [0, 41, 66, 101, 120, 127, 219], "valid": [0, 10, 33, 41, 43, 69, 89, 99, 114, 144, 160, 172, 178, 195, 207, 215, 235], "licens": [0, 69, 101, 146, 176, 180, 222], "did": [0, 130], "receiv": [0, 24], "contact": [0, 222], "u": [0, 20, 24, 69, 99, 142, 172, 207, 235], "href": 0, "mailto": 0, "info": [0, 214], "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 41, 43, 45, 49, 50, 51, 53, 57, 58, 60, 63, 64, 65, 66, 68, 69, 70, 72, 74, 77, 80, 81, 84, 88, 91, 94, 95, 99, 101, 102, 105, 109, 110, 112, 114, 117, 120, 124, 125, 127, 130, 131, 134, 137, 138, 142, 144, 146, 160, 161, 164, 165, 166, 172, 178, 180, 195, 196, 199, 200, 201, 207, 209, 210, 215, 218, 219, 220, 222, 224, 226, 239, 240, 242, 248, 250, 251], "simpl": [0, 24, 84], "piec": [0, 51], "import": [0, 10, 33, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 104, 112, 113, 117, 120, 121, 130, 144, 146, 147, 151, 153, 156, 159, 160, 161, 169, 171, 172, 176, 178, 180, 181, 185, 187, 190, 194, 195, 196, 203, 206, 207, 216, 224, 226, 232, 241], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 63, 64, 65, 99, 109, 113, 115, 125, 126, 127, 140, 156, 157, 159, 165, 166, 167, 171, 172, 176, 190, 191, 194, 200, 201, 202, 206, 207, 210, 215, 218, 219, 222, 223, 226, 237, 246], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 63, 64, 65, 109, 115, 125, 126, 127, 140, 157, 159, 165, 166, 167, 171, 191, 194, 200, 201, 202, 206, 209, 210, 215, 218, 219, 222, 223, 224, 237, 243, 246], "builder": [0, 131, 176, 230], "appnam": [0, 176], "enterpris": 0, "master": [0, 176], "local": [0, 43, 63, 64, 65, 68, 80, 89, 99, 103, 109, 112, 115, 120, 125, 126, 127, 144, 146, 153, 157, 159, 160, 165, 166, 167, 171, 172, 174, 176, 178, 180, 187, 191, 194, 195, 200, 201, 202, 206, 207, 208], "config": [0, 66, 176], "driver": [0, 176, 222], "memori": [0, 22, 23, 24, 63, 65, 99, 109, 131, 159, 165, 171, 172, 176, 194, 200, 206, 207], "16": [0, 47, 224], "maxresults": [0, 176], "2g": 0, "jar": [0, 41, 176, 237, 246], "nlp_2": [0, 176], "11": [0, 9, 32, 45, 52, 68, 69, 73, 104, 146, 180, 224], "version_publ": 0, "getorcr": [0, 176], "main": [1, 84], "page": [1, 45, 214, 251], "workshop": [1, 24, 41, 77, 99, 147, 160, 172, 181, 195, 207], "hub": [1, 45, 63, 64, 81, 99, 112, 113, 120, 159, 160, 171, 172, 194, 195, 206, 207, 221], "welcom": 1, "python": [1, 19, 20, 21, 24, 131, 226, 228, 232, 233, 234, 242], "legal": [1, 53, 55, 63, 64, 65, 66, 99, 103, 112, 113, 115, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 176, 227], "financ": [1, 53, 55, 63, 64, 65, 66, 99, 103, 112, 113, 115, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 206, 208, 227], "contain": [1, 22, 23, 24, 41, 43, 44, 45, 52, 53, 55, 63, 64, 65, 68, 69, 70, 72, 73, 77, 84, 87, 88, 94, 95, 99, 101, 102, 112, 113, 117, 120, 121, 128, 131, 132, 136, 137, 138, 144, 146, 147, 150, 151, 153, 156, 159, 169, 171, 172, 178, 180, 181, 184, 185, 187, 190, 194, 203, 206, 207, 210, 215, 219, 220, 222, 224, 228, 232, 233, 234, 239], "how": [1, 48, 50, 53, 63, 64, 65, 73, 76, 84, 89, 94, 95, 99, 101, 110, 112, 117, 121, 124, 130, 159, 160, 171, 172, 194, 195, 206, 207], "exampl": [1, 10, 19, 24, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 130, 131, 144, 146, 147, 151, 153, 156, 157, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 191, 194, 195, 196, 200, 202, 203, 206, 207, 208, 222, 224, 236], "get": [1, 13, 36, 41, 43, 69, 74, 88, 94, 99, 109, 126, 127, 131, 144, 160, 165, 167, 176, 178, 195, 200, 202, 207, 215, 218, 219, 237], "start": [1, 10, 18, 22, 33, 43, 44, 45, 77, 95, 99, 112, 120, 144, 147, 153, 172, 176, 178, 181, 187, 207, 218, 219, 224, 235, 237, 250], "requir": [1, 22, 23, 24, 41, 43, 45, 57, 58, 63, 65, 73, 77, 99, 120, 121, 144, 147, 159, 161, 171, 172, 178, 181, 194, 196, 206, 207, 224, 226, 232, 240], "instal": [1, 10, 41, 240], "session": [1, 15, 16, 38, 39, 41, 210, 215, 218, 219, 224, 226, 232, 237, 246], "from": [1, 9, 10, 12, 16, 18, 20, 22, 23, 24, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 109, 112, 113, 114, 117, 120, 121, 122, 124, 125, 126, 127, 130, 131, 134, 137, 144, 146, 147, 151, 153, 156, 159, 160, 161, 164, 165, 166, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 214, 218, 219, 220, 221, 224, 232, 233, 236, 237], "api": [1, 110], "assertionmodel": [2, 25, 43, 45, 48, 144, 153, 178, 187], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 222], "cpu": [2, 23, 25], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 125, 126, 127, 130, 134, 137, 142, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 210, 214, 216, 218, 219, 220, 221, 222, 224, 226, 228, 233, 234, 235, 236, 237, 239, 240, 246, 250], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 47, 70, 104, 109, 126, 127, 160, 165, 167, 195, 200, 202, 224], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 89, 99, 144, 160, 172, 178, 195, 207, 218, 225, 245], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 52, 95, 98, 99, 160, 195, 224], "learning_r": [2, 4, 9, 25, 27, 32, 89], "01": [2, 15, 25, 38, 45, 68, 70, 73, 99, 104, 117, 146, 172, 180, 207, 224], "dropout": [2, 15, 24, 25, 38, 43, 89, 99, 144, 160, 172, 178, 195, 207], "15": [2, 10, 25, 33, 70, 95, 98, 104], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 13, 15, 17, 25, 36, 38, 40, 43, 45, 72, 99, 100, 115, 120, 144, 153, 157, 160, 172, 178, 187, 191, 195, 207, 210, 215, 218, 224, 227], "calcul": [2, 23, 24, 25, 43, 50, 99, 120, 144, 172, 175, 178, 207, 210, 215, 218, 219, 220, 248], "accuraci": [2, 8, 25, 31, 69, 99, 131, 172, 207], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34, 43], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 126, 127, 130, 131, 142, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 167, 169, 171, 172, 174, 175, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 202, 203, 206, 207, 208, 214, 218, 219, 232, 237, 239, 246], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 126, 127, 128, 130, 131, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 167, 169, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 202, 203, 206, 207, 208, 209, 214, 215, 218, 219, 220, 237, 239, 246], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 99, 144, 160, 172, 178, 195, 207, 225, 245, 250], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 42, 43, 50, 51, 52, 53, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 77, 84, 86, 88, 89, 91, 94, 95, 99, 101, 102, 104, 109, 110, 112, 113, 120, 122, 124, 125, 130, 131, 132, 136, 137, 142, 143, 146, 147, 153, 159, 160, 161, 165, 171, 172, 180, 181, 187, 194, 195, 196, 200, 206, 207, 210, 215, 219, 221, 222, 224, 225, 232, 237, 240, 245, 246, 250], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33, 41, 131, 226, 228, 232], "param": [4, 6, 10, 27, 29, 33, 41, 53, 68, 69, 72, 77, 95, 99, 102, 124, 125, 130, 134, 137, 138, 146, 164, 166, 172, 176, 180, 199, 201, 207, 210, 214, 215, 218, 219, 220, 224, 227, 228, 237, 242, 246], "run_test": [4, 6, 27, 29, 219], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 57, 58, 89, 161, 196, 227], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 10, 11, 24, 30, 34, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 82, 84, 86, 87, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 120, 122, 124, 125, 126, 127, 128, 130, 131, 132, 134, 137, 141, 144, 146, 147, 151, 157, 164, 166, 167, 172, 176, 178, 180, 181, 185, 191, 199, 201, 202, 207, 210, 215, 218, 219, 220, 224, 225, 232, 237, 246, 248], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32, 44, 99, 131, 172, 207, 225, 245], "is_valid": [8, 31], "fals": [8, 10, 12, 13, 15, 19, 22, 23, 24, 31, 33, 35, 36, 38, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 130, 131, 142, 144, 146, 147, 151, 153, 156, 157, 159, 160, 161, 165, 167, 169, 171, 172, 174, 175, 176, 178, 180, 181, 185, 187, 190, 191, 194, 195, 196, 200, 202, 203, 206, 207, 208, 210, 215, 218, 219, 222, 224, 237, 240, 242, 246, 250], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 16, 32, 33, 39, 41, 50, 51, 68, 69, 70, 89, 99, 102, 107, 109, 110, 112, 124, 126, 127, 146, 160, 165, 167, 172, 180, 195, 200, 202, 207, 218, 219, 222, 224, 227, 228, 232, 237, 239, 246], "enumer": [9, 32, 237], "deriv": [9, 32, 60, 61], "defin": [9, 22, 32, 41, 45, 48, 51, 52, 57, 58, 66, 78, 81, 87, 95, 99, 101, 104, 114, 120, 131, 132, 161, 172, 196, 207, 219, 237], "new": [9, 24, 32, 41, 43, 50, 54, 70, 74, 99, 101, 103, 107, 109, 112, 113, 120, 124, 126, 127, 138, 153, 156, 165, 167, 172, 174, 175, 187, 190, 200, 202, 207, 208, 209, 210, 214, 224, 233, 235, 248, 250], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 44, 53, 55, 70, 105, 113, 120, 151, 153, 169, 185, 187, 203, 215, 224, 248], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 89, 109, 126, 127, 160, 165, 167, 195, 200, 202, 250], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 45, 76, 77, 81, 89, 112, 113, 124, 144, 147, 156, 177, 178, 181, 190, 224], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 41, 109, 165, 200, 210, 225, 245], "predict": [9, 10, 15, 24, 32, 33, 38, 41, 43, 57, 58, 76, 89, 99, 112, 144, 161, 172, 178, 196, 207, 210, 214, 215, 218, 219, 225, 245, 250], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 115], "genericclassifi": [9, 32, 60, 61, 131], "default_model_node_nam": [9, 32], "except": [10, 33, 69, 91, 99, 101, 175, 218, 219, 240], "wrongtfvers": [10, 33], "rais": [10, 22, 23, 24, 33, 99, 226, 240], "tensorflow": [10, 12, 16, 21, 23, 33, 35, 39, 43, 63, 64, 65, 89, 99, 109, 112, 124, 126, 127, 131, 144, 159, 160, 165, 167, 171, 172, 178, 194, 195, 200, 202, 206, 207, 227], "current": [10, 24, 33, 63, 64, 65, 95, 99, 104, 109, 115, 125, 126, 127, 131, 140, 157, 159, 165, 166, 167, 171, 172, 191, 194, 200, 201, 202, 206, 207, 223, 240, 248, 250], "xx": [10, 33], "tensorflowaddonsneed": 10, "when": [10, 12, 24, 35, 41, 43, 44, 51, 66, 69, 81, 88, 95, 99, 100, 101, 102, 104, 110, 112, 120, 124, 126, 130, 144, 146, 153, 172, 175, 178, 180, 187, 207, 218, 219, 221, 224, 240], "addon": 10, "tfgraphbuild": [10, 33, 112, 131], "creat": [10, 12, 22, 23, 33, 35, 41, 44, 53, 66, 70, 104, 112, 131, 141, 214, 215, 218, 219, 224], "graph": [10, 12, 33, 35, 43, 99, 112, 131, 144, 158, 172, 176, 178, 192, 207, 225, 227], "ner_dl": [10, 11, 33, 34, 99, 172, 207], "generic_classifi": [10, 11, 33, 34, 92, 176, 227], "assertion_dl": [10, 11, 33, 34, 43, 144, 178], "relation_extract": [10, 33, 92, 111, 131, 154, 158, 188, 192, 227], "nlp": [10, 12, 33, 35, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 125, 126, 127, 130, 134, 147, 159, 160, 162, 165, 166, 167, 171, 172, 176, 181, 194, 195, 197, 200, 201, 202, 206, 207, 210, 221, 224, 227, 237, 246, 251], "paramet": [10, 23, 33, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 74, 76, 77, 78, 80, 81, 82, 84, 86, 87, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 127, 128, 132, 134, 138, 140, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 203, 206, 207, 208, 209, 214, 215, 218, 219, 221, 222, 224, 225, 226, 232, 233, 234, 235, 236, 245, 246, 248, 249], "dict": [10, 33, 41, 43, 52, 66, 68, 81, 84, 88, 94, 95, 101, 103, 109, 112, 113, 115, 117, 126, 127, 176, 210, 214, 218, 219, 220, 222, 228, 232, 233, 234, 237, 239, 242, 248, 250], "tf_graph": [10, 33, 112, 131, 224], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "return": [10, 13, 22, 23, 24, 33, 36, 41, 43, 45, 48, 50, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 76, 77, 80, 81, 88, 89, 94, 95, 99, 103, 109, 112, 113, 115, 117, 119, 120, 125, 126, 127, 140, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 175, 176, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 210, 214, 215, 218, 219, 220, 221, 222, 224, 225, 226, 228, 232, 233, 234, 237, 240, 242, 245, 246, 248, 249, 250], "automat": [10, 41, 69, 110, 115, 146, 157, 180, 191, 214], "file": [10, 16, 21, 33, 39, 41, 43, 52, 66, 68, 69, 72, 84, 89, 94, 95, 99, 101, 112, 117, 120, 131, 142, 144, 146, 153, 160, 172, 178, 180, 187, 195, 207, 210, 214, 215, 218, 219, 222, 224, 225, 233, 234, 235, 237, 239, 245, 246], "method": [10, 22, 33, 41, 50, 66, 68, 72, 89, 101, 112, 130, 146, 153, 180, 187, 214, 215, 218, 219, 224, 234, 239, 248, 251], "overridden": [10, 33], "child": [10, 33], "get_model_filenam": [10, 33], "implement": [10, 18, 19, 20, 22, 24, 59, 60, 61, 102, 115, 124, 125, 134, 136, 137, 157, 162, 164, 166, 191, 197, 199, 201, 218, 219], "check_build_param": [10, 33], "given": [10, 18, 22, 24, 33, 43, 50, 52, 53, 55, 68, 70, 72, 80, 81, 84, 88, 95, 99, 109, 112, 113, 115, 130, 131, 142, 146, 151, 157, 165, 169, 172, 175, 180, 185, 191, 200, 203, 207, 210, 218, 219, 232, 234, 235, 240, 248], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "default": [10, 12, 22, 23, 24, 33, 35, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 77, 80, 81, 84, 87, 88, 89, 94, 95, 99, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 122, 125, 126, 127, 130, 131, 132, 140, 144, 146, 147, 150, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 175, 176, 178, 180, 181, 184, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 210, 214, 215, 218, 219, 220, 221, 222, 224, 235, 237, 239, 242, 246, 250], "valu": [10, 22, 23, 33, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 77, 80, 81, 82, 84, 86, 87, 88, 89, 91, 94, 95, 99, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 120, 122, 124, 126, 127, 128, 130, 131, 132, 134, 138, 141, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 175, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 206, 207, 208, 214, 215, 216, 218, 219, 220, 222, 227, 232, 235, 239, 242, 250], "str": [10, 12, 13, 16, 33, 35, 36, 39, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 76, 77, 80, 81, 84, 86, 87, 88, 89, 94, 95, 98, 99, 101, 103, 105, 109, 110, 112, 113, 114, 115, 117, 120, 122, 125, 126, 127, 128, 130, 131, 132, 140, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 175, 176, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 232, 233, 234, 235, 236, 237, 239, 240, 242, 245, 246, 248, 249], "ani": [10, 23, 33, 41, 42, 69, 70, 81, 84, 88, 95, 99, 114, 122, 131, 172, 207, 210, 218, 219], "retriev": [10, 33, 99, 172, 207, 218, 219, 248], "found": [10, 33, 66, 77, 81, 147, 181, 218, 219, 232, 233], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 16, 19, 21, 22, 23, 33, 39, 63, 64, 65, 131, 159, 171, 194, 206], "genericclassifierapproach": [10, 33, 89, 227], "extend": [10, 33, 77, 99, 147, 160, 172, 181, 195, 207, 224], "base": [10, 20, 22, 24, 33, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 69, 72, 76, 77, 78, 80, 81, 82, 84, 86, 87, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 115, 117, 120, 121, 124, 125, 126, 127, 130, 132, 134, 136, 137, 138, 144, 146, 147, 151, 153, 156, 159, 160, 161, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 180, 181, 185, 187, 190, 194, 195, 196, 199, 200, 201, 202, 203, 206, 207, 208, 210, 215, 218, 219, 220, 224, 232, 237, 248], "sparknlp": [10, 33, 43, 45, 47, 48, 50, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 112, 113, 115, 117, 121, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 203, 206, 207, 208, 210, 215, 218, 219, 227, 232, 233, 237], "datafram": [10, 33, 41, 70, 88, 114, 120, 209, 210, 214, 215, 218, 219, 222, 223, 224, 225, 237, 239], "pd": [10, 33, 41, 70, 237], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 41, 52, 66, 68, 72, 74, 84, 86, 95, 101, 142, 146, 160, 180, 195, 218, 219, 224, 239], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 112, 131], "200": [10, 24, 33, 112, 131, 246], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 131], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "output_act": 10, "softmax": [10, 18, 120, 131], "loss_func": 10, "cross_entropi": 10, "gc_graph": [10, 33], "auto": [10, 33, 131], "save": [10, 12, 16, 33, 35, 39, 41, 43, 53, 63, 64, 65, 89, 99, 109, 112, 115, 125, 126, 127, 131, 142, 144, 157, 159, 160, 165, 166, 167, 171, 172, 178, 191, 194, 195, 200, 201, 202, 206, 207, 210, 214, 215, 218, 219, 224, 236, 246], "gcl": [10, 33], "pb": [10, 33, 89, 99, 112, 131, 172, 207], "we": [10, 22, 24, 41, 52, 53, 55, 57, 58, 69, 76, 81, 89, 99, 110, 120, 146, 150, 151, 153, 160, 161, 169, 175, 180, 184, 185, 187, 195, 196, 203], "modelfil": [10, 89], "gen_clf": [10, 33, 57, 58, 89, 161, 196], "setlabelcolumn": [10, 33, 57, 89, 99, 112, 131, 160, 161, 172, 195, 196, 207], "setinputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 130, 131, 141, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208], "featur": [10, 24, 33, 45, 86, 89, 95, 99, 112, 227], "setoutputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 141, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208], "setmodelfil": [10, 33, 89, 112], "setepochsnumb": [10, 33, 89, 112], "setbatchs": [10, 33, 43, 89, 99, 112, 113, 144, 160, 178, 195], "setfeaturesc": [10, 33, 89, 112], "zscore": [10, 33, 89, 112], "setfiximbal": [10, 33, 89, 112], "setlearningr": [10, 33, 43, 89, 112, 144, 178], "001": [10, 24, 33, 89, 99, 112, 172, 207], "setoutputlogspath": [10, 33, 43, 89], "log": [10, 33, 43, 45, 89, 99, 144, 160, 172, 178, 195, 207, 210, 215, 218, 219, 225, 245], "setvalidationsplit": [10, 33, 43, 89, 99, 112], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 45, 48, 49, 52, 66, 68, 72, 74, 76, 88, 95, 98, 100, 101, 104, 105, 109, 112, 113, 114, 120, 126, 127, 144, 146, 153, 156, 165, 167, 175, 178, 180, 187, 190, 200, 202], "features_asm": [10, 33, 89], "bool": [10, 12, 13, 33, 35, 36, 41, 43, 48, 50, 51, 52, 53, 63, 65, 66, 68, 69, 72, 74, 76, 77, 82, 84, 88, 89, 91, 94, 95, 99, 101, 105, 107, 109, 110, 112, 113, 114, 120, 124, 125, 126, 128, 130, 131, 132, 166, 175, 176, 201, 218, 219, 221, 222, 224, 226, 228, 232, 237, 240, 242, 246], "an": [10, 18, 19, 22, 23, 24, 33, 41, 43, 48, 51, 57, 58, 59, 66, 69, 72, 76, 77, 80, 81, 84, 86, 88, 94, 95, 99, 101, 103, 104, 110, 112, 115, 117, 120, 130, 131, 138, 144, 146, 147, 153, 160, 161, 162, 172, 174, 175, 178, 180, 181, 187, 195, 196, 197, 207, 208, 210, 215, 218, 219, 222, 224, 226, 237, 246, 248, 251], "otherwis": [10, 24, 33, 43, 45, 50, 57, 58, 59, 60, 61, 68, 69, 74, 76, 77, 80, 81, 86, 89, 94, 95, 99, 107, 109, 110, 112, 113, 117, 120, 124, 125, 126, 127, 146, 147, 162, 165, 166, 167, 172, 180, 181, 197, 200, 201, 202, 207, 210, 225, 240, 245, 250], "locat": [10, 41, 53, 55, 63, 64, 65, 66, 76, 84, 99, 101, 103, 112, 113, 115, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 206, 207, 208, 221, 222, 235], "where": [10, 12, 16, 23, 24, 33, 35, 39, 41, 48, 53, 55, 68, 70, 77, 84, 89, 94, 98, 99, 110, 112, 113, 117, 131, 146, 147, 150, 151, 156, 169, 172, 180, 181, 184, 185, 190, 203, 207, 214, 215, 218, 219, 224, 235], "logregclassifiertfgraphbuild": 10, "svmclassifiertfgraphbuild": 10, "fewshotclassifiertfgraphbuild": 10, "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 131, 144, 178, 227], "blstm_34_32_30_": [10, 33], "_": [10, 33, 47, 73, 74, 99, 172, 207], "format": [10, 23, 33, 41, 43, 66, 68, 69, 72, 84, 88, 94, 95, 98, 99, 101, 104, 117, 146, 172, 180, 207, 210, 214, 215, 218, 219, 220, 222, 224, 235, 239, 246], "setlabelcol": [10, 33, 43, 45, 58, 89, 120, 144, 153, 178, 187], "label": [10, 33, 41, 43, 45, 48, 51, 52, 54, 57, 58, 59, 60, 61, 63, 64, 65, 69, 84, 89, 95, 98, 99, 101, 103, 112, 113, 115, 119, 120, 131, 132, 143, 144, 146, 153, 157, 159, 160, 161, 162, 171, 172, 174, 177, 178, 180, 187, 191, 194, 195, 196, 197, 206, 207, 208, 214, 215, 218, 224, 225, 237, 246], "chunk": [10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 66, 68, 69, 70, 72, 76, 77, 80, 81, 84, 87, 94, 95, 98, 100, 101, 102, 104, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122, 124, 126, 127, 130, 144, 146, 147, 150, 151, 156, 157, 161, 165, 167, 169, 178, 180, 181, 184, 185, 190, 191, 196, 200, 202, 203, 214, 224, 225, 245, 246, 250], "128": [10, 12, 24, 33, 35, 43, 63, 64, 65, 130, 144, 159, 171, 178, 194, 206], "setdropout": [10, 33, 43, 89, 99, 144, 160, 178, 195], "setepoch": [10, 33, 43, 144, 178], "setstartcol": [10, 33, 43, 45, 77, 144, 178], "setendcol": [10, 33, 43, 45, 144, 178], "end": [10, 23, 33, 43, 44, 45, 50, 68, 69, 95, 98, 99, 110, 112, 124, 126, 144, 146, 172, 175, 178, 180, 207, 218, 219, 224, 235, 237, 250], "setmaxsentlen": [10, 33, 43, 144, 178], "250": [10, 33, 43, 81, 144, 178], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 99, 131], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 99, 131, 172, 207, 227], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38, 99, 172, 207], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38, 99, 172, 207], "12": [10, 33, 47, 70, 104, 176, 224], "medic": [10, 120, 131, 210, 222, 236, 248], "ner": [10, 15, 16, 33, 38, 39, 41, 43, 45, 50, 51, 52, 53, 55, 64, 68, 69, 70, 72, 74, 76, 80, 81, 88, 92, 95, 110, 114, 115, 143, 144, 146, 151, 157, 158, 169, 170, 176, 178, 180, 185, 191, 192, 203, 204, 210, 215, 218, 219, 224, 227, 237, 246], "is_med": [10, 12, 33, 35, 210], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 80, 99, 112, 113, 156, 172, 190, 207], "sentenc": [10, 13, 15, 33, 36, 38, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 59, 63, 64, 65, 66, 68, 69, 72, 74, 76, 78, 80, 81, 82, 84, 88, 94, 95, 98, 99, 100, 101, 102, 103, 113, 114, 115, 117, 119, 120, 122, 124, 126, 130, 142, 144, 146, 150, 151, 153, 156, 157, 159, 160, 162, 169, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 197, 203, 206, 207, 208, 210, 214, 215, 218, 219, 224, 237], "token": [10, 33, 41, 42, 43, 44, 45, 47, 48, 50, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 84, 88, 94, 95, 98, 99, 100, 101, 103, 107, 109, 112, 113, 114, 115, 120, 122, 124, 126, 127, 130, 131, 142, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 176, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208, 214, 215, 218, 219, 224, 227, 237], "setmaxepoch": [10, 33, 99, 160, 172, 195, 207], "setrandomse": [10, 33, 99, 102, 107, 124, 172, 207], "setverbos": [10, 33, 43, 99, 172, 207], "setevaluationlogextend": [10, 33], "setincludeconfid": [10, 33, 43, 99, 215], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 99], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 112, 131, 224, 227], "6000": [10, 33], "relu": [10, 24, 33, 131], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 53, 55, 80, 81, 104, 131, 150, 151, 169, 184, 185, 203, 224], "pos_tag": [10, 33, 81, 112, 114, 115, 131, 214], "train_ner_chunk": [10, 33, 112, 131, 224], "depend": [10, 23, 24, 33, 42, 54, 81, 84, 99, 109, 112, 113, 114, 115, 119, 122, 131, 156, 165, 172, 190, 200, 207, 210, 219, 237], "70": [10, 33, 52, 99, 207, 246], "setfroment": [10, 33, 112], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33, 224], "settoent": [10, 33, 112], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33, 224], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 50, 86, 95, 99, 114, 131, 172, 207, 218, 219, 224, 246, 248], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 84, 89, 94, 95, 99, 102, 103, 109, 112, 113, 115, 117, 120, 125, 126, 127, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 221, 235, 248, 249], "spark": [10, 33, 41, 42, 43, 45, 47, 49, 50, 52, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 98, 99, 101, 103, 104, 105, 109, 112, 113, 114, 115, 117, 120, 121, 122, 125, 126, 127, 140, 142, 143, 144, 146, 147, 156, 159, 160, 162, 165, 166, 167, 171, 172, 174, 176, 178, 180, 181, 190, 194, 195, 197, 200, 201, 202, 206, 207, 208, 210, 215, 218, 219, 221, 222, 223, 224, 226, 227, 228, 232, 234, 237, 239, 246, 251], "model_nam": [10, 33, 235], "want": [10, 33, 41, 42, 43, 51, 53, 55, 66, 68, 69, 76, 81, 84, 99, 102, 109, 110, 112, 114, 120, 122, 144, 146, 151, 165, 178, 180, 185, 200, 222], "configur": [10, 33, 41, 68, 91, 226, 232], "path": [10, 33, 41, 43, 45, 49, 52, 53, 55, 57, 58, 66, 68, 80, 84, 89, 94, 95, 99, 101, 103, 109, 112, 117, 120, 131, 144, 146, 150, 151, 153, 160, 169, 172, 174, 178, 180, 184, 185, 187, 195, 203, 207, 208, 210, 214, 215, 218, 219, 224, 225, 233, 234, 235, 236, 237, 239, 245, 246], "rb": [10, 33], "filenam": [10, 25, 33], "doesn": [10, 24, 112], "modulenotfounderror": 10, "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 43, 50, 53, 63, 65, 74, 78, 88, 112, 113, 122, 127, 130, 159, 171, 175, 194, 206, 222, 235, 248], "descript": [10, 33, 41, 50, 109, 120, 153, 165, 187, 200, 219, 224, 233, 248], "everi": [10, 19, 33, 41, 68, 99, 146, 172, 180, 207, 218, 221], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 53, 55, 76, 81, 151, 169, 185, 203], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "int": [12, 24, 35, 41, 42, 43, 50, 53, 57, 58, 63, 64, 65, 69, 70, 72, 76, 81, 82, 89, 99, 102, 104, 107, 109, 112, 113, 114, 120, 122, 124, 126, 127, 130, 131, 134, 160, 167, 175, 195, 202, 214, 215, 218, 219, 222, 224, 228, 236, 239, 246, 248], "lstm_size": [12, 35, 99, 172, 207], "gpu_devic": [12, 35], "nerdl": [12, 35, 210], "arg": [12, 13, 16, 22, 23, 24, 35, 36, 39, 41, 43, 53, 54, 55, 63, 64, 65, 66, 69, 80, 99, 103, 110, 112, 113, 115, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 206, 207, 208, 218, 221, 223, 224, 228, 237, 240], "folder": [12, 16, 35, 39, 43, 63, 64, 65, 89, 99, 109, 113, 115, 125, 126, 127, 131, 144, 156, 157, 159, 160, 165, 166, 167, 171, 172, 178, 190, 191, 194, 195, 200, 201, 202, 206, 207, 221, 235, 246], "number": [12, 22, 23, 24, 35, 41, 43, 45, 50, 53, 57, 58, 68, 69, 70, 82, 84, 89, 95, 99, 107, 109, 110, 112, 113, 120, 124, 126, 127, 131, 144, 146, 156, 160, 161, 165, 167, 172, 178, 180, 190, 195, 196, 200, 202, 207, 210, 214, 215, 218, 219, 222, 228, 236, 239, 250], "uniqu": [12, 35, 76, 99], "tag": [12, 16, 35, 39, 41, 43, 52, 69, 95, 98, 99, 100, 101, 112, 144, 146, 160, 172, 178, 180, 195, 207, 214, 218, 225, 227, 239, 245, 250], "dimens": [12, 19, 22, 24, 35, 99, 172, 207], "word": [12, 13, 35, 36, 53, 55, 69, 76, 84, 98, 101, 103, 105, 107, 120, 121, 124, 131, 146, 151, 160, 174, 180, 185, 195, 208, 210, 218, 219, 250], "charact": [12, 13, 16, 35, 36, 39, 68, 72, 76, 84, 101, 117, 130, 146, 180, 218, 219], "option": [12, 23, 24, 35, 41, 43, 45, 50, 52, 57, 58, 59, 60, 61, 66, 68, 69, 76, 80, 81, 84, 86, 89, 94, 95, 99, 101, 109, 117, 120, 125, 126, 127, 130, 131, 160, 162, 165, 166, 167, 172, 195, 197, 200, 201, 202, 207, 214, 218, 219, 221, 222, 224, 226, 239, 240, 246], "size": [12, 22, 23, 24, 35, 43, 63, 65, 89, 99, 107, 124, 130, 131, 134, 144, 159, 160, 171, 172, 178, 194, 195, 206, 207, 216], "hidden": [12, 15, 24, 35, 38, 64, 131, 171, 206, 216], "lstm": [12, 22, 24, 35, 99, 172, 207], "disk": [12, 16, 35, 39, 43, 89, 99, 112, 144, 160, 172, 178, 195, 207], "which": [12, 19, 23, 24, 35, 50, 51, 52, 60, 61, 63, 64, 65, 66, 68, 80, 81, 86, 88, 91, 95, 99, 101, 103, 104, 107, 109, 112, 113, 114, 115, 117, 120, 124, 126, 127, 130, 131, 140, 144, 146, 153, 157, 159, 165, 167, 171, 172, 174, 178, 180, 187, 191, 194, 200, 202, 206, 207, 208, 214, 215, 218, 219, 240, 248], "gpu": [12, 23, 35, 176], "being": [12, 13, 24, 35, 36, 69, 122, 130, 131, 146, 180, 248], "datasetencod": [13, 36, 227], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "encod": [13, 16, 36, 39, 103, 112, 113, 115, 131, 156, 157, 160, 174, 190, 191, 195, 208], "shuffl": [13, 36, 160, 195], "lower": [13, 36, 52, 53, 68, 77, 95, 99, 146, 147, 172, 180, 181, 207, 218], "case": [13, 18, 22, 24, 36, 41, 43, 44, 48, 50, 52, 53, 63, 65, 66, 68, 77, 78, 80, 81, 84, 94, 95, 99, 110, 112, 113, 114, 130, 132, 146, 147, 159, 171, 172, 180, 181, 194, 206, 207, 218, 219, 250], "remov": [13, 36, 50, 52, 88, 95, 105, 114, 218, 219, 232, 248], "addit": [13, 24, 36, 45, 84, 99, 114, 120, 126, 153, 160, 172, 187, 195, 207, 248], "white": [13, 36, 48, 52, 70, 78, 87, 95, 101, 132, 216], "space": [13, 23, 24, 36, 214, 218], "process": [13, 24, 36, 43, 48, 52, 63, 64, 65, 69, 77, 78, 87, 89, 91, 95, 99, 101, 109, 112, 113, 120, 124, 126, 127, 130, 131, 132, 144, 147, 153, 156, 159, 165, 171, 172, 178, 181, 187, 190, 194, 200, 206, 207, 210, 215, 218, 219, 224, 228, 232, 233, 234, 246], "get_char_index": [13, 36], "list": [13, 22, 23, 36, 41, 43, 45, 48, 52, 53, 57, 58, 63, 64, 65, 69, 72, 78, 81, 84, 87, 95, 99, 100, 101, 102, 103, 107, 109, 110, 112, 113, 114, 115, 117, 120, 122, 124, 126, 127, 128, 130, 131, 132, 144, 146, 153, 157, 165, 167, 172, 174, 175, 178, 180, 187, 191, 200, 202, 207, 208, 214, 215, 218, 219, 221, 222, 223, 224, 225, 232, 235, 237, 239, 242, 245, 246, 248, 250, 251], "outpu": [13, 36], "layer": [13, 23, 24, 36, 43, 60, 63, 64, 65, 89, 99, 131, 144, 159, 171, 172, 178, 194, 206, 207], "nermodel": [15, 38, 43, 48, 98, 99, 101, 144, 172, 178, 207], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 47, 68, 73, 110, 120, 146, 153, 180, 187, 224], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 99, 172, 207, 227], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 57, 58, 63, 64, 65, 68, 77, 86, 95, 99, 100, 109, 124, 126, 127, 128, 144, 146, 147, 159, 160, 161, 165, 167, 171, 172, 178, 180, 181, 194, 195, 196, 200, 202, 206, 207, 215], "fill": [15, 38, 102], "l": [15, 38, 69, 72, 224], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 63, 65, 89, 99, 131, 144, 159, 160, 171, 172, 178, 194, 195, 206, 207], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 45, 70, 74, 76, 88, 99, 112, 122, 144, 172, 178, 207], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 53, 55, 80, 81, 151, 185], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 47, 122], "lr": [15, 38, 43, 99, 160, 172, 195, 207], "po": [15, 38, 42, 52, 99, 112, 122, 143, 172, 207, 214, 218, 227, 237], "65": [15, 38, 224], "measur": [15, 38, 50, 130, 175, 248], "20": [15, 24, 38, 70, 89, 104, 130, 160, 195], "get_softmax": [15, 38], "score": [15, 38, 43, 50, 59, 60, 61, 89, 99, 103, 112, 115, 144, 157, 162, 172, 174, 178, 191, 197, 207, 208, 214, 215, 220, 225, 245, 250], "threshold": [15, 38, 52, 53, 69, 76, 81, 95, 101, 103, 112, 113, 120, 146, 180, 214, 215, 225, 245], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "restor": [16, 39, 43, 45, 50, 57, 58, 59, 60, 61, 63, 64, 65, 68, 76, 80, 81, 89, 94, 95, 99, 109, 115, 117, 120, 125, 126, 127, 131, 157, 159, 162, 165, 166, 167, 171, 172, 191, 194, 197, 200, 201, 202, 206, 207, 232], "directori": [16, 39, 41, 221, 234], "save_model": [16, 39], "separ": [16, 39, 41, 50, 68, 72, 95, 99, 101, 112, 114, 117, 130, 142, 172, 207, 210, 214, 239, 242], "variabl": [16, 20, 22, 24, 39, 68, 109, 126, 127, 165, 167, 200, 202], "sentencegroup": [17, 40, 227], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 45, 63, 64, 65, 68, 69, 72, 76, 95, 107, 109, 124, 126, 127, 130, 131, 144, 146, 159, 165, 167, 171, 178, 180, 194, 200, 202, 206, 215, 218, 219], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 76, 99, 112, 210, 224], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 50, 131], "ad": [18, 51, 99, 101, 131, 172, 207, 218, 219, 226, 232, 248], "note": [18, 43, 99, 160, 172, 195, 207, 232, 250], "mai": [18, 22, 24, 44, 53, 66, 68, 77, 81, 99, 114, 121, 131, 147, 175, 181], "effici": [18, 19, 22, 23, 41], "wrapper": [18, 20, 24, 110, 143, 242], "instead": [18, 20, 45, 63, 65, 99, 218], "concaten": [18, 23, 50, 233], "whole": [18, 50], "sequenc": [18, 19, 22, 23, 63, 65, 69, 70, 131, 146, 159, 180, 194], "your": [18, 41, 51, 94, 99, 117, 131, 160, 172, 176, 195, 207, 222], "time": [18, 19, 20, 23, 24, 41, 69, 72, 99, 124, 131, 146, 180, 207, 218, 228, 248], "do": [18, 23, 48, 66, 95, 99, 101, 102, 132, 218, 219], "feed": [18, 63, 65, 99], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 76], "state": [18, 22, 23, 24, 64, 99, 109, 126, 160, 165, 171, 172, 195, 200, 206, 207, 218, 222, 224, 248], "run": [18, 22, 23, 24, 131, 218, 219, 228], "num_proj": [18, 24], "activ": [18, 24, 69, 112, 113, 131, 156, 190, 210, 215, 218, 219], "input_s": [18, 22, 23, 24], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41, 221], "construct": [19, 24, 64, 171, 206], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22], "object": [19, 41, 54, 63, 64, 65, 99, 112, 131, 143, 159, 160, 171, 172, 194, 195, 206, 207], "repres": [19, 24, 41, 50, 51, 52, 69, 84, 94, 95, 120, 131, 146, 180, 246, 248], "A": [19, 22, 23, 24, 47, 50, 53, 55, 63, 64, 65, 66, 69, 80, 81, 84, 89, 94, 95, 98, 99, 100, 101, 103, 107, 109, 112, 113, 115, 117, 120, 124, 126, 127, 131, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 165, 167, 171, 172, 174, 175, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 200, 202, 206, 207, 208, 214, 215, 218, 221, 222, 224, 228, 233, 234, 239, 248], "entir": [19, 22, 63, 65, 99], "expand": 19, "In": [19, 24, 44, 50, 66, 70, 81, 84, 94, 99, 110, 113, 117, 131, 156, 160, 172, 190, 195, 207], "effect": [19, 69, 72, 124, 146, 180], "recurr": [19, 22, 23, 24, 95, 98, 99, 172, 207], "network": [19, 22, 23, 24, 60, 99, 131, 172, 207], "unlik": [19, 22, 109, 165, 200], "subclass": [19, 22, 81, 102, 124, 125, 134, 137, 164, 166, 199, 201], "onc": [19, 99, 107, 113, 124, 156, 190], "put": [19, 33, 76, 121, 160, 195], "loop": [19, 109, 126, 127, 165, 167, 200, 202], "insid": [19, 101, 160, 195], "usual": [19, 99, 101, 115, 120, 157, 191], "lead": [19, 44, 131], "much": [19, 22, 89, 121, 160, 195], "complex": [19, 131], "less": [19, 23, 69, 99, 146, 172, 180, 207], "must": [19, 22, 23, 24, 43, 45, 50, 53, 69, 70, 77, 88, 94, 110, 117, 121, 144, 147, 178, 181], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 63, 64, 65, 99, 159, 171, 172, 176, 194, 206, 207, 210, 227], "v1": 19, "nn": [19, 52, 100], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 99, 172, 207], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22, 68, 95], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": 20, "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 76, 120, 176], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 50, 80, 81, 99, 124, 131, 250], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 48, 99, 207, 232], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 53, 224], "sigmoid": [20, 131], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 68, 72, 231], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": [20, 227], "scheme": [20, 98, 224], "distribut": [21, 43, 89, 99, 112, 120, 140, 144, 153, 160, 172, 178, 187, 195, 207, 210], "origin": [21, 24, 41, 53, 57, 58, 69, 72, 74, 101, 104, 120, 131, 146, 153, 161, 175, 180, 187, 196, 218, 219, 250], "sourc": [21, 24, 53, 55, 63, 64, 65, 66, 69, 72, 77, 95, 99, 101, 103, 112, 113, 115, 117, 128, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 206, 208, 224, 232, 239], "modifi": [21, 88, 95, 98, 101, 219], "chang": [21, 24, 95, 101, 131, 214, 218, 219, 240, 248], "just": [21, 69, 78, 99, 172, 207, 218, 219], "therefor": [21, 24], "all": [21, 24, 41, 50, 51, 53, 57, 58, 63, 65, 68, 69, 72, 81, 84, 88, 89, 99, 101, 105, 107, 110, 112, 114, 120, 124, 128, 130, 131, 140, 146, 153, 161, 172, 180, 187, 196, 207, 218, 219, 232, 234, 235, 237, 246, 251], "function": [21, 41, 43, 53, 60, 61, 87, 101, 120, 131, 132, 142, 209, 224, 248, 251], "enabl": [21, 24, 43, 48, 52, 68, 74, 99, 130, 131, 172, 207, 233], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "add": [22, 24, 44, 99, 101, 104, 105, 110, 114, 130, 172, 207, 209, 214, 218, 219, 222, 232], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 50, 84, 88, 95, 109, 112, 126, 127, 128, 130, 165, 167, 200, 202], "reduc": [22, 24], "scale": [22, 24, 53, 89, 112], "begin": [22, 23, 24, 44, 51, 70, 77, 95, 98, 99, 101, 112, 114, 120, 147, 153, 181, 187, 218, 219, 224, 237], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 33, 41, 43, 50, 52, 53, 66, 76, 80, 88, 94, 95, 99, 101, 102, 105, 109, 120, 124, 125, 130, 134, 137, 144, 160, 164, 165, 166, 172, 178, 195, 199, 200, 201, 207, 210, 214, 215, 218, 219, 220, 221, 224, 226, 232, 235, 239], "faster": [22, 63, 65, 131, 159, 171, 194, 206], "bia": [22, 24, 176, 212], "matric": [22, 24], "long": [22, 24, 53, 109, 165, 175, 200, 224], "scope": [22, 23, 24, 43, 102, 144, 178], "match": [22, 23, 43, 45, 53, 63, 65, 66, 68, 76, 77, 84, 94, 95, 100, 117, 130, 144, 146, 147, 159, 171, 178, 180, 181, 194, 206, 219, 232], "inputs_shap": [22, 24], "short": [22, 24, 53, 109, 165, 200], "term": [22, 24, 43, 57, 58, 68, 69, 72, 131, 144, 146, 161, 175, 178, 180, 196, 218, 219, 222], "lstmblockwrapp": 22, "helper": [22, 23, 141, 222, 235], "housekeep": 22, "altern": 22, "similar": [22, 24, 50, 69, 82, 146, 180, 215, 227, 250], "type": [22, 23, 24, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 76, 77, 78, 80, 81, 84, 88, 89, 94, 95, 98, 99, 100, 101, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 126, 127, 130, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 200, 202, 203, 206, 207, 208, 218, 219, 220, 225, 233, 237, 245, 246, 250], "_call_cel": 22, "properti": [22, 23, 51, 69, 138, 146, 180], "unit": [22, 24, 105, 112, 113, 131, 156, 190], "initial_st": 22, "sequence_length": [22, 23], "d": [22, 24, 41, 69, 117, 222], "tensor": [22, 23, 24, 131], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24, 102, 176, 214, 218, 219, 232, 246], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 54, 86], "_num_unit": 22, "expect": [22, 104, 224], "zero": [22, 23, 103, 115, 157, 174, 191, 208], "ha": [22, 23, 24, 41, 43, 48, 50, 52, 54, 57, 58, 66, 68, 69, 70, 77, 80, 91, 99, 101, 102, 104, 110, 112, 117, 126, 127, 130, 144, 147, 160, 161, 167, 172, 178, 181, 195, 196, 202, 207, 215, 246], "heterogen": 22, "specifi": [22, 24, 43, 57, 58, 69, 70, 81, 88, 89, 95, 98, 99, 115, 128, 130, 144, 157, 160, 161, 172, 178, 191, 195, 196, 207, 224, 226, 232, 233, 234, 235, 248], "each": [22, 23, 24, 41, 43, 45, 50, 57, 58, 68, 80, 81, 84, 88, 89, 94, 95, 99, 102, 109, 110, 114, 115, 117, 130, 131, 144, 146, 157, 160, 161, 172, 178, 180, 191, 195, 196, 207, 210, 214, 215, 218, 219, 220, 235, 237, 246], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 50, 57, 58, 61, 79, 81, 86, 89, 161, 196], "element": [22, 23, 134, 214, 242], "pair": [22, 24, 41, 52, 81, 95, 101, 110, 112, 113, 114, 115, 157, 191, 232], "final": [22, 23, 53, 130, 232], "cell_stat": 22, "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 50, 51, 53, 60, 69, 82, 86, 99, 101, 160, 172, 195, 207, 210, 214, 218, 237, 246], "both": [22, 23, 24, 44, 64, 66, 68, 69, 72, 80, 81, 99, 105, 112, 146, 171, 172, 175, 180, 206, 207, 210, 218, 219, 222, 233, 234], "than": [22, 43, 50, 52, 69, 95, 99, 102, 109, 120, 146, 165, 172, 180, 200, 207], "abov": [22, 124, 250], "consist": [22, 24, 50, 69, 72, 81, 115, 117, 146, 157, 180, 191, 214, 215, 218, 222, 239], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 60, 99, 131, 172, 207], "stack": [23, 24], "combin": [23, 24, 68, 80, 101, 102, 110, 175, 218, 219], "backward": 23, "next": [23, 91, 101, 104], "bidirectional_rnn": 23, "doe": [23, 24, 95, 99, 172, 207, 235], "share": [23, 24, 53, 81], "between": [23, 24, 41, 43, 50, 51, 59, 60, 61, 69, 80, 81, 82, 94, 99, 100, 101, 105, 112, 113, 114, 115, 120, 130, 131, 144, 146, 156, 157, 160, 162, 172, 178, 180, 190, 191, 195, 197, 207, 215, 218, 219, 222, 224, 242, 248, 250], "direct": [23, 24, 41, 112, 113, 114, 131, 156, 190], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 50, 210], "1303": 23, "5778": 23, "instanc": [23, 41, 81, 112, 113, 120, 138, 156, 190, 210, 226], "one": [23, 24, 41, 42, 43, 63, 65, 79, 80, 81, 89, 91, 95, 99, 101, 110, 114, 117, 120, 130, 144, 172, 178, 207, 214, 218, 219, 222, 233, 235], "per": [23, 24, 41, 43, 45, 63, 65, 69, 76, 89, 99, 101, 112, 144, 160, 172, 178, 195, 207, 225, 245, 250], "nest": 23, "appropri": [23, 41, 219], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 50, 68, 69, 72, 81, 84, 95, 99, 101, 109, 110, 126, 127, 146, 165, 167, 172, 180, 200, 202, 207, 210, 215, 218, 219], "correspond": [23, 50, 59, 60, 61, 69, 76, 80, 88, 146, 162, 180, 197, 214, 215, 218, 219, 220, 248], "either": [23, 45, 50, 68, 77, 84, 98, 110, 112, 117, 120, 121, 147, 160, 181, 195, 240], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": [23, 226], "cell_bw": 23, "empti": [23, 77, 81, 89, 95, 99, 110, 112, 120, 147, 172, 181, 207, 224], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 45, 57, 58, 99, 161, 172, 196, 207, 218, 219, 237], "parallel": 23, "those": [23, 41, 50, 70, 101, 114], "tempor": 23, "trade": 23, "off": [23, 99, 144, 160, 172, 178, 195, 207], "take": [23, 63, 65, 69, 80, 86, 89, 94, 110, 124, 130, 138, 146, 159, 175, 180, 194, 214, 215, 239], "while": [23, 41, 44, 69, 99, 104, 120, 124, 131, 153, 172, 187, 207, 210], "smaller": [23, 131], "longer": [23, 95, 131, 215], "bit": [23, 63, 65, 159, 194], "becaus": [23, 78, 102, 124, 125, 134, 137, 164, 166, 199, 201, 224], "avoid": [23, 24, 41, 44, 50, 210, 215, 218, 219], "transpos": 23, "howev": [23, 52, 99, 172, 207], "most": [23, 50, 81, 99, 130, 172, 207, 215], "major": 23, "so": [23, 24, 61, 78, 99, 160, 172, 195, 207], "accept": [23, 160, 195], "emit": [23, 91, 99, 101], "form": [23, 57, 58, 69, 76, 81, 84, 94, 99, 105, 110, 112, 117, 160, 161, 172, 195, 196, 207], "transpar": [23, 216], "swap": [23, 218, 219], "produc": [23, 24, 88, 95, 101], "infer": [23, 24, 99, 115, 131, 157, 172, 191, 207], "back": 23, "prop": 23, "would": [23, 121, 130, 160, 176, 195], "typic": 23, "fit": [23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 77, 78, 80, 81, 84, 86, 88, 89, 94, 95, 99, 100, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 120, 121, 126, 127, 144, 146, 147, 151, 153, 156, 159, 160, 161, 165, 167, 169, 171, 172, 174, 178, 180, 181, 185, 187, 190, 194, 195, 196, 200, 202, 203, 206, 207, 208, 246], "veri": [23, 53, 69, 99, 130, 146, 172, 180, 207], "minim": [23, 82, 103, 112, 113, 115, 156, 157, 174, 190, 191, 208], "perform": [23, 24, 43, 68, 69, 72, 91, 99, 101, 109, 114, 124, 125, 126, 131, 146, 165, 166, 172, 180, 200, 201, 207, 210, 225, 245, 250], "penalti": [23, 91, 99, 101], "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "non": [24, 43, 81], "peephol": 24, "pdf": [24, 246], "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 89, 99, 112, 120, 131, 144, 160, 172, 178, 195, 207], "continu": [24, 91, 101, 120, 153, 187], "iet": 24, "850": 24, "855": 24, "1999": [24, 104], "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 99, 172, 207], "larg": [24, 63, 65, 99, 124, 130, 159, 171, 172, 194, 206, 207], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": [24, 59, 162, 197], "al": [24, 59, 162, 197], "search": [24, 43, 76, 99, 120, 144, 153, 172, 178, 187, 207, 227, 232], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41, 131], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 53, 69, 84, 110, 130, 146, 180, 214, 218, 219, 224, 234], "intern": [24, 99, 101, 109, 120, 126, 138, 165, 172, 176, 200, 207, 221, 222, 224, 248], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 45, 51, 52, 53, 55, 57, 58, 66, 69, 70, 77, 86, 88, 89, 95, 98, 99, 112, 114, 120, 122, 127, 128, 130, 131, 144, 146, 147, 150, 151, 153, 160, 161, 169, 172, 178, 180, 181, 184, 185, 187, 195, 196, 203, 207, 209, 210, 215, 218, 219, 222, 223, 224, 237, 239], "c_state": 24, "m_state": 24, "after": [24, 45, 57, 58, 63, 64, 65, 99, 104, 109, 112, 159, 161, 165, 171, 194, 196, 200, 206, 218], "read": [24, 43, 52, 66, 68, 86, 94, 95, 101, 117, 130, 160, 195, 214, 218, 219, 224, 227], "previou": [24, 250], "wa": [24, 41, 43, 53, 55, 70, 72, 74, 81, 110, 130, 144, 151, 160, 169, 178, 185, 195, 203, 228], "here": 24, "cannot": [24, 240], "via": [24, 48, 52], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 45, 50, 72, 76, 99, 107, 124, 130, 172, 207, 236, 242], "sainath": 24, "bo": 24, "li": [24, 130], "pattern": [24, 41, 68, 69, 84, 95, 100, 105, 109, 117, 130, 146, 165, 175, 180, 200, 218, 237], "v": [24, 45, 110, 225, 245], "convolut": 24, "lvcsr": 24, "task": [24, 41, 63, 64, 65, 115, 124, 157, 159, 171, 191, 194, 206, 224, 237], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": [24, 214], "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 50, 89, 109, 214, 226, 228, 232], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "affect": [24, 50, 126, 127, 167, 202], "real": [24, 99, 172], "onlin": 24, "system": [24, 68, 222], "two": [24, 50, 52, 54, 68, 69, 78, 79, 95, 101, 110, 146, 180, 233, 248], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 57, 58, 120, 124, 215, 218], "srivastava": 24, "j": [24, 84], "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 69, 88, 120, 131, 146, 180, 218, 219, 226, 249], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": [24, 175], "ugrnncel": 24, "updat": [24, 99, 207, 214, 233, 234, 235, 237, 248], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": [24, 84], "determin": [24, 48, 50, 51, 52, 78, 82, 95, 112, 114, 115, 130, 131, 132, 157, 191], "whether": [24, 43, 48, 50, 51, 52, 53, 54, 57, 58, 63, 65, 66, 68, 69, 72, 76, 77, 78, 82, 84, 88, 89, 94, 95, 99, 101, 105, 107, 109, 110, 112, 113, 114, 115, 120, 124, 126, 127, 128, 130, 131, 132, 144, 146, 147, 153, 157, 159, 160, 161, 165, 167, 171, 172, 176, 178, 180, 181, 187, 191, 194, 195, 196, 200, 202, 206, 207, 210, 219, 225, 226, 228, 232, 240, 242], "integr": 24, "instantan": 24, "idea": [24, 131], "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": [24, 81, 105, 130, 225, 245, 250], "design": 24, "improv": [24, 44, 99, 109, 115, 126, 131, 157, 165, 172, 191, 200, 207], "flow": [24, 131], "through": [24, 41, 66, 237], "dimension": 24, "y": [24, 72, 74], "To": [24, 43, 45, 48, 52, 63, 64, 65, 66, 73, 112, 117, 120, 159, 171, 194, 206, 224], "achiev": [24, 50, 99, 172, 207], "subsequ": [24, 51, 53], "deepli": 24, "best": [24, 99, 160, 172, 195, 207, 225], "new_i": 24, "equal": [24, 41, 52, 80, 81, 95, 99, 124, 172, 207], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 102, 124, 125, 134, 136, 137, 164, 166, 199, 201], "execut": [24, 41, 69, 72, 146, 180, 226, 232, 249], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 120, 153, 187], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": [24, 43, 89, 99, 114, 138, 144, 160, 172, 178, 195, 207], "second": [24, 49, 69, 99, 110, 117, 172, 207, 221, 233], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 51, 69, 100, 110], "g": [24, 53, 63, 64, 65, 81, 99, 109, 110, 114, 120, 127, 144, 153, 159, 165, 171, 172, 178, 187, 194, 200, 206, 207, 210, 214, 218, 219, 250], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 63, 64, 65, 94, 98, 99, 100, 101, 103, 109, 112, 124, 126, 171, 172, 174, 206, 207, 208, 214, 250], "ginsburg": 24, "trick": 24, "brief": [24, 50], "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 100], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 99, 172, 207], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "ensu": 24, "flavor": 24, "replac": [24, 43, 66, 68, 69, 70, 71, 72, 92, 95, 101, 105, 146, 180, 214, 218, 219, 227, 233], "multipl": [24, 42, 81, 84, 115, 157, 191], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 87, 88, 89, 94, 95, 98, 99, 100, 103, 104, 105, 109, 112, 113, 114, 115, 117, 120, 121, 126, 127, 130, 142, 144, 146, 147, 151, 156, 157, 159, 160, 161, 165, 167, 169, 171, 172, 174, 176, 178, 180, 181, 185, 190, 191, 194, 195, 196, 200, 202, 203, 206, 207, 208, 210, 215, 218, 219, 220, 226, 228, 234, 247], "gain": 24, "boolean": [24, 41, 51, 69, 95, 102, 131, 225, 245], "exist": [24, 41, 99, 112, 120, 153, 187, 233, 235], "alreadi": [24, 41, 57, 58, 99, 112, 120, 153, 161, 172, 187, 196, 207], "error": [24, 91, 99, 101, 172, 207, 214, 215, 240], "string": [24, 48, 52, 70, 76, 77, 84, 87, 95, 100, 105, 110, 117, 127, 131, 134, 147, 160, 181, 195, 210, 214, 216, 218, 219, 223, 224, 227, 232, 235, 242], "mistak": 24, "keyword": [24, 42, 50, 92, 122, 227, 243], "argument": [24, 112, 175], "weightnormlstmcel": 24, "norm": 24, "adapt": [24, 232], "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 53, 55, 128, 151, 185, 250], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 131, 144, 160, 178, 195], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 43, 50, 66, 80, 81, 99, 104, 172, 207, 215, 218, 219], "act": [24, 69, 160, 195], "w": [24, 84, 117, 227], "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 44, 47, 52, 53, 55, 66, 68, 69, 76, 80, 81, 95, 98, 99, 101, 105, 113, 130, 146, 151, 156, 160, 172, 180, 185, 190, 195, 207, 214, 218, 219, 220, 221, 224], "respect": [24, 41, 248], "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": [24, 109, 131, 165, 200], "see": [24, 48, 63, 64, 65, 73, 77, 84, 94, 99, 101, 110, 112, 113, 117, 120, 147, 156, 159, 160, 171, 172, 181, 190, 194, 195, 206, 207, 221, 246], "its": [24, 69, 72, 74, 81, 95], "own": [24, 94, 99, 117, 160, 172, 195, 207, 222], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 45, 48, 52, 68, 95, 117, 130, 131, 146, 180, 210, 237], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41, 105, 112], "analysi": [24, 114, 160, 195], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 48, 99, 105, 144, 178], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": [24, 61, 130, 131], "1807": 24, "08518": 24, "mark": [24, 43, 45, 50, 70, 110, 144, 178], "collier": 24, "joeran": 24, "beel": 24, "turn": [24, 109, 218, 219], "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 69, 72, 74, 99, 109, 146, 165, 172, 180, 200, 207, 218], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 49, 52, 66, 84, 86, 87, 88, 94, 95, 102, 104, 122, 128, 130, 142], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 104, 175], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 45], "id": [24, 41, 49, 69, 70, 77, 84, 107, 109, 120, 124, 126, 127, 142, 146, 147, 165, 167, 180, 181, 200, 202, 222, 223, 224, 237, 239], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": [24, 146], "goe": 24, "contract": [24, 218, 219], "map": [24, 53, 54, 55, 66, 68, 69, 73, 81, 84, 88, 99, 101, 112, 113, 120, 127, 138, 146, 150, 151, 153, 169, 172, 180, 184, 185, 187, 203, 207, 214, 222, 224, 232, 242, 248], "linear": [24, 63, 64, 65, 131, 159, 171, 194, 206], "decoupl": 24, "tf_graph_1x": [33, 224], "manipul": 41, "json": [41, 52, 53, 55, 66, 68, 84, 142, 146, 150, 151, 169, 180, 184, 185, 203, 210, 215, 218, 219, 224, 237, 239], "export": [41, 224, 237], "layout": 41, "annotationlab": 41, "interfac": [41, 120], "john": [41, 70, 72, 74, 84, 110, 176], "snow": [41, 84, 176], "tool": 41, "multi": [41, 53, 63, 64, 65, 68, 89, 112, 159, 160, 171, 194, 195, 206], "modal": 41, "team": 41, "collabor": 41, "ml": [41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 78, 80, 81, 84, 89, 94, 95, 98, 99, 100, 101, 104, 105, 112, 113, 117, 121, 144, 146, 147, 151, 153, 156, 159, 160, 161, 169, 171, 172, 178, 180, 181, 185, 187, 190, 194, 195, 196, 203, 206, 207, 209, 227, 246], "programmat": 41, "conll": [41, 99, 172, 207, 210, 214, 215, 218, 219, 224, 227, 237], "excel": 41, "classif": [41, 89, 92, 159, 160, 161, 171, 176, 194, 195, 196, 206, 210, 227, 248], "preannot": 41, "upload": [41, 176, 230], "interact": [41, 214, 222], "up": [41, 121, 131, 160, 195, 219], "delet": [41, 248], "edit": [41, 53], "usag": [41, 84, 99, 101, 105, 109, 160, 165, 172, 195, 200, 207], "tutori": 41, "set_credenti": 41, "usernam": [41, 222], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": [41, 176], "client": 41, "get_all_project": 41, "visibl": [41, 69, 146, 180], "rtype": [41, 237], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 68, 69, 70, 99, 102, 107, 124, 126, 127, 146, 160, 167, 172, 180, 195, 202, 207, 218, 219, 222, 239, 246], "sequenti": [41, 95], "sampl": [41, 70, 107, 109, 124, 126, 127, 165, 167, 200, 202, 210, 214, 218, 219, 236], "show": [41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 84, 88, 94, 95, 98, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 121, 126, 127, 144, 146, 147, 151, 156, 159, 160, 165, 167, 169, 171, 174, 178, 180, 181, 185, 190, 194, 195, 200, 202, 203, 206, 208, 216, 221, 224, 227, 246], "guidelin": 41, "delete_project": 41, "confirm": [41, 78], "set_project_config": 41, "classification_label": 41, "ner_label": [41, 98, 224], "assertion_label": [41, 224, 237], "relations_label": 41, "By": [41, 50, 81, 99, 114, 172, 207], "multiclass": [41, 89, 112], "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "custom": [41, 43, 45, 66, 68, 109, 112, 113, 120, 126, 127, 130, 141, 142, 146, 165, 167, 177, 180, 200, 202, 216, 218], "titl": [41, 51, 218, 219, 237], "increment": [41, 130], "offset": [41, 43], "delete_task": 41, "task_id": [41, 224], "get_annot": 41, "output_nam": 41, "save_dir": [41, 246], "write": [41, 128, 214, 246], "get_conll_data": 41, "input_json_path": [41, 237], "exported_conl": 41, "ground_truth": [41, 120, 237], "excluded_label": [41, 224, 237], "excluded_task_id": [41, 237], "excluded_task_titl": [41, 237], "regex_pattern": [41, 218, 237], "io": [41, 218, 219, 227, 246], "select": [41, 43, 44, 48, 50, 51, 53, 55, 63, 64, 65, 68, 69, 70, 72, 73, 81, 82, 88, 95, 103, 109, 110, 112, 113, 120, 126, 127, 144, 146, 151, 156, 159, 165, 167, 169, 171, 174, 178, 180, 185, 190, 194, 200, 202, 203, 206, 208, 222, 237, 239], "ground": [41, 120, 215, 237], "truth": [41, 120, 215, 237], "complet": [41, 237], "latest": [41, 237], "exclud": [41, 45, 99, 120, 172, 207, 224, 237], "irrelev": [41, 237], "regex": [41, 42, 48, 49, 52, 66, 68, 69, 84, 87, 92, 95, 100, 122, 130, 146, 176, 180, 218, 227, 237], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "included_task_id": 41, "seed": [41, 69, 70, 72, 99, 102, 107, 124, 126, 127, 146, 160, 167, 172, 180, 195, 202, 207, 222, 239], "panda": [41, 70, 214, 215, 219, 237], "relev": [41, 50, 224], "assign": [41, 84, 218, 219, 220], "strategi": [41, 69, 95, 110, 117, 130, 214], "occurr": [41, 99, 120, 172, 207], "unannot": 41, "count": [41, 99, 210, 218, 219], "fraction": 41, "absolut": 41, "dictionari": [41, 45, 53, 55, 66, 68, 81, 95, 101, 103, 112, 113, 115, 117, 122, 127, 146, 150, 151, 157, 169, 174, 180, 184, 185, 191, 203, 208, 210, 214, 218, 219, 220, 228, 232, 233, 234, 239], "entity_label": [41, 69, 142, 146, 180], "sample_weight_or_count": 41, "max": [41, 43, 45, 53, 58, 63, 64, 65, 124, 126, 144, 159, 161, 171, 176, 178, 194, 196, 206, 216], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "doc_wise_annot": [41, 237], "were": [41, 54, 99, 172, 207, 237, 248], "discard": [41, 103, 174, 208], "rest": [41, 48, 52, 69, 78, 95, 101, 132, 215], "plausibl": 41, "possibl": [41, 42, 43, 48, 50, 52, 53, 54, 58, 66, 69, 81, 84, 87, 89, 95, 101, 105, 112, 114, 122, 128, 130, 131, 144, 161, 178, 196, 218, 219], "neg": [41, 43, 109, 115, 165, 200], "entity1": [41, 110, 112, 113, 156, 190], "entity2": [41, 110, 112, 113, 156, 190], "wise": [41, 99, 237], "done": [41, 45, 99, 160, 172, 195, 207, 219], "cross": [41, 215], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42, 74, 219], "full_pipelin": 41, "df": [41, 104, 143, 209, 219, 222, 223, 224], "collect": [41, 86, 99, 172, 207], "documentassembl": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 84, 88, 94, 95, 98, 99, 100, 101, 104, 105, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 144, 146, 147, 151, 153, 156, 159, 160, 167, 169, 171, 172, 178, 180, 181, 185, 187, 190, 194, 195, 202, 203, 206, 207, 227, 237], "older": [41, 69], "offeset": 41, "overrit": 41, "upload_preannot": 41, "get_iaa_metr": 41, "conll_dir": 41, "annotator_nam": 41, "set_ref_annot": 41, "return_nerdlmetr": 41, "results_token_bas": 41, "iaa": 41, "metric": [41, 43, 99, 210, 218, 219, 220, 225, 245, 250], "present": [41, 43, 47, 48, 88, 95, 98, 101, 120, 144, 153, 178, 187, 248], "comparison": [41, 80, 219], "made": [41, 95, 131], "full": [41, 53, 105, 109, 165, 175, 200], "partial": [41, 53, 175], "nerdlmetr": [41, 143, 227], "report": [41, 215, 218, 219, 236], "review_annot": 41, "conll_path": [41, 214, 215, 218, 219], "ner_model_path": [41, 99, 172, 207], "review": 41, "compar": [41, 48, 50, 87, 210, 219], "conn_path": 41, "chunk_based_comparison_df": 41, "cuhunk": 41, "token_based_comparision_df": 41, "chunk_frequency_df": 41, "metrics_result": 41, "annotationmerg": [42, 227], "classnam": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 125, 126, 127, 130, 134, 136, 137, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 227], "java_model": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 125, 126, 127, 130, 134, 137, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208], "merg": [42, 57, 58, 92, 94, 98, 119, 161, 176, 196, 226, 227], "inputtyp": [42, 122], "wordpiec": [42, 122, 227], "sentence_embed": [42, 76, 80, 81, 120, 121, 122, 153, 160, 187, 195], "categori": [42, 57, 58, 59, 60, 61, 63, 65, 78, 89, 112, 113, 115, 122, 156, 157, 159, 160, 161, 162, 177, 190, 191, 194, 195, 196, 197, 248], "sentiment": [42, 122, 160, 195], "named_ent": [42, 64, 98, 99, 100, 101, 103, 122, 171, 172, 174, 206, 207, 208, 224], "labeled_depend": [42, 53, 55, 122, 150, 151, 169, 184, 185, 203], "languag": [42, 43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 76, 77, 80, 81, 84, 89, 94, 95, 99, 103, 109, 112, 113, 115, 117, 120, 122, 125, 126, 127, 142, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 221, 222, 224, 235, 239], "empty_data": [42, 70, 74, 120], "createdatafram": [42, 43, 47, 49, 50, 52, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 84, 88, 94, 95, 98, 99, 101, 103, 104, 105, 109, 112, 113, 115, 117, 120, 121, 122, 126, 127, 144, 146, 147, 156, 159, 160, 165, 167, 171, 172, 174, 178, 180, 181, 190, 194, 195, 200, 202, 206, 207, 208], "todf": [42, 43, 47, 49, 50, 52, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 84, 88, 94, 95, 98, 99, 101, 103, 104, 105, 109, 112, 113, 114, 115, 117, 120, 121, 122, 126, 127, 144, 146, 147, 156, 159, 160, 165, 167, 171, 172, 174, 178, 180, 181, 190, 194, 195, 200, 202, 206, 207, 208], "document1": 42, "document2": [42, 70], "setinputtyp": [42, 122], "all_doc": 42, "pipelinemodel": [42, 57, 58, 99, 160, 172, 195, 207, 209, 210, 218, 219, 227, 246], "setstag": [42, 44, 47, 50, 51, 53, 55, 57, 58, 63, 64, 65, 70, 77, 78, 80, 81, 84, 86, 89, 94, 99, 103, 115, 117, 121, 122, 147, 151, 159, 160, 161, 169, 171, 172, 174, 181, 185, 194, 195, 196, 203, 206, 207, 208], "lp": 42, "lightpipelin": [42, 74, 219, 227, 237], "doc": [42, 120, 153, 187, 210, 214], "replic": 42, "23": [42, 49, 117, 175], "inputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 126, 130, 134, 136, 137, 151, 185], "outputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 86, 89, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 126, 130, 134, 136, 137, 151, 185], "skiplpinputcolsvalid": [42, 53, 86, 122, 136, 137], "filter": [42, 48, 52, 54, 78, 87, 95, 101, 107, 114, 122, 124, 132, 215, 218, 219, 221, 224, 235], "algorithm": [43, 45, 50, 57, 58, 68, 130, 144, 161, 178, 196, 218], "absent": [43, 48, 88, 144, 178], "hypothet": [43, 48, 144, 178], "condit": [43, 99, 144, 172, 178, 207, 248], "associated_with_other_person": [43, 144, 178], "etc": [43, 81, 110, 120, 144, 153, 178, 187], "pretrain": [43, 45, 50, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 76, 78, 80, 81, 84, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 109, 112, 113, 114, 115, 117, 120, 121, 122, 125, 126, 127, 142, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 169, 171, 172, 174, 176, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 203, 206, 207, 208, 227, 235], "assertiondlmodel": [43, 48, 88, 144, 178, 227], "startcol": [43, 45, 77, 144, 147, 178, 181], "endcol": [43, 45, 144, 178], "batchsiz": [43, 63, 65, 89, 99, 113, 144, 156, 159, 160, 171, 172, 178, 190, 194, 195, 206, 207], "optim": [43, 89, 99, 144, 172, 178, 207, 218], "learningr": [43, 89, 144, 178], "rate": [43, 89, 99, 144, 160, 172, 178, 195, 207, 224], "maxsentlen": [43, 144, 178], "graphfold": [43, 99, 131, 144, 172, 178, 207], "extern": [43, 94, 95, 99, 101, 117, 131, 144, 172, 178, 207, 232], "hdf": [43, 89, 99, 112, 120, 144, 153, 160, 172, 178, 187, 195, 207, 235], "dbf": [43, 89, 99, 112, 120, 144, 153, 160, 172, 178, 187, 195, 207], "cloud": [43, 89, 99, 112, 120, 144, 153, 160, 172, 178, 187, 195, 207], "storag": [43, 84, 89, 99, 112, 120, 144, 153, 160, 172, 178, 187, 195, 207], "s3": [43, 76, 89, 99, 112, 120, 144, 153, 160, 172, 178, 187, 195, 207, 221, 235], "graphfil": [43, 99, 131, 144, 172, 178, 207], "happen": [43, 99, 131, 144, 172, 178, 207], "configprotobyt": [43, 63, 64, 65, 99, 109, 124, 126, 127, 144, 159, 160, 165, 167, 171, 172, 178, 194, 195, 200, 202, 206, 207], "configproto": [43, 63, 64, 65, 99, 109, 124, 126, 127, 144, 159, 160, 165, 167, 171, 172, 178, 194, 195, 200, 202, 206, 207], "serial": [43, 63, 64, 65, 84, 99, 109, 124, 126, 127, 144, 159, 160, 165, 167, 171, 172, 176, 178, 194, 195, 200, 202, 206, 207, 227, 242], "byte": [43, 63, 64, 65, 99, 109, 124, 126, 127, 144, 159, 160, 165, 167, 171, 172, 178, 194, 195, 200, 202, 206, 207], "config_proto": [43, 144, 178], "serializetostr": [43, 144, 178], "validationsplit": [43, 89, 99, 144, 160, 172, 178, 195, 207], "proport": [43, 99, 144, 160, 172, 178, 195, 207, 218, 219, 220], "against": [43, 50, 84, 94, 99, 144, 160, 172, 178, 195, 207, 210, 219], "testdataset": [43, 99, 144, 172, 178, 207], "statist": [43, 99, 144, 172, 178, 207], "dure": [43, 69, 72, 76, 91, 99, 113, 144, 146, 160, 172, 178, 180, 195, 207, 219, 220, 222], "includeconfid": [43, 99, 144, 172, 178, 207], "confid": [43, 52, 53, 55, 59, 60, 61, 88, 89, 95, 99, 101, 103, 112, 115, 120, 144, 150, 151, 157, 162, 169, 172, 174, 178, 184, 185, 191, 197, 203, 207, 208, 215], "metadata": [43, 44, 49, 50, 52, 66, 69, 76, 81, 87, 88, 94, 95, 98, 99, 102, 103, 104, 112, 113, 114, 115, 122, 128, 130, 144, 156, 172, 174, 178, 190, 207, 208, 223], "enableoutputlog": [43, 99, 144, 160, 172, 178, 195, 207], "outputlogspath": [43, 89, 99, 144, 160, 172, 178, 195, 207], "won": [43, 89, 99, 112, 144, 160, 172, 178, 195, 207], "level": [43, 50, 51, 52, 66, 84, 95, 99, 144, 160, 172, 178, 195, 207, 224, 248], "scopewindow": [43, 144, 178], "window": [43, 92, 99, 124, 144, 172, 176, 178, 207, 227], "express": [43, 48, 52, 68, 95, 117, 130, 131, 144, 146, 178, 180], "document_assembl": [43, 44, 45, 49, 57, 58, 100, 103, 104, 109, 126, 127, 144, 161, 165, 167, 174, 178, 196, 200, 202, 208, 237], "doc2chunk": [43, 70, 77, 104, 147, 181, 227], "setchunkcol": [43, 45, 77, 100, 144, 147, 178, 181], "setstartcolbytokenindex": [43, 77], "setfailonmiss": [43, 77], "setlowercas": [43, 53, 77, 105], "wordembeddingsmodel": [43, 45, 50, 53, 55, 68, 70, 72, 74, 76, 80, 81, 88, 95, 98, 99, 100, 101, 112, 113, 114, 115, 144, 146, 151, 156, 169, 172, 178, 180, 185, 190, 203, 207, 227], "embeddings_clin": [43, 45, 50, 53, 55, 68, 70, 72, 74, 81, 88, 95, 98, 100, 101, 112, 113, 114, 115, 144, 146, 151, 156, 169, 178, 180, 185, 190, 203], "en": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 78, 80, 81, 84, 88, 89, 94, 95, 98, 99, 100, 101, 102, 103, 109, 112, 113, 114, 115, 117, 120, 121, 125, 126, 127, 142, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 169, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 203, 206, 207, 208, 222, 235, 239, 247], "setcasesensit": [43, 45, 57, 58, 63, 64, 65, 66, 78, 94, 100, 113, 120, 121, 122, 130, 132, 144, 153, 159, 161, 171, 178, 187, 194, 196, 206], "012": [43, 144, 178], "015": [43, 144, 178], "setscopewindow": [43, 144, 178], "assertionpipelin": [43, 45, 48, 144, 153, 178, 187], "srt": [43, 131], "setgraphfil": [43, 99, 131], "setconfigprotobyt": [43, 63, 64, 65, 99, 109, 124, 126], "conf": [43, 99], "contai": 43, "colnam": 43, "start_col": 43, "end_col": [43, 112], "float": [43, 50, 52, 53, 57, 58, 69, 76, 80, 81, 82, 86, 89, 95, 99, 101, 103, 112, 113, 120, 160, 195, 214, 215, 218, 219, 220, 225, 245], "maximum": [43, 53, 57, 58, 99, 107, 109, 114, 120, 124, 126, 127, 130, 131, 160, 161, 165, 167, 172, 195, 196, 200, 202, 207], "settestdataset": 43, "read_a": [43, 52, 66, 68, 84, 94, 95, 101, 117], "reada": [43, 52, 66, 68, 84, 94, 95, 101, 117, 227], "waht": 43, "left": [43, 53, 112, 113, 114, 156, 190], "right": [43, 50, 53, 80, 112, 113, 114, 156, 190], "dl": [43, 131, 227], "approach": [43, 50, 53, 55, 136, 144, 150, 151, 169, 178, 184, 185, 203], "targetnerlabel": [43, 45, 144, 178], "common": [43, 48, 52, 53, 55, 57, 58, 66, 68, 69, 72, 77, 80, 81, 84, 86, 89, 95, 98, 99, 101, 104, 112, 113, 120, 121, 144, 146, 147, 151, 153, 156, 161, 169, 172, 176, 178, 180, 181, 185, 187, 190, 196, 203, 207, 227], "fever": [43, 48, 144, 178], "sore": [43, 48, 144, 178], "throat": [43, 48, 144, 178], "stomach": [43, 48, 52, 144, 178], "pain": [43, 48, 52, 120, 144, 178], "she": [43, 130, 144, 178, 224], "maintain": [43, 144, 178], "epidur": [43, 48, 144, 178], "pca": [43, 48, 144, 178], "sentencedetector": [43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 66, 68, 72, 76, 78, 80, 81, 88, 95, 98, 99, 100, 101, 103, 114, 115, 117, 120, 122, 144, 146, 151, 153, 160, 169, 172, 178, 180, 185, 187, 195, 203, 207, 227], "medicalnermodel": [43, 50, 53, 55, 68, 70, 72, 74, 81, 88, 95, 98, 99, 100, 101, 112, 113, 114, 115, 144, 146, 151, 156, 169, 172, 178, 180, 185, 190, 203, 207, 227], "ner_clin": [43, 114, 115, 144, 178], "nerconvert": [43, 48, 50, 68, 70, 72, 76, 80, 95, 98, 101, 112, 113, 114, 115, 144, 146, 156, 178, 180, 190, 227], "ner_chunk": [43, 48, 50, 53, 55, 68, 70, 72, 74, 76, 80, 81, 88, 92, 97, 98, 101, 110, 112, 113, 114, 115, 121, 142, 144, 146, 151, 156, 169, 178, 180, 185, 190, 203, 218, 219, 246], "clinicalassert": [43, 48, 144, 178], "selectexpr": [43, 44, 47, 48, 50, 52, 53, 55, 66, 73, 76, 77, 78, 80, 81, 84, 94, 95, 98, 103, 104, 105, 112, 113, 114, 115, 117, 121, 144, 147, 151, 156, 160, 174, 178, 181, 185, 190, 195, 208], "truncat": [43, 44, 47, 48, 50, 52, 53, 55, 63, 64, 65, 66, 68, 70, 72, 73, 77, 78, 80, 81, 84, 88, 94, 103, 105, 109, 110, 112, 113, 114, 115, 117, 121, 126, 127, 131, 144, 146, 147, 151, 156, 159, 160, 165, 167, 169, 171, 174, 178, 180, 181, 185, 190, 194, 195, 200, 202, 203, 206, 208], "entityassertioncasesensit": 43, "bytearrai": 43, "setentityassertioncasesensit": [43, 88], "setentityassert": 43, "assertionent": 43, "entityassert": 43, "earlier": 43, "replacelabel": [43, 101], "getentityassert": 43, "setreplacelabel": [43, 101], "later": [43, 76], "getreplacelabel": 43, "assertion_jsl_aug": [43, 88], "lang": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 76, 80, 81, 84, 89, 94, 95, 99, 102, 103, 109, 112, 113, 115, 117, 120, 125, 126, 127, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 221], "remote_loc": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 84, 89, 94, 95, 99, 102, 103, 109, 112, 113, 115, 117, 120, 125, 126, 127, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 221, 235], "download": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 89, 94, 95, 99, 103, 109, 112, 113, 115, 117, 120, 125, 126, 127, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 221, 235, 236], "load": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 76, 80, 81, 89, 94, 95, 99, 103, 109, 113, 115, 117, 120, 125, 126, 127, 146, 150, 151, 156, 157, 159, 160, 162, 165, 166, 167, 169, 171, 172, 174, 180, 184, 185, 190, 191, 194, 195, 197, 200, 201, 202, 203, 206, 207, 208, 210, 221, 224, 232, 233], "remot": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 89, 94, 95, 99, 103, 109, 112, 113, 115, 117, 120, 125, 126, 127, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 162, 165, 166, 167, 171, 172, 174, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 221, 235], "resourc": [43, 45, 49, 50, 51, 57, 58, 59, 60, 61, 68, 76, 80, 81, 84, 86, 89, 94, 95, 99, 101, 109, 117, 120, 122, 125, 126, 127, 160, 162, 165, 166, 167, 172, 195, 197, 200, 201, 202, 207, 221], "Will": [43, 45, 50, 57, 58, 59, 60, 61, 68, 76, 80, 81, 89, 94, 95, 109, 117, 120, 125, 126, 127, 162, 165, 166, 167, 197, 200, 201, 202, 207], "repositori": [43, 45, 50, 57, 58, 59, 60, 61, 68, 76, 80, 81, 89, 94, 95, 109, 117, 120, 125, 126, 127, 162, 165, 166, 167, 197, 200, 201, 202, 207], "assertionchunkconvert": [44, 227], "some": [44, 68, 69, 72, 81, 95, 99, 146, 172, 180, 207, 248], "issu": [44, 68, 100, 214, 215], "indic": [44, 50, 89, 95, 109, 226, 228, 232], "robust": [44, 176, 212], "wai": [44, 50, 84], "reliabl": 44, "chunktextcol": 44, "chunkbegincol": 44, "chunkendcol": 44, "outputtokenbegincol": 44, "outputtokenendcol": 44, "convert": [44, 47, 49, 68, 77, 88, 101, 105, 121, 122, 146, 147, 176, 180, 181, 214, 218, 219, 223, 230, 232], "setchunktextcol": 44, "setchunkbegincol": 44, "char_begin": 44, "setchunkendcol": 44, "char_end": 44, "setoutputtokenbegincol": 44, "token_begin": 44, "setoutputtokenendcol": 44, "token_end": 44, "minni": 44, "57": 44, "63": [44, 47, 95, 98, 101], "62": [44, 72, 74], "pcp": [44, 68, 73, 146, 180], "31": [44, 49, 114, 117, 224], "34": [44, 47, 224], "33": 44, "inputcol": [44, 63, 65, 86, 88, 130, 131, 141, 160, 195], "outputcol": [44, 86, 141, 246], "col": [44, 49, 52, 73, 76, 84, 112, 120, 153, 187], "setparam": [44, 70, 77, 86, 88, 121, 137], "assertionlogregapproach": [45, 227], "regress": [45, 57, 58, 60, 63, 65, 159, 161, 194, 196], "assertionlogregmodel": [45, 144, 178, 227], "maxit": [45, 57, 58, 161, 196], "regparam": 45, "enetparam": 45, "elast": 45, "beforeparam": 45, "context": [45, 50, 80, 92, 109, 124, 126, 127, 131, 165, 167, 176, 200, 202, 218, 219, 227], "afterparam": 45, "externalfeatur": 45, "nercol": 45, "sentence_detector": [45, 49, 53, 55, 81, 100, 103, 144, 151, 169, 174, 178, 185, 203, 208, 237], "chunker": [45, 92, 100, 144, 176, 178, 227], "Then": [45, 76, 99, 112, 120, 160, 172, 195, 207], "setreg": 45, "setbefor": 45, "setaft": 45, "13": [45, 68, 73, 104, 105, 146, 180, 224], "labelcol": [45, 57, 58, 120, 153, 161, 187, 196], "setmaxit": [45, 57, 58], "lamda": 45, "setenet": 45, "enet": 45, "setnercol": 45, "settargetnerlabel": 45, "logreg": [45, 57, 58, 161, 196, 227], "logarithm": [45, 57, 58, 161, 196], "obtain": [45, 50, 74, 88, 110, 115, 144, 157, 172, 178, 191, 207, 220, 248], "assertionpretrain": 45, "assertion_ml": 45, "assertiondl": [46, 92, 145, 149, 179, 183], "assertion_chunk_convert": [46, 92], "assertion_dl_reg": [46, 92], "chunk2token": [47, 227], "chunkassembl": [47, 77, 147, 181], "ngramgener": [47, 50, 227], "ngram": [47, 53, 58, 107, 124, 161, 196], "setdelimit": [47, 94, 117], "setn": 47, "setenablecumul": 47, "ngram_token": 47, "year": [47, 50, 68, 69, 73, 80, 95, 98, 101, 104, 146, 175, 180, 248], "old": [47, 50, 68, 73, 95, 98, 99, 101, 112, 113, 146, 172, 175, 180, 207, 233], "man": [47, 95, 98, 101], "hospit": [47, 95, 98, 101, 222], "a_63": 47, "old_man": 47, "14": [47, 68, 70, 73, 146, 180], "man_pres": 47, "18": [47, 68, 73, 120, 126, 127, 146, 167, 180, 202], "28": [47, 50, 175, 224], "presents_to": 47, "27": [47, 94], "to_th": 47, "41": [47, 53, 55, 114, 150, 151, 169, 184, 185, 203], "the_hospit": 47, "42": [47, 52, 224], "hospital_": 47, "assertionfilter": [48, 227], "come": [48, 50, 52, 91, 95, 99, 101, 120, 130, 153, 187], "black": [48, 52, 78, 87, 95, 101, 132, 216, 246, 247], "criteria": [48, 52, 54, 87, 95], "isin": [48, 52, 87, 95], "whitelist": [48, 52, 78, 95, 101, 132], "ignor": [48, 52, 63, 65, 69, 78, 95, 101, 107, 109, 120, 124, 126, 127, 132, 146, 159, 165, 167, 171, 180, 194, 200, 202, 206, 218], "blacklist": [48, 52, 69, 78, 95, 101, 132, 146, 180], "iob": [48, 95, 98, 99, 101, 132, 172, 207, 210, 218, 219, 224, 250], "prefix": [48, 66, 76, 95, 99, 101, 132, 172, 207, 250], "casesensit": [48, 52, 63, 65, 66, 78, 94, 95, 130, 132, 159, 171, 194, 206], "definit": [48, 52, 78, 84, 95, 103, 115, 132, 157, 174, 191, 208], "setcriteria": [48, 52, 87], "setwhitelist": [48, 52, 76, 78, 132], "chunkconvert": [49, 227], "regexmatch": [49, 51, 66, 117, 122, 227], "test_data": [49, 122, 219, 224], "my": [49, 78, 103, 117, 130, 160, 174, 195, 208], "rule": [49, 66, 68, 69, 84, 99, 117, 146, 180, 210], "ceremoni": [49, 117], "regex_match": [49, 92, 116], "setexternalrul": [49, 51, 117, 122], "src": [49, 51, 94, 99, 117, 122, 160, 172, 195, 207], "matcher": [49, 92, 117, 122, 176], "txt": [49, 51, 68, 72, 74, 94, 117, 122, 146, 180, 218, 219], "delimit": [49, 84, 94, 95, 101, 117, 124], "outdf": 49, "71": [49, 117], "80": [49, 117], "chunkkeyphraseextract": [50, 227], "kei": [50, 53, 102, 103, 115, 122, 128, 157, 174, 176, 191, 208, 210, 214, 215, 220, 222, 232, 242, 250], "phrase": [50, 94, 100, 109, 165, 200], "bertsentenceembed": [50, 80, 81, 120, 121, 122, 153, 187, 227], "cosin": [50, 53, 82, 120, 153, 187], "represent": [50, 66, 80, 81, 101], "maxim": [50, 81, 112], "margin": [50, 216], "mmr": 50, "setdiverg": 50, "selectmostdiffer": 50, "other": [50, 53, 55, 63, 64, 65, 66, 68, 69, 70, 72, 81, 95, 99, 103, 112, 113, 114, 115, 120, 131, 144, 146, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 177, 178, 180, 184, 185, 187, 190, 191, 194, 195, 196, 206, 208, 218, 219, 222], "too": [50, 99, 131, 172, 207], "broader": 50, "thei": [50, 61, 81, 99, 124, 130, 131, 172, 207, 222], "belong": 50, "understand": 50, "variou": [50, 109, 165, 200, 232, 248], "rank": 50, "gram": [50, 107, 124], "yakekeywordextractor": 50, "yake": [50, 227], "textmatch": [50, 227], "desir": [50, 53, 88, 95, 114, 218], "latter": 50, "topn": [50, 76], "out": [50, 99, 105, 107, 120, 124, 160, 172, 195, 207, 237], "conjunct": 50, "diverg": 50, "aim": [50, 109, 165, 200], "goal": 50, "within": [50, 77, 81, 99, 121, 147, 181], "interv": 50, "higher": [50, 215, 248], "enforc": [50, 222], "ensur": 50, "sole": 50, "constraint": [50, 224], "documentlevelprocess": 50, "row": [50, 99, 130, 222, 224, 239], "rather": [50, 99, 109, 165, 200], "particular": [50, 69, 81, 115, 120, 153, 157, 187, 191, 248], "concatenatesent": 50, "averag": [50, 63, 65, 79, 80, 81], "droppunctu": 50, "punctuat": [50, 105, 218, 219], "ner_tagg": [50, 115], "ner_jsl_slim": 50, "ner_tag": [50, 112, 113, 114, 115, 156, 190], "ner_convert": [50, 53, 55, 70, 76, 81, 88, 101, 115, 151, 169, 185, 203], "key_phrase_extractor": 50, "settopn": 50, "setdocumentlevelprocess": 50, "ner_chunk_key_phras": 50, "her": [50, 80, 103, 174, 208], "becom": [50, 80, 131], "last": [50, 80, 99, 109, 120, 172, 207, 219], "he": [50, 72, 80, 88, 130], "complain": [50, 80], "swell": [50, 80], "hi": [50, 80, 103, 174, 208], "forearm": [50, 80], "explod": [50, 52, 53, 55, 66, 73, 76, 80, 81, 84, 88, 94, 95, 98, 103, 105, 112, 113, 114, 115, 117, 130, 151, 156, 160, 174, 185, 190, 195, 208, 210], "AS": [50, 53, 55, 80, 81, 103, 151, 174, 185, 208], "key_phras": 50, "documentsimilar": 50, "mmrscore": 50, "gestat": 50, "mellitu": 50, "7391447825527298": 50, "4366776288430703": 50, "7323921930094919": 50, "44348688715422274": 50, "13577881610104517": 50, "085800103824974": 50, "setselectmostdiffer": 50, "highest": [50, 89, 95, 107, 109, 112, 124, 126, 127, 165, 167, 200, 202], "setconcatenatesent": 50, "them": [50, 63, 64, 65, 80, 81, 82, 84, 89, 99, 114, 117, 120, 159, 171, 172, 194, 206, 207], "setdroppunctu": 50, "sbert_jsl_medium_uncas": 50, "chunksentencesplitt": [51, 227], "treat": 51, "header": [51, 86, 160, 195, 216, 224], "associ": [51, 84, 101, 114, 117, 120, 248], "particularli": [51, 88, 233], "subtitl": 51, "paragraph": [51, 102], "groupbysent": 51, "assum": [51, 81, 220], "detector": [51, 218, 219, 237], "insertchunk": 51, "omit": [51, 120, 153, 187], "defaultent": 51, "introduct": 51, "title_regex": 51, "setgroupbysent": 51, "setinsertchunk": 51, "insert": 51, "setdefaultent": 51, "chunkfiltererapproach": [52, 227], "chunkfilter": [52, 227], "addition": [52, 66, 99, 130, 131, 172, 207], "accord": [52, 68, 70, 87, 95, 142, 146, 180, 218], "filtervalu": [52, 87, 95], "alwai": [52, 95], "what": [52, 69, 95, 103, 105, 110, 112, 120, 174, 208], "attribut": [52, 74, 95], "entitiesconfidenceresourc": [52, 95], "confidencethreshold": [52, 95, 246], "past": [52, 221], "histori": 52, "gastroenter": 52, "docassembl": 52, "postagg": [52, 112, 113, 156, 190], "perceptronmodel": [52, 81, 112, 113, 114, 115, 156, 190, 227, 237], "setregexpars": [52, 100], "chunkerfilt": 52, "chunksfilterapproach": 52, "entitiesconfidenceresourceasjsonstr": 52, "setfilterent": 52, "filter_bi": 52, "setentitiesconfidenceresourc": [52, 95], "binari": [52, 95, 101, 115, 120, 157, 191], "setentitiesconfidenceresourceasjsonstr": 52, "entitiesconfid": [52, 95], "17": [52, 95, 98, 224], "22": [52, 53, 55, 104, 150, 151, 169, 175, 184, 185, 203, 224], "36": 52, "53": [52, 94], "81": [52, 114, 224], "110": [52, 95, 98], "now": 52, "care": [52, 114], "118": 52, "132": 52, "setentitiesconfid": [52, 95], "entities_confid": [52, 95], "chunkmapperfuzzymatchingparam": [53, 227], "fuzzymatch": 53, "enabletokenfingerprintmatch": 53, "enablecharfingerprintmatch": 53, "enablefuzzymatch": 53, "maxtokenngramfingerprint": 53, "mintokenngramfingerprint": 53, "maxtokenngramdroppingtoken": 53, "maxtokenngramdroppingcharsratio": 53, "maxtokenngramdroppingoper": 53, "maxcharngramfingerprint": 53, "mincharngramfingerprint": 53, "fuzzymatchingdist": 53, "fuzzymatchingdistancethreshold": 53, "fuzzydistancescalingmod": 53, "setenabletokenfingerprintmatch": 53, "etfm": [53, 138], "fingerprint": 53, "driven": 53, "three": 53, "maxtokenngramdrop": 53, "setenablecharfingerprintmatch": 53, "ecfm": 53, "char": [53, 69, 99, 130, 146, 172, 180, 207], "setenablefuzzymatch": 53, "efm": 53, "fuzzi": 53, "setmaxtokenngramfingerprint": 53, "mxtnf": 53, "setmintokenngramfingerprint": 53, "mntnf": 53, "min": [53, 58, 161, 196, 216], "setmaxtokenngramdroppingtoken": 53, "etd": 53, "drop": [53, 237], "enabletokenngrammatch": 53, "whenev": 53, "matter": [53, 112], "high": [53, 131, 215], "sy": 53, "maxsiz": 53, "setmaxtokenngramdroppingcharsratio": 53, "amount": [53, 76, 215], "ratio": 53, "setmaxtokenngramdroppingoper": 53, "setmaxcharngramfingerprint": 53, "setmincharngramfingerprint": 53, "minimum": [53, 58, 69, 99, 146, 172, 180, 207, 214], "setfuzzymatchingdist": 53, "fmd": 53, "distanc": [53, 69, 76, 81, 112, 114, 120, 146, 153, 180, 187], "levenshtein": [53, 69, 76, 146, 180], "longest": 53, "jaccard": 53, "setfuzzymatchingdistancethreshold": 53, "fmdth": 53, "setfuzzydistancescalingmod": 53, "fdsm": 53, "mode": [53, 68, 69, 72, 89, 112, 130, 143, 144, 146, 178, 180, 222], "integ": [53, 69, 70, 99, 126, 127, 146, 167, 180, 202, 207, 214, 215, 222], "commonchunkmapperparam": 53, "allowmultitokenchunk": 53, "multivaluesrel": 53, "lowercas": [53, 55, 68, 77, 105, 146, 147, 150, 151, 169, 180, 181, 184, 185, 203, 218, 219], "setallowmultitokenchunk": 53, "mc": 53, "skip": [53, 68, 69, 146, 180], "multitoken": 53, "setmultivaluesrel": 53, "send": 53, "setrel": [53, 55, 151, 169, 185, 203], "lc": 53, "chunkmapperapproach": [53, 150, 169, 184, 203, 227], "mapper": [53, 55, 150, 151, 169, 184, 185, 203], "jsondictionari": [53, 55, 150, 151, 169, 184, 185, 203], "chunkmappermodel": [53, 150, 169, 184, 203, 227], "label_depend": [53, 54, 55, 110, 119, 150, 151, 169, 184, 185, 203], "mappinmg": [53, 55, 150, 151, 169, 184, 185, 203], "go": [53, 55, 150, 151, 169, 184, 185, 203, 215], "decid": [53, 55, 69, 130, 150, 151, 169, 184, 185, 203], "ner_posology_larg": [53, 55, 81, 151, 169, 185, 203], "nerconverterintern": [53, 55, 74, 81, 88, 101, 110, 151, 169, 185, 203, 224, 227], "chunkermapperapproach": [53, 55, 151, 169, 185, 203], "setdictionari": [53, 55, 66, 151, 169, 185, 203], "home": [53, 55, 78, 151, 169, 185, 203], "mappings2": [53, 55, 151, 169, 185, 203], "action": [53, 55, 150, 151, 169, 184, 185, 203], "sampledata": [53, 55, 81, 151, 169, 185, 203], "warfarina": [53, 55, 150, 151, 169, 184, 185, 203], "lusa": [53, 55, 150, 151, 169, 184, 185, 203], "amlodipin": [53, 55, 150, 151, 169, 184, 185, 203], "mg": [53, 55, 81, 150, 151, 169, 184, 185, 203], "35": [53, 55, 114, 150, 151, 169, 184, 185, 203], "analges": [53, 55, 150, 151, 169, 184, 185, 203], "56995": [53, 55, 150, 151, 169, 184, 185, 203], "all_rel": [53, 55, 150, 151, 169, 184, 185, 203], "antipyret": [53, 55, 150, 151, 169, 184, 185, 203], "9989": [53, 55, 150, 151, 169, 184, 185, 203], "55": [53, 55, 150, 151, 169, 184, 185, 203], "56": [53, 55, 150, 151, 169, 184, 185, 203], "9123": [53, 55, 150, 151, 169, 184, 185, 203], "bow": [53, 55, 76, 151, 185], "drug_chunk_embed": [53, 55, 81, 151, 185], "drug_chunk": [53, 55, 81, 151, 185], "drug_embed": [53, 55, 81, 151, 185], "cach": [53, 55, 81, 86, 95, 109, 125, 126, 151, 153, 165, 166, 185, 187, 200, 201, 221, 235], "drug_action_treatment_mapp": [53, 55], "open": [53, 55, 63, 64, 65, 66, 77, 99, 101, 103, 112, 113, 115, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 206, 208], "chunkmapperfilter": [54, 227], "chunkmapp": [54, 56, 92, 149, 152, 183, 186], "successfulli": [54, 228], "returncriteria": 54, "success": 54, "fail": [54, 69, 77, 86, 147, 181, 228], "chunkmapperfilterermodel": 54, "setreturncriteria": 54, "return_criteria": 54, "itself": [54, 95], "docmapperapproach": [55, 151, 185, 227], "docmappermodel": [55, 151, 185, 227], "assertion_filter": [56, 92], "chunk_convert": [56, 92], "chunk_key_phrase_extract": [56, 92], "chunk_sentence_splitt": [56, 92], "chunker_filter": [56, 92], "chunkmapper_filter": [56, 92], "docmapp": [56, 92, 149, 152, 183, 186], "documentlogregclassifierapproach": [57, 227], "classifi": [57, 58, 78, 89, 112, 113, 156, 160, 161, 190, 195, 196, 210, 227], "tol": [57, 58, 161, 196], "converg": [57, 58, 161, 196], "toler": [57, 58, 161, 196], "fitintercept": [57, 58, 161, 196], "intercept": [57, 58, 161, 196], "vectorizationmodelpath": [57, 58, 161, 196], "been": [57, 58, 68, 146, 161, 180, 196], "classificationmodelpath": [57, 58, 161, 196], "could": [57, 58, 66, 76, 117, 121, 160, 161, 195, 196], "like": [57, 58, 66, 69, 117, 146, 160, 161, 180, 195, 196], "stopwords_clean": [57, 58, 161, 196], "stopwordsclean": [57, 58, 161, 196, 227], "cleantoken": [57, 58, 161, 196], "stemmer": [57, 58, 161, 196, 227], "stem": [57, 58, 112, 113, 114, 156, 161, 190, 196], "clf_model": [57, 58, 89, 161, 196], "settol": [57, 58], "dist": [57, 58, 120], "setfitintercept": [57, 58], "setvectorizationmodelpath": [57, 58], "setclassificationmodelpath": [57, 58], "setlabel": [57, 58], "documentlogregclassifiermodel": [57, 227], "mergechunk": [57, 58, 161, 196], "vectorizationmodel": [57, 58, 161, 196], "classificationmodel": [57, 58, 161, 196], "setmergechunk": [57, 58], "setvectorizationmodel": [57, 58], "setclassificationmodel": [57, 58], "classifier_logreg_ad": 57, "documentmlclassifierparam": [58, 227], "mintokenngram": [58, 161, 196], "maxtokenngram": [58, 161, 196], "documentmlclassifierapproach": [58, 161, 196, 227], "classificationmodelclass": [58, 161, 196], "sparkml": [58, 161, 196], "svm": [58, 61, 161, 196], "setclassificationmodelclass": 58, "setmintokenngram": 58, "setmaxtokenngram": 58, "documentmlclassifiermodel": [58, 227], "classifierml_ad": 58, "fewshotclassifierapproach": [59, 227], "fewshotclassifi": 59, "setfit": [59, 162, 197], "tunstal": [59, 162, 197], "2022": [59, 70, 162, 175, 197, 224], "vari": [59, 60, 61, 162, 197], "fewshotclassifiermodel": [59, 227], "genericlogregclassifierapproach": [60, 227], "genericlogregclassifi": 60, "multinomi": 60, "logist": [60, 61], "featurevector": [60, 61], "genericlogregclassifiermodel": [60, 227], "generic_logreg_classifier_ad": 60, "genericsvmclassifierapproach": [61, 227], "svmclassifi": 61, "standard": [61, 68, 105, 128], "genericsvmclassifiermodel": [61, 227], "generic_svm_classifier_ad": 61, "document_log_classifi": [62, 92], "document_ml_classifi": [62, 92], "few_shot_classifi": [62, 92], "generic_log_reg_classifi": [62, 92], "generic_svm_classifi": [62, 92], "medical_bert_for_sequence_classif": [62, 92], "medical_bert_for_token_classifi": [62, 92], "medical_distilbert_for_sequence_classif": [62, 92], "medicalbertforsequenceclassif": [63, 65, 78, 227], "medicalbertfortokenclassifi": [63, 64, 227], "head": [63, 64, 65, 99, 130, 159, 171, 172, 194, 206, 207], "pool": [63, 65, 159, 194], "companion": [63, 64, 65, 99, 143, 159, 160, 171, 172, 194, 195, 206, 207], "huggingfac": [63, 64, 65, 159, 171, 194, 206], "maxsentencelength": [63, 64, 65, 159, 171, 194, 206], "tokenclassifi": [63, 64, 159, 171, 194, 206], "felt": [63, 65, 159, 194], "drowsi": [63, 65, 159, 194], "had": [63, 65, 76, 130, 159, 194], "blur": [63, 65, 159, 194], "vision": [63, 65, 159, 194], "aspirin": [63, 65, 105, 159, 194], "coalescesent": [63, 65], "setmaxsentencelength": [63, 64, 65, 122], "getclass": [63, 64, 65, 99, 103, 112, 113, 115], "setcoalescesent": [63, 65], "probabl": [63, 65, 107, 109, 124, 126, 127, 165, 167, 200, 202, 215], "due": [63, 65], "limit": [63, 65, 69, 76, 112], "almost": [63, 65], "512": [63, 65, 130], "help": [63, 65, 69, 120, 130, 131, 146, 180, 222], "loadsavedmodel": [63, 64, 65, 99, 109, 113, 115, 125, 126, 127, 156, 157, 159, 165, 166, 167, 171, 172, 190, 191, 194, 200, 201, 202, 206, 207], "spark_sess": [63, 64, 65, 99, 109, 113, 115, 125, 126, 127, 156, 157, 159, 165, 166, 167, 171, 172, 190, 191, 194, 200, 201, 202, 206, 207], "loadsavedmodelopensourc": [63, 64, 65, 159, 171, 194, 206], "bertfortokenclassifierpath": [63, 64, 65, 159, 171, 194, 206], "tfmodelpath": [63, 64, 65, 159, 171, 194, 206], "bertfortokenclassifi": [63, 64, 65, 159, 171, 194, 206], "taht": [63, 64, 65, 159, 171, 194, 206], "bert_sequence_classifier_ad": 63, "bert_token_classifier_ner_bionlp": [64, 171, 206], "erba": [64, 171, 206], "ir": [64, 146, 171, 206], "myb": [64, 171, 206], "viru": [64, 171, 206], "erythroid": [64, 171, 206], "infect": [64, 171, 206], "bone": [64, 171, 206], "marrow": [64, 171, 206], "blastoderm": [64, 171, 206], "cultur": [64, 171, 206], "tissue_structur": [64, 171, 206], "medicaldistilbertforsequenceclassif": [65, 227], "distilbert": 65, "sequenceclassifi": 65, "distilbertforsequenceclassif": [65, 227], "destilbertfortokenclassifierpath": 65, "distilbert_sequence_classifier_ad": 65, "contextualparserapproach": [66, 227], "setjsonpath": 66, "along": 66, "unifi": 66, "jsonpath": 66, "prefixandsuffixmatch": 66, "suffix": [66, 218], "hit": [66, 218, 219], "tsv": [66, 101], "optionalcontextrul": 66, "regardless": [66, 94], "shortestcontextmatch": 66, "stop": [66, 78, 99, 101, 124, 126, 130, 172, 207, 221], "find": [66, 80, 84, 110, 115, 120, 140, 232], "completecontextmatch": 66, "exact": [66, 84, 94], "parser": [66, 224, 227], "liver": 66, "metastas": 66, "pt1bn0m0": 66, "t5": 66, "primari": 66, "colon": 66, "contextualpars": [66, 95], "regex_token": [66, 237], "setprefixandsuffixmatch": 66, "setoptionalcontextrul": 66, "setshortestcontextmatch": 66, "setcompletecontextmatch": 66, "boundari": 66, "contextualparsermodel": [66, 227], "mycontextualparsermodel": 66, "date_of_birth_pars": 66, "contextual_pars": [67, 92], "deidentificationmodel": [68, 69, 74, 146, 180, 227], "obfusc": [68, 69, 70, 72, 73, 74, 146, 180, 222, 239], "mask": [68, 69, 142, 146, 180], "person": [68, 76, 84, 101, 146, 180, 222], "These": [68, 115, 146, 157, 180, 191], "setregexpatternsdictionari": [68, 146, 180], "line": [68, 84, 94, 101, 146, 180, 224, 232, 237], "util": [68, 115, 157, 176, 191, 212, 213, 217, 222, 227], "secur": [68, 222], "securerandom": 68, "fake": [68, 69, 146, 180], "spark_nlp_jsl_seed_algorithm": 68, "chosen": [68, 99, 172, 207, 219], "impact": 68, "potenti": [68, 131], "about": [68, 131, 218], "rng": 68, "sha1prng": 68, "deidentificationparam": [68, 69, 146, 180], "regexpatternsdictionari": [68, 146, 180], "protect": [68, 95, 146, 180], "obfuscatereffil": [68, 72, 146, 180, 222, 239], "reffileformat": [68, 72, 146, 180], "refsep": [68, 72, 146, 180], "sep": [68, 146, 180, 224], "reffil": [68, 72, 146, 180], "selectiveobfuscationmodespath": [68, 146, 180], "mask_same_length_char": [68, 146, 180], "asterisk": [68, 69, 146, 180], "minu": [68, 69, 146, 180], "plu": [68, 69, 146, 180], "bracket": [68, 69, 146, 180], "mask_entity_label": [68, 146, 180], "mask_fixed_length_char": [68, 146, 180], "fix": [68, 69, 146, 180, 214, 218, 220], "invok": [68, 146, 180], "setfixedmasklength": [68, 69, 146, 180], "intact": [68, 146, 180], "deidentifi": [68, 70, 73, 142, 146, 180, 239], "entitycasingmodespath": [68, 146, 180], "uppercas": [68, 146, 180, 218, 219], "upper": [68, 99, 112, 113, 114, 146, 156, 172, 180, 190, 207, 218], "capit": [68, 146, 180, 218, 219], "titlecas": [68, 146, 180], "setuseabbrevi": [68, 72, 146, 180], "clinical_sensitive_ent": [68, 72, 146, 180], "ner_deid_enrich": [68, 72, 146, 180], "ner_con": [68, 146, 180], "dei": [68, 73, 146, 180], "dic_regex_patterns_main_categori": [68, 146, 180], "setobfuscatereffil": [68, 72, 74, 146, 180], "obfuscate_fixed_ent": [68, 146, 180], "setreffileformat": [68, 72, 74, 146, 180], "setrefsep": [68, 72, 74, 146, 180], "setmod": [68, 69, 70, 146, 180], "setdateformat": [68, 69, 146, 180], "mm": [68, 86, 104, 146, 180, 222, 224, 235], "dd": [68, 86, 104, 117, 146, 180, 222, 235], "yy": [68, 146, 180], "yyyi": [68, 86, 104, 146, 180, 222, 235], "setobfuscated": [68, 69, 70, 146, 180], "setdatetag": [68, 69, 70, 146, 180], "setdai": [68, 69, 146, 180], "setobfuscaterefsourc": [68, 69, 70, 72, 146, 180], "7194334": [68, 73, 146, 180], "93": [68, 73, 146, 180], "oliveira": [68, 73, 146, 180], "record": [68, 73, 146, 180, 222], "2079": [68, 73, 146, 180], "09": [68, 73, 146, 180], "01010101": [68, 73, 146, 180], "dr": [68, 72, 73, 74, 146, 180], "gregori": [68, 73, 146, 180], "hous": [68, 73, 146, 180], "regexpatternsdictionaryasjsonstr": 68, "combineregexpattern": 68, "setregexpatternsdictionaryasjsonstr": 68, "setcombineregexpattern": 68, "f": [68, 72, 86, 141, 175], "setselectiveobfuscationmod": 68, "setentitycasingmod": 68, "regexent": [68, 146, 180], "keep": [68, 89, 99, 120, 124, 130, 146, 153, 172, 180, 187, 207, 214, 219], "regexpatterndictionari": [68, 146, 180], "deidentify_larg": [68, 146, 180], "getregexent": 68, "deidentify_enriched_clin": 68, "deidentif": [69, 70, 71, 73, 92, 142, 148, 149, 182, 183, 222, 227, 239], "anonim": [69, 146, 180], "obfuscated": [69, 146, 180], "dateformat": [69, 146, 180, 222], "unnormalizeddatemod": 69, "datetag": [69, 146, 180], "dai": [69, 70, 104, 146, 180, 222, 239], "displac": [69, 146, 180, 222], "60": [69, 146, 180, 222], "datetoyear": [69, 146, 180], "minyear": [69, 146, 180], "1929": 69, "pars": [69, 70, 84, 146, 180, 224, 235, 242], "consistentobfusc": [69, 146, 180], "sameentitythreshold": [69, 146, 180], "consid": [69, 76, 81, 82, 102, 107, 109, 114, 120, 126, 127, 130, 146, 165, 167, 180, 200, 202, 250], "appear": [69, 80, 81, 110, 146, 180], "9": [69, 112, 120, 146, 180, 224], "obfuscaterefsourc": [69, 72, 146, 180, 222], "invalid": 69, "obfuscatorreffil": [69, 146, 180], "faker": [69, 70, 72, 142, 146, 180, 222, 239], "randomli": [69, 99, 146, 172, 180, 207, 218, 219, 222], "regexoverrid": [69, 146, 180], "priorit": [69, 95, 146, 180], "english": [69, 72, 146, 180, 218, 219, 222, 239], "german": [69, 72, 146, 180, 222, 239], "spanish": [69, 72, 146, 180, 222, 239], "fr": [69, 72, 146, 180, 222, 239], "french": [69, 72, 146, 180, 222, 239], "arab": [69, 72, 146, 180, 222, 239], "ro": [69, 72, 146, 180, 222, 239], "romanian": [69, 72, 146, 180, 222, 239], "With": [69, 72, 146, 180], "repli": [69, 72, 146, 180], "ignoreregex": [69, 146, 180], "israndomdatedisplac": [69, 146, 180], "mappingscolumn": [69, 146, 180], "returnentitymap": [69, 146, 180], "iban": [69, 146, 180, 222], "zip": [69, 146, 180, 222], "npi": [69, 146, 180, 222], "dln": [69, 146, 180, 222], "passport": [69, 146, 180, 222], "c_card": [69, 146, 180, 222], "dea": [69, 146, 180, 222], "ssn": [69, 146, 180, 222], "maskingpolici": [69, 146, 180], "polici": [69, 105, 146, 180], "same_length_char": [69, 146, 180], "compos": [69, 146, 180], "surround": [69, 80, 146, 180], "squar": [69, 146, 180], "total": [69, 146, 180, 214], "smith": [69, 110, 146, 180], "jo": [69, 146, 180], "fixed_length_char": [69, 146, 180], "samelengthformattedent": [69, 146, 180], "fax": [69, 146, 180, 222], "idnum": [69, 146, 180], "bioid": [69, 146, 180, 222], "medicalrecord": [69, 146, 180, 222], "vin": [69, 146, 180], "plate": [69, 146, 180], "genderawar": [69, 72, 146, 180], "awar": [69, 72, 130, 146, 180, 219], "might": [69, 72, 84, 99, 146, 172, 180, 207, 248], "decreas": [69, 72, 131, 146, 180], "agerangesbyhipaa": 69, "hipaa": 69, "health": [69, 78, 248], "insur": [69, 175], "portabl": 69, "account": [69, 80, 175, 222], "privaci": 69, "mandat": 69, "90": [69, 224], "younger": 69, "remain": [69, 72], "unchang": 69, "larger": [69, 101], "agerang": 69, "obfuscationstrategyonexcept": 69, "occur": [69, 99, 107, 124, 172, 207, 222], "four": 69, "throw": [69, 175], "metadatamaskingpolici": 69, "asterix": 69, "fixedmasklength": [69, 146, 180], "zipcodetag": 69, "useshifdai": 69, "region": [69, 142, 247], "outputasdocu": 69, "setlanguag": [69, 70, 72], "getblacklist": 69, "anonym": [69, 232], "setmaskingpolici": 69, "setzipcodetag": 69, "setdatetoyear": 69, "setminyear": 69, "setconsistentobfusc": 69, "setsameentitythreshold": 69, "setregexoverrid": 69, "setignoreregex": 69, "increas": [69, 112, 114, 124, 131], "setse": [69, 70, 72], "setisrandomdatedisplac": 69, "setmappingscolumn": [69, 73], "setreturnentitymap": 69, "setblacklist": [69, 132], "setuseshifdai": [69, 70], "setuseshiftdai": 69, "shift": [69, 70, 239], "getuseshiftdai": 69, "useshiftdai": 69, "setregion": 69, "especi": [69, 222, 239], "2023": [69, 70, 104, 175], "eu": 69, "european": 69, "union": 69, "usa": [69, 172, 207], "setunnormalizeddatemod": 69, "setagerang": 69, "preserv": [69, 101], "setoutputasdocu": 69, "join": [69, 134, 214, 218], "setsamelengthformattedent": 69, "getsamelengthformattedent": 69, "setgenderawar": [69, 72], "setagerangesbyhipaa": 69, "setobfuscationstrategyonexcept": 69, "setmetadatamaskingpolici": 69, "documenthashcod": [70, 227], "purpos": [70, 89, 218], "hash": 70, "accordingli": 70, "patientidcolumn": 70, "dateshiftcolumn": 70, "newdateshift": 70, "rangedai": 70, "rang": [70, 99, 172, 207], "patientid": 70, "a001": 70, "a003": 70, "chri": 70, "brown": [70, 246, 247], "discharg": 70, "02": [70, 104], "04": [70, 104], "03": [70, 104, 114, 224], "moor": 70, "dateshift": [70, 142], "my_input_df": 70, "documenthash": [70, 142], "setdateshiftcolumn": 70, "clinical_n": [70, 74, 88], "ner_deid_subentity_aug": 70, "de_identif": 70, "deid_text": 70, "pipeline_col": 70, "pipeline_col_model": 70, "ellend": 70, "manual": [70, 210], "errol": 70, "bang": 70, "ariel": 70, "null": [70, 224], "jean": 70, "cotton": 70, "setpatientidcolumn": 70, "predefin": [70, 81, 94, 117], "setnewdateshift": 70, "setrangedai": 70, "deidentication_param": [71, 92], "doccument_hashcod": [71, 92], "name_obfusc": [71, 92], "reidentif": [71, 92, 227], "namechunkobfuscatorapproach": [72, 74, 227], "namechunkobfusc": [72, 74, 227], "doctor": [72, 222], "seper": [72, 218, 239, 242], "samelength": 72, "nameent": 72, "obfuscator_nam": 72, "replacer_nam": [72, 74], "obfuscated_nam": 72, "setusereplac": [72, 74], "davi": [72, 74], "admit": [72, 74, 110], "seen": [72, 74, 130], "attend": [72, 74], "physician": [72, 74], "lorand": [72, 74], "schedul": [72, 74], "emerg": [72, 74, 248], "assess": [72, 74, 248], "charlestin": 72, "loweri": 72, "setsamelength": 72, "mike": 72, "setnameent": 72, "pretraind": 72, "reidentifi": 73, "py": [73, 74, 102, 124, 125, 134, 136, 137, 164, 166, 199, 201], "frame": [73, 99, 172, 207, 224], "reideintif": 73, "protectedent": 73, "reid": 73, "redeideintif": 73, "datenorm": [74, 104, 227], "usereplac": 74, "disabl": [74, 109, 165, 175, 200, 224], "ner_deid_generic_aug": 74, "ner_converter_nam": 74, "names_test": 74, "obfuscated_document_nam": 74, "nlppipelin": [74, 76, 88], "model_chunck_obfusc": 74, "sample_text": 74, "mr": 74, "lmodel": 74, "re": [74, 92, 124, 176, 224, 227], "print": [74, 140, 218, 221, 225, 245, 246, 250], "fitzpatrick": 74, "bowman": 74, "acosta": 74, "getusereplac": 74, "ner_disambigu": [75, 92], "nerdisambigu": [76, 227], "interest": 76, "compani": [76, 222], "kb": 76, "ne": [76, 175], "mention": [76, 105], "surfac": 76, "instanti": [76, 84, 94, 99, 117, 160, 172, 195, 207, 224], "embeddingtypeparam": 76, "numfirstchar": 76, "tokensearch": 76, "narrowwithapproximatematch": 76, "narrow": 76, "levenstein": 76, "levenshteindistancethresholdparam": 76, "nearmatchinggapparam": 76, "trim": [76, 130], "candid": [76, 120], "len": 76, "nearmatchinggap": 76, "predictionslimit": 76, "s3knowledgebasenam": 76, "contest": 76, "donald": 76, "trump": 76, "who": [76, 110, 130], "defeat": 76, "christina": 76, "aguilera": 76, "sentenceembed": [76, 160, 195, 227], "nerdlmodel": [76, 80, 99, 172, 207, 227], "sets3knowledgebasenam": 76, "setnumfirstchar": 76, "wikipedia": 76, "curid": 76, "4848272": 76, "31698421": 76, "55907961": 76, "144171": 76, "6636454": 76, "setembeddingtyp": 76, "settokensearch": 76, "setnarrowwithapproximatematch": 76, "setlevenshteindistancethresholdparam": 76, "setnearmatchinggapparam": 76, "setpredictionlimit": 76, "nerdisambiguatormodel": [76, 227], "disambiguator_p": 76, "doc2chunkintern": [77, 227], "chunkcol": [77, 121, 147, 181], "stringtyp": [77, 104, 121, 147, 181], "arraytyp": [77, 121, 147, 181], "setisarrai": [77, 121, 147, 181], "startcolbytokenindex": [77, 147, 181], "prepend": [77, 130, 147, 181], "whitespac": [77, 124, 130, 147, 181, 214, 218], "isarrai": [77, 147, 181], "failonmiss": [77, 147, 181], "job": [77, 147, 181], "chunk2doc": [77, 122, 147, 181, 227], "advanc": [77, 147, 181], "natur": [77, 115, 147, 157, 181, 191], "annotatortyp": [77, 121, 147, 181, 227], "miss": 77, "documentfiltererbyclassifi": 78, "pass": [78, 91, 101, 210, 214, 218], "medicalbfsc": 78, "bert_sequence_classifier_covid_senti": 78, "documentfilter": 78, "filtereddocu": 78, "posit": [78, 95, 99, 101, 112, 114, 126, 127, 167, 202, 207, 224, 237], "british": [78, 218, 219], "depart": 78, "uk": 78, "trip": 78, "australian": 78, "exchang": 78, "student": 78, "got": [78, 219], "cancel": 78, "coronaviru": 78, "wish": 78, "everyon": 78, "safe": 78, "pandem": [78, 126, 127, 167, 202], "181": 78, "233": 78, "averageembed": [79, 80, 227], "embded": 79, "bertsentencechunkembed": [80, 82, 227], "numer": [80, 86, 131, 219], "chunkweight": 80, "prerequisit": [80, 99, 172, 207], "medicalnerdlmodel": [80, 99, 172, 207], "sbluebert_base_uncased_mli": 80, "sentence_chunk_embed": 80, "31995273": 80, "04710883": 80, "28973156": 80, "1294758": 80, "12481072": 80, "027161136": 80, "24613449": 80, "0949309": 80, "1825444": 80, "2252143": 80, "45139068": 80, "12400375": 80, "0075617577": 80, "90806055": 80, "12871636": 80, "setchunkweight": 80, "sbiobert_base_cased_mli": [80, 81, 121], "entitychunkembed": [81, 227], "One": [81, 218, 236], "look": 81, "tri": [81, 86, 99], "criterion": [81, 99, 172, 207], "anoth": 81, "syntact": [81, 112, 114, 214], "relationship": [81, 115, 157, 191], "125": 81, "paracetamol": [81, 115], "metformin": 81, "target_ent": 81, "related_ent": 81, "notat": 81, "targetent": [81, 177, 227], "insensit": 81, "entityweight": [81, 177, 227], "3f": 81, "maxsyntacticdist": [81, 112, 114], "pos_clin": [81, 112, 113, 114, 115, 156, 190], "dependency_pars": [81, 114, 115], "dependencyparsermodel": [81, 112, 113, 114, 115, 156, 190, 227], "dependency_conllu": [81, 112, 113, 114, 115, 156, 190], "setmaxsyntacticdist": [81, 112, 113, 114, 115, 156, 190], "settargetent": 81, "setentityweight": 81, "parient": 81, "coumadin": 81, "pill": 81, "sparkcontextfortest": 81, "267413": 81, "07614058": 81, "5620966": 81, "83838946": 81, "8911504": 81, "22319649": 81, "07094894": 81, "6885556": 81, "79176235": 81, "82672405": 81, "10939768": 81, "29242": 81, "3574444": 81, "3981813": 81, "79609615": 81, "weigh": 81, "related1": 81, "related2": 81, "extractivesummar": [82, 227], "summarizaiton": 82, "lexrank": 82, "similaritythreshold": 82, "summarys": 82, "returnsingledocu": 82, "setsimilaritythreshold": 82, "setsummarys": 82, "summar": [82, 124], "setreturnsingledocu": 82, "compil": [82, 226, 249], "average_embed": [83, 92], "bert_sentence_embed": [83, 92], "entity_chunk_embed": [83, 92], "extractive_summar": [83, 92], "entityrulerintern": 84, "entityrulerinternalapproach": 84, "jsonl": 84, "setpatternsresourc": 84, "winterfel": 84, "jon": [84, 120], "stark": 84, "eddard": 84, "patternsresourc": 84, "usestorag": 84, "rocksdb": 84, "entityrul": 84, "lord": 84, "29": 84, "38": [84, 224], "optionalinputannotatortyp": [84, 130], "sentencematch": 84, "alphabet": 84, "interpret": [84, 88, 130], "setusestorag": 84, "setsentencematch": 84, "setalphabetresourc": 84, "plain": 84, "entityrulerinternalmodel": 84, "databas": [84, 218, 219], "entity_pattern": 84, "loadstorag": 84, "storage_ref": 84, "entity_ruler_intern": [85, 92], "featuresassembl": [86, 89, 227], "anyth": [86, 131], "cast": 86, "feature_vector": [86, 89, 243], "timestampformat": 86, "hh": 86, "ss": 86, "zz": 86, "test_jsl": 86, "relfeatur": 86, "withcolumn": 86, "array_column": 86, "words_in_ent1": [86, 224], "words_in_ent2": [86, 224], "features_asm1": 86, "words_between": [86, 224], "features_t": 86, "__data": 86, "filteringparam": [87, 227], "setregex": 87, "setfiltervalu": 87, "easier": 88, "analyz": [88, 114], "cleanannot": 88, "explodeselectedfield": 88, "flattenexplodedcolumn": 88, "orderbycolumn": 88, "orderdescend": 88, "descend": 88, "pretrainedpipelin": [88, 227], "elderli": 88, "gentleman": 88, "acut": 88, "distress": 88, "ner_jsl": [88, 95, 98, 99, 101], "clinical_assert": 88, "finish": [88, 227], "setexplodeselectedfield": 88, "setorderbycolumn": 88, "assertion_metadata_confid": 88, "explainresult": 88, "finished_ner_chunk_explod": 88, "ner_chunk_result": 88, "ner_chunk_metadata_ent": 88, "assertion_result": 88, "someoneels": 88, "9885": 88, "9976": 88, "9994": 88, "setcleanannot": 88, "getinputcol": [88, 131], "choos": [88, 99, 144, 160, 172, 178, 195, 207], "alia": 88, "setflattenexplodedcolumn": 88, "comprehens": 88, "view": 88, "setorderdescend": 88, "labelcolumn": [89, 99, 131, 160, 172, 195, 207], "epochsn": 89, "proce": [89, 218], "dropou": 89, "lay": 89, "validaiton": 89, "fiximbal": 89, "whenther": 89, "balanc": 89, "trainig": 89, "featuresc": [89, 112], "minmax": [89, 112], "feature_1": 89, "feature_2": 89, "feature_n": 89, "graph_fil": [89, 112], "setmulticlass": [89, 112], "label_column": 89, "drouptup": 89, "validation_split": 89, "mode_fil": 89, "fix_imbal": 89, "feature_sc": [89, 112], "output_logs_path": 89, "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 89, "handleexceptionparam": 91, "handl": [91, 101, 131, 234], "doexceptionhandl": [91, 99, 101], "setdoexceptionhandl": [91, 99, 101], "caus": [91, 101, 112, 248], "messag": [91, 101, 240], "deid": [92, 149, 158, 176, 183, 192, 227], "disambigu": [92, 176, 227, 243], "er": [92, 176, 227], "text_matcher_intern": [92, 93], "chunk_merg": [92, 96], "iob_tagg": [92, 97], "medical_n": [92, 97], "ner_converter_intern": [92, 97], "ner_template_rend": [92, 97], "zero_shot_n": [92, 97, 170, 173, 204, 205], "date_norm": [92, 106], "drug_norm": [92, 106], "qa": [92, 126, 127, 165, 167, 176, 200, 202, 227], "beam_search_param": [92, 108], "medical_qa": [92, 108], "qa_ner_gener": [92, 108, 158, 168, 192, 198], "relation_extraction_dl": [92, 111, 154, 155, 188, 189], "relation_ner_chunk_filt": [92, 111], "zero_shot_relation_extract": [92, 111, 154, 155, 188, 189], "resolut": [92, 121, 149, 158, 176, 183, 192, 227, 246], "resolver_merg": [92, 118], "sentence_entity_resolv": [92, 118, 149, 152, 183, 186], "seq2seq": [92, 176, 227], "medical_encoder_decod": [92, 123], "medical_summar": [92, 123], "medical_text_gener": [92, 123], "text2sql": [92, 123, 227], "splitter": [92, 176], "internal_document_splitt": [92, 129], "windowed_sent": [92, 133], "annotation_merg": [92, 176], "chunk2_token": [92, 176], "doc2_chunk_intern": [92, 176], "document_filterer_by_classifi": [92, 176], "feature_assembl": [92, 176], "filtering_param": [92, 176], "flatten": [92, 176], "handle_exception_param": [92, 176], "resolution2_chunk": [92, 176], "router": [92, 176, 227], "source_tracking_metadata_param": [92, 176], "tf_graph_build": [92, 176], "white_black_list_param": [92, 176], "textmatcherintern": 94, "setent": 94, "externalresourc": [94, 227], "mergeoverlap": [94, 95], "overlap": [94, 95, 130], "entityvalu": 94, "buildfromtoken": 94, "dolor": 94, "magna": 94, "aliqua": 94, "entity_name_1": 94, "lorem": 94, "ipsum": 94, "sit": 94, "laborum": 94, "hello": 94, "entityextractor": 94, "extractor": 94, "24": [94, 175], "48": 94, "59": [94, 114], "setmergeoverlap": [94, 95], "setentityvalu": 94, "setbuildfromtoken": 94, "textmatcherinternalmodel": 94, "searchtri": 94, "getcasesensit": 94, "getdelimit": 94, "mergecommonparam": [95, 227], "mergeprioritizationparam": [95, 227], "orderingfeatur": 95, "selectionstrategi": 95, "defaultconfid": 95, "chunkpreced": 95, "chunkprecedencevaluepriorit": 95, "setorderingfeatur": 95, "chunkbegin": 95, "chunklength": 95, "chunkconfid": 95, "setselectionstrategi": 95, "diverselong": 95, "setdefaultconfid": 95, "setchunkpreced": 95, "comma": [95, 99, 101, 172, 207], "drive": 95, "togeth": [95, 134], "setchunkprecedencevaluepriorit": 95, "mergeresourceparam": [95, 227], "falsepositivesresourc": 95, "replacedictresourc": [95, 101], "setfalsepositivesresourc": 95, "setreplacedictresourc": [95, 101], "mergefeatureparam": [95, 227], "setfalseposit": 95, "third": [95, 110], "wow": 95, "beauti": 95, "thing": 95, "setreplacedict": 95, "replacedict": 95, "getreplacedict": 95, "chunkmergeapproach": [95, 227], "merger": 95, "certain": [95, 100], "decis": 95, "kept": 95, "preced": 95, "proccess": [95, 101, 110], "emb": [95, 98], "jsl_ner": [95, 101], "jsl_ner_chunk": 95, "ner_bionlp": 95, "bionlp_ner": 95, "bionlp_ner_chunk": 95, "merged_chunk": 95, "19": [95, 98, 126, 127, 167, 202, 224], "72": [95, 98], "98": [95, 98], "107": [95, 98], "cellul": [95, 98], "diagnosi": [95, 98], "119": [95, 98], "pneumonia": [95, 98], "chunkmergemodel": [95, 227], "falseposit": 95, "iobtagg": [98, 227], "bioe": 98, "iobtaggermodel": 98, "setschem": 98, "bilstm": [99, 172, 207], "art": [99, 160, 172, 195, 207], "2003": [99, 172, 207], "bertembed": [99, 120, 153, 172, 187, 207, 227], "minepoch": [99, 172, 207], "maxepoch": [99, 160, 172, 195, 207], "randomse": [99, 102, 124, 126, 127, 160, 167, 172, 195, 202, 207], "reproduc": [99, 126, 127, 167, 202, 207], "decai": [99, 131, 172, 207], "coeffici": [99, 160, 172, 195, 207], "005": [99, 160, 172, 195, 207], "adequ": [99, 172, 207], "blstn_": [99, 172, 207], "embedding_dim": [99, 172, 207], "exactli": [99, 172, 207, 218], "greater": [99, 120, 172, 207], "satisfi": [99, 172, 207], "ill": [99, 172, 207], "usecontrib": [99, 172, 207], "Not": [99, 172, 207], "slightli": [99, 172, 207], "hold": [99, 112, 172, 207], "evaluationlogextend": [99, 144, 172, 178, 207], "parquet": [99, 172, 207], "includeallconfidencescor": [99, 172, 207], "slow": [99, 131, 172, 207], "down": [99, 131, 172, 207], "speed": 99, "stdout": [99, 160, 172, 195, 207], "enablememoryoptim": [99, 172, 207], "practic": [99, 172, 207], "slower": [99, 172, 207], "evei": [99, 172, 207], "bach": [99, 172, 207], "tagsmap": [99, 172, 207], "oldtag": [99, 172, 207], "newtag": [99, 172, 207], "vip": [99, 172, 207], "overrideexistingtag": 99, "earlystoppingpati": [99, 172, 207], "wait": [99, 172, 207], "earli": [99, 172, 207], "earlystoppingcriterion": [99, 172, 207], "soon": [99, 172, 207], "met": [99, 172, 207], "patienc": [99, 172, 207], "f1": [99, 172, 207, 220, 225, 245, 250], "socr": [99, 172, 207], "prioriti": [99, 128, 172, 207], "infin": [99, 172, 207], "pretrainedmodelpath": [99, 112, 120, 153, 172, 187, 207], "point": [99, 112, 120, 153, 172, 187, 207], "logprefix": [99, 172, 207], "append": [99, 115, 130, 157, 172, 191, 207], "usebestmodel": [99, 172, 207], "overrid": [99, 102, 112, 120, 153, 187], "sentencetokenindex": 99, "thu": [99, 172, 207, 210], "trainingdata": [99, 172, 207], "readdataset": [99, 172, 207, 224], "conll2003": [99, 172, 207], "eng": [99, 172, 207, 224], "randomvalidationsplitperepoch": 99, "setusecontrib": 99, "setlr": [99, 160, 195], "setpo": 99, "rage": [99, 172], "setincludeallconfidencescor": 99, "bad": [99, 160, 195], "lost": 99, "setusebestmodel": 99, "across": 99, "setlogprefix": 99, "setpretrainedmodelpath": [99, 112, 120], "setoverrideexistingtag": [99, 172, 207], "settagsmap": 99, "setearlystoppingcriterion": 99, "setearlystoppingpati": 99, "termin": [99, 109], "setrandomvalidationsplitperepoch": 99, "setsentencetokenindex": 99, "nerdlapproach": [99, 131, 172, 207, 215, 227], "wordembed": [99, 172, 207, 227], "glove_100d": [99, 172, 207], "inferencebatchs": [99, 172, 207], "labelcas": [99, 172, 207], "offici": [99, 172, 207], "ekeu": [99, 172, 207], "baghdad": [99, 172, 207], "trainingclassdistribut": 99, "setinferencebatchs": 99, "setlabelcas": 99, "gettrainingclassdistribut": 99, "nerchunk": [100, 112, 113, 156, 190, 227], "neighbor": [100, 134], "dt": 100, "jj": 100, "ner_radiologi": 100, "imagingfind": 100, "bodypart": 100, "regexpars": 100, "commonnerconverterinternalparam": 101, "preserveposit": 101, "greedymod": 101, "contigu": 101, "ignorestopword": 101, "setallowlist": 101, "loc": [101, 250], "setdenylist": [101, 132], "setpreserveposit": 101, "preserve_posit": 101, "setgreedymod": 101, "greedy_mod": 101, "setthreshold": [101, 120, 153, 187], "setignorestopword": 101, "stopword": 101, "iob2": [101, 218, 219], "friendli": 101, "annotatorapproach": [101, 227], "nerconverterinternalmodel": [101, 227], "outsid": 101, "substitut": [101, 127], "replaced_ner_chunk": 101, "drug_brandnam": 101, "drug_frequ": 101, "drug_dosag": 101, "drug_strength": 101, "nertemplaterendermodel": [102, 227], "scala": [102, 110, 124, 125, 134, 136, 137, 164, 166, 199, 201, 226, 228, 232, 233, 234, 249], "inherit": [102, 124, 125, 134, 137, 164, 166, 199, 201], "mix": [102, 124, 125, 134, 137, 164, 166, 199, 201], "ins": [102, 124, 125, 134, 137, 164, 166, 199, 201], "uid": [102, 124, 125, 134, 137, 164, 166, 199, 201, 209], "templat": [102, 109, 115, 126, 127, 157, 165, 167, 191, 200, 202], "entityscop": 102, "resampleent": 102, "combineent": 102, "permuteent": 102, "settempl": 102, "liststr": 102, "setentityscop": 102, "render": 102, "setresampleent": 102, "resampl": 102, "enough": 102, "setcombineent": 102, "setpermuteent": 102, "permut": 102, "even": 102, "zeroshotnermodel": [103, 174, 208, 227], "shot": [103, 115, 157, 174, 191, 208], "robertaforquestionansw": [103, 174, 208, 227], "entitydefinit": [103, 174, 208], "question": [103, 109, 110, 165, 174, 200, 208], "citi": [103, 122, 174, 208, 222], "town": [103, 174, 208], "predictionthreshold": [103, 112, 113, 115, 156, 157, 174, 190, 191, 208], "01f": [103, 174, 208], "ignoreent": [103, 174, 208], "setentitydefinit": [103, 174, 208], "clara": [103, 174, 208], "live": [103, 174, 208, 222], "york": [103, 174, 208], "hellen": [103, 174, 208], "pari": [103, 174, 208], "5328949": [103, 174, 208], "9360068": [103, 174, 208], "83294415": [103, 174, 208], "45366877": [103, 174, 208], "setpredictionthreshold": [103, 112, 113, 156, 190], "zero_shot_ner_roberta": 103, "els": 104, "anchordateyear": 104, "anchor": 104, "tomorrow": 104, "2021": [104, 114, 175], "anchordatemonth": 104, "month": 104, "januari": 104, "anchordatedai": 104, "08": [104, 175], "12mar2021": 104, "jan": 104, "3april": 104, "2020": [104, 175], "mondai": [104, 121, 160, 195], "todai": 104, "week": 104, "original_d": 104, "date_chunk": 104, "setanchordateyear": 104, "2000": 104, "setanchordatemonth": 104, "setanchordatedai": 104, "normalized_d": 104, "outputdateformat": 104, "defaultreplacementdai": 104, "defaultreplacementmonth": 104, "defaultreplacementyear": 104, "setoutputdateformat": 104, "setdefaultreplacementdai": 104, "setdefaultreplacementmonth": 104, "06": 104, "setdefaultreplacementyear": 104, "drugnorm": [105, 227], "apac": 105, "discuss": 105, "blog": 105, "post": [105, 127], "abbrevi": 105, "oral": 105, "sol": 105, "solut": 105, "million": [105, 126, 127, 130, 167, 202], "10000000": 105, "unt": 105, "sodium": 105, "chlorid": 105, "potassium": 105, "13bag": 105, "interferon": 105, "alfa": 105, "2b": 105, "injec": 105, "meq": 105, "document_norm": 105, "trainingpipelin": 105, "normalized_text": [105, 120, 153, 187], "bag": 105, "inject": 105, "setpolici": 105, "beamsearchparam": 107, "maxcontextlength": [107, 109, 126, 127, 165, 167, 200, 202], "dosampl": [107, 109, 124, 126, 127, 165, 167, 200, 202], "topk": [107, 109, 124, 126, 127, 165, 167, 200, 202], "ignoretokenid": [107, 109, 124, 126, 127, 165, 167, 200, 202], "maxnewtoken": [107, 109, 124, 126, 127, 165, 167, 200, 202], "norepeatngrams": [107, 109, 124, 126, 127, 165, 167, 200, 202], "setignoretokenid": [107, 124], "decod": [107, 109, 124, 126, 127, 165, 167, 200, 202], "setmaxcontextlength": 107, "setdosampl": [107, 124], "greedi": [107, 109, 124, 126, 127, 165, 167, 200, 202], "settopk": [107, 124], "vocabulari": [107, 109, 124, 126, 127, 165, 167, 200, 202], "setmaxnewtoken": [107, 109, 124, 126, 127, 165, 167, 200, 202], "setnorepeatngrams": [107, 124], "medicalquestionansw": [109, 165, 200, 227], "gpt": [109, 126, 127, 165, 167, 200, 202], "answer": [109, 110, 126, 127, 130, 165, 167, 200, 202], "span": [109, 165, 200], "capabl": [109, 165, 200], "ye": [109, 165, 200], "questiontyp": [109, 165, 200], "card": [109, 165, 200, 222], "repeat": [109, 126, 127, 165, 167, 200, 202, 216], "prevent": [109, 126, 127, 131, 165, 167, 200, 202], "customprompt": [109, 126, 127, 165, 167, 200, 202], "prompt": [109, 126, 127, 165, 167, 200, 202], "usecach": [109, 124, 126, 165, 200], "spare": [109, 165, 200], "studi": [109, 165, 200], "failur": [109, 120, 165, 200], "breast": [109, 165, 200], "cancer": [109, 115, 165, 200], "chest": [109, 165, 200], "wall": [109, 165, 200], "irradi": [109, 165, 200], "mastectomi": [109, 165, 200], "multidocumentassembl": [109, 165, 200, 227], "document_quest": [109, 165, 200], "document_context": [109, 165, 200], "med_qa": [109, 165, 200], "medical_qa_biogpt": [109, 165, 200], "setquestiontyp": [109, 165, 200], "modeltyp": [109, 126, 227], "mlframeworktyp": [109, 124, 126], "setusecach": [109, 126], "setcustomprompt": [109, 126], "setquestionanswertermin": 109, "questiontermin": 109, "symbol": [109, 246], "setquestionprompt": 109, "questionprompt": 109, "setquestionskiplasttoken": 109, "questionskiplasttoken": 109, "getquestiontyp": 109, "loadmedicaltextgener": 109, "med_text_generator_path": 109, "medicaltextgener": [109, 126, 127, 167, 202, 227], "flan_t5_base_jsl_qa": 109, "nerquestiongener": [110, 227], "pronoun": 110, "questionpronoun": 110, "questionmark": 110, "questionanswer": 110, "why": 110, "strategytyp": 110, "entities1": 110, "entities2": 110, "qagener": 110, "setquestionmark": 110, "setquestionpronoun": 110, "setstrategytyp": 110, "setentities1": 110, "setentities2": 110, "admiss": 110, "zeroshotn": 110, "align": [110, 216, 218], "relationextractionmodel": [112, 113, 156, 190, 227], "tensorflow_graph": 112, "relationdirectioncol": 112, "decript": 112, "fromentitybegincol": 112, "fromentityendcol": 112, "fromentitylabelcol": 112, "toentitybegincol": 112, "toentityendcol": 112, "toentitylabelcol": 112, "leftward": 112, "rightward": 112, "symmetr": [112, 227], "embedd": [112, 113, 156, 190], "postag": [112, 113, 156, 190], "ner_events_clin": [112, 113, 156, 190], "depencypars": [112, 113, 156, 190], "relations_t": 112, "target_rel": 112, "05": [112, 175], "from_begin": 112, "from_end": 112, "from_label": 112, "to_begin": 112, "to_end": 112, "to_label": 112, "traindata": [112, 113, 156, 190], "customlabel": [112, 113, 177, 227], "overrideexistinglabel": 112, "begin_col": 112, "label_col": [112, 143], "setcustomlabel": [112, 113], "setrelationdirectioncol": 112, "set\u043everrideexistinglabel": 112, "annotatormodel": [112, 227], "relationpair": [112, 113, 114, 156, 190], "dash": [112, 114], "biomark": 112, "relativedai": 112, "relationpairscasesensit": [112, 113, 114], "relationtypeperpair": 112, "problem": [112, 114, 115, 131, 157, 191, 224], "symtom": 112, "external_body_part_or_region": [112, 113, 114, 156, 190], "internal_organ_or_compon": [112, 113, 114, 156, 190], "re_model": [112, 113, 115, 156, 190], "re_bodypart_direct": 112, "setrelationpair": [112, 113, 114, 115, 156, 190], "mri": [112, 113, 114, 115, 156, 190], "demonstr": [112, 113, 114, 156, 190], "infarct": [112, 113, 114, 156, 190], "brain": [112, 113, 114, 156, 190], "cerebellum": [112, 113, 114, 156, 190], "basil": [112, 113, 114, 156, 190], "ganglia": [112, 113, 114, 156, 190], "chunk1": [112, 113, 156, 190, 224], "chunk2": [112, 113, 156, 190, 224], "far": [112, 114], "recal": [112, 225, 245, 250], "setrelationpairscasesensit": [112, 113, 114], "setrelationtypeperpair": [112, 113], "relationtypepair": [112, 113], "getrelationtypeperpair": [112, 113], "posology_r": 112, "posologyremodel": [112, 227], "posologi": 112, "genericremodel": [112, 227], "relationextractiondlmodel": [113, 114, 156, 190, 227], "contrast": [113, 156, 190], "re_ner_chunk_filt": [113, 114, 115, 156, 190], "renerchunksfilt": [113, 114, 115, 156, 157, 190, 191, 227], "re_ner_chunk": [113, 114, 115, 156, 190], "redl_bodypart_direction_biobert": [113, 156, 190], "redl_ade_biobert": 113, "realtionpair": 114, "advers": 114, "reaction": 114, "realat": 114, "further": 114, "ner_clinical_en": 114, "html": 114, "awai": 114, "doclevelrel": 114, "words_embedd": [114, 115], "pos_tagg": [114, 115], "clinical_ner_tagg": 114, "jsl_ner_wip_greedy_clin": 114, "trained_pipelin": 114, "cre": 114, "re_chunk": 114, "paired_to": 114, "setdoclevelrel": [114, 115], "zeroshotrelationextractionmodel": [115, 157, 191, 227], "nli": [115, 157, 191], "statement": [115, 157, 191], "regard": [115, 157, 191], "relationalcategori": [115, 157, 177, 191, 227], "hypothesi": [115, 157, 191], "cure": [115, 157, 191], "5f": [115, 157, 191], "multilabel": [115, 157, 191], "categor": [115, 157, 191, 248], "spark_sbert_zero_shot": 115, "setrelationalcategori": 115, "reveal": [115, 157, 191], "setmultilabel": 115, "allevi": 115, "headach": 115, "sick": 115, "9760039": [115, 157, 191], "98819494": [115, 157, 191], "9929625": [115, 157, 191], "negativerelationship": 115, "setnegativerelationship": 115, "serv": 115, "zero_shot_r": 115, "regexmatcherintern": 117, "choic": 117, "1970": 117, "setrul": 117, "match_first": 117, "match_al": [117, 122], "match_complet": 117, "externalrul": 117, "setstrategi": [117, 122], "short_dat": 117, "regexmatcherinternalmodel": 117, "deid_regex": 117, "resolvermerg": [119, 227], "enit": 119, "resolv": [119, 120, 153, 187], "sentenceresolverparam": [120, 227], "famili": 120, "distancefunct": 120, "mover": 120, "wmd": 120, "euclidean": 120, "neighbour": 120, "knn": 120, "algorithmm": 120, "queri": 120, "tree": [120, 153, 187], "nearest": 120, "confidencefunct": 120, "invers": 120, "missasempti": 120, "unmatch": 120, "returnresolvedtextembed": 120, "setdistancefunct": [120, 153, 187], "setneighbour": [120, 153, 187], "algorithmn": 120, "thre": 120, "setconfidencefunct": 120, "conf_funct": 120, "setmissasempti": 120, "setreturnresolvedtextembed": 120, "sentenceentityresolverapproach": [120, 153, 187, 227], "sentenceentityresolvermodel": [120, 121, 153, 187, 227], "standart": 120, "aux_label": 120, "auxiliari": [120, 153, 187], "better": [120, 131], "overrideexistingcod": [120, 153, 187], "unwant": 120, "dropcodeslist": [120, 153, 187], "flavour": 120, "normalizedcol": [120, 153, 187], "returncosinedist": [120, 153, 187], "aux_label_col": [120, 153, 187], "useauxlabel": [120, 153, 187], "conceptid": 120, "concept": 120, "snome": [120, 153, 187], "concept_nam": 120, "108367008": 120, "disloc": 120, "joint": 120, "3384011000036100": 120, "arthrotec": 120, "166717003": 120, "serum": 120, "creatinin": 120, "3877011000036101": 120, "lipitor": 120, "402234004": 120, "foot": 120, "eczema": 120, "36031001": 120, "burn": 120, "feet": 120, "76948002": 120, "42399005": 120, "renal": [120, 175], "sent_biobert_pubmed_base_cas": [120, 153, 187], "data_pipelin": 120, "data_processing_model": 120, "prepared_data": 120, "bertextractor": [120, 153, 187], "bert_embed": [120, 153, 187], "setnormalizedcol": [120, 153, 187], "snomed_cod": [120, 153, 187], "euclidian": [120, 153, 187], "setuseauxlabel": 120, "setauxlabelcol": 120, "snomedmodel": [120, 153, 187], "auxlabel": [120, 153, 187], "setextractcosinedist": 120, "setoverrideexistingcod": 120, "setdropcodeslist": 120, "leav": 120, "ontologi": [120, 153, 187], "curat": [120, 153, 187], "rxnorm": [120, 153, 187], "searchtre": [120, 153, 187], "structfeature_hadoopfix": [120, 227], "encapsul": 120, "serializablekdtre": 120, "multidimension": 120, "approch": 120, "loui": 120, "bentlei": 120, "1975": 120, "commun": [120, 175], "acm": 120, "sept": 120, "509": 120, "517": 120, "doi": 120, "1145": 120, "361002": 120, "361007": 120, "sbertresolve_icd10cm_slim_billable_hcc_m": 120, "icd10_cod": [120, 248], "icd10extractorpipelin": 120, "icd10model": 120, "setsearchtre": 120, "search_tre": 120, "usuali": 120, "kdtree": 120, "sbiobertresolve_icd10cm_augmented_billable_hcc": 120, "resolution2chunk": [121, 227], "sbert_embedd": 121, "rxnorm_resolv": 121, "sbiobertresolve_rxnorm_aug": 121, "rxnorm_cod": 121, "m": [121, 160, 175, 195, 222], "readi": [121, 160, 195, 232], "love": [121, 160, 195], "wake": [121, 160, 195], "am": [121, 130, 160, 195], "resolver2chunk": 121, "219400": 121, "13369": 121, "filterfieldsel": 122, "metadatafield": [122, 130], "rules2": 122, "doc_chunk": 122, "sent_small_bert_l2_128": 122, "router_name_embed": 122, "setmetadatafield": [122, 130], "setfilterfieldsel": 122, "names_embed": 122, "router_city_embed": 122, "cities_embed": 122, "router_nam": 122, "names_chunk": 122, "medicalencoderdecod": [124, 227], "stopateo": [124, 126], "maxtextlength": [124, 126], "refinesummari": 124, "refinesummarytargetlength": 124, "refinechunks": 124, "refinemaxattempt": 124, "setrefinesummari": 124, "refin": 124, "cost": 124, "summari": 124, "setrefinesummarytargetlength": 124, "setrefinechunks": 124, "Be": 124, "llm": 124, "setrefinemaxattempt": 124, "summarytargetlength": 124, "setstopateo": [124, 126], "encount": [124, 126], "setmaxtextlength": [124, 126], "medicalsummar": [125, 127, 227], "use_cach": [125, 166, 201], "facilit": [125, 166, 201], "summarizer_clinical_jsl_aug": 125, "popul": [126, 127, 167, 202], "covid": [126, 127, 167, 202], "document_prompt": [126, 127, 167, 202], "med_text_gener": [126, 127, 167, 202], "convid": [126, 127, 167, 202], "peopl": [126, 127, 167, 202], "worldwid": [126, 127, 167, 202], "setadditionaltoken": 126, "additionaltoken": 126, "getadditionaltoken": 126, "model_typ": [126, 127, 167, 202], "text_generator_biomedical_biogpt_bas": 126, "tablelimit": 127, "settablelimit": 127, "tabl": 127, "setschema": 127, "schema": [127, 224, 227], "getschema": 127, "setpostprocessingsubstitut": 127, "getpostprocessingsubstitut": 127, "text2sql_mimicsql": 127, "sourcetrackingmetadataparam": [128, 227], "includeoutputcolumn": 128, "outputcolumnkei": 128, "includestandardfield": 128, "standardfieldkei": 128, "allpossiblefieldstostandard": 128, "setincludeoutputcolumn": 128, "setoutputcolumnkei": 128, "setincludestandardfield": 128, "setstandardfieldkei": 128, "setallpossiblefieldstostandard": 128, "internaldocumentsplitt": 130, "small": 130, "setsplitmod": 130, "splitmod": 130, "recurs": [130, 227], "subtext": 130, "perfect": 130, "reason": [130, 175], "observ": 130, "world": 130, "setsplitpattern": 130, "setpatternsareregex": 130, "setkeepsepar": 130, "settrimwhitespac": 130, "individu": 130, "setexplodesplit": 130, "chunksiz": 130, "applic": [130, 218, 219, 248], "chunkoverlap": 130, "splitpattern": 130, "trfv": 130, "patternsareregex": 130, "keepsepar": 130, "explodesplit": 130, "trimwhitespac": 130, "segment": [130, 175], "suppli": 130, "sentenceawar": 130, "maxlength": 130, "spit": 130, "customboundsstrategi": 130, "bound": [130, 246], "enablesentenceincr": 130, "brioni": 130, "lodg": 130, "serpentin": 130, "aven": 130, "19798": 130, "39395": 130, "19597": 130, "woman": 130, "think": 130, "39371": 130, "59242": 130, "19871": 130, "But": 130, "said": 130, "red": [130, 246], "men": 130, "59166": 130, "77833": 130, "18667": 130, "friend": 130, "enthusiast": 130, "musician": 130, "himself": 130, "capab": 130, "77835": 130, "97769": 130, "19934": 130, "And": 130, "convinc": 130, "97771": 130, "117248": 130, "19477": 130, "slate": 130, "colour": 130, "broad": 130, "brim": 130, "straw": 130, "hat": 130, "feather": 130, "117250": 130, "137242": 130, "19992": 130, "That": 130, "sound": 130, "littl": 130, "paradox": 130, "profoundli": 130, "singulari": 130, "137244": 130, "157171": 130, "19927": 130, "setsentenceawar": 130, "setmaxlength": 130, "setcustomboundsstrategi": 130, "No": [130, 224], "setenablesentenceincr": 130, "tfgraphbuildermodel": 131, "sinc": 131, "seri": [131, 215, 218, 219], "edg": 131, "biggest": 131, "backbon": 131, "program": 131, "graph_fold": 131, "re_graph_fold": 131, "setmodelnam": 131, "re_graph": 131, "sethiddenlay": 131, "sethiddenact": 131, "sethiddenactl2": 131, "sethiddenweightsl2": 131, "setbatchnorm": 131, "modelnam": 131, "hiddenunitsnumb": 131, "hiddenlay": 131, "maxsequencelength": 131, "hiddenact": 131, "hiddenactl2": 131, "hiddenweightsl2": 131, "batchnorm": 131, "islicens": 131, "userelationdirect": 131, "outputact": 131, "gethiddenact": 131, "l2": 131, "aka": 131, "techniqu": 131, "overfit": 131, "involv": 131, "encourag": 131, "gethiddenactl2": 131, "gethiddenweightsl2": 131, "stabil": 131, "getbatchnorm": 131, "setislicens": 131, "medicalneraprroach": 131, "getislicens": 131, "neuron": 131, "gethiddenlay": 131, "hiudden": 131, "setmaxsequencelength": 131, "low": 131, "lose": 131, "valuabl": 131, "On": 131, "hand": 131, "consum": 131, "excess": 131, "getmaxsequencelength": 131, "sethiddenunitsnumb": 131, "solv": 131, "gethiddenunitsnumb": 131, "setuserelationdirect": 131, "getuserelationdirect": 131, "settoutputact": 131, "getoutputact": 131, "getmodelnam": 131, "getlabelcolumn": 131, "getgraphfold": 131, "greaph": 131, "getgraphfil": 131, "whiteblacklistparam": 132, "windowedparam": 134, "windows": 134, "gluestr": 134, "setwindows": 134, "slide": 134, "setgluestr": 134, "windowedsentencemodel": [134, 227], "annotatorapproachintern": 136, "estim": 136, "annotatormodelintern": 137, "annotatorpropertiesintern": 138, "compon": 138, "attach": 138, "setforceinputtypevalid": 138, "inputcolsvalid": 138, "annotator_approach_intern": [139, 176], "annotator_model_intern": [139, 176], "annotator_properties_intern": [139, 176], "verifi": 140, "findvers": 140, "privat": [140, 221], "showvers": 140, "customtransform": 141, "custom_pipelin": 142, "masking_polici": 142, "fixed_mask_length": 142, "obfuscate_d": 142, "obfuscate_ref_sourc": 142, "obfuscate_ref_file_path": 142, "age_group_obfusc": 142, "age_rang": 142, "shift_dai": [142, 239], "number_of_dai": 142, "documenthashcoder_col_nam": 142, "date_tag": 142, "unnormalized_d": 142, "unnormalized_mod": 142, "id_column_nam": 142, "date_shift_column_nam": 142, "multi_mode_file_path": 142, "domain": 142, "input_file_path": [142, 239], "output_file_path": [142, 239], "deid_with_custom_pipelin": 142, "pretrained_pipelin": 142, "deid_with_pretrained_pipelin": 142, "norvigspellevalu": [143, 227], "test_fil": 143, "ground_truth_fil": 143, "computeaccuracyannot": 143, "train_fil": 143, "computeaccuracymodel": 143, "symspellevalu": [143, 227], "nerdlevalu": [143, 227], "tag_level": 143, "full_chunk": 143, "computemetricsfromdf": 143, "prediction_col": 143, "drop_o": 143, "case_sensit": [143, 224], "nercrfevalu": [143, 227], "posevalu": [143, 227], "olumn": [144, 178], "eval": [144, 176, 178, 227], "finassertiondl_time_md": 144, "doesnt": [146, 180], "tha": [146, 180], "ouptut": [146, 180], "finner_deid": 146, "financedocumenthashcod": [147, 227], "setidcolumn": [147, 181], "document_hashcod": [148, 149, 182, 183], "finmapper_edgar_companynam": 150, "snomedtrainingpipelin": [153, 187], "snomedtrainingmodel": [153, 187], "snomeddata": [153, 187], "thiu": 153, "finel_edgar_company_nam": 153, "finre_financial_smal": 156, "finre_zero_shot": 157, "chunk_classif": [158, 176, 192, 227], "sequence_classif": [158, 176, 192, 227], "finance_bert_for_sequence_classif": [158, 163], "finance_classifier_dl": [158, 163], "finance_document_ml_classifi": [158, 163], "finance_few_shot_classifi": [158, 163], "sequence_gener": [158, 176, 192, 227], "finance_encoder_decod": [158, 168], "finance_qa": [158, 168], "finance_summar": [158, 168], "finance_text_gener": [158, 168], "token_classif": [158, 176, 192, 227], "financebertforsequenceclassif": [159, 227], "financebertfortokenclassif": [159, 171, 227], "finclf_bert_banking77": 159, "financeclassifierdlapproach": [160, 227], "classifierdl": [160, 195], "univers": [160, 195], "dnn": [160, 195], "classifierdlmodel": [160, 195, 227], "multiclassifierdlapproach": [160, 195, 227], "sentimentdlapproach": [160, 195, 227], "item": [160, 195, 216, 237], "doubl": [160, 195], "universalsentenceencod": [160, 195, 227], "movi": [160, 195], "wach": [160, 195], "ever": [160, 195], "opinion": [160, 195], "win": [160, 195], "award": [160, 195], "terribl": [160, 195], "realli": [160, 195], "trane": [160, 195], "smallcorpu": [160, 195], "useembed": [160, 195], "docclassifi": [160, 195], "classifierdlapproach": [160, 195, 227], "5e": [160, 195], "financeclassifierdlmodel": [160, 161, 227], "financeclassifierdl": 160, "classifierdl_use_trec6": [160, 195], "trec": [160, 195], "multiclassifierdlmodel": [160, 195, 227], "sentimentdlmodel": [160, 195, 227], "sarcasmdl": [160, 195], "classifierdl_use_sarcasm": [160, 195], "sarcasm": [160, 195], "arrays_zip": [160, 195], "finclf_sec_fil": 160, "financedocumentmlclassifierapproach": [161, 227], "financedocumentmlclassifiermodel": [161, 196, 227], "financefewshotclassifierapproach": [162, 227], "financefewshotclassifi": 162, "financefewshotclassifiermodel": [162, 227], "financeencoderdecod": [164, 227], "financequestionansw": [165, 227], "biogpt_pubmed_qa": [165, 200], "financesummar": [166, 227], "finsum_flant5_finetuned_sec10k": 166, "financetextgener": [167, 227], "fingen_flant5_finetuned_sec10k": 167, "financenerquestiongener": [169, 227], "finance_bert_for_token_classifi": [170, 173], "finance_n": [170, 173], "financebertfortokenclassifi": 171, "finner_responsibility_report": 171, "financenerapproach": [172, 227], "verif": [172, 207], "greather": [172, 207], "financenermodel": [172, 207, 227], "teh": [172, 207], "finner_sec_10k_summari": 172, "finner_roberta_zeroshot": 174, "profil": 175, "code_arrai": 175, "sex": 175, "elig": 175, "cna": 175, "orec": 175, "medicaid": 175, "cm": 175, "hcc": [175, 248], "intens": 175, "adjust": [175, 248], "icd10": 175, "cfa": 175, "benefit": 175, "dual": 175, "cfd": 175, "nondual": 175, "cnd": 175, "cpa": 175, "cpd": 175, "INS": 175, "institut": 175, "enrolle": 175, "snpne": 175, "snp": 175, "entitl": 175, "survivor": 175, "diseas": [175, 248], "dib": 175, "esrd": 175, "profileesrdv21y19": 175, "di": 175, "21": [175, 224], "2019": 175, "gc": 175, "gi": 175, "dne": 175, "gne": 175, "profilev28": 175, "profilev28y24": 175, "2024": 175, "profilev24y19": 175, "profilev24y20": 175, "profilev24y21": 175, "profilev24y22": 175, "profilev24": 175, "profilev23y18": 175, "profilev23y19": 175, "profilev23": 175, "profilev22y17": 175, "profilev22y18": 175, "profilev22y19": 175, "profilev22y20": 175, "profilev22y21": 175, "profilev22y22": 175, "profilev22": 175, "profilerxhccv05y20": 175, "ce_nolowag": 175, "rxhcc": [175, 248], "illeg": 175, "profilerxhccv05y21": 175, "profilerxhccv05y22": 175, "profilerxhccv05y23": 175, "profilerxhccv08y22": 175, "profilerxhccv08y23": 175, "nlp_test": 176, "noisy_label": [176, 212], "transpil": 176, "externalsourc": [176, 230], "class_nam": [176, 230], "nlu_2_python": [176, 230], "python_2_scala": [176, 230], "source_load": [176, 230], "alab_util": [176, 241], "conll_pars": [176, 241], "deidentification_util": [176, 241], "java_help": [176, 241], "licensed_annotator_typ": [176, 241], "log_pars": [176, 241], "ner_util": [176, 241], "ocr_nlp_processor": [176, 241], "ocr_util": [176, 241], "risk_adjustment_util": [176, 241], "run_transpiled_cod": [176, 241], "training_log_parser_util": [176, 241], "alab": [176, 237], "custom_transform": 176, "deidentification_modul": 176, "modeltrac": [176, 227], "structured_deidentif": 176, "text_to_documents_column": 176, "training_log_pars": 176, "updatemodel": [176, 227], "transformer_seq_classif": 176, "version_regex": 176, "size_regex": 176, "apple_silicon": 176, "aarch64": 176, "public": [176, 221, 247], "equival": 176, "32g": 176, "kryoseri": 176, "buffer": 176, "2000m": 176, "releas": 176, "m1": 176, "get_credenti": 176, "secretkei": 176, "keyid": 176, "pub_vers": 176, "library_set": 176, "legassertion_time_md": 178, "legner_deid": 180, "legaldocumenthashcod": [181, 227], "legmapper_edgar_companynam": 184, "legel_edgar_company_nam": 187, "legre_contract_doc_parti": 190, "legre_zero_shot": 191, "legal_bert_for_sequence_classif": [192, 193], "legal_classifier_dl": [192, 193], "legal_document_ml_classifi": [192, 193], "legal_few_shot_classifi": [192, 193], "legal_encoder_decod": [192, 198], "legal_qa": [192, 198], "legal_summar": [192, 198], "legal_text_gener": [192, 198], "legalbertforsequenceclassif": [194, 227], "legalbertfortokenclassif": [194, 206, 227], "legclf_reddit_advic": 194, "legalclassifierdlapproach": [195, 227], "legalclassifierdlmodel": [195, 196, 227], "legalclassifierdl": 195, "legclf_argument_min": 195, "legaldocumentmlclassifierapproach": [196, 227], "legaldocumentmlclassifiermodel": [196, 227], "legalfewshotclassifierapproach": [197, 227], "legalfewshotclassifi": 197, "legalfewshotclassifiermodel": [197, 227], "legalencoderdecod": [199, 227], "legalquestionansw": [200, 227], "legalsummar": [201, 227], "legsum_flant5_legal_aug": 201, "legaltextgener": [202, 227], "leggen_flant5_finetun": 202, "legalnerquestiongener": [203, 227], "legal_bert_for_token_classifi": [204, 205], "legal_n": [204, 205], "legalbertfortokenclassifi": 206, "legner_bert_gr": 206, "legalnerapproach": [207, 227], "legalnermodel": [207, 227], "legner_contract_doc_parties_lg": 207, "legner_roberta_zeroshot": 208, "adduidcol": 209, "timestamp": 209, "init_medical_gender_classifi": 210, "rulebasedclassifi": 210, "test_gender_bia": 210, "ner_pipelin": [210, 224, 246], "test_conl": 210, "classifier_pipelin": 210, "training_conl": 210, "log_path": [210, 215, 218, 219, 225, 245], "gender_bias_result": 210, "explode_sent": 210, "doc_amount": 210, "training_set_gender_distribut": 210, "test_set_gender_distribut": 210, "test_set_metr": 210, "bias_test": [211, 212], "noisy_label_fix": [212, 213], "noisy_label_test": [212, 213], "robustness_fix": [212, 217], "robustness_test": [212, 217], "conll_read": [214, 218], "conll_writ": 214, "chunk_tag": [214, 250], "save_path": 214, "docs_indx": 214, "sentences_list": 214, "tags_list": 214, "labels_list": 214, "track": 214, "written": 214, "update_with_model_predict": 214, "fix_df": 214, "test_label_error": [214, 215], "sent_indx": 214, "token_indx": 214, "apply_label_fix": 214, "label_fix": 214, "sent_index": 214, "add_flag_to_conl": 214, "flag_index": 214, "speech": 214, "interactivefix": 214, "result_df": 214, "default_strategi": 214, "page_s": 214, "ui": 214, "jupyt": 214, "notebook": 214, "find_label_error": 214, "displai": [214, 216], "create_grid": 214, "fill_grid": 214, "ipywidget": 214, "gridspeclayout": 214, "get_head": 214, "get_central_grid": 214, "get_foot": 214, "get_page_control_button": 214, "next_pag": 214, "prev_pag": 214, "adjust_page_s": 214, "num_sample_drop_down": 214, "get_page_numb": 214, "empty_grid": 214, "get_class": 214, "fix_label": 214, "apply_fix": 214, "fix_al": 214, "get_drop_down_titl": 214, "get_cell_el": 214, "css_class": 214, "get_sent": 214, "get_default_indx": 214, "indx": 214, "get_drop_down": 214, "get_title_html": 214, "calculate_label_error_scor": 215, "numpi": 215, "pred_prob": 215, "get_label_quality_scor": 215, "np": 215, "class": [215, 226, 232, 251], "get_unique_ent": 215, "training_pipelin": 215, "noisy_label_test_result": 215, "fold": 215, "setincludeconfidencescor": 215, "noisi": [215, 218, 219], "stylesheet": 216, "multilin": [216, 227], "background": 216, "color": [216, 246, 247], "0098da": 216, "center": 216, "footer": 216, "ffffff": 216, "ignore_margin": 216, "row_odd": 216, "262626": 216, "row_even": 216, "eaeaeb": 216, "page_button": 216, "border": [216, 237], "cursor": 216, "pointer": 216, "overflow": 216, "outlin": [216, 246], "table_titl": 216, "font": 216, "2em": 216, "500": 216, "title_text": 216, "70px": 216, "inlin": 216, "flex": [216, 218, 219], "dropdown": 216, "1px": 216, "solid": 216, "radiu": 216, "4px": 216, "aeaeae": 216, "kind": [218, 219], "perturb": [218, 219], "create_datafram": 218, "pos_sync_tag": 218, "synthet": 218, "filter_by_entity_typ": 218, "ent_typ": 218, "get_sampl": 218, "sample_data": 218, "create_terminologi": [218, 219], "terminologi": [218, 219], "modify_capitalization_upp": [218, 219], "augment": [218, 220, 224], "modify_capitalization_low": [218, 219], "modify_capitalization_titl": [218, 219], "add_punctuation_to_data": 218, "strip_punctuation_from_data": 218, "strip": [218, 219, 237], "senctenc": 218, "add_typo_to_sent": [218, 219], "introduce_typo": [218, 219], "introduc": [218, 219], "typo": [218, 219], "swap_entities_with_terminologi": 218, "get_cohyponyms_wordnet": [218, 219], "co": [218, 219], "hyponym": [218, 219], "wordnet": [218, 219], "swap_with_cohyponym": [218, 219], "convert_acc": 218, "lang_dict": [218, 219], "convers": [218, 219, 228, 232], "add_context_to_data": 218, "starting_context": [218, 219], "ending_context": [218, 219], "add_contract": [218, 219], "augment_robust": 218, "add_punctu": [218, 219], "strip_punctu": [218, 219], "make_typo": 218, "american_to_british": [218, 219], "british_to_american": [218, 219], "add_context": [218, 219], "swap_ent": [218, 219], "swap_cohyponym": [218, 219], "optimized_inplac": 218, "random_st": 218, "return_spark": 218, "conll_save_path": 218, "print_info": 218, "ignore_warn": 218, "nois": [218, 219], "american": [218, 219], "inplac": 218, "distinctli": 218, "warn": 218, "test_and_augment_robust": 218, "pipeline_model": [218, 219, 224], "test_file_path": [218, 219], "conll_path_to_aug": 218, "metric_typ": [218, 219], "metrics_output_format": [218, 219], "robustness_test_result": [218, 219], "noise_prob": [218, 219, 220], "liner": 218, "assembl": [218, 219, 237], "strict": [218, 219], "special": [218, 219, 236], "test_set_languag": [218, 219], "list_of_str": 219, "keep_numeric_punctu": 219, "ie": 219, "40": 219, "000": 219, "modify_capit": 219, "swap_named_entities_from_terminologi": 219, "remove_punctuation_token": 219, "remove_context_token": 219, "starting_context_token": 219, "ending_context_token": 219, "remove_contraction_token": 219, "list_with_contract": 219, "list_without_contract": 219, "calculate_metr": 219, "filtered_df": 219, "noise_typ": 219, "noise_descript": 219, "test_set": 219, "total_amount": 219, "original_annotations_df": 219, "noisy_test_set": 219, "token_filter_funct": 219, "starting_context_token_list": 219, "ending_context_token_list": 219, "disrupt": 219, "conll_sentence_read": 219, "test_robust": 219, "sample_sentence_count": 219, "calculate_proport": 220, "f1_score": 220, "suggest_perturb": 220, "test_result": 220, "suggest": 220, "get_augmentation_proport": 220, "pull": 220, "printprogress": 221, "progress": 221, "bar": 221, "consol": 221, "internalresourcedownload": [221, 227], "downlod": 221, "downloadmodel": 221, "reader": [221, 224], "j_dwn": 221, "internalspythonresourcedownload": [221, 227], "showprivatemodel": 221, "showprivatepipelin": 221, "showuncategorizedresourc": 221, "uncategor": 221, "showavailableannot": 221, "returnprivatemodel": 221, "returnprivatepipelin": 221, "downloadmodeldirectli": 221, "unzip": 221, "cache_folder_path": 221, "copi": 221, "uri": 221, "tabular": 222, "structureddeidentif": [222, 227], "columnsse": 222, "userandomdatedisplac": 222, "idcolumn": [222, 239], "countri": 222, "street": 222, "internet": 222, "profess": 222, "opf": 222, "screen": 222, "protein": 222, "someth": 222, "someon": 222, "healthplan": 222, "social": 222, "ip": 222, "protocol": 222, "nation": 222, "credit": 222, "bank": 222, "administr": 222, "obfuscatecolumn": 222, "texttodocumentscolumn": 223, "todocumentscolumn": 223, "todocumentscolumnswithid": 223, "id_column": [223, 239], "annotationtooljsonread": [224, 227], "cleanup_mod": 224, "split_char": 224, "context_char": 224, "min_chars_tol": 224, "align_chars_tol": 224, "merge_overlap": 224, "sddlpath": 224, "generateassertiontrainset": 224, "generateconl": 224, "creation": 224, "229937784": 224, "fih": 224, "18001": 224, "04t13": 224, "aleksei": 224, "136": 224, "142": 224, "37": 224, "79": 224, "305038693": 224, "65001": 224, "03t08": 224, "844970557": 224, "rwh": 224, "21001": 224, "00": 224, "84": 224, "97": 224, "914783811": 224, "97001": 224, "02t12": 224, "07": 224, "91": 224, "733882247": 224, "84001": 224, "02t15": 224, "73": 224, "77": 224, "assertion_df": 224, "rdr": 224, "sentencecol": 224, "assertioncol": 224, "generateplainassertiontrainset": 224, "taskcolumn": 224, "tokencol": 224, "nerlabel": 224, "codiespread": 224, "codiesp": 224, "readdatasettaskx": 224, "textfold": 224, "cantemistread": 224, "cantemist": 224, "readdatasettaskn": 224, "synonymaugmentationuml": [224, 227], "umls_path": 224, "code_col": 224, "description_col": 224, "synonym": 224, "uml": 224, "augmentcsv": 224, "corpus_csv_path": 224, "do_product": 224, "augmentation_mod": 224, "plain_text": 224, "synonym_sourc": 224, "regex_pars": 224, "euclidean_distance_threshold": 224, "cosine_distance_threshold": 224, "synonym_limit": 224, "casing_funct": 224, "augmentdatafram": 224, "corpus_df": 224, "redatasethelp": 224, "spark_df": 224, "preprocess": 224, "i2b2_clinical_rel_dataset": 224, "column_map": 224, "begin1": 224, "firstcharent1": 224, "end1": 224, "lastcharent1": 224, "begin2": 224, "firstcharent2": 224, "end2": 224, "lastcharent2": 224, "create_annotation_column": 224, "txt_file": 224, "sent_id": 224, "beth": 224, "partner": 224, "i2b2": 224, "2010": 224, "va": 224, "tem": 224, "44": 224, "respiratori": 224, "satur": 224, "49": 224, "75": 224, "lotion": 224, "crea": 224, "146": 224, "trnap": 224, "incis": 224, "conc": 224, "43": [224, 247], "ter": 224, "picc": 224, "54": 224, "68": 224, "58": 224, "light": 224, "headed": 224, "diaphoresi": 224, "92": 224, "82": 224, "electroca": 224, "61": 224, "inferior": 224, "st": 224, "depressio": 224, "239": 224, "196": 224, "176": 224, "145": 224, "train_data": 224, "ner_column_nam": 224, "printschema": 224, "root": 224, "nullabl": 224, "ner_log_pars": 225, "parse_logfil": 225, "avg": 225, "get_chart": [225, 245], "log_fil": [225, 245], "plot": [225, 245], "figur": [225, 245], "precis": [225, 245, 250], "loss_plot": [225, 245], "get_best_f1_scor": 225, "micro": 225, "macro": 225, "true_seq": [225, 245, 250], "pred_seq": [225, 245, 250], "overal": [225, 245, 250], "simpli": [225, 245, 250], "evaluate_conll_fil": [225, 245], "fileiter": [225, 245], "assertion_log_pars": 225, "script": [226, 232, 233, 234], "prepar": [226, 232], "manag": 226, "necessari": 226, "build_scala_cod": [226, 249], "scala_cod": [226, 232, 249], "runtranspiledcod": [226, 249], "compile_scala_cod": [226, 249], "prepare_python_cod": 226, "import_sect": [226, 232], "py_cod": [226, 228, 232], "build_python_cod": 226, "subprocess": 226, "internal_class": [227, 233], "internals3resourcedownload": 227, "medicaltensorflowbertclassif": 227, "assertiondatasetencod": 227, "tensorflowbiogpt": 227, "medicaltensorflowdistilbertclassif": 227, "medicalnerdatasetencod": 227, "medicaltensorflowclassif": 227, "medicalencoderdecodermodel": 227, "taskread": 227, "annotationtooljsonschema": 227, "simpledisambiguationpipelin": 227, "cosinemetricsbreezeimpl": 227, "linalg": 227, "categorytodomainmap": 227, "switchablesentenceembed": 227, "storagedisambiguatorhelp": 227, "storagelocatordisambigu": 227, "disambiguatormodelparam": 227, "disambiguationdatatyp": 227, "datatyp": 227, "contextmappingsschema": 227, "linalgalias": 227, "predictionlog": 227, "logic": 227, "bowpoolingextractor": 227, "sentenceembeddingsextractor": 227, "poolinglogicnd4": 227, "switchableembeddingsextractor": 227, "embeddingsextractor": 227, "poolinglog": 227, "annotationlog": 227, "kvknowledgeextractor": 227, "matchregex": 227, "readablepretrainedcontextualpars": 227, "matchedtoken": 227, "matchexcept": 227, "nertagsencodingintern": 227, "nertaggedintern": 227, "biogpttoken": 227, "assertionannot": 227, "genericclassifierdataencod": 227, "gptgenerationparam": 227, "negexdatasetread": 227, "stringfunct": 227, "jtreeread": 227, "jtreewrit": 227, "resolverparam": 227, "datehelp": 227, "deidmodelparam": 227, "obfuscatorannotatorapproach": 227, "obfuscatorparam": 227, "datechunkobfusc": 227, "texttodocumentcolumn": 227, "namechunkobfuscatorparam": 227, "obfuscatorannotatormodel": 227, "deidapproachparam": 227, "bertreconfig": 227, "relationinst": 227, "refeaturegener": 227, "relationencod": 227, "redataencod": 227, "tagsmetr": 227, "loggingdata": 227, "goldtoken": 227, "evalentityresolv": 227, "evaluationmetr": 227, "internalss3resourcedownload": 227, "threadsafedownload": 227, "riskadjustmentutil": [227, 248], "opensource_class": [227, 233], "jsonbuild": 227, "configload": 227, "conllgener": 227, "ziparchiveutil": 227, "longmapaccumul": 227, "mapaccumul": 227, "jsonpars": 227, "loadexternalmodel": 227, "debertaclassif": 227, "ai": 227, "mpnet": 227, "visionencoderdecod": 227, "xlnetclassif": 227, "vitclassifi": 227, "xlmroberta": 227, "xlmrobertaclassif": 227, "prepareembed": 227, "generationconfig": 227, "beamhypothes": 227, "beamsearchscor": 227, "beamscor": 227, "logitprocessorlist": 227, "logit": 227, "logitwarp": 227, "topklogitwarp": 227, "temperaturelogitwarp": 227, "topplogitwarp": 227, "minlengthlogitprocessor": 227, "logitprocess": 227, "forcedtokenlogitprocessor": 227, "logitprocessor": 227, "repetitionpenaltylogitprocessor": 227, "norepeatngramslogitprocessor": 227, "suppresslogitprocessor": 227, "bartclassif": 227, "openaiembed": 227, "albertclassif": 227, "camembert": 227, "zeroshotnerclassif": 227, "bertclassif": 227, "wav2vec2": 227, "spanbertcoref": 227, "openaicomplet": 227, "camembertclassif": 227, "textembeddingrespons": 227, "completionrespons": 227, "robertaclassif": 227, "convnextclassifi": 227, "instructor": 227, "distilbertclassif": 227, "tapa": 227, "bart": 227, "sentencedetectordl": 227, "classifierdatasetencod": 227, "chunkbyt": 227, "tensorflowsenti": 227, "loadsentencepiec": 227, "sentencepiec": 227, "sentencepieceencod": 227, "sentencepiecewrapp": 227, "nerdatasetencod": 227, "tensorflown": 227, "tensorflowserializemodel": 227, "modelsignaturemanag": 227, "modelsignatureconst": 227, "sparsearrai": 227, "linearchaincrfmodel": 227, "datasetmetadata": 227, "datasetread": 227, "linearchaincrf": 227, "vectormath": 227, "crfdataset": 227, "hasenablecachingproperti": 227, "tableassembl": 227, "hasrecursivetransform": 227, "haspretrain": 227, "camembertembed": 227, "doc2vecapproach": 227, "word2vecapproach": 227, "wordembeddingsread": 227, "elmoembed": 227, "hasembeddingsproperti": 227, "e5embed": 227, "robertasentenceembed": 227, "xlmrobertasentenceembed": 227, "distilbertembed": 227, "wordembeddingsload": 227, "debertaembed": 227, "xlmrobertaembed": 227, "readsfrombyt": 227, "mpnetembed": 227, "robertaembed": 227, "albertembed": 227, "instructorembed": 227, "wordembeddingswrit": 227, "chunkembed": 227, "longformerembed": 227, "xlnetembed": 227, "doc2vecmodel": 227, "word2vecmodel": 227, "tokenassembl": 227, "hassimpleannot": 227, "imageassembl": 227, "hascandidatelabelsproperti": 227, "sparknlpconfigkei": 227, "matchstrategi": 227, "cloudstoragetyp": 227, "outputhelp": 227, "resourcehelp": 227, "graphbuild": 227, "rulefactori": 227, "regexrul": 227, "lfucach": 227, "finisherutil": 227, "lrumap": 227, "hasengin": 227, "hasinputannotationcol": 227, "pubtat": 227, "conllucol": 227, "conllu": 227, "conll2003nerread": 227, "spacytoannot": 227, "conllhelp": 227, "serializedexternalresourc": 227, "multidatematch": 227, "regextoken": [227, 237], "textmatchermodel": 227, "tmedgesreadwrit": 227, "btm": 227, "bigtextmatchermodel": 227, "trienod": 227, "tmnodesread": 227, "bigtextmatch": 227, "tmedgesread": 227, "tmnodeswrit": 227, "tmvocabreadwrit": 227, "tmvocabread": 227, "datematchertransl": 227, "sentencedetectorparam": 227, "sbd": 227, "pragmaticsentenceextractor": 227, "pragmat": 227, "pragmaticmethod": 227, "pragmaticdictionari": 227, "pragmaticcontentformatt": 227, "rulesymbol": 227, "pragmaticsymbol": 227, "viveknsentimentmodel": 227, "sda": 227, "vivekn": 227, "viveknsentimentutil": 227, "viveknsentimentapproach": 227, "sentimentdetectormodel": 227, "pragmaticscor": 227, "sentimentdetector": 227, "nerapproach": 227, "nertagsencod": 227, "nerdlmodelpythonread": 227, "loadscontrib": 227, "featuregener": 227, "nercrfapproach": 227, "nercrfmodel": 227, "dictionaryfeatur": 227, "neroverwrit": 227, "languagedetectordl": 227, "ld": 227, "sentencedetectordlencod": 227, "sentence_detector_dl": 227, "sentencedetectordlmodel": [227, 237], "sentencedetectordlapproach": 227, "documentnorm": 227, "symmetricdeleteapproach": 227, "symmetricdeleteparam": 227, "symmetricdeletemodel": 227, "contextspellcheckerapproach": 227, "contextspellcheckermodel": 227, "weightedlevenshtein": 227, "serializableclass": 227, "specialtokenspars": 227, "hastransducerfeatur": 227, "norvigsweetingmodel": 227, "norvig": 227, "norvigsweetingparam": 227, "norvigsweetingapproach": 227, "whispertokendecod": 227, "bpe": 227, "bpespecialtoken": 227, "xlmtoken": 227, "bpetoken": 227, "barttoken": 227, "gpt2token": 227, "robertatoken": 227, "wordpieceencod": 227, "basictoken": 227, "mosespunctnorm": 227, "mosestoken": 227, "mose": 227, "tapasencod": 227, "datematch": 227, "documentsimilarityrankermodel": 227, "documentsimilarityrankerapproach": 227, "chunktoken": 227, "tagdictionari": 227, "dep": 227, "dependencyparserapproach": 227, "tagger": [227, 237], "perceptron": 227, "greedytransitionapproach": 227, "greedytransit": 227, "dependencymak": 227, "trainfil": 227, "typdep": 227, "typeddependencyparsermodel": 227, "typeddependencyparserapproach": 227, "chunktokenizermodel": 227, "annotatorparam": 227, "writableannotatorcompon": 227, "externalresourceparam": 227, "evaluationdlparam": 227, "serializedannotatorcompon": 227, "graphextract": 227, "xlmrobertafortokenclassif": 227, "bertfortokenclassif": 227, "robertaforzeroshotclassif": 227, "xlnetforsequenceclassif": 227, "robertaforsequenceclassif": 227, "classifierencod": 227, "bertforquestionansw": 227, "tapasforquestionansw": 227, "camembertforsequenceclassif": 227, "robertafortokenclassif": 227, "debertaforsequenceclassif": 227, "distilbertforzeroshotclassif": 227, "camembertforquestionansw": 227, "debertafortokenclassif": 227, "xlnetfortokenclassif": 227, "classifiermetr": 227, "albertforquestionansw": 227, "debertaforquestionansw": 227, "bertforzeroshotclassif": 227, "bertforsequenceclassif": 227, "distilbertforquestionansw": 227, "camembertfortokenclassif": 227, "bartforzeroshotclassif": 227, "xlmrobertaforsequenceclassif": 227, "longformerforsequenceclassif": 227, "distilbertfortokenclassif": 227, "xlmrobertaforzeroshotclassif": 227, "albertforsequenceclassif": 227, "xlmrobertaforquestionansw": 227, "longformerfortokenclassif": 227, "longformerforquestionansw": 227, "albertfortokenclassif": 227, "datasethelp": 227, "taggedsent": 227, "wordpiecetoken": 227, "dependencypars": 227, "embeddingswithsent": 227, "indexedtoken": 227, "tokenizedwithsent": 227, "tabledata": 227, "tokenpars": 227, "conllsent": 227, "tokenizedsent": 227, "sentencewithembed": 227, "labeleddepend": 227, "recursivetokenizermodel": 227, "whisperforctc": 227, "audio": 227, "hubertforctc": 227, "wav2vec2forctc": 227, "whisperpreprocessor": 227, "feature_extractor": 227, "preprocessorattribut": 227, "audioutil": 227, "preprocessor": 227, "perceptronapproachdistribut": 227, "averagedperceptron": 227, "perceptronpredictionutil": 227, "perceptrontrainingutil": 227, "perceptronapproach": 227, "accumul": 227, "perceptronutil": 227, "tokenizermodel": 227, "mariantransform": 227, "gpt2transform": 227, "barttransform": 227, "t5transform": 227, "date2chunk": 227, "regexmatchermodel": 227, "recursivetoken": 227, "lemmat": 227, "lemmatizermodel": 227, "normalizermodel": 227, "convnextforimageclassif": 227, "cv": 227, "imageioutil": 227, "imageschemautil": 227, "imageresizeutil": 227, "hasrescalefactor": 227, "vitforimageclassif": 227, "visionencoderdecoderforimagecapt": 227, "swinforimageclassif": 227, "documentcharactertextsplitt": 227, "datematcherutil": 227, "yakeparam": 227, "yakekeywordextract": 227, "regexpatternsread": 227, "patternsread": 227, "ahocorasickautomaton": 227, "entityrulermodel": 227, "regexpatternsreadwrit": 227, "entitypattern": 227, "patternsreadwrit": 227, "entityrulerfeatur": 227, "entityrulerutil": 227, "entityrulerapproach": 227, "pretrainedannot": 227, "token2chunk": 227, "wordsegmenterapproach": 227, "wordsegmentermodel": 227, "tagstyp": 227, "spanbertcorefmodel": 227, "coref": 227, "rawannot": 227, "embeddingsfinish": 227, "hasimagefeatureproperti": 227, "audioassembl": 227, "canbelazi": 227, "paramsandfeatureswrit": 227, "annotationimag": 227, "hasmultipleinputannotationcol": 227, "hasgeneratorproperti": 227, "hasrecursivefit": 227, "hasbatchedannotateaudio": 227, "hasaudiofeatureproperti": 227, "graphfinish": 227, "hasprotectedparam": 227, "hascasesensitiveproperti": 227, "hasbatchedannotateimag": 227, "hasfeatur": 227, "hasoutputannotatortyp": 227, "annotationaudio": 227, "iannot": 227, "paramsandfeaturesread": 227, "hasoutputannotationcol": 227, "recursivepipelin": 227, "hasbatchedannot": 227, "hasclassifieractivationproperti": 227, "documentsimilarityrankerfinish": 227, "resourcedownload": 227, "repositorymetadata": 227, "resourcemetadata": 227, "s3resourcedownload": 227, "run_convert": 228, "build_py_cod": 228, "build_sc_cod": 228, "python_code_fail": [228, 234], "scala_gener": [228, 234], "generated_code_work": [228, 234], "generated_code_fail": [228, 234], "open_source_annotator_set_fin": 231, "medical_annotators_set": 231, "is_component_med": 231, "is_component_open_sourc": 231, "is_component_pretrain": 231, "is_component_fin": 231, "is_component_leg": 231, "is_component_ocr": 231, "starts_with_fin": 231, "starts_with_leg": 231, "starts_with_med": 231, "bucket": 231, "convert_nlu_component_to_python": 231, "nlu_component_to_spark_nlp_cod": 231, "to_python": 231, "pipeline_to_convert": 231, "focus": 232, "convert_python_dict_to_scala_script": 232, "convert_class_nam": 232, "find_key_valu": 232, "get_import_sect": 232, "data_dict": 232, "anonymize_script": 232, "restore_sensitive_valu": 232, "anonymized_script": 232, "sensitive_valu": 232, "remove_blank_lin": 232, "blank": 232, "clean": 232, "break_line_after_backslash": 232, "prepare_scala_cod": 232, "is_spark_initi": 232, "get_data_dict": 232, "run_transpil": 232, "markdown": [233, 234], "load_file_as_dict": 233, "file_path1": 233, "file_path2": 233, "process_python_cod": 233, "python_cod": 233, "update_md_fil": 233, "file_path": [233, 246], "get_scala_code_from_md": 233, "md_file_path": [233, 234], "get_python_code_from_md": 233, "update_md_file_for_working_scala_cod": 233, "replacement_str": 233, "git": 234, "scala_code_work": 234, "results_list": 234, "upload_scala_code_in_md_fil": 234, "md_file": 234, "apply_method_to_all_md_fil": 234, "directory_path": 234, "upload_scala_code_in_git": 234, "updatecachemodel": 235, "cache_fold": 235, "refresh": 235, "overwrit": 235, "start_dat": 235, "end_dat": 235, "get_mt_sampl": 236, "medical_speci": 236, "transcrib": 236, "transcript": 236, "mtsampl": 236, "allergy_immunologi": 236, "autopsi": 236, "bariatr": 236, "cardiovascular_pulmonari": 236, "chiropract": 236, "consult_history_and_phi": 236, "cosmetic_plastic_surgeri": 236, "dentistri": 236, "dermatologi": 236, "diets_and_nutrit": 236, "discharge_summari": 236, "emergency_room_report": 236, "endocrinologi": 236, "ent_otolaryngologi": 236, "gastroenterologi": 236, "general_medicin": 236, "hematology_oncologi": 236, "hospice_palliative_car": 236, "im": 236, "lab_medicine_pathologi": 236, "letter": 236, "nephrologi": 236, "neurologi": 236, "neurosurgeri": 236, "obstetrics_gynecologi": 236, "office_not": 236, "ophthalmologi": 236, "orthoped": 236, "pain_manag": 236, "pediatrics_neonat": 236, "physical_medicine_rehab": 236, "podiatri": 236, "psychiatry_psychologi": 236, "radiologi": 236, "rheumatologi": 236, "sleep_medicin": 236, "soap_chart_progress_not": 236, "speech_languag": 236, "surgeri": 236, "urologi": 236, "scrap": 236, "nlp_token_pipelin": 237, "nlp_pos_pipelin": 237, "token_pipeline_initi": 237, "pos_pipeline_initi": 237, "regular_token": 237, "empty_df": 237, "get_doc_assembl": 237, "get_sent_detector": 237, "get_regular_token": 237, "get_regex_token": 237, "get_po": 237, "get_empty_df": 237, "get_nlp_token_pipelin": 237, "get_sentence_pipelin": 237, "get_rel_df": 237, "get_ner_df": 237, "get_ner_sentence_bord": 237, "get_nlp_pos_pipelin": 237, "get_single_task_conl": 237, "pos_pipelin": 237, "token_pipelin": 237, "style": [237, 240, 246, 247], "get_token_df": 237, "_type_": 237, "read_conl": 237, "filepath": 237, "strip_json_ent": 237, "exported_json": 237, "structured_deidentifi": 239, "columns_dict": 239, "ref_sourc": 239, "columns_se": 239, "date_format": 239, "is_module_import": 240, "lib": 240, "raise_except": 240, "pip_nam": 240, "message_typ": 240, "instruct": 240, "parse_str_to_dict": 242, "dict_str": 242, "row_separ": 242, "key_value_separ": 242, "is_value_list": 242, "value_separ": 242, "deseri": 242, "internalannotatortyp": 243, "selector": 243, "aqua": [246, 247], "aquamarin": [246, 247], "blanchedalmond": [246, 247], "blue": [246, 247], "blueviolet": [246, 247], "burlywood": [246, 247], "ocr_entity_processor": 246, "bounding_box": 246, "save_fold": 246, "label_color": 246, "box_color": 246, "color_chart_path": 246, "color_chart": 246, "png": 246, "chunk_col": 246, "black_list": 246, "display_result": 246, "pageiteratorlevel": 246, "pagesegmod": 246, "pagesegmentationmod": 246, "sparse_text_osd": 246, "outline_color": [246, 247], "outline_width": [246, 247], "text_band": [246, 247], "text_typ": 246, "ocr": [246, 247], "paint": 246, "highlight": [246, 248], "colored_box": 246, "draw": 246, "band": 246, "box": 246, "around": 246, "rgb": 246, "chart": 246, "entitii": 246, "width": 246, "writ": 246, "label2color": 247, "label2rgb": 247, "colors_rgb": 247, "255": 247, "127": 247, "212": 247, "235": 247, "205": 247, "138": 247, "226": 247, "165": 247, "pretrained_model": 247, "image_handwritten_detector_gsa0803": 247, "get_handwritten_region": 247, "draw_boxes_on_image_handwritten_region": 247, "image_data": 247, "hierarch": 248, "10th": 248, "revis": 248, "hcc_from_icd": 248, "hcc_label": 248, "hcc_list": 248, "diff_between_hcc": 248, "before_hcc_list": 248, "after_hcc_list": 248, "evolv": 248, "cc": 248, "escal": 248, "aggregate_ent": 250, "split_tag": 250, "chunk_typ": 250, "is_chunk_end": 250, "prev_tag": 250, "contradict": 250, "is_chunk_start": 250, "calc_metr": 250, "tp": 250, "percent": 250, "fb1": 250, "decim": 250, "count_chunk": 250, "correct_chunk": 250, "counter": 250, "correctli": 250, "true_chunk": 250, "pred_chunk": 250, "correct_count": 250, "true_count": 250, "pred_count": 250, "get_result": 250, "prec": 250, "rec": 250, "overview": 251}, "objects": {"": [[176, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [92, 0, 0, "-", "annotator"], [176, 3, 1, "", "annotators"], [135, 0, 0, "-", "base"], [139, 0, 0, "-", "common"], [140, 0, 0, "-", "compatibility"], [141, 0, 0, "-", "custom_transformer"], [142, 0, 0, "-", "deidentification_module"], [143, 0, 0, "-", "eval"], [158, 0, 0, "-", "finance"], [175, 0, 0, "-", "functions"], [176, 6, 1, "", "get_credentials"], [177, 0, 0, "-", "internal"], [192, 0, 0, "-", "legal"], [176, 6, 1, "", "library_settings"], [209, 0, 0, "-", "modelTracer"], [212, 0, 0, "-", "nlp_test"], [221, 0, 0, "-", "pretrained"], [176, 6, 1, "", "pub_version"], [176, 3, 1, "", "size_regex"], [176, 6, 1, "", "start"], [222, 0, 0, "-", "structured_deidentification"], [223, 0, 0, "-", "text_to_documents_columns"], [224, 0, 0, "-", "training"], [225, 0, 0, "-", "training_log_parser"], [176, 3, 1, "", "transformer_seq_classification"], [230, 0, 0, "-", "transpiler"], [235, 0, 0, "-", "updateModels"], [236, 0, 0, "-", "util"], [241, 0, 0, "-", "utils"], [176, 6, 1, "", "version"], [176, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "FewShotClassifierTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "LogRegClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "SVMClassifierTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_IAA_metrics"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "review_annotations"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [92, 3, 1, "", "assertion"], [46, 0, 0, "-", "assertion"], [47, 0, 0, "-", "chunk2_token"], [92, 3, 1, "", "chunker"], [56, 0, 0, "-", "chunker"], [92, 3, 1, "", "classification"], [62, 0, 0, "-", "classification"], [92, 3, 1, "", "context"], [67, 0, 0, "-", "context"], [92, 3, 1, "", "deid"], [71, 0, 0, "-", "deid"], [92, 3, 1, "", "disambiguation"], [75, 0, 0, "-", "disambiguation"], [77, 0, 0, "-", "doc2_chunk_internal"], [78, 0, 0, "-", "document_filterer_by_classifier"], [83, 0, 0, "-", "embeddings"], [85, 0, 0, "-", "er"], [86, 0, 0, "-", "feature_assembler"], [87, 0, 0, "-", "filtering_params"], [88, 0, 0, "-", "flattener"], [92, 3, 1, "", "generic_classifier"], [90, 0, 0, "-", "generic_classifier"], [91, 0, 0, "-", "handle_exception_params"], [92, 3, 1, "", "keyword"], [93, 0, 0, "-", "matcher"], [96, 0, 0, "-", "merge"], [97, 0, 0, "-", "ner"], [106, 0, 0, "-", "normalizer"], [108, 0, 0, "-", "qa"], [111, 0, 0, "-", "re"], [116, 0, 0, "-", "regex"], [118, 0, 0, "-", "resolution"], [121, 0, 0, "-", "resolution2_chunk"], [122, 0, 0, "-", "router"], [123, 0, 0, "-", "seq2seq"], [128, 0, 0, "-", "source_tracking_metadata_params"], [129, 0, 0, "-", "splitter"], [131, 0, 0, "-", "tf_graph_builder"], [132, 0, 0, "-", "white_black_list_params"], [133, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputAnnotatorTypes"], [42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 4, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "setInputCols"], [42, 2, 1, "", "setInputType"], [42, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_chunk_converter"], [45, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputAnnotatorType"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "entityAssertionCaseSensitive"], [43, 2, 1, "", "getEntityAssertion"], [43, 2, 1, "", "getReplaceLabels"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 4, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setEntityAssertion"], [43, 2, 1, "", "setEntityAssertionCaseSensitive"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setReplaceLabels"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[44, 4, 1, "", "chunkBeginCol"], [44, 4, 1, "", "chunkEndCol"], [44, 4, 1, "", "chunkTextCol"], [44, 4, 1, "", "inputAnnotatorTypes"], [44, 4, 1, "", "inputCols"], [44, 4, 1, "", "name"], [44, 4, 1, "", "outputAnnotatorType"], [44, 4, 1, "", "outputCol"], [44, 4, 1, "", "outputTokenBeginCol"], [44, 4, 1, "", "outputTokenEndCol"], [44, 2, 1, "", "setChunkBeginCol"], [44, 2, 1, "", "setChunkEndCol"], [44, 2, 1, "", "setChunkTextCol"], [44, 2, 1, "", "setInputCols"], [44, 2, 1, "", "setOutputCol"], [44, 2, 1, "", "setOutputTokenBeginCol"], [44, 2, 1, "", "setOutputTokenEndCol"], [44, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, 1, 1, "", "AssertionLogRegApproach"], [45, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "eNetParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "label"], [45, 4, 1, "", "maxIter"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 4, 1, "", "regParam"], [45, 2, 1, "", "setAfter"], [45, 2, 1, "", "setBefore"], [45, 2, 1, "", "setEndCol"], [45, 2, 1, "", "setEnet"], [45, 2, 1, "", "setLabelCol"], [45, 2, 1, "", "setMaxIter"], [45, 2, 1, "", "setNerCol"], [45, 2, 1, "", "setReg"], [45, 2, 1, "", "setStartCol"], [45, 2, 1, "", "setTargetNerLabels"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "name"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunk2_token": [[47, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[47, 4, 1, "", "inputAnnotatorTypes"], [47, 4, 1, "", "name"], [47, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker": [[48, 0, 0, "-", "assertion_filterer"], [49, 0, 0, "-", "chunk_converter"], [50, 0, 0, "-", "chunk_key_phrase_extraction"], [51, 0, 0, "-", "chunk_sentence_splitter"], [52, 0, 0, "-", "chunker_filterer"], [53, 0, 0, "-", "chunkmapper"], [54, 0, 0, "-", "chunkmapper_filterer"], [55, 0, 0, "-", "docmapper"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[48, 4, 1, "", "inputAnnotatorTypes"], [48, 4, 1, "", "name"], [48, 4, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "setCriteria"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[49, 4, 1, "", "inputAnnotatorTypes"], [49, 4, 1, "", "name"], [49, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[50, 4, 1, "", "concatenateSentences"], [50, 4, 1, "", "divergence"], [50, 4, 1, "", "documentLevelProcessing"], [50, 4, 1, "", "dropPunctuation"], [50, 4, 1, "", "inputAnnotatorTypes"], [50, 4, 1, "", "name"], [50, 4, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "pretrained"], [50, 4, 1, "", "selectMostDifferent"], [50, 2, 1, "", "setConcatenateSentences"], [50, 2, 1, "", "setDivergence"], [50, 2, 1, "", "setDocumentLevelProcessing"], [50, 2, 1, "", "setDropPunctuation"], [50, 2, 1, "", "setSelectMostDifferent"], [50, 2, 1, "", "setTopN"], [50, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[51, 4, 1, "", "defaultEntity"], [51, 4, 1, "", "groupBySentences"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "insertChunk"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "setDefaultEntity"], [51, 2, 1, "", "setGroupBySentences"], [51, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, 1, 1, "", "ChunkFilterer"], [52, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[52, 4, 1, "", "entitiesConfidence"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "setEntitiesConfidence"], [52, 2, 1, "", "setFilterEntity"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[52, 4, 1, "", "entitiesConfidenceResource"], [52, 4, 1, "", "entitiesConfidenceResourceAsJsonString"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "setEntitiesConfidenceResource"], [52, 2, 1, "", "setEntitiesConfidenceResourceAsJsonString"], [52, 2, 1, "", "setFilterEntity"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, 1, 1, "", "ChunkMapperApproach"], [53, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [53, 1, 1, "", "ChunkMapperModel"], [53, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[53, 4, 1, "", "dictionary"], [53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "setDictionary"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[53, 4, 1, "", "enableCharFingerprintMatching"], [53, 4, 1, "", "enableFuzzyMatching"], [53, 4, 1, "", "enableTokenFingerprintMatching"], [53, 4, 1, "", "fuzzyDistanceScalingMode"], [53, 4, 1, "", "fuzzyMatchingDistanceThresholds"], [53, 4, 1, "", "fuzzyMatchingDistances"], [53, 4, 1, "", "maxCharNgramFingerprint"], [53, 4, 1, "", "maxTokenNgramDroppingCharsRatio"], [53, 4, 1, "", "maxTokenNgramDroppingOperator"], [53, 4, 1, "", "maxTokenNgramDroppingTokens"], [53, 4, 1, "", "maxTokenNgramFingerprint"], [53, 4, 1, "", "minCharNgramFingerprint"], [53, 4, 1, "", "minTokenNgramFingerprint"], [53, 2, 1, "", "setEnableCharFingerprintMatching"], [53, 2, 1, "", "setEnableFuzzyMatching"], [53, 2, 1, "", "setEnableTokenFingerprintMatching"], [53, 2, 1, "", "setFuzzyDistanceScalingMode"], [53, 2, 1, "", "setFuzzyMatchingDistanceThresholds"], [53, 2, 1, "", "setFuzzyMatchingDistances"], [53, 2, 1, "", "setMaxCharNgramFingerprint"], [53, 2, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [53, 2, 1, "", "setMaxTokenNgramDroppingOperator"], [53, 2, 1, "", "setMaxTokenNgramDroppingTokens"], [53, 2, 1, "", "setMaxTokenNgramFingerprint"], [53, 2, 1, "", "setMinCharNgramFingerprint"], [53, 2, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "pretrained"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[53, 4, 1, "", "allowMultiTokenChunk"], [53, 4, 1, "", "lowerCase"], [53, 4, 1, "", "multivaluesRelations"], [53, 4, 1, "", "rel"], [53, 4, 1, "", "rels"], [53, 2, 1, "", "setAllowMultiTokenChunk"], [53, 2, 1, "", "setLowerCase"], [53, 2, 1, "", "setMultivaluesRelations"], [53, 2, 1, "", "setRel"], [53, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 4, 1, "", "returnCriteria"], [54, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, 1, 1, "", "DocMapperApproach"], [55, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[55, 4, 1, "", "dictionary"], [55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification": [[57, 0, 0, "-", "document_log_classifier"], [58, 0, 0, "-", "document_ml_classifier"], [59, 0, 0, "-", "few_shot_classifier"], [60, 0, 0, "-", "generic_log_reg_classifier"], [61, 0, 0, "-", "generic_svm_classifier"], [63, 0, 0, "-", "medical_bert_for_sequence_classification"], [64, 0, 0, "-", "medical_bert_for_token_classifier"], [65, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, 1, 1, "", "DocumentLogRegClassifierApproach"], [57, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[57, 4, 1, "", "classificationModelPath"], [57, 4, 1, "", "fitIntercept"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labelCol"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "maxIter"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "setClassificationModelPath"], [57, 2, 1, "", "setFitIntercept"], [57, 2, 1, "", "setLabelColumn"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMaxIter"], [57, 2, 1, "", "setTol"], [57, 2, 1, "", "setVectorizationModelPath"], [57, 4, 1, "", "tol"], [57, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[57, 4, 1, "", "classificationModel"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "mergeChunks"], [57, 4, 1, "", "name"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setClassificationModel"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMergeChunks"], [57, 2, 1, "", "setVectorizationModel"], [57, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, 1, 1, "", "DocumentMLClassifierApproach"], [58, 1, 1, "", "DocumentMLClassifierModel"], [58, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[58, 4, 1, "", "classificationModelClass"], [58, 4, 1, "", "classificationModelPath"], [58, 4, 1, "", "fitIntercept"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labelCol"], [58, 4, 1, "", "maxIter"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "setClassificationModelClass"], [58, 2, 1, "", "setClassificationModelPath"], [58, 2, 1, "", "setFitIntercept"], [58, 2, 1, "", "setLabelCol"], [58, 2, 1, "", "setMaxIter"], [58, 2, 1, "", "setMaxTokenNgram"], [58, 2, 1, "", "setMinTokenNgram"], [58, 2, 1, "", "setTol"], [58, 2, 1, "", "setVectorizationModelPath"], [58, 4, 1, "", "tol"], [58, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[58, 4, 1, "", "classificationModel"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labels"], [58, 4, 1, "", "name"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setClassificationModel"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setVectorizationModel"], [58, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[58, 4, 1, "", "labels"], [58, 4, 1, "", "maxTokenNgram"], [58, 4, 1, "", "mergeChunks"], [58, 4, 1, "", "minTokenNgram"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[59, 1, 1, "", "FewShotClassifierApproach"], [59, 1, 1, "", "FewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[60, 1, 1, "", "GenericLogRegClassifierApproach"], [60, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[61, 1, 1, "", "GenericSVMClassifierApproach"], [61, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[61, 4, 1, "", "inputAnnotatorTypes"], [61, 4, 1, "", "name"], [61, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[61, 4, 1, "", "inputAnnotatorTypes"], [61, 4, 1, "", "name"], [61, 4, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[63, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[63, 4, 1, "", "coalesceSentences"], [63, 4, 1, "", "configProtoBytes"], [63, 2, 1, "", "getClasses"], [63, 4, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "loadSavedModelOpenSource"], [63, 4, 1, "", "maxSentenceLength"], [63, 4, 1, "", "name"], [63, 4, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setCoalesceSentences"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[64, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[64, 4, 1, "", "configProtoBytes"], [64, 2, 1, "", "getClasses"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "loadSavedModelOpenSource"], [64, 4, 1, "", "maxSentenceLength"], [64, 4, 1, "", "name"], [64, 4, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[65, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[65, 4, 1, "", "coalesceSentences"], [65, 4, 1, "", "configProtoBytes"], [65, 2, 1, "", "getClasses"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "loadSavedModelOpenSource"], [65, 4, 1, "", "maxSentenceLength"], [65, 4, 1, "", "name"], [65, 4, 1, "", "outputAnnotatorType"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setCoalesceSentences"], [65, 2, 1, "", "setConfigProtoBytes"], [65, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[66, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[66, 1, 1, "", "ContextualParserApproach"], [66, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[66, 4, 1, "", "caseSensitive"], [66, 4, 1, "", "completeContextMatch"], [66, 4, 1, "", "dictionary"], [66, 4, 1, "", "inputAnnotatorTypes"], [66, 4, 1, "", "jsonPath"], [66, 4, 1, "", "optionalContextRules"], [66, 4, 1, "", "outputAnnotatorType"], [66, 4, 1, "", "prefixAndSuffixMatch"], [66, 2, 1, "", "setCaseSensitive"], [66, 2, 1, "", "setCompleteContextMatch"], [66, 2, 1, "", "setDictionary"], [66, 2, 1, "", "setJsonPath"], [66, 2, 1, "", "setOptionalContextRules"], [66, 2, 1, "", "setPrefixAndSuffixMatch"], [66, 2, 1, "", "setShortestContextMatch"], [66, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[66, 4, 1, "", "caseSensitive"], [66, 4, 1, "", "inputAnnotatorTypes"], [66, 4, 1, "", "name"], [66, 4, 1, "", "optionalContextRules"], [66, 4, 1, "", "outputAnnotatorType"], [66, 4, 1, "", "prefixAndSuffixMatch"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setCaseSensitive"], [66, 2, 1, "", "setOptionalContextRules"], [66, 2, 1, "", "setPrefixAndSuffixMatch"], [66, 2, 1, "", "setShortestContextMatch"], [66, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[68, 0, 0, "-", "deIdentification"], [69, 0, 0, "-", "deidentication_params"], [70, 0, 0, "-", "doccument_hashcoder"], [72, 0, 0, "-", "name_obfuscator"], [73, 0, 0, "-", "reIdentification"], [74, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[68, 1, 1, "", "DeIdentification"], [68, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[68, 4, 1, "", "combineRegexPatterns"], [68, 4, 1, "", "entityCasingModesPath"], [68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "obfuscateRefFile"], [68, 4, 1, "", "outputAnnotatorType"], [68, 4, 1, "", "refFileFormat"], [68, 4, 1, "", "refSep"], [68, 4, 1, "", "regexPatternsDictionary"], [68, 4, 1, "", "regexPatternsDictionaryAsJsonString"], [68, 4, 1, "", "selectiveObfuscationModesPath"], [68, 2, 1, "", "setCombineRegexPatterns"], [68, 2, 1, "", "setEntityCasingModes"], [68, 2, 1, "", "setObfuscateRefFile"], [68, 2, 1, "", "setRefFileFormat"], [68, 2, 1, "", "setRefSep"], [68, 2, 1, "", "setRegexPatternsDictionary"], [68, 2, 1, "", "setRegexPatternsDictionaryAsJsonString"], [68, 2, 1, "", "setSelectiveObfuscationModes"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[68, 2, 1, "", "getRegexEntities"], [68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "outputAnnotatorType"], [68, 2, 1, "", "pretrained"], [68, 4, 1, "", "regexEntities"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[69, 1, 1, "", "DeIdentificationParams"]], "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams": [[69, 4, 1, "", "ageRanges"], [69, 4, 1, "", "ageRangesByHipaa"], [69, 4, 1, "", "blackList"], [69, 4, 1, "", "consistentObfuscation"], [69, 4, 1, "", "dateFormats"], [69, 4, 1, "", "dateTag"], [69, 4, 1, "", "dateToYear"], [69, 4, 1, "", "days"], [69, 4, 1, "", "fixedMaskLength"], [69, 4, 1, "", "genderAwareness"], [69, 2, 1, "", "getBlackList"], [69, 2, 1, "", "getSameLengthFormattedEntities"], [69, 2, 1, "", "getUseShiftDays"], [69, 4, 1, "", "ignoreRegex"], [69, 4, 1, "", "isRandomDateDisplacement"], [69, 4, 1, "", "language"], [69, 4, 1, "", "mappingsColumn"], [69, 4, 1, "", "maskingPolicy"], [69, 4, 1, "", "metadataMaskingPolicy"], [69, 4, 1, "", "minYear"], [69, 4, 1, "", "mode"], [69, 4, 1, "", "obfuscateDate"], [69, 4, 1, "", "obfuscateRefSource"], [69, 4, 1, "", "obfuscationStrategyOnException"], [69, 4, 1, "", "outputAsDocument"], [69, 4, 1, "", "regexOverride"], [69, 4, 1, "", "region"], [69, 4, 1, "", "returnEntityMappings"], [69, 4, 1, "", "sameEntityThreshold"], [69, 4, 1, "", "sameLengthFormattedEntities"], [69, 4, 1, "", "seed"], [69, 2, 1, "", "setAgeRanges"], [69, 2, 1, "", "setAgeRangesByHipaa"], [69, 2, 1, "", "setBlackList"], [69, 2, 1, "", "setConsistentObfuscation"], [69, 2, 1, "", "setDateFormats"], [69, 2, 1, "", "setDateTag"], [69, 2, 1, "", "setDateToYear"], [69, 2, 1, "", "setDays"], [69, 2, 1, "", "setFixedMaskLength"], [69, 2, 1, "", "setGenderAwareness"], [69, 2, 1, "", "setIgnoreRegex"], [69, 2, 1, "", "setIsRandomDateDisplacement"], [69, 2, 1, "", "setLanguage"], [69, 2, 1, "", "setMappingsColumn"], [69, 2, 1, "", "setMaskingPolicy"], [69, 2, 1, "", "setMetadataMaskingPolicy"], [69, 2, 1, "", "setMinYear"], [69, 2, 1, "", "setMode"], [69, 2, 1, "", "setObfuscateDate"], [69, 2, 1, "", "setObfuscateRefSource"], [69, 2, 1, "", "setObfuscationStrategyOnException"], [69, 2, 1, "", "setOutputAsDocument"], [69, 2, 1, "", "setRegexOverride"], [69, 2, 1, "", "setRegion"], [69, 2, 1, "", "setReturnEntityMappings"], [69, 2, 1, "", "setSameEntityThreshold"], [69, 2, 1, "", "setSameLengthFormattedEntities"], [69, 2, 1, "", "setSeed"], [69, 2, 1, "", "setUnnormalizedDateMode"], [69, 2, 1, "", "setUseShifDays"], [69, 2, 1, "", "setUseShiftDays"], [69, 2, 1, "", "setZipCodeTag"], [69, 4, 1, "", "unnormalizedDateMode"], [69, 4, 1, "", "useShifDays"], [69, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[70, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[70, 4, 1, "", "dateShiftColumn"], [70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "name"], [70, 4, 1, "", "newDateShift"], [70, 4, 1, "", "outputAnnotatorType"], [70, 4, 1, "", "patientIdColumn"], [70, 4, 1, "", "rangeDays"], [70, 4, 1, "", "seed"], [70, 2, 1, "", "setDateShiftColumn"], [70, 2, 1, "", "setNewDateShift"], [70, 2, 1, "", "setParams"], [70, 2, 1, "", "setPatientIdColumn"], [70, 2, 1, "", "setRangeDays"], [70, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[72, 1, 1, "", "NameChunkObfuscator"], [72, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[72, 4, 1, "", "genderAwareness"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "language"], [72, 4, 1, "", "nameEntities"], [72, 4, 1, "", "obfuscateRefSource"], [72, 4, 1, "", "outputAnnotatorType"], [72, 4, 1, "", "sameLength"], [72, 4, 1, "", "seed"], [72, 2, 1, "", "setGenderAwareness"], [72, 2, 1, "", "setLanguage"], [72, 2, 1, "", "setNameEntities"], [72, 2, 1, "", "setObfuscateRefSource"], [72, 2, 1, "", "setSameLength"], [72, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[72, 4, 1, "", "genderAwareness"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "language"], [72, 4, 1, "", "nameEntities"], [72, 4, 1, "", "obfuscateRefFile"], [72, 4, 1, "", "obfuscateRefSource"], [72, 4, 1, "", "outputAnnotatorType"], [72, 4, 1, "", "refFileFormat"], [72, 4, 1, "", "refSep"], [72, 4, 1, "", "sameLength"], [72, 4, 1, "", "seed"], [72, 2, 1, "", "setGenderAwareness"], [72, 2, 1, "", "setLanguage"], [72, 2, 1, "", "setNameEntities"], [72, 2, 1, "", "setObfuscateRefFile"], [72, 2, 1, "", "setObfuscateRefSource"], [72, 2, 1, "", "setRefFileFormat"], [72, 2, 1, "", "setRefSep"], [72, 2, 1, "", "setSameLength"], [72, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[73, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[73, 4, 1, "", "inputAnnotatorTypes"], [73, 4, 1, "", "name"], [73, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.replacer": [[74, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[74, 2, 1, "", "getUseReplacement"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "name"], [74, 4, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "setUseReplacement"], [74, 4, 1, "", "useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[76, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[76, 1, 1, "", "NerDisambiguator"], [76, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[76, 4, 1, "", "embeddingTypeParam"], [76, 4, 1, "", "inputAnnotatorTypes"], [76, 4, 1, "", "levenshteinDistanceThresholdParam"], [76, 4, 1, "", "narrowWithApproximateMatching"], [76, 4, 1, "", "nearMatchingGapParam"], [76, 4, 1, "", "numFirstChars"], [76, 4, 1, "", "outputAnnotatorType"], [76, 4, 1, "", "predictionsLimit"], [76, 4, 1, "", "s3KnowledgeBaseName"], [76, 2, 1, "", "setEmbeddingType"], [76, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [76, 2, 1, "", "setNarrowWithApproximateMatching"], [76, 2, 1, "", "setNearMatchingGapParam"], [76, 2, 1, "", "setNumFirstChars"], [76, 2, 1, "", "setPredictionLimit"], [76, 2, 1, "", "setS3KnowledgeBaseName"], [76, 2, 1, "", "setTokenSearch"], [76, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[76, 4, 1, "", "embeddingTypeParam"], [76, 4, 1, "", "inputAnnotatorTypes"], [76, 4, 1, "", "levenshteinDistanceThresholdParam"], [76, 4, 1, "", "name"], [76, 4, 1, "", "narrowWithApproximateMatching"], [76, 4, 1, "", "nearMatchingGapParam"], [76, 4, 1, "", "numFirstChars"], [76, 4, 1, "", "outputAnnotatorType"], [76, 4, 1, "", "predictionsLimit"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setEmbeddingType"], [76, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [76, 2, 1, "", "setNarrowWithApproximateMatching"], [76, 2, 1, "", "setNearMatchingGapParam"], [76, 2, 1, "", "setNumFirstChars"], [76, 2, 1, "", "setPredictionLimit"], [76, 2, 1, "", "setTokenSearch"], [76, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[77, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[77, 4, 1, "", "chunkCol"], [77, 4, 1, "", "failOnMissing"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 4, 1, "", "isArray"], [77, 4, 1, "", "lowerCase"], [77, 4, 1, "", "name"], [77, 2, 1, "", "setChunkCol"], [77, 2, 1, "", "setFailOnMissing"], [77, 2, 1, "", "setIsArray"], [77, 2, 1, "", "setLowerCase"], [77, 2, 1, "", "setParams"], [77, 2, 1, "", "setStartCol"], [77, 2, 1, "", "setStartColByTokenIndex"], [77, 4, 1, "", "startCol"], [77, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[78, 1, 1, "", "DocumentFiltererByClassifier"]], "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier": [[78, 4, 1, "", "inputAnnotatorTypes"], [78, 4, 1, "", "name"], [78, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings": [[79, 0, 0, "-", "average_embeddings"], [80, 0, 0, "-", "bert_sentence_embeddings"], [81, 0, 0, "-", "entity_chunk_embeddings"], [82, 0, 0, "-", "extractive_summarization"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[79, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[79, 4, 1, "", "inputAnnotatorTypes"], [79, 4, 1, "", "name"], [79, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[80, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[80, 4, 1, "", "chunkWeight"], [80, 4, 1, "", "inputAnnotatorTypes"], [80, 2, 1, "", "load"], [80, 4, 1, "", "name"], [80, 4, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[81, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[81, 4, 1, "", "entityWeights"], [81, 4, 1, "", "inputAnnotatorTypes"], [81, 4, 1, "", "maxSyntacticDistance"], [81, 4, 1, "", "name"], [81, 4, 1, "", "outputAnnotatorType"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setEntityWeights"], [81, 2, 1, "", "setMaxSyntacticDistance"], [81, 2, 1, "", "setTargetEntities"], [81, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[82, 1, 1, "", "ExtractiveSummarization"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization": [[82, 4, 1, "", "inputAnnotatorTypes"], [82, 4, 1, "", "name"], [82, 4, 1, "", "outputAnnotatorType"], [82, 4, 1, "", "returnSingleDocument"], [82, 2, 1, "", "setReturnSingleDocument"], [82, 2, 1, "", "setSimilarityThreshold"], [82, 2, 1, "", "setSummarySize"], [82, 4, 1, "", "similarityThreshold"], [82, 4, 1, "", "summarySize"]], "sparknlp_jsl.annotator.er": [[84, 0, 0, "-", "entity_ruler_internal"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[84, 1, 1, "", "EntityRulerInternalApproach"], [84, 1, 1, "", "EntityRulerInternalModel"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach": [[84, 4, 1, "", "alphabet"], [84, 4, 1, "", "inputAnnotatorTypes"], [84, 4, 1, "", "name"], [84, 4, 1, "", "optionalInputAnnotatorTypes"], [84, 4, 1, "", "outputAnnotatorType"], [84, 4, 1, "", "patternsResource"], [84, 4, 1, "", "sentenceMatch"], [84, 2, 1, "", "setAlphabetResource"], [84, 2, 1, "", "setPatternsResource"], [84, 2, 1, "", "setSentenceMatch"], [84, 2, 1, "", "setUseStorage"], [84, 4, 1, "", "useStorage"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel": [[84, 4, 1, "", "database"], [84, 4, 1, "", "inputAnnotatorTypes"], [84, 2, 1, "", "loadStorage"], [84, 4, 1, "", "name"], [84, 4, 1, "", "optionalInputAnnotatorTypes"], [84, 4, 1, "", "outputAnnotatorType"], [84, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.feature_assembler": [[86, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "inputCols"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"], [86, 4, 1, "", "outputCol"], [86, 2, 1, "", "setInputCols"], [86, 2, 1, "", "setOutputCol"], [86, 2, 1, "", "setParams"], [86, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.filtering_params": [[87, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[87, 4, 1, "", "criteria"], [87, 4, 1, "", "filterValue"], [87, 4, 1, "", "regex"], [87, 2, 1, "", "setCriteria"], [87, 2, 1, "", "setFilterValue"], [87, 2, 1, "", "setRegex"]], "sparknlp_jsl.annotator.flattener": [[88, 1, 1, "", "Flattener"]], "sparknlp_jsl.annotator.flattener.Flattener": [[88, 4, 1, "", "cleanAnnotations"], [88, 4, 1, "", "flattenExplodedColumns"], [88, 2, 1, "", "getInputCols"], [88, 4, 1, "", "inputCols"], [88, 4, 1, "", "name"], [88, 4, 1, "", "orderByColumn"], [88, 4, 1, "", "orderDescending"], [88, 2, 1, "", "setCleanAnnotations"], [88, 2, 1, "", "setExplodeSelectedFields"], [88, 2, 1, "", "setFlattenExplodedColumns"], [88, 2, 1, "", "setInputCols"], [88, 2, 1, "", "setOrderByColumn"], [88, 2, 1, "", "setOrderDescending"], [88, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.generic_classifier": [[89, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[89, 1, 1, "", "GenericClassifierApproach"], [89, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[89, 4, 1, "", "batchSize"], [89, 4, 1, "", "dropout"], [89, 4, 1, "", "epochsN"], [89, 4, 1, "", "featureScaling"], [89, 4, 1, "", "fixImbalance"], [89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "labelColumn"], [89, 4, 1, "", "learningRate"], [89, 4, 1, "", "modelFile"], [89, 4, 1, "", "multiClass"], [89, 4, 1, "", "outputAnnotatorType"], [89, 4, 1, "", "outputLogsPath"], [89, 2, 1, "", "setBatchSize"], [89, 2, 1, "", "setDropout"], [89, 2, 1, "", "setEpochsNumber"], [89, 2, 1, "", "setFeatureScaling"], [89, 2, 1, "", "setFixImbalance"], [89, 2, 1, "", "setLabelCol"], [89, 2, 1, "", "setLearningRate"], [89, 2, 1, "", "setModelFile"], [89, 2, 1, "", "setMultiClass"], [89, 2, 1, "", "setOutputLogsPath"], [89, 2, 1, "", "setValidationSplit"], [89, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[89, 4, 1, "", "classes"], [89, 4, 1, "", "featureScaling"], [89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "multiClass"], [89, 4, 1, "", "name"], [89, 4, 1, "", "outputAnnotatorType"], [89, 2, 1, "", "pretrained"], [89, 2, 1, "", "setFeatureScaling"], [89, 2, 1, "", "setMultiClass"]], "sparknlp_jsl.annotator.handle_exception_params": [[91, 1, 1, "", "HandleExceptionParams"]], "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams": [[91, 4, 1, "", "doExceptionHandling"], [91, 2, 1, "", "setDoExceptionHandling"]], "sparknlp_jsl.annotator.matcher": [[94, 0, 0, "-", "text_matcher_internal"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[94, 1, 1, "", "TextMatcherInternal"], [94, 1, 1, "", "TextMatcherInternalModel"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal": [[94, 4, 1, "", "buildFromTokens"], [94, 4, 1, "", "caseSensitive"], [94, 4, 1, "", "delimiter"], [94, 4, 1, "", "entities"], [94, 4, 1, "", "entityValue"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "mergeOverlapping"], [94, 4, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "setBuildFromTokens"], [94, 2, 1, "", "setCaseSensitive"], [94, 2, 1, "", "setDelimiter"], [94, 2, 1, "", "setEntities"], [94, 2, 1, "", "setEntityValue"], [94, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel": [[94, 4, 1, "", "buildFromTokens"], [94, 4, 1, "", "caseSensitive"], [94, 4, 1, "", "delimiter"], [94, 4, 1, "", "entityValue"], [94, 2, 1, "", "getCaseSensitive"], [94, 2, 1, "", "getDelimiter"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "mergeOverlapping"], [94, 4, 1, "", "name"], [94, 4, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "pretrained"], [94, 4, 1, "", "searchTrie"], [94, 2, 1, "", "setBuildFromTokens"], [94, 2, 1, "", "setDelimiter"], [94, 2, 1, "", "setEntityValue"], [94, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge": [[95, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[95, 1, 1, "", "ChunkMergeApproach"], [95, 1, 1, "", "ChunkMergeModel"], [95, 1, 1, "", "MergeCommonParams"], [95, 1, 1, "", "MergeFeatureParams"], [95, 1, 1, "", "MergePrioritizationParams"], [95, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[95, 4, 1, "", "inputAnnotatorTypes"], [95, 4, 1, "", "name"], [95, 4, 1, "", "outputAnnotatorType"], [95, 2, 1, "", "setEntitiesConfidence"], [95, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[95, 4, 1, "", "inputAnnotatorTypes"], [95, 4, 1, "", "name"], [95, 4, 1, "", "outputAnnotatorType"], [95, 2, 1, "", "pretrained"], [95, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[95, 4, 1, "", "mergeOverlapping"], [95, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams": [[95, 2, 1, "", "getReplaceDict"], [95, 2, 1, "", "setFalsePositives"], [95, 2, 1, "", "setReplaceDict"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[95, 4, 1, "", "chunkPrecedence"], [95, 4, 1, "", "chunkPrecedenceValuePrioritization"], [95, 4, 1, "", "defaultConfidence"], [95, 4, 1, "", "orderingFeatures"], [95, 4, 1, "", "selectionStrategy"], [95, 2, 1, "", "setChunkPrecedence"], [95, 2, 1, "", "setChunkPrecedenceValuePrioritization"], [95, 2, 1, "", "setDefaultConfidence"], [95, 2, 1, "", "setOrderingFeatures"], [95, 2, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[95, 4, 1, "", "entitiesConfidenceResource"], [95, 4, 1, "", "falsePositivesResource"], [95, 4, 1, "", "replaceDictResource"], [95, 2, 1, "", "setEntitiesConfidenceResource"], [95, 2, 1, "", "setFalsePositivesResource"], [95, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.ner": [[98, 0, 0, "-", "iob_tagger"], [99, 0, 0, "-", "medical_ner"], [100, 0, 0, "-", "ner_chunker"], [101, 0, 0, "-", "ner_converter_internal"], [102, 0, 0, "-", "ner_template_render"], [103, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[98, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[98, 4, 1, "", "inputAnnotatorTypes"], [98, 4, 1, "", "name"], [98, 4, 1, "", "outputAnnotatorType"], [98, 4, 1, "", "scheme"], [98, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[99, 1, 1, "", "MedicalNerApproach"], [99, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[99, 4, 1, "", "batchSize"], [99, 4, 1, "", "configProtoBytes"], [99, 4, 1, "", "dropout"], [99, 4, 1, "", "earlyStoppingCriterion"], [99, 4, 1, "", "earlyStoppingPatience"], [99, 4, 1, "", "enableMemoryOptimizer"], [99, 4, 1, "", "graphFile"], [99, 4, 1, "", "graphFolder"], [99, 4, 1, "", "includeAllConfidenceScores"], [99, 4, 1, "", "includeConfidence"], [99, 4, 1, "", "inputAnnotatorTypes"], [99, 4, 1, "", "logPrefix"], [99, 4, 1, "", "lr"], [99, 4, 1, "", "outputAnnotatorType"], [99, 4, 1, "", "overrideExistingTags"], [99, 4, 1, "", "po"], [99, 4, 1, "", "pretrainedModelPath"], [99, 4, 1, "", "randomValidationSplitPerEpoch"], [99, 4, 1, "", "sentenceTokenIndex"], [99, 2, 1, "", "setBatchSize"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setDoExceptionHandling"], [99, 2, 1, "", "setDropout"], [99, 2, 1, "", "setEarlyStoppingCriterion"], [99, 2, 1, "", "setEarlyStoppingPatience"], [99, 2, 1, "", "setEnableMemoryOptimizer"], [99, 2, 1, "", "setGraphFile"], [99, 2, 1, "", "setGraphFolder"], [99, 2, 1, "", "setIncludeAllConfidenceScores"], [99, 2, 1, "", "setIncludeConfidence"], [99, 2, 1, "", "setLogPrefix"], [99, 2, 1, "", "setLr"], [99, 2, 1, "", "setOverrideExistingTags"], [99, 2, 1, "", "setPo"], [99, 2, 1, "", "setPretrainedModelPath"], [99, 2, 1, "", "setRandomValidationSplitPerEpoch"], [99, 2, 1, "", "setSentenceTokenIndex"], [99, 2, 1, "", "setTagsMapping"], [99, 2, 1, "", "setUseBestModel"], [99, 2, 1, "", "setUseContrib"], [99, 2, 1, "", "setValidationSplit"], [99, 4, 1, "", "useBestModel"], [99, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[99, 4, 1, "", "classes"], [99, 4, 1, "", "configProtoBytes"], [99, 4, 1, "", "doExceptionHandling"], [99, 2, 1, "", "getClasses"], [99, 2, 1, "", "getTrainingClassDistribution"], [99, 4, 1, "", "includeAllConfidenceScores"], [99, 4, 1, "", "includeConfidence"], [99, 4, 1, "", "inferenceBatchSize"], [99, 4, 1, "", "inputAnnotatorTypes"], [99, 4, 1, "", "labelCasing"], [99, 2, 1, "", "loadSavedModel"], [99, 4, 1, "", "name"], [99, 4, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "pretrained"], [99, 4, 1, "", "sentenceTokenIndex"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setIncludeConfidence"], [99, 2, 1, "", "setInferenceBatchSize"], [99, 2, 1, "", "setLabelCasing"], [99, 2, 1, "", "setSentenceTokenIndex"], [99, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[100, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[100, 4, 1, "", "inputAnnotatorTypes"], [100, 4, 1, "", "name"], [100, 4, 1, "", "outputAnnotatorType"], [100, 4, 1, "", "regexParsers"], [100, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[101, 1, 1, "", "CommonNerConverterInternalParams"], [101, 1, 1, "", "NerConverterInternal"], [101, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[101, 4, 1, "", "doExceptionHandling"], [101, 4, 1, "", "greedyMode"], [101, 4, 1, "", "ignoreStopWords"], [101, 4, 1, "", "preservePosition"], [101, 2, 1, "", "setAllowList"], [101, 2, 1, "", "setDenyList"], [101, 2, 1, "", "setDoExceptionHandling"], [101, 2, 1, "", "setGreedyMode"], [101, 2, 1, "", "setIgnoreStopWords"], [101, 2, 1, "", "setPreservePosition"], [101, 2, 1, "", "setThreshold"], [101, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[101, 4, 1, "", "inputAnnotatorTypes"], [101, 4, 1, "", "name"], [101, 4, 1, "", "outputAnnotatorType"], [101, 4, 1, "", "replaceDictResource"], [101, 4, 1, "", "replaceLabels"], [101, 2, 1, "", "setReplaceDictResource"], [101, 2, 1, "", "setReplaceLabels"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[101, 4, 1, "", "inputAnnotatorTypes"], [101, 4, 1, "", "name"], [101, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[102, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[102, 4, 1, "", "combineEntities"], [102, 4, 1, "", "entityScopes"], [102, 4, 1, "", "inputAnnotatorTypes"], [102, 4, 1, "", "outputAnnotatorType"], [102, 4, 1, "", "permuteEntities"], [102, 2, 1, "", "pretrained"], [102, 4, 1, "", "randomSeed"], [102, 4, 1, "", "resampleEntities"], [102, 2, 1, "", "setCombineEntities"], [102, 2, 1, "", "setEntityScopes"], [102, 2, 1, "", "setPermuteEntities"], [102, 2, 1, "", "setRandomSeed"], [102, 2, 1, "", "setResampleEntities"], [102, 2, 1, "", "setTemplates"], [102, 4, 1, "", "templates"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[103, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[103, 2, 1, "", "getClasses"], [103, 4, 1, "", "ignoreEntities"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "load"], [103, 4, 1, "", "name"], [103, 4, 1, "", "outputAnnotatorType"], [103, 4, 1, "", "predictionThreshold"], [103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setEntityDefinitions"], [103, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[104, 0, 0, "-", "date_normalizer"], [105, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[104, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[104, 4, 1, "", "anchorDateDay"], [104, 4, 1, "", "anchorDateMonth"], [104, 4, 1, "", "anchorDateYear"], [104, 4, 1, "", "defaultReplacementDay"], [104, 4, 1, "", "defaultReplacementMonth"], [104, 4, 1, "", "defaultReplacementYear"], [104, 4, 1, "", "inputAnnotatorTypes"], [104, 4, 1, "", "name"], [104, 4, 1, "", "outputAnnotatorType"], [104, 4, 1, "", "outputDateFormat"], [104, 2, 1, "", "setAnchorDateDay"], [104, 2, 1, "", "setAnchorDateMonth"], [104, 2, 1, "", "setAnchorDateYear"], [104, 2, 1, "", "setDefaultReplacementDay"], [104, 2, 1, "", "setDefaultReplacementMonth"], [104, 2, 1, "", "setDefaultReplacementYear"], [104, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[105, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[105, 4, 1, "", "inputAnnotatorTypes"], [105, 4, 1, "", "lowercase"], [105, 4, 1, "", "outputAnnotatorType"], [105, 4, 1, "", "policy"], [105, 2, 1, "", "setLowercase"], [105, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[107, 0, 0, "-", "beam_search_params"], [109, 0, 0, "-", "medical_qa"], [110, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[107, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[107, 4, 1, "", "doSample"], [107, 4, 1, "", "ignoreTokenIds"], [107, 4, 1, "", "maxContextLength"], [107, 4, 1, "", "maxNewTokens"], [107, 4, 1, "", "noRepeatNgramSize"], [107, 2, 1, "", "setDoSample"], [107, 2, 1, "", "setIgnoreTokenIds"], [107, 2, 1, "", "setMaxContextLength"], [107, 2, 1, "", "setMaxNewTokens"], [107, 2, 1, "", "setNoRepeatNgramSize"], [107, 2, 1, "", "setRandomSeed"], [107, 2, 1, "", "setTopK"], [107, 4, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[109, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[109, 4, 1, "", "configProtoBytes"], [109, 4, 1, "", "customPrompt"], [109, 2, 1, "", "getQuestionTypes"], [109, 4, 1, "", "inputAnnotatorTypes"], [109, 2, 1, "", "loadMedicalTextGenerator"], [109, 2, 1, "", "loadSavedModel"], [109, 4, 1, "", "mlFrameworkType"], [109, 4, 1, "", "modelType"], [109, 4, 1, "", "name"], [109, 4, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "pretrained"], [109, 4, 1, "", "questionType"], [109, 2, 1, "", "setConfigProtoBytes"], [109, 2, 1, "", "setCustomPrompt"], [109, 2, 1, "", "setQuestionAnswerTerminals"], [109, 2, 1, "", "setQuestionPrompts"], [109, 2, 1, "", "setQuestionSkipLastToken"], [109, 2, 1, "", "setQuestionType"], [109, 2, 1, "", "setUseCache"], [109, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[110, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[110, 4, 1, "", "entities1"], [110, 4, 1, "", "entities2"], [110, 4, 1, "", "inputAnnotatorTypes"], [110, 4, 1, "", "name"], [110, 4, 1, "", "outputAnnotatorType"], [110, 4, 1, "", "questionMark"], [110, 4, 1, "", "questionPronoun"], [110, 2, 1, "", "setEntities1"], [110, 2, 1, "", "setEntities2"], [110, 2, 1, "", "setQuestionMark"], [110, 2, 1, "", "setQuestionPronoun"], [110, 2, 1, "", "setStrategyType"], [110, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[112, 0, 0, "-", "relation_extraction"], [113, 0, 0, "-", "relation_extraction_dl"], [114, 0, 0, "-", "relation_ner_chunk_filter"], [115, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[112, 1, 1, "", "GenericREModel"], [112, 1, 1, "", "PosologyREModel"], [112, 1, 1, "", "RelationExtractionApproach"], [112, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[112, 4, 1, "", "customLabels"], [112, 4, 1, "", "fromEntityBeginCol"], [112, 4, 1, "", "fromEntityEndCol"], [112, 4, 1, "", "fromEntityLabelCol"], [112, 4, 1, "", "inputAnnotatorTypes"], [112, 4, 1, "", "maxSyntacticDistance"], [112, 4, 1, "", "name"], [112, 4, 1, "", "outputAnnotatorType"], [112, 4, 1, "", "overrideExistingLabels"], [112, 4, 1, "", "pretrainedModelPath"], [112, 4, 1, "", "relationDirectionCol"], [112, 2, 1, "", "setCustomLabels"], [112, 2, 1, "", "setFromEntity"], [112, 2, 1, "", "setMaxSyntacticDistance"], [112, 2, 1, "", "setPretrainedModelPath"], [112, 2, 1, "", "setRelationDirectionCol"], [112, 2, 1, "", "setToEntity"], [112, 2, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [112, 4, 1, "", "toEntityBeginCol"], [112, 4, 1, "", "toEntityEndCol"], [112, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[112, 4, 1, "", "classes"], [112, 4, 1, "", "customLabels"], [112, 4, 1, "", "featureScaling"], [112, 2, 1, "", "getClasses"], [112, 2, 1, "", "getRelationTypePerPair"], [112, 4, 1, "", "inputAnnotatorTypes"], [112, 4, 1, "", "maxSyntacticDistance"], [112, 4, 1, "", "multiClass"], [112, 4, 1, "", "name"], [112, 4, 1, "", "outputAnnotatorType"], [112, 4, 1, "", "predictionThreshold"], [112, 2, 1, "", "pretrained"], [112, 4, 1, "", "relationPairs"], [112, 4, 1, "", "relationPairsCaseSensitive"], [112, 2, 1, "", "setCustomLabels"], [112, 2, 1, "", "setFeatureScaling"], [112, 2, 1, "", "setMaxSyntacticDistance"], [112, 2, 1, "", "setMultiClass"], [112, 2, 1, "", "setPredictionThreshold"], [112, 2, 1, "", "setRelationPairs"], [112, 2, 1, "", "setRelationPairsCaseSensitive"], [112, 2, 1, "", "setRelationTypePerPair"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[113, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[113, 4, 1, "", "batchSize"], [113, 4, 1, "", "classes"], [113, 4, 1, "", "customLabels"], [113, 2, 1, "", "getClasses"], [113, 2, 1, "", "getRelationTypePerPair"], [113, 4, 1, "", "inputAnnotatorTypes"], [113, 2, 1, "", "loadSavedModel"], [113, 4, 1, "", "name"], [113, 4, 1, "", "outputAnnotatorType"], [113, 4, 1, "", "predictionThreshold"], [113, 2, 1, "", "pretrained"], [113, 4, 1, "", "relationPairsCaseSensitive"], [113, 2, 1, "", "setBatchSize"], [113, 2, 1, "", "setCaseSensitive"], [113, 2, 1, "", "setCustomLabels"], [113, 2, 1, "", "setPredictionThreshold"], [113, 2, 1, "", "setRelationPairsCaseSensitive"], [113, 2, 1, "", "setRelationTypePerPair"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[114, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[114, 4, 1, "", "docLevelRelations"], [114, 4, 1, "", "inputAnnotatorTypes"], [114, 4, 1, "", "maxSyntacticDistance"], [114, 4, 1, "", "name"], [114, 4, 1, "", "outputAnnotatorType"], [114, 4, 1, "", "relationPairs"], [114, 4, 1, "", "relationPairsCaseSensitive"], [114, 2, 1, "", "setDocLevelRelations"], [114, 2, 1, "", "setMaxSyntacticDistance"], [114, 2, 1, "", "setRelationPairs"], [114, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[115, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[115, 2, 1, "", "getClasses"], [115, 4, 1, "", "inputAnnotatorTypes"], [115, 2, 1, "", "loadSavedModel"], [115, 4, 1, "", "multiLabel"], [115, 4, 1, "", "negativeRelationships"], [115, 4, 1, "", "outputAnnotatorType"], [115, 4, 1, "", "predictionThreshold"], [115, 2, 1, "", "pretrained"], [115, 2, 1, "", "setNegativeRelationships"], [115, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.regex": [[117, 0, 0, "-", "regex_matcher"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[117, 1, 1, "", "RegexMatcherInternal"], [117, 1, 1, "", "RegexMatcherInternalModel"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal": [[117, 4, 1, "", "delimiter"], [117, 4, 1, "", "externalRules"], [117, 4, 1, "", "inputAnnotatorTypes"], [117, 4, 1, "", "outputAnnotatorType"], [117, 4, 1, "", "rules"], [117, 2, 1, "", "setDelimiter"], [117, 2, 1, "", "setExternalRules"], [117, 2, 1, "", "setRules"], [117, 2, 1, "", "setStrategy"], [117, 4, 1, "", "strategy"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel": [[117, 4, 1, "", "inputAnnotatorTypes"], [117, 4, 1, "", "name"], [117, 4, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.resolution": [[119, 0, 0, "-", "resolver_merger"], [120, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[119, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[119, 4, 1, "", "inputAnnotatorTypes"], [119, 4, 1, "", "name"], [119, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[120, 1, 1, "", "SentenceEntityResolverApproach"], [120, 1, 1, "", "SentenceEntityResolverModel"], [120, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[120, 4, 1, "", "aux_label_col"], [120, 4, 1, "", "dropCodesList"], [120, 4, 1, "", "inputAnnotatorTypes"], [120, 4, 1, "", "labelCol"], [120, 4, 1, "", "normalizedCol"], [120, 4, 1, "", "outputAnnotatorType"], [120, 4, 1, "", "overrideExistingCodes"], [120, 4, 1, "", "pretrainedModelPath"], [120, 4, 1, "", "returnCosineDistances"], [120, 2, 1, "", "setAuxLabelCol"], [120, 2, 1, "", "setDropCodesList"], [120, 2, 1, "", "setExtractCosineDistances"], [120, 2, 1, "", "setLabelCol"], [120, 2, 1, "", "setNormalizedCol"], [120, 2, 1, "", "setOverrideExistingCodes"], [120, 2, 1, "", "setPretrainedModelPath"], [120, 2, 1, "", "setUseAuxLabel"], [120, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[120, 4, 1, "", "inputAnnotatorTypes"], [120, 4, 1, "", "name"], [120, 4, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "pretrained"], [120, 4, 1, "", "returnCosineDistances"], [120, 4, 1, "", "searchTree"], [120, 2, 1, "", "setSearchTree"], [120, 2, 1, "", "setUseAuxLabel"], [120, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[120, 4, 1, "", "confidenceFunction"], [120, 4, 1, "", "distanceFunction"], [120, 4, 1, "", "inputAnnotatorTypes"], [120, 4, 1, "", "missAsEmpty"], [120, 4, 1, "", "neighbours"], [120, 4, 1, "", "returnResolvedTextEmbeddings"], [120, 2, 1, "", "setConfidenceFunction"], [120, 2, 1, "", "setDistanceFunction"], [120, 2, 1, "", "setMissAsEmpty"], [120, 2, 1, "", "setNeighbours"], [120, 2, 1, "", "setReturnResolvedTextEmbeddings"], [120, 2, 1, "", "setThreshold"], [120, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[121, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[121, 4, 1, "", "inputAnnotatorTypes"], [121, 4, 1, "", "name"], [121, 4, 1, "", "outputAnnotatorType"], [121, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.router": [[122, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[122, 4, 1, "", "filterFieldsElements"], [122, 4, 1, "", "inputAnnotatorTypes"], [122, 4, 1, "", "inputType"], [122, 4, 1, "", "metadataField"], [122, 4, 1, "", "name"], [122, 4, 1, "", "outputAnnotatorType"], [122, 2, 1, "", "setFilterFieldsElements"], [122, 2, 1, "", "setInputCols"], [122, 2, 1, "", "setInputType"], [122, 2, 1, "", "setMetadataField"], [122, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq": [[124, 0, 0, "-", "medical_encoder_decoder"], [125, 0, 0, "-", "medical_summarizer"], [126, 0, 0, "-", "medical_text_generator"], [127, 0, 0, "-", "text2sql"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[124, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[124, 4, 1, "", "configProtoBytes"], [124, 4, 1, "", "doSample"], [124, 4, 1, "", "ignoreTokenIds"], [124, 4, 1, "", "inputAnnotatorTypes"], [124, 4, 1, "", "maxNewTokens"], [124, 4, 1, "", "maxTextLength"], [124, 4, 1, "", "mlFrameworkType"], [124, 4, 1, "", "name"], [124, 4, 1, "", "noRepeatNgramSize"], [124, 4, 1, "", "outputAnnotatorType"], [124, 4, 1, "", "randomSeed"], [124, 4, 1, "", "refineChunkSize"], [124, 4, 1, "", "refineMaxAttempts"], [124, 4, 1, "", "refineSummary"], [124, 4, 1, "", "refineSummaryTargetLength"], [124, 2, 1, "", "setConfigProtoBytes"], [124, 2, 1, "", "setDoSample"], [124, 2, 1, "", "setIgnoreTokenIds"], [124, 2, 1, "", "setMaxNewTokens"], [124, 2, 1, "", "setMaxTextLength"], [124, 2, 1, "", "setNoRepeatNgramSize"], [124, 2, 1, "", "setRandomSeed"], [124, 2, 1, "", "setRefineChunkSize"], [124, 2, 1, "", "setRefineMaxAttempts"], [124, 2, 1, "", "setRefineSummary"], [124, 2, 1, "", "setRefineSummaryTargetLength"], [124, 2, 1, "", "setStopAtEos"], [124, 2, 1, "", "setTopK"], [124, 4, 1, "", "stopAtEos"], [124, 4, 1, "", "task"], [124, 4, 1, "", "topK"], [124, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[125, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[125, 2, 1, "", "loadSavedModel"], [125, 4, 1, "", "name"], [125, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[126, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[126, 4, 1, "", "configProtoBytes"], [126, 4, 1, "", "customPrompt"], [126, 2, 1, "", "getAdditionalTokens"], [126, 4, 1, "", "inputAnnotatorTypes"], [126, 2, 1, "", "loadSavedModel"], [126, 4, 1, "", "maxTextLength"], [126, 4, 1, "", "mlFrameworkType"], [126, 4, 1, "", "modelType"], [126, 4, 1, "", "name"], [126, 4, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "pretrained"], [126, 2, 1, "", "setAdditionalTokens"], [126, 2, 1, "", "setConfigProtoBytes"], [126, 2, 1, "", "setCustomPrompt"], [126, 2, 1, "", "setMaxTextLength"], [126, 2, 1, "", "setStopAtEos"], [126, 2, 1, "", "setUseCache"], [126, 4, 1, "", "stopAtEos"], [126, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[127, 1, 1, "", "Text2SQL"]], "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL": [[127, 2, 1, "", "getPostProcessingSubstitutions"], [127, 2, 1, "", "getSchema"], [127, 2, 1, "", "loadSavedModel"], [127, 4, 1, "", "name"], [127, 2, 1, "", "pretrained"], [127, 2, 1, "", "setPostProcessingSubstitutions"], [127, 2, 1, "", "setSchema"], [127, 2, 1, "", "setTableLimit"], [127, 4, 1, "", "tableLimit"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[128, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[128, 4, 1, "", "allPossibleFieldsToStandardize"], [128, 4, 1, "", "includeOutputColumn"], [128, 4, 1, "", "includeStandardField"], [128, 4, 1, "", "outputColumnKey"], [128, 2, 1, "", "setAllPossibleFieldsToStandardize"], [128, 2, 1, "", "setIncludeOutputColumn"], [128, 2, 1, "", "setIncludeStandardField"], [128, 2, 1, "", "setOutputColumnKey"], [128, 2, 1, "", "setStandardFieldKey"], [128, 4, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[130, 0, 0, "-", "internal_document_splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[130, 1, 1, "", "InternalDocumentSplitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter": [[130, 4, 1, "", "caseSensitive"], [130, 4, 1, "", "customBoundsStrategy"], [130, 4, 1, "", "enableSentenceIncrement"], [130, 4, 1, "", "inputAnnotatorTypes"], [130, 4, 1, "", "maxLength"], [130, 4, 1, "", "metaDataFields"], [130, 4, 1, "", "name"], [130, 4, 1, "", "optionalInputAnnotatorTypes"], [130, 4, 1, "", "outputAnnotatorType"], [130, 4, 1, "", "sentenceAwareness"], [130, 2, 1, "", "setCaseSensitive"], [130, 2, 1, "", "setCustomBoundsStrategy"], [130, 2, 1, "", "setEnableSentenceIncrement"], [130, 2, 1, "", "setInputCols"], [130, 2, 1, "", "setMaxLength"], [130, 2, 1, "", "setMetaDataFields"], [130, 2, 1, "", "setSentenceAwareness"], [130, 2, 1, "", "setSplitMode"], [130, 4, 1, "", "splitMode"]], "sparknlp_jsl.annotator.tf_graph_builder": [[131, 1, 1, "", "TFGraphBuilder"], [131, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[131, 4, 1, "", "batchNorm"], [131, 2, 1, "", "getBatchNorm"], [131, 2, 1, "", "getGraphFile"], [131, 2, 1, "", "getGraphFolder"], [131, 2, 1, "", "getHiddenAct"], [131, 2, 1, "", "getHiddenActL2"], [131, 2, 1, "", "getHiddenLayers"], [131, 2, 1, "", "getHiddenUnitsNumber"], [131, 2, 1, "", "getHiddenWeightsL2"], [131, 2, 1, "", "getInputCols"], [131, 2, 1, "", "getIsLicensed"], [131, 2, 1, "", "getLabelColumn"], [131, 2, 1, "", "getMaxSequenceLength"], [131, 2, 1, "", "getModelName"], [131, 2, 1, "", "getOutputAct"], [131, 2, 1, "", "getUseRelationDirection"], [131, 4, 1, "", "graphFile"], [131, 4, 1, "", "graphFolder"], [131, 4, 1, "", "hiddenAct"], [131, 4, 1, "", "hiddenActL2"], [131, 4, 1, "", "hiddenLayers"], [131, 4, 1, "", "hiddenUnitsNumber"], [131, 4, 1, "", "hiddenWeightsL2"], [131, 4, 1, "", "inputCols"], [131, 4, 1, "", "isLicensed"], [131, 4, 1, "", "labelColumn"], [131, 4, 1, "", "maxSequenceLength"], [131, 4, 1, "", "modelName"], [131, 4, 1, "", "outputAct"], [131, 2, 1, "", "setBatchNorm"], [131, 2, 1, "", "setGraphFile"], [131, 2, 1, "", "setGraphFolder"], [131, 2, 1, "", "setHiddenAct"], [131, 2, 1, "", "setHiddenActL2"], [131, 2, 1, "", "setHiddenLayers"], [131, 2, 1, "", "setHiddenUnitsNumber"], [131, 2, 1, "", "setHiddenWeightsL2"], [131, 2, 1, "", "setInputCols"], [131, 2, 1, "", "setIsLicensed"], [131, 2, 1, "", "setLabelColumn"], [131, 2, 1, "", "setMaxSequenceLength"], [131, 2, 1, "", "setModelName"], [131, 2, 1, "", "setUseRelationDirection"], [131, 2, 1, "", "settOutputAct"], [131, 4, 1, "", "useRelationDirection"]], "sparknlp_jsl.annotator.white_black_list_params": [[132, 1, 1, "", "WhiteBlackListParams"]], "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams": [[132, 4, 1, "", "blackList"], [132, 4, 1, "", "caseSensitive"], [132, 2, 1, "", "setBlackList"], [132, 2, 1, "", "setCaseSensitive"], [132, 2, 1, "", "setDenyList"], [132, 2, 1, "", "setWhiteList"], [132, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.windowed": [[134, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[134, 1, 1, "", "WindowedParams"], [134, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[134, 4, 1, "", "glueString"], [134, 2, 1, "", "setGlueString"], [134, 2, 1, "", "setWindowSize"], [134, 4, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[134, 4, 1, "", "inputAnnotatorTypes"], [134, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.common": [[136, 0, 0, "-", "annotator_approach_internal"], [137, 0, 0, "-", "annotator_model_internal"], [138, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[136, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[136, 4, 1, "", "inputAnnotatorTypes"], [136, 4, 1, "", "outputAnnotatorType"], [136, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[137, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[137, 4, 1, "", "inputAnnotatorTypes"], [137, 4, 1, "", "outputAnnotatorType"], [137, 2, 1, "", "setParams"], [137, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[138, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[138, 2, 1, "", "inputColsValidation"], [138, 2, 1, "", "setForceInputTypeValidation"]], "sparknlp_jsl.compatibility": [[140, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[140, 2, 1, "", "findVersion"], [140, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[141, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[141, 4, 1, "", "f"], [141, 2, 1, "", "setInputCol"], [141, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.deidentification_module": [[142, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[142, 2, 1, "", "deid_with_custom_pipeline"], [142, 2, 1, "", "deid_with_pretrained_pipeline"], [142, 2, 1, "", "deidentify"]], "sparknlp_jsl.eval": [[143, 1, 1, "", "NerCrfEvaluation"], [143, 1, 1, "", "NerDLEvaluation"], [143, 1, 1, "", "NerDLMetrics"], [143, 1, 1, "", "NorvigSpellEvaluation"], [143, 1, 1, "", "POSEvaluation"], [143, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[143, 2, 1, "", "computeAccuracyAnnotator"], [143, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[143, 2, 1, "", "computeAccuracyAnnotator"], [143, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[143, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[143, 2, 1, "", "computeAccuracyAnnotator"], [143, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[143, 2, 1, "", "computeAccuracyAnnotator"], [143, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[143, 2, 1, "", "computeAccuracyAnnotator"], [143, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[149, 0, 0, "-", "chunk_classification"], [154, 0, 0, "-", "graph"], [163, 0, 0, "-", "sequence_classification"], [168, 0, 0, "-", "sequence_generation"], [170, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[145, 0, 0, "-", "assertion"], [148, 0, 0, "-", "deid"], [152, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[144, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[144, 1, 1, "", "AssertionDLApproach"], [144, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[144, 4, 1, "", "name"], [144, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[146, 0, 0, "-", "deIdentification"], [147, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[146, 1, 1, "", "DeIdentification"], [146, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[146, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[146, 4, 1, "", "name"], [146, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[147, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[147, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[150, 0, 0, "-", "chunkmapper"], [151, 0, 0, "-", "docmapper"], [153, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[150, 1, 1, "", "ChunkMapperApproach"], [150, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[150, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[150, 4, 1, "", "name"], [150, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[151, 1, 1, "", "DocMapperApproach"], [151, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[151, 4, 1, "", "dictionary"], [151, 4, 1, "", "inputAnnotatorTypes"], [151, 4, 1, "", "name"], [151, 4, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "setDictionary"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[151, 4, 1, "", "inputAnnotatorTypes"], [151, 4, 1, "", "name"], [151, 4, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[153, 1, 1, "", "SentenceEntityResolverApproach"], [153, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[153, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[155, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[156, 0, 0, "-", "relation_extraction_dl"], [157, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[156, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[156, 2, 1, "", "loadSavedModel"], [156, 4, 1, "", "name"], [156, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[157, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[157, 2, 1, "", "loadSavedModel"], [157, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification": [[159, 0, 0, "-", "finance_bert_for_sequence_classification"], [160, 0, 0, "-", "finance_classifier_dl"], [161, 0, 0, "-", "finance_document_ml_classifier"], [162, 0, 0, "-", "finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[159, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[159, 2, 1, "", "loadSavedModel"], [159, 2, 1, "", "loadSavedModelOpenSource"], [159, 4, 1, "", "name"], [159, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[160, 1, 1, "", "FinanceClassifierDLApproach"], [160, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[160, 4, 1, "", "name"], [160, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[161, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [161, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[161, 4, 1, "", "name"], [161, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[162, 1, 1, "", "FinanceFewShotClassifierApproach"], [162, 1, 1, "", "FinanceFewShotClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach": [[162, 4, 1, "", "name"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel": [[162, 4, 1, "", "name"], [162, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation": [[164, 0, 0, "-", "finance_encoder_decoder"], [165, 0, 0, "-", "finance_qa"], [166, 0, 0, "-", "finance_summarizer"], [167, 0, 0, "-", "finance_text_generator"], [169, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[164, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[164, 4, 1, "", "name"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[165, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[165, 2, 1, "", "loadSavedModel"], [165, 4, 1, "", "name"], [165, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[166, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[166, 2, 1, "", "loadSavedModel"], [166, 4, 1, "", "name"], [166, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[167, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[167, 2, 1, "", "loadSavedModel"], [167, 4, 1, "", "name"], [167, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[169, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.token_classification": [[173, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[171, 0, 0, "-", "finance_bert_for_token_classifier"], [172, 0, 0, "-", "finance_ner"], [174, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[171, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[171, 2, 1, "", "loadSavedModel"], [171, 2, 1, "", "loadSavedModelOpenSource"], [171, 4, 1, "", "name"], [171, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[172, 1, 1, "", "FinanceNerApproach"], [172, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[172, 2, 1, "", "loadSavedModel"], [172, 4, 1, "", "name"], [172, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[174, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[174, 2, 1, "", "load"], [174, 4, 1, "", "name"], [174, 2, 1, "", "pretrained"]], "sparknlp_jsl.functions": [[175, 6, 1, "", "profile"], [175, 6, 1, "", "profileESRDV21Y19"], [175, 6, 1, "", "profileRxHCCV05Y20"], [175, 6, 1, "", "profileRxHCCV05Y21"], [175, 6, 1, "", "profileRxHCCV05Y22"], [175, 6, 1, "", "profileRxHCCV05Y23"], [175, 6, 1, "", "profileRxHCCV08Y22"], [175, 6, 1, "", "profileRxHCCV08Y23"], [175, 6, 1, "", "profileV22"], [175, 6, 1, "", "profileV22Y17"], [175, 6, 1, "", "profileV22Y18"], [175, 6, 1, "", "profileV22Y19"], [175, 6, 1, "", "profileV22Y20"], [175, 6, 1, "", "profileV22Y21"], [175, 6, 1, "", "profileV22Y22"], [175, 6, 1, "", "profileV23"], [175, 6, 1, "", "profileV23Y18"], [175, 6, 1, "", "profileV23Y19"], [175, 6, 1, "", "profileV24"], [175, 6, 1, "", "profileV24Y19"], [175, 6, 1, "", "profileV24Y20"], [175, 6, 1, "", "profileV24Y21"], [175, 6, 1, "", "profileV24Y22"], [175, 6, 1, "", "profileV28"], [175, 6, 1, "", "profileV28Y24"]], "sparknlp_jsl.internal": [[177, 6, 1, "", "CustomLabels"], [177, 6, 1, "", "EntityWeights"], [177, 6, 1, "", "RelationalCategories"], [177, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[183, 0, 0, "-", "chunk_classification"], [188, 0, 0, "-", "graph"], [193, 0, 0, "-", "sequence_classification"], [198, 0, 0, "-", "sequence_generation"], [204, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[179, 0, 0, "-", "assertion"], [182, 0, 0, "-", "deid"], [186, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[178, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[178, 1, 1, "", "AssertionDLApproach"], [178, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[178, 4, 1, "", "name"], [178, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[180, 0, 0, "-", "deIdentification"], [181, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[180, 1, 1, "", "DeIdentification"], [180, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[180, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[180, 4, 1, "", "name"], [180, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[181, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[181, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[184, 0, 0, "-", "chunkmapper"], [185, 0, 0, "-", "docmapper"], [187, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[184, 1, 1, "", "ChunkMapperApproach"], [184, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[184, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[184, 4, 1, "", "name"], [184, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[185, 1, 1, "", "DocMapperApproach"], [185, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[185, 4, 1, "", "dictionary"], [185, 4, 1, "", "inputAnnotatorTypes"], [185, 4, 1, "", "name"], [185, 4, 1, "", "outputAnnotatorType"], [185, 2, 1, "", "setDictionary"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[185, 4, 1, "", "inputAnnotatorTypes"], [185, 4, 1, "", "name"], [185, 4, 1, "", "outputAnnotatorType"], [185, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[187, 1, 1, "", "SentenceEntityResolverApproach"], [187, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[187, 4, 1, "", "name"], [187, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[189, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[190, 0, 0, "-", "relation_extraction_dl"], [191, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[190, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[190, 2, 1, "", "loadSavedModel"], [190, 4, 1, "", "name"], [190, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[191, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[191, 2, 1, "", "loadSavedModel"], [191, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification": [[194, 0, 0, "-", "legal_bert_for_sequence_classification"], [195, 0, 0, "-", "legal_classifier_dl"], [196, 0, 0, "-", "legal_document_ml_classifier"], [197, 0, 0, "-", "legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[194, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[194, 2, 1, "", "loadSavedModel"], [194, 2, 1, "", "loadSavedModelOpenSource"], [194, 4, 1, "", "name"], [194, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[195, 1, 1, "", "LegalClassifierDLApproach"], [195, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[195, 4, 1, "", "name"], [195, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[196, 1, 1, "", "LegalDocumentMLClassifierApproach"], [196, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[196, 4, 1, "", "name"], [196, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[197, 1, 1, "", "LegalFewShotClassifierApproach"], [197, 1, 1, "", "LegalFewShotClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach": [[197, 4, 1, "", "name"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel": [[197, 4, 1, "", "name"], [197, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation": [[199, 0, 0, "-", "legal_encoder_decoder"], [200, 0, 0, "-", "legal_qa"], [201, 0, 0, "-", "legal_summarizer"], [202, 0, 0, "-", "legal_text_generator"], [203, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[199, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[199, 4, 1, "", "name"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[200, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[200, 2, 1, "", "loadSavedModel"], [200, 4, 1, "", "name"], [200, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[201, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[201, 2, 1, "", "loadSavedModel"], [201, 4, 1, "", "name"], [201, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[202, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[202, 2, 1, "", "loadSavedModel"], [202, 4, 1, "", "name"], [202, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[203, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.token_classification": [[205, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[206, 0, 0, "-", "legal_bert_for_token_classifier"], [207, 0, 0, "-", "legal_ner"], [208, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[206, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[206, 2, 1, "", "loadSavedModel"], [206, 2, 1, "", "loadSavedModelOpenSource"], [206, 4, 1, "", "name"], [206, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[207, 1, 1, "", "LegalNerApproach"], [207, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[207, 2, 1, "", "loadSavedModel"], [207, 4, 1, "", "name"], [207, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[208, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[208, 2, 1, "", "load"], [208, 4, 1, "", "name"], [208, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[209, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[209, 2, 1, "", "addUidCols"]], "sparknlp_jsl.nlp_test": [[211, 0, 0, "-", "bias"], [213, 0, 0, "-", "noisy_labels"], [217, 0, 0, "-", "robustness"]], "sparknlp_jsl.nlp_test.bias": [[210, 0, 0, "-", "bias_testing"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[210, 1, 1, "", "RuleBasedClassifier"], [210, 6, 1, "", "init_medical_gender_classifier"], [210, 6, 1, "", "test_gender_bias"]], "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier": [[210, 2, 1, "", "transform"]], "sparknlp_jsl.nlp_test.noisy_labels": [[214, 0, 0, "-", "noisy_label_fixing"], [215, 0, 0, "-", "noisy_label_testing"], [216, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[214, 1, 1, "", "InteractiveFix"], [214, 6, 1, "", "add_flag_to_conll"], [214, 6, 1, "", "apply_label_fixes"], [214, 6, 1, "", "conll_reader"], [214, 6, 1, "", "conll_writer"], [214, 6, 1, "", "update_with_model_predictions"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix": [[214, 2, 1, "", "adjust_page_size"], [214, 2, 1, "", "apply_fixes"], [214, 2, 1, "", "create_grid"], [214, 2, 1, "", "display"], [214, 2, 1, "", "empty_grid"], [214, 2, 1, "", "fill_grid"], [214, 2, 1, "", "fix_all"], [214, 2, 1, "", "fix_label"], [214, 2, 1, "", "get_cell_element"], [214, 2, 1, "", "get_central_grid"], [214, 2, 1, "", "get_classes"], [214, 2, 1, "", "get_default_indx"], [214, 2, 1, "", "get_drop_down"], [214, 2, 1, "", "get_drop_down_title"], [214, 2, 1, "", "get_footer"], [214, 2, 1, "", "get_header"], [214, 2, 1, "", "get_page_control_buttons"], [214, 2, 1, "", "get_page_number"], [214, 2, 1, "", "get_sentence"], [214, 2, 1, "", "get_title_html"], [214, 2, 1, "", "next_page"], [214, 2, 1, "", "num_sample_drop_down"], [214, 2, 1, "", "prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[215, 6, 1, "", "calculate_label_error_score"], [215, 6, 1, "", "get_label_quality_scores"], [215, 6, 1, "", "get_unique_entities"], [215, 6, 1, "", "test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[216, 3, 1, "", "stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[218, 0, 0, "-", "robustness_fixing"], [219, 0, 0, "-", "robustness_testing"], [220, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[218, 6, 1, "", "add_context_to_data"], [218, 6, 1, "", "add_contractions"], [218, 6, 1, "", "add_punctuation_to_data"], [218, 6, 1, "", "add_typo_to_sentence"], [218, 6, 1, "", "augment_robustness"], [218, 6, 1, "", "conll_reader"], [218, 6, 1, "", "convert_accent"], [218, 6, 1, "", "create_dataframe"], [218, 6, 1, "", "create_terminology"], [218, 6, 1, "", "filter_by_entity_type"], [218, 6, 1, "", "get_cohyponyms_wordnet"], [218, 6, 1, "", "get_sample"], [218, 6, 1, "", "introduce_typos"], [218, 6, 1, "", "modify_capitalization_lower"], [218, 6, 1, "", "modify_capitalization_title"], [218, 6, 1, "", "modify_capitalization_upper"], [218, 6, 1, "", "strip_punctuation_from_data"], [218, 6, 1, "", "swap_entities_with_terminology"], [218, 6, 1, "", "swap_with_cohyponym"], [218, 6, 1, "", "test_and_augment_robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[219, 6, 1, "", "add_context"], [219, 6, 1, "", "add_contractions"], [219, 6, 1, "", "add_punctuation"], [219, 6, 1, "", "add_typo_to_sentence"], [219, 6, 1, "", "american_to_british"], [219, 6, 1, "", "british_to_american"], [219, 6, 1, "", "calculate_metrics"], [219, 6, 1, "", "conll_sentence_reader"], [219, 6, 1, "", "create_terminology"], [219, 6, 1, "", "get_cohyponyms_wordnet"], [219, 6, 1, "", "introduce_typos"], [219, 6, 1, "", "modify_capitalization"], [219, 6, 1, "", "remove_context_tokens"], [219, 6, 1, "", "remove_contraction_tokens"], [219, 6, 1, "", "remove_punctuation_tokens"], [219, 6, 1, "", "run_test"], [219, 6, 1, "", "strip_punctuation"], [219, 6, 1, "", "swap_named_entities_from_terminology"], [219, 6, 1, "", "swap_with_cohyponym"], [219, 6, 1, "", "test_robustness"]], "sparknlp_jsl.nlp_test.robustness.utils": [[220, 6, 1, "", "calculate_proportion"], [220, 6, 1, "", "get_augmentation_proportions"], [220, 6, 1, "", "suggest_perturbations"]], "sparknlp_jsl.pretrained": [[221, 1, 1, "", "InternalResourceDownloader"], [221, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[221, 2, 1, "", "downloadModel"], [221, 2, 1, "", "downloadModelDirectly"], [221, 2, 1, "", "returnPrivateModels"], [221, 2, 1, "", "returnPrivatePipelines"], [221, 2, 1, "", "showAvailableAnnotators"], [221, 2, 1, "", "showPrivateModels"], [221, 2, 1, "", "showPrivatePipelines"], [221, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[222, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[222, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[223, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[223, 2, 1, "", "toDocumentsColumns"], [223, 2, 1, "", "toDocumentsColumnsWithId"]], "sparknlp_jsl.training": [[224, 1, 1, "", "AnnotationToolJsonReader"], [224, 1, 1, "", "CantemistReader"], [224, 1, 1, "", "CodiEspReader"], [224, 1, 1, "", "REDatasetHelper"], [224, 1, 1, "", "SynonymAugmentationUMLS"], [224, 3, 1, "", "tf_graph"], [224, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[224, 2, 1, "", "generateAssertionTrainSet"], [224, 2, 1, "", "generateConll"], [224, 2, 1, "", "generatePlainAssertionTrainSet"], [224, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[224, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[224, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.REDatasetHelper": [[224, 2, 1, "", "create_annotation_column"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[224, 2, 1, "", "augmentCsv"], [224, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.training_log_parser": [[225, 1, 1, "", "assertion_log_parser"], [225, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[225, 2, 1, "", "get_best_f1_scores"], [225, 2, 1, "", "get_charts"], [225, 2, 1, "", "loss_plot"], [225, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[225, 2, 1, "", "evaluate"], [225, 2, 1, "", "evaluate_conll_file"], [225, 2, 1, "", "get_best_f1_scores"], [225, 2, 1, "", "get_charts"], [225, 2, 1, "", "loss_plot"], [225, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.transpiler": [[226, 0, 0, "-", "builder"], [227, 0, 0, "-", "class_names"], [228, 0, 0, "-", "converter"], [229, 0, 0, "-", "externalSources"], [231, 0, 0, "-", "nlu_2_python"], [232, 0, 0, "-", "python_2_scala"], [233, 0, 0, "-", "source_loader"], [234, 0, 0, "-", "uploader"]], "sparknlp_jsl.transpiler.builder": [[226, 6, 1, "", "build_python_code"], [226, 6, 1, "", "build_scala_code"], [226, 6, 1, "", "compile_scala_code"], [226, 6, 1, "", "prepare_python_code"]], "sparknlp_jsl.transpiler.class_names": [[227, 1, 1, "", "ClassNames"]], "sparknlp_jsl.transpiler.class_names.ClassNames": [[227, 4, 1, "", "classes"], [227, 4, 1, "", "internal_classes"], [227, 4, 1, "", "openSource_classes"]], "sparknlp_jsl.transpiler.converter": [[228, 6, 1, "", "run_converter"]], "sparknlp_jsl.transpiler.nlu_2_python": [[231, 6, 1, "", "bucket"], [231, 6, 1, "", "convert_nlu_component_to_python"], [231, 6, 1, "", "is_component_finance"], [231, 6, 1, "", "is_component_legal"], [231, 6, 1, "", "is_component_medical"], [231, 6, 1, "", "is_component_ocr"], [231, 6, 1, "", "is_component_open_source"], [231, 6, 1, "", "is_component_pretrained"], [231, 3, 1, "", "medical_annotators_set"], [231, 6, 1, "", "nlu_component_to_spark_nlp_code"], [231, 3, 1, "", "open_source_annotator_set_final"], [231, 6, 1, "", "starts_with_finance"], [231, 6, 1, "", "starts_with_legal"], [231, 6, 1, "", "starts_with_medical"], [231, 6, 1, "", "to_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[232, 6, 1, "", "anonymize_script"], [232, 6, 1, "", "break_line_after_backslash"], [232, 6, 1, "", "convert"], [232, 6, 1, "", "convert_class_name"], [232, 6, 1, "", "convert_python_dict_to_scala_script"], [232, 6, 1, "", "find_key_values"], [232, 6, 1, "", "get_data_dict"], [232, 6, 1, "", "get_import_section"], [232, 6, 1, "", "prepare_scala_code"], [232, 6, 1, "", "remove_blank_lines"], [232, 6, 1, "", "restore_sensitive_values"], [232, 6, 1, "", "run_transpiler"]], "sparknlp_jsl.transpiler.source_loader": [[233, 6, 1, "", "get_python_code_from_md"], [233, 6, 1, "", "get_scala_code_from_md"], [233, 6, 1, "", "load_file_as_dict"], [233, 6, 1, "", "process_python_code"], [233, 6, 1, "", "update_md_file"], [233, 6, 1, "", "update_md_file_for_working_scala_code"]], "sparknlp_jsl.transpiler.uploader": [[234, 6, 1, "", "apply_method_to_all_md_files"], [234, 3, 1, "", "generated_code_failed"], [234, 3, 1, "", "generated_code_works"], [234, 3, 1, "", "python_code_failed"], [234, 3, 1, "", "results_list"], [234, 3, 1, "", "scala_code_works"], [234, 3, 1, "", "scala_generated"], [234, 6, 1, "", "upload_scala_code_in_md_file"]], "sparknlp_jsl.updateModels": [[235, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[235, 2, 1, "", "updateCacheModels"], [235, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[236, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[237, 0, 0, "-", "alab_utils"], [238, 0, 0, "-", "conll_parse"], [239, 0, 0, "-", "deidentification_utils"], [240, 0, 0, "-", "imports"], [242, 0, 0, "-", "java_helper"], [243, 0, 0, "-", "licensed_annotator_type"], [244, 0, 0, "-", "log_parse"], [245, 0, 0, "-", "ner_utils"], [246, 0, 0, "-", "ocr_nlp_processor"], [247, 0, 0, "-", "ocr_utils"], [248, 0, 0, "-", "risk_adjustment_utils"], [249, 0, 0, "-", "run_transpiled_code"], [250, 0, 0, "-", "training_log_parser_utils"]], "sparknlp_jsl.utils.alab_utils": [[237, 3, 1, "", "document_assembler"], [237, 3, 1, "", "empty_df"], [237, 6, 1, "", "get_doc_assembler"], [237, 6, 1, "", "get_empty_df"], [237, 6, 1, "", "get_ner_df"], [237, 6, 1, "", "get_ner_sentence_borders"], [237, 6, 1, "", "get_nlp_pos_pipeline"], [237, 6, 1, "", "get_nlp_token_pipeline"], [237, 6, 1, "", "get_pos"], [237, 6, 1, "", "get_regex_tokenizer"], [237, 6, 1, "", "get_regular_tokenizer"], [237, 6, 1, "", "get_rel_df"], [237, 6, 1, "", "get_sent_detector"], [237, 6, 1, "", "get_sentence_pipeline"], [237, 6, 1, "", "get_single_task_conll"], [237, 6, 1, "", "get_token_df"], [237, 3, 1, "", "nlp_pos_pipeline"], [237, 3, 1, "", "nlp_token_pipeline"], [237, 3, 1, "", "pos"], [237, 3, 1, "", "pos_pipeline_initialized"], [237, 6, 1, "", "read_conll"], [237, 3, 1, "", "regex_tokenizer"], [237, 3, 1, "", "regular_tokenizer"], [237, 3, 1, "", "sentence_detector"], [237, 6, 1, "", "strip_json_entities"], [237, 3, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_utils": [[239, 6, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[240, 6, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.java_helper": [[242, 6, 1, "", "parse_str_to_dict"]], "sparknlp_jsl.utils.licensed_annotator_type": [[243, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[243, 4, 1, "", "ASSERTION"], [243, 4, 1, "", "DISAMBIGUATION"], [243, 4, 1, "", "FEATURE_VECTOR"], [243, 4, 1, "", "KEYWORD"], [243, 4, 1, "", "SELECTOR"], [243, 4, 1, "", "SQL"]], "sparknlp_jsl.utils.ner_utils": [[245, 6, 1, "", "evaluate"], [245, 6, 1, "", "evaluate_conll_file"], [245, 6, 1, "", "get_charts"], [245, 6, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[246, 3, 1, "", "colors"], [246, 6, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[247, 3, 1, "", "colors"], [247, 3, 1, "", "colors_rgb"], [247, 6, 1, "", "draw_boxes_on_image_handwritten_region"], [247, 6, 1, "", "get_handwritten_regions"], [247, 3, 1, "", "label2color"], [247, 3, 1, "", "label2rgb"], [247, 3, 1, "", "pretrained_model"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[248, 1, 1, "", "RiskAdjustmentUtil"]], "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil": [[248, 2, 1, "", "HCC_from_ICD"], [248, 2, 1, "", "HCC_labels"], [248, 2, 1, "", "diff_between_HCCs"]], "sparknlp_jsl.utils.run_transpiled_code": [[249, 1, 1, "", "RunTranspiledCode"]], "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode": [[249, 2, 1, "", "build_scala_code"], [249, 2, 1, "", "compile_scala_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[250, 6, 1, "", "aggregate_entities"], [250, 6, 1, "", "calc_metrics"], [250, 6, 1, "", "count_chunks"], [250, 6, 1, "", "get_result"], [250, 6, 1, "", "is_chunk_end"], [250, 6, 1, "", "is_chunk_start"], [250, 6, 1, "", "split_tag"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 134, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 91, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 134, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 175, 177, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 91, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 134, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 150, 151, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 178, 180, 181, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 214, 221, 222, 223, 224, 225, 227, 235, 243, 248, 249], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 46, 56, 62, 67, 71, 75, 83, 85, 90, 92, 93, 96, 97, 106, 108, 111, 116, 118, 123, 129, 133, 139, 145, 148, 152, 155, 163, 168, 173, 176, 179, 182, 186, 189, 193, 198, 205, 211, 213, 217, 230, 241], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 89, 90], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 92, 149, 154, 158, 170, 176, 183, 188, 192, 204, 212, 230], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 175, 176, 177, 210, 214, 215, 218, 219, 220, 221, 226, 228, 231, 232, 233, 234, 236, 237, 239, 240, 242, 245, 246, 247, 250], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 176, 224, 231, 234, 237, 246, 247], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 92, 176], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "annotation_merg": 42, "assert": [43, 44, 45, 46, 144, 145, 178, 179], "assertiondl": [43, 144, 178], "assertion_chunk_convert": 44, "assertion_dl_reg": 45, "chunk2_token": 47, "chunker": [48, 49, 50, 51, 52, 53, 54, 55, 56], "assertion_filter": 48, "chunk_convert": 49, "chunk_key_phrase_extract": 50, "chunk_sentence_splitt": 51, "chunker_filter": 52, "chunkmapp": [53, 150, 184], "chunkmapper_filter": 54, "docmapp": [55, 151, 185], "classif": [57, 58, 59, 60, 61, 62, 63, 64, 65], "document_log_classifi": 57, "document_ml_classifi": 58, "few_shot_classifi": 59, "generic_log_reg_classifi": 60, "generic_svm_classifi": 61, "medical_bert_for_sequence_classif": 63, "medical_bert_for_token_classifi": 64, "medical_distilbert_for_sequence_classif": 65, "context": [66, 67], "contextual_pars": 66, "deid": [68, 69, 70, 71, 72, 73, 74, 146, 147, 148, 180, 181, 182], "deidentif": [68, 146, 180], "paramet": [68, 91, 130, 131, 239], "deidentication_param": 69, "doccument_hashcod": 70, "name_obfusc": 72, "reidentif": 73, "replac": 74, "disambigu": [75, 76], "ner_disambigu": 76, "doc2_chunk_intern": 77, "document_filterer_by_classifi": 78, "embed": [79, 80, 81, 82, 83], "average_embed": 79, "bert_sentence_embed": 80, "entity_chunk_embed": 81, "extractive_summar": 82, "er": [84, 85], "entity_ruler_intern": 84, "feature_assembl": 86, "filtering_param": 87, "flatten": 88, "handle_exception_param": 91, "matcher": [93, 94], "text_matcher_intern": 94, "merg": [95, 96], "chunk_merg": 95, "ner": [97, 98, 99, 100, 101, 102, 103, 171, 172, 173, 174, 205, 206, 207, 208], "iob_tagg": 98, "medical_n": 99, "ner_chunk": 100, "ner_converter_intern": 101, "ner_template_rend": 102, "zero_shot_n": [103, 174, 208], "normal": [104, 105, 106], "date_norm": 104, "drug_norm": 105, "qa": [107, 108, 109, 110], "beam_search_param": 107, "medical_qa": 109, "qa_ner_gener": [110, 169, 203], "re": [111, 112, 113, 114, 115], "relation_extract": [112, 155, 156, 157, 189, 190, 191], "relation_extraction_dl": [113, 156, 190], "relation_ner_chunk_filt": 114, "zero_shot_relation_extract": [115, 157, 191], "regex": [116, 117], "regex_match": 117, "resolut": [118, 119, 120, 150, 151, 152, 153, 184, 185, 186, 187], "resolver_merg": 119, "sentence_entity_resolv": [120, 153, 187], "resolution2_chunk": 121, "router": 122, "seq2seq": [123, 124, 125, 126, 127], "medical_encoder_decod": 124, "medical_summar": 125, "medical_text_gener": 126, "text2sql": 127, "source_tracking_metadata_param": 128, "splitter": [129, 130], "internal_document_splitt": 130, "tf_graph_build": 131, "white_black_list_param": 132, "window": [133, 134], "windowed_sent": 134, "base": 135, "common": [136, 137, 138, 139], "annotator_approach_intern": 136, "annotator_model_intern": 137, "annotator_properties_intern": 138, "compat": 140, "custom_transform": 141, "deidentification_modul": 142, "eval": 143, "financ": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], "chunk_classif": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "document_hashcod": [147, 181], "graph": [154, 155, 156, 157, 188, 189, 190, 191], "sequence_classif": [159, 160, 161, 162, 163, 193, 194, 195, 196, 197], "finance_bert_for_sequence_classif": 159, "finance_classifier_dl": 160, "finance_document_ml_classifi": 161, "finance_few_shot_classifi": 162, "sequence_gener": [164, 165, 166, 167, 168, 169, 198, 199, 200, 201, 202, 203], "finance_encoder_decod": 164, "finance_qa": 165, "finance_summar": 166, "finance_text_gener": 167, "token_classif": [170, 171, 172, 173, 174, 204, 205, 206, 207, 208], "finance_bert_for_token_classifi": 171, "finance_n": 172, "intern": 177, "legal": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "legal_bert_for_sequence_classif": 194, "legal_classifier_dl": 195, "legal_document_ml_classifi": 196, "legal_few_shot_classifi": 197, "legal_encoder_decod": 199, "legal_qa": 200, "legal_summar": 201, "legal_text_gener": 202, "legal_bert_for_token_classifi": 206, "legal_n": 207, "modeltrac": 209, "nlp_test": [210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "bia": [210, 211], "bias_test": 210, "noisy_label": [213, 214, 215, 216], "noisy_label_fix": 214, "noisy_label_test": 215, "util": [216, 220, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "robust": [217, 218, 219, 220], "robustness_fix": 218, "robustness_test": 219, "pretrain": 221, "structured_deidentif": 222, "text_to_documents_column": 223, "train": 224, "training_log_pars": 225, "transpil": [226, 227, 228, 229, 230, 231, 232, 233, 234], "builder": 226, "class_nam": 227, "convert": 228, "externalsourc": 229, "nlu_2_python": 231, "python_2_scala": 232, "source_load": 233, "upload": 234, "updatemodel": 235, "alab_util": 237, "conll_pars": 238, "deidentification_util": 239, "return": 239, "import": 240, "java_help": 242, "licensed_annotator_typ": 243, "log_pars": 244, "ner_util": 245, "ocr_nlp_processor": 246, "ocr_util": 247, "risk_adjustment_util": 248, "run_transpiled_cod": 249, "training_log_parser_util": 250, "api": 251, "refer": 251}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [91, "module-contents"], [94, "module-contents"], [95, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [134, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [91, "classes"], [94, "classes"], [95, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [134, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [178, "classes"], [180, "classes"], [181, "classes"], [184, "classes"], [185, "classes"], [187, "classes"], [190, "classes"], [191, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [214, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [227, "classes"], [235, "classes"], [243, "classes"], [248, "classes"], [249, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [46, "submodules"], [56, "submodules"], [62, "submodules"], [67, "submodules"], [71, "submodules"], [75, "submodules"], [83, "submodules"], [85, "submodules"], [90, "submodules"], [92, "submodules"], [93, "submodules"], [96, "submodules"], [97, "submodules"], [106, "submodules"], [108, "submodules"], [111, "submodules"], [116, "submodules"], [118, "submodules"], [123, "submodules"], [129, "submodules"], [133, "submodules"], [139, "submodules"], [145, "submodules"], [148, "submodules"], [152, "submodules"], [155, "submodules"], [163, "submodules"], [168, "submodules"], [173, "submodules"], [176, "submodules"], [179, "submodules"], [182, "submodules"], [186, "submodules"], [189, "submodules"], [193, "submodules"], [198, "submodules"], [205, "submodules"], [211, "submodules"], [213, "submodules"], [217, "submodules"], [230, "submodules"], [241, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [92, "subpackages"], [149, "subpackages"], [154, "subpackages"], [158, "subpackages"], [170, "subpackages"], [176, "subpackages"], [183, "subpackages"], [188, "subpackages"], [192, "subpackages"], [204, "subpackages"], [212, "subpackages"], [230, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [210, "functions"], [214, "functions"], [215, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [221, "functions"], [226, "functions"], [228, "functions"], [231, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [236, "functions"], [237, "functions"], [239, "functions"], [240, "functions"], [242, "functions"], [245, "functions"], [246, "functions"], [247, "functions"], [250, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [176, "attributes"], [224, "attributes"], [231, "attributes"], [234, "attributes"], [237, "attributes"], [246, "attributes"], [247, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [92, "package-contents"], [176, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[59, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[61, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[62, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[64, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[65, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[66, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[67, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[68, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Parameters": [[68, "parameters"], [91, "parameters"], [130, "parameters"], [130, "id13"], [131, "parameters"], [131, "id1"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[69, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[70, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[71, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[72, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[73, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[74, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[75, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[76, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[77, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[78, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[79, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[80, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[81, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[82, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "sparknlp_jsl.annotator.embeddings": [[83, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[84, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "sparknlp_jsl.annotator.er": [[85, "module-sparknlp_jsl.annotator.er"]], "sparknlp_jsl.annotator.feature_assembler": [[86, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.filtering_params": [[87, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.flattener": [[88, "module-sparknlp_jsl.annotator.flattener"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[89, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[90, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator.handle_exception_params": [[91, "module-sparknlp_jsl.annotator.handle_exception_params"]], "sparknlp_jsl.annotator": [[92, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.matcher": [[93, "module-sparknlp_jsl.annotator.matcher"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[94, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[95, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[96, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[97, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[98, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[99, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[100, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[101, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[102, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[103, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[104, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[105, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[106, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[107, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[108, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[109, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[110, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[111, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[112, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[113, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[114, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[115, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.regex": [[116, "module-sparknlp_jsl.annotator.regex"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[117, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "sparknlp_jsl.annotator.resolution": [[118, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[119, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[120, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[121, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[122, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[123, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[124, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[125, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[126, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[127, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[128, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.splitter": [[129, "module-sparknlp_jsl.annotator.splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[130, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "sparknlp_jsl.annotator.tf_graph_builder": [[131, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.white_black_list_params": [[132, "module-sparknlp_jsl.annotator.white_black_list_params"]], "sparknlp_jsl.annotator.windowed": [[133, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[134, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[135, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[136, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[137, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[138, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[139, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[140, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[141, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[142, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[143, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[144, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[145, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[146, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[147, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[148, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[149, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[150, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[151, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[152, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[153, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[154, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[155, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[156, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[157, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[158, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[159, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[160, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[161, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[162, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[163, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[164, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[165, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[166, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[167, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[168, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[169, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[170, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[171, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[172, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[173, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[174, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[175, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[176, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[177, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[178, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[179, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[180, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[181, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[182, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[183, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[184, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[185, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[186, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[187, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[188, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[189, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[190, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[191, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[192, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[193, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[194, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[195, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[196, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[197, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[198, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[199, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[200, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[201, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[202, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[203, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[204, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[205, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[206, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[207, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[208, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[209, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[210, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "sparknlp_jsl.nlp_test.bias": [[211, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[212, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[213, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[214, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[215, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[216, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "sparknlp_jsl.nlp_test.robustness": [[217, "module-sparknlp_jsl.nlp_test.robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[218, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[219, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "sparknlp_jsl.nlp_test.robustness.utils": [[220, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "sparknlp_jsl.pretrained": [[221, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[222, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[223, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[224, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[225, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.transpiler.builder": [[226, "module-sparknlp_jsl.transpiler.builder"]], "sparknlp_jsl.transpiler.class_names": [[227, "module-sparknlp_jsl.transpiler.class_names"]], "sparknlp_jsl.transpiler.converter": [[228, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalSources": [[229, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[230, "module-sparknlp_jsl.transpiler"]], "sparknlp_jsl.transpiler.nlu_2_python": [[231, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[232, "module-sparknlp_jsl.transpiler.python_2_scala"]], "sparknlp_jsl.transpiler.source_loader": [[233, "module-sparknlp_jsl.transpiler.source_loader"]], "sparknlp_jsl.transpiler.uploader": [[234, "module-sparknlp_jsl.transpiler.uploader"]], "sparknlp_jsl.updateModels": [[235, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[236, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[237, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[238, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[239, "module-sparknlp_jsl.utils.deidentification_utils"]], "Parameters:": [[239, "parameters"]], "Returns:": [[239, "returns"]], "sparknlp_jsl.utils.imports": [[240, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[241, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.java_helper": [[242, "module-sparknlp_jsl.utils.java_helper"]], "sparknlp_jsl.utils.licensed_annotator_type": [[243, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[244, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[245, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[246, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[247, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[248, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "sparknlp_jsl.utils.run_transpiled_code": [[249, "module-sparknlp_jsl.utils.run_transpiled_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[250, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "API Reference": [[251, "api-reference"]], "Modules": [[251, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [46, "module-sparknlp_jsl.annotator.assertion"], [47, "module-sparknlp_jsl.annotator.chunk2_token"], [48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [55, "module-sparknlp_jsl.annotator.chunker.docmapper"], [56, "module-sparknlp_jsl.annotator.chunker"], [57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [59, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"], [60, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [61, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [62, "module-sparknlp_jsl.annotator.classification"], [63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [64, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [65, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [66, "module-sparknlp_jsl.annotator.context.contextual_parser"], [67, "module-sparknlp_jsl.annotator.context"], [68, "module-sparknlp_jsl.annotator.deid.deIdentification"], [69, "module-sparknlp_jsl.annotator.deid.deidentication_params"], [70, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [71, "module-sparknlp_jsl.annotator.deid"], [72, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [73, "module-sparknlp_jsl.annotator.deid.reIdentification"], [74, "module-sparknlp_jsl.annotator.deid.replacer"], [75, "module-sparknlp_jsl.annotator.disambiguation"], [76, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [77, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [78, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"], [79, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [80, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [81, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [82, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"], [83, "module-sparknlp_jsl.annotator.embeddings"], [84, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"], [85, "module-sparknlp_jsl.annotator.er"], [86, "module-sparknlp_jsl.annotator.feature_assembler"], [87, "module-sparknlp_jsl.annotator.filtering_params"], [88, "module-sparknlp_jsl.annotator.flattener"], [89, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [90, "module-sparknlp_jsl.annotator.generic_classifier"], [91, "module-sparknlp_jsl.annotator.handle_exception_params"], [92, "module-sparknlp_jsl.annotator"], [93, "module-sparknlp_jsl.annotator.matcher"], [94, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"], [95, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [96, "module-sparknlp_jsl.annotator.merge"], [97, "module-sparknlp_jsl.annotator.ner"], [98, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [99, "module-sparknlp_jsl.annotator.ner.medical_ner"], [100, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [101, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [102, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [103, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [104, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [105, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [106, "module-sparknlp_jsl.annotator.normalizer"], [107, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [108, "module-sparknlp_jsl.annotator.qa"], [109, "module-sparknlp_jsl.annotator.qa.medical_qa"], [110, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [111, "module-sparknlp_jsl.annotator.re"], [112, "module-sparknlp_jsl.annotator.re.relation_extraction"], [113, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [114, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [115, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [116, "module-sparknlp_jsl.annotator.regex"], [117, "module-sparknlp_jsl.annotator.regex.regex_matcher"], [118, "module-sparknlp_jsl.annotator.resolution"], [119, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [120, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [121, "module-sparknlp_jsl.annotator.resolution2_chunk"], [122, "module-sparknlp_jsl.annotator.router"], [123, "module-sparknlp_jsl.annotator.seq2seq"], [124, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [125, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [126, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [127, "module-sparknlp_jsl.annotator.seq2seq.text2sql"], [128, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [129, "module-sparknlp_jsl.annotator.splitter"], [130, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"], [131, "module-sparknlp_jsl.annotator.tf_graph_builder"], [132, "module-sparknlp_jsl.annotator.white_black_list_params"], [133, "module-sparknlp_jsl.annotator.windowed"], [134, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [135, "module-sparknlp_jsl.base"], [136, "module-sparknlp_jsl.common.annotator_approach_internal"], [137, "module-sparknlp_jsl.common.annotator_model_internal"], [138, "module-sparknlp_jsl.common.annotator_properties_internal"], [139, "module-sparknlp_jsl.common"], [140, "module-sparknlp_jsl.compatibility"], [141, "module-sparknlp_jsl.custom_transformer"], [142, "module-sparknlp_jsl.deidentification_module"], [143, "module-sparknlp_jsl.eval"], [144, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [145, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [146, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [147, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [148, "module-sparknlp_jsl.finance.chunk_classification.deid"], [149, "module-sparknlp_jsl.finance.chunk_classification"], [150, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [151, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [152, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [153, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [154, "module-sparknlp_jsl.finance.graph"], [155, "module-sparknlp_jsl.finance.graph.relation_extraction"], [156, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [157, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [158, "module-sparknlp_jsl.finance"], [159, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [160, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [161, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [162, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"], [163, "module-sparknlp_jsl.finance.sequence_classification"], [164, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [165, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [166, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [167, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [168, "module-sparknlp_jsl.finance.sequence_generation"], [169, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [170, "module-sparknlp_jsl.finance.token_classification"], [171, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [172, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [173, "module-sparknlp_jsl.finance.token_classification.ner"], [174, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [175, "module-sparknlp_jsl.functions"], [176, "module-sparknlp_jsl"], [177, "module-sparknlp_jsl.internal"], [178, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [179, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [180, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [181, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [182, "module-sparknlp_jsl.legal.chunk_classification.deid"], [183, "module-sparknlp_jsl.legal.chunk_classification"], [184, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [185, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [186, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [187, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [188, "module-sparknlp_jsl.legal.graph"], [189, "module-sparknlp_jsl.legal.graph.relation_extraction"], [190, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [191, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [192, "module-sparknlp_jsl.legal"], [193, "module-sparknlp_jsl.legal.sequence_classification"], [194, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [195, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [196, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [197, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"], [198, "module-sparknlp_jsl.legal.sequence_generation"], [199, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [200, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [201, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [202, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [203, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [204, "module-sparknlp_jsl.legal.token_classification"], [205, "module-sparknlp_jsl.legal.token_classification.ner"], [206, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [207, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [208, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [209, "module-sparknlp_jsl.modelTracer"], [210, "module-sparknlp_jsl.nlp_test.bias.bias_testing"], [211, "module-sparknlp_jsl.nlp_test.bias"], [212, "module-sparknlp_jsl.nlp_test"], [213, "module-sparknlp_jsl.nlp_test.noisy_labels"], [214, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"], [215, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"], [216, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"], [217, "module-sparknlp_jsl.nlp_test.robustness"], [218, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"], [219, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"], [220, "module-sparknlp_jsl.nlp_test.robustness.utils"], [221, "module-sparknlp_jsl.pretrained"], [222, "module-sparknlp_jsl.structured_deidentification"], [223, "module-sparknlp_jsl.text_to_documents_columns"], [224, "module-sparknlp_jsl.training"], [225, "module-sparknlp_jsl.training_log_parser"], [226, "module-sparknlp_jsl.transpiler.builder"], [227, "module-sparknlp_jsl.transpiler.class_names"], [228, "module-sparknlp_jsl.transpiler.converter"], [229, "module-sparknlp_jsl.transpiler.externalSources"], [230, "module-sparknlp_jsl.transpiler"], [231, "module-sparknlp_jsl.transpiler.nlu_2_python"], [232, "module-sparknlp_jsl.transpiler.python_2_scala"], [233, "module-sparknlp_jsl.transpiler.source_loader"], [234, "module-sparknlp_jsl.transpiler.uploader"], [235, "module-sparknlp_jsl.updateModels"], [236, "module-sparknlp_jsl.util"], [237, "module-sparknlp_jsl.utils.alab_utils"], [238, "module-sparknlp_jsl.utils.conll_parse"], [239, "module-sparknlp_jsl.utils.deidentification_utils"], [240, "module-sparknlp_jsl.utils.imports"], [241, "module-sparknlp_jsl.utils"], [242, "module-sparknlp_jsl.utils.java_helper"], [243, "module-sparknlp_jsl.utils.licensed_annotator_type"], [244, "module-sparknlp_jsl.utils.log_parse"], [245, "module-sparknlp_jsl.utils.ner_utils"], [246, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [247, "module-sparknlp_jsl.utils.ocr_utils"], [248, "module-sparknlp_jsl.utils.risk_adjustment_utils"], [249, "module-sparknlp_jsl.utils.run_transpiled_code"], [250, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "fewshotclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.FewShotClassifierTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "logregclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "svmclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "review_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputannotatortypes (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "outputannotatortype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "setinputcols() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "entityassertioncasesensitive (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "getentityassertion() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getEntityAssertion"]], "getreplacelabels() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getReplaceLabels"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [144, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [178, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputannotatortype (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [144, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [178, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setentityassertion() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertion"]], "setentityassertioncasesensitive() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setreplacelabels() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setReplaceLabels"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "inputannotatortypes (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "name (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "setchunkbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setoutputcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparams() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "inputannotatortypes (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "label (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "outputannotatortype (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "pretrained() (assertionlogregmodel static method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "inputannotatortypes (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "name (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "outputannotatortype (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "inputannotatortypes (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "name (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "outputannotatortype (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "setcriteria() (assertionfilterer method)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "inputannotatortypes (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "name (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "outputannotatortype (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "name (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "pretrained() (chunkkeyphraseextraction static method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "inputannotatortypes (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "insertchunk (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "outputannotatortype (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "setdefaultentity() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "entitiesconfidence (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.entitiesConfidence"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "entitiesconfidenceresourceasjsonstring (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResourceAsJsonString"]], "inputannotatortypes (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "name (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "outputannotatortype (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "setentitiesconfidence() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresourceasjsonstring() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResourceAsJsonString"]], "setfilterentity() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "inputannotatortypes (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "lowercase (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [150, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [184, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [150, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [184, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "outputannotatortype (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "pretrained() (chunkmappermodel static method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [150, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [184, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setlowercase() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setrel() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "name (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "outputannotatortype (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "returncriteria (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "dictionary (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "inputannotatortypes (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "name (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "outputannotatortype (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "pretrained() (docmappermodel static method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "setdictionary() (docmapperapproach method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "labelcol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (documentlogregclassifiermodel static method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "fitintercept (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "labelcol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "maxiter (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "pretrained() (documentmlclassifiermodel static method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setlabelcol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setmaxiter() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "settol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "fewshotclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach"]], "fewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel"]], "inputannotatortypes (fewshotclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputAnnotatorTypes"]], "name (fewshotclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.name"]], "name (fewshotclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.name"]], "outputannotatortype (fewshotclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputAnnotatorType"]], "pretrained() (fewshotclassifiermodel static method)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[59, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "name (genericlogregclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (genericlogregclassifiermodel static method)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "name (genericsvmclassifierapproach attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "pretrained() (genericsvmclassifiermodel static method)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[61, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[62, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicalbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "pretrained() (medicalbertfortokenclassifier static method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[64, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[65, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "inputannotatortypes (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "jsonpath (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "name (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.name"]], "optionalcontextrules (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "outputannotatortype (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "pretrained() (contextualparsermodel static method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.pretrained"]], "setcasesensitive() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[66, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[67, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "combineregexpatterns (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.combineRegexPatterns"]], "entitycasingmodespath (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "getregexentities() (deidentificationmodel method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "inputannotatortypes (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "name (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [146, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [180, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [146, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [180, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatereffile (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "outputannotatortype (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "pretrained() (deidentificationmodel static method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [146, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [180, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexpatternsdictionary (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "regexpatternsdictionaryasjsonstring (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"]], "selectiveobfuscationmodespath (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "setcombineregexpatterns() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setCombineRegexPatterns"]], "setentitycasingmodes() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setobfuscatereffile() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setreffileformat() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexpatternsdictionary() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregexpatternsdictionaryasjsonstring() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"]], "setselectiveobfuscationmodes() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "sparknlp_jsl.annotator.deid.deidentification": [[68, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "deidentificationparams (class in sparknlp_jsl.annotator.deid.deidentication_params)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams"]], "ageranges (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRanges"]], "agerangesbyhipaa (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRangesByHipaa"]], "blacklist (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackList"]], "consistentobfuscation (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.consistentObfuscation"]], "dateformats (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateFormats"]], "datetag (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateTag"]], "datetoyear (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateToYear"]], "days (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.days"]], "fixedmasklength (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.fixedMaskLength"]], "genderawareness (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.genderAwareness"]], "getblacklist() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getBlackList"]], "getsamelengthformattedentities() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getSameLengthFormattedEntities"]], "getuseshiftdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getUseShiftDays"]], "ignoreregex (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ignoreRegex"]], "israndomdatedisplacement (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.isRandomDateDisplacement"]], "language (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.language"]], "mappingscolumn (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mappingsColumn"]], "maskingpolicy (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.maskingPolicy"]], "metadatamaskingpolicy (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.metadataMaskingPolicy"]], "minyear (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.minYear"]], "mode (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mode"]], "obfuscatedate (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateDate"]], "obfuscaterefsource (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscationStrategyOnException"]], "outputasdocument (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.outputAsDocument"]], "regexoverride (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.regexOverride"]], "region (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.region"]], "returnentitymappings (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.returnEntityMappings"]], "sameentitythreshold (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameEntityThreshold"]], "samelengthformattedentities (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameLengthFormattedEntities"]], "seed (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.seed"]], "setageranges() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRanges"]], "setagerangesbyhipaa() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRangesByHipaa"]], "setblacklist() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackList"]], "setconsistentobfuscation() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setConsistentObfuscation"]], "setdateformats() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateFormats"]], "setdatetag() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateTag"]], "setdatetoyear() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateToYear"]], "setdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDays"]], "setfixedmasklength() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setFixedMaskLength"]], "setgenderawareness() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGenderAwareness"]], "setignoreregex() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIsRandomDateDisplacement"]], "setlanguage() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setLanguage"]], "setmappingscolumn() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMappingsColumn"]], "setmaskingpolicy() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMetadataMaskingPolicy"]], "setminyear() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMinYear"]], "setmode() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMode"]], "setobfuscatedate() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateDate"]], "setobfuscaterefsource() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateRefSource"]], "setobfuscationstrategyonexception() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setOutputAsDocument"]], "setregexoverride() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegexOverride"]], "setregion() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegion"]], "setreturnentitymappings() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setReturnEntityMappings"]], "setsameentitythreshold() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameLengthFormattedEntities"]], "setseed() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSeed"]], "setunnormalizeddatemode() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUnnormalizedDateMode"]], "setuseshifdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShifDays"]], "setuseshiftdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShiftDays"]], "setzipcodetag() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[69, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "unnormalizeddatemode (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.unnormalizedDateMode"]], "useshifdays (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.useShifDays"]], "zipcodetag (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "inputannotatortypes (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "name (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "outputannotatortype (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "patientidcolumn (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[70, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[71, "module-sparknlp_jsl.annotator.deid"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "genderawareness (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "inputannotatortypes (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "language (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "nameentities (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "outputannotatortype (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "seed (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "setgenderawareness() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setlanguage() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setnameentities() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[72, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "inputannotatortypes (reidentification attribute)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "name (reidentification attribute)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "outputannotatortype (reidentification attribute)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.reidentification": [[73, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "getusereplacement() (replacer method)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "inputannotatortypes (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "name (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "outputannotatortype (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "setusereplacement() (replacer method)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "sparknlp_jsl.annotator.deid.replacer": [[74, "module-sparknlp_jsl.annotator.deid.replacer"]], "usereplacement (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[75, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "outputannotatortype (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "predictionslimit (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[76, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "inputannotatortypes (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "isarray (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[77, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "documentfiltererbyclassifier (class in sparknlp_jsl.annotator.document_filterer_by_classifier)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier"]], "inputannotatortypes (documentfiltererbyclassifier attribute)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputAnnotatorTypes"]], "name (documentfiltererbyclassifier attribute)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.name"]], "outputannotatortype (documentfiltererbyclassifier attribute)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputAnnotatorType"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[78, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "inputannotatortypes (averageembeddings attribute)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "name (averageembeddings attribute)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "outputannotatortype (averageembeddings attribute)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[79, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "load() (bertsentencechunkembeddings static method)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentencechunkembeddings static method)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[80, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "inputannotatortypes (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "outputannotatortype (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "pretrained() (entitychunkembeddings static method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[81, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "extractivesummarization (class in sparknlp_jsl.annotator.embeddings.extractive_summarization)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization"]], "inputannotatortypes (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputAnnotatorTypes"]], "name (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.name"]], "outputannotatortype (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputAnnotatorType"]], "returnsingledocument (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.returnSingleDocument"]], "setreturnsingledocument() (extractivesummarization method)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setReturnSingleDocument"]], "setsimilaritythreshold() (extractivesummarization method)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSimilarityThreshold"]], "setsummarysize() (extractivesummarization method)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSummarySize"]], "similaritythreshold (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.similarityThreshold"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[82, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "summarysize (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.summarySize"]], "sparknlp_jsl.annotator.embeddings": [[83, "module-sparknlp_jsl.annotator.embeddings"]], "entityrulerinternalapproach (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach"]], "entityrulerinternalmodel (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel"]], "alphabet (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.alphabet"]], "database (entityrulerinternalmodel attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.database"]], "inputannotatortypes (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulerinternalmodel attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputAnnotatorTypes"]], "loadstorage() (entityrulerinternalmodel static method)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorage"]], "name (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.name"]], "name (entityrulerinternalmodel attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.name"]], "optionalinputannotatortypes (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulerinternalmodel attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputAnnotatorType"]], "outputannotatortype (entityrulerinternalmodel attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputAnnotatorType"]], "patternsresource (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.patternsResource"]], "pretrained() (entityrulerinternalmodel static method)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.pretrained"]], "sentencematch (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.sentenceMatch"]], "setalphabetresource() (entityrulerinternalapproach method)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setAlphabetResource"]], "setpatternsresource() (entityrulerinternalapproach method)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setPatternsResource"]], "setsentencematch() (entityrulerinternalapproach method)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setSentenceMatch"]], "setusestorage() (entityrulerinternalapproach method)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setUseStorage"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[84, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "usestorage (entityrulerinternalapproach attribute)": [[84, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.useStorage"]], "sparknlp_jsl.annotator.er": [[85, "module-sparknlp_jsl.annotator.er"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "inputannotatortypes (featuresassembler attribute)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "outputannotatortype (featuresassembler attribute)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[86, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[86, "module-sparknlp_jsl.annotator.feature_assembler"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "criteria (filteringparams attribute)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "filtervalue (filteringparams attribute)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setcriteria() (filteringparams method)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setfiltervalue() (filteringparams method)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[87, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "sparknlp_jsl.annotator.filtering_params": [[87, "module-sparknlp_jsl.annotator.filtering_params"]], "flattener (class in sparknlp_jsl.annotator.flattener)": [[88, "sparknlp_jsl.annotator.flattener.Flattener"]], "cleanannotations (flattener attribute)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.cleanAnnotations"]], "flattenexplodedcolumns (flattener attribute)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.flattenExplodedColumns"]], "getinputcols() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.getInputCols"]], "inputcols (flattener attribute)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.inputCols"]], "name (flattener attribute)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.name"]], "orderbycolumn (flattener attribute)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.orderByColumn"]], "orderdescending (flattener attribute)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.orderDescending"]], "setcleanannotations() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setCleanAnnotations"]], "setexplodeselectedfields() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setExplodeSelectedFields"]], "setflattenexplodedcolumns() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setFlattenExplodedColumns"]], "setinputcols() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setInputCols"]], "setorderbycolumn() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setOrderByColumn"]], "setorderdescending() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setOrderDescending"]], "setparams() (flattener method)": [[88, "sparknlp_jsl.annotator.flattener.Flattener.setParams"]], "sparknlp_jsl.annotator.flattener": [[88, "module-sparknlp_jsl.annotator.flattener"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "featurescaling (genericclassifiermodel attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "inputannotatortypes (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "labelcolumn (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputannotatortype (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputlogspath (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericclassifiermodel method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputlogspath() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[89, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[89, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[90, "module-sparknlp_jsl.annotator.generic_classifier"]], "handleexceptionparams (class in sparknlp_jsl.annotator.handle_exception_params)": [[91, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams"]], "doexceptionhandling (handleexceptionparams attribute)": [[91, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.doExceptionHandling"]], "setdoexceptionhandling() (handleexceptionparams method)": [[91, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.setDoExceptionHandling"]], "sparknlp_jsl.annotator.handle_exception_params": [[91, "module-sparknlp_jsl.annotator.handle_exception_params"]], "assertion (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.disambiguation"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.re"]], "regex (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.regex"]], "resolution (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator": [[92, "module-sparknlp_jsl.annotator"]], "splitter (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.splitter"]], "windowed (in module sparknlp_jsl.annotator)": [[92, "sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.matcher": [[93, "module-sparknlp_jsl.annotator.matcher"]], "textmatcherinternal (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal"]], "textmatcherinternalmodel (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel"]], "buildfromtokens (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.buildFromTokens"]], "buildfromtokens (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.buildFromTokens"]], "casesensitive (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.caseSensitive"]], "casesensitive (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.caseSensitive"]], "delimiter (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.delimiter"]], "delimiter (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.delimiter"]], "entities (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entities"]], "entityvalue (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entityValue"]], "entityvalue (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.entityValue"]], "getcasesensitive() (textmatcherinternalmodel method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getCaseSensitive"]], "getdelimiter() (textmatcherinternalmodel method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getDelimiter"]], "inputannotatortypes (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputAnnotatorTypes"]], "mergeoverlapping (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.mergeOverlapping"]], "mergeoverlapping (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.mergeOverlapping"]], "name (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.name"]], "outputannotatortype (textmatcherinternal attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputAnnotatorType"]], "outputannotatortype (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputAnnotatorType"]], "pretrained() (textmatcherinternalmodel static method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.pretrained"]], "searchtrie (textmatcherinternalmodel attribute)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.searchTrie"]], "setbuildfromtokens() (textmatcherinternal method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setBuildFromTokens"]], "setbuildfromtokens() (textmatcherinternalmodel method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setBuildFromTokens"]], "setcasesensitive() (textmatcherinternal method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setCaseSensitive"]], "setdelimiter() (textmatcherinternal method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setDelimiter"]], "setdelimiter() (textmatcherinternalmodel method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setDelimiter"]], "setentities() (textmatcherinternal method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntities"]], "setentityvalue() (textmatcherinternal method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntityValue"]], "setentityvalue() (textmatcherinternalmodel method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setEntityValue"]], "setmergeoverlapping() (textmatcherinternal method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (textmatcherinternalmodel method)": [[94, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setMergeOverlapping"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[94, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergefeatureparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "chunkprecedence (mergeprioritizationparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "defaultconfidence (mergeprioritizationparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "getreplacedict() (mergefeatureparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.getReplaceDict"]], "inputannotatortypes (chunkmergeapproach attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "mergeoverlapping (mergecommonparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "orderingfeatures (mergeprioritizationparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "pretrained() (chunkmergemodel static method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "replacedictresource (mergeresourceparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "selectionstrategy (mergeprioritizationparams attribute)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "setchunkprecedence() (mergeprioritizationparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setentitiesconfidence() (chunkmergeapproach method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidence"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositives() (mergefeatureparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setFalsePositives"]], "setfalsepositivesresource() (mergeresourceparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setinputcols() (chunkmergeapproach method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setmergeoverlapping() (mergecommonparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (mergeprioritizationparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setreplacedict() (mergefeatureparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setReplaceDict"]], "setreplacedictresource() (mergeresourceparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setselectionstrategy() (mergeprioritizationparams method)": [[95, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[95, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[96, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[97, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[98, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "inputannotatortypes (iobtagger attribute)": [[98, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "name (iobtagger attribute)": [[98, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "outputannotatortype (iobtagger attribute)": [[98, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "scheme (iobtagger attribute)": [[98, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[98, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[98, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "doexceptionhandling (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.doExceptionHandling"]], "dropout (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "getclasses() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "gettrainingclassdistribution() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "labelcasing (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "outputannotatortype (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "overrideexistingtags (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "sentencetokenindex (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "setbatchsize() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdoexceptionhandling() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDoExceptionHandling"]], "setdropout() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "settagsmapping() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[99, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "trainingclassdistribution (medicalnermodel attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[99, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[100, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "inputannotatortypes (nerchunker attribute)": [[100, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "name (nerchunker attribute)": [[100, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "outputannotatortype (nerchunker attribute)": [[100, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "regexparsers (nerchunker attribute)": [[100, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[100, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[100, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "doexceptionhandling (commonnerconverterinternalparams attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.doExceptionHandling"]], "greedymode (commonnerconverterinternalparams attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "inputannotatortypes (nerconverterinternal attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "name (nerconverterinternal attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "outputannotatortype (nerconverterinternal attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "preserveposition (commonnerconverterinternalparams attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "replacedictresource (nerconverterinternal attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setallowlist() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setdenylist() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setdoexceptionhandling() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDoExceptionHandling"]], "setgreedymode() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (commonnerconverterinternalparams method)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[101, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (commonnerconverterinternalparams attribute)": [[101, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "combineentities (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "entityscopes (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "permuteentities (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "resampleentities (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "setcombineentities() (nertemplaterendermodel method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setpermuteentities() (nertemplaterendermodel method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[102, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[102, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [174, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [208, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [174, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [208, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [174, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [208, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[103, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[103, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "defaultreplacementday (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "inputannotatortypes (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "name (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputannotatortype (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputdateformat (datenormalizer attribute)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setoutputdateformat() (datenormalizer method)": [[104, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[104, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "inputannotatortypes (drugnormalizer attribute)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "lowercase (drugnormalizer attribute)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "outputannotatortype (drugnormalizer attribute)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "policy (drugnormalizer attribute)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[105, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[105, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[106, "module-sparknlp_jsl.annotator.normalizer"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[107, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[107, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[108, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "configprotobytes (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "customprompt (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "getquestiontypes() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "inputannotatortypes (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "mlframeworktype (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.mlFrameworkType"]], "modeltype (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.modelType"]], "name (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "outputannotatortype (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "pretrained() (medicalquestionanswering static method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "setconfigprotobytes() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setusecache() (medicalquestionanswering method)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "sparknlp_jsl.annotator.qa.medical_qa": [[109, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "usecache (medicalquestionanswering attribute)": [[109, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "inputannotatortypes (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "name (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "outputannotatortype (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "questionmark (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[110, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[110, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[111, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "featurescaling (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.featureScaling"]], "fromentitybegincol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getrelationtypeperpair() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "inputannotatortypes (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "multiclass (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.multiClass"]], "name (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "outputannotatortype (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "overrideexistinglabels (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "relationdirectioncol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfeaturescaling() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFeatureScaling"]], "setfromentity() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setmulticlass() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMultiClass"]], "setpredictionthreshold() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractionmodel method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "settoentity() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "sparknlp_jsl.annotator.re.relation_extraction": [[112, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[112, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "getrelationtypeperpair() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [156, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [190, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [156, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [190, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "outputannotatortype (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "predictionthreshold (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [156, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [190, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "relationpairscasesensitive (relationextractiondlmodel attribute)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"]], "setbatchsize() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "setrelationpairscasesensitive() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractiondlmodel method)": [[113, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[113, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "inputannotatortypes (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "outputannotatortype (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "relationpairs (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[114, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[114, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "getclasses() (zeroshotrelationextractionmodel method)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [157, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [191, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [157, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [191, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[115, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[115, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.regex": [[116, "module-sparknlp_jsl.annotator.regex"]], "regexmatcherinternal (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal"]], "regexmatcherinternalmodel (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel"]], "delimiter (regexmatcherinternal attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.delimiter"]], "externalrules (regexmatcherinternal attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.externalRules"]], "inputannotatortypes (regexmatcherinternal attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (regexmatcherinternalmodel attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputAnnotatorTypes"]], "name (regexmatcherinternalmodel attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.name"]], "outputannotatortype (regexmatcherinternal attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputAnnotatorType"]], "outputannotatortype (regexmatcherinternalmodel attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputAnnotatorType"]], "pretrained() (regexmatcherinternalmodel static method)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.pretrained"]], "rules (regexmatcherinternal attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.rules"]], "setdelimiter() (regexmatcherinternal method)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setDelimiter"]], "setexternalrules() (regexmatcherinternal method)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setExternalRules"]], "setrules() (regexmatcherinternal method)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setRules"]], "setstrategy() (regexmatcherinternal method)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setStrategy"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[117, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "strategy (regexmatcherinternal attribute)": [[117, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.strategy"]], "sparknlp_jsl.annotator.resolution": [[118, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[119, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "inputannotatortypes (resolvermerger attribute)": [[119, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "name (resolvermerger attribute)": [[119, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "outputannotatortype (resolvermerger attribute)": [[119, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[119, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "labelcol (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [187, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [153, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [187, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "returnresolvedtextembeddings (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.returnResolvedTextEmbeddings"]], "searchtree (sentenceentityresolvermodel attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setreturnresolvedtextembeddings() (sentenceresolverparams method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setReturnResolvedTextEmbeddings"]], "setsearchtree() (sentenceentityresolvermodel method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[120, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[120, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[121, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "inputannotatortypes (resolution2chunk attribute)": [[121, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "name (resolution2chunk attribute)": [[121, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "outputannotatortype (resolution2chunk attribute)": [[121, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "setparams() (resolution2chunk method)": [[121, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[121, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "router (class in sparknlp_jsl.annotator.router)": [[122, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputannotatortypes (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputtype (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.name"]], "outputannotatortype (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "setfilterfieldselements() (router method)": [[122, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputcols() (router method)": [[122, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[122, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[122, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "skiplpinputcolsvalidation (router attribute)": [[122, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[122, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[123, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "configprotobytes (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "dosample (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "ignoretokenids (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "maxnewtokens (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "mlframeworktype (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.mlFrameworkType"]], "name (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "outputannotatortype (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "randomseed (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "refinechunksize (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setignoretokenids() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setrandomseed() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[124, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "usecache (medicalencoderdecoder attribute)": [[124, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[125, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "loadsavedmodel() (medicalsummarizer static method)": [[125, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "name (medicalsummarizer attribute)": [[125, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "pretrained() (medicalsummarizer static method)": [[125, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[125, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "configprotobytes (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "customprompt (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.customPrompt"]], "getadditionaltokens() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getAdditionalTokens"]], "inputannotatortypes (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "loadsavedmodel() (medicaltextgenerator static method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxtextlength (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "mlframeworktype (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.mlFrameworkType"]], "modeltype (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "outputannotatortype (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "pretrained() (medicaltextgenerator static method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "setadditionaltokens() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setAdditionalTokens"]], "setconfigprotobytes() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCustomPrompt"]], "setmaxtextlength() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setstopateos() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "setusecache() (medicaltextgenerator method)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[126, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "usecache (medicaltextgenerator attribute)": [[126, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "text2sql (class in sparknlp_jsl.annotator.seq2seq.text2sql)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL"]], "getpostprocessingsubstitutions() (text2sql method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getPostProcessingSubstitutions"]], "getschema() (text2sql method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getSchema"]], "loadsavedmodel() (text2sql static method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.loadSavedModel"]], "name (text2sql attribute)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.name"]], "pretrained() (text2sql static method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.pretrained"]], "setpostprocessingsubstitutions() (text2sql method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setPostProcessingSubstitutions"]], "setschema() (text2sql method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setSchema"]], "settablelimit() (text2sql method)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTableLimit"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[127, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "tablelimit (text2sql attribute)": [[127, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.tableLimit"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[128, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[128, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[129, "module-sparknlp_jsl.annotator.splitter"]], "internaldocumentsplitter (class in sparknlp_jsl.annotator.splitter.internal_document_splitter)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter"]], "casesensitive (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.caseSensitive"]], "customboundsstrategy (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.customBoundsStrategy"]], "enablesentenceincrement (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.enableSentenceIncrement"]], "inputannotatortypes (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputAnnotatorTypes"]], "maxlength (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.maxLength"]], "metadatafields (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.metaDataFields"]], "name (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.name"]], "optionalinputannotatortypes (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputAnnotatorType"]], "sentenceawareness (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.sentenceAwareness"]], "setcasesensitive() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCaseSensitive"]], "setcustomboundsstrategy() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCustomBoundsStrategy"]], "setenablesentenceincrement() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setEnableSentenceIncrement"]], "setinputcols() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setInputCols"]], "setmaxlength() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMaxLength"]], "setmetadatafields() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMetaDataFields"]], "setsentenceawareness() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSentenceAwareness"]], "setsplitmode() (internaldocumentsplitter method)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitMode"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[130, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "splitmode (internaldocumentsplitter attribute)": [[130, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitMode"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getoutputact() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getuserelationdirection() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "islicensed (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "labelcolumn (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "setbatchnorm() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[131, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[131, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "whiteblacklistparams (class in sparknlp_jsl.annotator.white_black_list_params)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams"]], "blacklist (whiteblacklistparams attribute)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.blackList"]], "casesensitive (whiteblacklistparams attribute)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.caseSensitive"]], "setblacklist() (whiteblacklistparams method)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setBlackList"]], "setcasesensitive() (whiteblacklistparams method)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setCaseSensitive"]], "setdenylist() (whiteblacklistparams method)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setDenyList"]], "setwhitelist() (whiteblacklistparams method)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setWhiteList"]], "sparknlp_jsl.annotator.white_black_list_params": [[132, "module-sparknlp_jsl.annotator.white_black_list_params"]], "whitelist (whiteblacklistparams attribute)": [[132, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.whiteList"]], "sparknlp_jsl.annotator.windowed": [[133, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "gluestring (windowedparams attribute)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "inputannotatortypes (windowedsentencemodel attribute)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "setgluestring() (windowedparams method)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setwindowsize() (windowedparams method)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[134, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "windowsize (windowedparams attribute)": [[134, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "sparknlp_jsl.base": [[135, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[136, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[136, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[136, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[136, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[136, "module-sparknlp_jsl.common.annotator_approach_internal"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[137, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "inputannotatortypes (annotatormodelinternal attribute)": [[137, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[137, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "setparams() (annotatormodelinternal method)": [[137, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[137, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[137, "module-sparknlp_jsl.common.annotator_model_internal"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[138, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[138, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[138, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[138, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[139, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[140, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[140, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[140, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[140, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[141, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[141, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[141, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[141, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[141, "module-sparknlp_jsl.custom_transformer"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[142, "sparknlp_jsl.deidentification_module.Deidentifier"]], "deid_with_custom_pipeline() (deidentifier method)": [[142, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[142, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[142, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "sparknlp_jsl.deidentification_module": [[142, "module-sparknlp_jsl.deidentification_module"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[143, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[143, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[143, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[143, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[143, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[143, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[143, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[143, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[143, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[143, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[143, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[143, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[143, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[143, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[143, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[143, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[143, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[143, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[144, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[144, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[144, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[145, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[146, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[146, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[146, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[147, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "setidcolumn() (financedocumenthashcoder method)": [[147, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[147, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[148, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[149, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[150, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[150, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[150, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[151, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[151, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[152, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[153, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[153, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[153, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[154, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[155, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[156, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[156, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[157, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[157, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[158, "module-sparknlp_jsl.finance"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[159, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[159, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[159, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[159, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[159, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[159, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[160, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[160, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[160, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[160, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[160, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[161, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[161, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "name (financedocumentmlclassifiermodel attribute)": [[161, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[161, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[161, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "financefewshotclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[162, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach"]], "financefewshotclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[162, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel"]], "name (financefewshotclassifierapproach attribute)": [[162, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.name"]], "name (financefewshotclassifiermodel attribute)": [[162, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.name"]], "pretrained() (financefewshotclassifiermodel static method)": [[162, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[162, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[163, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[164, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "name (financeencoderdecoder attribute)": [[164, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[164, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[165, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "loadsavedmodel() (financequestionanswering static method)": [[165, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "name (financequestionanswering attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "pretrained() (financequestionanswering static method)": [[165, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[165, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[166, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "loadsavedmodel() (financesummarizer static method)": [[166, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "name (financesummarizer attribute)": [[166, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "pretrained() (financesummarizer static method)": [[166, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[166, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[167, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "loadsavedmodel() (financetextgenerator static method)": [[167, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "name (financetextgenerator attribute)": [[167, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "pretrained() (financetextgenerator static method)": [[167, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[167, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[168, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[169, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[169, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[170, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[171, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[171, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[171, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[171, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[171, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[171, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[172, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[172, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[172, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[172, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[172, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[172, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[173, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[174, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[174, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profile"]], "profileesrdv21y19() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileESRDV21Y19"]], "profilerxhccv05y20() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileRxHCCV05Y20"]], "profilerxhccv05y21() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileRxHCCV05Y21"]], "profilerxhccv05y22() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileRxHCCV05Y22"]], "profilerxhccv05y23() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileRxHCCV05Y23"]], "profilerxhccv08y22() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileRxHCCV08Y22"]], "profilerxhccv08y23() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileRxHCCV08Y23"]], "profilev22() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV24"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV24Y22"]], "profilev28() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV28"]], "profilev28y24() (in module sparknlp_jsl.functions)": [[175, "sparknlp_jsl.functions.profileV28Y24"]], "sparknlp_jsl.functions": [[175, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[176, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[176, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[176, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[176, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[176, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[176, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[176, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[176, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[176, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[176, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[177, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[177, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[177, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[177, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[177, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[178, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[178, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[178, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[179, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[180, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[180, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[180, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[181, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "setidcolumn() (legaldocumenthashcoder method)": [[181, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[181, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[182, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[183, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[184, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[184, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[184, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[185, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[185, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[186, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[187, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[187, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[187, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[188, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[189, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[190, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[190, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[191, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[191, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[192, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[193, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[194, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[194, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[194, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[194, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[194, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[194, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[195, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[195, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[195, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[195, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[195, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[196, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[196, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "name (legaldocumentmlclassifiermodel attribute)": [[196, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[196, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[196, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "legalfewshotclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[197, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach"]], "legalfewshotclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[197, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel"]], "name (legalfewshotclassifierapproach attribute)": [[197, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.name"]], "name (legalfewshotclassifiermodel attribute)": [[197, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.name"]], "pretrained() (legalfewshotclassifiermodel static method)": [[197, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[197, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[198, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[199, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "name (legalencoderdecoder attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[199, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[200, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "loadsavedmodel() (legalquestionanswering static method)": [[200, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "name (legalquestionanswering attribute)": [[200, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "pretrained() (legalquestionanswering static method)": [[200, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[200, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[201, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "loadsavedmodel() (legalsummarizer static method)": [[201, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "name (legalsummarizer attribute)": [[201, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "pretrained() (legalsummarizer static method)": [[201, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[201, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[202, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "loadsavedmodel() (legaltextgenerator static method)": [[202, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "name (legaltextgenerator attribute)": [[202, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "pretrained() (legaltextgenerator static method)": [[202, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[202, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[203, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[203, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[204, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[205, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[206, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[206, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[206, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[206, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[206, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[206, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[207, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[207, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[207, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[207, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[207, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[207, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[208, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[208, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[209, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[209, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[209, "module-sparknlp_jsl.modelTracer"]], "rulebasedclassifier (class in sparknlp_jsl.nlp_test.bias.bias_testing)": [[210, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier"]], "init_medical_gender_classifier() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[210, "sparknlp_jsl.nlp_test.bias.bias_testing.init_medical_gender_classifier"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[210, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "test_gender_bias() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[210, "sparknlp_jsl.nlp_test.bias.bias_testing.test_gender_bias"]], "transform() (rulebasedclassifier method)": [[210, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier.transform"]], "sparknlp_jsl.nlp_test.bias": [[211, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[212, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[213, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "interactivefix (class in sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix"]], "add_flag_to_conll() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.add_flag_to_conll"]], "adjust_page_size() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.adjust_page_size"]], "apply_fixes() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.apply_fixes"]], "apply_label_fixes() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.apply_label_fixes"]], "conll_reader() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_reader"]], "conll_writer() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_writer"]], "create_grid() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.create_grid"]], "display() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.display"]], "empty_grid() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.empty_grid"]], "fill_grid() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fill_grid"]], "fix_all() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_all"]], "fix_label() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_label"]], "get_cell_element() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_cell_element"]], "get_central_grid() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_central_grid"]], "get_classes() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_classes"]], "get_default_indx() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_default_indx"]], "get_drop_down() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down"]], "get_drop_down_title() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down_title"]], "get_footer() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_footer"]], "get_header() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_header"]], "get_page_control_buttons() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_control_buttons"]], "get_page_number() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_number"]], "get_sentence() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_sentence"]], "get_title_html() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_title_html"]], "next_page() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.next_page"]], "num_sample_drop_down() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.num_sample_drop_down"]], "prev_page() (interactivefix method)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[214, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "update_with_model_predictions() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[214, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.update_with_model_predictions"]], "calculate_label_error_score() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[215, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.calculate_label_error_score"]], "get_label_quality_scores() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[215, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_label_quality_scores"]], "get_unique_entities() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[215, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_unique_entities"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[215, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "test_label_errors() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[215, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[216, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "stylesheet (in module sparknlp_jsl.nlp_test.noisy_labels.utils)": [[216, "sparknlp_jsl.nlp_test.noisy_labels.utils.stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[217, "module-sparknlp_jsl.nlp_test.robustness"]], "add_context_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_context_to_data"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_contractions"]], "add_punctuation_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_punctuation_to_data"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_typo_to_sentence"]], "augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.augment_robustness"]], "conll_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.conll_reader"]], "convert_accent() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.convert_accent"]], "create_dataframe() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_dataframe"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_terminology"]], "filter_by_entity_type() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.filter_by_entity_type"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_cohyponyms_wordnet"]], "get_sample() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_sample"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.introduce_typos"]], "modify_capitalization_lower() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_lower"]], "modify_capitalization_title() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_title"]], "modify_capitalization_upper() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_upper"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[218, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "strip_punctuation_from_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.strip_punctuation_from_data"]], "swap_entities_with_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_entities_with_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_with_cohyponym"]], "test_and_augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[218, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.test_and_augment_robustness"]], "add_context() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_context"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_contractions"]], "add_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_punctuation"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_typo_to_sentence"]], "american_to_british() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.american_to_british"]], "british_to_american() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.british_to_american"]], "calculate_metrics() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.calculate_metrics"]], "conll_sentence_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.conll_sentence_reader"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.create_terminology"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.get_cohyponyms_wordnet"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.introduce_typos"]], "modify_capitalization() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.modify_capitalization"]], "remove_context_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_context_tokens"]], "remove_contraction_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_contraction_tokens"]], "remove_punctuation_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_punctuation_tokens"]], "run_test() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.run_test"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[219, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "strip_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.strip_punctuation"]], "swap_named_entities_from_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_named_entities_from_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_with_cohyponym"]], "test_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[219, "sparknlp_jsl.nlp_test.robustness.robustness_testing.test_robustness"]], "calculate_proportion() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[220, "sparknlp_jsl.nlp_test.robustness.utils.calculate_proportion"]], "get_augmentation_proportions() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[220, "sparknlp_jsl.nlp_test.robustness.utils.get_augmentation_proportions"]], "sparknlp_jsl.nlp_test.robustness.utils": [[220, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "suggest_perturbations() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[220, "sparknlp_jsl.nlp_test.robustness.utils.suggest_perturbations"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "downloadmodeldirectly() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModelDirectly"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[221, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[221, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[221, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[222, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[222, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[222, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[223, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[223, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[223, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "todocumentscolumnswithid() (texttodocumentscolumns method)": [[223, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumnsWithId"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[224, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[224, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[224, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[224, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[224, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[224, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[224, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[224, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[224, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[224, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[224, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[225, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[225, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[225, "module-sparknlp_jsl.training_log_parser"]], "build_python_code() (in module sparknlp_jsl.transpiler.builder)": [[226, "sparknlp_jsl.transpiler.builder.build_python_code"]], "build_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[226, "sparknlp_jsl.transpiler.builder.build_scala_code"]], "compile_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[226, "sparknlp_jsl.transpiler.builder.compile_scala_code"]], "prepare_python_code() (in module sparknlp_jsl.transpiler.builder)": [[226, "sparknlp_jsl.transpiler.builder.prepare_python_code"]], "sparknlp_jsl.transpiler.builder": [[226, "module-sparknlp_jsl.transpiler.builder"]], "classnames (class in sparknlp_jsl.transpiler.class_names)": [[227, "sparknlp_jsl.transpiler.class_names.ClassNames"]], "classes (classnames attribute)": [[227, "sparknlp_jsl.transpiler.class_names.ClassNames.classes"]], "internal_classes (classnames attribute)": [[227, "sparknlp_jsl.transpiler.class_names.ClassNames.internal_classes"]], "opensource_classes (classnames attribute)": [[227, "sparknlp_jsl.transpiler.class_names.ClassNames.openSource_classes"]], "sparknlp_jsl.transpiler.class_names": [[227, "module-sparknlp_jsl.transpiler.class_names"]], "run_converter() (in module sparknlp_jsl.transpiler.converter)": [[228, "sparknlp_jsl.transpiler.converter.run_converter"]], "sparknlp_jsl.transpiler.converter": [[228, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalsources": [[229, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[230, "module-sparknlp_jsl.transpiler"]], "bucket() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.bucket"]], "convert_nlu_component_to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.convert_nlu_component_to_python"]], "is_component_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.is_component_finance"]], "is_component_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.is_component_legal"]], "is_component_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.is_component_medical"]], "is_component_ocr() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.is_component_ocr"]], "is_component_open_source() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.is_component_open_source"]], "is_component_pretrained() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.is_component_pretrained"]], "medical_annotators_set (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.medical_annotators_set"]], "nlu_component_to_spark_nlp_code() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.nlu_component_to_spark_nlp_code"]], "open_source_annotator_set_final (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.open_source_annotator_set_final"]], "sparknlp_jsl.transpiler.nlu_2_python": [[231, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "starts_with_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_finance"]], "starts_with_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_legal"]], "starts_with_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_medical"]], "to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[231, "sparknlp_jsl.transpiler.nlu_2_python.to_python"]], "anonymize_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.anonymize_script"]], "break_line_after_backslash() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.break_line_after_backslash"]], "convert() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.convert"]], "convert_class_name() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.convert_class_name"]], "convert_python_dict_to_scala_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.convert_python_dict_to_scala_script"]], "find_key_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.find_key_values"]], "get_data_dict() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.get_data_dict"]], "get_import_section() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.get_import_section"]], "prepare_scala_code() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.prepare_scala_code"]], "remove_blank_lines() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.remove_blank_lines"]], "restore_sensitive_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.restore_sensitive_values"]], "run_transpiler() (in module sparknlp_jsl.transpiler.python_2_scala)": [[232, "sparknlp_jsl.transpiler.python_2_scala.run_transpiler"]], "sparknlp_jsl.transpiler.python_2_scala": [[232, "module-sparknlp_jsl.transpiler.python_2_scala"]], "get_python_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[233, "sparknlp_jsl.transpiler.source_loader.get_python_code_from_md"]], "get_scala_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[233, "sparknlp_jsl.transpiler.source_loader.get_scala_code_from_md"]], "load_file_as_dict() (in module sparknlp_jsl.transpiler.source_loader)": [[233, "sparknlp_jsl.transpiler.source_loader.load_file_as_dict"]], "process_python_code() (in module sparknlp_jsl.transpiler.source_loader)": [[233, "sparknlp_jsl.transpiler.source_loader.process_python_code"]], "sparknlp_jsl.transpiler.source_loader": [[233, "module-sparknlp_jsl.transpiler.source_loader"]], "update_md_file() (in module sparknlp_jsl.transpiler.source_loader)": [[233, "sparknlp_jsl.transpiler.source_loader.update_md_file"]], "update_md_file_for_working_scala_code() (in module sparknlp_jsl.transpiler.source_loader)": [[233, "sparknlp_jsl.transpiler.source_loader.update_md_file_for_working_scala_code"]], "apply_method_to_all_md_files() (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.apply_method_to_all_md_files"]], "generated_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.generated_code_failed"]], "generated_code_works (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.generated_code_works"]], "python_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.python_code_failed"]], "results_list (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.results_list"]], "scala_code_works (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.scala_code_works"]], "scala_generated (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.scala_generated"]], "sparknlp_jsl.transpiler.uploader": [[234, "module-sparknlp_jsl.transpiler.uploader"]], "upload_scala_code_in_md_file() (in module sparknlp_jsl.transpiler.uploader)": [[234, "sparknlp_jsl.transpiler.uploader.upload_scala_code_in_md_file"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[235, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[235, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[235, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[235, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[236, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[236, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[237, "module-sparknlp_jsl.utils.alab_utils"]], "strip_json_entities() (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.strip_json_entities"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[237, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[238, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[239, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[239, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[240, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[240, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[241, "module-sparknlp_jsl.utils"]], "parse_str_to_dict() (in module sparknlp_jsl.utils.java_helper)": [[242, "sparknlp_jsl.utils.java_helper.parse_str_to_dict"]], "sparknlp_jsl.utils.java_helper": [[242, "module-sparknlp_jsl.utils.java_helper"]], "assertion (internalannotatortype attribute)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[243, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "sparknlp_jsl.utils.licensed_annotator_type": [[243, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[244, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[245, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[245, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[245, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[245, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[245, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[246, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[246, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[246, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "draw_boxes_on_image_handwritten_region() (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.draw_boxes_on_image_handwritten_region"]], "get_handwritten_regions() (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.get_handwritten_regions"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "pretrained_model (in module sparknlp_jsl.utils.ocr_utils)": [[247, "sparknlp_jsl.utils.ocr_utils.pretrained_model"]], "sparknlp_jsl.utils.ocr_utils": [[247, "module-sparknlp_jsl.utils.ocr_utils"]], "hcc_from_icd() (riskadjustmentutil static method)": [[248, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_from_ICD"]], "hcc_labels() (riskadjustmentutil static method)": [[248, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_labels"]], "riskadjustmentutil (class in sparknlp_jsl.utils.risk_adjustment_utils)": [[248, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil"]], "diff_between_hccs() (riskadjustmentutil static method)": [[248, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.diff_between_HCCs"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[248, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "runtranspiledcode (class in sparknlp_jsl.utils.run_transpiled_code)": [[249, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode"]], "build_scala_code() (runtranspiledcode static method)": [[249, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.build_scala_code"]], "compile_scala_code() (runtranspiledcode static method)": [[249, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.compile_scala_code"]], "sparknlp_jsl.utils.run_transpiled_code": [[249, "module-sparknlp_jsl.utils.run_transpiled_code"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[250, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[250, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]]}})