Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/contextual_assertion/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/fewshot_assertion_sentence_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/mapper2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_assertion_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/large_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/light_deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_ner/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index", "reference/autosummary/sparknlp_jsl/annotator/er/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/flattener/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/multi_chunk2_doc/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/rag/context_split_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/rag/index", "reference/autosummary/sparknlp_jsl/annotator/rag/vectordb_post_processor/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/regex/index", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/llm/index", "reference/autosummary/sparknlp_jsl/llm/llm_loader/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/pipeline_output_parser/index", "reference/autosummary/sparknlp_jsl/pipeline_tracer/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/transpiler/builder/index", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index", "reference/autosummary/sparknlp_jsl/transpiler/converter/index", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index", "reference/autosummary/sparknlp_jsl/transpiler/index", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/java_helper/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/autosummary/sparknlp_jsl/utils/visualner_annotations_parser/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/contextual_assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/fewshot_assertion_sentence_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/mapper2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_assertion_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/large_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/light_deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/flattener/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/multi_chunk2_doc/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/context_split_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/vectordb_post_processor/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/llm/index.rst", "reference/autosummary/sparknlp_jsl/llm/llm_loader/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/pipeline_output_parser/index.rst", "reference/autosummary/sparknlp_jsl/pipeline_tracer/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/builder/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/converter/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/java_helper/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/visualner_annotations_parser/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.contextual_assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.mapper2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_assertion_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.large_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deidentication_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.light_deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.extractive_summarization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er.entity_ruler_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.flattener</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.handle_exception_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher.text_matcher_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.multi_chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag.context_split_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag.vectordb_post_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.text2sql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter.internal_document_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.white_black_list_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.llm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.llm.llm_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pipeline_output_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pipeline_tracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.class_names</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.externalSources</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.nlu_2_python</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.python_2_scala</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.source_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.uploader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.java_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.risk_adjustment_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.run_transpiled_code</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.visualner_annotations_parser</span></code>", "API Reference"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "9": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "healthcar": [0, 1, 2, 39, 72, 218], "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 191, 192, 198, 201, 205, 206, 208, 211, 212, 214, 216, 217], "commerci": 0, "extens": [0, 49], "clinic": [0, 4, 6, 8, 14, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 40, 42, 44, 46, 47, 49, 50, 57, 58, 64, 66, 68, 69, 70, 71, 73, 75, 79, 85, 86, 87, 88, 90, 93, 94, 98, 99, 100, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 142, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 176, 179, 181, 183, 185, 186, 187, 201], "biomed": 0, "text": [0, 2, 3, 4, 5, 6, 8, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 29, 30, 31, 32, 33, 35, 37, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 53, 57, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 77, 79, 85, 86, 87, 88, 90, 93, 94, 95, 97, 98, 99, 100, 103, 107, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 172, 173, 174, 175, 176, 179, 180, 181, 185, 189, 190, 198, 203, 205, 212, 217], "mine": 0, "If": [0, 2, 4, 6, 7, 8, 12, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 46, 47, 49, 50, 53, 55, 56, 57, 58, 60, 63, 64, 66, 69, 71, 73, 74, 77, 79, 80, 83, 85, 86, 87, 88, 90, 93, 94, 97, 98, 99, 100, 103, 104, 105, 109, 113, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 185, 186, 188, 192, 198, 201, 205, 206, 208, 211, 216], "you": [0, 2, 3, 4, 14, 15, 29, 33, 35, 36, 39, 40, 47, 49, 50, 57, 69, 72, 73, 79, 85, 87, 93, 95, 103, 113, 117, 119, 138, 145, 147, 151, 153, 173, 180, 181, 186, 187, 188, 190, 205], "don": [0, 16, 80, 93, 126, 142, 160, 176], "t": [0, 4, 16, 33, 58, 69, 79, 80, 85, 93, 99, 100, 115, 117, 126, 133, 138, 140, 142, 145, 151, 160, 168, 173, 175, 176, 180, 190, 216], "have": [0, 2, 4, 7, 8, 14, 16, 17, 19, 21, 35, 39, 50, 64, 69, 72, 83, 85, 87, 90, 93, 104, 117, 119, 123, 124, 133, 142, 145, 151, 153, 157, 158, 168, 176, 180, 189, 205], "subscript": 0, "yet": [0, 8, 103], "can": [0, 2, 4, 5, 6, 7, 12, 14, 16, 24, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 47, 50, 53, 55, 57, 58, 64, 66, 69, 71, 77, 79, 80, 83, 85, 87, 88, 90, 93, 97, 98, 99, 100, 103, 104, 117, 119, 126, 130, 132, 133, 137, 138, 139, 140, 144, 145, 148, 151, 153, 160, 164, 167, 168, 172, 173, 174, 175, 179, 180, 186, 187, 190, 201, 205, 206, 208], "ask": [0, 103], "free": [0, 8, 183], "trial": 0, "click": 0, "button": 0, "below": [0, 50], "try": [0, 22, 23, 24, 25, 26, 27, 58, 64, 74, 85, 93, 113, 126, 134, 135, 160, 169, 170], "http": [0, 2, 44, 87, 93, 149], "www": [0, 202], "johnsnowlab": [0, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 98, 99, 100, 103, 107, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 193], "com": [0, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 98, 99, 100, 103, 107, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 193, 202, 205], "provid": [0, 2, 4, 15, 31, 33, 36, 39, 42, 53, 57, 63, 69, 70, 90, 93, 111, 117, 119, 133, 144, 145, 151, 153, 168, 179, 180, 185, 186, 188, 191, 192, 198, 200, 205, 214, 215], "specif": [0, 50, 66, 69, 87, 103, 104, 107, 145, 180, 198, 212, 214], "annot": [0, 2, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 150, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 185, 187, 189, 190, 193, 203, 205, 212, 217], "pipelin": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 212, 217], "model": [0, 1, 2, 4, 5, 6, 8, 12, 13, 14, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 40, 42, 44, 46, 47, 49, 50, 53, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 79, 85, 86, 87, 88, 90, 93, 94, 97, 98, 99, 100, 104, 107, 109, 110, 113, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 193, 201, 213, 217], "embed": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 53, 55, 57, 58, 61, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 193], "entiti": [0, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 19, 31, 33, 35, 36, 39, 40, 41, 42, 44, 46, 47, 50, 53, 56, 57, 63, 64, 66, 69, 70, 71, 72, 73, 74, 80, 85, 86, 87, 88, 90, 92, 93, 95, 105, 117, 119, 123, 124, 126, 129, 130, 142, 144, 145, 147, 150, 151, 153, 157, 158, 160, 163, 164, 176, 179, 180, 181, 185, 186, 188, 190, 203, 205, 212], "recognit": [0, 15, 31, 69, 73, 144, 145, 147, 179, 180, 181], "link": [0, 44], "normal": [0, 22, 23, 33, 61, 93, 104, 126, 133, 134, 148, 149, 160, 168, 169, 193], "assert": [0, 2, 12, 24, 57, 61, 122, 131, 149, 156, 165, 185, 186, 190, 191, 193, 203, 209], "statu": [0, 4, 5, 6, 117, 151, 185, 190, 214], "detect": [0, 5, 8, 212], "de": [0, 35, 36, 39, 40, 119, 153, 188], "identif": [0, 4, 6, 14, 24, 39, 49, 50, 53, 69, 93, 117, 126, 133, 145, 151, 160, 168, 180, 188], "relat": [0, 2, 17, 19, 21, 50, 85, 86, 87, 88, 104, 105, 123, 124, 129, 130, 142, 148, 150, 157, 158, 163, 164, 176, 185, 186, 190, 198, 203], "extract": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 199, 217], "spell": [0, 103, 116, 193], "check": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 201, 216], "correct": [0, 205], "resolv": [0, 8, 92, 93, 126, 160, 185], "rule": [0, 8, 13, 33, 35, 36, 53, 69, 90, 119, 153], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 111, 114, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 190, 198, 201, 203, 209, 214, 215], "contextu": [0, 8], "parser": [0, 33, 185, 186, 190, 193], "gener": [0, 2, 14, 15, 24, 25, 26, 27, 35, 36, 37, 39, 58, 69, 72, 77, 79, 80, 85, 97, 98, 99, 100, 119, 120, 133, 135, 137, 138, 139, 140, 145, 153, 154, 168, 170, 172, 173, 174, 175, 180, 183, 185, 188, 190, 193, 194, 198, 203, 212], "summar": [0, 51, 97, 98, 137, 139, 172, 174, 185], "risk": [0, 148, 214], "adjust": [0, 66, 148, 214], "modul": [0, 1], "The": [0, 3, 4, 5, 6, 7, 8, 12, 14, 15, 16, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 40, 42, 44, 46, 47, 49, 50, 53, 55, 56, 57, 58, 63, 64, 66, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 93, 95, 97, 98, 99, 100, 103, 104, 105, 107, 111, 114, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 194, 198, 199, 200, 201, 205, 208, 214, 216], "librari": [0, 1, 2, 30, 31, 32, 45, 113, 120, 132, 144, 149, 154, 167, 179, 192, 198], "offer": [0, 214], "access": [0, 2], "sever": [0, 4, 12, 35, 36, 39, 40, 117, 119, 151, 153, 214], "transform": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 193, 198, 205], "jsl": [0, 2, 17, 19, 123, 124, 142, 149, 157, 158, 176, 193, 203, 212], "bert": [0, 14, 29, 30, 31, 32, 49, 50, 69, 86, 88, 93, 95, 129, 130, 132, 144, 145, 163, 164, 167, 179, 180], "biobert": 0, "clinicalbert": 0, "glove": [0, 6], "med": 0, "icd": [0, 93, 126, 160, 214], "o": [0, 31, 40, 42, 68, 71, 144, 179, 188, 190, 216], "It": [0, 2, 8, 12, 16, 36, 37, 39, 47, 50, 53, 55, 56, 57, 58, 64, 69, 71, 81, 103, 104, 105, 119, 133, 145, 148, 153, 168, 180, 185, 186, 192, 198, 199, 205], "also": [0, 7, 21, 30, 31, 32, 35, 39, 44, 50, 53, 66, 69, 71, 85, 90, 93, 111, 119, 132, 133, 144, 145, 153, 167, 168, 179, 180, 185], "includ": [0, 2, 4, 7, 8, 12, 15, 16, 24, 35, 36, 46, 47, 53, 56, 57, 64, 66, 69, 71, 79, 87, 88, 93, 101, 104, 105, 117, 119, 126, 130, 138, 145, 148, 151, 153, 160, 164, 173, 180, 186, 192, 198, 199, 203], "over": [0, 35, 36, 47, 69, 103, 104, 111, 114, 119, 145, 153, 180, 185, 212, 214], "2000": [0, 74], "pre": [0, 2, 8, 14, 17, 19, 30, 31, 32, 33, 45, 49, 69, 73, 85, 86, 88, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 179, 180, 181, 217], "train": [0, 2, 4, 5, 6, 8, 12, 16, 17, 19, 21, 22, 23, 24, 26, 29, 30, 31, 32, 33, 35, 40, 45, 49, 50, 53, 55, 58, 63, 64, 68, 69, 70, 71, 73, 74, 85, 86, 88, 90, 93, 94, 104, 107, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 176, 179, 180, 181, 193, 217], "recogn": [0, 50, 69, 71, 73, 85, 88, 130, 145, 147, 164, 180, 181], "follow": [0, 12, 15, 16, 33, 35, 36, 39, 40, 42, 47, 56, 64, 69, 71, 83, 90, 93, 103, 119, 145, 148, 153, 180, 185, 188, 190, 198, 199, 202], "mani": [0, 44, 50, 97, 98, 137, 139, 172, 174], "more": [0, 5, 7, 14, 30, 32, 35, 36, 39, 45, 47, 50, 71, 72, 119, 120, 132, 144, 153, 154, 167, 179, 183], "support": [0, 27, 35, 36, 39, 40, 69, 83, 119, 133, 145, 153, 168, 180], "sign": [0, 190, 193], "symptom": [0, 50, 57, 85], "treatment": [0, 47, 87, 88, 130, 164, 190], "procedur": 0, "test": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 190, 191, 206], "lab": [0, 2, 149, 190, 203, 205], "section": [0, 35, 72, 192, 198], "drug": [0, 50, 71, 75, 85, 87, 88, 130, 164, 188], "name": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 113, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 198, 201, 205, 206, 212, 214], "dosag": [0, 50, 71, 75, 85], "strength": [0, 50, 71, 85], "rout": [0, 85], "durat": [0, 85], "frequenc": [0, 71, 85, 183], "factor": [0, 148, 185], "smoke": 0, "obes": 0, "diabet": [0, 14, 47, 49, 66, 83, 107], "hypertens": [0, 24], "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 31, 57, 81, 144, 179, 188], "subdivis": 0, "cell": [0, 31, 69, 144, 145, 179, 180, 188], "structur": [0, 88, 104, 130, 164, 188, 205], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 35, 36, 39, 41, 42, 47, 57, 64, 68, 100, 119, 148, 153, 188, 214], "gender": [0, 35, 36, 39, 40, 57, 64, 68, 119, 153], "height": 0, "weight": [0, 2, 49, 50, 104, 150], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 190], "sensit": [0, 4, 7, 8, 12, 16, 33, 39, 46, 47, 49, 56, 64, 66, 71, 83, 85, 86, 87, 103, 104, 105, 117, 129, 151, 163, 198], "data": [0, 2, 4, 5, 8, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 44, 45, 46, 47, 49, 50, 53, 55, 57, 58, 60, 63, 64, 66, 68, 69, 71, 73, 74, 75, 79, 80, 85, 86, 87, 88, 90, 93, 94, 99, 100, 103, 104, 107, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 175, 176, 179, 180, 181, 188, 190, 198, 205, 217], "patient": [0, 4, 8, 16, 17, 19, 21, 33, 35, 36, 37, 39, 40, 42, 50, 79, 80, 117, 119, 120, 123, 124, 138, 142, 148, 151, 153, 154, 157, 158, 173, 176, 188, 214], "address": [0, 4, 6, 14, 22, 23, 24, 25, 26, 27, 29, 35, 44, 49, 50, 58, 63, 64, 70, 79, 90, 93, 98, 99, 100, 103, 135, 138, 139, 140, 170, 173, 174, 175, 180], "phone": [0, 36, 39, 119, 153, 188], "email": [0, 39, 188, 205], "date": [0, 3, 35, 36, 37, 39, 41, 74, 83, 90, 95, 115, 119, 120, 153, 154, 188, 201, 205], "identifi": [0, 8, 13, 14, 15, 39, 64, 87, 93, 95, 185, 188, 190, 214, 216], "For": [0, 2, 6, 12, 30, 31, 35, 36, 39, 45, 49, 50, 53, 63, 68, 69, 73, 75, 83, 85, 86, 87, 88, 90, 93, 103, 119, 120, 129, 130, 132, 133, 144, 145, 147, 153, 154, 163, 164, 167, 168, 179, 180, 181, 187], "inform": [0, 1, 4, 24, 25, 26, 27, 33, 35, 37, 39, 47, 57, 58, 64, 69, 71, 74, 75, 85, 93, 104, 117, 119, 126, 135, 145, 148, 151, 153, 160, 170, 180, 185, 186, 190, 214, 217], "visit": [0, 46, 85], "our": 0, "site": [0, 33], "built": [0, 133, 168, 192], "top": [0, 14, 30, 31, 32, 69, 83, 97, 98, 132, 137, 139, 144, 145, 167, 172, 174, 179, 180, 183, 190], "apach": [0, 149], "x": [0, 103], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 187, 188, 190, 192, 194, 199, 203, 205, 212, 214, 217], "need": [0, 6, 8, 33, 35, 36, 39, 49, 53, 69, 70, 80, 85, 90, 93, 119, 126, 133, 142, 145, 148, 153, 160, 168, 176, 180, 190], "java": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 187, 208], "8": [0, 30, 32, 47, 50, 69, 103, 132, 133, 144, 145, 167, 168, 179, 180, 183, 185, 190, 205], "11": [0, 6, 16, 35, 36, 39, 41, 74, 83, 119, 153, 190, 205], "7": [0, 39, 190], "10": [0, 5, 17, 19, 37, 75, 86, 93, 123, 124, 126, 142, 157, 158, 160, 176, 190, 205, 214], "recommend": [0, 44, 69, 145, 180], "basic": 0, "knowledg": [0, 44, 93], "framework": 0, "work": [0, 14, 29, 39, 49, 50, 69, 73, 104, 145, 147, 180, 181, 194, 205, 214], "environ": [0, 35, 206], "befor": [0, 6, 7, 8, 14, 66, 69, 97, 98, 103, 137, 139, 145, 148, 172, 174, 180, 183, 214], "pleas": [0, 2, 30, 31, 41, 63, 69, 85, 86, 90, 93, 129, 132, 133, 144, 145, 163, 167, 168, 179, 180, 187], "refer": [0, 1, 2, 4, 6, 14, 24, 35, 36, 37, 40, 41, 45, 49, 50, 53, 69, 85, 93, 117, 119, 120, 126, 133, 145, 151, 153, 154, 160, 168, 180], "document": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 189, 190, 203, 205, 217], "first": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 190, 199], "let": [0, 83, 85, 93], "": [0, 2, 4, 6, 7, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 36, 39, 40, 42, 44, 47, 49, 53, 58, 63, 64, 69, 71, 77, 79, 83, 85, 90, 93, 97, 98, 99, 100, 101, 103, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 137, 138, 139, 140, 145, 148, 151, 153, 157, 158, 160, 168, 169, 170, 172, 173, 174, 175, 180, 183, 188, 205], "make": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186], "sure": [0, 2, 35, 36, 39, 119, 153, 186], "version": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 187, 201, 214], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 190], "extra": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "index": [0, 4, 5, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 72, 85, 90, 93, 103, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180, 185, 186, 203, 205], "url": [0, 2, 188], "pypi": [0, 149], "secret": [0, 2, 149], "code": [0, 2, 33, 35, 36, 37, 93, 104, 119, 126, 148, 153, 160, 185, 188, 190, 192, 194, 198, 199, 200, 212, 214, 215], "upgrad": [0, 214], "part": [0, 35, 36, 37, 39, 45, 119, 120, 153, 154, 183, 206], "split": [0, 14, 15, 24, 25, 26, 27, 29, 49, 50, 58, 69, 73, 81, 85, 103, 135, 145, 147, 170, 180, 181, 190, 203, 216], "e": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 188, 201, 216], "2": [0, 4, 6, 8, 11, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 46, 47, 49, 50, 53, 58, 63, 64, 69, 71, 75, 80, 83, 85, 90, 93, 103, 104, 109, 116, 117, 119, 123, 124, 126, 133, 134, 135, 142, 145, 148, 151, 153, 157, 158, 160, 168, 169, 170, 176, 180, 183, 187, 190, 205, 212], "onli": [0, 2, 7, 8, 14, 17, 19, 24, 25, 26, 27, 35, 36, 39, 40, 57, 58, 64, 69, 77, 79, 85, 87, 90, 97, 98, 99, 100, 103, 119, 123, 124, 135, 137, 138, 139, 140, 145, 148, 153, 157, 158, 170, 172, 173, 174, 175, 180, 183, 190], "avail": [0, 7, 14, 30, 31, 42, 50, 64, 69, 71, 79, 99, 100, 132, 133, 138, 140, 144, 145, 167, 168, 173, 175, 179, 180, 186, 187], "user": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 205], "valid": [0, 2, 4, 24, 25, 26, 27, 35, 36, 58, 69, 85, 87, 117, 119, 133, 135, 145, 151, 153, 168, 170, 180, 185, 201, 205], "licens": [0, 36, 39, 71, 119, 149, 153, 188], "did": [0, 103], "receiv": 0, "contact": [0, 36, 188], "u": [0, 35, 36, 39, 69, 115, 119, 145, 153, 180, 201], "href": [0, 183], "mailto": 0, "info": [0, 4, 24, 25, 26, 27, 58, 69, 85, 93, 117, 126, 135, 145, 151, 160, 170, 180], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 205, 206, 208, 214, 216, 218], "simpl": [0, 53], "piec": [0, 15], "import": [0, 2, 4, 6, 8, 11, 12, 16, 17, 19, 21, 22, 23, 30, 31, 32, 33, 35, 37, 40, 45, 46, 47, 49, 50, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 74, 85, 86, 90, 94, 103, 107, 117, 119, 120, 123, 124, 126, 129, 132, 133, 134, 142, 144, 145, 149, 151, 153, 154, 157, 158, 160, 163, 167, 168, 169, 176, 179, 180, 185, 190, 192, 198, 205, 207], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 2, 14, 24, 29, 30, 31, 32, 49, 50, 53, 69, 73, 79, 86, 88, 93, 98, 99, 100, 113, 126, 129, 130, 132, 138, 139, 140, 144, 145, 147, 149, 160, 163, 164, 167, 173, 174, 175, 179, 180, 181, 188, 189, 192, 194, 203, 205, 212, 217], "flexibl": 0, "pyspark": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 188, 189, 190, 203, 205, 212], "sql": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 188, 189, 190, 203, 205, 209, 212], "builder": [0, 104, 149, 196], "appnam": [0, 149], "enterpris": 0, "master": [0, 149], "local": [0, 4, 14, 24, 29, 30, 31, 32, 35, 47, 49, 50, 58, 69, 73, 79, 85, 88, 93, 98, 99, 100, 117, 119, 126, 130, 132, 133, 138, 139, 140, 144, 145, 147, 149, 151, 153, 160, 164, 167, 168, 173, 174, 175, 179, 180, 181, 183], "config": [0, 33, 149], "driver": [0, 149, 188], "memori": [0, 30, 32, 53, 69, 79, 104, 132, 138, 144, 145, 149, 167, 173, 179, 180], "16": [0, 11, 190, 205], "maxresults": [0, 149], "2g": 0, "serial": [0, 4, 14, 30, 31, 32, 49, 50, 53, 69, 73, 79, 88, 97, 98, 99, 100, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 149, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181, 193, 208], "org": [0, 44, 93, 149, 205], "kryoseri": [0, 149], "buffer": [0, 14, 49, 50, 149], "max": [0, 2, 4, 6, 14, 17, 19, 23, 29, 30, 31, 32, 49, 50, 73, 88, 97, 98, 99, 100, 117, 123, 124, 130, 132, 134, 137, 139, 140, 144, 147, 149, 151, 157, 158, 164, 167, 169, 172, 174, 175, 179, 181], "2000m": [0, 149], "jar": [0, 2, 149, 203, 212], "nlp_2": [0, 149], "12": [0, 11, 37, 74, 149, 190, 205], "version_publ": 0, "getorcr": [0, 149], "main": [1, 53], "page": [1, 6, 218], "workshop": [1, 2, 45, 69, 120, 133, 145, 154, 168, 180], "hub": [1, 6, 30, 31, 50, 69, 85, 86, 93, 132, 133, 144, 145, 167, 168, 179, 180, 187], "welcom": 1, "python": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 192, 194, 198, 199, 200, 208], "legal": [1, 8, 17, 19, 30, 31, 32, 33, 69, 73, 85, 86, 88, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 144, 145, 147, 149, 193], "financ": [1, 8, 17, 19, 30, 31, 32, 33, 69, 73, 85, 86, 88, 149, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 179, 181, 193], "contain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 190, 194, 198, 199, 200, 205, 216, 217], "how": [1, 12, 14, 17, 19, 24, 25, 26, 27, 30, 31, 32, 41, 44, 47, 53, 58, 63, 64, 69, 71, 80, 85, 90, 94, 97, 98, 103, 123, 124, 132, 133, 135, 137, 139, 142, 144, 145, 157, 158, 167, 168, 170, 172, 174, 176, 179, 180], "exampl": [1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 30, 31, 32, 33, 37, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 73, 74, 75, 79, 80, 85, 86, 87, 88, 90, 93, 94, 95, 99, 100, 103, 104, 107, 117, 120, 123, 124, 126, 129, 130, 132, 133, 134, 138, 140, 142, 144, 145, 147, 151, 154, 157, 158, 160, 163, 164, 167, 168, 169, 173, 175, 176, 179, 180, 181, 185, 188, 190, 202], "get": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186, 203], "requir": [1, 2, 4, 6, 14, 22, 23, 30, 32, 41, 45, 47, 49, 50, 69, 83, 93, 94, 120, 132, 134, 144, 145, 151, 154, 167, 169, 179, 180, 190, 192, 198, 206], "instal": [1, 2, 206], "session": [1, 2, 190, 192, 198, 203, 212, 217], "from": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 190, 198, 199, 202, 203, 205, 217], "api": [1, 80], "function": [2, 4, 17, 19, 26, 27, 39, 56, 71, 93, 104, 105, 115, 117, 123, 124, 126, 151, 157, 158, 160, 184, 185, 186, 190, 214, 218], "manipul": 2, "an": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 190, 192, 203, 212, 214, 218], "nlp": [2, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 98, 99, 100, 103, 107, 120, 132, 133, 135, 138, 139, 140, 144, 145, 149, 154, 167, 168, 170, 173, 174, 175, 179, 180, 185, 187, 190, 193, 203, 205, 212, 218], "json": [2, 16, 17, 19, 33, 35, 53, 115, 119, 123, 124, 142, 153, 157, 158, 176, 190, 203, 205, 217], "export": [2, 190, 203], "appropri": [2, 5], "layout": 2, "ner": [2, 4, 6, 8, 14, 15, 16, 17, 19, 21, 24, 31, 35, 36, 37, 40, 42, 44, 47, 49, 50, 57, 61, 64, 66, 80, 87, 88, 116, 117, 119, 123, 124, 130, 131, 142, 143, 149, 151, 153, 157, 158, 164, 165, 176, 177, 185, 190, 193, 203, 212], "annotationlab": 2, "interfac": [2, 93], "john": [2, 37, 39, 40, 42, 53, 80, 83, 103, 149, 205], "snow": [2, 53, 149, 205], "tool": 2, "multi": [2, 17, 19, 24, 25, 26, 27, 30, 31, 32, 35, 39, 58, 85, 119, 123, 124, 132, 133, 135, 144, 153, 157, 158, 167, 168, 170, 179], "modal": 2, "allow": [2, 4, 14, 17, 19, 30, 32, 42, 46, 47, 57, 83, 85, 86, 95, 100, 103, 117, 123, 124, 129, 132, 144, 148, 151, 157, 158, 163, 167, 179, 186, 188, 201, 214], "team": 2, "effici": 2, "collabor": 2, "ml": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 193, 212], "automat": [2, 35, 36, 39, 80, 88, 119, 130, 153, 164], "those": [2, 14, 37, 47, 71, 87, 148], "programmat": 2, "through": [2, 33, 203], "conll": [2, 69, 145, 180, 190, 193, 203, 217], "format": [2, 4, 33, 35, 36, 39, 40, 53, 57, 63, 64, 68, 69, 71, 74, 83, 90, 117, 119, 133, 145, 151, 153, 168, 180, 188, 190, 201, 205, 212, 217], "file": [2, 4, 16, 24, 25, 26, 27, 33, 35, 36, 39, 40, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 115, 117, 119, 126, 133, 135, 145, 149, 151, 153, 160, 168, 170, 180, 188, 190, 191, 199, 200, 201, 203, 205, 211, 212, 217], "csv": [2, 16, 33, 35, 40, 42, 53, 55, 64, 69, 71, 115, 119, 133, 145, 153, 168, 180, 190, 205], "excel": 2, "classif": [2, 58, 61, 88, 132, 133, 134, 144, 149, 167, 168, 169, 179, 185, 193, 214], "build": [2, 21, 104, 192, 194, 198], "preannot": 2, "spark": [2, 3, 4, 6, 8, 11, 13, 14, 16, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 57, 58, 63, 64, 66, 68, 69, 71, 73, 74, 75, 79, 85, 86, 87, 88, 90, 93, 94, 95, 98, 99, 100, 103, 107, 113, 115, 116, 117, 119, 120, 126, 129, 130, 132, 133, 135, 138, 139, 140, 144, 145, 147, 149, 151, 153, 154, 160, 163, 164, 167, 168, 170, 173, 174, 175, 179, 180, 181, 183, 185, 187, 188, 189, 190, 192, 193, 194, 198, 200, 203, 205, 212, 217, 218], "save": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 190, 202, 212, 217], "upload": [2, 149, 196], "project": [2, 103], "interact": [2, 148, 188], "instanc": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 188, 189, 192], "set": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 190, 191, 198, 203, 205, 212, 214], "up": [2, 14, 29, 49, 50, 73, 94, 104, 133, 147, 168, 181], "list": [2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 198, 201, 203, 205, 208, 211, 212, 214, 216, 217, 218], "all": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 198, 200, 201, 203, 205, 212, 218], "creat": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186, 190, 205], "new": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 190, 199, 201, 214, 216], "delet": [2, 214], "edit": [2, 17, 19, 123, 124, 157, 158], "configur": [2, 8, 35, 60, 107, 192, 198], "ani": [2, 3, 7, 21, 35, 36, 37, 39, 47, 50, 53, 57, 64, 69, 83, 85, 87, 95, 104, 119, 145, 148, 153, 180], "exist": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 199, 201], "task": [2, 30, 31, 32, 88, 97, 98, 130, 132, 137, 139, 144, 164, 167, 172, 174, 179, 190, 203], "usag": [2, 53, 69, 71, 75, 79, 133, 138, 145, 168, 173, 180], "detail": [2, 75, 85, 148, 183, 186], "tutori": 2, "base_url": 2, "none": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 187, 188, 190, 192, 194, 199, 200, 201, 202, 203, 205, 206, 212, 216], "client_id": 2, "client_secret": 2, "cooki": 2, "http_success_cod": 2, "200": [2, 85, 103, 104, 212], "201": 2, "203": 2, "password": 2, "usernam": [2, 188], "create_project": 2, "project_nam": 2, "project_descript": 2, "project_sampl": 2, "project_instruct": 2, "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 150, 151, 153, 154, 157, 158, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 202, 203, 205, 206, 211, 212, 214, 215, 216, 217], "str": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 113, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 202, 203, 205, 206, 208, 211, 212, 214, 215, 216, 217], "descript": [2, 4, 14, 24, 25, 26, 27, 58, 69, 79, 85, 93, 117, 126, 135, 138, 145, 151, 160, 170, 173, 180, 190, 199, 214], "random": [2, 35, 36, 37, 39, 69, 72, 77, 79, 97, 98, 99, 100, 119, 120, 133, 137, 138, 139, 140, 145, 153, 154, 168, 172, 173, 174, 175, 180, 183, 188, 212], "sequenti": [2, 4, 6, 7, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "sampl": [2, 21, 37, 77, 79, 97, 98, 99, 100, 120, 137, 138, 139, 140, 154, 172, 173, 174, 175, 183, 202], "while": [2, 5, 35, 36, 69, 74, 93, 97, 98, 104, 119, 126, 133, 137, 139, 145, 153, 160, 168, 172, 174, 180], "show": [2, 4, 5, 8, 11, 12, 14, 15, 16, 17, 19, 21, 24, 29, 30, 31, 32, 33, 35, 37, 40, 41, 44, 45, 46, 47, 49, 50, 53, 57, 63, 64, 66, 68, 73, 74, 75, 79, 80, 85, 86, 87, 88, 90, 94, 99, 100, 103, 107, 117, 119, 120, 123, 124, 129, 130, 132, 133, 138, 140, 142, 144, 147, 151, 153, 154, 157, 158, 163, 164, 167, 168, 173, 175, 176, 179, 181, 187, 190, 193, 205, 212], "guidelin": 2, "return": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 113, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 198, 199, 200, 203, 206, 208, 211, 212, 214, 215, 216, 217], "type": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 198, 199, 200, 203, 205, 206, 211, 212, 214, 216, 217], "dict": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 194, 198, 199, 200, 203, 205, 208, 214, 216, 217], "delete_project": 2, "confirm": [2, 46], "fals": [2, 4, 5, 6, 7, 8, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 57, 58, 63, 64, 66, 68, 69, 70, 71, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 93, 94, 95, 99, 100, 103, 104, 107, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 175, 176, 179, 180, 181, 183, 185, 188, 190, 203, 205, 206, 208, 212, 216], "boolean": [2, 15, 35, 36, 64, 72, 90, 104, 119, 153, 191], "true": [2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 115, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 187, 188, 190, 191, 198, 203, 205, 206, 211, 212, 216], "input": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 198, 203, 205, 212, 217], "default": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 111, 113, 114, 117, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186, 187, 188, 190, 194, 201, 203, 208, 211, 212, 216, 217], "delete_task": 2, "task_id": [2, 190], "id": [2, 13, 36, 37, 39, 45, 53, 77, 79, 93, 97, 98, 99, 100, 115, 119, 120, 137, 138, 139, 140, 153, 154, 172, 173, 174, 175, 185, 188, 189, 190, 203, 217], "generate_preannot": 2, "all_result": 2, "document_column": 2, "ner_column": 2, "assertion_column": 2, "relations_column": 2, "user_nam": 2, "titles_list": 2, "id_offset": 2, "int": [2, 3, 4, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 36, 37, 39, 40, 44, 49, 50, 51, 58, 69, 72, 73, 74, 77, 79, 83, 85, 86, 87, 88, 93, 95, 97, 98, 99, 100, 103, 104, 107, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 179, 180, 181, 185, 188, 190, 194, 202, 205, 212, 214, 216, 217], "directli": [2, 85, 186, 187], "object": [2, 18, 30, 31, 32, 69, 77, 85, 104, 116, 132, 133, 144, 145, 167, 168, 179, 180, 184, 186, 187, 201, 209, 214, 215], "light_pipelin": 2, "fullannot": [2, 3, 42, 185], "full_pipelin": 2, "df": [2, 74, 116, 184, 188, 189, 190], "collect": [2, 4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 55, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "output": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 203, 212, 217], "column": [2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 184, 185, 188, 189, 190, 203, 205], "documentassembl": [2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 24, 29, 30, 31, 32, 33, 35, 37, 40, 42, 44, 45, 46, 47, 49, 50, 53, 57, 63, 64, 66, 68, 69, 70, 71, 73, 74, 75, 85, 86, 87, 88, 90, 93, 94, 95, 99, 100, 103, 107, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 175, 176, 179, 180, 181, 193, 203], "stage": [2, 4, 6, 8, 12, 13, 16, 21, 33, 35, 40, 42, 44, 57, 64, 68, 70, 71, 74, 75, 79, 85, 86, 87, 93, 99, 100, 107, 117, 119, 126, 129, 138, 140, 148, 151, 153, 160, 163, 173, 175, 186], "chunk": [2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 33, 35, 36, 37, 39, 40, 44, 45, 47, 49, 50, 53, 56, 63, 64, 66, 68, 70, 71, 72, 74, 79, 80, 85, 86, 87, 88, 90, 93, 94, 95, 97, 98, 99, 100, 103, 117, 119, 120, 123, 124, 126, 129, 130, 134, 137, 138, 139, 140, 142, 151, 153, 154, 157, 158, 160, 163, 164, 169, 172, 173, 174, 175, 176, 185, 190, 191, 205, 211, 212, 216], "custom": [2, 4, 6, 33, 35, 39, 79, 85, 86, 93, 99, 100, 103, 114, 115, 119, 129, 138, 140, 150, 153, 163, 173, 175], "titl": [2, 15, 83, 190, 203], "when": [2, 4, 5, 7, 8, 15, 33, 35, 36, 39, 42, 47, 50, 57, 64, 69, 70, 71, 72, 74, 80, 81, 83, 85, 93, 97, 98, 99, 100, 103, 117, 119, 126, 137, 139, 140, 142, 145, 148, 151, 153, 160, 172, 174, 175, 176, 180, 187, 190, 206], "older": [2, 35, 36, 47, 119, 153], "ar": [2, 4, 7, 8, 12, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 40, 41, 42, 44, 46, 47, 49, 50, 53, 56, 57, 58, 60, 64, 66, 69, 71, 72, 73, 75, 77, 79, 81, 83, 85, 86, 87, 88, 93, 95, 97, 98, 99, 100, 103, 104, 105, 113, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 148, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 179, 180, 181, 185, 186, 188, 190, 201, 203, 205, 214, 216], "alreadi": [2, 22, 23, 69, 85, 93, 126, 134, 145, 160, 169, 180], "defin": [2, 6, 7, 8, 12, 15, 16, 21, 22, 23, 33, 42, 46, 47, 50, 56, 64, 66, 69, 71, 74, 87, 93, 104, 105, 134, 145, 169, 180, 185, 203], "offeset": 2, "avoid": [2, 5, 14, 183], "overrit": 2, "get_iaa_metr": 2, "conll_dir": 2, "annotator_nam": 2, "set_ref_annot": 2, "return_nerdlmetr": 2, "bool": [2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 187, 188, 190, 191, 192, 194, 198, 203, 205, 206, 208, 211, 212, 216], "save_dir": [2, 212], "results_token_bas": 2, "iaa": 2, "metric": [2, 4, 69, 117, 145, 151, 180, 191, 211, 216], "param": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 193, 203, 208, 212], "path": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 190, 191, 199, 200, 201, 202, 203, 205, 211, 212, 217], "present": [2, 4, 5, 8, 11, 12, 24, 57, 64, 66, 68, 69, 71, 93, 107, 117, 126, 133, 145, 151, 160, 168, 180, 185, 214], "comparison": [2, 49], "made": [2, 64, 104, 185], "respect": [2, 214], "By": [2, 14, 50, 69, 87, 145, 180], "we": [2, 16, 17, 19, 22, 23, 24, 25, 26, 27, 35, 36, 44, 50, 58, 69, 80, 83, 85, 93, 119, 123, 124, 126, 133, 134, 135, 142, 153, 157, 158, 160, 168, 169, 170, 176], "full": [2, 17, 19, 75, 79, 123, 124, 138, 148, 157, 158, 173], "partial": [2, 17, 19, 123, 124, 148, 157, 158], "per": [2, 4, 6, 30, 32, 35, 36, 44, 58, 69, 71, 85, 88, 117, 119, 130, 132, 133, 145, 151, 153, 164, 167, 168, 180, 191, 211, 216], "token": [2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 19, 21, 22, 23, 24, 29, 30, 31, 32, 33, 35, 37, 40, 42, 44, 45, 46, 47, 49, 50, 53, 57, 63, 64, 66, 68, 69, 70, 71, 73, 77, 79, 85, 86, 87, 88, 93, 95, 97, 98, 99, 100, 103, 104, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 172, 173, 174, 175, 176, 179, 180, 181, 183, 190, 193, 203, 217], "datafram": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 188, 189, 190, 191, 203, 205], "nerdlmetr": [2, 116, 193], "evalu": [2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 191, 211], "method": [2, 14, 24, 25, 26, 27, 33, 35, 40, 58, 71, 85, 103, 104, 111, 114, 119, 126, 135, 153, 160, 170, 185, 186, 190, 200, 205, 214, 218], "report": [2, 8, 202], "result": [2, 4, 5, 8, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 73, 74, 75, 79, 81, 85, 86, 87, 88, 90, 93, 94, 99, 100, 103, 107, 115, 117, 119, 120, 123, 124, 129, 130, 132, 133, 134, 135, 138, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 163, 164, 167, 168, 169, 170, 173, 175, 176, 179, 180, 181, 185, 191, 192, 194, 200, 205, 213], "get_all_project": 2, "visibl": [2, 35, 36, 39, 119, 153], "rtype": [2, 160, 203], "get_annot": 2, "output_nam": 2, "where": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 190, 201, 216, 217], "write": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 212, 217], "directori": [2, 187, 200, 217], "locat": [2, 8, 17, 19, 30, 31, 32, 33, 44, 53, 69, 71, 73, 85, 86, 88, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 179, 180, 181, 187, 188, 201], "get_assertion_data": 2, "input_json_path": [2, 203], "assertion_label": [2, 190, 203], "relevant_ner_label": 2, "ground_truth": [2, 93, 190, 203], "unannotated_label": 2, "regex_pattern": [2, 203], "unannotated_label_strategi": 2, "unannotated_label_strategy_dict": 2, "included_task_id": 2, "excluded_task_id": [2, 203], "excluded_task_titl": [2, 203], "seed": [2, 35, 36, 37, 39, 40, 69, 72, 77, 79, 97, 98, 99, 100, 119, 120, 133, 137, 138, 139, 140, 145, 153, 154, 168, 172, 173, 174, 175, 180, 183, 188], "panda": [2, 37, 203], "label": [2, 4, 5, 6, 7, 12, 15, 16, 18, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 36, 39, 46, 47, 53, 56, 58, 64, 66, 68, 69, 71, 73, 85, 86, 88, 92, 93, 104, 105, 116, 117, 119, 126, 129, 130, 132, 133, 134, 135, 144, 145, 147, 150, 151, 153, 160, 163, 164, 167, 168, 169, 170, 179, 180, 181, 185, 190, 191, 203, 212, 217], "relev": [2, 14, 190], "assign": [2, 53], "select": [2, 4, 5, 7, 12, 14, 15, 17, 19, 30, 31, 32, 35, 36, 37, 39, 40, 41, 50, 51, 57, 64, 73, 79, 80, 83, 85, 86, 93, 99, 100, 117, 119, 123, 124, 126, 129, 132, 138, 140, 142, 144, 147, 151, 153, 157, 158, 160, 163, 167, 173, 175, 176, 179, 181, 188, 203], "ground": [2, 93, 203], "truth": [2, 93, 203], "complet": [2, 203], "latest": [2, 203], "pattern": [2, 8, 35, 36, 53, 64, 70, 75, 79, 90, 103, 119, 138, 148, 153, 173, 203], "regex": [2, 3, 8, 12, 13, 16, 33, 35, 36, 39, 53, 56, 61, 64, 70, 71, 83, 95, 103, 119, 149, 153, 193, 203], "regular": [2, 6, 12, 16, 35, 64, 90, 103, 104, 119, 153, 203], "strategi": [2, 7, 35, 36, 64, 80, 90, 103, 119, 142, 153, 176], "control": [2, 4, 12, 69, 75, 117, 151], "number": [2, 4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 35, 36, 37, 39, 51, 53, 58, 64, 69, 77, 79, 80, 83, 85, 86, 87, 93, 97, 98, 99, 100, 104, 117, 119, 120, 123, 124, 126, 129, 133, 134, 135, 137, 138, 139, 140, 142, 145, 151, 153, 154, 157, 158, 160, 163, 168, 169, 170, 172, 173, 174, 175, 176, 180, 183, 188, 194, 202, 216], "occurr": [2, 69, 93, 145, 180], "unannot": 2, "option": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 187, 188, 190, 192, 194, 212, 216, 217], "count": [2, 69, 145, 180, 216], "fraction": 2, "absolut": 2, "dictionari": [2, 5, 6, 17, 19, 33, 39, 50, 64, 71, 73, 83, 85, 86, 88, 90, 95, 100, 123, 124, 129, 130, 142, 147, 148, 157, 158, 163, 164, 176, 181, 185, 186, 194, 198, 199, 200, 205, 217], "entity_label": [2, 35, 36, 39, 115, 119, 153], "sample_weight_or_count": 2, "should": [2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186, 187, 190, 192, 198, 201, 205], "between": [2, 4, 14, 15, 25, 26, 27, 35, 36, 39, 47, 49, 50, 51, 63, 66, 69, 70, 71, 75, 81, 83, 85, 86, 87, 88, 93, 103, 104, 117, 119, 129, 130, 133, 135, 145, 151, 153, 163, 164, 168, 170, 180, 188, 190, 208, 214, 216], "exclud": [2, 6, 8, 69, 93, 126, 145, 160, 180, 190, 203], "same": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 205], "everi": [2, 35, 69, 119, 145, 153, 180, 187], "time": [2, 21, 35, 36, 39, 40, 66, 69, 97, 98, 104, 119, 133, 137, 139, 145, 153, 168, 172, 174, 180, 194, 214], "execut": [2, 35, 36, 39, 40, 119, 153, 192, 198, 215], "pd": [2, 37, 203], "get_classification_data": 2, "get_conll_data": 2, "exported_conl": 2, "excluded_label": [2, 190, 203], "io": [2, 193, 212], "irrelev": [2, 203], "get_conll_data_from_visualn": 2, "visualn": [2, 217], "get_project_config": 2, "get_relation_extraction_data": 2, "negative_rel": 2, "relation_pair": 2, "negative_relation_strategi": 2, "negative_relation_strategy_dict": 2, "doc_wise_annot": [2, 203], "wa": [2, 4, 6, 8, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 37, 40, 42, 44, 50, 53, 58, 63, 64, 66, 69, 71, 80, 85, 90, 93, 103, 104, 107, 109, 117, 119, 123, 124, 126, 133, 134, 135, 142, 145, 148, 151, 153, 157, 158, 160, 168, 169, 170, 176, 180, 185, 194, 205], "were": [2, 8, 18, 69, 145, 180, 203, 214], "want": [2, 3, 4, 15, 17, 19, 33, 35, 36, 39, 44, 50, 53, 69, 72, 79, 80, 85, 87, 93, 95, 117, 119, 123, 124, 138, 142, 151, 153, 157, 158, 173, 176, 188], "discard": [2, 73, 147, 181], "rest": [2, 7, 12, 16, 21, 35, 36, 46, 47, 56, 64, 66, 71, 105, 119, 153], "plausibl": 2, "pair": [2, 7, 16, 50, 64, 71, 80, 85, 86, 87, 88, 129, 130, 142, 163, 164, 176, 198], "separ": [2, 7, 14, 35, 40, 64, 66, 69, 71, 81, 83, 85, 87, 90, 103, 115, 119, 145, 153, 180, 205, 208], "case": [2, 4, 5, 7, 8, 12, 14, 16, 17, 19, 29, 30, 31, 32, 33, 35, 39, 45, 46, 47, 49, 50, 53, 56, 63, 64, 66, 69, 71, 73, 79, 80, 83, 85, 86, 87, 88, 93, 97, 98, 99, 100, 103, 105, 117, 119, 120, 123, 124, 126, 129, 130, 132, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 172, 173, 174, 175, 176, 179, 180, 181, 216], "one": [2, 3, 4, 6, 8, 12, 16, 17, 19, 22, 23, 24, 25, 26, 27, 30, 32, 33, 35, 36, 40, 42, 44, 48, 49, 50, 53, 58, 60, 63, 64, 66, 69, 71, 80, 83, 85, 86, 87, 88, 90, 93, 103, 104, 109, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 142, 145, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 176, 180, 188, 199, 201, 205], "direct": [2, 8, 85, 86, 87, 104, 129, 163, 185], "possibl": [2, 3, 4, 7, 12, 14, 16, 17, 18, 19, 23, 24, 25, 26, 27, 33, 35, 36, 50, 53, 56, 58, 64, 71, 75, 85, 87, 95, 101, 103, 104, 117, 119, 123, 124, 134, 135, 151, 153, 157, 158, 169, 170, 186], "neg": [2, 4, 8, 9, 79, 85, 88, 117, 130, 138, 151, 164, 173, 185, 216], "entity1": [2, 80, 85, 86, 87, 129, 163, 185], "entity2": [2, 80, 85, 86, 87, 129, 163, 185], "each": [2, 4, 6, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 49, 50, 53, 57, 58, 63, 64, 69, 71, 72, 79, 80, 85, 87, 88, 90, 93, 103, 104, 109, 117, 119, 123, 124, 126, 130, 133, 134, 135, 138, 142, 145, 151, 153, 157, 158, 160, 164, 168, 169, 170, 173, 176, 180, 185, 201, 203, 205, 212], "repres": [2, 14, 15, 16, 35, 36, 53, 63, 64, 93, 104, 119, 153, 185, 186, 212, 214], "wise": [2, 69, 145, 180, 203], "done": [2, 6, 69, 133, 145, 168, 180], "cross": 2, "sentenc": [2, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 24, 25, 29, 30, 31, 32, 33, 35, 36, 40, 42, 44, 46, 47, 49, 50, 51, 53, 57, 63, 64, 66, 68, 69, 70, 71, 72, 73, 86, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 107, 115, 117, 119, 123, 124, 126, 129, 130, 132, 133, 135, 137, 139, 140, 142, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 170, 172, 174, 175, 176, 179, 180, 181, 185, 190, 203], "review_annot": 2, "conll_path": 2, "ner_model_path": [2, 69, 145, 180], "review": [2, 116, 190], "predict": [2, 4, 22, 23, 24, 25, 26, 27, 44, 58, 69, 85, 117, 134, 135, 145, 151, 169, 170, 180, 183, 191, 211, 216], "tag": [2, 4, 16, 35, 36, 64, 68, 69, 70, 71, 85, 117, 119, 133, 145, 151, 153, 168, 180, 191, 193, 211, 216], "compar": [2, 12, 14, 16, 56, 64, 71], "origin": [2, 17, 19, 22, 23, 35, 36, 39, 40, 42, 71, 74, 93, 104, 119, 123, 124, 126, 134, 148, 153, 157, 158, 160, 169, 183, 185, 216], "tupl": [2, 4, 5, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 72, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 149, 151, 153, 157, 158, 160, 168, 169, 170, 180, 198, 212, 216], "chunk_based_comparison_df": 2, "token_based_comparision_df": 2, "chunk_frequency_df": 2, "metrics_result": 2, "set_credenti": 2, "annotationlab_url": 2, "credenti": [2, 149], "connect": [2, 104], "your": [2, 15, 47, 63, 69, 90, 104, 133, 145, 149, 168, 180, 188], "client": 2, "ha": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 212], "set_project_config": 2, "classification_label": 2, "ner_label": [2, 8, 68, 185, 190], "relations_label": 2, "d": [2, 35, 36, 83, 90, 119, 153, 188], "multiclass": [2, 24, 25, 26, 27, 58, 85, 135, 170], "differ": [2, 14, 55, 64, 69, 85, 87, 104, 145, 148, 180, 190, 212, 214], "upload_preannot": 2, "upload_task": 2, "task_list": 2, "title_list": 2, "length": [2, 4, 6, 7, 14, 29, 30, 31, 32, 35, 36, 39, 40, 44, 49, 50, 64, 73, 77, 79, 88, 97, 98, 99, 100, 103, 104, 117, 119, 130, 132, 137, 138, 139, 140, 144, 147, 151, 153, 164, 167, 172, 173, 174, 175, 179, 181], "equal": [2, 16, 49, 50, 64, 69, 83, 97, 98, 137, 139, 145, 172, 174, 180], "increment": [2, 103], "offset": [2, 4, 8, 9, 85, 117, 151], "batch": [2, 4, 14, 24, 25, 26, 27, 29, 30, 31, 32, 49, 50, 58, 69, 73, 79, 85, 88, 97, 98, 99, 100, 104, 117, 130, 132, 133, 135, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181], "annotationmerg": [3, 193], "classnam": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 193], "java_model": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 107, 110, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "common": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 99, 103, 107, 117, 119, 120, 123, 124, 126, 129, 134, 142, 145, 148, 149, 151, 153, 154, 157, 158, 160, 163, 169, 176, 180, 193], "annotatormodelintern": [3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 83, 86, 92, 93, 95, 97, 99, 103, 107, 110, 124, 158], "merg": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 61, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 192, 193], "multipl": [3, 39, 47, 50, 53, 88, 130, 164], "inputtyp": [3, 95], "valu": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 193, 198, 201, 205, 208, 216], "wordpiec": [3, 95, 193], "word_embed": [3, 4, 6, 8, 21, 37, 42, 44, 47, 57, 69, 85, 95, 117, 133, 145, 151, 168, 180], "sentence_embed": [3, 25, 44, 49, 50, 93, 94, 95, 126, 133, 135, 160, 168, 170], "categori": [3, 22, 23, 25, 26, 27, 29, 30, 32, 46, 58, 85, 86, 88, 95, 129, 130, 132, 133, 134, 135, 150, 163, 164, 167, 168, 169, 170, 185, 214], "sentiment": [3, 95, 133, 168], "po": [3, 16, 69, 85, 95, 116, 145, 180, 193, 203], "named_ent": [3, 31, 68, 69, 70, 71, 73, 95, 133, 144, 145, 147, 168, 179, 180, 181, 190], "depend": [3, 14, 18, 29, 49, 50, 53, 69, 73, 79, 85, 86, 87, 88, 92, 95, 104, 129, 130, 138, 145, 147, 163, 164, 173, 180, 181, 203], "labeled_depend": [3, 17, 19, 21, 95, 123, 124, 142, 157, 158, 176], "languag": [3, 4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 40, 44, 45, 49, 50, 53, 58, 63, 64, 69, 73, 79, 85, 86, 88, 90, 93, 95, 98, 99, 100, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 179, 180, 181, 186, 187, 188, 190, 201, 205], "keyword": [3, 8, 14, 61, 95, 193, 209], "empty_data": [3, 37, 42, 93], "createdatafram": [3, 4, 8, 11, 13, 14, 16, 21, 24, 29, 30, 31, 32, 33, 35, 37, 40, 42, 44, 45, 46, 47, 49, 50, 53, 57, 63, 64, 66, 68, 69, 71, 73, 74, 75, 79, 85, 86, 88, 90, 93, 94, 95, 99, 100, 107, 117, 119, 120, 129, 130, 132, 133, 138, 140, 144, 145, 147, 151, 153, 154, 163, 164, 167, 168, 173, 175, 179, 180, 181], "todf": [3, 4, 8, 11, 13, 14, 16, 21, 24, 29, 30, 31, 32, 33, 35, 37, 40, 42, 44, 45, 46, 47, 49, 50, 53, 57, 63, 64, 66, 68, 69, 71, 73, 74, 75, 79, 85, 86, 87, 88, 90, 93, 94, 95, 99, 100, 103, 107, 117, 119, 120, 129, 130, 132, 133, 138, 140, 144, 145, 147, 151, 153, 154, 163, 164, 167, 168, 173, 175, 179, 180, 181], "document1": 3, "setinputcol": [3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 205], "setoutputcol": [3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 205], "document2": [3, 37], "setinputtyp": [3, 95], "all_doc": 3, "pipelinemodel": [3, 22, 23, 69, 133, 134, 145, 168, 169, 180, 184, 186, 193, 212], "setstag": [3, 5, 11, 14, 15, 17, 19, 22, 23, 24, 29, 30, 31, 32, 37, 45, 46, 47, 49, 50, 53, 55, 58, 63, 66, 69, 73, 88, 90, 94, 95, 103, 120, 123, 124, 130, 132, 133, 134, 142, 144, 145, 147, 154, 157, 158, 164, 167, 168, 169, 176, 179, 180, 181], "fit": [3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 49, 50, 53, 55, 57, 58, 63, 64, 66, 69, 70, 71, 73, 74, 75, 79, 80, 85, 86, 87, 88, 90, 93, 94, 99, 100, 103, 104, 107, 109, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 175, 176, 179, 180, 181, 212], "lp": 3, "lightpipelin": [3, 42, 193, 203], "doc": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "replic": 3, "23": [3, 13, 90, 148], "getter_attr": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "inputannotatortyp": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 186], "inputcol": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 186], "lazyannot": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "optionalinputannotatortyp": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "outputannotatortyp": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 186], "outputcol": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 186, 212], "skiplpinputcolsvalid": [3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 83, 85, 86, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 123, 124, 126, 129, 130, 132, 134, 135, 137, 138, 139, 140, 142, 144, 145, 151, 153, 157, 158, 160, 163, 164, 167, 169, 170, 172, 173, 174, 175, 176, 179, 180], "clear": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "map": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 188, 190, 198, 208, 214], "been": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "explicitli": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "copi": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 187], "uid": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 186], "some": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 214], "implement": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "call": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "companion": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "compon": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "so": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "both": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186, 188, 199, 200], "wrapper": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 208], "javaparam": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "explainparam": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "explain": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "singl": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 203, 212], "its": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "suppli": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "string": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 189, 190, 193, 198, 201, 205, 208], "extractparammap": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "them": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186], "flat": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "latter": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "conflict": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "order": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "getinputcol": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "current": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 113, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 189, 206, 214, 216], "getlazyannot": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "whether": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 191, 192, 194, 198, 206, 208, 211], "lazili": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "recursivepipelin": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 193], "getordefault": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "rais": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 192, 206], "error": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 206], "neither": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "getoutputcol": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "getparam": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "paramnam": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "getparamvalu": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "hasdefault": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "hasparam": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "given": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 115, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 186, 198, 200, 201, 206, 214], "inputcolsvalid": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "isdefin": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "isset": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "classmethod": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "load": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 187, 190, 198, 199], "read": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 190, 193], "shortcut": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "mlreader": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "setforceinputtypevalid": [3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 83, 85, 86, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 123, 124, 126, 129, 130, 132, 134, 135, 137, 138, 139, 140, 142, 144, 145, 151, 153, 157, 158, 160, 163, 164, 167, 169, 170, 172, 173, 174, 175, 176, 179, 180], "etfm": [3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 44, 46, 47, 48, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 83, 85, 86, 88, 90, 92, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 123, 124, 126, 129, 130, 132, 134, 135, 137, 138, 139, 140, 142, 144, 145, 151, 153, 157, 158, 160, 163, 164, 167, 169, 170, 172, 173, 174, 175, 176, 179, 180], "filter": [3, 7, 12, 16, 18, 21, 46, 47, 56, 64, 66, 71, 77, 79, 83, 85, 87, 95, 97, 98, 99, 100, 105, 137, 138, 139, 140, 172, 173, 174, 175, 187, 190, 201], "setlazyannot": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "setparamvalu": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "setparam": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "dataset": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 190, 193], "overrid": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 114, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183], "mlwriter": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 107, 109, 110, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181], "assertiondlapproach": [4, 104, 117, 151, 193], "annotatorapproachintern": [4, 6, 16, 17, 19, 22, 23, 33, 35, 40, 44, 53, 58, 63, 64, 69, 90, 93, 109, 124, 158], "hasengin": [4, 14, 30, 31, 32, 49, 50, 58, 69, 73, 79, 88, 93, 97, 99, 193], "handle_exception_param": [4, 8, 16, 17, 35, 49, 58, 61, 64, 85, 86, 93, 149], "handleexceptionparam": [4, 8, 12, 16, 17, 33, 35, 49, 58, 60, 64, 85, 86, 93], "algorithm": [4, 6, 14, 22, 23, 35, 103, 117, 134, 151, 169], "deep": [4, 14, 24, 25, 26, 27, 49, 50, 58, 69, 73, 85, 93, 104, 117, 126, 133, 135, 145, 147, 151, 160, 168, 170, 180, 181], "learn": [4, 14, 24, 25, 26, 27, 49, 50, 58, 69, 73, 85, 93, 104, 117, 126, 133, 135, 145, 147, 151, 160, 168, 170, 180, 181, 183], "absent": [4, 8, 12, 24, 57, 117, 151, 190], "hypothet": [4, 12, 117, 151], "condit": [4, 47, 69, 117, 145, 151, 180, 214], "associated_with_other_person": [4, 117, 151], "etc": [4, 8, 50, 80, 93, 117, 126, 142, 151, 160, 176], "start": [4, 5, 6, 45, 64, 69, 85, 93, 117, 120, 126, 145, 149, 151, 154, 160, 180, 190, 201, 203, 205, 216], "term": [4, 22, 23, 35, 36, 39, 40, 104, 117, 119, 134, 148, 151, 153, 169, 185, 188], "end": [4, 5, 6, 7, 14, 35, 36, 39, 64, 68, 69, 80, 85, 97, 98, 99, 100, 103, 117, 119, 137, 139, 140, 142, 145, 148, 151, 153, 172, 174, 175, 176, 180, 183, 185, 190, 201, 203, 205, 216], "To": [4, 6, 12, 16, 30, 31, 32, 33, 41, 85, 90, 93, 132, 144, 167, 179, 190], "pretrain": [4, 6, 8, 14, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 37, 40, 42, 44, 46, 47, 49, 50, 53, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 79, 85, 86, 87, 88, 90, 93, 94, 95, 98, 99, 100, 115, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 142, 144, 145, 147, 149, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 176, 179, 180, 181, 183, 185, 193, 201], "assertiondlmodel": [4, 7, 12, 57, 117, 151, 193], "startcol": [4, 6, 45, 117, 120, 151, 154], "target": [4, 5, 6, 44, 45, 50, 58, 85, 86, 97, 98, 117, 120, 129, 137, 139, 150, 151, 154, 163, 172, 174, 183, 190], "endcol": [4, 6, 117, 151], "batchsiz": [4, 14, 24, 25, 26, 27, 29, 30, 31, 32, 49, 50, 58, 69, 73, 79, 85, 86, 88, 97, 98, 99, 100, 117, 129, 130, 132, 133, 135, 137, 138, 139, 140, 144, 145, 147, 151, 163, 164, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181], "size": [4, 14, 24, 25, 26, 27, 29, 30, 31, 32, 49, 50, 58, 69, 73, 77, 79, 85, 88, 97, 98, 99, 100, 103, 104, 107, 117, 130, 132, 133, 135, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181], "optim": [4, 24, 25, 26, 27, 58, 69, 85, 117, 135, 145, 151, 170, 180], "process": [4, 7, 8, 12, 14, 16, 17, 19, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 45, 46, 47, 49, 50, 56, 57, 58, 60, 64, 66, 69, 71, 73, 79, 85, 86, 87, 88, 93, 97, 98, 99, 100, 103, 104, 105, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 135, 137, 138, 139, 140, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181, 190, 194, 198, 199, 200, 212, 217], "epoch": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180, 191, 211], "learningr": [4, 24, 25, 26, 27, 58, 85, 117, 135, 151, 170], "rate": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180, 183, 190], "dropout": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180], "layer": [4, 24, 25, 26, 27, 30, 31, 32, 58, 69, 85, 104, 117, 132, 135, 144, 145, 151, 167, 170, 179, 180], "maxsentlen": [4, 117, 151], "graphfold": [4, 69, 104, 117, 145, 151, 180], "folder": [4, 14, 24, 25, 26, 27, 29, 30, 31, 32, 49, 50, 58, 69, 73, 79, 85, 86, 88, 98, 99, 100, 104, 117, 129, 130, 132, 133, 135, 138, 139, 140, 144, 145, 147, 151, 163, 164, 167, 168, 170, 173, 174, 175, 179, 180, 181, 187, 201, 212], "extern": [4, 39, 63, 64, 69, 71, 90, 104, 117, 145, 151, 180, 198], "graph": [4, 69, 85, 104, 117, 131, 145, 149, 151, 165, 180, 191, 193], "distribut": [4, 58, 69, 85, 93, 113, 117, 126, 133, 145, 151, 160, 168, 180], "hdf": [4, 58, 69, 85, 93, 117, 126, 133, 145, 151, 160, 168, 180, 201], "dbf": [4, 58, 69, 85, 93, 117, 126, 133, 145, 151, 160, 168, 180], "cloud": [4, 58, 69, 85, 93, 117, 126, 133, 145, 151, 160, 168, 180], "storag": [4, 53, 58, 69, 85, 93, 117, 126, 133, 145, 151, 160, 168, 180], "s3": [4, 44, 58, 69, 85, 93, 117, 126, 133, 145, 151, 160, 168, 180, 187, 201], "graphfil": [4, 69, 104, 117, 145, 151, 180], "specifi": [4, 5, 7, 22, 23, 24, 25, 26, 27, 35, 36, 37, 39, 42, 47, 50, 57, 58, 64, 66, 68, 69, 71, 81, 85, 87, 88, 101, 103, 117, 119, 130, 133, 134, 135, 145, 151, 153, 164, 168, 169, 170, 180, 190, 192, 198, 199, 200, 201, 214], "search": [4, 8, 44, 69, 93, 117, 126, 145, 151, 160, 180, 193, 198], "happen": [4, 69, 104, 117, 145, 151, 180], "configprotobyt": [4, 14, 30, 31, 32, 49, 50, 69, 73, 79, 88, 97, 98, 99, 100, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181], "configproto": [4, 14, 30, 31, 32, 49, 50, 69, 73, 79, 88, 97, 98, 99, 100, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181], "tensorflow": [4, 14, 30, 31, 32, 49, 50, 58, 69, 73, 79, 85, 88, 97, 98, 99, 100, 104, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181, 193], "byte": [4, 14, 30, 31, 32, 49, 50, 69, 73, 79, 88, 97, 98, 99, 100, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181], "arrai": [4, 7, 14, 22, 23, 30, 31, 32, 35, 42, 45, 49, 50, 55, 57, 64, 69, 70, 71, 73, 79, 88, 97, 98, 99, 100, 101, 117, 119, 120, 130, 132, 133, 134, 137, 138, 139, 140, 144, 145, 147, 151, 153, 154, 164, 167, 168, 169, 172, 173, 174, 175, 179, 180, 181], "config_proto": [4, 117, 151], "serializetostr": [4, 117, 151], "validationsplit": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180], "proport": [4, 69, 117, 133, 145, 151, 168, 180], "mean": [4, 8, 14, 33, 49, 50, 69, 74, 145, 180], "against": [4, 14, 53, 63, 69, 117, 133, 145, 151, 168, 180], "testdataset": [4, 69, 117, 133, 145, 151, 168, 180], "calcul": [4, 8, 14, 69, 93, 117, 126, 133, 145, 148, 151, 160, 168, 180, 205, 214], "statist": [4, 69, 117, 133, 145, 151, 168, 180], "dure": [4, 35, 36, 39, 40, 44, 60, 66, 69, 86, 117, 119, 129, 133, 145, 151, 153, 163, 168, 180, 188], "includeconfid": [4, 69, 117, 145, 151, 180], "confid": [4, 7, 8, 16, 17, 19, 24, 25, 26, 27, 29, 33, 57, 58, 64, 69, 71, 73, 85, 88, 93, 117, 123, 124, 126, 130, 135, 142, 145, 147, 151, 157, 158, 160, 164, 170, 176, 180, 181, 185, 205], "score": [4, 14, 24, 25, 26, 27, 58, 69, 73, 85, 88, 117, 130, 135, 145, 147, 148, 151, 164, 170, 180, 181, 185, 191, 211, 216], "metadata": [4, 5, 8, 12, 13, 14, 16, 24, 29, 33, 35, 36, 39, 42, 44, 50, 56, 57, 63, 64, 68, 69, 71, 72, 73, 74, 83, 85, 86, 87, 88, 95, 101, 103, 117, 119, 129, 130, 145, 147, 151, 153, 163, 164, 180, 181, 183, 189, 205], "enableoutputlog": [4, 69, 117, 133, 145, 151, 168, 180], "log": [4, 6, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180, 191, 211], "outputlogspath": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180], "won": [4, 58, 69, 85, 117, 133, 145, 151, 168, 180], "store": [4, 58, 69, 87, 111, 117, 133, 145, 151, 168, 180], "disk": [4, 58, 69, 85, 117, 133, 145, 151, 168, 180], "verbos": [4, 69, 117, 133, 145, 151, 168, 180, 191, 211, 216], "level": [4, 14, 15, 16, 33, 53, 64, 69, 117, 133, 145, 151, 168, 180, 190, 214], "scopewindow": [4, 8, 9, 85, 117, 151], "scope": [4, 8, 9, 72, 85, 117, 151], "window": [4, 8, 9, 61, 69, 85, 97, 98, 117, 137, 139, 145, 149, 151, 172, 174, 180, 193], "express": [4, 8, 9, 12, 16, 35, 64, 90, 103, 104, 117, 119, 151, 153], "datasetinfo": [4, 24, 25, 26, 27, 58, 69, 85, 93, 117, 126, 135, 145, 151, 160, 170, 180], "about": [4, 24, 25, 26, 27, 35, 47, 58, 69, 85, 93, 104, 117, 126, 135, 145, 151, 160, 170, 180, 185, 186], "being": [4, 24, 25, 26, 27, 35, 36, 39, 58, 69, 85, 93, 95, 103, 104, 117, 119, 126, 133, 135, 145, 151, 153, 160, 168, 170, 180, 214], "sparknlp": [4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 19, 21, 22, 23, 24, 29, 30, 31, 32, 33, 35, 37, 40, 45, 46, 47, 49, 50, 53, 55, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 79, 85, 86, 88, 90, 94, 103, 107, 109, 110, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 138, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 173, 176, 179, 180, 181, 185, 190, 193, 198, 199, 203, 205], "document_assembl": [4, 5, 6, 13, 22, 23, 24, 29, 70, 73, 74, 79, 99, 100, 117, 134, 138, 140, 147, 151, 169, 173, 175, 181, 203], "doc2chunk": [4, 37, 45, 74, 120, 154, 193], "setchunkcol": [4, 6, 45, 70, 117, 120, 151, 154], "setstartcol": [4, 6, 45, 117, 151], "setstartcolbytokenindex": [4, 45], "setfailonmiss": [4, 45], "setlowercas": [4, 17, 19, 45, 75, 123, 124, 157, 158], "wordembeddingsmodel": [4, 6, 8, 14, 17, 19, 21, 24, 35, 37, 40, 42, 44, 47, 49, 50, 57, 64, 66, 68, 69, 70, 71, 85, 86, 87, 88, 117, 119, 123, 124, 129, 130, 142, 145, 151, 153, 157, 158, 163, 164, 176, 180, 193], "embeddings_clin": [4, 6, 8, 14, 17, 19, 21, 24, 35, 37, 40, 42, 47, 50, 57, 64, 66, 68, 70, 71, 85, 86, 87, 88, 117, 119, 123, 124, 129, 130, 142, 151, 153, 157, 158, 163, 164, 176], "en": [4, 6, 8, 14, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 46, 47, 49, 50, 53, 57, 58, 63, 64, 66, 68, 69, 70, 71, 72, 73, 79, 85, 86, 87, 88, 90, 93, 94, 98, 99, 100, 115, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 142, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 201, 205, 213], "setcasesensit": [4, 6, 7, 8, 12, 14, 16, 22, 23, 24, 29, 30, 31, 32, 33, 46, 47, 49, 50, 53, 56, 63, 64, 66, 70, 71, 73, 79, 83, 86, 88, 93, 94, 95, 97, 98, 99, 100, 103, 105, 117, 126, 129, 130, 132, 134, 137, 138, 139, 140, 144, 147, 151, 160, 163, 164, 167, 169, 172, 173, 174, 175, 179, 181], "setlabelcol": [4, 6, 23, 24, 25, 26, 27, 58, 85, 93, 117, 126, 134, 135, 151, 160, 169, 170], "setbatchs": [4, 14, 24, 25, 26, 27, 29, 30, 31, 32, 49, 50, 58, 69, 73, 79, 85, 86, 88, 97, 98, 99, 100, 117, 129, 130, 132, 133, 135, 137, 138, 139, 140, 144, 145, 147, 151, 163, 164, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181], "128": [4, 30, 31, 32, 88, 103, 117, 130, 132, 144, 151, 164, 167, 179], "setdropout": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180], "012": [4, 117, 151], "setlearningr": [4, 24, 25, 26, 27, 58, 85, 117, 135, 151, 170], "015": [4, 117, 151], "setepoch": [4, 117, 151], "setscopewindow": [4, 8, 9, 85, 117, 151], "setendcol": [4, 6, 117, 151], "setmaxsentlen": [4, 117, 151], "250": [4, 50, 117, 151], "assertionpipelin": [4, 6, 12, 117, 126, 151, 160], "assertion_model": 4, "doexceptionhandl": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 58, 60, 64, 69, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 145, 151, 153, 157, 158, 160, 163, 170, 180], "engin": [4, 14, 24, 25, 26, 27, 49, 50, 58, 69, 73, 85, 93, 117, 126, 133, 135, 145, 147, 151, 160, 168, 170, 180, 181], "fitmultipl": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "parammap": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "abc": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "sequenc": [4, 6, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 44, 49, 50, 53, 58, 63, 64, 69, 71, 73, 85, 88, 90, 93, 104, 109, 117, 119, 123, 124, 126, 130, 132, 133, 134, 135, 145, 147, 151, 153, 157, 158, 160, 164, 167, 168, 169, 170, 180, 181, 183, 211], "A": [4, 6, 8, 11, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 40, 44, 47, 49, 50, 53, 58, 63, 64, 66, 68, 69, 70, 71, 73, 77, 79, 83, 85, 86, 88, 90, 93, 97, 98, 99, 100, 104, 107, 109, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 148, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 179, 180, 181, 185, 186, 187, 188, 190, 194, 199, 200, 205, 214, 216], "thread": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "safe": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 46, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "iter": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180, 203], "which": [4, 6, 7, 8, 12, 14, 15, 16, 17, 19, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 39, 40, 44, 49, 50, 53, 55, 57, 58, 60, 63, 64, 69, 71, 73, 74, 77, 79, 83, 85, 86, 87, 88, 90, 93, 97, 98, 99, 100, 103, 104, 109, 113, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 148, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 179, 180, 181, 183, 185, 205, 206, 214], "next": [4, 6, 8, 12, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 60, 63, 64, 69, 71, 74, 83, 85, 86, 90, 93, 104, 109, 117, 119, 123, 124, 126, 129, 133, 134, 135, 145, 151, 153, 157, 158, 160, 163, 168, 169, 170, 180], "modeliter": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "mai": [4, 5, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 45, 47, 50, 53, 58, 63, 64, 69, 71, 83, 85, 87, 90, 93, 94, 104, 109, 117, 119, 120, 123, 124, 126, 133, 134, 135, 145, 148, 151, 153, 154, 157, 158, 160, 168, 169, 170, 180], "_fitmultipleiter": [4, 6, 16, 17, 19, 22, 23, 24, 25, 26, 27, 33, 35, 40, 44, 53, 58, 63, 64, 69, 71, 85, 90, 93, 104, 109, 117, 119, 123, 124, 126, 133, 134, 135, 145, 151, 153, 157, 158, 160, 168, 169, 170, 180], "getengin": [4, 14, 24, 25, 26, 27, 49, 50, 58, 69, 73, 85, 93, 117, 126, 133, 135, 145, 147, 151, 160, 168, 170, 180, 181], "setconfigprotobyt": [4, 14, 30, 31, 32, 49, 50, 69, 73, 79, 88, 97, 98, 99, 100, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181], "conf": [4, 69, 117, 145, 151, 180], "contai": [4, 117, 151], "setdatasetinfo": [4, 24, 25, 26, 27, 58, 69, 85, 93, 117, 126, 135, 145, 151, 160, 170, 180], "setdoexceptionhandl": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 58, 60, 64, 69, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 145, 151, 153, 157, 158, 160, 163, 170, 180], "except": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 36, 58, 60, 64, 69, 71, 83, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 145, 148, 151, 153, 157, 158, 160, 163, 170, 180, 205, 206], "handl": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 42, 58, 60, 64, 71, 85, 86, 93, 104, 117, 119, 123, 124, 126, 129, 135, 151, 153, 157, 158, 160, 163, 170, 200], "caus": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 47, 58, 60, 64, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 151, 153, 157, 158, 160, 163, 170, 214], "pass": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 46, 47, 58, 60, 64, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 151, 153, 157, 158, 160, 163, 170], "emit": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 58, 60, 64, 69, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 145, 151, 153, 157, 158, 160, 163, 170, 180], "messag": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 58, 60, 64, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 151, 153, 157, 158, 160, 163, 170, 206], "continu": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 36, 58, 60, 64, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 148, 151, 153, 157, 158, 160, 163, 170, 183], "come": [4, 7, 8, 12, 14, 16, 17, 19, 21, 24, 25, 26, 27, 33, 35, 36, 58, 60, 64, 69, 71, 85, 86, 93, 103, 117, 119, 123, 124, 126, 129, 135, 145, 151, 153, 157, 158, 160, 163, 170, 180], "perform": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 36, 39, 40, 58, 60, 64, 69, 71, 79, 85, 86, 87, 93, 97, 98, 99, 100, 104, 117, 119, 123, 124, 126, 129, 135, 137, 138, 139, 140, 145, 151, 153, 157, 158, 160, 163, 170, 172, 173, 174, 175, 180, 191, 211, 216], "penalti": [4, 8, 12, 16, 17, 19, 24, 25, 26, 27, 33, 35, 58, 60, 64, 69, 71, 85, 86, 93, 117, 119, 123, 124, 126, 129, 135, 145, 151, 153, 157, 158, 160, 163, 170, 180, 183], "float": [4, 7, 14, 16, 17, 19, 22, 23, 24, 25, 26, 27, 35, 36, 44, 49, 50, 51, 55, 58, 64, 69, 71, 73, 83, 85, 86, 93, 117, 119, 123, 124, 126, 129, 133, 134, 135, 145, 147, 151, 153, 157, 158, 160, 163, 168, 169, 170, 180, 181, 185, 191, 211], "setenableoutputlog": [4, 69, 117, 133, 145, 151, 168, 180], "enabl": [4, 12, 16, 35, 39, 42, 69, 103, 104, 117, 119, 145, 151, 153, 180, 199], "srt": [4, 104, 117, 151], "end_col": [4, 85, 117, 151], "setgraphfil": [4, 69, 104, 117, 145, 151, 180], "setgraphfold": [4, 69, 104, 117, 145, 151, 180], "setincludeconfid": [4, 69, 117, 145, 151, 180], "waht": [4, 117, 151], "colnam": [4, 117, 151], "lr": [4, 69, 117, 133, 145, 151, 168, 180], "maximum": [4, 14, 17, 19, 22, 23, 29, 49, 50, 69, 73, 77, 79, 83, 87, 93, 97, 98, 99, 100, 103, 104, 117, 123, 124, 133, 134, 137, 138, 139, 140, 145, 147, 151, 157, 158, 168, 169, 172, 173, 174, 175, 180, 181], "setoutputlogspath": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180], "left": [4, 8, 9, 17, 19, 85, 86, 87, 117, 123, 124, 129, 151, 157, 158, 163, 185], "right": [4, 8, 9, 14, 17, 19, 49, 85, 86, 87, 117, 123, 124, 129, 151, 157, 158, 163, 185], "must": [4, 5, 6, 8, 9, 14, 17, 19, 35, 36, 37, 45, 57, 63, 69, 80, 83, 85, 90, 94, 117, 119, 120, 123, 124, 133, 142, 145, 151, 153, 154, 157, 158, 168, 176, 180, 205], "non": [4, 8, 9, 50, 85, 117, 148, 151], "start_col": [4, 117, 151], "settestdataset": [4, 69, 117, 133, 145, 151, 168, 180], "read_a": [4, 16, 33, 35, 53, 63, 64, 69, 71, 90, 117, 119, 133, 145, 151, 153, 168, 180], "reada": [4, 16, 33, 35, 53, 63, 64, 69, 71, 90, 117, 119, 133, 145, 151, 153, 168, 180, 193], "setvalidationsplit": [4, 24, 25, 26, 27, 58, 69, 85, 117, 133, 135, 145, 151, 168, 170, 180], "setverbos": [4, 69, 117, 133, 145, 151, 168, 180], "dl": [4, 104, 193], "hasstorageref": [4, 6, 24, 69], "approach": [4, 14, 17, 19, 24, 29, 104, 109, 111, 114, 117, 123, 124, 130, 142, 151, 157, 158, 164, 176], "targetnerlabel": [4, 6, 117, 151], "mark": [4, 6, 14, 37, 80, 117, 142, 151, 176], "match": [4, 6, 7, 8, 14, 17, 19, 29, 30, 31, 32, 33, 35, 44, 45, 49, 50, 53, 63, 64, 70, 73, 79, 83, 88, 90, 93, 97, 98, 99, 100, 103, 117, 119, 120, 123, 124, 126, 130, 132, 137, 138, 139, 140, 144, 147, 151, 153, 154, 157, 158, 160, 164, 167, 172, 173, 174, 175, 179, 181, 198], "fever": [4, 12, 117, 151], "sore": [4, 12, 117, 151], "throat": [4, 12, 117, 151], "stomach": [4, 12, 16, 117, 151], "pain": [4, 12, 16, 117, 151], "she": [4, 66, 103, 107, 117, 151, 190], "maintain": [4, 117, 151], "epidur": [4, 12, 117, 151], "pca": [4, 12, 117, 151], "sentencedetector": [4, 5, 6, 8, 11, 12, 13, 14, 16, 17, 19, 21, 24, 29, 33, 35, 40, 44, 46, 47, 49, 50, 57, 64, 66, 68, 69, 70, 71, 73, 87, 88, 90, 93, 95, 107, 117, 119, 123, 124, 126, 130, 133, 142, 145, 147, 151, 153, 157, 158, 160, 164, 168, 176, 180, 181, 193], "nermodel": [4, 12, 68, 69, 71, 117, 145, 151, 180], "medicalnermodel": [4, 8, 14, 17, 19, 21, 24, 35, 37, 40, 42, 47, 50, 57, 64, 66, 68, 69, 70, 71, 85, 86, 87, 88, 117, 119, 123, 124, 129, 130, 142, 145, 151, 153, 157, 158, 163, 164, 176, 180, 193], "ner_clin": [4, 8, 87, 88, 117, 130, 151, 164], "nerconvert": [4, 8, 12, 14, 24, 35, 37, 40, 44, 49, 64, 68, 71, 85, 86, 87, 88, 117, 119, 129, 130, 151, 153, 163, 164, 193], "ner_chunk": [4, 8, 12, 14, 17, 19, 21, 24, 35, 37, 40, 42, 44, 47, 49, 50, 57, 61, 66, 67, 68, 71, 80, 85, 86, 87, 88, 94, 115, 117, 119, 123, 124, 129, 130, 142, 151, 153, 157, 158, 163, 164, 176, 212], "clinicalassert": [4, 12, 117, 151], "assertion_dl": [4, 117, 151], "assertionmodel": [4, 6, 12, 117, 126, 151, 160], "selectexpr": [4, 5, 11, 12, 14, 16, 17, 19, 21, 24, 29, 33, 41, 44, 45, 46, 47, 49, 50, 53, 63, 64, 66, 68, 73, 74, 75, 85, 86, 87, 88, 90, 94, 103, 117, 120, 123, 124, 129, 130, 133, 147, 151, 154, 157, 158, 163, 164, 168, 181, 205], "truncat": [4, 5, 8, 11, 12, 14, 16, 17, 19, 21, 30, 31, 32, 33, 35, 37, 40, 41, 45, 46, 47, 49, 50, 53, 57, 63, 66, 73, 75, 79, 80, 85, 86, 87, 88, 90, 94, 99, 100, 103, 104, 107, 117, 119, 120, 123, 124, 129, 130, 132, 133, 138, 140, 142, 144, 147, 151, 153, 154, 157, 158, 163, 164, 167, 168, 173, 175, 176, 179, 181, 185, 205], "entityassertioncasesensit": [4, 117, 151], "storageref": [4, 6, 14, 24, 49, 50, 53, 69, 93, 117, 126, 133, 145, 151, 160, 168, 180], "getentityassert": [4, 117, 151], "getreplacelabel": [4, 117, 151], "replac": [4, 33, 35, 36, 37, 38, 39, 40, 61, 64, 71, 75, 117, 119, 151, 153, 193, 199], "getstorageref": [4, 6, 14, 24, 49, 50, 53, 69, 93, 117, 126, 133, 145, 151, 160, 168, 180], "uniqu": [4, 6, 14, 24, 44, 49, 50, 53, 69, 93, 117, 126, 133, 145, 151, 160, 168, 180, 185], "static": [4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 44, 49, 50, 53, 58, 63, 64, 69, 72, 73, 79, 85, 86, 88, 90, 93, 98, 99, 100, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 179, 180, 181, 186, 187, 201, 214, 215], "assertion_jsl_aug": [4, 57], "lang": [4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 44, 49, 50, 53, 58, 63, 64, 69, 72, 73, 79, 85, 86, 88, 90, 93, 98, 99, 100, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 179, 180, 181, 183, 187], "remote_loc": [4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 44, 49, 50, 53, 58, 63, 64, 69, 72, 73, 79, 85, 86, 88, 90, 93, 98, 99, 100, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 179, 180, 181, 183, 187, 201], "download": [4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 44, 49, 50, 58, 63, 64, 69, 73, 79, 85, 86, 88, 90, 93, 98, 99, 100, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 179, 180, 181, 187, 201, 202], "remot": [4, 6, 8, 14, 17, 19, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 44, 49, 50, 58, 63, 64, 69, 73, 79, 85, 86, 88, 90, 93, 98, 99, 100, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 135, 138, 139, 140, 144, 145, 147, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 170, 173, 174, 175, 179, 180, 181, 187, 201], "resourc": [4, 6, 13, 14, 15, 22, 23, 24, 25, 26, 27, 29, 35, 44, 49, 50, 53, 55, 58, 63, 64, 69, 71, 79, 90, 93, 95, 98, 99, 100, 103, 133, 135, 138, 139, 140, 145, 168, 170, 173, 174, 175, 180, 187], "Will": [4, 6, 14, 22, 23, 24, 25, 26, 27, 29, 35, 44, 49, 50, 58, 63, 64, 79, 90, 93, 98, 99, 100, 135, 138, 139, 140, 170, 173, 174, 175, 180], "repositori": [4, 6, 14, 22, 23, 24, 25, 26, 27, 29, 35, 44, 49, 50, 58, 63, 64, 79, 90, 93, 98, 99, 100, 135, 138, 139, 140, 170, 173, 174, 175, 180], "otherwis": [4, 6, 8, 14, 22, 23, 24, 25, 26, 27, 29, 35, 36, 42, 44, 45, 49, 50, 55, 58, 63, 64, 69, 77, 79, 80, 85, 86, 90, 93, 97, 98, 99, 100, 119, 120, 129, 135, 137, 138, 139, 140, 142, 145, 153, 154, 163, 170, 172, 173, 174, 175, 176, 180, 191, 206, 211, 216], "restor": [4, 6, 14, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 44, 49, 50, 58, 63, 64, 69, 73, 79, 88, 90, 93, 98, 99, 100, 104, 130, 132, 135, 138, 139, 140, 144, 145, 147, 164, 167, 170, 173, 174, 175, 179, 180, 181, 198], "b": [4, 8, 14, 30, 31, 32, 49, 50, 63, 68, 69, 70, 71, 73, 79, 88, 97, 98, 99, 100, 117, 130, 132, 133, 137, 138, 139, 140, 144, 145, 147, 151, 164, 167, 168, 172, 173, 174, 175, 179, 180, 181, 216], "bytearrai": [4, 117, 151], "setentityassert": [4, 117, 151], "assertionent": [4, 117, 151], "note": [4, 5, 14, 29, 35, 47, 49, 50, 53, 69, 73, 117, 133, 145, 147, 151, 168, 180, 181, 185, 186, 198, 205, 216], "entityassert": [4, 117, 151], "earlier": [4, 117, 151], "than": [4, 7, 14, 16, 35, 36, 39, 64, 69, 72, 79, 83, 85, 87, 93, 117, 119, 138, 145, 148, 151, 153, 173, 180, 183], "replacelabel": [4, 71, 117, 151], "setentityassertioncasesensit": [4, 57, 117, 151], "p": [4, 17, 19, 69, 71, 101, 117, 123, 124, 133, 145, 151, 157, 158, 168, 180, 183, 216], "setreplacelabel": [4, 71, 117, 151], "later": [4, 44, 117, 151, 185], "setstorageref": [4, 6, 14, 24, 49, 50, 53, 69, 93, 117, 126, 133, 145, 151, 160, 168, 180], "assertionchunkconvert": [5, 193], "intern": [5, 9, 37, 45, 69, 71, 79, 93, 94, 99, 100, 111, 116, 126, 138, 140, 145, 149, 160, 173, 175, 180, 187, 188, 190, 214], "annotatortransform": [5, 9, 21, 37, 45, 57, 94], "In": [5, 14, 33, 37, 50, 53, 63, 69, 80, 86, 90, 104, 129, 133, 142, 145, 163, 168, 176, 180], "issu": [5, 35, 70], "indic": [5, 14, 24, 25, 26, 27, 29, 58, 64, 79, 85, 135, 138, 148, 170, 173, 192, 194, 198], "lead": [5, 104], "loss": [5, 69, 104, 145, 180, 191, 211], "begin": [5, 7, 15, 37, 45, 64, 68, 69, 71, 85, 87, 93, 103, 120, 126, 145, 154, 160, 180, 185, 190, 203, 205], "add": [5, 8, 66, 69, 71, 74, 75, 80, 81, 87, 103, 142, 145, 176, 180, 184, 188, 198], "robust": 5, "wai": [5, 14, 47, 53], "improv": [5, 69, 79, 88, 99, 100, 104, 130, 138, 140, 145, 164, 173, 175, 180], "reliabl": 5, "popul": [5, 99, 100, 140, 175], "alab": [5, 149, 203], "chunktextcol": 5, "chunkbegincol": 5, "chunkendcol": 5, "outputtokenbegincol": 5, "outputtokenendcol": 5, "metadatafield": [5, 95, 103], "field": [5, 12, 13, 16, 33, 42, 47, 53, 55, 56, 57, 63, 64, 71, 72, 74, 83, 95, 101, 103, 115, 186], "ad": [5, 15, 29, 69, 71, 85, 104, 145, 180, 192, 198, 214], "element": [5, 42, 81, 107, 208], "second": [5, 8, 13, 35, 36, 39, 42, 69, 80, 90, 119, 142, 145, 153, 176, 180, 185, 187, 199], "stringtyp": [5, 45, 74, 94, 120, 154], "convert": [5, 11, 13, 21, 35, 45, 57, 66, 71, 75, 81, 83, 94, 95, 119, 120, 149, 153, 154, 189, 196, 198, 205, 217], "setchunktextcol": 5, "setchunkbegincol": 5, "char_begin": 5, "setchunkendcol": 5, "char_end": 5, "setoutputtokenbegincol": 5, "token_begin": 5, "setoutputtokenendcol": 5, "token_end": 5, "minni": 5, "57": 5, "63": [5, 11, 64, 68, 71], "62": [5, 40, 42], "pcp": [5, 35, 41, 119, 153], "31": [5, 13, 87, 90, 190], "34": [5, 11, 190], "33": 5, "col": [5, 13, 16, 33, 41, 44, 53, 85, 93, 126, 160], "setmetadatafield": [5, 95, 103], "assertionlogregapproach": [6, 193], "regress": [6, 22, 23, 26, 30, 32, 132, 134, 167, 169], "assertionlogregmodel": [6, 151, 193], "maxit": [6, 22, 23, 134, 169], "regparam": 6, "enetparam": 6, "elast": 6, "net": 6, "beforeparam": 6, "context": [6, 8, 14, 49, 61, 79, 97, 98, 99, 100, 104, 137, 138, 139, 140, 149, 172, 173, 174, 175, 183, 193], "afterparam": 6, "after": [6, 7, 8, 22, 23, 29, 30, 31, 32, 57, 66, 69, 74, 79, 83, 85, 107, 132, 134, 138, 144, 145, 167, 169, 173, 179, 180], "externalfeatur": 6, "addit": [6, 53, 69, 87, 93, 99, 100, 126, 133, 140, 145, 160, 168, 175, 180, 214], "featur": [6, 7, 24, 25, 26, 27, 55, 58, 64, 69, 85, 133, 135, 145, 168, 170, 180, 193], "nercol": 6, "either": [6, 7, 14, 35, 45, 53, 68, 80, 85, 90, 93, 94, 119, 120, 126, 133, 142, 153, 154, 160, 168, 176, 206], "sentence_detector": [6, 13, 17, 19, 24, 50, 70, 73, 117, 123, 124, 142, 147, 151, 157, 158, 176, 181, 203], "chunker": [6, 61, 70, 117, 123, 124, 149, 151, 157, 158, 193], "Then": [6, 44, 69, 85, 93, 133, 145, 168, 180], "setreg": 6, "01": [6, 35, 37, 41, 69, 74, 83, 90, 119, 145, 153, 180, 190], "setbefor": 6, "setaft": 6, "13": [6, 35, 36, 41, 74, 75, 119, 153, 185, 190], "setenet": 6, "enet": 6, "labelcol": [6, 22, 23, 93, 126, 134, 160, 169], "setmaxit": [6, 22, 23, 134, 169], "setnercol": 6, "n": [6, 14, 40, 44, 69, 77, 79, 97, 98, 99, 100, 103, 137, 138, 139, 140, 145, 172, 173, 174, 175, 180, 183, 202, 208], "lamda": 6, "settargetnerlabel": 6, "v": [6, 14, 29, 30, 31, 32, 49, 50, 69, 73, 79, 80, 88, 97, 98, 99, 100, 130, 132, 133, 137, 138, 139, 140, 142, 144, 145, 147, 164, 167, 168, 172, 173, 174, 175, 176, 179, 180, 181, 191, 211], "logreg": [6, 22, 23, 134, 169, 193], "logarithm": [6, 22, 23, 134, 169], "instead": [6, 14, 30, 32, 49, 50, 69, 85, 88, 130, 132, 145, 164, 167, 180], "obtain": [6, 14, 42, 57, 80, 88, 130, 145, 151, 164, 180, 186, 214], "assertionpretrain": 6, "assertion_ml": 6, "assertionmerg": 7, "merger": [7, 64], "white_black_list_param": [7, 56, 61, 66, 149], "whiteblacklistparam": [7, 46, 47, 56, 66, 105], "varieti": 7, "like": [7, 8, 22, 23, 33, 35, 36, 39, 47, 83, 90, 119, 133, 134, 153, 168, 169, 183], "priorit": [7, 35, 36, 64, 83, 119, 153], "proper": 7, "see": [7, 12, 30, 31, 32, 41, 45, 53, 63, 66, 69, 71, 85, 86, 90, 93, 120, 129, 132, 133, 144, 145, 154, 163, 167, 168, 179, 180, 183, 187, 212], "mergeoverlap": [7, 63, 64, 90], "overlap": [7, 63, 64, 90, 103], "applyfilterbeforemerg": 7, "appli": [7, 17, 19, 35, 36, 53, 66, 69, 80, 83, 103, 116, 119, 123, 124, 133, 142, 145, 148, 153, 157, 158, 168, 176, 180, 183, 185, 190, 200], "blacklist": [7, 12, 16, 35, 36, 46, 47, 56, 64, 66, 71, 105, 119, 153], "ignor": [7, 12, 14, 16, 29, 30, 31, 32, 35, 36, 46, 47, 49, 50, 53, 56, 64, 66, 71, 73, 77, 79, 83, 88, 93, 97, 98, 99, 100, 105, 119, 126, 130, 132, 137, 138, 139, 140, 144, 147, 153, 160, 164, 167, 172, 173, 174, 175, 179, 181, 183], "whitelist": [7, 12, 16, 46, 47, 56, 64, 66, 71, 105], "do": [7, 12, 16, 33, 35, 36, 46, 47, 56, 64, 66, 69, 71, 72, 105, 119, 145, 153, 180], "iob": [7, 12, 16, 46, 47, 56, 64, 66, 68, 69, 71, 105, 145, 180, 190, 216], "prefix": [7, 8, 12, 16, 33, 42, 44, 46, 47, 56, 64, 66, 69, 71, 105, 145, 180, 183, 216], "casesensit": [7, 8, 12, 14, 16, 29, 30, 31, 32, 33, 46, 47, 49, 50, 53, 56, 63, 64, 66, 71, 73, 79, 83, 88, 93, 97, 98, 99, 100, 103, 105, 126, 130, 132, 137, 138, 139, 140, 144, 147, 160, 164, 167, 172, 173, 174, 175, 179, 181], "determin": [7, 12, 14, 15, 16, 42, 46, 47, 51, 56, 64, 66, 71, 85, 87, 88, 103, 104, 105, 130, 164, 185], "definit": [7, 12, 16, 46, 47, 53, 56, 64, 66, 71, 73, 88, 105, 130, 147, 164, 181], "white": [7, 12, 16, 37, 46, 47, 56, 64, 66, 71, 105], "black": [7, 12, 16, 46, 47, 56, 64, 66, 71, 105, 212, 213], "assertionsconfid": 7, "confidencethreshold": [7, 16, 64, 212], "lower": [7, 16, 17, 19, 35, 36, 45, 64, 69, 119, 120, 123, 124, 145, 153, 154, 157, 158, 180], "threshold": [7, 16, 17, 19, 35, 36, 44, 50, 64, 71, 73, 83, 85, 86, 93, 119, 123, 124, 126, 129, 147, 153, 157, 158, 160, 163, 181, 191, 211], "orderingfeatur": [7, 64], "sourc": [7, 8, 17, 19, 30, 31, 32, 33, 35, 36, 39, 40, 45, 64, 69, 71, 73, 85, 86, 88, 90, 101, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 179, 181, 185, 186, 190, 198], "selectionstrategi": [7, 64], "divers": [7, 83], "diverselong": [7, 64], "defaultconfid": [7, 64], "doe": [7, 24, 39, 64, 69, 145, 180, 201], "assertionsourcepreced": 7, "util": [7, 35, 88, 104, 114, 130, 149, 164, 186, 188, 193], "comma": [7, 64, 69, 71, 83, 145, 180], "drive": [7, 64], "sortbybegin": 7, "sort": [7, 83], "setapplyfilterbeforemerg": 7, "setassertionsourcepreced": 7, "setassertionsconfid": 7, "setblacklist": [7, 12, 16, 35, 36, 46, 47, 56, 64, 66, 71, 105, 119, 153], "setdefaultconfid": [7, 64], "setdenylist": [7, 12, 16, 46, 47, 56, 64, 66, 71, 105], "setmergeoverlap": [7, 63, 64, 90], "setorderingfeatur": [7, 64], "setselectionstrategi": [7, 64], "setsortbybegin": 7, "setwhitelist": [7, 12, 16, 24, 44, 46, 47, 56, 64, 66, 71, 105], "contextualassert": 8, "analysi": [8, 87, 133, 168], "cue": 8, "within": [8, 14, 45, 50, 69, 94, 120, 145, 154, 180, 186], "negat": 8, "uncertainti": 8, "suffix": [8, 33, 42, 66, 183], "prefixandsuffixmatch": [8, 33], "hit": [8, 33, 83], "prefixkeyword": 8, "suffixkeyword": 8, "exceptionkeyword": 8, "prefixregexpattern": 8, "suffixregexpattern": 8, "exceptionregexpattern": 8, "includechunktoscop": 8, "scopewindowdelimit": 8, "delimit": [8, 13, 42, 53, 63, 64, 71, 81, 90, 97, 98, 137, 139, 172, 174], "limit": [8, 14, 29, 30, 32, 35, 36, 39, 44, 49, 50, 73, 85, 88, 119, 130, 132, 147, 153, 164, 167, 181], "confidencecalculationdirect": 8, "accept": [8, 133, 168], "clinical_n": [8, 21, 37, 42, 57, 66], "ner_convert": [8, 14, 17, 19, 21, 24, 37, 44, 47, 50, 57, 66, 71, 88, 123, 124, 130, 142, 157, 158, 164, 176], "No": [8, 103, 190], "kidnei": 8, "injuri": 8, "abnorm": 8, "rash": 8, "ulcer": 8, "might": [8, 35, 36, 39, 40, 53, 69, 119, 145, 153, 180, 214], "liver": [8, 33], "diseas": [8, 24, 47, 148, 214], "setprefixkeyword": 8, "setsuffixkeyword": 8, "unlik": [8, 79, 138, 173], "setprefixregexpattern": 8, "without": [8, 21, 35, 36, 39, 47, 57, 93, 104, 119, 153, 186, 192, 215], "deni": [8, 21], "never": 8, "setsuffixregexpattern": 8, "absenc": 8, "out": [8, 14, 69, 75, 77, 79, 83, 93, 97, 98, 99, 100, 126, 133, 137, 138, 139, 140, 145, 160, 168, 172, 173, 174, 175, 180, 203], "setexceptionkeyword": 8, "setexceptionregexpattern": 8, "clearli": 8, "addprefixkeyword": 8, "addsuffixkeyword": 8, "setprefixandsuffixmatch": [8, 33], "setassert": 8, "flatten": [8, 61, 107, 149], "setexplodeselectedfield": [8, 57], "assertion_result": [8, 57, 185], "problem": [8, 85, 87, 88, 104, 130, 164, 190], "contextual_assertion_abs": 8, "open": [8, 17, 19, 30, 31, 32, 33, 45, 69, 71, 73, 85, 86, 88, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 179, 181], "other": [8, 14, 17, 19, 30, 31, 32, 33, 35, 36, 37, 39, 40, 47, 50, 64, 69, 73, 83, 85, 86, 87, 88, 93, 104, 117, 119, 123, 124, 126, 129, 130, 132, 133, 134, 144, 145, 147, 150, 151, 153, 157, 158, 160, 163, 164, 167, 168, 169, 179, 181, 188], "setconfidencecalculationdirect": 8, "distanc": [8, 17, 19, 35, 36, 44, 50, 83, 85, 87, 93, 119, 123, 124, 126, 153, 157, 158, 160, 185], "found": [8, 33, 45, 50, 120, 154, 198, 199], "side": 8, "minimum": [8, 17, 19, 23, 35, 36, 69, 119, 123, 124, 134, 145, 153, 157, 158, 169, 180], "necessarili": 8, "certain": [8, 64, 70], "extend": [8, 45, 69, 120, 133, 145, 154, 168, 180, 190], "alwai": [8, 16, 64], "empti": [8, 24, 25, 26, 27, 45, 50, 58, 64, 69, 80, 85, 93, 120, 126, 135, 142, 145, 154, 160, 170, 176, 180, 183, 190], "setincludechunktoscop": 8, "look": [8, 50], "nor": 8, "lack": 8, "unremark": 8, "declin": [8, 21], "two": [8, 14, 16, 18, 35, 36, 39, 42, 46, 48, 64, 66, 71, 80, 107, 119, 153, 199, 214], "integ": [8, 17, 19, 35, 36, 37, 39, 69, 99, 100, 119, 123, 124, 140, 153, 157, 158, 175, 180, 188, 205], "whole": [8, 14, 53], "setscopewindowdelimit": 8, "demonstr": [8, 85, 86, 87, 129, 163], "appear": [8, 35, 36, 49, 50, 80, 119, 142, 153, 176], "had": [8, 29, 30, 32, 44, 66, 103, 107, 132, 167, 185], "develop": [8, 47], "associ": [8, 15, 53, 66, 71, 87, 90, 93, 214], "fewshotassertionsentenceconvert": 9, "assertiondl": [10, 61, 118, 122, 152, 156], "assertion_chunk_convert": [10, 61], "assertion_dl_reg": [10, 61], "assertion_merg": [10, 61], "contextual_assert": [10, 61], "fewshot_assertion_sentence_convert": [10, 61], "chunk2token": [11, 193], "chunkassembl": [11, 45, 120, 154], "ngramgener": [11, 14, 193], "ngram": [11, 17, 19, 23, 77, 79, 97, 98, 99, 100, 123, 124, 134, 137, 138, 139, 140, 157, 158, 169, 172, 173, 174, 175], "setdelimit": [11, 63, 90], "_": [11, 41, 42, 69, 145, 180], "setn": 11, "setenablecumul": 11, "ngram_token": 11, "year": [11, 14, 35, 36, 41, 49, 64, 66, 68, 71, 74, 107, 119, 148, 153, 185, 214], "old": [11, 14, 35, 41, 64, 66, 68, 69, 71, 85, 86, 107, 119, 129, 145, 148, 153, 163, 180, 199], "man": [11, 64, 68, 71], "hospit": [11, 39, 64, 68, 71, 188], "a_63": 11, "old_man": 11, "14": [11, 35, 37, 41, 119, 153], "25": [11, 35, 41, 80, 93, 119, 126, 153, 160, 190], "man_pres": 11, "18": [11, 35, 41, 93, 99, 100, 119, 140, 153, 175, 190], "28": [11, 14, 66, 107, 148, 190], "presents_to": 11, "27": [11, 63], "32": [11, 33, 95], "to_th": 11, "30": [11, 37, 74, 79, 99, 100, 133, 138, 140, 168, 173, 175, 190], "41": [11, 17, 19, 87, 123, 124, 142, 157, 158, 176], "the_hospit": 11, "42": [11, 16, 190], "hospital_": 11, "6": [11, 47, 63, 87, 94, 133, 168, 190], "assertionfilter": [12, 193], "filtering_param": [12, 16, 61, 64, 71, 149], "filteringparam": [12, 16, 56, 64, 71, 193], "via": [12, 16], "criteria": [12, 16, 18, 56, 64, 71, 83], "isin": [12, 16, 56, 64, 71], "step": [12, 69, 133, 145, 168, 180, 198], "setcriteria": [12, 16, 56, 64, 71], "filtervalu": [12, 16, 56, 64, 71], "setfiltervalu": [12, 16, 56, 64, 71], "accord": [12, 16, 35, 36, 37, 39, 56, 64, 71, 115, 119, 148, 153], "setregex": [12, 16, 56, 64, 71], "chunkconvert": [13, 193], "regexmatch": [13, 15, 33, 90, 95, 193], "test_data": [13, 69, 95, 133, 145, 168, 180, 190], "my": [13, 46, 73, 90, 103, 133, 147, 168, 181, 205], "ceremoni": [13, 90], "regex_match": [13, 61, 89], "setexternalrul": [13, 15, 90, 95], "src": [13, 15, 63, 69, 90, 95, 133, 145, 168, 180], "matcher": [13, 61, 90, 95, 149], "txt": [13, 15, 35, 40, 42, 63, 90, 95, 103, 119, 153], "outdf": 13, "71": [13, 90], "80": [13, 90, 103], "chunkkeyphraseextract": [14, 193], "bert_sentence_embed": [14, 52, 61], "bertsentenceembed": [14, 49, 50, 93, 94, 95, 126, 160, 193], "kei": [14, 17, 19, 35, 36, 71, 72, 73, 83, 88, 95, 101, 119, 123, 124, 130, 147, 149, 153, 157, 158, 164, 181, 185, 188, 198, 205, 208, 216], "phrase": [14, 63, 70, 79, 138, 173], "most": [14, 47, 50, 69, 103, 145, 148, 180], "describ": 14, "cosin": [14, 17, 19, 51, 93, 123, 124, 126, 157, 158, 160], "similar": [14, 35, 36, 51, 119, 153, 193, 216], "represent": [14, 33, 49, 50, 71], "correspond": [14, 25, 26, 27, 35, 36, 39, 44, 49, 57, 119, 135, 153, 170, 214], "maxim": [14, 50, 85], "margin": 14, "mmr": 14, "setdiverg": 14, "selectmostdiffer": 14, "too": [14, 69, 104, 145, 180], "broader": 14, "thei": [14, 27, 47, 50, 57, 69, 97, 98, 103, 104, 137, 139, 145, 172, 174, 180, 188], "belong": 14, "brief": 14, "understand": 14, "consist": [14, 35, 36, 39, 40, 50, 88, 90, 119, 130, 153, 164, 185, 188], "variou": [14, 79, 138, 173, 186, 198, 214], "rank": 14, "gram": [14, 77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "yakekeywordextractor": 14, "yake": [14, 193], "textmatch": [14, 193], "desir": [14, 17, 19, 39, 57, 64, 87, 123, 124, 157, 158], "oper": [14, 57, 83, 104], "topn": [14, 44], "conjunct": 14, "diverg": 14, "aim": [14, 79, 138, 173], "achiev": [14, 69, 145, 180], "goal": 14, "interv": 14, "higher": [14, 214], "enforc": [14, 188], "ensur": [14, 81, 205], "sole": 14, "constraint": [14, 190], "measur": [14, 103, 148, 214], "documentlevelprocess": 14, "flag": [14, 24, 25, 26, 27, 29, 58, 79, 85, 135, 138, 170, 173, 192, 194, 198], "row": [14, 69, 103, 145, 180, 188, 190], "rather": [14, 69, 79, 138, 145, 173, 180], "particular": [14, 35, 36, 39, 50, 88, 93, 119, 126, 130, 153, 160, 164, 214], "concatenatesent": 14, "concaten": [14, 81, 199], "comput": [14, 49, 50, 69, 97, 98, 104, 137, 139, 145, 172, 174, 180, 216], "averag": [14, 30, 32, 48, 49, 50, 83, 88, 130, 132, 164, 167], "vector": [14, 22, 23, 27, 48, 50, 55, 58, 134, 169], "droppunctu": 14, "remov": [14, 16, 35, 57, 64, 75, 87, 198, 214], "punctuat": [14, 75], "affect": [14, 57, 99, 100, 140, 175], "ner_tagg": [14, 88, 130, 164], "ner_jsl_slim": 14, "ner_tag": [14, 85, 86, 87, 88, 129, 130, 163, 164], "key_phrase_extractor": 14, "settopn": 14, "setdocumentlevelprocess": 14, "ner_chunk_key_phras": 14, "her": [14, 49, 66, 73, 147, 181], "becom": [14, 47, 49, 104], "last": [14, 49, 69, 79, 93, 126, 138, 145, 160, 173, 180, 183], "he": [14, 40, 49, 57, 103, 185], "complain": [14, 49], "swell": [14, 49], "hi": [14, 49, 73, 147, 181], "forearm": [14, 49], "explod": [14, 16, 17, 19, 29, 33, 41, 44, 47, 49, 50, 53, 57, 63, 64, 68, 73, 75, 81, 85, 86, 87, 88, 90, 103, 123, 124, 129, 130, 133, 147, 157, 158, 163, 164, 168, 181], "AS": [14, 17, 19, 49, 50, 73, 123, 124, 147, 157, 158, 181], "key_phras": 14, "documentsimilar": 14, "mmrscore": 14, "gestat": [14, 66, 107], "mellitu": [14, 66, 107], "7391447825527298": 14, "4366776288430703": 14, "7323921930094919": 14, "44348688715422274": 14, "13577881610104517": 14, "085800103824974": 14, "dimens": [14, 49, 50, 69, 93, 126, 145, 160, 180], "islong": [14, 49, 50], "maxsentencelength": [14, 29, 30, 31, 32, 49, 50, 73, 88, 130, 132, 144, 147, 164, 167, 179, 181], "max_length_limit": [14, 29, 49, 50, 73, 147, 181], "512": [14, 29, 30, 32, 49, 50, 73, 88, 103, 130, 132, 147, 164, 167, 181], "getbatchs": [14, 29, 30, 31, 32, 49, 50, 69, 73, 79, 88, 97, 98, 99, 100, 130, 132, 137, 138, 139, 140, 144, 145, 147, 164, 167, 172, 173, 174, 175, 179, 180, 181], "getcasesensit": [14, 29, 30, 31, 32, 49, 50, 53, 63, 73, 79, 88, 93, 97, 98, 99, 100, 126, 130, 132, 137, 138, 139, 140, 144, 147, 160, 164, 167, 172, 173, 174, 175, 179, 181], "getdimens": [14, 49, 50, 93, 126, 160], "getmaxsentencelength": [14, 29, 49, 50, 73, 147, 181], "loadsavedmodel": [14, 24, 29, 30, 31, 32, 49, 50, 69, 73, 79, 86, 88, 98, 99, 100, 129, 130, 132, 138, 139, 140, 144, 145, 147, 163, 164, 167, 173, 174, 175, 179, 180, 181], "spark_sess": [14, 24, 29, 30, 31, 32, 49, 50, 69, 73, 79, 86, 88, 98, 99, 100, 129, 130, 132, 138, 139, 140, 144, 145, 147, 163, 164, 167, 173, 174, 175, 179, 180, 181], "use_openvino": [14, 49, 50], "openvino": [14, 49, 50], "backend": [14, 49, 50], "sbert_jsl_medium_uncas": 14, "setconcatenatesent": 14, "setdimens": [14, 49, 50, 93, 126, 160], "setdroppunctu": 14, "setislong": [14, 49, 50], "long": [14, 17, 19, 29, 49, 50, 73, 79, 123, 124, 138, 147, 148, 157, 158, 173, 181, 190], "setmaxsentencelength": [14, 29, 30, 31, 32, 49, 50, 73, 88, 95, 130, 132, 144, 147, 164, 167, 179, 181], "consid": [14, 29, 35, 36, 44, 49, 50, 51, 72, 73, 77, 79, 85, 87, 93, 99, 100, 103, 119, 126, 138, 140, 147, 153, 160, 173, 175, 181, 183, 216], "anoth": [14, 29, 49, 50, 73, 147, 181], "g": [14, 17, 19, 29, 30, 31, 32, 49, 50, 69, 73, 79, 80, 87, 93, 100, 123, 124, 126, 132, 138, 142, 144, 145, 147, 151, 157, 158, 160, 167, 173, 176, 179, 180, 181, 183, 216], "setselectmostdiffer": 14, "highest": [14, 24, 25, 26, 27, 58, 64, 77, 79, 85, 97, 98, 99, 100, 135, 137, 138, 139, 140, 170, 172, 173, 174, 175], "chunksentencesplitt": [15, 193], "treat": 15, "header": [15, 55, 133, 168, 190], "subsequ": [15, 17, 19, 66, 123, 124, 157, 158], "particularli": [15, 57, 199], "subtitl": 15, "paragraph": [15, 72], "groupbysent": 15, "group": [15, 35, 36, 39, 70, 80, 119, 142, 148, 153, 176], "assum": [15, 50, 69, 133, 145, 168, 180], "detector": [15, 203], "insertchunk": 15, "omit": [15, 93, 126, 160], "defaultent": 15, "introduct": 15, "title_regex": 15, "setdefaultent": 15, "setgroupbysent": 15, "properti": [15, 35, 36, 39, 111, 119, 153], "setinsertchunk": 15, "insert": [15, 47, 81], "chunkfilter": [16, 193], "addition": [16, 33, 39, 66, 69, 103, 104, 145, 180, 186, 205], "what": [16, 35, 36, 64, 73, 75, 80, 85, 93, 119, 126, 142, 147, 153, 160, 176, 181], "entitiesconfid": [16, 64], "past": [16, 187], "histori": [16, 66, 107], "gastroenter": 16, "howev": [16, 47, 69, 145, 180], "docassembl": 16, "postagg": [16, 85, 86, 129, 163], "perceptronmodel": [16, 50, 85, 86, 87, 88, 129, 130, 163, 164, 193, 203], "setregexpars": [16, 70], "nn": [16, 70], "chunkerfilt": 16, "17": [16, 64, 68, 190], "22": [16, 17, 19, 74, 123, 124, 142, 148, 157, 158, 176, 190], "36": 16, "53": [16, 63], "64": [16, 64, 68, 69, 133, 145, 168, 180, 183, 190], "70": [16, 69, 180, 212], "81": [16, 87, 190], "110": [16, 64, 68], "now": 16, "care": [16, 87], "118": 16, "132": 16, "setentitiesconfid": [16, 64], "entities_confid": [16, 64], "setfilterent": 16, "filter_bi": 16, "attribut": [16, 64], "chunkfiltererapproach": [16, 193], "entitiesconfidenceresourc": [16, 64], "entitiesconfidenceresourceasjsonstr": 16, "chunksfilterapproach": 16, "setentitiesconfidenceresourc": [16, 64], "binari": [16, 64, 71, 88, 93, 130, 164], "setentitiesconfidenceresourceasjsonstr": 16, "chunkmapperapproach": [17, 123, 142, 157, 176, 193], "commonchunkmapperparam": [17, 19, 124, 158], "chunkmapperfuzzymatchingparam": [17, 19, 124, 158, 193], "mapper": [17, 19, 123, 124, 142, 157, 158, 176], "jsondictionari": [17, 19, 123, 124, 142, 157, 158, 176], "chunkmappermodel": [17, 21, 123, 142, 157, 176, 193], "label_depend": [17, 18, 19, 80, 92, 123, 124, 142, 157, 158, 176], "mappinmg": [17, 19, 123, 124, 142, 157, 158, 176], "rel": [17, 19, 49, 50, 74, 104, 123, 124, 142, 157, 158, 176, 190], "go": [17, 19, 123, 124, 142, 157, 158, 176], "lowercas": [17, 19, 35, 45, 75, 119, 120, 123, 124, 142, 153, 154, 157, 158, 176], "decid": [17, 19, 35, 36, 39, 103, 119, 123, 124, 142, 153, 157, 158, 176], "ner_model": [17, 19, 44, 50, 123, 124, 142, 157, 158, 176], "ner_posology_larg": [17, 19, 50, 123, 124, 142, 157, 158, 176], "nerconverterintern": [17, 19, 21, 42, 47, 50, 57, 66, 71, 80, 123, 124, 142, 157, 158, 176, 190, 193], "chunkermapperapproach": [17, 19, 123, 124, 142, 157, 158, 176], "setdictionari": [17, 19, 33, 123, 124, 142, 157, 158, 176], "home": [17, 19, 46, 47, 103, 123, 124, 142, 157, 158, 176], "mappings2": [17, 19, 123, 124, 142, 157, 158, 176], "setrel": [17, 19, 21, 123, 124, 142, 157, 158, 176], "action": [17, 19, 21, 42, 123, 124, 142, 157, 158, 176], "sampledata": [17, 19, 50, 123, 124, 142, 157, 158, 176], "warfarina": [17, 19, 123, 124, 142, 157, 158, 176], "lusa": [17, 19, 123, 124, 142, 157, 158, 176], "amlodipin": [17, 19, 123, 124, 142, 157, 158, 176], "mg": [17, 19, 50, 123, 124, 142, 157, 158, 176, 185], "35": [17, 19, 87, 123, 124, 142, 157, 158, 176], "analges": [17, 19, 123, 124, 142, 157, 158, 176], "56995": [17, 19, 123, 124, 142, 157, 158, 176], "all_rel": [17, 19, 123, 124, 142, 157, 158, 176], "antipyret": [17, 19, 123, 124, 142, 157, 158, 176], "50": [17, 19, 33, 58, 123, 124, 142, 145, 157, 158, 176], "9989": [17, 19, 123, 124, 142, 157, 158, 176], "55": [17, 19, 123, 124, 142, 157, 158, 176], "56": [17, 19, 123, 124, 142, 157, 158, 176], "9123": [17, 19, 123, 124, 142, 157, 158, 176], "allowmultitokenchunk": [17, 19, 123, 124, 157, 158], "enablecharfingerprintmatch": [17, 19, 123, 124, 157, 158], "enablefuzzymatch": [17, 19, 123, 124, 157, 158], "enabletokenfingerprintmatch": [17, 19, 123, 124, 157, 158], "fuzzydistancescalingmod": [17, 19, 123, 124, 157, 158], "fuzzymatchingdistancethreshold": [17, 19, 123, 124, 157, 158], "fuzzymatchingdist": [17, 19, 123, 124, 157, 158], "maxcharngramfingerprint": [17, 19, 123, 124, 157, 158], "maxtokenngramdroppingcharsratio": [17, 19, 123, 124, 157, 158], "maxtokenngramdroppingoper": [17, 19, 123, 124, 157, 158], "maxtokenngramdroppingtoken": [17, 19, 123, 124, 157, 158], "maxtokenngramfingerprint": [17, 19, 123, 124, 157, 158], "mincharngramfingerprint": [17, 19, 123, 124, 157, 158], "mintokenngramfingerprint": [17, 19, 123, 124, 157, 158], "multivaluesrel": [17, 19, 123, 124, 157, 158], "setallowmultitokenchunk": [17, 19, 123, 124, 157, 158], "mc": [17, 19, 123, 124, 157, 158], "skip": [17, 19, 35, 36, 39, 42, 119, 123, 124, 153, 157, 158], "multitoken": [17, 19, 123, 124, 157, 158], "bow": [17, 19, 44, 123, 124, 157, 158], "word": [17, 19, 35, 36, 44, 53, 68, 71, 73, 75, 77, 79, 93, 94, 97, 98, 99, 100, 104, 119, 123, 124, 126, 133, 137, 138, 139, 140, 147, 153, 157, 158, 160, 168, 172, 173, 174, 175, 181, 216], "setenablecharfingerprintmatch": [17, 19, 123, 124, 157, 158], "ecfm": [17, 19, 123, 124, 157, 158], "char": [17, 19, 35, 36, 39, 69, 103, 119, 123, 124, 145, 153, 157, 158, 180], "fingerprint": [17, 19, 123, 124, 157, 158], "setenablefuzzymatch": [17, 19, 123, 124, 157, 158], "efm": [17, 19, 123, 124, 157, 158], "fuzzi": [17, 19, 123, 124, 157, 158], "setenabletokenfingerprintmatch": [17, 19, 123, 124, 157, 158], "driven": [17, 19, 123, 124, 157, 158], "three": [17, 19, 42, 66, 123, 124, 148, 157, 158], "maxtokenngramdrop": [17, 19, 123, 124, 157, 158], "setfuzzydistancescalingmod": [17, 19, 123, 124, 157, 158], "fdsm": [17, 19, 123, 124, 157, 158], "scale": [17, 19, 24, 25, 26, 27, 58, 85, 123, 124, 135, 157, 158, 170], "mode": [17, 19, 24, 25, 26, 27, 35, 36, 39, 40, 58, 69, 83, 85, 103, 116, 117, 119, 123, 124, 133, 135, 145, 151, 153, 157, 158, 168, 170, 180, 188], "short": [17, 19, 79, 123, 124, 138, 157, 158, 173], "setfuzzymatchingdistancethreshold": [17, 19, 123, 124, 157, 158], "fmdth": [17, 19, 123, 124, 157, 158], "setfuzzymatchingdist": [17, 19, 123, 124, 157, 158], "fmd": [17, 19, 123, 124, 157, 158], "levenshtein": [17, 19, 35, 36, 44, 119, 123, 124, 153, 157, 158], "longest": [17, 19, 123, 124, 157, 158], "jaccard": [17, 19, 123, 124, 157, 158], "lc": [17, 19, 123, 124, 157, 158], "setmaxcharngramfingerprint": [17, 19, 123, 124, 157, 158], "setmaxtokenngramdroppingcharsratio": [17, 19, 123, 124, 157, 158], "etd": [17, 19, 123, 124, 157, 158], "amount": [17, 19, 44, 123, 124, 157, 158, 183], "drop": [17, 19, 123, 124, 157, 158, 203], "ratio": [17, 19, 123, 124, 157, 158], "enabletokenngrammatch": [17, 19, 123, 124, 157, 158], "whenev": [17, 19, 123, 124, 157, 158], "matter": [17, 19, 85, 123, 124, 157, 158], "final": [17, 19, 57, 81, 103, 123, 124, 157, 158, 198], "setmaxtokenngramdroppingoper": [17, 19, 123, 124, 157, 158], "setmaxtokenngramdroppingtoken": [17, 19, 123, 124, 157, 158], "veri": [17, 19, 35, 36, 69, 103, 119, 123, 124, 145, 153, 157, 158, 180], "high": [17, 19, 104, 123, 124, 157, 158], "sy": [17, 19, 123, 124, 157, 158], "maxsiz": [17, 19, 123, 124, 157, 158], "setmaxtokenngramfingerprint": [17, 19, 123, 124, 157, 158], "mxtnf": [17, 19, 123, 124, 157, 158], "setmincharngramfingerprint": [17, 19, 123, 124, 157, 158], "setmintokenngramfingerprint": [17, 19, 123, 124, 157, 158], "mntnf": [17, 19, 123, 124, 157, 158], "min": [17, 19, 23, 123, 124, 134, 157, 158, 169, 183], "setmultivaluesrel": [17, 19, 123, 124, 157, 158], "send": [17, 19, 123, 124, 157, 158], "r": [17, 19, 123, 124, 157, 158, 190], "share": [17, 50, 114], "fuzzymatch": 17, "drug_chunk_embed": [17, 19, 50, 123, 124, 157, 158], "drug_chunk": [17, 19, 50, 123, 124, 157, 158], "slice": [17, 19, 49, 50, 123, 124, 157, 158], "drug_embed": [17, 19, 50, 123, 124, 157, 158], "drug_action_treatment_mapp": [17, 19, 21], "chunkmapperfilter": [18, 193], "chunkmapp": [18, 19, 20, 21, 61, 122, 124, 125, 156, 158, 159], "successfulli": [18, 194], "returncriteria": 18, "success": 18, "fail": [18, 35, 36, 39, 45, 55, 119, 120, 153, 154, 194], "chunkmapperfilterermodel": 18, "setreturncriteria": 18, "return_criteria": 18, "itself": [18, 64], "self": [18, 47, 55], "docmapperapproach": [19, 124, 158, 193], "docmappermodel": [19, 124, 158, 193], "cach": [19, 50, 55, 64, 79, 98, 99, 100, 123, 124, 126, 138, 139, 140, 157, 158, 160, 173, 174, 175, 187, 201], "assertion_filter": [20, 61], "chunk_convert": [20, 61], "chunk_key_phrase_extract": [20, 61], "chunk_sentence_splitt": [20, 61], "chunker_filter": [20, 61], "chunkmapper_filter": [20, 61], "docmapp": [20, 61, 122, 125, 156, 159], "mapper2_chunk": [20, 61], "mapper2chunk": 21, "annotatorproperti": [21, 37, 45, 94, 111], "compat": [21, 30, 31, 32, 69, 132, 144, 145, 149, 167, 179, 180, 186, 193, 205], "bed": 21, "azithromycin": 21, "difficulti": 21, "nausea": 21, "zofran": 21, "intermitt": 21, "sweat": 21, "ner_jsl": [21, 24, 47, 57, 64, 68, 69, 71], "setfilternonevalu": 21, "annotatortyp": [21, 45, 94, 120, 154, 193], "bactericid": 21, "antiemet": 21, "filternonevalu": 21, "documentlogregclassifierapproach": [22, 193], "classifi": [22, 23, 24, 26, 29, 46, 58, 85, 86, 129, 133, 134, 144, 163, 168, 169, 193], "genericclassifiermodel": [22, 23, 24, 26, 27, 58, 85, 134, 169, 193], "tol": [22, 23, 134, 169], "converg": [22, 23, 134, 169], "toler": [22, 23, 134, 169], "fitintercept": [22, 23, 134, 169], "intercept": [22, 23, 134, 169], "form": [22, 23, 35, 36, 44, 50, 53, 63, 69, 75, 80, 85, 87, 90, 119, 133, 134, 145, 153, 168, 169, 180], "vectorizationmodelpath": [22, 23, 134, 169], "classificationmodelpath": [22, 23, 134, 169], "could": [22, 23, 33, 44, 69, 90, 94, 133, 134, 145, 168, 169, 180], "stopwords_clean": [22, 23, 134, 169], "stopwordsclean": [22, 23, 134, 169, 193], "cleantoken": [22, 23, 134, 169], "stemmer": [22, 23, 134, 169, 193], "stem": [22, 23, 85, 86, 87, 129, 134, 163, 169], "gen_clf": [22, 23, 58, 134, 169], "setlabelcolumn": [22, 58, 69, 85, 104, 133, 134, 145, 168, 169, 180], "clf_model": [22, 23, 58, 134, 169], "setclassificationmodelpath": [22, 23, 134, 169], "setfitintercept": [22, 23, 134, 169], "setlabel": [22, 23, 134, 169], "k": [22, 23, 93, 97, 98, 126, 134, 137, 139, 160, 169, 172, 174, 183, 185], "settol": [22, 23, 134, 169], "dist": [22, 23, 93, 126, 134, 160, 169], "setvectorizationmodelpath": [22, 23, 134, 169], "documentlogregclassifiermodel": [22, 193], "mergechunk": [22, 23, 134, 169], "vectorizationmodel": [22, 23, 134, 169], "classificationmodel": [22, 23, 134, 169], "classifier_logreg_ad": 22, "setclassificationmodel": [22, 23, 134, 169], "setmergechunk": [22, 23, 134, 169], "setvectorizationmodel": [22, 23, 134, 169], "documentmlclassifierapproach": [23, 134, 169, 193], "documentmlclassifierparam": [23, 193], "classificationmodelclass": [23, 134, 169], "sparkml": [23, 134, 169], "svm": [23, 27, 134, 169], "maxtokenngram": [23, 134, 169], "mintokenngram": [23, 134, 169], "setclassificationmodelclass": [23, 134, 169], "setmaxtokenngram": [23, 134, 169], "setmintokenngram": [23, 134, 169], "documentmlclassifiermodel": [23, 134, 169, 193], "classifierml_ad": 23, "fewshotassertionclassifierapproach": 24, "generic_classifi": [24, 26, 27, 61, 85, 149, 193], "genericclassifierapproach": [24, 26, 27, 58, 85, 193], "purpos": [24, 37, 58], "few": [24, 29], "shot": [24, 29, 73, 88, 130, 147, 164, 181], "epochsn": [24, 25, 26, 27, 58, 85, 135, 170], "featuresc": [24, 25, 26, 27, 58, 85, 135, 170], "fiximbal": [24, 25, 26, 27, 58, 85, 135, 170], "labelcolumn": [24, 25, 26, 27, 58, 69, 85, 104, 133, 135, 145, 168, 170, 180], "modelfil": [24, 25, 26, 27, 58, 85, 135, 170], "drouptup": [24, 25, 26, 27, 58, 85, 135, 170], "setepochsnumb": [24, 25, 26, 27, 58, 85, 135, 170], "setfeaturesc": [24, 25, 26, 27, 58, 85, 135, 170], "feature_sc": [24, 25, 26, 27, 58, 85, 135, 170], "zscore": [24, 25, 26, 27, 58, 85, 135, 170], "minmax": [24, 25, 26, 27, 58, 85, 135, 170], "setfiximbal": [24, 25, 26, 27, 58, 85, 135, 170], "fix_imbal": [24, 25, 26, 27, 58, 85, 135, 170], "whenther": [24, 25, 26, 27, 58, 85, 135, 170], "balanc": [24, 25, 26, 27, 58, 85, 135, 170], "trainig": [24, 25, 26, 27, 58, 85, 135, 170], "label_column": [24, 25, 26, 27, 58, 85, 135, 170], "learning_r": [24, 25, 26, 27, 58, 85, 135, 170], "setmodelfil": [24, 25, 26, 27, 58, 85, 135, 170], "mode_fil": [24, 25, 26, 27, 58, 85, 135, 170], "setmulticlass": [24, 25, 26, 27, 58, 85, 135, 170], "output_logs_path": [24, 25, 26, 27, 58, 85, 135, 170], "validation_split": [24, 25, 26, 27, 58, 85, 135, 170], "validaiton": [24, 25, 26, 27, 58, 85, 135, 170], "much": [24, 25, 26, 27, 58, 85, 94, 133, 135, 168, 170], "fewshotassertionclassifiermodel": 24, "run": [24, 29, 104, 185, 194], "larg": [24, 29, 30, 32, 69, 97, 98, 103, 132, 137, 139, 144, 145, 167, 172, 174, 179, 180], "llm": [24, 29, 97, 98, 137, 139, 149, 172, 174], "setfit": [24, 25, 29, 135, 170], "disease_syndrome_disord": [24, 47], "chronic": [24, 47, 148], "obstruct": 24, "pulmonari": 24, "arterioven": 24, "malform": 24, "has_differentiable_head": [24, 29], "differenti": [24, 29], "largefewshotclassifiermodel": [24, 29], "assertion_fewshotclassifi": 24, "fewshotclassifierapproach": [25, 135, 170, 193], "generic_log_reg_classifi": [25, 28, 61], "genericlogregclassifierapproach": [25, 26, 193], "fewshotclassifi": 25, "tunstal": [25, 135, 170], "et": [25, 135, 170], "al": [25, 135, 170], "2022": [25, 37, 83, 135, 148, 170, 190], "vari": [25, 26, 27, 135, 148, 170], "fewshotclassifiermodel": [25, 135, 170, 193], "genericlogregclassifiermodel": [25, 26, 193], "multinomi": 26, "logist": [26, 27], "genericlogregclassifi": 26, "deriv": [26, 27], "genericclassifi": [26, 27, 104], "neural": [26, 69, 104, 145, 180], "network": [26, 69, 104, 145, 180], "featurevector": [26, 27], "feature_vectir": [26, 27], "generic_logreg_classifier_ad": 26, "genericsvmclassifierapproach": [27, 193], "svmclassifi": 27, "machin": [27, 103, 104], "standard": [27, 35, 71, 75, 101], "genericsvmclassifiermodel": [27, 193], "generic_svm_classifier_ad": 27, "document_log_classifi": [28, 61], "document_ml_classifi": [28, 61], "few_shot_assertion_classifi": [28, 61], "few_shot_classifi": [28, 61], "generic_svm_classifi": [28, 61], "large_few_shot_classifi": [28, 61], "medical_bert_for_sequence_classif": [28, 61, 88, 132, 167], "medical_bert_for_token_classifi": [28, 61, 144, 179], "medical_distilbert_for_sequence_classif": [28, 61], "hascasesensitiveproperti": [29, 30, 31, 32, 79, 93, 97, 99, 193], "hasbatchedannot": [29, 30, 31, 32, 69, 79, 97, 99, 193], "hasmaxsentencelengthlimit": 29, "senstivi": 29, "felt": [29, 30, 32, 132, 167], "bit": [29, 30, 32, 132, 167], "drowsi": [29, 30, 32, 132, 167], "blur": [29, 30, 32, 132, 167], "vision": [29, 30, 32, 132, 167], "take": [29, 30, 32, 36, 39, 42, 49, 55, 58, 63, 80, 97, 98, 103, 111, 119, 132, 137, 139, 153, 167, 172, 174, 205], "aspirin": [29, 30, 32, 75, 132, 167], "9672883": 29, "hasdifferentiablehead": 29, "modelarchitectur": 29, "getclass": [29, 30, 31, 32, 69, 73, 85, 86, 88, 129, 130, 132, 144, 145, 147, 163, 164, 167, 179, 180, 181], "model_architectur": 29, "architectur": [29, 69, 145, 180], "underli": [29, 47], "mpnet": [29, 193], "large_fewshot_classifier_ad": 29, "medicalbertforsequenceclassif": [30, 32, 46, 88, 130, 132, 164, 167, 193], "medicalbertfortokenclassifi": [30, 31, 144, 179, 193], "head": [30, 31, 32, 69, 103, 132, 144, 145, 167, 179, 180], "linear": [30, 31, 32, 104, 132, 144, 167, 179], "pool": [30, 32, 132, 167], "huggingfac": [30, 31, 32, 132, 144, 167, 179], "faster": [30, 32, 104, 132, 144, 167, 179], "tokenclassifi": [30, 31, 132, 144, 167, 179], "coalescesent": [30, 32, 73, 88, 130, 132, 147, 164, 167, 181], "loadsavedmodelopensourc": [30, 31, 32, 88, 130, 132, 144, 164, 167, 179], "bertfortokenclassifierpath": [30, 31, 32, 88, 130, 132, 144, 164, 167, 179], "tfmodelpath": [30, 31, 32, 88, 130, 132, 144, 164, 167, 179], "bertfortokenclassifi": [30, 31, 32, 88, 130, 132, 144, 164, 167, 179], "taht": [30, 31, 32, 88, 130, 132, 144, 164, 167, 179], "tf": [30, 31, 32, 88, 104, 130, 132, 144, 164, 167, 179], "bert_sequence_classifier_ad": 30, "setcoalescesent": [30, 32, 88, 130, 132, 164, 167], "probabl": [30, 32, 77, 79, 88, 97, 98, 99, 100, 130, 132, 137, 138, 139, 140, 164, 167, 172, 173, 174, 175, 183], "due": [30, 32, 88, 130, 132, 164, 167], "almost": [30, 32, 88, 130, 132, 164, 167], "help": [30, 32, 35, 36, 39, 88, 93, 103, 104, 119, 130, 132, 153, 164, 167, 188], "feed": [30, 32, 69, 88, 130, 132, 164, 167], "entir": [30, 32, 69, 88, 130, 132, 145, 164, 167, 180], "hidden": [31, 104, 144, 179], "state": [31, 69, 79, 99, 100, 133, 138, 140, 144, 145, 168, 173, 175, 179, 180, 188, 190, 214], "bert_token_classifier_ner_bionlp": [31, 144, 179], "erba": [31, 144, 179], "ir": [31, 119, 144, 179], "myb": [31, 144, 179], "viru": [31, 47, 144, 179], "construct": [31, 144, 179], "erythroid": [31, 144, 179], "infect": [31, 47, 107, 144, 179], "bone": [31, 144, 179], "marrow": [31, 144, 179], "blastoderm": [31, 144, 179], "cultur": [31, 144, 179], "tissue_structur": [31, 144, 179], "medicaldistilbertforsequenceclassif": [32, 193], "distilbert": 32, "sequenceclassifi": 32, "distilbertforsequenceclassif": [32, 193], "destilbertfortokenclassifierpath": 32, "distilbert_sequence_classifier_ad": 32, "contextualparserapproach": [33, 193], "setjsonpath": 33, "along": [33, 35, 36, 119, 153], "unifi": 33, "jsonpath": 33, "tsv": [33, 71], "optionalcontextrul": 33, "regardless": [33, 63], "shortestcontextmatch": 33, "stop": [33, 46, 69, 71, 97, 98, 99, 100, 103, 137, 139, 140, 145, 172, 174, 175, 180, 183, 187], "find": [33, 49, 53, 80, 85, 87, 88, 93, 113, 130, 164, 198], "completecontextmatch": 33, "exact": [33, 53, 63], "metastas": 33, "pt1bn0m0": 33, "t5": 33, "primari": 33, "colon": 33, "contextualpars": [33, 64], "regex_token": [33, 203], "39": 33, "00": [33, 190], "49": [33, 190], "148": 33, "156": 33, "ct4bcn2m1": 33, "189": 33, "194": 33, "n3m1": 33, "316": 33, "323": 33, "setcompletecontextmatch": 33, "boundari": 33, "setoptionalcontextrul": 33, "setshortestcontextmatch": 33, "contextualparsermodel": [33, 193], "mycontextualparsermodel": 33, "date_of_birth_pars": 33, "contextual_pars": [34, 61], "deidentication_param": [35, 38, 61], "deidentificationparam": [35, 36, 119, 153], "deidentificationmodel": [35, 36, 42, 119, 153, 193], "obfusc": [35, 36, 37, 39, 40, 41, 42, 119, 153, 185, 188], "mask": [35, 36, 39, 47, 115, 119, 153, 185, 205], "person": [35, 44, 47, 53, 71, 119, 148, 153, 188, 205], "These": [35, 47, 57, 88, 119, 130, 153, 164], "setregexpatternsdictionari": [35, 119, 153], "line": [35, 53, 63, 71, 119, 153, 185, 190, 198, 203, 217], "secur": [35, 188], "securerandom": 35, "fake": [35, 36, 119, 153], "system": [35, 83, 188], "variabl": [35, 79, 99, 100, 138, 140, 148, 173, 175], "spark_nlp_jsl_seed_algorithm": 35, "chosen": [35, 69, 145, 180], "impact": 35, "potenti": [35, 104], "block": [35, 64], "rng": [35, 183], "sha1prng": 35, "regexpatternsdictionari": [35, 119, 153], "protect": [35, 47, 64, 119, 153], "obfuscatereffil": [35, 40, 119, 153, 188, 205], "reffileformat": [35, 40, 119, 153], "refsep": [35, 40, 119, 153], "sep": [35, 119, 153, 190], "charact": [35, 40, 44, 53, 71, 90, 103, 119, 153, 185], "reffil": [35, 40, 119, 153], "selectiveobfuscationmodespath": [35, 119, 153], "mask_same_length_char": [35, 39, 119, 153], "asterisk": [35, 36, 39, 119, 153], "minu": [35, 36, 39, 119, 153, 205], "plu": [35, 36, 39, 119, 153], "bracket": [35, 36, 39, 119, 153], "mask_entity_label": [35, 39, 119, 153], "mask_fixed_length_char": [35, 39, 119, 153], "fix": [35, 36, 39, 119, 153], "invok": [35, 39, 119, 153], "setfixedmasklength": [35, 36, 39, 119, 153], "intact": [35, 36, 39, 119, 153], "deidentifi": [35, 37, 39, 41, 115, 119, 153, 185, 205], "entitycasingmodespath": [35, 119, 153], "uppercas": [35, 119, 153], "upper": [35, 36, 69, 85, 86, 87, 119, 129, 145, 153, 163, 180], "capit": [35, 119, 153], "titlecas": [35, 119, 153], "setuseabbrevi": [35, 40, 119, 153], "clinical_sensitive_ent": [35, 40, 119, 153], "ner_deid_enrich": [35, 40, 119, 153], "ner_con": [35, 119, 153], "dei": [35, 41, 119, 153], "dic_regex_patterns_main_categori": [35, 119, 153], "setobfuscatereffil": [35, 40, 42, 119, 153], "obfuscate_fixed_ent": [35, 119, 153], "setreffileformat": [35, 40, 42, 119, 153], "setrefsep": [35, 40, 42, 119, 153], "setmod": [35, 36, 37, 39, 119, 153, 205], "setdateformat": [35, 36, 39, 119, 153], "mm": [35, 55, 74, 119, 153, 188, 190, 201], "dd": [35, 55, 74, 83, 90, 119, 153, 188, 201], "yy": [35, 119, 153], "yyyi": [35, 55, 74, 83, 119, 153, 188, 201], "setobfuscated": [35, 36, 37, 39, 119, 153], "setdatetag": [35, 36, 37, 119, 153], "setdai": [35, 36, 39, 119, 153], "setobfuscaterefsourc": [35, 36, 37, 39, 40, 119, 153], "7194334": [35, 41, 119, 153], "93": [35, 41, 119, 153], "oliveira": [35, 41, 119, 153], "record": [35, 41, 119, 153, 188], "2079": [35, 41, 119, 153], "09": [35, 41, 119, 153], "01010101": [35, 41, 119, 153], "dr": [35, 40, 41, 42, 119, 153], "gregori": [35, 41, 119, 153], "hous": [35, 41, 119, 153], "agerang": [35, 36, 39, 119, 153], "agerangesbyhipaa": [35, 36, 119, 153], "blacklistent": [35, 36, 119, 153], "combineregexpattern": [35, 119, 153], "consistentobfusc": [35, 36, 119, 153], "dateformat": [35, 36, 39, 83, 119, 153, 188], "datetag": [35, 36, 119, 153], "datetoyear": [35, 36, 119, 153], "dai": [35, 36, 37, 39, 74, 119, 120, 153, 154, 188], "fixedmasklength": [35, 36, 39, 119, 153], "genderawar": [35, 36, 39, 40, 119, 153], "ignoreregex": [35, 36, 119, 153], "israndomdatedisplac": [35, 36, 119, 153], "keepyear": [35, 36, 119, 153], "mappingscolumn": [35, 36, 119, 153], "maskingpolici": [35, 36, 39, 119, 153], "metadatamaskingpolici": [35, 36, 119, 153], "minyear": [35, 36, 119, 153], "obfuscatebyagegroup": [35, 36, 119, 153], "obfuscated": [35, 36, 39, 119, 153], "obfuscaterefsourc": [35, 36, 39, 40, 119, 153, 188], "obfuscationstrategyonexcept": [35, 36, 119, 153], "outputasdocu": [35, 36, 47, 119, 153], "regexoverrid": [35, 36, 119, 153], "regexpatternsdictionaryasjsonstr": [35, 119, 153], "region": [35, 36, 39, 115, 119, 153, 213], "returnentitymap": [35, 36, 119, 153], "sameentitythreshold": [35, 36, 119, 153], "samelengthformattedent": [35, 36, 39, 119, 153], "unnormalizeddatemod": [35, 36, 39, 119, 153], "useshifdai": [35, 36, 119, 153], "zipcodetag": [35, 36, 119, 153], "getblacklist": [35, 36, 119, 153], "getsamelengthformattedent": [35, 36, 119, 153], "getuseshiftdai": [35, 36, 119, 153], "useshiftdai": [35, 36, 39, 119, 153], "setagegroup": [35, 36, 119, 153], "activ": [35, 36, 39, 85, 86, 104, 119, 129, 153, 163, 217], "agegroup": [35, 36, 119, 153], "fulli": [35, 36, 119, 153], "bound": [35, 36, 103, 119, 153, 212, 217], "english": [35, 36, 39, 40, 119, 153, 188, 205], "babi": [35, 36, 119, 153], "toddler": [35, 36, 119, 153], "child": [35, 36, 119, 153], "teenag": [35, 36, 119, 153], "20": [35, 36, 37, 58, 74, 83, 103, 119, 133, 153, 168], "adult": [35, 36, 119, 153], "65": [35, 36, 119, 148, 153, 190], "senior": [35, 36, 119, 153], "100": [35, 36, 58, 79, 99, 100, 119, 133, 138, 140, 153, 168, 173, 175, 216], "setagerang": [35, 36, 39, 119, 153], "preserv": [35, 36, 39, 71, 119, 153], "setagerangesbyhipaa": [35, 36, 119, 153], "hipaa": [35, 36, 119, 153], "health": [35, 36, 46, 119, 153, 214], "insur": [35, 36, 119, 148, 153], "portabl": [35, 36, 119, 153], "account": [35, 36, 49, 119, 153, 188], "act": [35, 36, 81, 119, 133, 153, 168], "privaci": [35, 36, 119, 153], "mandat": [35, 36, 119, 153], "90": [35, 36, 119, 153, 190], "younger": [35, 36, 119, 148, 153], "remain": [35, 36, 40, 119, 153], "unchang": [35, 36, 119, 153], "larger": [35, 36, 47, 71, 119, 153], "iban": [35, 36, 119, 153, 188], "zip": [35, 36, 39, 119, 153, 188], "npi": [35, 36, 119, 153, 188], "dln": [35, 36, 39, 119, 153, 188], "passport": [35, 36, 119, 153, 188], "c_card": [35, 36, 119, 153, 188], "dea": [35, 36, 119, 153, 188], "ssn": [35, 36, 39, 119, 153, 188], "ip": [35, 36, 119, 153, 188], "setblacklistent": [35, 36, 119, 153], "setcombineregexpattern": [35, 119, 153], "combin": [35, 47, 49, 71, 72, 80, 81, 107, 119, 142, 148, 153, 176], "setconsistentobfusc": [35, 36, 119, 153], "displac": [35, 36, 39, 119, 153, 188], "pars": [35, 36, 37, 39, 53, 83, 119, 153, 185, 190, 201, 208], "setdatetoyear": [35, 36, 119, 153], "setentitycasingmod": [35, 119, 153], "fixed_length_char": [35, 36, 39, 119, 153], "polici": [35, 36, 39, 75, 119, 153], "setgenderawar": [35, 36, 39, 40, 119, 153], "l": [35, 36, 40, 119, 153, 190], "awar": [35, 36, 39, 40, 103, 119, 153], "effect": [35, 36, 39, 40, 97, 98, 119, 137, 139, 153, 172, 174], "decreas": [35, 36, 39, 40, 103, 104, 119, 153], "setignoreregex": [35, 36, 119, 153], "increas": [35, 36, 85, 87, 97, 98, 104, 119, 137, 139, 153, 172, 174], "accuraci": [35, 36, 69, 104, 119, 145, 153, 180, 205], "setisrandomdatedisplac": [35, 36, 119, 153], "setkeepyear": [35, 36, 119, 153], "keep": [35, 36, 58, 69, 93, 97, 98, 103, 119, 126, 137, 139, 145, 153, 160, 172, 174, 180, 183], "modifi": [35, 36, 57, 64, 68, 71, 119, 153], "month": [35, 36, 66, 74, 119, 153], "setlanguag": [35, 36, 37, 39, 40, 119, 153], "faker": [35, 36, 37, 39, 40, 115, 119, 153, 188, 205], "german": [35, 36, 39, 40, 119, 153, 188], "spanish": [35, 36, 39, 40, 119, 153, 188], "fr": [35, 36, 39, 40, 119, 153, 188], "french": [35, 36, 39, 40, 119, 153, 188], "arab": [35, 36, 39, 40, 119, 153, 188], "ro": [35, 36, 39, 40, 119, 153, 188], "romanian": [35, 36, 39, 40, 119, 153, 188], "setmappingscolumn": [35, 36, 41, 119, 153], "setmaskingpolici": [35, 36, 39, 119, 153], "same_length_char": [35, 36, 39, 119, 153], "compos": [35, 36, 39, 119, 153], "surround": [35, 36, 39, 49, 119, 153], "squar": [35, 36, 39, 119, 153], "total": [35, 36, 39, 119, 153], "smith": [35, 36, 39, 80, 119, 153], "less": [35, 36, 39, 69, 119, 145, 153, 180], "jo": [35, 36, 39, 119, 153], "setmetadatamaskingpolici": [35, 36, 119, 153], "asterix": [35, 36, 119, 153], "just": [35, 36, 46, 69, 119, 145, 153, 180], "setminyear": [35, 36, 119, 153], "1929": [35, 36, 119, 153], "anonym": [35, 36, 39, 119, 153, 198], "setobfuscatebyagegroup": [35, 36, 119, 153], "rang": [35, 36, 37, 47, 69, 119, 120, 145, 153, 154, 180, 183], "f": [35, 40, 55, 114, 119, 148, 153], "setobfuscationstrategyonexcept": [35, 36, 119, 153], "occur": [35, 36, 69, 77, 79, 97, 98, 99, 100, 119, 137, 138, 139, 140, 145, 153, 172, 173, 174, 175, 180, 188], "four": [35, 36, 119, 153], "throw": [35, 36, 83, 119, 148, 153], "setoutputasdocu": [35, 36, 119, 153], "join": [35, 36, 47, 81, 107, 119, 153], "c": [35, 40, 119, 153, 197], "setregexoverrid": [35, 36, 119, 153], "setregexpatternsdictionaryasjsonstr": [35, 119, 153], "setregion": [35, 36, 39, 119, 153], "With": [35, 36, 39, 40, 119, 153], "especi": [35, 36, 39, 119, 153, 188], "2023": [35, 36, 37, 39, 74, 119, 148, 153], "eu": [35, 36, 39, 119, 153], "european": [35, 36, 39, 119, 153], "union": [35, 36, 39, 119, 153], "usa": [35, 36, 39, 119, 145, 153, 180], "setreturnentitymap": [35, 36, 119, 153], "setsameentitythreshold": [35, 36, 119, 153], "setsamelengthformattedent": [35, 36, 39, 119, 153], "ones": [35, 36, 39, 40, 42, 69, 79, 119, 138, 145, 153, 173, 180], "setse": [35, 36, 37, 39, 40, 119, 120, 153, 154, 183], "repli": [35, 36, 39, 40, 119, 153], "setselectiveobfuscationmod": [35, 39, 119, 153], "setunnormalizeddatemod": [35, 36, 39, 119, 153], "setuseshifdai": [35, 36, 37, 119, 153], "setuseshiftdai": [35, 36, 39, 119, 153], "shift": [35, 36, 37, 39, 119, 120, 153, 154], "setzipcodetag": [35, 36, 119, 153], "regexent": [35, 119, 153], "regexpatterndictionari": [35, 119, 153], "deidentify_larg": [35, 119, 153], "getregexent": [35, 119, 153], "deidentify_enriched_clin": 35, "deidentif": [36, 37, 38, 39, 41, 61, 115, 121, 122, 155, 156, 185, 188, 193, 205], "anonim": [36, 39, 119, 153], "60": [36, 39, 119, 153, 185, 188], "invalid": [36, 39], "obfuscatorreffil": [36, 119, 153], "randomli": [36, 39, 69, 119, 145, 153, 180, 188], "fax": [36, 39, 119, 153, 188], "idnum": [36, 39, 119, 153], "bioid": [36, 39, 119, 153, 188], "medicalrecord": [36, 39, 119, 153, 188], "vin": [36, 39, 119, 153], "plate": [36, 39, 119, 153], "documenthashcod": [37, 120, 154, 193], "hash": [37, 120, 154], "accordingli": 37, "patientidcolumn": [37, 120, 154], "dateshiftcolumn": [37, 120, 154], "newdateshift": [37, 120, 154], "rangedai": [37, 120, 154], "patientid": 37, "a001": 37, "a003": 37, "chri": 37, "brown": [37, 212, 213], "discharg": 37, "02": [37, 74], "04": [37, 74], "15": [37, 64, 68, 74, 205], "03": [37, 74, 87, 190], "moor": 37, "dateshift": [37, 115, 205], "my_input_df": 37, "documenthash": [37, 115], "setdateshiftcolumn": [37, 120, 154], "ner_deid_subentity_aug": 37, "de_identif": 37, "deid_text": 37, "pipeline_col": 37, "pipeline_col_model": 37, "ellend": 37, "manual": 37, "errol": 37, "bang": 37, "ariel": 37, "null": [37, 190], "jean": 37, "cotton": 37, "predefin": [37, 50, 63, 90, 120, 154], "setnewdateshift": [37, 120, 154], "setpatientidcolumn": [37, 120, 154], "setrangedai": [37, 120, 154], "doccument_hashcod": [38, 61], "light_deidentif": [38, 61, 205], "name_obfusc": [38, 61], "reidentif": [38, 61, 193], "lightdeidentif": [39, 205], "light": [39, 190], "design": 39, "doctor": [39, 40, 188], "million": [39, 75, 99, 100, 103, 140, 175], "setcustomfak": 39, "And": [39, 47, 66, 103], "dateent": 39, "dob": 39, "dod": 39, "selectiveobfuscationmod": 39, "customfak": 39, "jane": 39, "citi": [39, 73, 95, 147, 181, 188], "york": [39, 73, 147, 181], "lo": 39, "angel": 39, "school": 39, "oxford": 39, "harvard": 39, "setdateent": 39, "namechunkobfusc": [40, 42, 193], "pretraind": 40, "seper": [40, 208], "samelength": 40, "nameent": 40, "setnameent": 40, "setsamelength": 40, "mike": 40, "namechunkobfuscatorapproach": [40, 42, 193], "obfuscator_nam": 40, "replacer_nam": [40, 42], "obfuscated_nam": 40, "setusereplac": [40, 42], "davi": [40, 42], "y": [40, 42], "admit": [40, 42, 80], "seen": [40, 42, 103], "attend": [40, 42], "physician": [40, 42], "lorand": [40, 42], "schedul": [40, 42], "emerg": [40, 42, 214], "assess": [40, 42, 214], "charlestin": 40, "loweri": 40, "reidentifi": 41, "py": [41, 42, 183], "frame": [41, 69, 145, 180, 190], "reideintif": 41, "protectedent": 41, "reid": 41, "redeideintif": 41, "datenorm": [42, 74, 193], "usereplac": 42, "disabl": [42, 79, 138, 148, 173, 183, 190], "nonevaluesto": 42, "encount": [42, 97, 98, 99, 100, 137, 139, 140, 172, 174, 175], "placehold": 42, "place_hold": 42, "placeholderdelimit": 42, "wrap": [42, 183], "ner_deid_generic_aug": 42, "ner_converter_nam": 42, "names_test": 42, "obfuscated_document_nam": 42, "nlppipelin": [42, 44, 57], "model_chunck_obfusc": 42, "sample_text": 42, "mr": 42, "lmodel": 42, "re": [42, 61, 97, 98, 130, 137, 139, 149, 164, 172, 174, 190, 193], "print": [42, 113, 185, 186, 187, 191, 211, 212, 216], "fitzpatrick": 42, "bowman": 42, "acosta": 42, "getusereplac": 42, "setnonevaluesto": 42, "retain": 42, "target_text": 42, "unrecogn": 42, "illegalargumentexcept": [42, 186], "thrown": 42, "setplacehold": 42, "setplaceholderdelimit": 42, "ner_disambigu": [43, 61], "nerdisambigu": [44, 193], "interest": 44, "compani": [44, 188], "kb": 44, "ne": [44, 148], "mention": [44, 75], "surfac": 44, "instanti": [44, 53, 63, 69, 85, 90, 133, 145, 168, 180, 190], "embeddingtypeparam": 44, "numfirstchar": 44, "initi": [44, 69, 85, 145, 180, 183, 185, 190], "tokensearch": 44, "narrowwithapproximatematch": 44, "narrow": 44, "levenstein": 44, "levenshteindistancethresholdparam": 44, "nearmatchinggapparam": 44, "put": [44, 94, 133, 168], "trim": [44, 103], "candid": [44, 93, 126, 160], "len": 44, "nearmatchinggap": 44, "predictionslimit": 44, "s3knowledgebasenam": 44, "contest": 44, "donald": 44, "trump": 44, "who": [44, 80, 103, 142, 176], "defeat": 44, "christina": 44, "aguilera": 44, "sentenceembed": [44, 133, 168, 193], "nerdlmodel": [44, 49, 69, 145, 180, 193], "sets3knowledgebasenam": 44, "setnumfirstchar": 44, "wikipedia": 44, "curid": 44, "4848272": 44, "31698421": 44, "55907961": 44, "144171": 44, "6636454": 44, "setembeddingtyp": 44, "setlevenshteindistancethresholdparam": 44, "setnarrowwithapproximatematch": 44, "setnearmatchinggapparam": 44, "setpredictionlimit": 44, "settokensearch": 44, "nerdisambiguatormodel": [44, 193], "disambiguator_p": 44, "doc2chunkintern": [45, 193], "chunkcol": [45, 94, 120, 154], "arraytyp": [45, 94, 120, 154], "setisarrai": [45, 94, 120, 154], "startcolbytokenindex": [45, 120, 154], "prepend": [45, 103, 120, 154], "whitespac": [45, 97, 98, 103, 120, 137, 139, 154, 172, 174], "isarrai": [45, 120, 154], "failonmiss": [45, 120, 154], "job": [45, 120, 154], "advanc": [45, 120, 154], "natur": [45, 88, 120, 130, 154, 164], "chunk2doc": [45, 95, 120, 154, 193], "miss": [45, 148, 185], "documentfiltererbyclassifi": 46, "medicalbfsc": 46, "bert_sequence_classifier_covid_senti": 46, "documentfilter": 46, "filtereddocu": 46, "posit": [46, 64, 69, 71, 85, 87, 99, 100, 140, 175, 180, 185, 190, 203, 216], "british": 46, "depart": 46, "uk": 46, "trip": 46, "australian": 46, "exchang": 46, "student": 46, "got": 46, "cancel": 46, "becaus": [46, 148, 183, 190], "coronaviru": [46, 47], "wish": 46, "everyon": 46, "pandem": [46, 99, 100, 140, 175], "181": 46, "233": 46, "documentfiltererbyn": 47, "prioriti": [47, 69, 71, 101, 103, 145, 180], "joinstr": [47, 81], "sentencedetectordlmodel": [47, 66, 193, 203], "sentence_detector_dl_healthcar": [47, 66], "covid": [47, 99, 100, 140, 175], "19": [47, 64, 68, 99, 100, 140, 175, 190], "infecti": 47, "sar": 47, "cov": 47, "peopl": [47, 99, 100, 140, 175], "experi": 47, "mild": 47, "moder": 47, "respiratori": [47, 107, 190], "ill": [47, 69, 145, 180], "recov": 47, "special": [47, 202], "serious": 47, "medic": [47, 93, 104, 188, 202, 214], "attent": 47, "cardiovascular": 47, "cancer": [47, 79, 88, 130, 138, 164, 173, 185], "seriou": 47, "anyon": 47, "sick": [47, 88, 130, 164], "die": 47, "best": [47, 69, 133, 145, 168, 180, 191], "prevent": [47, 79, 99, 100, 104, 138, 140, 173, 175], "slow": [47, 69, 104, 145, 180], "down": [47, 69, 104, 145, 180], "transmiss": 47, "well": [47, 50, 75, 103, 148, 191, 211, 216], "spread": 47, "yourself": 47, "stai": 47, "least": [47, 83, 183], "metr": 47, "apart": 47, "wear": 47, "properli": [47, 81], "wash": 47, "hand": [47, 104], "alcohol": 47, "rub": 47, "frequent": 47, "vaccin": 47, "turn": [47, 79, 138, 173], "guidanc": 47, "mouth": 47, "nose": 47, "small": [47, 103], "liquid": 47, "particl": 47, "cough": 47, "sneez": 47, "speak": 47, "sing": 47, "breath": 47, "droplet": 47, "smaller": [47, 104], "aerosol": 47, "practic": [47, 69, 145, 180], "etiquett": 47, "flex": 47, "elbow": 47, "isol": 47, "until": [47, 183], "feel": 47, "unwel": 47, "86": 47, "87": [47, 205], "223": 47, "295": 47, "473": 47, "669": 47, "854": 47, "916": 47, "1050": 47, "averageembed": [48, 49, 193], "embded": 48, "bertsentencechunkembed": [49, 51, 193], "numer": [49, 55, 104], "chunkweight": 49, "prerequisit": [49, 69, 145, 180], "nertagg": [49, 69, 85, 86, 129, 145, 163, 180], "medicalnerdlmodel": [49, 69, 145, 180], "sbluebert_base_uncased_mli": 49, "sentence_chunk_embed": 49, "31995273": 49, "04710883": 49, "28973156": 49, "1294758": 49, "12481072": 49, "027161136": 49, "24613449": 49, "0949309": 49, "1825444": 49, "2252143": 49, "45139068": 49, "12400375": 49, "0075617577": 49, "90806055": 49, "12871636": 49, "sbiobert_base_cased_mli": [49, 50, 94], "setchunkweight": 49, "entitychunkembed": [50, 193], "One": [50, 202], "tri": [50, 55, 69, 83, 145, 180, 186], "criterion": [50, 69, 85, 87, 145, 180], "syntact": [50, 85, 87], "relationship": [50, 85, 88, 130, 164, 186], "125": 50, "paracetamol": [50, 88, 130, 164], "metformin": [50, 66], "target_ent": 50, "related_ent": 50, "notat": 50, "subclass": [50, 104, 111, 114, 183], "targetent": [50, 150, 193], "insensit": 50, "entityweight": [50, 150, 193], "3f": 50, "maxsyntacticdist": [50, 85, 87], "pos_tag": [50, 85, 87, 88, 104, 130, 164], "pos_clin": [50, 85, 86, 87, 88, 129, 130, 163, 164], "dependency_pars": [50, 87, 88, 130, 164], "dependencyparsermodel": [50, 85, 86, 87, 88, 129, 130, 163, 164, 193], "dependency_conllu": [50, 85, 86, 87, 88, 129, 130, 163, 164], "setmaxsyntacticdist": [50, 85, 86, 87, 88, 129, 130, 163, 164], "settargetent": 50, "setentityweight": 50, "parient": 50, "coumadin": 50, "pill": 50, "sparkcontextfortest": 50, "267413": 50, "07614058": 50, "5620966": 50, "83838946": 50, "8911504": 50, "22319649": 50, "07094894": 50, "6885556": 50, "79176235": 50, "82672405": 50, "10939768": 50, "29242": 50, "3574444": 50, "3981813": 50, "79609615": 50, "weigh": 50, "related1": 50, "related2": 50, "extractivesummar": [51, 193], "summarizaiton": 51, "lexrank": 51, "returnsingledocu": 51, "similaritythreshold": 51, "summarys": 51, "setreturnsingledocu": 51, "compil": [51, 192, 215], "setsimilaritythreshold": 51, "minim": [51, 73, 85, 86, 88, 129, 130, 147, 163, 164, 181], "setsummarys": 51, "average_embed": [52, 61], "entity_chunk_embed": [52, 61], "extractive_summar": [52, 61], "entityrulerintern": 53, "entityrulerinternalapproach": 53, "hasstorag": 53, "There": [53, 148], "jsonl": 53, "setpatternsresourc": 53, "w": [53, 90, 193], "winterfel": 53, "j": 53, "jon": [53, 93], "stark": 53, "eddard": 53, "patternsresourc": 53, "usestorag": 53, "rocksdb": 53, "entityrul": 53, "lord": 53, "29": 53, "38": [53, 190], "alphabet": 53, "enableinmemorystorag": 53, "includestorag": 53, "sentencematch": 53, "storagepath": 53, "getenableinmemorystorag": 53, "getincludestorag": 53, "getstoragepath": 53, "setalphabetresourc": 53, "plain": 53, "setenableinmemorystorag": 53, "lookup": 53, "setincludestorag": 53, "interpret": [53, 57, 103], "setsentencematch": 53, "setstoragepath": 53, "setusestorag": 53, "entityrulerinternalmodel": 53, "hasstoragemodel": [53, 93], "databas": [53, 93, 126, 160], "entity_pattern": 53, "loadstorag": [53, 93, 126, 160], "storage_ref": [53, 93, 126, 160], "savestorag": [53, 93, 126, 160], "entity_ruler_intern": [54, 61], "featuresassembl": [55, 58, 193], "anyth": [55, 104], "cast": [55, 83], "feature_vector": [55, 58, 209], "timestampformat": 55, "hh": 55, "ss": 55, "zz": 55, "test_jsl": 55, "relfeatur": 55, "withcolumn": 55, "array_column": 55, "words_in_ent1": [55, 190], "words_in_ent2": [55, 190], "features_asm1": 55, "words_between": [55, 190], "features_t": 55, "__data": 55, "easier": 57, "produc": [57, 64, 71], "analyz": [57, 87], "cleanannot": 57, "explodeselectedfield": 57, "flattenexplodedcolumn": 57, "orderbycolumn": 57, "orderdescend": 57, "descend": [57, 83], "pretrainedpipelin": [57, 185, 186, 193], "elderli": 57, "gentleman": 57, "acut": [57, 66], "distress": 57, "clinical_assert": 57, "finish": [57, 193], "setorderbycolumn": 57, "assertion_metadata_confid": 57, "explainresult": 57, "finished_ner_chunk_explod": 57, "ner_chunk_result": [57, 185], "ner_chunk_metadata_ent": 57, "someoneels": 57, "9885": 57, "9976": 57, "9994": 57, "keeporiginalcolumn": 57, "setcleanannot": 57, "choos": [57, 69, 117, 133, 145, 151, 168, 180], "alia": 57, "setflattenexplodedcolumn": 57, "comprehens": 57, "view": 57, "setkeeporiginalcolumn": 57, "kept": [57, 64], "setorderdescend": 57, "proce": 58, "dropou": 58, "lay": 58, "features_asm": 58, "feature_1": 58, "feature_2": 58, "feature_n": 58, "graph_fil": [58, 85], "pb": [58, 69, 85, 104, 145, 180], "001": [58, 69, 85, 145, 180], "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 58, "deid": [61, 122, 131, 149, 156, 165, 193], "disambigu": [61, 149, 193, 209], "er": [61, 149, 185, 193], "text_matcher_intern": [61, 62], "chunk_merg": [61, 65], "iob_tagg": [61, 67], "medical_n": [61, 67, 145, 180], "ner_converter_intern": [61, 67], "ner_template_rend": [61, 67], "zero_shot_n": [61, 67, 143, 146, 177, 178], "date_norm": [61, 76], "drug_norm": [61, 76], "qa": [61, 99, 100, 138, 140, 149, 173, 175, 193], "beam_search_param": [61, 78, 79, 99], "medical_qa": [61, 78], "qa_ner_gener": [61, 78, 131, 141, 165, 171], "rag": [61, 149], "context_split_assembl": [61, 82], "vectordb_post_processor": [61, 82], "relation_extract": [61, 84, 104, 127, 131, 161, 165, 193], "relation_extraction_dl": [61, 84, 127, 128, 161, 162], "relation_ner_chunk_filt": [61, 84], "zero_shot_relation_extract": [61, 84, 127, 128, 161, 162], "resolut": [61, 83, 94, 122, 131, 149, 156, 165, 185, 193, 212], "resolver_merg": [61, 91], "sentence_entity_resolv": [61, 91, 122, 125, 156, 159], "seq2seq": [61, 149, 193], "medical_encoder_decod": [61, 96, 98], "medical_summar": [61, 96], "medical_text_gener": [61, 96, 100], "text2sql": [61, 96, 193], "splitter": [61, 149], "internal_document_splitt": [61, 102], "windowed_sent": [61, 106], "annotation_merg": [61, 149], "chunk2_token": [61, 149], "doc2_chunk_intern": [61, 149], "document_filterer_by_classifi": [61, 149], "document_filterer_by_n": [61, 149], "feature_assembl": [61, 149], "multi_chunk2_doc": [61, 149], "resolution2_chunk": [61, 149], "router": [61, 149, 193], "source_tracking_metadata_param": [61, 71, 149], "tf_graph_build": [61, 149], "textmatcherintern": 63, "setent": [63, 69, 145, 180], "externalresourc": [63, 193], "entityvalu": 63, "buildfromtoken": 63, "dolor": 63, "magna": 63, "aliqua": 63, "entity_name_1": 63, "lorem": 63, "ipsum": 63, "sit": 63, "laborum": 63, "hello": [63, 183], "entityextractor": 63, "extractor": 63, "24": [63, 148], "48": 63, "59": [63, 87], "setbuildfromtoken": 63, "setentityvalu": 63, "textmatcherinternalmodel": 63, "own": [63, 69, 90, 133, 145, 168, 180, 188], "searchtri": 63, "getdelimit": 63, "chunkmergeapproach": [64, 193], "mergecommonparam": [64, 90, 193], "mergeprioritizationparam": [64, 193], "mergeresourceparam": [64, 193], "decis": 64, "longer": [64, 104], "chang": [64, 71, 104, 116, 190, 206, 214], "setreplacedictresourc": [64, 71], "falsepositivesresourc": 64, "replacedictresourc": [64, 71], "chunkpreced": 64, "preced": 64, "proccess": [64, 71, 80, 142, 176], "emb": [64, 68], "jsl_ner": [64, 71], "jsl_ner_chunk": 64, "ner_bionlp": 64, "bionlp_ner": 64, "bionlp_ner_chunk": 64, "merged_chunk": [64, 185], "72": [64, 68], "recurr": [64, 68, 69, 145, 180], "98": [64, 68, 205], "107": [64, 68], "cellul": [64, 68], "diagnosi": [64, 68], "119": [64, 68], "pneumonia": [64, 68], "chunkprecedencevaluepriorit": 64, "setchunkpreced": 64, "togeth": [64, 83, 107], "setchunkprecedencevaluepriorit": 64, "chunkconfid": 64, "setfalsepositivesresourc": 64, "chunkbegin": 64, "chunklength": 64, "chunkmergemodel": [64, 193], "mergefeatureparam": [64, 193], "falseposit": 64, "third": [64, 80, 142, 176], "replacedict": 64, "getreplacedict": 64, "setfalseposit": 64, "wow": 64, "beauti": 64, "thing": 64, "setreplacedict": 64, "multichunk2doc": 66, "creation": [66, 190], "place": 66, "ner_clinical_large_langtest": 66, "new_docu": 66, "setprefix": 66, "setsepar": 66, "setsuffix": 66, "femal": [66, 107, 148], "diagnos": [66, 107], "eight": [66, 107], "prior": [66, 107], "t2dm": 66, "episod": 66, "htg": [66, 107], "induc": 66, "pancreat": 66, "hepat": 66, "week": [66, 74, 107], "polyuria": 66, "poor": 66, "appetit": 66, "vomit": 66, "glipizid": 66, "dapagliflozin": 66, "atorvastatin": 66, "gemfibrozil": 66, "six": [66, 185], "physic": 66, "examin": [66, 107], "signific": 66, "dry": 66, "oral": [66, 75], "mucosa": 66, "significantli": 66, "abdomin": 66, "benign": [66, 107], "tender": 66, "guard": 66, "rigid": [66, 107], "iobtagg": [68, 193], "scheme": [68, 190], "bioe": 68, "iobtaggermodel": 68, "setschem": 68, "medicalnerapproach": [69, 104, 145, 180, 193], "nerapproach": [69, 193], "evaluation_dl_param": 69, "evaluationdlparam": [69, 193], "cnn": [69, 145, 180], "bilstm": [69, 145, 180], "crf": [69, 145, 180, 193], "art": [69, 133, 145, 168, 180], "2003": [69, 145, 180], "bertembed": [69, 93, 126, 145, 160, 180, 193], "thu": [69, 145, 180], "minepoch": [69, 145, 180], "maxepoch": [69, 133, 145, 168, 180], "randomse": [69, 72, 97, 98, 99, 100, 133, 137, 139, 140, 145, 168, 172, 174, 175, 180], "reproduc": [69, 99, 100, 140, 175, 180], "decai": [69, 104, 145, 180], "coeffici": [69, 133, 145, 148, 168, 180], "updat": [69, 180, 185, 199, 200, 201, 203, 214], "005": [69, 133, 145, 168, 180], "adequ": [69, 145, 180], "blstn_": [69, 145, 180], "ntag": [69, 145, 180], "embedding_dim": [69, 145, 180], "lstm_size": [69, 145, 180], "nchar": [69, 145, 180], "exactli": [69, 145, 180], "greater": [69, 83, 93, 145, 180, 183], "satisfi": [69, 145, 180], "usecontrib": [69, 145, 180], "contrib": [69, 145, 180], "lstm": [69, 145, 180], "Not": [69, 145, 180], "slightli": [69, 145, 180], "off": [69, 117, 133, 145, 151, 168, 180], "hold": [69, 85, 145, 180], "evaluationlogextend": [69, 117, 133, 145, 151, 168, 180], "parquet": [69, 133, 145, 168, 180], "includeallconfidencescor": [69, 145, 180], "infer": [69, 88, 104, 130, 145, 164, 180], "speed": 69, "stdout": [69, 133, 145, 168, 180], "enablememoryoptim": [69, 145, 180], "retriev": [69, 145, 180, 185, 186, 214], "slower": [69, 145, 180], "evei": [69, 145, 180], "bach": [69, 145, 180], "onc": [69, 77, 79, 86, 97, 98, 99, 100, 129, 137, 138, 139, 140, 163, 172, 173, 174, 175], "tagsmap": [69, 145, 180], "oldtag": [69, 145, 180], "newtag": [69, 145, 180], "vip": [69, 145, 180], "overrideexistingtag": [69, 145, 180], "earlystoppingpati": [69, 145, 180], "wait": [69, 145, 180], "earli": [69, 145, 180], "earlystoppingcriterion": [69, 145, 180], "soon": [69, 145, 180], "met": [69, 145, 180], "patienc": [69, 145, 180], "f1": [69, 145, 180, 191, 211, 216], "socr": [69, 145, 180], "infin": [69, 145, 180, 183], "pretrainedmodelpath": [69, 85, 93, 126, 145, 160, 180], "point": [69, 85, 93, 126, 145, 160, 180], "logprefix": [69, 145, 180], "append": [69, 88, 103, 130, 145, 164, 180], "usebestmodel": [69, 145, 180], "sentencetokenindex": [69, 145, 180], "setmaxepoch": [69, 133, 145, 168, 180], "setrandomse": [69, 72, 77, 79, 97, 98, 99, 100, 133, 137, 138, 139, 140, 145, 168, 172, 173, 174, 175, 180], "trainingdata": [69, 145, 180], "readdataset": [69, 145, 180, 190], "conll2003": [69, 145, 180], "eng": [69, 145, 180, 190], "randomvalidationsplitperepoch": [69, 145, 180], "uc": [69, 145, 180], "getlabelcolumn": [69, 104, 145, 180], "usual": [69, 71, 88, 93, 130, 145, 164, 180], "bad": [69, 133, 145, 168, 180], "lost": [69, 83, 145, 180], "setearlystoppingcriterion": [69, 145, 180], "setearlystoppingpati": [69, 145, 180], "termin": [69, 79, 138, 145, 173, 180], "setenablememoryoptim": [69, 145, 180], "setevaluationlogextend": [69, 133, 145, 168, 180], "displai": [69, 133, 145, 168, 180], "setincludeallconfidencescor": [69, 145, 180], "setlogprefix": [69, 145, 180], "setlr": [69, 133, 145, 168, 180], "setminepoch": [69, 145, 180], "setoverrideexistingtag": [69, 145, 180], "setpo": [69, 145, 180], "real": [69, 145, 180], "rage": [69, 145, 180], "setpretrainedmodelpath": [69, 85, 93, 126, 145, 160, 180], "shuffl": [69, 133, 145, 168, 180], "setrandomvalidationsplitperepoch": [69, 145, 180], "setsentencetokenindex": [69, 145, 180], "settagsmap": [69, 145, 180], "preprocessingpipelin": [69, 133, 145, 168, 180], "randomsplit": [69, 133, 145, 168, 180], "overwrit": [69, 133, 145, 149, 168, 180, 201], "setusebestmodel": [69, 145, 180], "across": [69, 145, 180], "setusecontrib": [69, 145, 180], "nerdlapproach": [69, 104, 145, 180, 193], "ner_dl": [69, 145, 180, 205], "wordembed": [69, 145, 180, 193], "glove_100d": [69, 145, 180], "inferencebatchs": [69, 145, 180], "labelcas": [69, 145, 180], "offici": [69, 145, 180], "ekeu": [69, 145, 180], "baghdad": [69, 145, 180], "trainingclassdistribut": [69, 145, 180], "gettrainingclassdistribut": [69, 145, 180], "setinferencebatchs": [69, 145, 180], "setlabelcas": [69, 145, 180], "nerchunk": [70, 85, 86, 129, 163, 193], "known": [70, 148], "neighbor": [70, 107], "dt": 70, "jj": 70, "ner_radiologi": 70, "imagingfind": 70, "bodypart": 70, "regexpars": 70, "commonnerconverterinternalparam": 71, "preserveposit": 71, "greedymod": 71, "contigu": 71, "ignorestopword": 71, "setallowlist": 71, "loc": [71, 216], "setgreedymod": 71, "greedy_mod": 71, "setignorestopword": 71, "stopword": 71, "setpreserveposit": 71, "preserve_posit": 71, "setthreshold": [71, 93, 126, 160], "annotatorapproach": [71, 109, 193], "sourcetrackingmetadataparam": [71, 101, 193], "iob2": 71, "friendli": 71, "nerconverterinternalmodel": [71, 193], "insid": [71, 133, 168], "outsid": 71, "allpossiblefieldstostandard": [71, 101], "includeoutputcolumn": [71, 101], "includestandardfield": [71, 101], "outputcolumnkei": [71, 101], "standardfieldkei": [71, 101], "setallpossiblefieldstostandard": [71, 101], "setincludeoutputcolumn": [71, 101], "setincludestandardfield": [71, 101], "setoutputcolumnkei": [71, 101], "substitut": [71, 100], "replaced_ner_chunk": 71, "drug_brandnam": 71, "drug_frequ": 71, "drug_dosag": 71, "drug_strength": 71, "setstandardfieldkei": [71, 101], "nertemplaterendermodel": [72, 193], "combineent": 72, "entityscop": 72, "permuteent": 72, "resampleent": 72, "templat": [72, 79, 88, 99, 100, 130, 138, 140, 164, 173, 175, 183], "setcombineent": 72, "enough": 72, "fill": [72, 183], "setentityscop": 72, "render": 72, "liststr": 72, "setpermuteent": 72, "permut": 72, "even": 72, "resampl": 72, "setresampleent": 72, "settempl": 72, "zeroshotnermodel": [73, 147, 181, 193], "classifier_dl": [73, 133, 168], "robertaforquestionansw": [73, 147, 181, 193], "zero": [73, 83, 88, 130, 147, 164, 181], "entitydefinit": [73, 147, 181], "question": [73, 79, 80, 138, 142, 147, 173, 176, 181], "town": [73, 147, 181], "predictionthreshold": [73, 85, 86, 88, 129, 130, 147, 163, 164, 181], "encod": [73, 85, 86, 88, 104, 129, 130, 133, 147, 163, 164, 168, 181, 185], "01f": [73, 147, 181], "ignoreent": [73, 147, 181], "setentitydefinit": [73, 147, 181], "clara": [73, 147, 181], "live": [73, 147, 181, 188], "hellen": [73, 147, 181], "pari": [73, 147, 181], "5328949": [73, 147, 181], "9360068": [73, 147, 181], "83294415": [73, 147, 181], "45366877": [73, 147, 181], "zero_shot_ner_roberta": 73, "setpredictionthreshold": [73, 85, 86, 129, 147, 163, 181], "expect": [74, 81, 190], "els": 74, "anchordateyear": 74, "anchor": 74, "tomorrow": 74, "2021": [74, 87, 148], "anchordatemonth": 74, "januari": 74, "anchordatedai": 74, "08": [74, 148], "2018": [74, 148], "12mar2021": 74, "jan": 74, "1999": 74, "3april": 74, "2020": [74, 148], "mondai": [74, 94, 133, 168], "todai": 74, "original_d": 74, "date_chunk": 74, "setanchordateyear": 74, "setanchordatemonth": 74, "setanchordatedai": 74, "normalized_d": 74, "defaultreplacementdai": 74, "defaultreplacementmonth": 74, "defaultreplacementyear": 74, "outputdateformat": 74, "setdefaultreplacementdai": 74, "setdefaultreplacementmonth": 74, "06": 74, "setdefaultreplacementyear": 74, "setoutputdateformat": 74, "drugnorm": [75, 193], "apac": 75, "discuss": 75, "blog": 75, "post": [75, 100, 148], "abbrevi": 75, "sol": 75, "solut": 75, "unit": [75, 85, 86, 104, 129, 163], "10000000": 75, "unt": 75, "sodium": 75, "chlorid": 75, "potassium": 75, "13bag": 75, "interferon": 75, "alfa": 75, "2b": 75, "injec": 75, "meq": 75, "document_norm": 75, "trainingpipelin": 75, "normalized_text": [75, 93, 126, 160], "bag": 75, "inject": 75, "setpolici": 75, "beamsearchparam": [77, 79, 99], "dosampl": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "ignoretokenid": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "maxcontextlength": [77, 79, 99, 100, 138, 140, 173, 175], "maxnewtoken": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "norepeatngrams": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "topk": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175, 183], "setdosampl": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "greedi": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "decod": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "setignoretokenid": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "setmaxcontextlength": [77, 79, 99, 100, 138, 140, 173, 175], "setmaxnewtoken": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "setnorepeatngrams": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "settopk": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175, 183], "vocabulari": [77, 79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "medicalquestionansw": [79, 138, 173, 193], "gpt": [79, 99, 100, 138, 140, 173, 175], "answer": [79, 80, 99, 100, 103, 138, 140, 173, 175], "span": [79, 138, 173], "capabl": [79, 138, 173], "ye": [79, 138, 173], "questiontyp": [79, 138, 173], "card": [79, 138, 173, 188], "repeat": [79, 99, 100, 138, 140, 173, 175, 183], "loop": [79, 99, 100, 138, 140, 173, 175], "customprompt": [79, 99, 100, 138, 140, 173, 175], "prompt": [79, 99, 100, 138, 140, 173, 175, 183], "usecach": [79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "spare": [79, 138, 173], "studi": [79, 138, 173], "failur": [79, 138, 173], "node": [79, 104, 138, 173, 185], "breast": [79, 138, 173, 185], "chest": [79, 138, 173], "wall": [79, 138, 173], "irradi": [79, 138, 173], "mastectomi": [79, 138, 173, 185], "multidocumentassembl": [79, 138, 173, 193], "document_quest": [79, 138, 173], "document_context": [79, 138, 173], "med_qa": [79, 138, 173], "medical_qa_biogpt": [79, 138, 173], "setquestiontyp": [79, 138, 173], "mlframeworktyp": [79, 97, 98, 99, 100, 137, 138, 139, 140, 172, 173, 174, 175], "modeltyp": [79, 99, 100, 138, 140, 173, 175, 193], "getquestiontyp": [79, 138, 173], "loadmedicaltextgener": [79, 138, 173], "med_text_generator_path": [79, 138, 173], "medicaltextgener": [79, 99, 100, 138, 140, 173, 175, 193], "flan_t5_base_jsl_qa": 79, "setcustomprompt": [79, 99, 100, 138, 140, 173, 175], "setquestionanswertermin": [79, 138, 173], "questiontermin": [79, 138, 173], "symbol": [79, 138, 173, 212], "setquestionprompt": [79, 138, 173], "questionprompt": [79, 138, 173], "setquestionskiplasttoken": [79, 138, 173], "questionskiplasttoken": [79, 138, 173], "setusecach": [79, 99, 100, 138, 140, 173, 175], "nerquestiongener": [80, 142, 176, 193], "scala": [80, 183, 192, 194, 198, 199, 200, 215], "pronoun": [80, 142, 176], "questionpronoun": [80, 142, 176], "questionmark": [80, 142, 176], "questionanswer": 80, "why": [80, 142, 176], "strategytyp": [80, 142, 176], "entities1": [80, 142, 176], "entities2": [80, 142, 176], "qagener": 80, "setquestionmark": [80, 142, 176], "setquestionpronoun": [80, 142, 176], "setstrategytyp": [80, 142, 176], "setentities1": [80, 142, 176], "setentities2": [80, 142, 176], "admiss": 80, "zeroshotn": 80, "align": [80, 142, 176], "contextsplitassembl": 81, "assembl": [81, 203], "vector_similarity_rank": [81, 83, 209], "explodesplit": [81, 103], "setexplodesplit": [81, 103], "setjoinstr": 81, "vectordbpostprocessor": 83, "vectordbmodel": 83, "filterbi": 83, "diversity_by_threshold": 83, "metadatacriteria": 83, "diversitythreshold": 83, "sortbi": 83, "ascend": 83, "lost_in_the_middl": 83, "middl": 83, "ranker": 83, "sai": 83, "diversitybythreshold": 83, "maxtopkafterfilt": 83, "allowzerocontentafterfilt": 83, "setallowzerocontentafterfilt": 83, "setdiversitythreshold": 83, "setfilterbi": 83, "setmaxtopkafterfilt": 83, "setmetadatacriteria": 83, "fieldtyp": [83, 186], "not_equ": 83, "greater_than": 83, "greater_than_or_equ": 83, "less_than": 83, "less_than_or_equ": 83, "not_contain": 83, "matchmod": 83, "matchvalu": 83, "converterfallback": 83, "fallback": 83, "not_filt": 83, "publish_d": 83, "mmm": 83, "5470": 83, "immun": 83, "setmetadatacriteriaasstr": 83, "setsortbi": 83, "genericremodel": [85, 193], "relationextractionmodel": [85, 86, 129, 163, 193], "intend": 85, "setrelationpair": [85, 86, 87, 88, 129, 130, 163, 164], "customlabel": [85, 86, 129, 150, 163, 193], "directionsensit": [85, 87], "filterbytokendist": [85, 87], "relationpair": [85, 86, 87, 129, 163], "relationpairscasesensit": [85, 86, 87, 129, 163], "getrelationtypeperpair": [85, 86, 129, 163], "posology_r": 85, "setcustomlabel": [85, 86, 129, 163], "setdirectionsensit": [85, 87], "setfilterbytokendist": [85, 87], "fewer": [85, 87], "far": [85, 87], "recal": [85, 191, 211, 216], "dash": [85, 87], "setrelationpairscasesensit": [85, 86, 87, 129, 163], "setrelationtypeperpair": [85, 86, 129, 163], "relationtypepair": [85, 86, 129, 163], "posologyremodel": [85, 193], "posologi": 85, "entitit": 85, "reason": [85, 103, 148], "relationextractionapproach": [85, 104, 190, 193], "tfgraphbuild": [85, 104], "tf_graph": [85, 104, 190], "tensorflow_graph": 85, "relationdirectioncol": 85, "decript": 85, "fromentitybegincol": 85, "fromentityendcol": 85, "fromentitylabelcol": 85, "toentitybegincol": 85, "toentityendcol": 85, "toentitylabelcol": 85, "leftward": 85, "argument": [85, 148], "rightward": 85, "doesn": 85, "symmetr": [85, 193], "embedd": [85, 86, 129, 163], "postag": [85, 86, 129, 163], "ner_events_clin": [85, 86, 129, 163], "depencypars": [85, 86, 129, 163], "train_ner_chunk": [85, 104, 190], "relations_t": 85, "target_rel": 85, "300": [85, 104], "05": [85, 148], "setfroment": 85, "from_begin": 85, "from_end": 85, "from_label": 85, "settoent": 85, "to_begin": 85, "to_end": 85, "to_label": 85, "traindata": [85, 86, 129, 163], "overrideexistinglabel": 85, "begin_col": 85, "label_col": [85, 116], "setrelationdirectioncol": 85, "set\u043everrideexistinglabel": 85, "annotatormodel": [85, 87, 90, 110, 193], "biomark": 85, "relativedai": 85, "relationtypeperpair": 85, "symtom": 85, "external_body_part_or_region": [85, 86, 87, 129, 163], "internal_organ_or_compon": [85, 86, 87, 129, 163], "re_model": [85, 86, 88, 129, 130, 163, 164], "re_bodypart_direct": 85, "mri": [85, 86, 87, 88, 129, 130, 163, 164], "infarct": [85, 86, 87, 129, 163], "brain": [85, 86, 87, 129, 163], "cerebellum": [85, 86, 87, 129, 163], "basil": [85, 86, 87, 129, 163], "ganglia": [85, 86, 87, 129, 163], "chunk1": [85, 86, 129, 163, 185, 190], "chunk2": [85, 86, 129, 163, 185, 190], "relationextractiondlmodel": [86, 87, 129, 163, 193], "contrast": [86, 129, 163], "re_ner_chunk_filt": [86, 87, 88, 129, 130, 163, 164], "renerchunksfilt": [86, 87, 88, 129, 130, 163, 164, 193], "re_ner_chunk": [86, 87, 88, 129, 130, 163, 164], "redl_bodypart_direction_biobert": [86, 129, 163], "redl_ade_biobert": 86, "realtionpair": 87, "advers": 87, "reaction": 87, "realat": 87, "further": 87, "ner_clinical_en": 87, "html": 87, "awai": 87, "doclevelrel": 87, "words_embedd": [87, 88, 130, 164], "pos_tagg": [87, 88, 130, 164], "clinical_ner_tagg": 87, "jsl_ner_wip_greedy_clin": 87, "trained_pipelin": 87, "cre": 87, "re_chunk": 87, "paired_to": 87, "setdoclevelrel": [87, 88, 130, 164], "zeroshotrelationextractionmodel": [88, 130, 164, 193], "nli": [88, 130, 164], "statement": [88, 130, 164], "regard": [88, 130, 164], "relationalcategori": [88, 130, 150, 164, 193], "hypothesi": [88, 130, 164], "cure": [88, 130, 164], "5f": [88, 130, 164], "multilabel": [88, 130, 164], "categor": [88, 130, 164, 214], "tmp": [88, 130, 164], "spark_sbert_zero_shot": [88, 130, 164], "setrelationalcategori": [88, 130, 164], "reveal": [88, 130, 164], "setmultilabel": [88, 130, 164], "allevi": [88, 130, 164], "headach": [88, 130, 164], "9760039": [88, 130, 164], "98819494": [88, 130, 164], "9929625": [88, 130, 164], "negativerelationship": [88, 130, 164], "zero_shot_r": 88, "setnegativerelationship": [88, 130, 164], "serv": [88, 130, 164], "regexmatcherintern": 90, "choic": 90, "1970": 90, "setrul": 90, "match_first": 90, "match_al": [90, 95], "match_complet": 90, "externalrul": 90, "setstrategi": [90, 95], "short_dat": 90, "regexmatcherinternalmodel": 90, "deid_regex": 90, "resolvermerg": [92, 193], "enit": 92, "sentenceentityresolverapproach": [93, 126, 160, 193], "sentenceresolverparam": [93, 193], "sentenceentityresolvermodel": [93, 94, 126, 160, 193], "standart": 93, "aux_label": 93, "auxiliari": [93, 126, 160], "better": [93, 104], "overrideexistingcod": [93, 126, 160], "unwant": 93, "dropcodeslist": [93, 126, 160], "flavour": 93, "normalizedcol": [93, 126, 160], "returncosinedist": [93, 126, 160], "aux_label_col": [93, 126, 160], "useauxlabel": [93, 126, 160], "conceptid": 93, "concept": 93, "snome": [93, 126, 160], "concept_nam": 93, "108367008": 93, "disloc": 93, "joint": 93, "3384011000036100": 93, "arthrotec": 93, "166717003": 93, "serum": 93, "creatinin": 93, "3877011000036101": 93, "lipitor": 93, "402234004": 93, "foot": 93, "eczema": 93, "sent_biobert_pubmed_base_cas": [93, 126, 160], "data_pipelin": 93, "data_processing_model": 93, "prepared_data": 93, "bertextractor": [93, 126, 160], "setneighbour": [93, 126, 160], "1000": [93, 126, 160], "bert_embed": [93, 126, 160], "setnormalizedcol": [93, 126, 160], "snomed_cod": [93, 126, 160], "setdistancefunct": [93, 126, 160], "euclidian": [93, 126, 160], "setuseauxlabel": [93, 126, 160], "setauxlabelcol": [93, 126, 160], "snomedmodel": [93, 126, 160], "confidencefunct": [93, 126, 160], "distancefunct": [93, 126, 160], "missasempti": [93, 126, 160], "neighbour": [93, 126, 160], "returnresolvedtextembed": [93, 126, 160], "setconfidencefunct": [93, 126, 160], "conf_funct": [93, 126, 160], "invers": [93, 126, 160], "softmax": [93, 104, 126, 160], "mover": [93, 126, 160], "wmd": [93, 126, 160], "euclidean": [93, 126, 160], "setdropcodeslist": [93, 126, 160], "leav": [93, 126, 160], "setextractcosinedist": [93, 126, 160], "setmissasempti": [93, 126, 160], "unmatch": [93, 126, 160], "knn": [93, 126, 160], "algorithmn": [93, 126, 160], "queri": [93, 126, 160], "setoverrideexistingcod": [93, 126, 160], "setreturnresolvedtextembed": [93, 126, 160], "thre": [93, 126, 160], "auxlabel": [93, 126, 160], "hasembeddingsproperti": [93, 193], "ontologi": [93, 126, 160], "curat": [93, 126, 160], "rxnorm": [93, 126, 160], "searchtre": [93, 126, 160], "structfeature_hadoopfix": [93, 193], "encapsul": [93, 126, 160], "serializablekdtre": [93, 126, 160], "tree": [93, 126, 160], "nearest": 93, "multidimension": 93, "approch": 93, "loui": 93, "bentlei": 93, "1975": 93, "commun": [93, 148], "acm": 93, "sept": 93, "509": 93, "517": 93, "doi": 93, "1145": 93, "361002": 93, "361007": 93, "sbertresolve_icd10cm_slim_billable_hcc_m": 93, "icd10_cod": [93, 185, 214], "icd10extractorpipelin": 93, "icd10model": 93, "abstract": [93, 126, 160], "sbiobertresolve_icd10cm_augmented_billable_hcc": 93, "setsearchtre": [93, 126, 160], "search_tre": [93, 126, 160], "usuali": [93, 126, 160], "kdtree": [93, 126, 160], "famili": 93, "algorithmm": 93, "resolution2chunk": [94, 193], "sbert_embedd": 94, "rxnorm_resolv": 94, "sbiobertresolve_rxnorm_aug": 94, "rxnorm_cod": 94, "m": [94, 133, 148, 168, 188], "readi": [94, 133, 168, 198, 205], "love": [94, 133, 168], "wake": [94, 133, 168], "am": [94, 103, 133, 168, 205], "would": [94, 103, 133, 149, 168], "resolver2chunk": 94, "219400": 94, "13369": 94, "filterfieldsel": 95, "rules2": 95, "doc_chunk": 95, "sent_small_bert_l2_128": 95, "router_name_embed": 95, "setfilterfieldsel": 95, "names_embed": 95, "router_city_embed": 95, "cities_embed": 95, "router_nam": 95, "names_chunk": 95, "medicalencoderdecod": [97, 98, 137, 172, 193], "maxtextlength": [97, 98, 99, 100, 137, 139, 140, 172, 174, 175], "refinechunks": [97, 98, 137, 139, 172, 174], "refinemaxattempt": [97, 98, 137, 139, 172, 174], "refinesummari": [97, 98, 137, 139, 172, 174], "refinesummarytargetlength": [97, 98, 137, 139, 172, 174], "stopateo": [97, 98, 99, 100, 137, 139, 140, 172, 174, 175], "setmaxtextlength": [97, 98, 99, 100, 137, 139, 140, 172, 174, 175], "setrefinechunks": [97, 98, 137, 139, 172, 174], "refin": [97, 98, 137, 139, 172, 174], "Be": [97, 98, 137, 139, 172, 174], "setrefinemaxattempt": [97, 98, 137, 139, 172, 174], "abov": [97, 98, 137, 139, 172, 174, 216], "summarytargetlength": [97, 98, 137, 139, 172, 174], "setrefinesummari": [97, 98, 137, 139, 172, 174], "cost": [97, 98, 137, 139, 172, 174], "summari": [97, 98, 137, 139, 172, 174, 185], "setrefinesummarytargetlength": [97, 98, 137, 139, 172, 174], "setstopateo": [97, 98, 99, 100, 137, 139, 140, 172, 174, 175], "medicalsummar": [98, 100, 139, 174, 193], "use_cach": [98, 139, 174], "facilit": [98, 139, 174], "summarizer_clinical_jsl_aug": 98, "document_prompt": [99, 100, 140, 175], "med_text_gener": [99, 100, 140, 175], "convid": [99, 100, 140, 175], "worldwid": [99, 100, 140, 175], "getadditionaltoken": [99, 100, 140, 175], "model_typ": [99, 100, 140, 175], "text_generator_biomedical_biogpt_bas": 99, "setadditionaltoken": [99, 100, 140, 175], "additionaltoken": [99, 100, 140, 175], "tablelimit": 100, "getpostprocessingsubstitut": 100, "getschema": 100, "schema": [100, 186, 190, 193], "text2sql_mimicsql": 100, "setpostprocessingsubstitut": 100, "setschema": 100, "tabl": 100, "settablelimit": 100, "internaldocumentsplitt": 103, "documentcharactertextsplitt": [103, 193], "setsplitmod": 103, "splitmod": 103, "recurs": [103, 193], "subtext": 103, "perfect": 103, "observ": 103, "world": 103, "setsplitpattern": 103, "setpatternsareregex": 103, "setkeepsepar": 103, "settrimwhitespac": 103, "individu": 103, "chunksiz": 103, "applic": [103, 214], "chunkoverlap": 103, "splitpattern": 103, "trfv": 103, "patternsareregex": 103, "keepsepar": 103, "trimwhitespac": 103, "segment": [103, 148], "sentenceawar": 103, "maxlength": 103, "spit": 103, "customboundsstrategi": 103, "enablesentenceincr": 103, "textdf": 103, "sherlockholm": 103, "wholetext": 103, "textsplitt": 103, "setchunks": 103, "20000": 103, "setchunkoverlap": 103, "gutenberg": 103, "adventur": 103, "sherlock": 103, "holm": 103, "arthur": 103, "conan": 103, "doyl": 103, "19994": 103, "mademoisel": 103, "brioni": 103, "lodg": 103, "serpentin": 103, "aven": 103, "19798": 103, "39395": 103, "19597": 103, "woman": 103, "think": 103, "39371": 103, "59242": 103, "19871": 103, "But": 103, "said": 103, "red": [103, 212], "men": 103, "59166": 103, "77833": 103, "18667": 103, "friend": 103, "enthusiast": 103, "musician": 103, "himself": 103, "capab": 103, "77835": 103, "97769": 103, "19934": 103, "convinc": 103, "li": 103, "97771": 103, "117248": 103, "19477": 103, "slate": 103, "colour": 103, "broad": 103, "brim": 103, "straw": 103, "hat": 103, "feather": 103, "117250": 103, "137242": 103, "19992": 103, "That": 103, "sound": 103, "littl": 103, "paradox": 103, "profoundli": 103, "singulari": 103, "137244": 103, "157171": 103, "19927": 103, "setcustomboundsstrategi": 103, "setenablesentenceincr": 103, "setmaxlength": 103, "setsentenceawar": 103, "estim": 104, "defaultparamswrit": [104, 114], "defaultparamsread": [104, 114], "tensor": 104, "flow": 104, "sinc": 104, "seri": [104, 107], "edg": 104, "biggest": 104, "idea": 104, "backbon": 104, "program": 104, "graph_fold": 104, "re_graph_fold": 104, "setmodelnam": 104, "re_graph": 104, "sethiddenlay": 104, "sethiddenact": 104, "relu": 104, "sethiddenactl2": 104, "sethiddenweightsl2": 104, "setbatchnorm": 104, "batchnorm": 104, "hiddenact": 104, "hiddenactl2": 104, "hiddenlay": 104, "hiddenunitsnumb": 104, "hiddenweightsl2": 104, "islicens": 104, "maxsequencelength": 104, "modelnam": 104, "outputact": 104, "userelationdirect": 104, "shallow": [104, 111, 114], "suffici": [104, 111, 114], "getbatchnorm": 104, "getgraphfil": 104, "getgraphfold": 104, "gethiddenact": 104, "gethiddenactl2": 104, "l2": 104, "gethiddenlay": 104, "hiudden": 104, "gethiddenunitsnumb": 104, "gethiddenweightsl2": 104, "getislicens": 104, "medicalneraprroach": 104, "getmaxsequencelength": 104, "getmodelnam": 104, "getoutputact": 104, "getuserelationdirect": 104, "techniqu": 104, "stabil": 104, "greaph": 104, "auto": 104, "sigmoid": 104, "tanh": 104, "aka": 104, "overfit": 104, "involv": 104, "encourag": 104, "complex": 104, "neuron": 104, "sethiddenunitsnumb": 104, "solv": 104, "setislicens": 104, "setmaxsequencelength": 104, "low": [104, 148], "lose": 104, "valuabl": 104, "On": 104, "consum": 104, "excess": 104, "setuserelationdirect": 104, "settoutputact": 104, "tfgraphbuildermodel": 104, "windowedparam": 107, "gluestr": 107, "windows": 107, "setgluestr": 107, "setwindows": 107, "slide": 107, "windowedsentencemodel": [107, 193], "windowedsent": 107, "five": [107, 148], "tract": 107, "annotator_properties_intern": [109, 110, 112, 149], "annotatorpropertiesintern": [109, 110, 111], "attach": 111, "annotator_approach_intern": [112, 149], "annotator_model_intern": [112, 149], "verifi": 113, "findvers": 113, "privat": [113, 187], "showvers": 113, "customtransform": 114, "hasinputcol": 114, "hasoutputcol": 114, "helper": [114, 188, 201], "custom_pipelin": 115, "masking_polici": 115, "fixed_mask_length": 115, "obfuscate_d": 115, "obfuscate_ref_sourc": 115, "obfuscate_ref_file_path": 115, "age_group_obfusc": 115, "age_rang": 115, "shift_dai": [115, 205], "number_of_dai": 115, "documenthashcoder_col_nam": 115, "date_tag": 115, "unnormalized_d": 115, "unnormalized_mod": 115, "id_column_nam": 115, "date_shift_column_nam": 115, "multi_mode_file_path": 115, "domain": 115, "input_file_path": [115, 205], "output_file_path": [115, 205], "deid_with_custom_pipelin": 115, "pretrained_pipelin": 115, "deid_with_pretrained_pipelin": 115, "nercrfevalu": [116, 193], "test_fil": 116, "tag_level": 116, "extendedjavawrapp": [116, 190], "computeaccuracyannot": 116, "train_fil": 116, "computeaccuracymodel": 116, "getdatafram": [116, 190], "jdf": [116, 190], "new_java_arrai": [116, 190], "pylist": [116, 190], "java_class": [116, 190], "todo": [116, 190], "inspir": [116, 190], "new_java_array_integ": [116, 190], "new_java_array_str": [116, 190], "new_java_obj": [116, 190], "arg": [116, 185, 190], "spark_vers": [116, 190], "nerdlevalu": [116, 193], "full_chunk": 116, "computemetricsfromdf": 116, "prediction_col": 116, "drop_o": 116, "case_sensit": [116, 190], "norvigspellevalu": [116, 193], "ground_truth_fil": 116, "posevalu": [116, 193], "symspellevalu": [116, 193], "olumn": [117, 151], "eval": [117, 149, 151, 193], "finassertiondl_time_md": 117, "doesnt": [119, 153], "tha": [119, 153], "ouptut": [119, 153], "cfn": 119, "finner_deid": 119, "financedocumenthashcod": [120, 193], "setidcolumn": [120, 154], "document_hashcod": [121, 122, 155, 156], "finmapper_edgar_companynam": 123, "snomedtrainingpipelin": [126, 160], "snomedtrainingmodel": [126, 160], "snomeddata": [126, 160], "finel_edgar_company_nam": 126, "finre_financial_smal": 129, "finre_zero_shot": 130, "chunk_classif": [131, 149, 165, 193], "sequence_classif": [131, 149, 165, 193], "finance_bert_for_sequence_classif": [131, 136], "finance_classifier_dl": [131, 136], "finance_document_ml_classifi": [131, 136], "finance_few_shot_classifi": [131, 136], "sequence_gener": [131, 149, 165, 193], "finance_encoder_decod": [131, 141], "finance_qa": [131, 141], "finance_summar": [131, 141], "finance_text_gener": [131, 141], "token_classif": [131, 149, 165, 193], "financebertforsequenceclassif": [132, 193], "financebertfortokenclassif": [132, 144, 193], "finclf_bert_banking77": 132, "financeclassifierdlapproach": [133, 193], "classifierdlapproach": [133, 168, 193], "classifierdl": [133, 168], "univers": [133, 168], "dnn": [133, 168], "classifierdlmodel": [133, 168, 193], "item": [133, 168, 203], "doubl": [133, 168], "universalsentenceencod": [133, 168, 193], "movi": [133, 168], "wach": [133, 168], "ever": [133, 168], "opinion": [133, 168], "win": [133, 168], "award": [133, 168], "terribl": [133, 168], "realli": [133, 168], "trane": [133, 168], "smallcorpu": [133, 168], "useembed": [133, 168], "docclassifi": [133, 168], "5e": [133, 168], "multiclassifierdlapproach": [133, 168, 193], "sentimentdlapproach": [133, 168, 193], "financeclassifierdlmodel": [133, 134, 193], "financeclassifierdl": 133, "classifierdl_use_trec6": [133, 168], "trec": [133, 168], "sarcasmdl": [133, 168], "classifierdl_use_sarcasm": [133, 168], "sarcasm": [133, 168], "arrays_zip": [133, 168], "multiclassifierdlmodel": [133, 168, 193], "sentimentdlmodel": [133, 168, 193], "finclf_sec_fil": 133, "financedocumentmlclassifierapproach": [134, 193], "financedocumentmlclassifiermodel": [134, 169, 193], "financefewshotclassifierapproach": [135, 193], "financefewshotclassifi": 135, "financefewshotclassifiermodel": [135, 193], "financeencoderdecod": [137, 193], "financequestionansw": [138, 193], "biogpt_pubmed_qa": [138, 173], "financesummar": [139, 193], "finsum_flant5_finetuned_sec10k": 139, "financetextgener": [140, 193], "fingen_flant5_finetuned_sec10k": 140, "financenerquestiongener": [142, 193], "finance_bert_for_token_classifi": [143, 146], "finance_n": [143, 146], "financebertfortokenclassifi": 144, "finner_responsibility_report": 144, "financenerapproach": [145, 193], "verif": [145, 180], "greather": [145, 180], "financenermodel": [145, 180, 193], "teh": [145, 180], "finner_sec_10k_summari": 145, "finner_roberta_zeroshot": 147, "profil": 148, "code_arrai": 148, "sex": 148, "elig": 148, "cna": 148, "orec": 148, "medicaid": 148, "cm": 148, "hcc": [148, 214], "illeg": 148, "icd10": 148, "male": 148, "cfa": 148, "benefit": 148, "dual": 148, "cfd": 148, "nondual": 148, "cnd": 148, "cpa": 148, "cpd": 148, "INS": 148, "institut": 148, "enrolle": 148, "snpne": 148, "snp": 148, "plan": 148, "entitl": 148, "survivor": 148, "renal": 148, "dib": 148, "esrd": 148, "risk_scor": 148, "risk_score_ag": 148, "risk_score_adj": 148, "intens": 148, "risk_score_age_adj": 148, "hcc_lst": 148, "hcc_map": 148, "hierarchi": 148, "profileesrdv21y19": 148, "di": 148, "21": [148, 190, 205], "2019": 148, "dialysi": 148, "gc": 148, "graft": 148, "gi": 148, "dne": 148, "gne": 148, "profilerxhccv05y20": 148, "ce_nolowag": 148, "rxhcc": [148, 214], "incom": 148, "ce_nolownoag": 148, "ce_lowag": 148, "ce_lownoag": 148, "ce_lti": 148, "ne_nolo": 148, "ne_lo": 148, "ne_lti": 148, "beneficiari": 148, "medicar": 148, "payment": 148, "status": 148, "transplant": 148, "situat": 148, "rxhcc_lst": 148, "rxhcc_map": 148, "profilerxhccv05y21": 148, "profilerxhccv05y22": 148, "profilerxhccv05y23": 148, "profilerxhccv08y22": 148, "profilerxhccv08y23": 148, "profilev22": 148, "profilev22y17": 148, "2017": 148, "profilev22y18": 148, "profilev22y19": 148, "profilev22y20": 148, "profilev22y21": 148, "profilev22y22": 148, "profilev23": 148, "profilev23y18": 148, "profilev23y19": 148, "profilev24": 148, "profilev24y19": 148, "profilev24y20": 148, "profilev24y21": 148, "profilev24y22": 148, "profilev28": 148, "profilev28y24": 148, "2024": 148, "llm_loader": [149, 182], "transpil": 149, "externalsourc": [149, 196], "class_nam": [149, 196], "nlu_2_python": [149, 196], "python_2_scala": [149, 196], "source_load": [149, 196], "alab_util": [149, 207], "conll_pars": [149, 207], "deidentification_util": [149, 207], "java_help": [149, 207], "licensed_annotator_typ": [149, 207], "log_pars": [149, 207], "ner_util": [149, 207], "ocr_nlp_processor": [149, 207], "ocr_util": [149, 207], "risk_adjustment_util": [149, 207], "run_transpiled_cod": [149, 207], "training_log_parser_util": [149, 207], "visualner_annotations_pars": [149, 207], "custom_transform": 149, "deidentification_modul": 149, "modeltrac": [149, 193], "pipeline_output_pars": 149, "pipeline_trac": 149, "structured_deidentif": 149, "text_to_documents_column": 149, "training_log_pars": 149, "updatemodel": [149, 193], "get_credenti": 149, "secretkei": 149, "keyid": 149, "library_set": 149, "load_license_valid": 149, "pub_vers": 149, "public": [149, 187, 213], "gpu": 149, "apple_silicon": 149, "aarch64": 149, "equival": 149, "32g": 149, "extralisten": 149, "licenselifecyclemanag": 149, "releas": 149, "m1": 149, "size_regex": 149, "transformer_seq_classif": 149, "version_regex": 149, "legassertion_time_md": 151, "legner_deid": 153, "legaldocumenthashcod": [154, 193], "legmapper_edgar_companynam": 157, "legel_edgar_company_nam": 160, "legre_contract_doc_parti": 163, "legre_zero_shot": 164, "legal_bert_for_sequence_classif": [165, 166], "legal_classifier_dl": [165, 166], "legal_document_ml_classifi": [165, 166], "legal_few_shot_classifi": [165, 166], "legal_encoder_decod": [165, 171], "legal_qa": [165, 171], "legal_summar": [165, 171], "legal_text_gener": [165, 171], "legalbertforsequenceclassif": [167, 193], "legalbertfortokenclassif": [167, 179, 193], "legclf_reddit_advic": 167, "legalclassifierdlapproach": [168, 193], "legalclassifierdlmodel": [168, 169, 193], "legalclassifierdl": 168, "legclf_argument_min": 168, "legaldocumentmlclassifierapproach": [169, 193], "legaldocumentmlclassifiermodel": [169, 193], "legalfewshotclassifierapproach": [170, 193], "legalfewshotclassifi": 170, "legalfewshotclassifiermodel": [170, 193], "legalencoderdecod": [172, 193], "legalquestionansw": [173, 193], "legalsummar": [174, 193], "legsum_flant5_legal_aug": 174, "legaltextgener": [175, 193], "leggen_flant5_finetun": 175, "legalnerquestiongener": [176, 193], "legal_bert_for_token_classifi": [177, 178], "legal_n": [177, 178], "classit": 179, "legalbertfortokenclassifi": 179, "legner_bert_gr": 179, "legalnerapproach": [180, 193], "legalnermodel": [180, 193], "legner_contract_doc_parties_lg": 180, "legner_roberta_zeroshot": 181, "llmloader": 183, "javamodel": 183, "inherit": 183, "mix": 183, "ins": 183, "gguf": 183, "encodemodel": 183, "model_path": 183, "output_model_path": 183, "getmetadata": 183, "getmetadataentri": 183, "setcacheprompt": 183, "cacheprompt": 183, "rememb": 183, "reprocess": 183, "setdynamictemperatureexpon": 183, "dynatempexpon": 183, "dynam": 183, "temperatur": 183, "expon": 183, "setdynamictemperaturerang": 183, "dynatemprang": 183, "setfrequencypenalti": 183, "frequencypenalti": 183, "repetit": 183, "alpha": 183, "setgrammar": 183, "grammar": 183, "bnf": 183, "constrain": 183, "dir": 183, "setignoreeo": 183, "ignoreeo": 183, "stream": 183, "impli": 183, "logit": [183, 193], "bia": 183, "inf": 183, "setinputprefix": 183, "inputprefix": 183, "infil": 183, "setinputsuffix": 183, "inputsuffix": 183, "setminkeep": 183, "minkeep": 183, "sampler": 183, "setminp": 183, "minp": 183, "setmirostateta": 183, "mirostateta": 183, "mirostat": 183, "eta": 183, "setmirostattau": 183, "mirostattau": 183, "entropi": 183, "tau": 183, "setnkeep": 183, "nkeep": 183, "setnpredict": 183, "npredict": 183, "setnprob": 183, "nprob": 183, "setpenalizenl": 183, "penalizenl": 183, "penal": 183, "newlin": 183, "setpenaltyprompt": 183, "penaltyprompt": 183, "alic": 183, "ggerganov": 183, "llama": 183, "cpp": 183, "3727": 183, "pull": 183, "request": 183, "setpresencepenalti": 183, "presencepenalti": 183, "presenc": 183, "setrepeatlastn": 183, "repeatlastn": 183, "ctx_size": 183, "setrepeatpenalti": 183, "repeatpenalti": 183, "lt": 183, "setstopstr": 183, "stopstr": 183, "upon": 183, "settemperatur": 183, "settfsz": 183, "tfsz": 183, "tail": 183, "z": 183, "40": 183, "settopp": 183, "topp": 183, "settypicalp": 183, "typicalp": 183, "typic": 183, "setusechattempl": 183, "usechattempl": 183, "chat": 183, "adduidcol": 184, "timestamp": 184, "pipelineoutputpars": [185, 186], "columns_map": 185, "immunohistochemistri": 185, "thyroid": 185, "transcript": [185, 202], "napsin": 185, "pr": 185, "her2": 185, "previous": 185, "undergon": 185, "axillari": 185, "lymph": 185, "dissect": 185, "twenti": 185, "ago": 185, "tumor": 185, "postop": 185, "radiotherapi": 185, "administ": 185, "residu": 185, "recur": 185, "lung": 185, "metastasi": 185, "underw": 185, "regimen": 185, "adriamycin": 185, "m2": 185, "cyclophosphamid": 185, "600": 185, "cours": 185, "therapi": 185, "oncology_pipelin": 185, "oncology_biomarker_pipelin": 185, "column_map": [185, 190], "document_identifi": 185, "xyz_123": 185, "document_text": 185, "assertion_chunk": 185, "pipeline_pars": 185, "parsed_result": 185, "check_column_mapping_dict": 185, "ner_chunk_column_nam": 185, "resolver_column_nam": 185, "assertion_column_nam": 185, "keyerror": 185, "check_unique_id": 185, "ner_chunk_begin": 185, "ner_chunk_end": 185, "get_assert": 185, "chunk_id": 185, "assertion_confid": 185, "assertion_sourc": 185, "get_classif": 185, "sentence_id": 185, "get_deidentif": 185, "get_docu": 185, "get_ent": 185, "ner_sourc": [185, 205], "ner_confid": 185, "entity_result": 185, "get_rel": 185, "return_relation_ent": 185, "envolv": 185, "chunk1_id": 185, "entity1_begin": 185, "entity1_end": 185, "chunk2_id": 185, "entity2_begin": 185, "entity2_end": 185, "get_resolut": 185, "terminologi": 185, "vocab": 185, "vocablari": 185, "teminologi": 185, "term_cod": 185, "all_k_cod": 185, "all_k_resolut": 185, "all_k_aux_label": 185, "aux": 185, "all_k_dist": 185, "get_summari": 185, "get_unique_id": 185, "base64": 185, "uuid3": 185, "uuid": 185, "document_id": 185, "update_columns_map": 185, "pipelinestag": 186, "pipelinetrac": 186, "trace": 186, "insight": 186, "createparserdictionari": 186, "getparserdictdirectli": 186, "listavailablemodel": 186, "getpipelinestag": 186, "getpossibleassert": 186, "getpossibleent": 186, "getpossiblerel": 186, "printpipelineschema": 186, "showavailablemodel": 186, "stagefield": 186, "internalresourcedownload": [187, 193], "downlod": 187, "downloadmodel": 187, "reader": [187, 190], "j_dwn": 187, "internalspythonresourcedownload": [187, 193], "downloadmodeldirectli": 187, "unzip": 187, "cache_folder_path": 187, "uri": 187, "returnprivatemodel": 187, "returnprivatepipelin": 187, "showavailableannot": 187, "showprivatemodel": 187, "showprivatepipelin": 187, "showuncategorizedresourc": 187, "uncategor": 187, "printprogress": 187, "progress": 187, "bar": 187, "consol": 187, "tabular": 188, "structureddeidentif": [188, 193], "columnsse": 188, "userandomdatedisplac": 188, "idcolumn": [188, 205], "countri": 188, "street": 188, "internet": 188, "profess": 188, "opf": 188, "screen": 188, "protein": 188, "someth": 188, "someon": 188, "healthplan": 188, "devic": 188, "social": 188, "protocol": 188, "nation": 188, "credit": 188, "bank": 188, "administr": 188, "obfuscatecolumn": 188, "texttodocumentscolumn": 189, "todocumentscolumn": 189, "todocumentscolumnswithid": 189, "id_column": [189, 205], "annotationtooljsonread": [190, 193], "pipeline_model": 190, "cleanup_mod": 190, "split_char": 190, "context_char": 190, "min_chars_tol": 190, "align_chars_tol": 190, "merge_overlap": 190, "sddlpath": 190, "generateassertiontrainset": 190, "generateconl": 190, "aspres": 190, "rdr": 190, "completion_id": 190, "completion_d": 190, "completion_us": 190, "tool_chunk": 190, "229937784": 190, "fih": 190, "18001": 190, "04t13": 190, "aleksei": 190, "136": 190, "142": 190, "37": [190, 205], "79": 190, "305038693": 190, "65001": 190, "03t08": 190, "844970557": 190, "rwh": 190, "21001": 190, "84": 190, "97": 190, "914783811": 190, "97001": 190, "02t12": 190, "07": 190, "91": [190, 205], "733882247": 190, "84001": 190, "02t15": 190, "73": 190, "77": 190, "assertion_df": 190, "sentencecol": 190, "assertioncol": 190, "taskcolumn": 190, "tokencol": 190, "nerlabel": 190, "generateplainassertiontrainset": 190, "cantemistread": 190, "cantemist": 190, "readdatasettaskn": 190, "textfold": 190, "codiespread": 190, "codiesp": 190, "readdatasettaskx": 190, "redatasethelp": 190, "spark_df": 190, "preprocess": 190, "i2b2_clinical_rel_dataset": 190, "begin1": 190, "firstcharent1": 190, "end1": 190, "lastcharent1": 190, "begin2": 190, "firstcharent2": 190, "end2": 190, "lastcharent2": 190, "label1": 190, "label2": 190, "create_annotation_column": 190, "txt_file": 190, "sent_id": 190, "beth": 190, "partner": 190, "i2b2": 190, "2010": 190, "va": 190, "tem": 190, "44": 190, "satur": 190, "75": 190, "lotion": 190, "crea": 190, "146": 190, "trnap": 190, "incis": 190, "conc": 190, "43": [190, 213], "ter": 190, "picc": 190, "54": 190, "68": 190, "58": 190, "headed": 190, "diaphoresi": 190, "92": 190, "82": 190, "electroca": 190, "61": 190, "inferior": 190, "st": 190, "depressio": 190, "239": 190, "196": 190, "176": 190, "145": 190, "train_data": 190, "annotation_schema": 190, "ner_column_nam": 190, "printschema": 190, "root": 190, "nullabl": 190, "synonymaugmentationuml": [190, 193], "umls_path": 190, "code_col": 190, "description_col": 190, "augment": 190, "synonym": 190, "uml": 190, "augmentcsv": 190, "corpus_csv_path": 190, "ner_pipelin": [190, 212], "do_product": 190, "augmentation_mod": 190, "plain_text": 190, "synonym_sourc": 190, "regex_pars": 190, "euclidean_distance_threshold": 190, "cosine_distance_threshold": 190, "synonym_limit": 190, "casing_funct": 190, "augmentdatafram": 190, "corpus_df": 190, "tf_graph_1x": 190, "assertion_log_pars": 191, "get_best_f1_scor": 191, "log_path": [191, 211], "micro": 191, "macro": 191, "get_chart": [191, 211], "log_fil": [191, 211], "plot": [191, 211], "figur": [191, 211], "precis": [191, 211, 216], "loss_plot": [191, 211], "parse_logfil": 191, "avg": 191, "ner_log_pars": 191, "true_seq": [191, 211, 216], "pred_seq": [191, 211, 216], "overal": [191, 211, 216], "simpli": [191, 211, 216], "evaluate_conll_fil": [191, 211], "fileiter": [191, 211], "script": [192, 198, 199, 200], "prepar": [192, 198], "manag": 192, "necessari": 192, "build_python_cod": 192, "py_cod": [192, 194, 198], "subprocess": 192, "build_scala_cod": [192, 215], "scala_cod": [192, 198, 215], "runtranspiledcod": [192, 215], "class": [192, 198, 218], "compile_scala_cod": [192, 215], "prepare_python_cod": 192, "import_sect": [192, 198], "typeerror": 192, "internal_class": [193, 199], "multilin": 193, "internals3resourcedownload": 193, "medicaltensorflowbertclassif": 193, "assertiondatasetencod": 193, "tensorflowbiogpt": 193, "medicaltensorflowdistilbertclassif": 193, "medicalnerdatasetencod": 193, "medicaltensorflowclassif": 193, "medicalencoderdecodermodel": 193, "taskread": 193, "annotationtooljsonschema": 193, "simpledisambiguationpipelin": 193, "cosinemetricsbreezeimpl": 193, "linalg": 193, "categorytodomainmap": 193, "switchablesentenceembed": 193, "storagedisambiguatorhelp": 193, "storagelocatordisambigu": 193, "disambiguatormodelparam": 193, "disambiguationdatatyp": 193, "datatyp": 193, "contextmappingsschema": 193, "linalgalias": 193, "predictionlog": 193, "logic": 193, "bowpoolingextractor": 193, "impl": 193, "sentenceembeddingsextractor": 193, "poolinglogicnd4": 193, "switchableembeddingsextractor": 193, "embeddingsextractor": 193, "poolinglog": 193, "annotationlog": 193, "kvknowledgeextractor": 193, "matchregex": 193, "readablepretrainedcontextualpars": 193, "matchedtoken": 193, "matchexcept": 193, "nertagsencodingintern": 193, "nertaggedintern": 193, "biogpttoken": 193, "assertionannot": 193, "genericclassifierdataencod": 193, "gptgenerationparam": 193, "negexdatasetread": 193, "stringfunct": 193, "jtreeread": 193, "jtreewrit": 193, "resolverparam": 193, "datehelp": 193, "deidmodelparam": 193, "obfuscatorannotatorapproach": 193, "obfuscatorparam": 193, "datechunkobfusc": 193, "texttodocumentcolumn": 193, "namechunkobfuscatorparam": 193, "obfuscatorannotatormodel": 193, "deidapproachparam": 193, "bertreconfig": 193, "relationinst": 193, "refeaturegener": 193, "relationencod": 193, "redataencod": 193, "tagsmetr": 193, "loggingdata": 193, "goldtoken": 193, "evalentityresolv": 193, "evaluationmetr": 193, "internalss3resourcedownload": 193, "threadsafedownload": 193, "riskadjustmentutil": [193, 214], "opensource_class": [193, 199], "jsonbuild": 193, "configload": 193, "conllgener": 193, "ziparchiveutil": 193, "longmapaccumul": 193, "mapaccumul": 193, "jsonpars": 193, "loadexternalmodel": 193, "debertaclassif": 193, "ai": 193, "visionencoderdecod": 193, "xlnetclassif": 193, "vitclassifi": 193, "xlmroberta": 193, "xlmrobertaclassif": 193, "prepareembed": 193, "generationconfig": 193, "beamhypothes": 193, "beamsearchscor": 193, "beamscor": 193, "logitprocessorlist": 193, "logitwarp": 193, "topklogitwarp": 193, "temperaturelogitwarp": 193, "topplogitwarp": 193, "minlengthlogitprocessor": 193, "logitprocess": 193, "forcedtokenlogitprocessor": 193, "logitprocessor": 193, "repetitionpenaltylogitprocessor": 193, "norepeatngramslogitprocessor": 193, "suppresslogitprocessor": 193, "bartclassif": 193, "openaiembed": 193, "albertclassif": 193, "camembert": 193, "zeroshotnerclassif": 193, "bertclassif": 193, "wav2vec2": 193, "spanbertcoref": 193, "openaicomplet": 193, "camembertclassif": 193, "textembeddingrespons": 193, "completionrespons": 193, "robertaclassif": 193, "convnextclassifi": 193, "instructor": 193, "distilbertclassif": 193, "tapa": 193, "bart": 193, "sentencedetectordl": 193, "classifierdatasetencod": 193, "chunkbyt": 193, "tensorflowsenti": 193, "loadsentencepiec": 193, "sentencepiec": 193, "sentencepieceencod": 193, "sentencepiecewrapp": 193, "sentencegroup": 193, "nerdatasetencod": 193, "tensorflown": 193, "tensorflowserializemodel": 193, "modelsignaturemanag": 193, "modelsignatureconst": 193, "datasetencod": 193, "sparsearrai": 193, "linearchaincrfmodel": 193, "datasetmetadata": 193, "datasetread": 193, "linearchaincrf": 193, "vectormath": 193, "crfdataset": 193, "hasenablecachingproperti": 193, "tableassembl": 193, "hasrecursivetransform": 193, "haspretrain": 193, "camembertembed": 193, "doc2vecapproach": 193, "word2vecapproach": 193, "wordembeddingsread": 193, "elmoembed": 193, "e5embed": 193, "robertasentenceembed": 193, "xlmrobertasentenceembed": 193, "distilbertembed": 193, "wordembeddingsload": 193, "debertaembed": 193, "xlmrobertaembed": 193, "readsfrombyt": 193, "mpnetembed": 193, "robertaembed": 193, "albertembed": 193, "instructorembed": 193, "wordembeddingswrit": 193, "chunkembed": 193, "longformerembed": 193, "xlnetembed": 193, "doc2vecmodel": 193, "word2vecmodel": 193, "tokenassembl": 193, "hassimpleannot": 193, "imageassembl": 193, "hascandidatelabelsproperti": 193, "sparknlpconfigkei": 193, "matchstrategi": 193, "cloudstoragetyp": 193, "outputhelp": 193, "resourcehelp": 193, "graphbuild": 193, "rulefactori": 193, "regexrul": 193, "lfucach": 193, "finisherutil": 193, "lrumap": 193, "hasinputannotationcol": 193, "pubtat": 193, "conllucol": 193, "conllu": 193, "conll2003nerread": 193, "spacytoannot": 193, "conllhelp": 193, "serializedexternalresourc": 193, "multidatematch": 193, "regextoken": [193, 203], "textmatchermodel": 193, "tmedgesreadwrit": 193, "btm": 193, "bigtextmatchermodel": 193, "trienod": 193, "tmnodesread": 193, "bigtextmatch": 193, "tmedgesread": 193, "tmnodeswrit": 193, "tmvocabreadwrit": 193, "tmvocabread": 193, "datematchertransl": 193, "sentencedetectorparam": 193, "sbd": 193, "pragmaticsentenceextractor": 193, "pragmat": 193, "pragmaticmethod": 193, "pragmaticdictionari": 193, "pragmaticcontentformatt": 193, "rulesymbol": 193, "pragmaticsymbol": 193, "viveknsentimentmodel": 193, "sda": 193, "vivekn": 193, "viveknsentimentutil": 193, "viveknsentimentapproach": 193, "sentimentdetectormodel": 193, "pragmaticscor": 193, "sentimentdetector": 193, "nertagsencod": 193, "nerdlmodelpythonread": 193, "loadscontrib": 193, "featuregener": 193, "nercrfapproach": 193, "nercrfmodel": 193, "dictionaryfeatur": 193, "neroverwrit": 193, "languagedetectordl": 193, "ld": 193, "sentencedetectordlencod": 193, "sentence_detector_dl": 193, "sentencedetectordlapproach": 193, "documentnorm": 193, "symmetricdeleteapproach": 193, "symmetricdeleteparam": 193, "symmetricdeletemodel": 193, "contextspellcheckerapproach": 193, "contextspellcheckermodel": 193, "weightedlevenshtein": 193, "serializableclass": 193, "specialtokenspars": 193, "hastransducerfeatur": 193, "norvigsweetingmodel": 193, "norvig": 193, "norvigsweetingparam": 193, "norvigsweetingapproach": 193, "whispertokendecod": 193, "bpe": 193, "bpespecialtoken": 193, "xlmtoken": 193, "bpetoken": 193, "barttoken": 193, "gpt2token": 193, "robertatoken": 193, "wordpieceencod": 193, "basictoken": 193, "mosespunctnorm": 193, "mosestoken": 193, "mose": 193, "tapasencod": 193, "datematch": 193, "documentsimilarityrankermodel": 193, "documentsimilarityrankerapproach": 193, "chunktoken": 193, "tagdictionari": 193, "dep": 193, "dependencyparserapproach": 193, "tagger": [193, 203, 211], "perceptron": 193, "greedytransitionapproach": 193, "greedytransit": 193, "dependencymak": 193, "trainfil": 193, "typdep": 193, "typeddependencyparsermodel": 193, "typeddependencyparserapproach": 193, "chunktokenizermodel": 193, "annotatorparam": 193, "writableannotatorcompon": 193, "externalresourceparam": 193, "serializedannotatorcompon": 193, "graphextract": 193, "xlmrobertafortokenclassif": 193, "bertfortokenclassif": 193, "robertaforzeroshotclassif": 193, "xlnetforsequenceclassif": 193, "robertaforsequenceclassif": 193, "classifierencod": 193, "bertforquestionansw": 193, "tapasforquestionansw": 193, "camembertforsequenceclassif": 193, "robertafortokenclassif": 193, "debertaforsequenceclassif": 193, "distilbertforzeroshotclassif": 193, "camembertforquestionansw": 193, "debertafortokenclassif": 193, "xlnetfortokenclassif": 193, "classifiermetr": 193, "albertforquestionansw": 193, "debertaforquestionansw": 193, "bertforzeroshotclassif": 193, "bertforsequenceclassif": 193, "distilbertforquestionansw": 193, "camembertfortokenclassif": 193, "bartforzeroshotclassif": 193, "xlmrobertaforsequenceclassif": 193, "longformerforsequenceclassif": 193, "distilbertfortokenclassif": 193, "xlmrobertaforzeroshotclassif": 193, "albertforsequenceclassif": 193, "xlmrobertaforquestionansw": 193, "longformerfortokenclassif": 193, "longformerforquestionansw": 193, "albertfortokenclassif": 193, "datasethelp": 193, "taggedsent": 193, "wordpiecetoken": 193, "dependencypars": 193, "embeddingswithsent": 193, "indexedtoken": 193, "tokenizedwithsent": 193, "tabledata": 193, "tokenpars": 193, "conllsent": 193, "tokenizedsent": 193, "sentencewithembed": 193, "labeleddepend": 193, "recursivetokenizermodel": 193, "whisperforctc": 193, "audio": 193, "hubertforctc": 193, "wav2vec2forctc": 193, "whisperpreprocessor": 193, "feature_extractor": 193, "preprocessorattribut": 193, "audioutil": 193, "preprocessor": 193, "perceptronapproachdistribut": 193, "averagedperceptron": 193, "perceptronpredictionutil": 193, "perceptrontrainingutil": 193, "perceptronapproach": 193, "accumul": 193, "perceptronutil": 193, "tokenizermodel": 193, "mariantransform": 193, "gpt2transform": 193, "barttransform": 193, "t5transform": 193, "date2chunk": 193, "regexmatchermodel": 193, "recursivetoken": 193, "lemmat": 193, "lemmatizermodel": 193, "normalizermodel": 193, "convnextforimageclassif": 193, "cv": 193, "imageioutil": 193, "imageschemautil": 193, "imageresizeutil": 193, "hasrescalefactor": 193, "vitforimageclassif": 193, "visionencoderdecoderforimagecapt": 193, "swinforimageclassif": 193, "datematcherutil": 193, "yakeparam": 193, "yakekeywordextract": 193, "regexpatternsread": 193, "patternsread": 193, "ahocorasickautomaton": 193, "entityrulermodel": 193, "regexpatternsreadwrit": 193, "entitypattern": 193, "patternsreadwrit": 193, "entityrulerfeatur": 193, "entityrulerutil": 193, "entityrulerapproach": 193, "pretrainedannot": 193, "token2chunk": 193, "wordsegmenterapproach": 193, "wordsegmentermodel": 193, "tagstyp": 193, "spanbertcorefmodel": 193, "coref": 193, "rawannot": 193, "embeddingsfinish": 193, "hasimagefeatureproperti": 193, "audioassembl": 193, "canbelazi": 193, "paramsandfeatureswrit": 193, "annotationimag": 193, "hasmultipleinputannotationcol": 193, "hasgeneratorproperti": 193, "hasrecursivefit": 193, "hasbatchedannotateaudio": 193, "hasaudiofeatureproperti": 193, "graphfinish": 193, "hasprotectedparam": 193, "hasbatchedannotateimag": 193, "hasfeatur": 193, "hasoutputannotatortyp": 193, "annotationaudio": 193, "iannot": 193, "paramsandfeaturesread": 193, "hasoutputannotationcol": 193, "hasclassifieractivationproperti": 193, "documentsimilarityrankerfinish": 193, "resourcedownload": 193, "repositorymetadata": 193, "resourcemetadata": 193, "s3resourcedownload": 193, "run_convert": 194, "build_py_cod": 194, "build_sc_cod": 194, "convers": [194, 198], "python_code_fail": [194, 200], "scala_gener": [194, 200], "generated_code_work": [194, 200], "generated_code_fail": [194, 200], "bucket": 197, "convert_nlu_component_to_python": 197, "is_component_fin": 197, "is_component_leg": 197, "is_component_med": 197, "is_component_ocr": 197, "is_component_open_sourc": 197, "is_component_pretrain": 197, "nlu_component_to_spark_nlp_cod": 197, "starts_with_fin": 197, "starts_with_leg": 197, "starts_with_med": 197, "to_python": 197, "pipeline_to_convert": 197, "medical_annotators_set": 197, "open_source_annotator_set_fin": 197, "focus": 198, "adapt": 198, "anonymize_script": 198, "break_line_after_backslash": 198, "convert_class_nam": 198, "convert_python_dict_to_scala_script": 198, "find_key_valu": 198, "get_data_dict": 198, "get_import_sect": 198, "data_dict": 198, "prepare_scala_cod": 198, "is_spark_initi": 198, "remove_blank_lin": 198, "blank": 198, "clean": 198, "restore_sensitive_valu": 198, "anonymized_script": 198, "sensitive_valu": 198, "run_transpil": 198, "markdown": [199, 200], "get_python_code_from_md": 199, "md_file_path": [199, 200], "get_scala_code_from_md": 199, "load_file_as_dict": 199, "file_path1": 199, "file_path2": 199, "process_python_cod": 199, "python_cod": 199, "update_md_fil": 199, "file_path": [199, 205, 212], "update_md_file_for_working_scala_cod": 199, "replacement_str": 199, "git": 200, "apply_method_to_all_md_fil": 200, "directory_path": 200, "upload_scala_code_in_git": 200, "upload_scala_code_in_md_fil": 200, "md_file": 200, "results_list": 200, "scala_code_work": 200, "updatecachemodel": 201, "cache_fold": 201, "refresh": 201, "model_nam": 201, "start_dat": 201, "end_dat": 201, "get_mt_sampl": 202, "medical_speci": 202, "transcrib": 202, "mtsampl": 202, "allergy_immunologi": 202, "autopsi": 202, "bariatr": 202, "cardiovascular_pulmonari": 202, "chiropract": 202, "consult_history_and_phi": 202, "cosmetic_plastic_surgeri": 202, "dentistri": 202, "dermatologi": 202, "diets_and_nutrit": 202, "discharge_summari": 202, "emergency_room_report": 202, "endocrinologi": 202, "ent_otolaryngologi": 202, "gastroenterologi": 202, "general_medicin": 202, "hematology_oncologi": 202, "hospice_palliative_car": 202, "im": 202, "lab_medicine_pathologi": 202, "letter": 202, "nephrologi": 202, "neurologi": 202, "neurosurgeri": 202, "obstetrics_gynecologi": 202, "office_not": 202, "ophthalmologi": 202, "orthoped": 202, "pain_manag": 202, "pediatrics_neonat": 202, "physical_medicine_rehab": 202, "podiatri": 202, "psychiatry_psychologi": 202, "radiologi": 202, "rheumatologi": 202, "sleep_medicin": 202, "soap_chart_progress_not": 202, "speech_languag": 202, "surgeri": 202, "urologi": 202, "scrap": 202, "get_doc_assembl": 203, "get_empty_df": 203, "get_ner_df": 203, "get_ner_sentence_bord": 203, "border": 203, "get_nlp_pos_pipelin": 203, "get_nlp_token_pipelin": 203, "get_po": 203, "get_regex_token": 203, "get_regular_token": 203, "get_rel_df": 203, "get_sent_detector": 203, "get_sentence_pipelin": 203, "get_single_task_conl": 203, "pos_pipelin": 203, "token_pipelin": 203, "style": [203, 206, 212, 213], "enumer": 203, "get_token_df": 203, "_type_": 203, "read_conl": 203, "filepath": 203, "strip_json_ent": 203, "exported_json": 203, "strip": 203, "empty_df": 203, "nlp_pos_pipelin": 203, "nlp_token_pipelin": 203, "pos_pipeline_initi": 203, "regular_token": 203, "token_pipeline_initi": 203, "dict_to_annotation_convert": 205, "document_col_nam": 205, "chunk_col_nam": 205, "adjust_end": 205, "respons": 205, "actual": 205, "abl": 205, "therefor": 205, "document_metadata": 205, "reserv": 205, "list_of_dict": 205, "georg": 205, "born": 205, "1995": 205, "pleasur": 205, "llm_output": 205, "46": 205, "83": 205, "96": 205, "doc_id": [205, 217], "file1": 205, "bush": 205, "nativ": 205, "reach": 205, "me": 205, "76": 205, "file2": 205, "result_df": 205, "structured_deidentifi": 205, "columns_dict": 205, "ref_sourc": 205, "columns_se": 205, "date_format": 205, "is_module_import": 206, "lib": 206, "raise_except": 206, "pip_nam": 206, "message_typ": 206, "cannot": 206, "instruct": 206, "parse_str_to_dict": 208, "dict_str": 208, "row_separ": 208, "key_value_separ": 208, "is_value_list": 208, "value_separ": 208, "deseri": 208, "internalannotatortyp": 209, "selector": 209, "ocr_entity_processor": 212, "bounding_box": 212, "save_fold": 212, "label_color": 212, "box_color": 212, "color_chart_path": 212, "color_chart": 212, "png": 212, "chunk_col": 212, "black_list": 212, "display_result": 212, "pageiteratorlevel": 212, "pagesegmod": 212, "pagesegmentationmod": 212, "sparse_text_osd": 212, "outline_color": [212, 213], "outline_width": [212, 213], "text_band": [212, 213], "text_typ": 212, "pdf": [212, 217], "ocr": [212, 213], "paint": 212, "highlight": [212, 214], "colored_box": 212, "draw": 212, "band": 212, "color": [212, 213], "box": [212, 217], "around": 212, "rgb": 212, "chart": 212, "outlin": 212, "entitii": 212, "width": 212, "writ": 212, "aqua": [212, 213], "aquamarin": [212, 213], "blanchedalmond": [212, 213], "blue": [212, 213], "blueviolet": [212, 213], "burlywood": [212, 213], "draw_boxes_on_image_handwritten_region": 213, "image_data": 213, "get_handwritten_region": 213, "colors_rgb": 213, "255": 213, "127": 213, "212": 213, "235": 213, "205": 213, "138": 213, "226": 213, "165": 213, "label2color": 213, "label2rgb": 213, "pretrained_model": 213, "image_handwritten_detector_gsa0803": 213, "hierarch": 214, "10th": 214, "revis": 214, "hcc_from_icd": 214, "hcc_label": 214, "hcc_list": 214, "diff_between_hcc": 214, "before_hcc_list": 214, "after_hcc_list": 214, "evolv": 214, "cc": 214, "escal": 214, "aggregate_ent": 216, "calc_metr": 216, "tp": 216, "percent": 216, "fb1": 216, "decim": 216, "count_chunk": 216, "correct_chunk": 216, "true_chunk": 216, "pred_chunk": 216, "correct_count": 216, "true_count": 216, "pred_count": 216, "counter": 216, "correctli": 216, "get_result": 216, "prec": 216, "rec": 216, "is_chunk_end": 216, "prev_tag": 216, "previou": 216, "contradict": 216, "is_chunk_start": 216, "split_tag": 216, "chunk_tag": 216, "chunk_typ": 216, "convert_to_conl": 217, "get_token": 217, "hocr": 217, "pdfs_to_visualner_to_conl": 217, "pdf_dir": 217, "pdf_visual_pipeline_model": 217, "output_fil": 217, "text_ner_dataset": 217, "visualner_annotations_to_conl": 217, "visual_json_input_fil": 217, "conll_output_fil": 217, "write_conl": 217, "conll_lin": 217, "filenam": 217, "overview": 218}, "objects": {"": [[149, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[2, 0, 0, "-", "alab"], [61, 0, 0, "-", "annotator"], [149, 4, 1, "", "annotators"], [108, 0, 0, "-", "base"], [112, 0, 0, "-", "common"], [113, 0, 0, "-", "compatibility"], [114, 0, 0, "-", "custom_transformer"], [115, 0, 0, "-", "deidentification_module"], [116, 0, 0, "-", "eval"], [131, 0, 0, "-", "finance"], [148, 0, 0, "-", "functions"], [149, 5, 1, "", "get_credentials"], [150, 0, 0, "-", "internal"], [165, 0, 0, "-", "legal"], [149, 5, 1, "", "library_settings"], [182, 0, 0, "-", "llm"], [149, 5, 1, "", "load_license_validator"], [184, 0, 0, "-", "modelTracer"], [185, 0, 0, "-", "pipeline_output_parser"], [186, 0, 0, "-", "pipeline_tracer"], [187, 0, 0, "-", "pretrained"], [149, 5, 1, "", "pub_version"], [149, 4, 1, "", "size_regex"], [149, 5, 1, "", "start"], [188, 0, 0, "-", "structured_deidentification"], [189, 0, 0, "-", "text_to_documents_columns"], [190, 0, 0, "-", "training"], [191, 0, 0, "-", "training_log_parser"], [149, 4, 1, "", "transformer_seq_classification"], [196, 0, 0, "-", "transpiler"], [201, 0, 0, "-", "updateModels"], [202, 0, 0, "-", "util"], [207, 0, 0, "-", "utils"], [149, 5, 1, "", "version"], [149, 4, 1, "", "version_regex"]], "sparknlp_jsl.alab": [[2, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[2, 2, 1, "", "base_url"], [2, 2, 1, "", "client_id"], [2, 2, 1, "", "client_secret"], [2, 2, 1, "", "cookies"], [2, 3, 1, "", "create_project"], [2, 3, 1, "", "delete_project"], [2, 3, 1, "", "delete_tasks"], [2, 3, 1, "", "generate_preannotations"], [2, 3, 1, "", "get_IAA_metrics"], [2, 3, 1, "", "get_all_projects"], [2, 3, 1, "", "get_annotations"], [2, 3, 1, "", "get_assertion_data"], [2, 3, 1, "", "get_classification_data"], [2, 3, 1, "", "get_conll_data"], [2, 3, 1, "", "get_conll_data_from_visualner"], [2, 3, 1, "", "get_project_config"], [2, 3, 1, "", "get_relation_extraction_data"], [2, 2, 1, "", "http_success_codes"], [2, 2, 1, "", "password"], [2, 3, 1, "", "review_annotations"], [2, 3, 1, "", "set_credentials"], [2, 3, 1, "", "set_project_config"], [2, 3, 1, "", "upload_preannotations"], [2, 3, 1, "", "upload_tasks"], [2, 2, 1, "", "username"]], "sparknlp_jsl.annotator": [[3, 0, 0, "-", "annotation_merger"], [61, 4, 1, "", "assertion"], [10, 0, 0, "-", "assertion"], [11, 0, 0, "-", "chunk2_token"], [61, 4, 1, "", "chunker"], [20, 0, 0, "-", "chunker"], [61, 4, 1, "", "classification"], [28, 0, 0, "-", "classification"], [61, 4, 1, "", "context"], [34, 0, 0, "-", "context"], [61, 4, 1, "", "deid"], [38, 0, 0, "-", "deid"], [61, 4, 1, "", "disambiguation"], [43, 0, 0, "-", "disambiguation"], [45, 0, 0, "-", "doc2_chunk_internal"], [46, 0, 0, "-", "document_filterer_by_classifier"], [47, 0, 0, "-", "document_filterer_by_ner"], [61, 4, 1, "", "embeddings"], [52, 0, 0, "-", "embeddings"], [54, 0, 0, "-", "er"], [55, 0, 0, "-", "feature_assembler"], [56, 0, 0, "-", "filtering_params"], [57, 0, 0, "-", "flattener"], [61, 4, 1, "", "generic_classifier"], [59, 0, 0, "-", "generic_classifier"], [60, 0, 0, "-", "handle_exception_params"], [61, 4, 1, "", "keyword"], [62, 0, 0, "-", "matcher"], [65, 0, 0, "-", "merge"], [66, 0, 0, "-", "multi_chunk2_doc"], [67, 0, 0, "-", "ner"], [76, 0, 0, "-", "normalizer"], [78, 0, 0, "-", "qa"], [82, 0, 0, "-", "rag"], [84, 0, 0, "-", "re"], [89, 0, 0, "-", "regex"], [91, 0, 0, "-", "resolution"], [94, 0, 0, "-", "resolution2_chunk"], [95, 0, 0, "-", "router"], [96, 0, 0, "-", "seq2seq"], [101, 0, 0, "-", "source_tracking_metadata_params"], [102, 0, 0, "-", "splitter"], [104, 0, 0, "-", "tf_graph_builder"], [105, 0, 0, "-", "white_black_list_params"], [106, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_merger": [[3, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[3, 3, 1, "", "clear"], [3, 3, 1, "", "copy"], [3, 3, 1, "", "explainParam"], [3, 3, 1, "", "explainParams"], [3, 3, 1, "", "extractParamMap"], [3, 3, 1, "", "getInputCols"], [3, 3, 1, "", "getLazyAnnotator"], [3, 3, 1, "", "getOrDefault"], [3, 3, 1, "", "getOutputCol"], [3, 3, 1, "", "getParam"], [3, 3, 1, "", "getParamValue"], [3, 2, 1, "", "getter_attrs"], [3, 3, 1, "", "hasDefault"], [3, 3, 1, "", "hasParam"], [3, 2, 1, "", "inputAnnotatorTypes"], [3, 2, 1, "", "inputCols"], [3, 3, 1, "", "inputColsValidation"], [3, 2, 1, "", "inputType"], [3, 3, 1, "", "isDefined"], [3, 3, 1, "", "isSet"], [3, 2, 1, "", "lazyAnnotator"], [3, 3, 1, "", "load"], [3, 2, 1, "", "name"], [3, 2, 1, "", "optionalInputAnnotatorTypes"], [3, 2, 1, "", "outputAnnotatorType"], [3, 2, 1, "", "outputCol"], [3, 3, 1, "", "read"], [3, 3, 1, "", "save"], [3, 3, 1, "", "set"], [3, 3, 1, "", "setForceInputTypeValidation"], [3, 3, 1, "", "setInputCols"], [3, 3, 1, "", "setInputType"], [3, 3, 1, "", "setLazyAnnotator"], [3, 3, 1, "", "setOutputCol"], [3, 3, 1, "", "setParamValue"], [3, 3, 1, "", "setParams"], [3, 2, 1, "", "skipLPInputColsValidation"], [3, 3, 1, "", "transform"], [3, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion": [[4, 0, 0, "-", "assertionDL"], [5, 0, 0, "-", "assertion_chunk_converter"], [6, 0, 0, "-", "assertion_dl_reg"], [7, 0, 0, "-", "assertion_merger"], [8, 0, 0, "-", "contextual_assertion"], [9, 0, 0, "-", "fewshot_assertion_sentence_converter"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[4, 1, 1, "", "AssertionDLApproach"], [4, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[4, 2, 1, "", "batchSize"], [4, 3, 1, "", "clear"], [4, 2, 1, "", "configProtoBytes"], [4, 3, 1, "", "copy"], [4, 2, 1, "", "datasetInfo"], [4, 2, 1, "", "doExceptionHandling"], [4, 2, 1, "", "dropout"], [4, 2, 1, "", "enableOutputLogs"], [4, 2, 1, "", "endCol"], [4, 2, 1, "", "engine"], [4, 2, 1, "", "epochs"], [4, 3, 1, "", "explainParam"], [4, 3, 1, "", "explainParams"], [4, 3, 1, "", "extractParamMap"], [4, 3, 1, "", "fit"], [4, 3, 1, "", "fitMultiple"], [4, 3, 1, "", "getEngine"], [4, 3, 1, "", "getInputCols"], [4, 3, 1, "", "getLazyAnnotator"], [4, 3, 1, "", "getOrDefault"], [4, 3, 1, "", "getOutputCol"], [4, 3, 1, "", "getParam"], [4, 3, 1, "", "getParamValue"], [4, 2, 1, "", "getter_attrs"], [4, 2, 1, "", "graphFile"], [4, 2, 1, "", "graphFolder"], [4, 3, 1, "", "hasDefault"], [4, 3, 1, "", "hasParam"], [4, 2, 1, "", "includeConfidence"], [4, 2, 1, "", "inputAnnotatorTypes"], [4, 2, 1, "", "inputCols"], [4, 3, 1, "", "inputColsValidation"], [4, 3, 1, "", "isDefined"], [4, 3, 1, "", "isSet"], [4, 2, 1, "", "label"], [4, 2, 1, "", "lazyAnnotator"], [4, 2, 1, "", "learningRate"], [4, 3, 1, "", "load"], [4, 2, 1, "", "maxSentLen"], [4, 2, 1, "", "optionalInputAnnotatorTypes"], [4, 2, 1, "", "outputAnnotatorType"], [4, 2, 1, "", "outputCol"], [4, 2, 1, "", "outputLogsPath"], [4, 3, 1, "", "read"], [4, 3, 1, "", "save"], [4, 2, 1, "", "scopeWindow"], [4, 3, 1, "", "set"], [4, 3, 1, "", "setBatchSize"], [4, 3, 1, "", "setConfigProtoBytes"], [4, 3, 1, "", "setDatasetInfo"], [4, 3, 1, "", "setDoExceptionHandling"], [4, 3, 1, "", "setDropout"], [4, 3, 1, "", "setEnableOutputLogs"], [4, 3, 1, "", "setEndCol"], [4, 3, 1, "", "setEpochs"], [4, 3, 1, "", "setForceInputTypeValidation"], [4, 3, 1, "", "setGraphFile"], [4, 3, 1, "", "setGraphFolder"], [4, 3, 1, "", "setIncludeConfidence"], [4, 3, 1, "", "setInputCols"], [4, 3, 1, "", "setLabelCol"], [4, 3, 1, "", "setLazyAnnotator"], [4, 3, 1, "", "setLearningRate"], [4, 3, 1, "", "setMaxSentLen"], [4, 3, 1, "", "setOutputCol"], [4, 3, 1, "", "setOutputLogsPath"], [4, 3, 1, "", "setParamValue"], [4, 3, 1, "", "setScopeWindow"], [4, 3, 1, "", "setStartCol"], [4, 3, 1, "", "setTestDataset"], [4, 3, 1, "", "setValidationSplit"], [4, 3, 1, "", "setVerbose"], [4, 2, 1, "", "skipLPInputColsValidation"], [4, 2, 1, "", "startCol"], [4, 2, 1, "", "testDataset"], [4, 2, 1, "", "validationSplit"], [4, 2, 1, "", "verbose"], [4, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[4, 2, 1, "", "classes"], [4, 3, 1, "", "clear"], [4, 2, 1, "", "configProtoBytes"], [4, 3, 1, "", "copy"], [4, 2, 1, "", "datasetInfo"], [4, 2, 1, "", "doExceptionHandling"], [4, 2, 1, "", "entityAssertionCaseSensitive"], [4, 3, 1, "", "explainParam"], [4, 3, 1, "", "explainParams"], [4, 3, 1, "", "extractParamMap"], [4, 3, 1, "", "getEntityAssertion"], [4, 3, 1, "", "getInputCols"], [4, 3, 1, "", "getLazyAnnotator"], [4, 3, 1, "", "getOrDefault"], [4, 3, 1, "", "getOutputCol"], [4, 3, 1, "", "getParam"], [4, 3, 1, "", "getParamValue"], [4, 3, 1, "", "getReplaceLabels"], [4, 3, 1, "", "getStorageRef"], [4, 2, 1, "", "getter_attrs"], [4, 3, 1, "", "hasDefault"], [4, 3, 1, "", "hasParam"], [4, 2, 1, "", "includeConfidence"], [4, 2, 1, "", "inputAnnotatorTypes"], [4, 2, 1, "", "inputCols"], [4, 3, 1, "", "inputColsValidation"], [4, 3, 1, "", "isDefined"], [4, 3, 1, "", "isSet"], [4, 2, 1, "", "lazyAnnotator"], [4, 3, 1, "", "load"], [4, 2, 1, "", "maxSentLen"], [4, 2, 1, "", "name"], [4, 2, 1, "", "optionalInputAnnotatorTypes"], [4, 2, 1, "", "outputAnnotatorType"], [4, 2, 1, "", "outputCol"], [4, 3, 1, "", "pretrained"], [4, 3, 1, "", "read"], [4, 3, 1, "", "save"], [4, 2, 1, "", "scopeWindow"], [4, 3, 1, "", "set"], [4, 3, 1, "", "setConfigProtoBytes"], [4, 3, 1, "", "setDatasetInfo"], [4, 3, 1, "", "setDoExceptionHandling"], [4, 3, 1, "", "setEntityAssertion"], [4, 3, 1, "", "setEntityAssertionCaseSensitive"], [4, 3, 1, "", "setForceInputTypeValidation"], [4, 3, 1, "", "setIncludeConfidence"], [4, 3, 1, "", "setInputCols"], [4, 3, 1, "", "setLazyAnnotator"], [4, 3, 1, "", "setOutputCol"], [4, 3, 1, "", "setParamValue"], [4, 3, 1, "", "setParams"], [4, 3, 1, "", "setReplaceLabels"], [4, 3, 1, "", "setScopeWindow"], [4, 3, 1, "", "setStorageRef"], [4, 2, 1, "", "skipLPInputColsValidation"], [4, 2, 1, "", "storageRef"], [4, 2, 1, "", "targetNerLabels"], [4, 3, 1, "", "transform"], [4, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[5, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[5, 2, 1, "", "chunkBeginCol"], [5, 2, 1, "", "chunkEndCol"], [5, 2, 1, "", "chunkTextCol"], [5, 3, 1, "", "clear"], [5, 3, 1, "", "copy"], [5, 3, 1, "", "explainParam"], [5, 3, 1, "", "explainParams"], [5, 3, 1, "", "extractParamMap"], [5, 3, 1, "", "getOrDefault"], [5, 3, 1, "", "getParam"], [5, 3, 1, "", "getParamValue"], [5, 2, 1, "", "getter_attrs"], [5, 3, 1, "", "hasDefault"], [5, 3, 1, "", "hasParam"], [5, 2, 1, "", "inputAnnotatorTypes"], [5, 2, 1, "", "inputCols"], [5, 3, 1, "", "isDefined"], [5, 3, 1, "", "isSet"], [5, 3, 1, "", "load"], [5, 2, 1, "", "name"], [5, 2, 1, "", "outputAnnotatorType"], [5, 2, 1, "", "outputCol"], [5, 2, 1, "", "outputTokenBeginCol"], [5, 2, 1, "", "outputTokenEndCol"], [5, 3, 1, "", "read"], [5, 3, 1, "", "save"], [5, 3, 1, "", "set"], [5, 3, 1, "", "setChunkBeginCol"], [5, 3, 1, "", "setChunkEndCol"], [5, 3, 1, "", "setChunkTextCol"], [5, 3, 1, "", "setInputCols"], [5, 3, 1, "", "setMetadataFields"], [5, 3, 1, "", "setOutputCol"], [5, 3, 1, "", "setOutputTokenBeginCol"], [5, 3, 1, "", "setOutputTokenEndCol"], [5, 3, 1, "", "setParamValue"], [5, 3, 1, "", "setParams"], [5, 3, 1, "", "transform"], [5, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[6, 1, 1, "", "AssertionLogRegApproach"], [6, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[6, 2, 1, "", "afterParam"], [6, 2, 1, "", "beforeParam"], [6, 3, 1, "", "clear"], [6, 3, 1, "", "copy"], [6, 2, 1, "", "eNetParam"], [6, 2, 1, "", "endCol"], [6, 3, 1, "", "explainParam"], [6, 3, 1, "", "explainParams"], [6, 3, 1, "", "extractParamMap"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "fitMultiple"], [6, 3, 1, "", "getInputCols"], [6, 3, 1, "", "getLazyAnnotator"], [6, 3, 1, "", "getOrDefault"], [6, 3, 1, "", "getOutputCol"], [6, 3, 1, "", "getParam"], [6, 3, 1, "", "getParamValue"], [6, 2, 1, "", "getter_attrs"], [6, 3, 1, "", "hasDefault"], [6, 3, 1, "", "hasParam"], [6, 2, 1, "", "inputAnnotatorTypes"], [6, 2, 1, "", "inputCols"], [6, 3, 1, "", "inputColsValidation"], [6, 3, 1, "", "isDefined"], [6, 3, 1, "", "isSet"], [6, 2, 1, "", "label"], [6, 2, 1, "", "lazyAnnotator"], [6, 3, 1, "", "load"], [6, 2, 1, "", "maxIter"], [6, 2, 1, "", "nerCol"], [6, 2, 1, "", "optionalInputAnnotatorTypes"], [6, 2, 1, "", "outputAnnotatorType"], [6, 2, 1, "", "outputCol"], [6, 3, 1, "", "read"], [6, 2, 1, "", "regParam"], [6, 3, 1, "", "save"], [6, 3, 1, "", "set"], [6, 3, 1, "", "setAfter"], [6, 3, 1, "", "setBefore"], [6, 3, 1, "", "setEndCol"], [6, 3, 1, "", "setEnet"], [6, 3, 1, "", "setForceInputTypeValidation"], [6, 3, 1, "", "setInputCols"], [6, 3, 1, "", "setLabelCol"], [6, 3, 1, "", "setLazyAnnotator"], [6, 3, 1, "", "setMaxIter"], [6, 3, 1, "", "setNerCol"], [6, 3, 1, "", "setOutputCol"], [6, 3, 1, "", "setParamValue"], [6, 3, 1, "", "setReg"], [6, 3, 1, "", "setStartCol"], [6, 3, 1, "", "setTargetNerLabels"], [6, 2, 1, "", "skipLPInputColsValidation"], [6, 2, 1, "", "startCol"], [6, 2, 1, "", "targetNerLabels"], [6, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[6, 2, 1, "", "afterParam"], [6, 2, 1, "", "beforeParam"], [6, 3, 1, "", "clear"], [6, 3, 1, "", "copy"], [6, 2, 1, "", "endCol"], [6, 3, 1, "", "explainParam"], [6, 3, 1, "", "explainParams"], [6, 3, 1, "", "extractParamMap"], [6, 3, 1, "", "getInputCols"], [6, 3, 1, "", "getLazyAnnotator"], [6, 3, 1, "", "getOrDefault"], [6, 3, 1, "", "getOutputCol"], [6, 3, 1, "", "getParam"], [6, 3, 1, "", "getParamValue"], [6, 3, 1, "", "getStorageRef"], [6, 2, 1, "", "getter_attrs"], [6, 3, 1, "", "hasDefault"], [6, 3, 1, "", "hasParam"], [6, 2, 1, "", "inputAnnotatorTypes"], [6, 2, 1, "", "inputCols"], [6, 3, 1, "", "inputColsValidation"], [6, 3, 1, "", "isDefined"], [6, 3, 1, "", "isSet"], [6, 2, 1, "", "lazyAnnotator"], [6, 3, 1, "", "load"], [6, 2, 1, "", "name"], [6, 2, 1, "", "nerCol"], [6, 2, 1, "", "optionalInputAnnotatorTypes"], [6, 2, 1, "", "outputAnnotatorType"], [6, 2, 1, "", "outputCol"], [6, 3, 1, "", "pretrained"], [6, 3, 1, "", "read"], [6, 3, 1, "", "save"], [6, 3, 1, "", "set"], [6, 3, 1, "", "setForceInputTypeValidation"], [6, 3, 1, "", "setInputCols"], [6, 3, 1, "", "setLazyAnnotator"], [6, 3, 1, "", "setOutputCol"], [6, 3, 1, "", "setParamValue"], [6, 3, 1, "", "setParams"], [6, 3, 1, "", "setStorageRef"], [6, 2, 1, "", "skipLPInputColsValidation"], [6, 2, 1, "", "startCol"], [6, 2, 1, "", "storageRef"], [6, 2, 1, "", "targetNerLabels"], [6, 3, 1, "", "transform"], [6, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[7, 1, 1, "", "AssertionMerger"]], "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger": [[7, 2, 1, "", "applyFilterBeforeMerge"], [7, 2, 1, "", "assertionSourcePrecedence"], [7, 2, 1, "", "blackList"], [7, 2, 1, "", "caseSensitive"], [7, 3, 1, "", "clear"], [7, 3, 1, "", "copy"], [7, 2, 1, "", "defaultConfidence"], [7, 3, 1, "", "explainParam"], [7, 3, 1, "", "explainParams"], [7, 3, 1, "", "extractParamMap"], [7, 3, 1, "", "getInputCols"], [7, 3, 1, "", "getLazyAnnotator"], [7, 3, 1, "", "getOrDefault"], [7, 3, 1, "", "getOutputCol"], [7, 3, 1, "", "getParam"], [7, 3, 1, "", "getParamValue"], [7, 2, 1, "", "getter_attrs"], [7, 3, 1, "", "hasDefault"], [7, 3, 1, "", "hasParam"], [7, 2, 1, "", "inputAnnotatorTypes"], [7, 2, 1, "", "inputCols"], [7, 3, 1, "", "inputColsValidation"], [7, 3, 1, "", "isDefined"], [7, 3, 1, "", "isSet"], [7, 2, 1, "", "lazyAnnotator"], [7, 3, 1, "", "load"], [7, 2, 1, "", "mergeOverlapping"], [7, 2, 1, "", "name"], [7, 2, 1, "", "optionalInputAnnotatorTypes"], [7, 2, 1, "", "orderingFeatures"], [7, 2, 1, "", "outputAnnotatorType"], [7, 2, 1, "", "outputCol"], [7, 3, 1, "", "read"], [7, 3, 1, "", "save"], [7, 2, 1, "", "selectionStrategy"], [7, 3, 1, "", "set"], [7, 3, 1, "", "setApplyFilterBeforeMerge"], [7, 3, 1, "", "setAssertionSourcePrecedence"], [7, 3, 1, "", "setAssertionsConfidence"], [7, 3, 1, "", "setBlackList"], [7, 3, 1, "", "setCaseSensitive"], [7, 3, 1, "", "setDefaultConfidence"], [7, 3, 1, "", "setDenyList"], [7, 3, 1, "", "setForceInputTypeValidation"], [7, 3, 1, "", "setInputCols"], [7, 3, 1, "", "setLazyAnnotator"], [7, 3, 1, "", "setMergeOverlapping"], [7, 3, 1, "", "setOrderingFeatures"], [7, 3, 1, "", "setOutputCol"], [7, 3, 1, "", "setParamValue"], [7, 3, 1, "", "setParams"], [7, 3, 1, "", "setSelectionStrategy"], [7, 3, 1, "", "setSortByBegin"], [7, 3, 1, "", "setWhiteList"], [7, 2, 1, "", "skipLPInputColsValidation"], [7, 2, 1, "", "sortByBegin"], [7, 3, 1, "", "transform"], [7, 2, 1, "", "whiteList"], [7, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[8, 1, 1, "", "ContextualAssertion"]], "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion": [[8, 3, 1, "", "addPrefixKeywords"], [8, 3, 1, "", "addSuffixKeywords"], [8, 2, 1, "", "assertion"], [8, 2, 1, "", "caseSensitive"], [8, 3, 1, "", "clear"], [8, 2, 1, "", "confidenceCalculationDirection"], [8, 3, 1, "", "copy"], [8, 2, 1, "", "doExceptionHandling"], [8, 3, 1, "", "explainParam"], [8, 3, 1, "", "explainParams"], [8, 3, 1, "", "extractParamMap"], [8, 3, 1, "", "getInputCols"], [8, 3, 1, "", "getLazyAnnotator"], [8, 3, 1, "", "getOrDefault"], [8, 3, 1, "", "getOutputCol"], [8, 3, 1, "", "getParam"], [8, 3, 1, "", "getParamValue"], [8, 2, 1, "", "getter_attrs"], [8, 3, 1, "", "hasDefault"], [8, 3, 1, "", "hasParam"], [8, 2, 1, "", "includeChunkToScope"], [8, 2, 1, "", "inputAnnotatorTypes"], [8, 2, 1, "", "inputCols"], [8, 3, 1, "", "inputColsValidation"], [8, 3, 1, "", "isDefined"], [8, 3, 1, "", "isSet"], [8, 2, 1, "", "lazyAnnotator"], [8, 3, 1, "", "load"], [8, 2, 1, "", "name"], [8, 2, 1, "", "optionalInputAnnotatorTypes"], [8, 2, 1, "", "outputAnnotatorType"], [8, 2, 1, "", "outputCol"], [8, 2, 1, "", "prefixAndSuffixMatch"], [8, 3, 1, "", "pretrained"], [8, 3, 1, "", "read"], [8, 3, 1, "", "save"], [8, 2, 1, "", "scopeWindow"], [8, 2, 1, "", "scopeWindowDelimiters"], [8, 3, 1, "", "set"], [8, 3, 1, "", "setAssertion"], [8, 3, 1, "", "setCaseSensitive"], [8, 3, 1, "", "setConfidenceCalculationDirection"], [8, 3, 1, "", "setDoExceptionHandling"], [8, 3, 1, "", "setExceptionKeywords"], [8, 3, 1, "", "setExceptionRegexPatterns"], [8, 3, 1, "", "setForceInputTypeValidation"], [8, 3, 1, "", "setIncludeChunkToScope"], [8, 3, 1, "", "setInputCols"], [8, 3, 1, "", "setLazyAnnotator"], [8, 3, 1, "", "setOutputCol"], [8, 3, 1, "", "setParamValue"], [8, 3, 1, "", "setParams"], [8, 3, 1, "", "setPrefixAndSuffixMatch"], [8, 3, 1, "", "setPrefixKeywords"], [8, 3, 1, "", "setPrefixRegexPatterns"], [8, 3, 1, "", "setScopeWindow"], [8, 3, 1, "", "setScopeWindowDelimiters"], [8, 3, 1, "", "setSuffixKeywords"], [8, 3, 1, "", "setSuffixRegexPatterns"], [8, 2, 1, "", "skipLPInputColsValidation"], [8, 3, 1, "", "transform"], [8, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[9, 1, 1, "", "FewShotAssertionSentenceConverter"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter": [[9, 3, 1, "", "clear"], [9, 3, 1, "", "copy"], [9, 3, 1, "", "explainParam"], [9, 3, 1, "", "explainParams"], [9, 3, 1, "", "extractParamMap"], [9, 3, 1, "", "getOrDefault"], [9, 3, 1, "", "getParam"], [9, 3, 1, "", "getParamValue"], [9, 2, 1, "", "getter_attrs"], [9, 3, 1, "", "hasDefault"], [9, 3, 1, "", "hasParam"], [9, 2, 1, "", "inputAnnotatorTypes"], [9, 2, 1, "", "inputCols"], [9, 3, 1, "", "isDefined"], [9, 3, 1, "", "isSet"], [9, 3, 1, "", "load"], [9, 2, 1, "", "name"], [9, 2, 1, "", "outputAnnotatorType"], [9, 2, 1, "", "outputCol"], [9, 3, 1, "", "read"], [9, 3, 1, "", "save"], [9, 2, 1, "", "scopeWindow"], [9, 3, 1, "", "set"], [9, 3, 1, "", "setParamValue"], [9, 3, 1, "", "setParams"], [9, 3, 1, "", "setScopeWindow"], [9, 3, 1, "", "transform"], [9, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunk2_token": [[11, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[11, 3, 1, "", "clear"], [11, 3, 1, "", "copy"], [11, 3, 1, "", "explainParam"], [11, 3, 1, "", "explainParams"], [11, 3, 1, "", "extractParamMap"], [11, 3, 1, "", "getInputCols"], [11, 3, 1, "", "getLazyAnnotator"], [11, 3, 1, "", "getOrDefault"], [11, 3, 1, "", "getOutputCol"], [11, 3, 1, "", "getParam"], [11, 3, 1, "", "getParamValue"], [11, 2, 1, "", "getter_attrs"], [11, 3, 1, "", "hasDefault"], [11, 3, 1, "", "hasParam"], [11, 2, 1, "", "inputAnnotatorTypes"], [11, 2, 1, "", "inputCols"], [11, 3, 1, "", "inputColsValidation"], [11, 3, 1, "", "isDefined"], [11, 3, 1, "", "isSet"], [11, 2, 1, "", "lazyAnnotator"], [11, 3, 1, "", "load"], [11, 2, 1, "", "name"], [11, 2, 1, "", "optionalInputAnnotatorTypes"], [11, 2, 1, "", "outputAnnotatorType"], [11, 2, 1, "", "outputCol"], [11, 3, 1, "", "read"], [11, 3, 1, "", "save"], [11, 3, 1, "", "set"], [11, 3, 1, "", "setForceInputTypeValidation"], [11, 3, 1, "", "setInputCols"], [11, 3, 1, "", "setLazyAnnotator"], [11, 3, 1, "", "setOutputCol"], [11, 3, 1, "", "setParamValue"], [11, 3, 1, "", "setParams"], [11, 2, 1, "", "skipLPInputColsValidation"], [11, 3, 1, "", "transform"], [11, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker": [[12, 0, 0, "-", "assertion_filterer"], [13, 0, 0, "-", "chunk_converter"], [14, 0, 0, "-", "chunk_key_phrase_extraction"], [15, 0, 0, "-", "chunk_sentence_splitter"], [16, 0, 0, "-", "chunker_filterer"], [17, 0, 0, "-", "chunkmapper"], [18, 0, 0, "-", "chunkmapper_filterer"], [19, 0, 0, "-", "docmapper"], [21, 0, 0, "-", "mapper2_chunk"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[12, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[12, 2, 1, "", "blackList"], [12, 2, 1, "", "caseSensitive"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "copy"], [12, 2, 1, "", "criteria"], [12, 2, 1, "", "doExceptionHandling"], [12, 3, 1, "", "explainParam"], [12, 3, 1, "", "explainParams"], [12, 3, 1, "", "extractParamMap"], [12, 2, 1, "", "filterValue"], [12, 3, 1, "", "getInputCols"], [12, 3, 1, "", "getLazyAnnotator"], [12, 3, 1, "", "getOrDefault"], [12, 3, 1, "", "getOutputCol"], [12, 3, 1, "", "getParam"], [12, 3, 1, "", "getParamValue"], [12, 2, 1, "", "getter_attrs"], [12, 3, 1, "", "hasDefault"], [12, 3, 1, "", "hasParam"], [12, 2, 1, "", "inputAnnotatorTypes"], [12, 2, 1, "", "inputCols"], [12, 3, 1, "", "inputColsValidation"], [12, 3, 1, "", "isDefined"], [12, 3, 1, "", "isSet"], [12, 2, 1, "", "lazyAnnotator"], [12, 3, 1, "", "load"], [12, 2, 1, "", "name"], [12, 2, 1, "", "optionalInputAnnotatorTypes"], [12, 2, 1, "", "outputAnnotatorType"], [12, 2, 1, "", "outputCol"], [12, 3, 1, "", "read"], [12, 2, 1, "", "regex"], [12, 3, 1, "", "save"], [12, 3, 1, "", "set"], [12, 3, 1, "", "setBlackList"], [12, 3, 1, "", "setCaseSensitive"], [12, 3, 1, "", "setCriteria"], [12, 3, 1, "", "setDenyList"], [12, 3, 1, "", "setDoExceptionHandling"], [12, 3, 1, "", "setFilterValue"], [12, 3, 1, "", "setForceInputTypeValidation"], [12, 3, 1, "", "setInputCols"], [12, 3, 1, "", "setLazyAnnotator"], [12, 3, 1, "", "setOutputCol"], [12, 3, 1, "", "setParamValue"], [12, 3, 1, "", "setParams"], [12, 3, 1, "", "setRegex"], [12, 3, 1, "", "setWhiteList"], [12, 2, 1, "", "skipLPInputColsValidation"], [12, 3, 1, "", "transform"], [12, 2, 1, "", "whiteList"], [12, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[13, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[13, 3, 1, "", "clear"], [13, 3, 1, "", "copy"], [13, 3, 1, "", "explainParam"], [13, 3, 1, "", "explainParams"], [13, 3, 1, "", "extractParamMap"], [13, 3, 1, "", "getInputCols"], [13, 3, 1, "", "getLazyAnnotator"], [13, 3, 1, "", "getOrDefault"], [13, 3, 1, "", "getOutputCol"], [13, 3, 1, "", "getParam"], [13, 3, 1, "", "getParamValue"], [13, 2, 1, "", "getter_attrs"], [13, 3, 1, "", "hasDefault"], [13, 3, 1, "", "hasParam"], [13, 2, 1, "", "inputAnnotatorTypes"], [13, 2, 1, "", "inputCols"], [13, 3, 1, "", "inputColsValidation"], [13, 3, 1, "", "isDefined"], [13, 3, 1, "", "isSet"], [13, 2, 1, "", "lazyAnnotator"], [13, 3, 1, "", "load"], [13, 2, 1, "", "name"], [13, 2, 1, "", "optionalInputAnnotatorTypes"], [13, 2, 1, "", "outputAnnotatorType"], [13, 2, 1, "", "outputCol"], [13, 3, 1, "", "read"], [13, 3, 1, "", "save"], [13, 3, 1, "", "set"], [13, 3, 1, "", "setForceInputTypeValidation"], [13, 3, 1, "", "setInputCols"], [13, 3, 1, "", "setLazyAnnotator"], [13, 3, 1, "", "setOutputCol"], [13, 3, 1, "", "setParamValue"], [13, 3, 1, "", "setParams"], [13, 2, 1, "", "skipLPInputColsValidation"], [13, 3, 1, "", "transform"], [13, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[14, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[14, 2, 1, "", "batchSize"], [14, 2, 1, "", "caseSensitive"], [14, 3, 1, "", "clear"], [14, 2, 1, "", "concatenateSentences"], [14, 2, 1, "", "configProtoBytes"], [14, 3, 1, "", "copy"], [14, 2, 1, "", "dimension"], [14, 2, 1, "", "divergence"], [14, 2, 1, "", "documentLevelProcessing"], [14, 2, 1, "", "dropPunctuation"], [14, 2, 1, "", "engine"], [14, 3, 1, "", "explainParam"], [14, 3, 1, "", "explainParams"], [14, 3, 1, "", "extractParamMap"], [14, 3, 1, "", "getBatchSize"], [14, 3, 1, "", "getCaseSensitive"], [14, 3, 1, "", "getDimension"], [14, 3, 1, "", "getEngine"], [14, 3, 1, "", "getInputCols"], [14, 3, 1, "", "getLazyAnnotator"], [14, 3, 1, "", "getMaxSentenceLength"], [14, 3, 1, "", "getOrDefault"], [14, 3, 1, "", "getOutputCol"], [14, 3, 1, "", "getParam"], [14, 3, 1, "", "getParamValue"], [14, 3, 1, "", "getStorageRef"], [14, 2, 1, "", "getter_attrs"], [14, 3, 1, "", "hasDefault"], [14, 3, 1, "", "hasParam"], [14, 2, 1, "", "inputAnnotatorTypes"], [14, 2, 1, "", "inputCols"], [14, 3, 1, "", "inputColsValidation"], [14, 3, 1, "", "isDefined"], [14, 2, 1, "", "isLong"], [14, 3, 1, "", "isSet"], [14, 2, 1, "", "lazyAnnotator"], [14, 3, 1, "", "load"], [14, 3, 1, "", "loadSavedModel"], [14, 2, 1, "", "maxSentenceLength"], [14, 2, 1, "", "max_length_limit"], [14, 2, 1, "", "name"], [14, 2, 1, "", "optionalInputAnnotatorTypes"], [14, 2, 1, "", "outputAnnotatorType"], [14, 2, 1, "", "outputCol"], [14, 3, 1, "", "pretrained"], [14, 3, 1, "", "read"], [14, 3, 1, "", "save"], [14, 2, 1, "", "selectMostDifferent"], [14, 3, 1, "", "set"], [14, 3, 1, "", "setBatchSize"], [14, 3, 1, "", "setCaseSensitive"], [14, 3, 1, "", "setConcatenateSentences"], [14, 3, 1, "", "setConfigProtoBytes"], [14, 3, 1, "", "setDimension"], [14, 3, 1, "", "setDivergence"], [14, 3, 1, "", "setDocumentLevelProcessing"], [14, 3, 1, "", "setDropPunctuation"], [14, 3, 1, "", "setInputCols"], [14, 3, 1, "", "setIsLong"], [14, 3, 1, "", "setLazyAnnotator"], [14, 3, 1, "", "setMaxSentenceLength"], [14, 3, 1, "", "setOutputCol"], [14, 3, 1, "", "setParamValue"], [14, 3, 1, "", "setParams"], [14, 3, 1, "", "setSelectMostDifferent"], [14, 3, 1, "", "setStorageRef"], [14, 3, 1, "", "setTopN"], [14, 2, 1, "", "storageRef"], [14, 2, 1, "", "topN"], [14, 3, 1, "", "transform"], [14, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[15, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[15, 3, 1, "", "clear"], [15, 3, 1, "", "copy"], [15, 2, 1, "", "defaultEntity"], [15, 3, 1, "", "explainParam"], [15, 3, 1, "", "explainParams"], [15, 3, 1, "", "extractParamMap"], [15, 3, 1, "", "getInputCols"], [15, 3, 1, "", "getLazyAnnotator"], [15, 3, 1, "", "getOrDefault"], [15, 3, 1, "", "getOutputCol"], [15, 3, 1, "", "getParam"], [15, 3, 1, "", "getParamValue"], [15, 2, 1, "", "getter_attrs"], [15, 2, 1, "", "groupBySentences"], [15, 3, 1, "", "hasDefault"], [15, 3, 1, "", "hasParam"], [15, 2, 1, "", "inputAnnotatorTypes"], [15, 2, 1, "", "inputCols"], [15, 3, 1, "", "inputColsValidation"], [15, 2, 1, "", "insertChunk"], [15, 3, 1, "", "isDefined"], [15, 3, 1, "", "isSet"], [15, 2, 1, "", "lazyAnnotator"], [15, 3, 1, "", "load"], [15, 2, 1, "", "name"], [15, 2, 1, "", "optionalInputAnnotatorTypes"], [15, 2, 1, "", "outputAnnotatorType"], [15, 2, 1, "", "outputCol"], [15, 3, 1, "", "read"], [15, 3, 1, "", "save"], [15, 3, 1, "", "set"], [15, 3, 1, "", "setDefaultEntity"], [15, 3, 1, "", "setForceInputTypeValidation"], [15, 3, 1, "", "setGroupBySentences"], [15, 3, 1, "", "setInputCols"], [15, 3, 1, "", "setInsertChunk"], [15, 3, 1, "", "setLazyAnnotator"], [15, 3, 1, "", "setOutputCol"], [15, 3, 1, "", "setParamValue"], [15, 3, 1, "", "setParams"], [15, 2, 1, "", "skipLPInputColsValidation"], [15, 3, 1, "", "transform"], [15, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[16, 1, 1, "", "ChunkFilterer"], [16, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[16, 2, 1, "", "blackList"], [16, 2, 1, "", "caseSensitive"], [16, 3, 1, "", "clear"], [16, 3, 1, "", "copy"], [16, 2, 1, "", "criteria"], [16, 2, 1, "", "doExceptionHandling"], [16, 2, 1, "", "entitiesConfidence"], [16, 3, 1, "", "explainParam"], [16, 3, 1, "", "explainParams"], [16, 3, 1, "", "extractParamMap"], [16, 2, 1, "", "filterValue"], [16, 3, 1, "", "getInputCols"], [16, 3, 1, "", "getLazyAnnotator"], [16, 3, 1, "", "getOrDefault"], [16, 3, 1, "", "getOutputCol"], [16, 3, 1, "", "getParam"], [16, 3, 1, "", "getParamValue"], [16, 2, 1, "", "getter_attrs"], [16, 3, 1, "", "hasDefault"], [16, 3, 1, "", "hasParam"], [16, 2, 1, "", "inputAnnotatorTypes"], [16, 2, 1, "", "inputCols"], [16, 3, 1, "", "inputColsValidation"], [16, 3, 1, "", "isDefined"], [16, 3, 1, "", "isSet"], [16, 2, 1, "", "lazyAnnotator"], [16, 3, 1, "", "load"], [16, 2, 1, "", "name"], [16, 2, 1, "", "optionalInputAnnotatorTypes"], [16, 2, 1, "", "outputAnnotatorType"], [16, 2, 1, "", "outputCol"], [16, 3, 1, "", "read"], [16, 2, 1, "", "regex"], [16, 3, 1, "", "save"], [16, 3, 1, "", "set"], [16, 3, 1, "", "setBlackList"], [16, 3, 1, "", "setCaseSensitive"], [16, 3, 1, "", "setCriteria"], [16, 3, 1, "", "setDenyList"], [16, 3, 1, "", "setDoExceptionHandling"], [16, 3, 1, "", "setEntitiesConfidence"], [16, 3, 1, "", "setFilterEntity"], [16, 3, 1, "", "setFilterValue"], [16, 3, 1, "", "setForceInputTypeValidation"], [16, 3, 1, "", "setInputCols"], [16, 3, 1, "", "setLazyAnnotator"], [16, 3, 1, "", "setOutputCol"], [16, 3, 1, "", "setParamValue"], [16, 3, 1, "", "setParams"], [16, 3, 1, "", "setRegex"], [16, 3, 1, "", "setWhiteList"], [16, 2, 1, "", "skipLPInputColsValidation"], [16, 3, 1, "", "transform"], [16, 2, 1, "", "whiteList"], [16, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[16, 2, 1, "", "blackList"], [16, 2, 1, "", "caseSensitive"], [16, 3, 1, "", "clear"], [16, 3, 1, "", "copy"], [16, 2, 1, "", "criteria"], [16, 2, 1, "", "doExceptionHandling"], [16, 2, 1, "", "entitiesConfidenceResource"], [16, 2, 1, "", "entitiesConfidenceResourceAsJsonString"], [16, 3, 1, "", "explainParam"], [16, 3, 1, "", "explainParams"], [16, 3, 1, "", "extractParamMap"], [16, 2, 1, "", "filterValue"], [16, 3, 1, "", "fit"], [16, 3, 1, "", "fitMultiple"], [16, 3, 1, "", "getInputCols"], [16, 3, 1, "", "getLazyAnnotator"], [16, 3, 1, "", "getOrDefault"], [16, 3, 1, "", "getOutputCol"], [16, 3, 1, "", "getParam"], [16, 3, 1, "", "getParamValue"], [16, 2, 1, "", "getter_attrs"], [16, 3, 1, "", "hasDefault"], [16, 3, 1, "", "hasParam"], [16, 2, 1, "", "inputAnnotatorTypes"], [16, 2, 1, "", "inputCols"], [16, 3, 1, "", "inputColsValidation"], [16, 3, 1, "", "isDefined"], [16, 3, 1, "", "isSet"], [16, 2, 1, "", "lazyAnnotator"], [16, 3, 1, "", "load"], [16, 2, 1, "", "name"], [16, 2, 1, "", "optionalInputAnnotatorTypes"], [16, 2, 1, "", "outputAnnotatorType"], [16, 2, 1, "", "outputCol"], [16, 3, 1, "", "read"], [16, 2, 1, "", "regex"], [16, 3, 1, "", "save"], [16, 3, 1, "", "set"], [16, 3, 1, "", "setBlackList"], [16, 3, 1, "", "setCaseSensitive"], [16, 3, 1, "", "setCriteria"], [16, 3, 1, "", "setDenyList"], [16, 3, 1, "", "setDoExceptionHandling"], [16, 3, 1, "", "setEntitiesConfidenceResource"], [16, 3, 1, "", "setEntitiesConfidenceResourceAsJsonString"], [16, 3, 1, "", "setFilterEntity"], [16, 3, 1, "", "setFilterValue"], [16, 3, 1, "", "setForceInputTypeValidation"], [16, 3, 1, "", "setInputCols"], [16, 3, 1, "", "setLazyAnnotator"], [16, 3, 1, "", "setOutputCol"], [16, 3, 1, "", "setParamValue"], [16, 3, 1, "", "setRegex"], [16, 3, 1, "", "setWhiteList"], [16, 2, 1, "", "skipLPInputColsValidation"], [16, 2, 1, "", "whiteList"], [16, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[17, 1, 1, "", "ChunkMapperApproach"], [17, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [17, 1, 1, "", "ChunkMapperModel"], [17, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[17, 2, 1, "", "allowMultiTokenChunk"], [17, 3, 1, "", "clear"], [17, 3, 1, "", "copy"], [17, 2, 1, "", "dictionary"], [17, 2, 1, "", "doExceptionHandling"], [17, 2, 1, "", "enableCharFingerprintMatching"], [17, 2, 1, "", "enableFuzzyMatching"], [17, 2, 1, "", "enableTokenFingerprintMatching"], [17, 3, 1, "", "explainParam"], [17, 3, 1, "", "explainParams"], [17, 3, 1, "", "extractParamMap"], [17, 3, 1, "", "fit"], [17, 3, 1, "", "fitMultiple"], [17, 2, 1, "", "fuzzyDistanceScalingMode"], [17, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [17, 2, 1, "", "fuzzyMatchingDistances"], [17, 3, 1, "", "getInputCols"], [17, 3, 1, "", "getLazyAnnotator"], [17, 3, 1, "", "getOrDefault"], [17, 3, 1, "", "getOutputCol"], [17, 3, 1, "", "getParam"], [17, 3, 1, "", "getParamValue"], [17, 2, 1, "", "getter_attrs"], [17, 3, 1, "", "hasDefault"], [17, 3, 1, "", "hasParam"], [17, 2, 1, "", "inputAnnotatorTypes"], [17, 2, 1, "", "inputCols"], [17, 3, 1, "", "inputColsValidation"], [17, 3, 1, "", "isDefined"], [17, 3, 1, "", "isSet"], [17, 2, 1, "", "lazyAnnotator"], [17, 3, 1, "", "load"], [17, 2, 1, "", "lowerCase"], [17, 2, 1, "", "maxCharNgramFingerprint"], [17, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [17, 2, 1, "", "maxTokenNgramDroppingOperator"], [17, 2, 1, "", "maxTokenNgramDroppingTokens"], [17, 2, 1, "", "maxTokenNgramFingerprint"], [17, 2, 1, "", "minCharNgramFingerprint"], [17, 2, 1, "", "minTokenNgramFingerprint"], [17, 2, 1, "", "multivaluesRelations"], [17, 2, 1, "", "name"], [17, 2, 1, "", "optionalInputAnnotatorTypes"], [17, 2, 1, "", "outputAnnotatorType"], [17, 2, 1, "", "outputCol"], [17, 3, 1, "", "read"], [17, 2, 1, "", "rel"], [17, 2, 1, "", "rels"], [17, 3, 1, "", "save"], [17, 3, 1, "", "set"], [17, 3, 1, "", "setAllowMultiTokenChunk"], [17, 3, 1, "", "setDictionary"], [17, 3, 1, "", "setDoExceptionHandling"], [17, 3, 1, "", "setEnableCharFingerprintMatching"], [17, 3, 1, "", "setEnableFuzzyMatching"], [17, 3, 1, "", "setEnableTokenFingerprintMatching"], [17, 3, 1, "", "setForceInputTypeValidation"], [17, 3, 1, "", "setFuzzyDistanceScalingMode"], [17, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [17, 3, 1, "", "setFuzzyMatchingDistances"], [17, 3, 1, "", "setInputCols"], [17, 3, 1, "", "setLazyAnnotator"], [17, 3, 1, "", "setLowerCase"], [17, 3, 1, "", "setMaxCharNgramFingerprint"], [17, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [17, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [17, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [17, 3, 1, "", "setMaxTokenNgramFingerprint"], [17, 3, 1, "", "setMinCharNgramFingerprint"], [17, 3, 1, "", "setMinTokenNgramFingerprint"], [17, 3, 1, "", "setMultivaluesRelations"], [17, 3, 1, "", "setOutputCol"], [17, 3, 1, "", "setParamValue"], [17, 3, 1, "", "setRel"], [17, 3, 1, "", "setRels"], [17, 2, 1, "", "skipLPInputColsValidation"], [17, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[17, 2, 1, "", "enableCharFingerprintMatching"], [17, 2, 1, "", "enableFuzzyMatching"], [17, 2, 1, "", "enableTokenFingerprintMatching"], [17, 2, 1, "", "fuzzyDistanceScalingMode"], [17, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [17, 2, 1, "", "fuzzyMatchingDistances"], [17, 2, 1, "", "maxCharNgramFingerprint"], [17, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [17, 2, 1, "", "maxTokenNgramDroppingOperator"], [17, 2, 1, "", "maxTokenNgramDroppingTokens"], [17, 2, 1, "", "maxTokenNgramFingerprint"], [17, 2, 1, "", "minCharNgramFingerprint"], [17, 2, 1, "", "minTokenNgramFingerprint"], [17, 3, 1, "", "setEnableCharFingerprintMatching"], [17, 3, 1, "", "setEnableFuzzyMatching"], [17, 3, 1, "", "setEnableTokenFingerprintMatching"], [17, 3, 1, "", "setFuzzyDistanceScalingMode"], [17, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [17, 3, 1, "", "setFuzzyMatchingDistances"], [17, 3, 1, "", "setMaxCharNgramFingerprint"], [17, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [17, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [17, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [17, 3, 1, "", "setMaxTokenNgramFingerprint"], [17, 3, 1, "", "setMinCharNgramFingerprint"], [17, 3, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[17, 2, 1, "", "allowMultiTokenChunk"], [17, 3, 1, "", "clear"], [17, 3, 1, "", "copy"], [17, 2, 1, "", "doExceptionHandling"], [17, 2, 1, "", "enableCharFingerprintMatching"], [17, 2, 1, "", "enableFuzzyMatching"], [17, 2, 1, "", "enableTokenFingerprintMatching"], [17, 3, 1, "", "explainParam"], [17, 3, 1, "", "explainParams"], [17, 3, 1, "", "extractParamMap"], [17, 2, 1, "", "fuzzyDistanceScalingMode"], [17, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [17, 2, 1, "", "fuzzyMatchingDistances"], [17, 3, 1, "", "getInputCols"], [17, 3, 1, "", "getLazyAnnotator"], [17, 3, 1, "", "getOrDefault"], [17, 3, 1, "", "getOutputCol"], [17, 3, 1, "", "getParam"], [17, 3, 1, "", "getParamValue"], [17, 2, 1, "", "getter_attrs"], [17, 3, 1, "", "hasDefault"], [17, 3, 1, "", "hasParam"], [17, 2, 1, "", "inputAnnotatorTypes"], [17, 2, 1, "", "inputCols"], [17, 3, 1, "", "inputColsValidation"], [17, 3, 1, "", "isDefined"], [17, 3, 1, "", "isSet"], [17, 2, 1, "", "lazyAnnotator"], [17, 3, 1, "", "load"], [17, 2, 1, "", "lowerCase"], [17, 2, 1, "", "maxCharNgramFingerprint"], [17, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [17, 2, 1, "", "maxTokenNgramDroppingOperator"], [17, 2, 1, "", "maxTokenNgramDroppingTokens"], [17, 2, 1, "", "maxTokenNgramFingerprint"], [17, 2, 1, "", "minCharNgramFingerprint"], [17, 2, 1, "", "minTokenNgramFingerprint"], [17, 2, 1, "", "multivaluesRelations"], [17, 2, 1, "", "name"], [17, 2, 1, "", "optionalInputAnnotatorTypes"], [17, 2, 1, "", "outputAnnotatorType"], [17, 2, 1, "", "outputCol"], [17, 3, 1, "", "pretrained"], [17, 3, 1, "", "read"], [17, 2, 1, "", "rel"], [17, 2, 1, "", "rels"], [17, 3, 1, "", "save"], [17, 3, 1, "", "set"], [17, 3, 1, "", "setAllowMultiTokenChunk"], [17, 3, 1, "", "setDoExceptionHandling"], [17, 3, 1, "", "setEnableCharFingerprintMatching"], [17, 3, 1, "", "setEnableFuzzyMatching"], [17, 3, 1, "", "setEnableTokenFingerprintMatching"], [17, 3, 1, "", "setForceInputTypeValidation"], [17, 3, 1, "", "setFuzzyDistanceScalingMode"], [17, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [17, 3, 1, "", "setFuzzyMatchingDistances"], [17, 3, 1, "", "setInputCols"], [17, 3, 1, "", "setLazyAnnotator"], [17, 3, 1, "", "setLowerCase"], [17, 3, 1, "", "setMaxCharNgramFingerprint"], [17, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [17, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [17, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [17, 3, 1, "", "setMaxTokenNgramFingerprint"], [17, 3, 1, "", "setMinCharNgramFingerprint"], [17, 3, 1, "", "setMinTokenNgramFingerprint"], [17, 3, 1, "", "setMultivaluesRelations"], [17, 3, 1, "", "setOutputCol"], [17, 3, 1, "", "setParamValue"], [17, 3, 1, "", "setParams"], [17, 3, 1, "", "setRel"], [17, 3, 1, "", "setRels"], [17, 2, 1, "", "skipLPInputColsValidation"], [17, 3, 1, "", "transform"], [17, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[17, 2, 1, "", "allowMultiTokenChunk"], [17, 2, 1, "", "doExceptionHandling"], [17, 2, 1, "", "lowerCase"], [17, 2, 1, "", "multivaluesRelations"], [17, 2, 1, "", "rel"], [17, 2, 1, "", "rels"], [17, 3, 1, "", "setAllowMultiTokenChunk"], [17, 3, 1, "", "setDoExceptionHandling"], [17, 3, 1, "", "setLowerCase"], [17, 3, 1, "", "setMultivaluesRelations"], [17, 3, 1, "", "setRel"], [17, 3, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[18, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[18, 3, 1, "", "clear"], [18, 3, 1, "", "copy"], [18, 3, 1, "", "explainParam"], [18, 3, 1, "", "explainParams"], [18, 3, 1, "", "extractParamMap"], [18, 3, 1, "", "getInputCols"], [18, 3, 1, "", "getLazyAnnotator"], [18, 3, 1, "", "getOrDefault"], [18, 3, 1, "", "getOutputCol"], [18, 3, 1, "", "getParam"], [18, 3, 1, "", "getParamValue"], [18, 2, 1, "", "getter_attrs"], [18, 3, 1, "", "hasDefault"], [18, 3, 1, "", "hasParam"], [18, 2, 1, "", "inputAnnotatorTypes"], [18, 2, 1, "", "inputCols"], [18, 3, 1, "", "inputColsValidation"], [18, 3, 1, "", "isDefined"], [18, 3, 1, "", "isSet"], [18, 2, 1, "", "lazyAnnotator"], [18, 3, 1, "", "load"], [18, 2, 1, "", "name"], [18, 2, 1, "", "optionalInputAnnotatorTypes"], [18, 2, 1, "", "outputAnnotatorType"], [18, 2, 1, "", "outputCol"], [18, 3, 1, "", "read"], [18, 2, 1, "", "returnCriteria"], [18, 3, 1, "", "save"], [18, 3, 1, "", "set"], [18, 3, 1, "", "setForceInputTypeValidation"], [18, 3, 1, "", "setInputCols"], [18, 3, 1, "", "setLazyAnnotator"], [18, 3, 1, "", "setOutputCol"], [18, 3, 1, "", "setParamValue"], [18, 3, 1, "", "setParams"], [18, 3, 1, "", "setReturnCriteria"], [18, 2, 1, "", "skipLPInputColsValidation"], [18, 3, 1, "", "transform"], [18, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.docmapper": [[19, 1, 1, "", "DocMapperApproach"], [19, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[19, 2, 1, "", "allowMultiTokenChunk"], [19, 3, 1, "", "clear"], [19, 3, 1, "", "copy"], [19, 2, 1, "", "dictionary"], [19, 2, 1, "", "doExceptionHandling"], [19, 2, 1, "", "enableCharFingerprintMatching"], [19, 2, 1, "", "enableFuzzyMatching"], [19, 2, 1, "", "enableTokenFingerprintMatching"], [19, 3, 1, "", "explainParam"], [19, 3, 1, "", "explainParams"], [19, 3, 1, "", "extractParamMap"], [19, 3, 1, "", "fit"], [19, 3, 1, "", "fitMultiple"], [19, 2, 1, "", "fuzzyDistanceScalingMode"], [19, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [19, 2, 1, "", "fuzzyMatchingDistances"], [19, 3, 1, "", "getInputCols"], [19, 3, 1, "", "getLazyAnnotator"], [19, 3, 1, "", "getOrDefault"], [19, 3, 1, "", "getOutputCol"], [19, 3, 1, "", "getParam"], [19, 3, 1, "", "getParamValue"], [19, 2, 1, "", "getter_attrs"], [19, 3, 1, "", "hasDefault"], [19, 3, 1, "", "hasParam"], [19, 2, 1, "", "inputAnnotatorTypes"], [19, 2, 1, "", "inputCols"], [19, 3, 1, "", "inputColsValidation"], [19, 3, 1, "", "isDefined"], [19, 3, 1, "", "isSet"], [19, 2, 1, "", "lazyAnnotator"], [19, 3, 1, "", "load"], [19, 2, 1, "", "lowerCase"], [19, 2, 1, "", "maxCharNgramFingerprint"], [19, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [19, 2, 1, "", "maxTokenNgramDroppingOperator"], [19, 2, 1, "", "maxTokenNgramDroppingTokens"], [19, 2, 1, "", "maxTokenNgramFingerprint"], [19, 2, 1, "", "minCharNgramFingerprint"], [19, 2, 1, "", "minTokenNgramFingerprint"], [19, 2, 1, "", "multivaluesRelations"], [19, 2, 1, "", "name"], [19, 2, 1, "", "optionalInputAnnotatorTypes"], [19, 2, 1, "", "outputAnnotatorType"], [19, 2, 1, "", "outputCol"], [19, 3, 1, "", "read"], [19, 2, 1, "", "rel"], [19, 2, 1, "", "rels"], [19, 3, 1, "", "save"], [19, 3, 1, "", "set"], [19, 3, 1, "", "setAllowMultiTokenChunk"], [19, 3, 1, "", "setDictionary"], [19, 3, 1, "", "setDoExceptionHandling"], [19, 3, 1, "", "setEnableCharFingerprintMatching"], [19, 3, 1, "", "setEnableFuzzyMatching"], [19, 3, 1, "", "setEnableTokenFingerprintMatching"], [19, 3, 1, "", "setForceInputTypeValidation"], [19, 3, 1, "", "setFuzzyDistanceScalingMode"], [19, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [19, 3, 1, "", "setFuzzyMatchingDistances"], [19, 3, 1, "", "setInputCols"], [19, 3, 1, "", "setLazyAnnotator"], [19, 3, 1, "", "setLowerCase"], [19, 3, 1, "", "setMaxCharNgramFingerprint"], [19, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [19, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [19, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [19, 3, 1, "", "setMaxTokenNgramFingerprint"], [19, 3, 1, "", "setMinCharNgramFingerprint"], [19, 3, 1, "", "setMinTokenNgramFingerprint"], [19, 3, 1, "", "setMultivaluesRelations"], [19, 3, 1, "", "setOutputCol"], [19, 3, 1, "", "setParamValue"], [19, 3, 1, "", "setRel"], [19, 3, 1, "", "setRels"], [19, 2, 1, "", "skipLPInputColsValidation"], [19, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[19, 2, 1, "", "allowMultiTokenChunk"], [19, 3, 1, "", "clear"], [19, 3, 1, "", "copy"], [19, 2, 1, "", "doExceptionHandling"], [19, 2, 1, "", "enableCharFingerprintMatching"], [19, 2, 1, "", "enableFuzzyMatching"], [19, 2, 1, "", "enableTokenFingerprintMatching"], [19, 3, 1, "", "explainParam"], [19, 3, 1, "", "explainParams"], [19, 3, 1, "", "extractParamMap"], [19, 2, 1, "", "fuzzyDistanceScalingMode"], [19, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [19, 2, 1, "", "fuzzyMatchingDistances"], [19, 3, 1, "", "getInputCols"], [19, 3, 1, "", "getLazyAnnotator"], [19, 3, 1, "", "getOrDefault"], [19, 3, 1, "", "getOutputCol"], [19, 3, 1, "", "getParam"], [19, 3, 1, "", "getParamValue"], [19, 2, 1, "", "getter_attrs"], [19, 3, 1, "", "hasDefault"], [19, 3, 1, "", "hasParam"], [19, 2, 1, "", "inputAnnotatorTypes"], [19, 2, 1, "", "inputCols"], [19, 3, 1, "", "inputColsValidation"], [19, 3, 1, "", "isDefined"], [19, 3, 1, "", "isSet"], [19, 2, 1, "", "lazyAnnotator"], [19, 3, 1, "", "load"], [19, 2, 1, "", "lowerCase"], [19, 2, 1, "", "maxCharNgramFingerprint"], [19, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [19, 2, 1, "", "maxTokenNgramDroppingOperator"], [19, 2, 1, "", "maxTokenNgramDroppingTokens"], [19, 2, 1, "", "maxTokenNgramFingerprint"], [19, 2, 1, "", "minCharNgramFingerprint"], [19, 2, 1, "", "minTokenNgramFingerprint"], [19, 2, 1, "", "multivaluesRelations"], [19, 2, 1, "", "name"], [19, 2, 1, "", "optionalInputAnnotatorTypes"], [19, 2, 1, "", "outputAnnotatorType"], [19, 2, 1, "", "outputCol"], [19, 3, 1, "", "pretrained"], [19, 3, 1, "", "read"], [19, 2, 1, "", "rel"], [19, 2, 1, "", "rels"], [19, 3, 1, "", "save"], [19, 3, 1, "", "set"], [19, 3, 1, "", "setAllowMultiTokenChunk"], [19, 3, 1, "", "setDoExceptionHandling"], [19, 3, 1, "", "setEnableCharFingerprintMatching"], [19, 3, 1, "", "setEnableFuzzyMatching"], [19, 3, 1, "", "setEnableTokenFingerprintMatching"], [19, 3, 1, "", "setForceInputTypeValidation"], [19, 3, 1, "", "setFuzzyDistanceScalingMode"], [19, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [19, 3, 1, "", "setFuzzyMatchingDistances"], [19, 3, 1, "", "setInputCols"], [19, 3, 1, "", "setLazyAnnotator"], [19, 3, 1, "", "setLowerCase"], [19, 3, 1, "", "setMaxCharNgramFingerprint"], [19, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [19, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [19, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [19, 3, 1, "", "setMaxTokenNgramFingerprint"], [19, 3, 1, "", "setMinCharNgramFingerprint"], [19, 3, 1, "", "setMinTokenNgramFingerprint"], [19, 3, 1, "", "setMultivaluesRelations"], [19, 3, 1, "", "setOutputCol"], [19, 3, 1, "", "setParamValue"], [19, 3, 1, "", "setParams"], [19, 3, 1, "", "setRel"], [19, 3, 1, "", "setRels"], [19, 2, 1, "", "skipLPInputColsValidation"], [19, 3, 1, "", "transform"], [19, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[21, 1, 1, "", "Mapper2Chunk"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk": [[21, 3, 1, "", "clear"], [21, 3, 1, "", "copy"], [21, 3, 1, "", "explainParam"], [21, 3, 1, "", "explainParams"], [21, 3, 1, "", "extractParamMap"], [21, 2, 1, "", "filterNoneValues"], [21, 3, 1, "", "getOrDefault"], [21, 3, 1, "", "getParam"], [21, 3, 1, "", "getParamValue"], [21, 2, 1, "", "getter_attrs"], [21, 3, 1, "", "hasDefault"], [21, 3, 1, "", "hasParam"], [21, 2, 1, "", "inputAnnotatorTypes"], [21, 3, 1, "", "isDefined"], [21, 3, 1, "", "isSet"], [21, 3, 1, "", "load"], [21, 2, 1, "", "name"], [21, 2, 1, "", "outputAnnotatorType"], [21, 3, 1, "", "read"], [21, 3, 1, "", "save"], [21, 3, 1, "", "set"], [21, 3, 1, "", "setFilterNoneValues"], [21, 3, 1, "", "setParamValue"], [21, 3, 1, "", "setParams"], [21, 3, 1, "", "transform"], [21, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification": [[22, 0, 0, "-", "document_log_classifier"], [23, 0, 0, "-", "document_ml_classifier"], [24, 0, 0, "-", "few_shot_assertion_classifier"], [25, 0, 0, "-", "few_shot_classifier"], [26, 0, 0, "-", "generic_log_reg_classifier"], [27, 0, 0, "-", "generic_svm_classifier"], [29, 0, 0, "-", "large_few_shot_classifier"], [30, 0, 0, "-", "medical_bert_for_sequence_classification"], [31, 0, 0, "-", "medical_bert_for_token_classifier"], [32, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[22, 1, 1, "", "DocumentLogRegClassifierApproach"], [22, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[22, 2, 1, "", "classificationModelPath"], [22, 3, 1, "", "clear"], [22, 3, 1, "", "copy"], [22, 3, 1, "", "explainParam"], [22, 3, 1, "", "explainParams"], [22, 3, 1, "", "extractParamMap"], [22, 3, 1, "", "fit"], [22, 2, 1, "", "fitIntercept"], [22, 3, 1, "", "fitMultiple"], [22, 3, 1, "", "getInputCols"], [22, 3, 1, "", "getLazyAnnotator"], [22, 3, 1, "", "getOrDefault"], [22, 3, 1, "", "getOutputCol"], [22, 3, 1, "", "getParam"], [22, 3, 1, "", "getParamValue"], [22, 2, 1, "", "getter_attrs"], [22, 3, 1, "", "hasDefault"], [22, 3, 1, "", "hasParam"], [22, 2, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "inputCols"], [22, 3, 1, "", "inputColsValidation"], [22, 3, 1, "", "isDefined"], [22, 3, 1, "", "isSet"], [22, 2, 1, "", "labelCol"], [22, 2, 1, "", "labels"], [22, 2, 1, "", "lazyAnnotator"], [22, 3, 1, "", "load"], [22, 2, 1, "", "maxIter"], [22, 2, 1, "", "optionalInputAnnotatorTypes"], [22, 2, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "outputCol"], [22, 3, 1, "", "read"], [22, 3, 1, "", "save"], [22, 3, 1, "", "set"], [22, 3, 1, "", "setClassificationModelPath"], [22, 3, 1, "", "setFitIntercept"], [22, 3, 1, "", "setForceInputTypeValidation"], [22, 3, 1, "", "setInputCols"], [22, 3, 1, "", "setLabelColumn"], [22, 3, 1, "", "setLabels"], [22, 3, 1, "", "setLazyAnnotator"], [22, 3, 1, "", "setMaxIter"], [22, 3, 1, "", "setOutputCol"], [22, 3, 1, "", "setParamValue"], [22, 3, 1, "", "setTol"], [22, 3, 1, "", "setVectorizationModelPath"], [22, 2, 1, "", "skipLPInputColsValidation"], [22, 2, 1, "", "tol"], [22, 2, 1, "", "vectorizationModelPath"], [22, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[22, 2, 1, "", "classificationModel"], [22, 3, 1, "", "clear"], [22, 3, 1, "", "copy"], [22, 3, 1, "", "explainParam"], [22, 3, 1, "", "explainParams"], [22, 3, 1, "", "extractParamMap"], [22, 3, 1, "", "getInputCols"], [22, 3, 1, "", "getLazyAnnotator"], [22, 3, 1, "", "getOrDefault"], [22, 3, 1, "", "getOutputCol"], [22, 3, 1, "", "getParam"], [22, 3, 1, "", "getParamValue"], [22, 2, 1, "", "getter_attrs"], [22, 3, 1, "", "hasDefault"], [22, 3, 1, "", "hasParam"], [22, 2, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "inputCols"], [22, 3, 1, "", "inputColsValidation"], [22, 3, 1, "", "isDefined"], [22, 3, 1, "", "isSet"], [22, 2, 1, "", "labels"], [22, 2, 1, "", "lazyAnnotator"], [22, 3, 1, "", "load"], [22, 2, 1, "", "mergeChunks"], [22, 2, 1, "", "name"], [22, 2, 1, "", "optionalInputAnnotatorTypes"], [22, 2, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "outputCol"], [22, 3, 1, "", "pretrained"], [22, 3, 1, "", "read"], [22, 3, 1, "", "save"], [22, 3, 1, "", "set"], [22, 3, 1, "", "setClassificationModel"], [22, 3, 1, "", "setForceInputTypeValidation"], [22, 3, 1, "", "setInputCols"], [22, 3, 1, "", "setLabels"], [22, 3, 1, "", "setLazyAnnotator"], [22, 3, 1, "", "setMergeChunks"], [22, 3, 1, "", "setOutputCol"], [22, 3, 1, "", "setParamValue"], [22, 3, 1, "", "setParams"], [22, 3, 1, "", "setVectorizationModel"], [22, 2, 1, "", "skipLPInputColsValidation"], [22, 3, 1, "", "transform"], [22, 2, 1, "", "vectorizationModel"], [22, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[23, 1, 1, "", "DocumentMLClassifierApproach"], [23, 1, 1, "", "DocumentMLClassifierModel"], [23, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[23, 2, 1, "", "classificationModelClass"], [23, 2, 1, "", "classificationModelPath"], [23, 3, 1, "", "clear"], [23, 3, 1, "", "copy"], [23, 3, 1, "", "explainParam"], [23, 3, 1, "", "explainParams"], [23, 3, 1, "", "extractParamMap"], [23, 3, 1, "", "fit"], [23, 2, 1, "", "fitIntercept"], [23, 3, 1, "", "fitMultiple"], [23, 3, 1, "", "getInputCols"], [23, 3, 1, "", "getLazyAnnotator"], [23, 3, 1, "", "getOrDefault"], [23, 3, 1, "", "getOutputCol"], [23, 3, 1, "", "getParam"], [23, 3, 1, "", "getParamValue"], [23, 2, 1, "", "getter_attrs"], [23, 3, 1, "", "hasDefault"], [23, 3, 1, "", "hasParam"], [23, 2, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "inputCols"], [23, 3, 1, "", "inputColsValidation"], [23, 3, 1, "", "isDefined"], [23, 3, 1, "", "isSet"], [23, 2, 1, "", "labelCol"], [23, 2, 1, "", "labels"], [23, 2, 1, "", "lazyAnnotator"], [23, 3, 1, "", "load"], [23, 2, 1, "", "maxIter"], [23, 2, 1, "", "maxTokenNgram"], [23, 2, 1, "", "mergeChunks"], [23, 2, 1, "", "minTokenNgram"], [23, 2, 1, "", "optionalInputAnnotatorTypes"], [23, 2, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "outputCol"], [23, 3, 1, "", "read"], [23, 3, 1, "", "save"], [23, 3, 1, "", "set"], [23, 3, 1, "", "setClassificationModelClass"], [23, 3, 1, "", "setClassificationModelPath"], [23, 3, 1, "", "setFitIntercept"], [23, 3, 1, "", "setForceInputTypeValidation"], [23, 3, 1, "", "setInputCols"], [23, 3, 1, "", "setLabelCol"], [23, 3, 1, "", "setLabels"], [23, 3, 1, "", "setLazyAnnotator"], [23, 3, 1, "", "setMaxIter"], [23, 3, 1, "", "setMaxTokenNgram"], [23, 3, 1, "", "setMergeChunks"], [23, 3, 1, "", "setMinTokenNgram"], [23, 3, 1, "", "setOutputCol"], [23, 3, 1, "", "setParamValue"], [23, 3, 1, "", "setTol"], [23, 3, 1, "", "setVectorizationModelPath"], [23, 2, 1, "", "skipLPInputColsValidation"], [23, 2, 1, "", "tol"], [23, 2, 1, "", "vectorizationModelPath"], [23, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[23, 2, 1, "", "classificationModel"], [23, 3, 1, "", "clear"], [23, 3, 1, "", "copy"], [23, 3, 1, "", "explainParam"], [23, 3, 1, "", "explainParams"], [23, 3, 1, "", "extractParamMap"], [23, 3, 1, "", "getInputCols"], [23, 3, 1, "", "getLazyAnnotator"], [23, 3, 1, "", "getOrDefault"], [23, 3, 1, "", "getOutputCol"], [23, 3, 1, "", "getParam"], [23, 3, 1, "", "getParamValue"], [23, 2, 1, "", "getter_attrs"], [23, 3, 1, "", "hasDefault"], [23, 3, 1, "", "hasParam"], [23, 2, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "inputCols"], [23, 3, 1, "", "inputColsValidation"], [23, 3, 1, "", "isDefined"], [23, 3, 1, "", "isSet"], [23, 2, 1, "", "labels"], [23, 2, 1, "", "lazyAnnotator"], [23, 3, 1, "", "load"], [23, 2, 1, "", "maxTokenNgram"], [23, 2, 1, "", "mergeChunks"], [23, 2, 1, "", "minTokenNgram"], [23, 2, 1, "", "name"], [23, 2, 1, "", "optionalInputAnnotatorTypes"], [23, 2, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "outputCol"], [23, 3, 1, "", "pretrained"], [23, 3, 1, "", "read"], [23, 3, 1, "", "save"], [23, 3, 1, "", "set"], [23, 3, 1, "", "setClassificationModel"], [23, 3, 1, "", "setForceInputTypeValidation"], [23, 3, 1, "", "setInputCols"], [23, 3, 1, "", "setLabels"], [23, 3, 1, "", "setLazyAnnotator"], [23, 3, 1, "", "setMergeChunks"], [23, 3, 1, "", "setOutputCol"], [23, 3, 1, "", "setParamValue"], [23, 3, 1, "", "setParams"], [23, 3, 1, "", "setVectorizationModel"], [23, 2, 1, "", "skipLPInputColsValidation"], [23, 3, 1, "", "transform"], [23, 2, 1, "", "vectorizationModel"], [23, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[23, 2, 1, "", "labels"], [23, 2, 1, "", "maxTokenNgram"], [23, 2, 1, "", "mergeChunks"], [23, 2, 1, "", "minTokenNgram"], [23, 3, 1, "", "setLabels"], [23, 3, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[24, 1, 1, "", "FewShotAssertionClassifierApproach"], [24, 1, 1, "", "FewShotAssertionClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach": [[24, 2, 1, "", "batchSize"], [24, 3, 1, "", "clear"], [24, 3, 1, "", "copy"], [24, 2, 1, "", "datasetInfo"], [24, 2, 1, "", "doExceptionHandling"], [24, 2, 1, "", "dropout"], [24, 2, 1, "", "engine"], [24, 2, 1, "", "epochsN"], [24, 3, 1, "", "explainParam"], [24, 3, 1, "", "explainParams"], [24, 3, 1, "", "extractParamMap"], [24, 2, 1, "", "featureScaling"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "fitMultiple"], [24, 2, 1, "", "fixImbalance"], [24, 3, 1, "", "getEngine"], [24, 3, 1, "", "getInputCols"], [24, 3, 1, "", "getLazyAnnotator"], [24, 3, 1, "", "getOrDefault"], [24, 3, 1, "", "getOutputCol"], [24, 3, 1, "", "getParam"], [24, 3, 1, "", "getParamValue"], [24, 2, 1, "", "getter_attrs"], [24, 3, 1, "", "hasDefault"], [24, 3, 1, "", "hasParam"], [24, 2, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "inputCols"], [24, 3, 1, "", "inputColsValidation"], [24, 3, 1, "", "isDefined"], [24, 3, 1, "", "isSet"], [24, 2, 1, "", "labelColumn"], [24, 2, 1, "", "lazyAnnotator"], [24, 2, 1, "", "learningRate"], [24, 3, 1, "", "load"], [24, 2, 1, "", "modelFile"], [24, 2, 1, "", "multiClass"], [24, 2, 1, "", "name"], [24, 2, 1, "", "optionalInputAnnotatorTypes"], [24, 2, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "outputCol"], [24, 2, 1, "", "outputLogsPath"], [24, 3, 1, "", "read"], [24, 3, 1, "", "save"], [24, 3, 1, "", "set"], [24, 3, 1, "", "setBatchSize"], [24, 3, 1, "", "setDatasetInfo"], [24, 3, 1, "", "setDoExceptionHandling"], [24, 3, 1, "", "setDropout"], [24, 3, 1, "", "setEpochsNumber"], [24, 3, 1, "", "setFeatureScaling"], [24, 3, 1, "", "setFixImbalance"], [24, 3, 1, "", "setForceInputTypeValidation"], [24, 3, 1, "", "setInputCols"], [24, 3, 1, "", "setLabelCol"], [24, 3, 1, "", "setLazyAnnotator"], [24, 3, 1, "", "setLearningRate"], [24, 3, 1, "", "setModelFile"], [24, 3, 1, "", "setMultiClass"], [24, 3, 1, "", "setOutputCol"], [24, 3, 1, "", "setOutputLogsPath"], [24, 3, 1, "", "setParamValue"], [24, 3, 1, "", "setValidationSplit"], [24, 2, 1, "", "skipLPInputColsValidation"], [24, 2, 1, "", "validationSplit"], [24, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel": [[24, 2, 1, "", "classes"], [24, 3, 1, "", "clear"], [24, 3, 1, "", "copy"], [24, 2, 1, "", "datasetInfo"], [24, 2, 1, "", "doExceptionHandling"], [24, 3, 1, "", "explainParam"], [24, 3, 1, "", "explainParams"], [24, 3, 1, "", "extractParamMap"], [24, 2, 1, "", "featureScaling"], [24, 3, 1, "", "getInputCols"], [24, 3, 1, "", "getLazyAnnotator"], [24, 3, 1, "", "getOrDefault"], [24, 3, 1, "", "getOutputCol"], [24, 3, 1, "", "getParam"], [24, 3, 1, "", "getParamValue"], [24, 3, 1, "", "getStorageRef"], [24, 2, 1, "", "getter_attrs"], [24, 3, 1, "", "hasDefault"], [24, 3, 1, "", "hasParam"], [24, 2, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "inputCols"], [24, 3, 1, "", "inputColsValidation"], [24, 3, 1, "", "isDefined"], [24, 3, 1, "", "isSet"], [24, 2, 1, "", "lazyAnnotator"], [24, 3, 1, "", "load"], [24, 3, 1, "", "loadSavedModel"], [24, 2, 1, "", "multiClass"], [24, 2, 1, "", "name"], [24, 2, 1, "", "optionalInputAnnotatorTypes"], [24, 2, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "outputCol"], [24, 3, 1, "", "pretrained"], [24, 3, 1, "", "read"], [24, 3, 1, "", "save"], [24, 3, 1, "", "set"], [24, 3, 1, "", "setDatasetInfo"], [24, 3, 1, "", "setDoExceptionHandling"], [24, 3, 1, "", "setFeatureScaling"], [24, 3, 1, "", "setForceInputTypeValidation"], [24, 3, 1, "", "setInputCols"], [24, 3, 1, "", "setLazyAnnotator"], [24, 3, 1, "", "setMultiClass"], [24, 3, 1, "", "setOutputCol"], [24, 3, 1, "", "setParamValue"], [24, 3, 1, "", "setParams"], [24, 3, 1, "", "setStorageRef"], [24, 2, 1, "", "skipLPInputColsValidation"], [24, 2, 1, "", "storageRef"], [24, 3, 1, "", "transform"], [24, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[25, 1, 1, "", "FewShotClassifierApproach"], [25, 1, 1, "", "FewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach": [[25, 2, 1, "", "batchSize"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "copy"], [25, 2, 1, "", "datasetInfo"], [25, 2, 1, "", "doExceptionHandling"], [25, 2, 1, "", "dropout"], [25, 2, 1, "", "engine"], [25, 2, 1, "", "epochsN"], [25, 3, 1, "", "explainParam"], [25, 3, 1, "", "explainParams"], [25, 3, 1, "", "extractParamMap"], [25, 2, 1, "", "featureScaling"], [25, 3, 1, "", "fit"], [25, 3, 1, "", "fitMultiple"], [25, 2, 1, "", "fixImbalance"], [25, 3, 1, "", "getEngine"], [25, 3, 1, "", "getInputCols"], [25, 3, 1, "", "getLazyAnnotator"], [25, 3, 1, "", "getOrDefault"], [25, 3, 1, "", "getOutputCol"], [25, 3, 1, "", "getParam"], [25, 3, 1, "", "getParamValue"], [25, 2, 1, "", "getter_attrs"], [25, 3, 1, "", "hasDefault"], [25, 3, 1, "", "hasParam"], [25, 2, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "inputCols"], [25, 3, 1, "", "inputColsValidation"], [25, 3, 1, "", "isDefined"], [25, 3, 1, "", "isSet"], [25, 2, 1, "", "labelColumn"], [25, 2, 1, "", "lazyAnnotator"], [25, 2, 1, "", "learningRate"], [25, 3, 1, "", "load"], [25, 2, 1, "", "modelFile"], [25, 2, 1, "", "multiClass"], [25, 2, 1, "", "name"], [25, 2, 1, "", "optionalInputAnnotatorTypes"], [25, 2, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "outputCol"], [25, 2, 1, "", "outputLogsPath"], [25, 3, 1, "", "read"], [25, 3, 1, "", "save"], [25, 3, 1, "", "set"], [25, 3, 1, "", "setBatchSize"], [25, 3, 1, "", "setDatasetInfo"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setDropout"], [25, 3, 1, "", "setEpochsNumber"], [25, 3, 1, "", "setFeatureScaling"], [25, 3, 1, "", "setFixImbalance"], [25, 3, 1, "", "setForceInputTypeValidation"], [25, 3, 1, "", "setInputCols"], [25, 3, 1, "", "setLabelCol"], [25, 3, 1, "", "setLazyAnnotator"], [25, 3, 1, "", "setLearningRate"], [25, 3, 1, "", "setModelFile"], [25, 3, 1, "", "setMultiClass"], [25, 3, 1, "", "setOutputCol"], [25, 3, 1, "", "setOutputLogsPath"], [25, 3, 1, "", "setParamValue"], [25, 3, 1, "", "setValidationSplit"], [25, 2, 1, "", "skipLPInputColsValidation"], [25, 2, 1, "", "validationSplit"], [25, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel": [[25, 2, 1, "", "classes"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "copy"], [25, 2, 1, "", "datasetInfo"], [25, 2, 1, "", "doExceptionHandling"], [25, 3, 1, "", "explainParam"], [25, 3, 1, "", "explainParams"], [25, 3, 1, "", "extractParamMap"], [25, 2, 1, "", "featureScaling"], [25, 3, 1, "", "getInputCols"], [25, 3, 1, "", "getLazyAnnotator"], [25, 3, 1, "", "getOrDefault"], [25, 3, 1, "", "getOutputCol"], [25, 3, 1, "", "getParam"], [25, 3, 1, "", "getParamValue"], [25, 2, 1, "", "getter_attrs"], [25, 3, 1, "", "hasDefault"], [25, 3, 1, "", "hasParam"], [25, 2, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "inputCols"], [25, 3, 1, "", "inputColsValidation"], [25, 3, 1, "", "isDefined"], [25, 3, 1, "", "isSet"], [25, 2, 1, "", "lazyAnnotator"], [25, 3, 1, "", "load"], [25, 2, 1, "", "multiClass"], [25, 2, 1, "", "name"], [25, 2, 1, "", "optionalInputAnnotatorTypes"], [25, 2, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "outputCol"], [25, 3, 1, "", "pretrained"], [25, 3, 1, "", "read"], [25, 3, 1, "", "save"], [25, 3, 1, "", "set"], [25, 3, 1, "", "setDatasetInfo"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setFeatureScaling"], [25, 3, 1, "", "setForceInputTypeValidation"], [25, 3, 1, "", "setInputCols"], [25, 3, 1, "", "setLazyAnnotator"], [25, 3, 1, "", "setMultiClass"], [25, 3, 1, "", "setOutputCol"], [25, 3, 1, "", "setParamValue"], [25, 3, 1, "", "setParams"], [25, 2, 1, "", "skipLPInputColsValidation"], [25, 3, 1, "", "transform"], [25, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[26, 1, 1, "", "GenericLogRegClassifierApproach"], [26, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[26, 2, 1, "", "batchSize"], [26, 3, 1, "", "clear"], [26, 3, 1, "", "copy"], [26, 2, 1, "", "datasetInfo"], [26, 2, 1, "", "doExceptionHandling"], [26, 2, 1, "", "dropout"], [26, 2, 1, "", "engine"], [26, 2, 1, "", "epochsN"], [26, 3, 1, "", "explainParam"], [26, 3, 1, "", "explainParams"], [26, 3, 1, "", "extractParamMap"], [26, 2, 1, "", "featureScaling"], [26, 3, 1, "", "fit"], [26, 3, 1, "", "fitMultiple"], [26, 2, 1, "", "fixImbalance"], [26, 3, 1, "", "getEngine"], [26, 3, 1, "", "getInputCols"], [26, 3, 1, "", "getLazyAnnotator"], [26, 3, 1, "", "getOrDefault"], [26, 3, 1, "", "getOutputCol"], [26, 3, 1, "", "getParam"], [26, 3, 1, "", "getParamValue"], [26, 2, 1, "", "getter_attrs"], [26, 3, 1, "", "hasDefault"], [26, 3, 1, "", "hasParam"], [26, 2, 1, "", "inputAnnotatorTypes"], [26, 2, 1, "", "inputCols"], [26, 3, 1, "", "inputColsValidation"], [26, 3, 1, "", "isDefined"], [26, 3, 1, "", "isSet"], [26, 2, 1, "", "labelColumn"], [26, 2, 1, "", "lazyAnnotator"], [26, 2, 1, "", "learningRate"], [26, 3, 1, "", "load"], [26, 2, 1, "", "modelFile"], [26, 2, 1, "", "multiClass"], [26, 2, 1, "", "name"], [26, 2, 1, "", "optionalInputAnnotatorTypes"], [26, 2, 1, "", "outputAnnotatorType"], [26, 2, 1, "", "outputCol"], [26, 2, 1, "", "outputLogsPath"], [26, 3, 1, "", "read"], [26, 3, 1, "", "save"], [26, 3, 1, "", "set"], [26, 3, 1, "", "setBatchSize"], [26, 3, 1, "", "setDatasetInfo"], [26, 3, 1, "", "setDoExceptionHandling"], [26, 3, 1, "", "setDropout"], [26, 3, 1, "", "setEpochsNumber"], [26, 3, 1, "", "setFeatureScaling"], [26, 3, 1, "", "setFixImbalance"], [26, 3, 1, "", "setForceInputTypeValidation"], [26, 3, 1, "", "setInputCols"], [26, 3, 1, "", "setLabelCol"], [26, 3, 1, "", "setLazyAnnotator"], [26, 3, 1, "", "setLearningRate"], [26, 3, 1, "", "setModelFile"], [26, 3, 1, "", "setMultiClass"], [26, 3, 1, "", "setOutputCol"], [26, 3, 1, "", "setOutputLogsPath"], [26, 3, 1, "", "setParamValue"], [26, 3, 1, "", "setValidationSplit"], [26, 2, 1, "", "skipLPInputColsValidation"], [26, 2, 1, "", "validationSplit"], [26, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[26, 2, 1, "", "classes"], [26, 3, 1, "", "clear"], [26, 3, 1, "", "copy"], [26, 2, 1, "", "datasetInfo"], [26, 2, 1, "", "doExceptionHandling"], [26, 3, 1, "", "explainParam"], [26, 3, 1, "", "explainParams"], [26, 3, 1, "", "extractParamMap"], [26, 2, 1, "", "featureScaling"], [26, 3, 1, "", "getInputCols"], [26, 3, 1, "", "getLazyAnnotator"], [26, 3, 1, "", "getOrDefault"], [26, 3, 1, "", "getOutputCol"], [26, 3, 1, "", "getParam"], [26, 3, 1, "", "getParamValue"], [26, 2, 1, "", "getter_attrs"], [26, 3, 1, "", "hasDefault"], [26, 3, 1, "", "hasParam"], [26, 2, 1, "", "inputAnnotatorTypes"], [26, 2, 1, "", "inputCols"], [26, 3, 1, "", "inputColsValidation"], [26, 3, 1, "", "isDefined"], [26, 3, 1, "", "isSet"], [26, 2, 1, "", "lazyAnnotator"], [26, 3, 1, "", "load"], [26, 2, 1, "", "multiClass"], [26, 2, 1, "", "name"], [26, 2, 1, "", "optionalInputAnnotatorTypes"], [26, 2, 1, "", "outputAnnotatorType"], [26, 2, 1, "", "outputCol"], [26, 3, 1, "", "pretrained"], [26, 3, 1, "", "read"], [26, 3, 1, "", "save"], [26, 3, 1, "", "set"], [26, 3, 1, "", "setDatasetInfo"], [26, 3, 1, "", "setDoExceptionHandling"], [26, 3, 1, "", "setFeatureScaling"], [26, 3, 1, "", "setForceInputTypeValidation"], [26, 3, 1, "", "setInputCols"], [26, 3, 1, "", "setLazyAnnotator"], [26, 3, 1, "", "setMultiClass"], [26, 3, 1, "", "setOutputCol"], [26, 3, 1, "", "setParamValue"], [26, 3, 1, "", "setParams"], [26, 2, 1, "", "skipLPInputColsValidation"], [26, 3, 1, "", "transform"], [26, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[27, 1, 1, "", "GenericSVMClassifierApproach"], [27, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[27, 2, 1, "", "batchSize"], [27, 3, 1, "", "clear"], [27, 3, 1, "", "copy"], [27, 2, 1, "", "datasetInfo"], [27, 2, 1, "", "doExceptionHandling"], [27, 2, 1, "", "dropout"], [27, 2, 1, "", "engine"], [27, 2, 1, "", "epochsN"], [27, 3, 1, "", "explainParam"], [27, 3, 1, "", "explainParams"], [27, 3, 1, "", "extractParamMap"], [27, 2, 1, "", "featureScaling"], [27, 3, 1, "", "fit"], [27, 3, 1, "", "fitMultiple"], [27, 2, 1, "", "fixImbalance"], [27, 3, 1, "", "getEngine"], [27, 3, 1, "", "getInputCols"], [27, 3, 1, "", "getLazyAnnotator"], [27, 3, 1, "", "getOrDefault"], [27, 3, 1, "", "getOutputCol"], [27, 3, 1, "", "getParam"], [27, 3, 1, "", "getParamValue"], [27, 2, 1, "", "getter_attrs"], [27, 3, 1, "", "hasDefault"], [27, 3, 1, "", "hasParam"], [27, 2, 1, "", "inputAnnotatorTypes"], [27, 2, 1, "", "inputCols"], [27, 3, 1, "", "inputColsValidation"], [27, 3, 1, "", "isDefined"], [27, 3, 1, "", "isSet"], [27, 2, 1, "", "labelColumn"], [27, 2, 1, "", "lazyAnnotator"], [27, 2, 1, "", "learningRate"], [27, 3, 1, "", "load"], [27, 2, 1, "", "modelFile"], [27, 2, 1, "", "multiClass"], [27, 2, 1, "", "name"], [27, 2, 1, "", "optionalInputAnnotatorTypes"], [27, 2, 1, "", "outputAnnotatorType"], [27, 2, 1, "", "outputCol"], [27, 2, 1, "", "outputLogsPath"], [27, 3, 1, "", "read"], [27, 3, 1, "", "save"], [27, 3, 1, "", "set"], [27, 3, 1, "", "setBatchSize"], [27, 3, 1, "", "setDatasetInfo"], [27, 3, 1, "", "setDoExceptionHandling"], [27, 3, 1, "", "setDropout"], [27, 3, 1, "", "setEpochsNumber"], [27, 3, 1, "", "setFeatureScaling"], [27, 3, 1, "", "setFixImbalance"], [27, 3, 1, "", "setForceInputTypeValidation"], [27, 3, 1, "", "setInputCols"], [27, 3, 1, "", "setLabelCol"], [27, 3, 1, "", "setLazyAnnotator"], [27, 3, 1, "", "setLearningRate"], [27, 3, 1, "", "setModelFile"], [27, 3, 1, "", "setMultiClass"], [27, 3, 1, "", "setOutputCol"], [27, 3, 1, "", "setOutputLogsPath"], [27, 3, 1, "", "setParamValue"], [27, 3, 1, "", "setValidationSplit"], [27, 2, 1, "", "skipLPInputColsValidation"], [27, 2, 1, "", "validationSplit"], [27, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[27, 2, 1, "", "classes"], [27, 3, 1, "", "clear"], [27, 3, 1, "", "copy"], [27, 2, 1, "", "datasetInfo"], [27, 2, 1, "", "doExceptionHandling"], [27, 3, 1, "", "explainParam"], [27, 3, 1, "", "explainParams"], [27, 3, 1, "", "extractParamMap"], [27, 2, 1, "", "featureScaling"], [27, 3, 1, "", "getInputCols"], [27, 3, 1, "", "getLazyAnnotator"], [27, 3, 1, "", "getOrDefault"], [27, 3, 1, "", "getOutputCol"], [27, 3, 1, "", "getParam"], [27, 3, 1, "", "getParamValue"], [27, 2, 1, "", "getter_attrs"], [27, 3, 1, "", "hasDefault"], [27, 3, 1, "", "hasParam"], [27, 2, 1, "", "inputAnnotatorTypes"], [27, 2, 1, "", "inputCols"], [27, 3, 1, "", "inputColsValidation"], [27, 3, 1, "", "isDefined"], [27, 3, 1, "", "isSet"], [27, 2, 1, "", "lazyAnnotator"], [27, 3, 1, "", "load"], [27, 2, 1, "", "multiClass"], [27, 2, 1, "", "name"], [27, 2, 1, "", "optionalInputAnnotatorTypes"], [27, 2, 1, "", "outputAnnotatorType"], [27, 2, 1, "", "outputCol"], [27, 3, 1, "", "pretrained"], [27, 3, 1, "", "read"], [27, 3, 1, "", "save"], [27, 3, 1, "", "set"], [27, 3, 1, "", "setDatasetInfo"], [27, 3, 1, "", "setDoExceptionHandling"], [27, 3, 1, "", "setFeatureScaling"], [27, 3, 1, "", "setForceInputTypeValidation"], [27, 3, 1, "", "setInputCols"], [27, 3, 1, "", "setLazyAnnotator"], [27, 3, 1, "", "setMultiClass"], [27, 3, 1, "", "setOutputCol"], [27, 3, 1, "", "setParamValue"], [27, 3, 1, "", "setParams"], [27, 2, 1, "", "skipLPInputColsValidation"], [27, 3, 1, "", "transform"], [27, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[29, 1, 1, "", "LargeFewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel": [[29, 2, 1, "", "batchSize"], [29, 2, 1, "", "caseSensitive"], [29, 3, 1, "", "clear"], [29, 3, 1, "", "copy"], [29, 3, 1, "", "explainParam"], [29, 3, 1, "", "explainParams"], [29, 3, 1, "", "extractParamMap"], [29, 3, 1, "", "getBatchSize"], [29, 3, 1, "", "getCaseSensitive"], [29, 3, 1, "", "getClasses"], [29, 3, 1, "", "getInputCols"], [29, 3, 1, "", "getLazyAnnotator"], [29, 3, 1, "", "getMaxSentenceLength"], [29, 3, 1, "", "getOrDefault"], [29, 3, 1, "", "getOutputCol"], [29, 3, 1, "", "getParam"], [29, 3, 1, "", "getParamValue"], [29, 2, 1, "", "getter_attrs"], [29, 3, 1, "", "hasDefault"], [29, 2, 1, "", "hasDifferentiableHead"], [29, 3, 1, "", "hasParam"], [29, 2, 1, "", "inputAnnotatorTypes"], [29, 2, 1, "", "inputCols"], [29, 3, 1, "", "inputColsValidation"], [29, 3, 1, "", "isDefined"], [29, 3, 1, "", "isSet"], [29, 2, 1, "", "lazyAnnotator"], [29, 3, 1, "", "load"], [29, 3, 1, "", "loadSavedModel"], [29, 2, 1, "", "maxSentenceLength"], [29, 2, 1, "", "max_length_limit"], [29, 2, 1, "", "modelArchitecture"], [29, 2, 1, "", "name"], [29, 2, 1, "", "optionalInputAnnotatorTypes"], [29, 2, 1, "", "outputAnnotatorType"], [29, 2, 1, "", "outputCol"], [29, 3, 1, "", "pretrained"], [29, 3, 1, "", "read"], [29, 3, 1, "", "save"], [29, 3, 1, "", "set"], [29, 3, 1, "", "setBatchSize"], [29, 3, 1, "", "setCaseSensitive"], [29, 3, 1, "", "setForceInputTypeValidation"], [29, 3, 1, "", "setInputCols"], [29, 3, 1, "", "setLazyAnnotator"], [29, 3, 1, "", "setMaxSentenceLength"], [29, 3, 1, "", "setOutputCol"], [29, 3, 1, "", "setParamValue"], [29, 3, 1, "", "setParams"], [29, 2, 1, "", "skipLPInputColsValidation"], [29, 3, 1, "", "transform"], [29, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[30, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[30, 2, 1, "", "batchSize"], [30, 2, 1, "", "caseSensitive"], [30, 3, 1, "", "clear"], [30, 2, 1, "", "coalesceSentences"], [30, 2, 1, "", "configProtoBytes"], [30, 3, 1, "", "copy"], [30, 3, 1, "", "explainParam"], [30, 3, 1, "", "explainParams"], [30, 3, 1, "", "extractParamMap"], [30, 3, 1, "", "getBatchSize"], [30, 3, 1, "", "getCaseSensitive"], [30, 3, 1, "", "getClasses"], [30, 3, 1, "", "getInputCols"], [30, 3, 1, "", "getLazyAnnotator"], [30, 3, 1, "", "getOrDefault"], [30, 3, 1, "", "getOutputCol"], [30, 3, 1, "", "getParam"], [30, 3, 1, "", "getParamValue"], [30, 2, 1, "", "getter_attrs"], [30, 3, 1, "", "hasDefault"], [30, 3, 1, "", "hasParam"], [30, 2, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "inputCols"], [30, 3, 1, "", "inputColsValidation"], [30, 3, 1, "", "isDefined"], [30, 3, 1, "", "isSet"], [30, 2, 1, "", "lazyAnnotator"], [30, 3, 1, "", "load"], [30, 3, 1, "", "loadSavedModel"], [30, 3, 1, "", "loadSavedModelOpenSource"], [30, 2, 1, "", "maxSentenceLength"], [30, 2, 1, "", "name"], [30, 2, 1, "", "optionalInputAnnotatorTypes"], [30, 2, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "outputCol"], [30, 3, 1, "", "pretrained"], [30, 3, 1, "", "read"], [30, 3, 1, "", "save"], [30, 3, 1, "", "set"], [30, 3, 1, "", "setBatchSize"], [30, 3, 1, "", "setCaseSensitive"], [30, 3, 1, "", "setCoalesceSentences"], [30, 3, 1, "", "setConfigProtoBytes"], [30, 3, 1, "", "setForceInputTypeValidation"], [30, 3, 1, "", "setInputCols"], [30, 3, 1, "", "setLazyAnnotator"], [30, 3, 1, "", "setMaxSentenceLength"], [30, 3, 1, "", "setOutputCol"], [30, 3, 1, "", "setParamValue"], [30, 3, 1, "", "setParams"], [30, 2, 1, "", "skipLPInputColsValidation"], [30, 3, 1, "", "transform"], [30, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[31, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[31, 2, 1, "", "batchSize"], [31, 2, 1, "", "caseSensitive"], [31, 3, 1, "", "clear"], [31, 2, 1, "", "configProtoBytes"], [31, 3, 1, "", "copy"], [31, 3, 1, "", "explainParam"], [31, 3, 1, "", "explainParams"], [31, 3, 1, "", "extractParamMap"], [31, 3, 1, "", "getBatchSize"], [31, 3, 1, "", "getCaseSensitive"], [31, 3, 1, "", "getClasses"], [31, 3, 1, "", "getInputCols"], [31, 3, 1, "", "getLazyAnnotator"], [31, 3, 1, "", "getOrDefault"], [31, 3, 1, "", "getOutputCol"], [31, 3, 1, "", "getParam"], [31, 3, 1, "", "getParamValue"], [31, 2, 1, "", "getter_attrs"], [31, 3, 1, "", "hasDefault"], [31, 3, 1, "", "hasParam"], [31, 2, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "inputCols"], [31, 3, 1, "", "inputColsValidation"], [31, 3, 1, "", "isDefined"], [31, 3, 1, "", "isSet"], [31, 2, 1, "", "lazyAnnotator"], [31, 3, 1, "", "load"], [31, 3, 1, "", "loadSavedModel"], [31, 3, 1, "", "loadSavedModelOpenSource"], [31, 2, 1, "", "maxSentenceLength"], [31, 2, 1, "", "name"], [31, 2, 1, "", "optionalInputAnnotatorTypes"], [31, 2, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "outputCol"], [31, 3, 1, "", "pretrained"], [31, 3, 1, "", "read"], [31, 3, 1, "", "save"], [31, 3, 1, "", "set"], [31, 3, 1, "", "setBatchSize"], [31, 3, 1, "", "setCaseSensitive"], [31, 3, 1, "", "setConfigProtoBytes"], [31, 3, 1, "", "setForceInputTypeValidation"], [31, 3, 1, "", "setInputCols"], [31, 3, 1, "", "setLazyAnnotator"], [31, 3, 1, "", "setMaxSentenceLength"], [31, 3, 1, "", "setOutputCol"], [31, 3, 1, "", "setParamValue"], [31, 3, 1, "", "setParams"], [31, 2, 1, "", "skipLPInputColsValidation"], [31, 3, 1, "", "transform"], [31, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[32, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[32, 2, 1, "", "batchSize"], [32, 2, 1, "", "caseSensitive"], [32, 3, 1, "", "clear"], [32, 2, 1, "", "coalesceSentences"], [32, 2, 1, "", "configProtoBytes"], [32, 3, 1, "", "copy"], [32, 3, 1, "", "explainParam"], [32, 3, 1, "", "explainParams"], [32, 3, 1, "", "extractParamMap"], [32, 3, 1, "", "getBatchSize"], [32, 3, 1, "", "getCaseSensitive"], [32, 3, 1, "", "getClasses"], [32, 3, 1, "", "getInputCols"], [32, 3, 1, "", "getLazyAnnotator"], [32, 3, 1, "", "getOrDefault"], [32, 3, 1, "", "getOutputCol"], [32, 3, 1, "", "getParam"], [32, 3, 1, "", "getParamValue"], [32, 2, 1, "", "getter_attrs"], [32, 3, 1, "", "hasDefault"], [32, 3, 1, "", "hasParam"], [32, 2, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "inputCols"], [32, 3, 1, "", "inputColsValidation"], [32, 3, 1, "", "isDefined"], [32, 3, 1, "", "isSet"], [32, 2, 1, "", "lazyAnnotator"], [32, 3, 1, "", "load"], [32, 3, 1, "", "loadSavedModel"], [32, 3, 1, "", "loadSavedModelOpenSource"], [32, 2, 1, "", "maxSentenceLength"], [32, 2, 1, "", "name"], [32, 2, 1, "", "optionalInputAnnotatorTypes"], [32, 2, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "outputCol"], [32, 3, 1, "", "pretrained"], [32, 3, 1, "", "read"], [32, 3, 1, "", "save"], [32, 3, 1, "", "set"], [32, 3, 1, "", "setBatchSize"], [32, 3, 1, "", "setCaseSensitive"], [32, 3, 1, "", "setCoalesceSentences"], [32, 3, 1, "", "setConfigProtoBytes"], [32, 3, 1, "", "setForceInputTypeValidation"], [32, 3, 1, "", "setInputCols"], [32, 3, 1, "", "setLazyAnnotator"], [32, 3, 1, "", "setMaxSentenceLength"], [32, 3, 1, "", "setOutputCol"], [32, 3, 1, "", "setParamValue"], [32, 3, 1, "", "setParams"], [32, 2, 1, "", "skipLPInputColsValidation"], [32, 3, 1, "", "transform"], [32, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context": [[33, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[33, 1, 1, "", "ContextualParserApproach"], [33, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[33, 2, 1, "", "caseSensitive"], [33, 3, 1, "", "clear"], [33, 2, 1, "", "completeContextMatch"], [33, 3, 1, "", "copy"], [33, 2, 1, "", "dictionary"], [33, 2, 1, "", "doExceptionHandling"], [33, 3, 1, "", "explainParam"], [33, 3, 1, "", "explainParams"], [33, 3, 1, "", "extractParamMap"], [33, 3, 1, "", "fit"], [33, 3, 1, "", "fitMultiple"], [33, 3, 1, "", "getInputCols"], [33, 3, 1, "", "getLazyAnnotator"], [33, 3, 1, "", "getOrDefault"], [33, 3, 1, "", "getOutputCol"], [33, 3, 1, "", "getParam"], [33, 3, 1, "", "getParamValue"], [33, 2, 1, "", "getter_attrs"], [33, 3, 1, "", "hasDefault"], [33, 3, 1, "", "hasParam"], [33, 2, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "inputCols"], [33, 3, 1, "", "inputColsValidation"], [33, 3, 1, "", "isDefined"], [33, 3, 1, "", "isSet"], [33, 2, 1, "", "jsonPath"], [33, 2, 1, "", "lazyAnnotator"], [33, 3, 1, "", "load"], [33, 2, 1, "", "optionalContextRules"], [33, 2, 1, "", "optionalInputAnnotatorTypes"], [33, 2, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "outputCol"], [33, 2, 1, "", "prefixAndSuffixMatch"], [33, 3, 1, "", "read"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set"], [33, 3, 1, "", "setCaseSensitive"], [33, 3, 1, "", "setCompleteContextMatch"], [33, 3, 1, "", "setDictionary"], [33, 3, 1, "", "setDoExceptionHandling"], [33, 3, 1, "", "setForceInputTypeValidation"], [33, 3, 1, "", "setInputCols"], [33, 3, 1, "", "setJsonPath"], [33, 3, 1, "", "setLazyAnnotator"], [33, 3, 1, "", "setOptionalContextRules"], [33, 3, 1, "", "setOutputCol"], [33, 3, 1, "", "setParamValue"], [33, 3, 1, "", "setPrefixAndSuffixMatch"], [33, 3, 1, "", "setShortestContextMatch"], [33, 2, 1, "", "shortestContextMatch"], [33, 2, 1, "", "skipLPInputColsValidation"], [33, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[33, 2, 1, "", "caseSensitive"], [33, 3, 1, "", "clear"], [33, 3, 1, "", "copy"], [33, 2, 1, "", "doExceptionHandling"], [33, 3, 1, "", "explainParam"], [33, 3, 1, "", "explainParams"], [33, 3, 1, "", "extractParamMap"], [33, 3, 1, "", "getInputCols"], [33, 3, 1, "", "getLazyAnnotator"], [33, 3, 1, "", "getOrDefault"], [33, 3, 1, "", "getOutputCol"], [33, 3, 1, "", "getParam"], [33, 3, 1, "", "getParamValue"], [33, 2, 1, "", "getter_attrs"], [33, 3, 1, "", "hasDefault"], [33, 3, 1, "", "hasParam"], [33, 2, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "inputCols"], [33, 3, 1, "", "inputColsValidation"], [33, 3, 1, "", "isDefined"], [33, 3, 1, "", "isSet"], [33, 2, 1, "", "lazyAnnotator"], [33, 3, 1, "", "load"], [33, 2, 1, "", "name"], [33, 2, 1, "", "optionalContextRules"], [33, 2, 1, "", "optionalInputAnnotatorTypes"], [33, 2, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "outputCol"], [33, 2, 1, "", "prefixAndSuffixMatch"], [33, 3, 1, "", "pretrained"], [33, 3, 1, "", "read"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set"], [33, 3, 1, "", "setCaseSensitive"], [33, 3, 1, "", "setDoExceptionHandling"], [33, 3, 1, "", "setForceInputTypeValidation"], [33, 3, 1, "", "setInputCols"], [33, 3, 1, "", "setLazyAnnotator"], [33, 3, 1, "", "setOptionalContextRules"], [33, 3, 1, "", "setOutputCol"], [33, 3, 1, "", "setParamValue"], [33, 3, 1, "", "setParams"], [33, 3, 1, "", "setPrefixAndSuffixMatch"], [33, 3, 1, "", "setShortestContextMatch"], [33, 2, 1, "", "shortestContextMatch"], [33, 2, 1, "", "skipLPInputColsValidation"], [33, 3, 1, "", "transform"], [33, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid": [[35, 0, 0, "-", "deIdentification"], [36, 0, 0, "-", "deidentication_params"], [37, 0, 0, "-", "doccument_hashcoder"], [39, 0, 0, "-", "light_deIdentification"], [40, 0, 0, "-", "name_obfuscator"], [41, 0, 0, "-", "reIdentification"], [42, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[35, 1, 1, "", "DeIdentification"], [35, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[35, 2, 1, "", "ageRanges"], [35, 2, 1, "", "ageRangesByHipaa"], [35, 2, 1, "", "blackList"], [35, 2, 1, "", "blackListEntities"], [35, 3, 1, "", "clear"], [35, 2, 1, "", "combineRegexPatterns"], [35, 2, 1, "", "consistentObfuscation"], [35, 3, 1, "", "copy"], [35, 2, 1, "", "dateFormats"], [35, 2, 1, "", "dateTag"], [35, 2, 1, "", "dateToYear"], [35, 2, 1, "", "days"], [35, 2, 1, "", "doExceptionHandling"], [35, 2, 1, "", "entityCasingModesPath"], [35, 3, 1, "", "explainParam"], [35, 3, 1, "", "explainParams"], [35, 3, 1, "", "extractParamMap"], [35, 3, 1, "", "fit"], [35, 3, 1, "", "fitMultiple"], [35, 2, 1, "", "fixedMaskLength"], [35, 2, 1, "", "genderAwareness"], [35, 3, 1, "", "getBlackList"], [35, 3, 1, "", "getInputCols"], [35, 3, 1, "", "getLazyAnnotator"], [35, 3, 1, "", "getOrDefault"], [35, 3, 1, "", "getOutputCol"], [35, 3, 1, "", "getParam"], [35, 3, 1, "", "getParamValue"], [35, 3, 1, "", "getSameLengthFormattedEntities"], [35, 3, 1, "", "getUseShiftDays"], [35, 2, 1, "", "getter_attrs"], [35, 3, 1, "", "hasDefault"], [35, 3, 1, "", "hasParam"], [35, 2, 1, "", "ignoreRegex"], [35, 2, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "inputCols"], [35, 3, 1, "", "inputColsValidation"], [35, 3, 1, "", "isDefined"], [35, 2, 1, "", "isRandomDateDisplacement"], [35, 3, 1, "", "isSet"], [35, 2, 1, "", "keepYear"], [35, 2, 1, "", "language"], [35, 2, 1, "", "lazyAnnotator"], [35, 3, 1, "", "load"], [35, 2, 1, "", "mappingsColumn"], [35, 2, 1, "", "maskingPolicy"], [35, 2, 1, "", "metadataMaskingPolicy"], [35, 2, 1, "", "minYear"], [35, 2, 1, "", "mode"], [35, 2, 1, "", "name"], [35, 2, 1, "", "obfuscateByAgeGroups"], [35, 2, 1, "", "obfuscateDate"], [35, 2, 1, "", "obfuscateRefFile"], [35, 2, 1, "", "obfuscateRefSource"], [35, 2, 1, "", "obfuscationStrategyOnException"], [35, 2, 1, "", "optionalInputAnnotatorTypes"], [35, 2, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "outputAsDocument"], [35, 2, 1, "", "outputCol"], [35, 3, 1, "", "read"], [35, 2, 1, "", "refFileFormat"], [35, 2, 1, "", "refSep"], [35, 2, 1, "", "regexOverride"], [35, 2, 1, "", "regexPatternsDictionary"], [35, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [35, 2, 1, "", "region"], [35, 2, 1, "", "returnEntityMappings"], [35, 2, 1, "", "sameEntityThreshold"], [35, 2, 1, "", "sameLengthFormattedEntities"], [35, 3, 1, "", "save"], [35, 2, 1, "", "seed"], [35, 2, 1, "", "selectiveObfuscationModesPath"], [35, 3, 1, "", "set"], [35, 3, 1, "", "setAgeGroups"], [35, 3, 1, "", "setAgeRanges"], [35, 3, 1, "", "setAgeRangesByHipaa"], [35, 3, 1, "", "setBlackList"], [35, 3, 1, "", "setBlackListEntities"], [35, 3, 1, "", "setCombineRegexPatterns"], [35, 3, 1, "", "setConsistentObfuscation"], [35, 3, 1, "", "setDateFormats"], [35, 3, 1, "", "setDateTag"], [35, 3, 1, "", "setDateToYear"], [35, 3, 1, "", "setDays"], [35, 3, 1, "", "setDoExceptionHandling"], [35, 3, 1, "", "setEntityCasingModes"], [35, 3, 1, "", "setFixedMaskLength"], [35, 3, 1, "", "setForceInputTypeValidation"], [35, 3, 1, "", "setGenderAwareness"], [35, 3, 1, "", "setIgnoreRegex"], [35, 3, 1, "", "setInputCols"], [35, 3, 1, "", "setIsRandomDateDisplacement"], [35, 3, 1, "", "setKeepYear"], [35, 3, 1, "", "setLanguage"], [35, 3, 1, "", "setLazyAnnotator"], [35, 3, 1, "", "setMappingsColumn"], [35, 3, 1, "", "setMaskingPolicy"], [35, 3, 1, "", "setMetadataMaskingPolicy"], [35, 3, 1, "", "setMinYear"], [35, 3, 1, "", "setMode"], [35, 3, 1, "", "setObfuscateByAgeGroups"], [35, 3, 1, "", "setObfuscateDate"], [35, 3, 1, "", "setObfuscateRefFile"], [35, 3, 1, "", "setObfuscateRefSource"], [35, 3, 1, "", "setObfuscationStrategyOnException"], [35, 3, 1, "", "setOutputAsDocument"], [35, 3, 1, "", "setOutputCol"], [35, 3, 1, "", "setParamValue"], [35, 3, 1, "", "setRefFileFormat"], [35, 3, 1, "", "setRefSep"], [35, 3, 1, "", "setRegexOverride"], [35, 3, 1, "", "setRegexPatternsDictionary"], [35, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [35, 3, 1, "", "setRegion"], [35, 3, 1, "", "setReturnEntityMappings"], [35, 3, 1, "", "setSameEntityThreshold"], [35, 3, 1, "", "setSameLengthFormattedEntities"], [35, 3, 1, "", "setSeed"], [35, 3, 1, "", "setSelectiveObfuscationModes"], [35, 3, 1, "", "setUnnormalizedDateMode"], [35, 3, 1, "", "setUseShifDays"], [35, 3, 1, "", "setUseShiftDays"], [35, 3, 1, "", "setZipCodeTag"], [35, 2, 1, "", "skipLPInputColsValidation"], [35, 2, 1, "", "unnormalizedDateMode"], [35, 2, 1, "", "useShifDays"], [35, 3, 1, "", "write"], [35, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[35, 2, 1, "", "ageRanges"], [35, 2, 1, "", "ageRangesByHipaa"], [35, 2, 1, "", "blackList"], [35, 2, 1, "", "blackListEntities"], [35, 3, 1, "", "clear"], [35, 2, 1, "", "consistentObfuscation"], [35, 3, 1, "", "copy"], [35, 2, 1, "", "dateFormats"], [35, 2, 1, "", "dateTag"], [35, 2, 1, "", "dateToYear"], [35, 2, 1, "", "days"], [35, 2, 1, "", "doExceptionHandling"], [35, 3, 1, "", "explainParam"], [35, 3, 1, "", "explainParams"], [35, 3, 1, "", "extractParamMap"], [35, 2, 1, "", "fixedMaskLength"], [35, 2, 1, "", "genderAwareness"], [35, 3, 1, "", "getBlackList"], [35, 3, 1, "", "getInputCols"], [35, 3, 1, "", "getLazyAnnotator"], [35, 3, 1, "", "getOrDefault"], [35, 3, 1, "", "getOutputCol"], [35, 3, 1, "", "getParam"], [35, 3, 1, "", "getParamValue"], [35, 3, 1, "", "getRegexEntities"], [35, 3, 1, "", "getSameLengthFormattedEntities"], [35, 3, 1, "", "getUseShiftDays"], [35, 2, 1, "", "getter_attrs"], [35, 3, 1, "", "hasDefault"], [35, 3, 1, "", "hasParam"], [35, 2, 1, "", "ignoreRegex"], [35, 2, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "inputCols"], [35, 3, 1, "", "inputColsValidation"], [35, 3, 1, "", "isDefined"], [35, 2, 1, "", "isRandomDateDisplacement"], [35, 3, 1, "", "isSet"], [35, 2, 1, "", "keepYear"], [35, 2, 1, "", "language"], [35, 2, 1, "", "lazyAnnotator"], [35, 3, 1, "", "load"], [35, 2, 1, "", "mappingsColumn"], [35, 2, 1, "", "maskingPolicy"], [35, 2, 1, "", "metadataMaskingPolicy"], [35, 2, 1, "", "minYear"], [35, 2, 1, "", "mode"], [35, 2, 1, "", "name"], [35, 2, 1, "", "obfuscateByAgeGroups"], [35, 2, 1, "", "obfuscateDate"], [35, 2, 1, "", "obfuscateRefSource"], [35, 2, 1, "", "obfuscationStrategyOnException"], [35, 2, 1, "", "optionalInputAnnotatorTypes"], [35, 2, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "outputAsDocument"], [35, 2, 1, "", "outputCol"], [35, 3, 1, "", "pretrained"], [35, 3, 1, "", "read"], [35, 2, 1, "", "regexEntities"], [35, 2, 1, "", "regexOverride"], [35, 2, 1, "", "region"], [35, 2, 1, "", "returnEntityMappings"], [35, 2, 1, "", "sameEntityThreshold"], [35, 2, 1, "", "sameLengthFormattedEntities"], [35, 3, 1, "", "save"], [35, 2, 1, "", "seed"], [35, 3, 1, "", "set"], [35, 3, 1, "", "setAgeGroups"], [35, 3, 1, "", "setAgeRanges"], [35, 3, 1, "", "setAgeRangesByHipaa"], [35, 3, 1, "", "setBlackList"], [35, 3, 1, "", "setBlackListEntities"], [35, 3, 1, "", "setConsistentObfuscation"], [35, 3, 1, "", "setDateFormats"], [35, 3, 1, "", "setDateTag"], [35, 3, 1, "", "setDateToYear"], [35, 3, 1, "", "setDays"], [35, 3, 1, "", "setDoExceptionHandling"], [35, 3, 1, "", "setFixedMaskLength"], [35, 3, 1, "", "setForceInputTypeValidation"], [35, 3, 1, "", "setGenderAwareness"], [35, 3, 1, "", "setIgnoreRegex"], [35, 3, 1, "", "setInputCols"], [35, 3, 1, "", "setIsRandomDateDisplacement"], [35, 3, 1, "", "setKeepYear"], [35, 3, 1, "", "setLanguage"], [35, 3, 1, "", "setLazyAnnotator"], [35, 3, 1, "", "setMappingsColumn"], [35, 3, 1, "", "setMaskingPolicy"], [35, 3, 1, "", "setMetadataMaskingPolicy"], [35, 3, 1, "", "setMinYear"], [35, 3, 1, "", "setMode"], [35, 3, 1, "", "setObfuscateByAgeGroups"], [35, 3, 1, "", "setObfuscateDate"], [35, 3, 1, "", "setObfuscateRefSource"], [35, 3, 1, "", "setObfuscationStrategyOnException"], [35, 3, 1, "", "setOutputAsDocument"], [35, 3, 1, "", "setOutputCol"], [35, 3, 1, "", "setParamValue"], [35, 3, 1, "", "setParams"], [35, 3, 1, "", "setRegexOverride"], [35, 3, 1, "", "setRegion"], [35, 3, 1, "", "setReturnEntityMappings"], [35, 3, 1, "", "setSameEntityThreshold"], [35, 3, 1, "", "setSameLengthFormattedEntities"], [35, 3, 1, "", "setSeed"], [35, 3, 1, "", "setUnnormalizedDateMode"], [35, 3, 1, "", "setUseShifDays"], [35, 3, 1, "", "setUseShiftDays"], [35, 3, 1, "", "setZipCodeTag"], [35, 2, 1, "", "skipLPInputColsValidation"], [35, 3, 1, "", "transform"], [35, 2, 1, "", "unnormalizedDateMode"], [35, 2, 1, "", "useShifDays"], [35, 3, 1, "", "write"], [35, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[36, 1, 1, "", "DeIdentificationParams"]], "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams": [[36, 2, 1, "", "ageRanges"], [36, 2, 1, "", "ageRangesByHipaa"], [36, 2, 1, "", "blackList"], [36, 2, 1, "", "blackListEntities"], [36, 2, 1, "", "consistentObfuscation"], [36, 2, 1, "", "dateFormats"], [36, 2, 1, "", "dateTag"], [36, 2, 1, "", "dateToYear"], [36, 2, 1, "", "days"], [36, 2, 1, "", "fixedMaskLength"], [36, 2, 1, "", "genderAwareness"], [36, 3, 1, "", "getBlackList"], [36, 3, 1, "", "getSameLengthFormattedEntities"], [36, 3, 1, "", "getUseShiftDays"], [36, 2, 1, "", "ignoreRegex"], [36, 2, 1, "", "isRandomDateDisplacement"], [36, 2, 1, "", "keepYear"], [36, 2, 1, "", "language"], [36, 2, 1, "", "mappingsColumn"], [36, 2, 1, "", "maskingPolicy"], [36, 2, 1, "", "metadataMaskingPolicy"], [36, 2, 1, "", "minYear"], [36, 2, 1, "", "mode"], [36, 2, 1, "", "obfuscateByAgeGroups"], [36, 2, 1, "", "obfuscateDate"], [36, 2, 1, "", "obfuscateRefSource"], [36, 2, 1, "", "obfuscationStrategyOnException"], [36, 2, 1, "", "outputAsDocument"], [36, 2, 1, "", "regexOverride"], [36, 2, 1, "", "region"], [36, 2, 1, "", "returnEntityMappings"], [36, 2, 1, "", "sameEntityThreshold"], [36, 2, 1, "", "sameLengthFormattedEntities"], [36, 2, 1, "", "seed"], [36, 3, 1, "", "setAgeGroups"], [36, 3, 1, "", "setAgeRanges"], [36, 3, 1, "", "setAgeRangesByHipaa"], [36, 3, 1, "", "setBlackList"], [36, 3, 1, "", "setBlackListEntities"], [36, 3, 1, "", "setConsistentObfuscation"], [36, 3, 1, "", "setDateFormats"], [36, 3, 1, "", "setDateTag"], [36, 3, 1, "", "setDateToYear"], [36, 3, 1, "", "setDays"], [36, 3, 1, "", "setFixedMaskLength"], [36, 3, 1, "", "setGenderAwareness"], [36, 3, 1, "", "setIgnoreRegex"], [36, 3, 1, "", "setIsRandomDateDisplacement"], [36, 3, 1, "", "setKeepYear"], [36, 3, 1, "", "setLanguage"], [36, 3, 1, "", "setMappingsColumn"], [36, 3, 1, "", "setMaskingPolicy"], [36, 3, 1, "", "setMetadataMaskingPolicy"], [36, 3, 1, "", "setMinYear"], [36, 3, 1, "", "setMode"], [36, 3, 1, "", "setObfuscateByAgeGroups"], [36, 3, 1, "", "setObfuscateDate"], [36, 3, 1, "", "setObfuscateRefSource"], [36, 3, 1, "", "setObfuscationStrategyOnException"], [36, 3, 1, "", "setOutputAsDocument"], [36, 3, 1, "", "setRegexOverride"], [36, 3, 1, "", "setRegion"], [36, 3, 1, "", "setReturnEntityMappings"], [36, 3, 1, "", "setSameEntityThreshold"], [36, 3, 1, "", "setSameLengthFormattedEntities"], [36, 3, 1, "", "setSeed"], [36, 3, 1, "", "setUnnormalizedDateMode"], [36, 3, 1, "", "setUseShifDays"], [36, 3, 1, "", "setUseShiftDays"], [36, 3, 1, "", "setZipCodeTag"], [36, 2, 1, "", "unnormalizedDateMode"], [36, 2, 1, "", "useShifDays"], [36, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[37, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[37, 3, 1, "", "clear"], [37, 3, 1, "", "copy"], [37, 2, 1, "", "dateShiftColumn"], [37, 3, 1, "", "explainParam"], [37, 3, 1, "", "explainParams"], [37, 3, 1, "", "extractParamMap"], [37, 3, 1, "", "getInputCols"], [37, 3, 1, "", "getLazyAnnotator"], [37, 3, 1, "", "getOrDefault"], [37, 3, 1, "", "getOutputCol"], [37, 3, 1, "", "getParam"], [37, 3, 1, "", "getParamValue"], [37, 2, 1, "", "getter_attrs"], [37, 3, 1, "", "hasDefault"], [37, 3, 1, "", "hasParam"], [37, 2, 1, "", "inputAnnotatorTypes"], [37, 2, 1, "", "inputCols"], [37, 3, 1, "", "inputColsValidation"], [37, 3, 1, "", "isDefined"], [37, 3, 1, "", "isSet"], [37, 2, 1, "", "lazyAnnotator"], [37, 3, 1, "", "load"], [37, 2, 1, "", "name"], [37, 2, 1, "", "newDateShift"], [37, 2, 1, "", "optionalInputAnnotatorTypes"], [37, 2, 1, "", "outputAnnotatorType"], [37, 2, 1, "", "outputCol"], [37, 2, 1, "", "patientIdColumn"], [37, 2, 1, "", "rangeDays"], [37, 3, 1, "", "read"], [37, 3, 1, "", "save"], [37, 2, 1, "", "seed"], [37, 3, 1, "", "set"], [37, 3, 1, "", "setDateShiftColumn"], [37, 3, 1, "", "setInputCols"], [37, 3, 1, "", "setLazyAnnotator"], [37, 3, 1, "", "setNewDateShift"], [37, 3, 1, "", "setOutputCol"], [37, 3, 1, "", "setParamValue"], [37, 3, 1, "", "setParams"], [37, 3, 1, "", "setPatientIdColumn"], [37, 3, 1, "", "setRangeDays"], [37, 3, 1, "", "setSeed"], [37, 3, 1, "", "transform"], [37, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.light_deIdentification": [[39, 1, 1, "", "LightDeIdentification"]], "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification": [[39, 2, 1, "", "ageRanges"], [39, 3, 1, "", "clear"], [39, 3, 1, "", "copy"], [39, 2, 1, "", "dateEntities"], [39, 2, 1, "", "dateFormats"], [39, 2, 1, "", "days"], [39, 3, 1, "", "explainParam"], [39, 3, 1, "", "explainParams"], [39, 3, 1, "", "extractParamMap"], [39, 2, 1, "", "fixedMaskLength"], [39, 2, 1, "", "genderAwareness"], [39, 3, 1, "", "getInputCols"], [39, 3, 1, "", "getLazyAnnotator"], [39, 3, 1, "", "getOrDefault"], [39, 3, 1, "", "getOutputCol"], [39, 3, 1, "", "getParam"], [39, 3, 1, "", "getParamValue"], [39, 2, 1, "", "getter_attrs"], [39, 3, 1, "", "hasDefault"], [39, 3, 1, "", "hasParam"], [39, 2, 1, "", "inputAnnotatorTypes"], [39, 2, 1, "", "inputCols"], [39, 3, 1, "", "inputColsValidation"], [39, 3, 1, "", "isDefined"], [39, 3, 1, "", "isSet"], [39, 2, 1, "", "language"], [39, 2, 1, "", "lazyAnnotator"], [39, 3, 1, "", "load"], [39, 2, 1, "", "maskingPolicy"], [39, 2, 1, "", "mode"], [39, 2, 1, "", "name"], [39, 2, 1, "", "obfuscateDate"], [39, 2, 1, "", "obfuscateRefSource"], [39, 2, 1, "", "optionalInputAnnotatorTypes"], [39, 2, 1, "", "outputAnnotatorType"], [39, 2, 1, "", "outputCol"], [39, 3, 1, "", "read"], [39, 2, 1, "", "region"], [39, 2, 1, "", "sameLengthFormattedEntities"], [39, 3, 1, "", "save"], [39, 2, 1, "", "seed"], [39, 3, 1, "", "set"], [39, 3, 1, "", "setAgeRanges"], [39, 3, 1, "", "setCustomFakers"], [39, 3, 1, "", "setDateEntities"], [39, 3, 1, "", "setDateFormats"], [39, 3, 1, "", "setDays"], [39, 3, 1, "", "setFixedMaskLength"], [39, 3, 1, "", "setForceInputTypeValidation"], [39, 3, 1, "", "setGenderAwareness"], [39, 3, 1, "", "setInputCols"], [39, 3, 1, "", "setLanguage"], [39, 3, 1, "", "setLazyAnnotator"], [39, 3, 1, "", "setMaskingPolicy"], [39, 3, 1, "", "setMode"], [39, 3, 1, "", "setObfuscateDate"], [39, 3, 1, "", "setObfuscateRefSource"], [39, 3, 1, "", "setOutputCol"], [39, 3, 1, "", "setParamValue"], [39, 3, 1, "", "setParams"], [39, 3, 1, "", "setRegion"], [39, 3, 1, "", "setSameLengthFormattedEntities"], [39, 3, 1, "", "setSeed"], [39, 3, 1, "", "setSelectiveObfuscationModes"], [39, 3, 1, "", "setUnnormalizedDateMode"], [39, 3, 1, "", "setUseShiftDays"], [39, 2, 1, "", "skipLPInputColsValidation"], [39, 3, 1, "", "transform"], [39, 2, 1, "", "unnormalizedDateMode"], [39, 2, 1, "", "useShiftDays"], [39, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[40, 1, 1, "", "NameChunkObfuscator"], [40, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[40, 3, 1, "", "clear"], [40, 3, 1, "", "copy"], [40, 3, 1, "", "explainParam"], [40, 3, 1, "", "explainParams"], [40, 3, 1, "", "extractParamMap"], [40, 2, 1, "", "genderAwareness"], [40, 3, 1, "", "getInputCols"], [40, 3, 1, "", "getLazyAnnotator"], [40, 3, 1, "", "getOrDefault"], [40, 3, 1, "", "getOutputCol"], [40, 3, 1, "", "getParam"], [40, 3, 1, "", "getParamValue"], [40, 2, 1, "", "getter_attrs"], [40, 3, 1, "", "hasDefault"], [40, 3, 1, "", "hasParam"], [40, 2, 1, "", "inputAnnotatorTypes"], [40, 2, 1, "", "inputCols"], [40, 3, 1, "", "inputColsValidation"], [40, 3, 1, "", "isDefined"], [40, 3, 1, "", "isSet"], [40, 2, 1, "", "language"], [40, 2, 1, "", "lazyAnnotator"], [40, 3, 1, "", "load"], [40, 2, 1, "", "nameEntities"], [40, 2, 1, "", "obfuscateRefSource"], [40, 2, 1, "", "optionalInputAnnotatorTypes"], [40, 2, 1, "", "outputAnnotatorType"], [40, 2, 1, "", "outputCol"], [40, 3, 1, "", "read"], [40, 2, 1, "", "sameLength"], [40, 3, 1, "", "save"], [40, 2, 1, "", "seed"], [40, 3, 1, "", "set"], [40, 3, 1, "", "setForceInputTypeValidation"], [40, 3, 1, "", "setGenderAwareness"], [40, 3, 1, "", "setInputCols"], [40, 3, 1, "", "setLanguage"], [40, 3, 1, "", "setLazyAnnotator"], [40, 3, 1, "", "setNameEntities"], [40, 3, 1, "", "setObfuscateRefSource"], [40, 3, 1, "", "setOutputCol"], [40, 3, 1, "", "setParamValue"], [40, 3, 1, "", "setParams"], [40, 3, 1, "", "setSameLength"], [40, 3, 1, "", "setSeed"], [40, 2, 1, "", "skipLPInputColsValidation"], [40, 3, 1, "", "transform"], [40, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[40, 3, 1, "", "clear"], [40, 3, 1, "", "copy"], [40, 3, 1, "", "explainParam"], [40, 3, 1, "", "explainParams"], [40, 3, 1, "", "extractParamMap"], [40, 3, 1, "", "fit"], [40, 3, 1, "", "fitMultiple"], [40, 2, 1, "", "genderAwareness"], [40, 3, 1, "", "getInputCols"], [40, 3, 1, "", "getLazyAnnotator"], [40, 3, 1, "", "getOrDefault"], [40, 3, 1, "", "getOutputCol"], [40, 3, 1, "", "getParam"], [40, 3, 1, "", "getParamValue"], [40, 2, 1, "", "getter_attrs"], [40, 3, 1, "", "hasDefault"], [40, 3, 1, "", "hasParam"], [40, 2, 1, "", "inputAnnotatorTypes"], [40, 2, 1, "", "inputCols"], [40, 3, 1, "", "inputColsValidation"], [40, 3, 1, "", "isDefined"], [40, 3, 1, "", "isSet"], [40, 2, 1, "", "language"], [40, 2, 1, "", "lazyAnnotator"], [40, 3, 1, "", "load"], [40, 2, 1, "", "nameEntities"], [40, 2, 1, "", "obfuscateRefFile"], [40, 2, 1, "", "obfuscateRefSource"], [40, 2, 1, "", "optionalInputAnnotatorTypes"], [40, 2, 1, "", "outputAnnotatorType"], [40, 2, 1, "", "outputCol"], [40, 3, 1, "", "read"], [40, 2, 1, "", "refFileFormat"], [40, 2, 1, "", "refSep"], [40, 2, 1, "", "sameLength"], [40, 3, 1, "", "save"], [40, 2, 1, "", "seed"], [40, 3, 1, "", "set"], [40, 3, 1, "", "setForceInputTypeValidation"], [40, 3, 1, "", "setGenderAwareness"], [40, 3, 1, "", "setInputCols"], [40, 3, 1, "", "setLanguage"], [40, 3, 1, "", "setLazyAnnotator"], [40, 3, 1, "", "setNameEntities"], [40, 3, 1, "", "setObfuscateRefFile"], [40, 3, 1, "", "setObfuscateRefSource"], [40, 3, 1, "", "setOutputCol"], [40, 3, 1, "", "setParamValue"], [40, 3, 1, "", "setRefFileFormat"], [40, 3, 1, "", "setRefSep"], [40, 3, 1, "", "setSameLength"], [40, 3, 1, "", "setSeed"], [40, 2, 1, "", "skipLPInputColsValidation"], [40, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.reIdentification": [[41, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[41, 3, 1, "", "clear"], [41, 3, 1, "", "copy"], [41, 3, 1, "", "explainParam"], [41, 3, 1, "", "explainParams"], [41, 3, 1, "", "extractParamMap"], [41, 3, 1, "", "getInputCols"], [41, 3, 1, "", "getLazyAnnotator"], [41, 3, 1, "", "getOrDefault"], [41, 3, 1, "", "getOutputCol"], [41, 3, 1, "", "getParam"], [41, 3, 1, "", "getParamValue"], [41, 2, 1, "", "getter_attrs"], [41, 3, 1, "", "hasDefault"], [41, 3, 1, "", "hasParam"], [41, 2, 1, "", "inputAnnotatorTypes"], [41, 2, 1, "", "inputCols"], [41, 3, 1, "", "inputColsValidation"], [41, 3, 1, "", "isDefined"], [41, 3, 1, "", "isSet"], [41, 2, 1, "", "lazyAnnotator"], [41, 3, 1, "", "load"], [41, 2, 1, "", "name"], [41, 2, 1, "", "optionalInputAnnotatorTypes"], [41, 2, 1, "", "outputAnnotatorType"], [41, 2, 1, "", "outputCol"], [41, 3, 1, "", "read"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set"], [41, 3, 1, "", "setForceInputTypeValidation"], [41, 3, 1, "", "setInputCols"], [41, 3, 1, "", "setLazyAnnotator"], [41, 3, 1, "", "setOutputCol"], [41, 3, 1, "", "setParamValue"], [41, 3, 1, "", "setParams"], [41, 2, 1, "", "skipLPInputColsValidation"], [41, 3, 1, "", "transform"], [41, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.replacer": [[42, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[42, 3, 1, "", "clear"], [42, 3, 1, "", "copy"], [42, 3, 1, "", "explainParam"], [42, 3, 1, "", "explainParams"], [42, 3, 1, "", "extractParamMap"], [42, 3, 1, "", "getInputCols"], [42, 3, 1, "", "getLazyAnnotator"], [42, 3, 1, "", "getOrDefault"], [42, 3, 1, "", "getOutputCol"], [42, 3, 1, "", "getParam"], [42, 3, 1, "", "getParamValue"], [42, 3, 1, "", "getUseReplacement"], [42, 2, 1, "", "getter_attrs"], [42, 3, 1, "", "hasDefault"], [42, 3, 1, "", "hasParam"], [42, 2, 1, "", "inputAnnotatorTypes"], [42, 2, 1, "", "inputCols"], [42, 3, 1, "", "inputColsValidation"], [42, 3, 1, "", "isDefined"], [42, 3, 1, "", "isSet"], [42, 2, 1, "", "lazyAnnotator"], [42, 3, 1, "", "load"], [42, 2, 1, "", "name"], [42, 2, 1, "id0", "noneValuesTo"], [42, 2, 1, "", "optionalInputAnnotatorTypes"], [42, 2, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "outputCol"], [42, 2, 1, "id1", "placeHolder"], [42, 2, 1, "id2", "placeHolderDelimiters"], [42, 3, 1, "", "read"], [42, 3, 1, "", "save"], [42, 3, 1, "", "set"], [42, 3, 1, "", "setForceInputTypeValidation"], [42, 3, 1, "", "setInputCols"], [42, 3, 1, "", "setLazyAnnotator"], [42, 3, 1, "", "setNoneValuesTo"], [42, 3, 1, "", "setOutputCol"], [42, 3, 1, "", "setParamValue"], [42, 3, 1, "", "setParams"], [42, 3, 1, "", "setPlaceHolder"], [42, 3, 1, "", "setPlaceHolderDelimiters"], [42, 3, 1, "", "setUseReplacement"], [42, 2, 1, "", "skipLPInputColsValidation"], [42, 3, 1, "", "transform"], [42, 2, 1, "id3", "useReplacement"], [42, 3, 1, "", "write"]], "sparknlp_jsl.annotator.disambiguation": [[44, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[44, 1, 1, "", "NerDisambiguator"], [44, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[44, 3, 1, "", "clear"], [44, 3, 1, "", "copy"], [44, 2, 1, "", "embeddingTypeParam"], [44, 3, 1, "", "explainParam"], [44, 3, 1, "", "explainParams"], [44, 3, 1, "", "extractParamMap"], [44, 3, 1, "", "fit"], [44, 3, 1, "", "fitMultiple"], [44, 3, 1, "", "getInputCols"], [44, 3, 1, "", "getLazyAnnotator"], [44, 3, 1, "", "getOrDefault"], [44, 3, 1, "", "getOutputCol"], [44, 3, 1, "", "getParam"], [44, 3, 1, "", "getParamValue"], [44, 2, 1, "", "getter_attrs"], [44, 3, 1, "", "hasDefault"], [44, 3, 1, "", "hasParam"], [44, 2, 1, "", "inputAnnotatorTypes"], [44, 2, 1, "", "inputCols"], [44, 3, 1, "", "inputColsValidation"], [44, 3, 1, "", "isDefined"], [44, 3, 1, "", "isSet"], [44, 2, 1, "", "lazyAnnotator"], [44, 2, 1, "", "levenshteinDistanceThresholdParam"], [44, 3, 1, "", "load"], [44, 2, 1, "", "narrowWithApproximateMatching"], [44, 2, 1, "", "nearMatchingGapParam"], [44, 2, 1, "", "numFirstChars"], [44, 2, 1, "", "optionalInputAnnotatorTypes"], [44, 2, 1, "", "outputAnnotatorType"], [44, 2, 1, "", "outputCol"], [44, 2, 1, "", "predictionsLimit"], [44, 3, 1, "", "read"], [44, 2, 1, "", "s3KnowledgeBaseName"], [44, 3, 1, "", "save"], [44, 3, 1, "", "set"], [44, 3, 1, "", "setEmbeddingType"], [44, 3, 1, "", "setForceInputTypeValidation"], [44, 3, 1, "", "setInputCols"], [44, 3, 1, "", "setLazyAnnotator"], [44, 3, 1, "", "setLevenshteinDistanceThresholdParam"], [44, 3, 1, "", "setNarrowWithApproximateMatching"], [44, 3, 1, "", "setNearMatchingGapParam"], [44, 3, 1, "", "setNumFirstChars"], [44, 3, 1, "", "setOutputCol"], [44, 3, 1, "", "setParamValue"], [44, 3, 1, "", "setPredictionLimit"], [44, 3, 1, "", "setS3KnowledgeBaseName"], [44, 3, 1, "", "setTokenSearch"], [44, 2, 1, "", "skipLPInputColsValidation"], [44, 2, 1, "", "tokenSearch"], [44, 3, 1, "", "write"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[44, 3, 1, "", "clear"], [44, 3, 1, "", "copy"], [44, 2, 1, "", "embeddingTypeParam"], [44, 3, 1, "", "explainParam"], [44, 3, 1, "", "explainParams"], [44, 3, 1, "", "extractParamMap"], [44, 3, 1, "", "getInputCols"], [44, 3, 1, "", "getLazyAnnotator"], [44, 3, 1, "", "getOrDefault"], [44, 3, 1, "", "getOutputCol"], [44, 3, 1, "", "getParam"], [44, 3, 1, "", "getParamValue"], [44, 2, 1, "", "getter_attrs"], [44, 3, 1, "", "hasDefault"], [44, 3, 1, "", "hasParam"], [44, 2, 1, "", "inputAnnotatorTypes"], [44, 2, 1, "", "inputCols"], [44, 3, 1, "", "inputColsValidation"], [44, 3, 1, "", "isDefined"], [44, 3, 1, "", "isSet"], [44, 2, 1, "", "lazyAnnotator"], [44, 2, 1, "", "levenshteinDistanceThresholdParam"], [44, 3, 1, "", "load"], [44, 2, 1, "", "name"], [44, 2, 1, "", "narrowWithApproximateMatching"], [44, 2, 1, "", "nearMatchingGapParam"], [44, 2, 1, "", "numFirstChars"], [44, 2, 1, "", "optionalInputAnnotatorTypes"], [44, 2, 1, "", "outputAnnotatorType"], [44, 2, 1, "", "outputCol"], [44, 2, 1, "", "predictionsLimit"], [44, 3, 1, "", "pretrained"], [44, 3, 1, "", "read"], [44, 3, 1, "", "save"], [44, 3, 1, "", "set"], [44, 3, 1, "", "setEmbeddingType"], [44, 3, 1, "", "setForceInputTypeValidation"], [44, 3, 1, "", "setInputCols"], [44, 3, 1, "", "setLazyAnnotator"], [44, 3, 1, "", "setLevenshteinDistanceThresholdParam"], [44, 3, 1, "", "setNarrowWithApproximateMatching"], [44, 3, 1, "", "setNearMatchingGapParam"], [44, 3, 1, "", "setNumFirstChars"], [44, 3, 1, "", "setOutputCol"], [44, 3, 1, "", "setParamValue"], [44, 3, 1, "", "setParams"], [44, 3, 1, "", "setPredictionLimit"], [44, 3, 1, "", "setTokenSearch"], [44, 2, 1, "", "skipLPInputColsValidation"], [44, 2, 1, "", "tokenSearch"], [44, 3, 1, "", "transform"], [44, 3, 1, "", "write"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[45, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[45, 2, 1, "", "chunkCol"], [45, 3, 1, "", "clear"], [45, 3, 1, "", "copy"], [45, 3, 1, "", "explainParam"], [45, 3, 1, "", "explainParams"], [45, 3, 1, "", "extractParamMap"], [45, 2, 1, "", "failOnMissing"], [45, 3, 1, "", "getInputCols"], [45, 3, 1, "", "getLazyAnnotator"], [45, 3, 1, "", "getOrDefault"], [45, 3, 1, "", "getOutputCol"], [45, 3, 1, "", "getParam"], [45, 3, 1, "", "getParamValue"], [45, 2, 1, "", "getter_attrs"], [45, 3, 1, "", "hasDefault"], [45, 3, 1, "", "hasParam"], [45, 2, 1, "", "inputAnnotatorTypes"], [45, 2, 1, "", "inputCols"], [45, 3, 1, "", "inputColsValidation"], [45, 2, 1, "", "isArray"], [45, 3, 1, "", "isDefined"], [45, 3, 1, "", "isSet"], [45, 2, 1, "", "lazyAnnotator"], [45, 3, 1, "", "load"], [45, 2, 1, "", "lowerCase"], [45, 2, 1, "", "name"], [45, 2, 1, "", "optionalInputAnnotatorTypes"], [45, 2, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "outputCol"], [45, 3, 1, "", "read"], [45, 3, 1, "", "save"], [45, 3, 1, "", "set"], [45, 3, 1, "", "setChunkCol"], [45, 3, 1, "", "setFailOnMissing"], [45, 3, 1, "", "setInputCols"], [45, 3, 1, "", "setIsArray"], [45, 3, 1, "", "setLazyAnnotator"], [45, 3, 1, "", "setLowerCase"], [45, 3, 1, "", "setOutputCol"], [45, 3, 1, "", "setParamValue"], [45, 3, 1, "", "setParams"], [45, 3, 1, "", "setStartCol"], [45, 3, 1, "", "setStartColByTokenIndex"], [45, 2, 1, "", "startCol"], [45, 2, 1, "", "startColByTokenIndex"], [45, 3, 1, "", "transform"], [45, 3, 1, "", "write"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[46, 1, 1, "", "DocumentFiltererByClassifier"]], "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier": [[46, 2, 1, "", "blackList"], [46, 2, 1, "", "caseSensitive"], [46, 3, 1, "", "clear"], [46, 3, 1, "", "copy"], [46, 3, 1, "", "explainParam"], [46, 3, 1, "", "explainParams"], [46, 3, 1, "", "extractParamMap"], [46, 3, 1, "", "getInputCols"], [46, 3, 1, "", "getLazyAnnotator"], [46, 3, 1, "", "getOrDefault"], [46, 3, 1, "", "getOutputCol"], [46, 3, 1, "", "getParam"], [46, 3, 1, "", "getParamValue"], [46, 2, 1, "", "getter_attrs"], [46, 3, 1, "", "hasDefault"], [46, 3, 1, "", "hasParam"], [46, 2, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "inputCols"], [46, 3, 1, "", "inputColsValidation"], [46, 3, 1, "", "isDefined"], [46, 3, 1, "", "isSet"], [46, 2, 1, "", "lazyAnnotator"], [46, 3, 1, "", "load"], [46, 2, 1, "", "name"], [46, 2, 1, "", "optionalInputAnnotatorTypes"], [46, 2, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "outputCol"], [46, 3, 1, "", "read"], [46, 3, 1, "", "save"], [46, 3, 1, "", "set"], [46, 3, 1, "", "setBlackList"], [46, 3, 1, "", "setCaseSensitive"], [46, 3, 1, "", "setDenyList"], [46, 3, 1, "", "setForceInputTypeValidation"], [46, 3, 1, "", "setInputCols"], [46, 3, 1, "", "setLazyAnnotator"], [46, 3, 1, "", "setOutputCol"], [46, 3, 1, "", "setParamValue"], [46, 3, 1, "", "setParams"], [46, 3, 1, "", "setWhiteList"], [46, 2, 1, "", "skipLPInputColsValidation"], [46, 3, 1, "", "transform"], [46, 2, 1, "", "whiteList"], [46, 3, 1, "", "write"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[47, 1, 1, "", "DocumentFiltererByNER"]], "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER": [[47, 2, 1, "", "blackList"], [47, 2, 1, "", "caseSensitive"], [47, 3, 1, "", "clear"], [47, 3, 1, "", "copy"], [47, 3, 1, "", "explainParam"], [47, 3, 1, "", "explainParams"], [47, 3, 1, "", "extractParamMap"], [47, 3, 1, "", "getInputCols"], [47, 3, 1, "", "getLazyAnnotator"], [47, 3, 1, "", "getOrDefault"], [47, 3, 1, "", "getOutputCol"], [47, 3, 1, "", "getParam"], [47, 3, 1, "", "getParamValue"], [47, 2, 1, "", "getter_attrs"], [47, 3, 1, "", "hasDefault"], [47, 3, 1, "", "hasParam"], [47, 2, 1, "", "inputAnnotatorTypes"], [47, 2, 1, "", "inputCols"], [47, 3, 1, "", "inputColsValidation"], [47, 3, 1, "", "isDefined"], [47, 3, 1, "", "isSet"], [47, 2, 1, "", "joinString"], [47, 2, 1, "", "lazyAnnotator"], [47, 3, 1, "", "load"], [47, 2, 1, "", "name"], [47, 2, 1, "", "optionalInputAnnotatorTypes"], [47, 2, 1, "", "outputAnnotatorType"], [47, 2, 1, "", "outputAsDocument"], [47, 2, 1, "", "outputCol"], [47, 3, 1, "", "read"], [47, 3, 1, "", "save"], [47, 3, 1, "", "set"], [47, 3, 1, "", "setBlackList"], [47, 3, 1, "", "setCaseSensitive"], [47, 3, 1, "", "setDenyList"], [47, 3, 1, "", "setForceInputTypeValidation"], [47, 3, 1, "", "setInputCols"], [47, 3, 1, "", "setLazyAnnotator"], [47, 3, 1, "", "setOutputCol"], [47, 3, 1, "", "setParamValue"], [47, 3, 1, "", "setParams"], [47, 3, 1, "", "setWhiteList"], [47, 2, 1, "", "skipLPInputColsValidation"], [47, 3, 1, "", "transform"], [47, 2, 1, "", "whiteList"], [47, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings": [[48, 0, 0, "-", "average_embeddings"], [49, 0, 0, "-", "bert_sentence_embeddings"], [50, 0, 0, "-", "entity_chunk_embeddings"], [51, 0, 0, "-", "extractive_summarization"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[48, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[48, 3, 1, "", "clear"], [48, 3, 1, "", "copy"], [48, 3, 1, "", "explainParam"], [48, 3, 1, "", "explainParams"], [48, 3, 1, "", "extractParamMap"], [48, 3, 1, "", "getInputCols"], [48, 3, 1, "", "getLazyAnnotator"], [48, 3, 1, "", "getOrDefault"], [48, 3, 1, "", "getOutputCol"], [48, 3, 1, "", "getParam"], [48, 3, 1, "", "getParamValue"], [48, 2, 1, "", "getter_attrs"], [48, 3, 1, "", "hasDefault"], [48, 3, 1, "", "hasParam"], [48, 2, 1, "", "inputAnnotatorTypes"], [48, 2, 1, "", "inputCols"], [48, 3, 1, "", "inputColsValidation"], [48, 3, 1, "", "isDefined"], [48, 3, 1, "", "isSet"], [48, 2, 1, "", "lazyAnnotator"], [48, 3, 1, "", "load"], [48, 2, 1, "", "name"], [48, 2, 1, "", "optionalInputAnnotatorTypes"], [48, 2, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "outputCol"], [48, 3, 1, "", "read"], [48, 3, 1, "", "save"], [48, 3, 1, "", "set"], [48, 3, 1, "", "setForceInputTypeValidation"], [48, 3, 1, "", "setInputCols"], [48, 3, 1, "", "setLazyAnnotator"], [48, 3, 1, "", "setOutputCol"], [48, 3, 1, "", "setParamValue"], [48, 3, 1, "", "setParams"], [48, 2, 1, "", "skipLPInputColsValidation"], [48, 3, 1, "", "transform"], [48, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[49, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[49, 2, 1, "", "batchSize"], [49, 2, 1, "", "caseSensitive"], [49, 2, 1, "", "chunkWeight"], [49, 3, 1, "", "clear"], [49, 2, 1, "", "configProtoBytes"], [49, 3, 1, "", "copy"], [49, 2, 1, "", "dimension"], [49, 2, 1, "", "engine"], [49, 3, 1, "", "explainParam"], [49, 3, 1, "", "explainParams"], [49, 3, 1, "", "extractParamMap"], [49, 3, 1, "", "getBatchSize"], [49, 3, 1, "", "getCaseSensitive"], [49, 3, 1, "", "getDimension"], [49, 3, 1, "", "getEngine"], [49, 3, 1, "", "getInputCols"], [49, 3, 1, "", "getLazyAnnotator"], [49, 3, 1, "", "getMaxSentenceLength"], [49, 3, 1, "", "getOrDefault"], [49, 3, 1, "", "getOutputCol"], [49, 3, 1, "", "getParam"], [49, 3, 1, "", "getParamValue"], [49, 3, 1, "", "getStorageRef"], [49, 2, 1, "", "getter_attrs"], [49, 3, 1, "", "hasDefault"], [49, 3, 1, "", "hasParam"], [49, 2, 1, "", "inputAnnotatorTypes"], [49, 2, 1, "", "inputCols"], [49, 3, 1, "", "inputColsValidation"], [49, 3, 1, "", "isDefined"], [49, 2, 1, "", "isLong"], [49, 3, 1, "", "isSet"], [49, 2, 1, "", "lazyAnnotator"], [49, 3, 1, "", "load"], [49, 3, 1, "", "loadSavedModel"], [49, 2, 1, "", "maxSentenceLength"], [49, 2, 1, "", "max_length_limit"], [49, 2, 1, "", "name"], [49, 2, 1, "", "optionalInputAnnotatorTypes"], [49, 2, 1, "", "outputAnnotatorType"], [49, 2, 1, "", "outputCol"], [49, 3, 1, "", "pretrained"], [49, 3, 1, "", "read"], [49, 3, 1, "", "save"], [49, 3, 1, "", "set"], [49, 3, 1, "", "setBatchSize"], [49, 3, 1, "", "setCaseSensitive"], [49, 3, 1, "", "setChunkWeight"], [49, 3, 1, "", "setConfigProtoBytes"], [49, 3, 1, "", "setDimension"], [49, 3, 1, "", "setInputCols"], [49, 3, 1, "", "setIsLong"], [49, 3, 1, "", "setLazyAnnotator"], [49, 3, 1, "", "setMaxSentenceLength"], [49, 3, 1, "", "setOutputCol"], [49, 3, 1, "", "setParamValue"], [49, 3, 1, "", "setParams"], [49, 3, 1, "", "setStorageRef"], [49, 2, 1, "", "storageRef"], [49, 3, 1, "", "transform"], [49, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[50, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[50, 2, 1, "", "batchSize"], [50, 2, 1, "", "caseSensitive"], [50, 3, 1, "", "clear"], [50, 2, 1, "", "configProtoBytes"], [50, 3, 1, "", "copy"], [50, 2, 1, "", "dimension"], [50, 2, 1, "", "engine"], [50, 2, 1, "", "entityWeights"], [50, 3, 1, "", "explainParam"], [50, 3, 1, "", "explainParams"], [50, 3, 1, "", "extractParamMap"], [50, 3, 1, "", "getBatchSize"], [50, 3, 1, "", "getCaseSensitive"], [50, 3, 1, "", "getDimension"], [50, 3, 1, "", "getEngine"], [50, 3, 1, "", "getInputCols"], [50, 3, 1, "", "getLazyAnnotator"], [50, 3, 1, "", "getMaxSentenceLength"], [50, 3, 1, "", "getOrDefault"], [50, 3, 1, "", "getOutputCol"], [50, 3, 1, "", "getParam"], [50, 3, 1, "", "getParamValue"], [50, 3, 1, "", "getStorageRef"], [50, 2, 1, "", "getter_attrs"], [50, 3, 1, "", "hasDefault"], [50, 3, 1, "", "hasParam"], [50, 2, 1, "", "inputAnnotatorTypes"], [50, 2, 1, "", "inputCols"], [50, 3, 1, "", "inputColsValidation"], [50, 3, 1, "", "isDefined"], [50, 2, 1, "", "isLong"], [50, 3, 1, "", "isSet"], [50, 2, 1, "", "lazyAnnotator"], [50, 3, 1, "", "load"], [50, 3, 1, "", "loadSavedModel"], [50, 2, 1, "", "maxSentenceLength"], [50, 2, 1, "", "maxSyntacticDistance"], [50, 2, 1, "", "max_length_limit"], [50, 2, 1, "", "name"], [50, 2, 1, "", "optionalInputAnnotatorTypes"], [50, 2, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "outputCol"], [50, 3, 1, "", "pretrained"], [50, 3, 1, "", "read"], [50, 3, 1, "", "save"], [50, 3, 1, "", "set"], [50, 3, 1, "", "setBatchSize"], [50, 3, 1, "", "setCaseSensitive"], [50, 3, 1, "", "setConfigProtoBytes"], [50, 3, 1, "", "setDimension"], [50, 3, 1, "", "setEntityWeights"], [50, 3, 1, "", "setInputCols"], [50, 3, 1, "", "setIsLong"], [50, 3, 1, "", "setLazyAnnotator"], [50, 3, 1, "", "setMaxSentenceLength"], [50, 3, 1, "", "setMaxSyntacticDistance"], [50, 3, 1, "", "setOutputCol"], [50, 3, 1, "", "setParamValue"], [50, 3, 1, "", "setParams"], [50, 3, 1, "", "setStorageRef"], [50, 3, 1, "", "setTargetEntities"], [50, 2, 1, "", "storageRef"], [50, 2, 1, "", "targetEntities"], [50, 3, 1, "", "transform"], [50, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[51, 1, 1, "", "ExtractiveSummarization"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization": [[51, 3, 1, "", "clear"], [51, 3, 1, "", "copy"], [51, 3, 1, "", "explainParam"], [51, 3, 1, "", "explainParams"], [51, 3, 1, "", "extractParamMap"], [51, 3, 1, "", "getInputCols"], [51, 3, 1, "", "getLazyAnnotator"], [51, 3, 1, "", "getOrDefault"], [51, 3, 1, "", "getOutputCol"], [51, 3, 1, "", "getParam"], [51, 3, 1, "", "getParamValue"], [51, 2, 1, "", "getter_attrs"], [51, 3, 1, "", "hasDefault"], [51, 3, 1, "", "hasParam"], [51, 2, 1, "", "inputAnnotatorTypes"], [51, 2, 1, "", "inputCols"], [51, 3, 1, "", "inputColsValidation"], [51, 3, 1, "", "isDefined"], [51, 3, 1, "", "isSet"], [51, 2, 1, "", "lazyAnnotator"], [51, 3, 1, "", "load"], [51, 2, 1, "", "name"], [51, 2, 1, "", "optionalInputAnnotatorTypes"], [51, 2, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "outputCol"], [51, 3, 1, "", "read"], [51, 2, 1, "", "returnSingleDocument"], [51, 3, 1, "", "save"], [51, 3, 1, "", "set"], [51, 3, 1, "", "setForceInputTypeValidation"], [51, 3, 1, "", "setInputCols"], [51, 3, 1, "", "setLazyAnnotator"], [51, 3, 1, "", "setOutputCol"], [51, 3, 1, "", "setParamValue"], [51, 3, 1, "", "setParams"], [51, 3, 1, "", "setReturnSingleDocument"], [51, 3, 1, "", "setSimilarityThreshold"], [51, 3, 1, "", "setSummarySize"], [51, 2, 1, "", "similarityThreshold"], [51, 2, 1, "", "skipLPInputColsValidation"], [51, 2, 1, "", "summarySize"], [51, 3, 1, "", "transform"], [51, 3, 1, "", "write"]], "sparknlp_jsl.annotator.er": [[53, 0, 0, "-", "entity_ruler_internal"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[53, 1, 1, "", "EntityRulerInternalApproach"], [53, 1, 1, "", "EntityRulerInternalModel"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach": [[53, 2, 1, "", "alphabet"], [53, 2, 1, "", "caseSensitive"], [53, 3, 1, "", "clear"], [53, 3, 1, "", "copy"], [53, 2, 1, "", "enableInMemoryStorage"], [53, 3, 1, "", "explainParam"], [53, 3, 1, "", "explainParams"], [53, 3, 1, "", "extractParamMap"], [53, 3, 1, "", "fit"], [53, 3, 1, "", "fitMultiple"], [53, 3, 1, "", "getCaseSensitive"], [53, 3, 1, "", "getEnableInMemoryStorage"], [53, 3, 1, "", "getIncludeStorage"], [53, 3, 1, "", "getInputCols"], [53, 3, 1, "", "getLazyAnnotator"], [53, 3, 1, "", "getOrDefault"], [53, 3, 1, "", "getOutputCol"], [53, 3, 1, "", "getParam"], [53, 3, 1, "", "getParamValue"], [53, 3, 1, "", "getStoragePath"], [53, 3, 1, "", "getStorageRef"], [53, 2, 1, "", "getter_attrs"], [53, 3, 1, "", "hasDefault"], [53, 3, 1, "", "hasParam"], [53, 2, 1, "", "includeStorage"], [53, 2, 1, "", "inputAnnotatorTypes"], [53, 2, 1, "", "inputCols"], [53, 3, 1, "", "inputColsValidation"], [53, 3, 1, "", "isDefined"], [53, 3, 1, "", "isSet"], [53, 2, 1, "", "lazyAnnotator"], [53, 3, 1, "", "load"], [53, 2, 1, "", "name"], [53, 2, 1, "", "optionalInputAnnotatorTypes"], [53, 2, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "outputCol"], [53, 2, 1, "", "patternsResource"], [53, 3, 1, "", "read"], [53, 3, 1, "", "save"], [53, 2, 1, "", "sentenceMatch"], [53, 3, 1, "", "set"], [53, 3, 1, "", "setAlphabetResource"], [53, 3, 1, "", "setCaseSensitive"], [53, 3, 1, "", "setEnableInMemoryStorage"], [53, 3, 1, "", "setForceInputTypeValidation"], [53, 3, 1, "", "setIncludeStorage"], [53, 3, 1, "", "setInputCols"], [53, 3, 1, "", "setLazyAnnotator"], [53, 3, 1, "", "setOutputCol"], [53, 3, 1, "", "setParamValue"], [53, 3, 1, "", "setPatternsResource"], [53, 3, 1, "", "setSentenceMatch"], [53, 3, 1, "", "setStoragePath"], [53, 3, 1, "", "setStorageRef"], [53, 3, 1, "", "setUseStorage"], [53, 2, 1, "", "skipLPInputColsValidation"], [53, 2, 1, "", "storagePath"], [53, 2, 1, "", "storageRef"], [53, 2, 1, "", "useStorage"], [53, 3, 1, "", "write"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel": [[53, 2, 1, "", "caseSensitive"], [53, 3, 1, "", "clear"], [53, 3, 1, "", "copy"], [53, 2, 1, "", "database"], [53, 2, 1, "", "enableInMemoryStorage"], [53, 3, 1, "", "explainParam"], [53, 3, 1, "", "explainParams"], [53, 3, 1, "", "extractParamMap"], [53, 3, 1, "", "getCaseSensitive"], [53, 3, 1, "", "getEnableInMemoryStorage"], [53, 3, 1, "", "getIncludeStorage"], [53, 3, 1, "", "getInputCols"], [53, 3, 1, "", "getLazyAnnotator"], [53, 3, 1, "", "getOrDefault"], [53, 3, 1, "", "getOutputCol"], [53, 3, 1, "", "getParam"], [53, 3, 1, "", "getParamValue"], [53, 3, 1, "", "getStorageRef"], [53, 2, 1, "", "getter_attrs"], [53, 3, 1, "", "hasDefault"], [53, 3, 1, "", "hasParam"], [53, 2, 1, "", "includeStorage"], [53, 2, 1, "", "inputAnnotatorTypes"], [53, 2, 1, "", "inputCols"], [53, 3, 1, "", "inputColsValidation"], [53, 3, 1, "", "isDefined"], [53, 3, 1, "", "isSet"], [53, 2, 1, "", "lazyAnnotator"], [53, 3, 1, "", "load"], [53, 3, 1, "", "loadStorage"], [53, 3, 1, "", "loadStorages"], [53, 2, 1, "", "name"], [53, 2, 1, "", "optionalInputAnnotatorTypes"], [53, 2, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "outputCol"], [53, 3, 1, "", "pretrained"], [53, 3, 1, "", "read"], [53, 3, 1, "", "save"], [53, 3, 1, "", "saveStorage"], [53, 3, 1, "", "set"], [53, 3, 1, "", "setCaseSensitive"], [53, 3, 1, "", "setEnableInMemoryStorage"], [53, 3, 1, "", "setForceInputTypeValidation"], [53, 3, 1, "", "setIncludeStorage"], [53, 3, 1, "", "setInputCols"], [53, 3, 1, "", "setLazyAnnotator"], [53, 3, 1, "", "setOutputCol"], [53, 3, 1, "", "setParamValue"], [53, 3, 1, "", "setParams"], [53, 3, 1, "", "setStorageRef"], [53, 2, 1, "", "skipLPInputColsValidation"], [53, 2, 1, "", "storageRef"], [53, 3, 1, "", "transform"], [53, 3, 1, "", "write"]], "sparknlp_jsl.annotator.feature_assembler": [[55, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[55, 3, 1, "", "clear"], [55, 3, 1, "", "copy"], [55, 3, 1, "", "explainParam"], [55, 3, 1, "", "explainParams"], [55, 3, 1, "", "extractParamMap"], [55, 3, 1, "", "getInputCols"], [55, 3, 1, "", "getLazyAnnotator"], [55, 3, 1, "", "getOrDefault"], [55, 3, 1, "", "getOutputCol"], [55, 3, 1, "", "getParam"], [55, 3, 1, "", "getParamValue"], [55, 2, 1, "", "getter_attrs"], [55, 3, 1, "", "hasDefault"], [55, 3, 1, "", "hasParam"], [55, 2, 1, "", "inputAnnotatorTypes"], [55, 2, 1, "", "inputCols"], [55, 3, 1, "", "inputColsValidation"], [55, 3, 1, "", "isDefined"], [55, 3, 1, "", "isSet"], [55, 2, 1, "", "lazyAnnotator"], [55, 3, 1, "", "load"], [55, 2, 1, "", "name"], [55, 2, 1, "", "optionalInputAnnotatorTypes"], [55, 2, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "outputCol"], [55, 3, 1, "", "read"], [55, 3, 1, "", "save"], [55, 3, 1, "", "set"], [55, 3, 1, "", "setForceInputTypeValidation"], [55, 3, 1, "", "setInputCols"], [55, 3, 1, "", "setLazyAnnotator"], [55, 3, 1, "", "setOutputCol"], [55, 3, 1, "", "setParamValue"], [55, 3, 1, "", "setParams"], [55, 2, 1, "", "skipLPInputColsValidation"], [55, 3, 1, "", "transform"], [55, 3, 1, "", "write"]], "sparknlp_jsl.annotator.filtering_params": [[56, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[56, 2, 1, "", "blackList"], [56, 2, 1, "", "caseSensitive"], [56, 2, 1, "", "criteria"], [56, 2, 1, "", "filterValue"], [56, 2, 1, "", "regex"], [56, 3, 1, "", "setBlackList"], [56, 3, 1, "", "setCaseSensitive"], [56, 3, 1, "", "setCriteria"], [56, 3, 1, "", "setDenyList"], [56, 3, 1, "", "setFilterValue"], [56, 3, 1, "", "setRegex"], [56, 3, 1, "", "setWhiteList"], [56, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.flattener": [[57, 1, 1, "", "Flattener"]], "sparknlp_jsl.annotator.flattener.Flattener": [[57, 2, 1, "", "cleanAnnotations"], [57, 3, 1, "", "clear"], [57, 3, 1, "", "copy"], [57, 3, 1, "", "explainParam"], [57, 3, 1, "", "explainParams"], [57, 3, 1, "", "extractParamMap"], [57, 2, 1, "", "flattenExplodedColumns"], [57, 3, 1, "", "getInputCols"], [57, 3, 1, "", "getOrDefault"], [57, 3, 1, "", "getParam"], [57, 3, 1, "", "getParamValue"], [57, 2, 1, "", "getter_attrs"], [57, 3, 1, "", "hasDefault"], [57, 3, 1, "", "hasParam"], [57, 2, 1, "", "inputCols"], [57, 3, 1, "", "isDefined"], [57, 3, 1, "", "isSet"], [57, 2, 1, "", "keepOriginalColumns"], [57, 3, 1, "", "load"], [57, 2, 1, "", "name"], [57, 2, 1, "", "orderByColumn"], [57, 2, 1, "", "orderDescending"], [57, 2, 1, "", "outputAnnotatorType"], [57, 3, 1, "", "read"], [57, 3, 1, "", "save"], [57, 3, 1, "", "set"], [57, 3, 1, "", "setCleanAnnotations"], [57, 3, 1, "", "setExplodeSelectedFields"], [57, 3, 1, "", "setFlattenExplodedColumns"], [57, 3, 1, "", "setInputCols"], [57, 3, 1, "", "setKeepOriginalColumns"], [57, 3, 1, "", "setOrderByColumn"], [57, 3, 1, "", "setOrderDescending"], [57, 3, 1, "", "setParamValue"], [57, 3, 1, "", "setParams"], [57, 3, 1, "", "transform"], [57, 3, 1, "", "write"]], "sparknlp_jsl.annotator.generic_classifier": [[58, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[58, 1, 1, "", "GenericClassifierApproach"], [58, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[58, 2, 1, "", "batchSize"], [58, 3, 1, "", "clear"], [58, 3, 1, "", "copy"], [58, 2, 1, "", "datasetInfo"], [58, 2, 1, "", "doExceptionHandling"], [58, 2, 1, "", "dropout"], [58, 2, 1, "", "engine"], [58, 2, 1, "", "epochsN"], [58, 3, 1, "", "explainParam"], [58, 3, 1, "", "explainParams"], [58, 3, 1, "", "extractParamMap"], [58, 2, 1, "", "featureScaling"], [58, 3, 1, "", "fit"], [58, 3, 1, "", "fitMultiple"], [58, 2, 1, "", "fixImbalance"], [58, 3, 1, "", "getEngine"], [58, 3, 1, "", "getInputCols"], [58, 3, 1, "", "getLazyAnnotator"], [58, 3, 1, "", "getOrDefault"], [58, 3, 1, "", "getOutputCol"], [58, 3, 1, "", "getParam"], [58, 3, 1, "", "getParamValue"], [58, 2, 1, "", "getter_attrs"], [58, 3, 1, "", "hasDefault"], [58, 3, 1, "", "hasParam"], [58, 2, 1, "", "inputAnnotatorTypes"], [58, 2, 1, "", "inputCols"], [58, 3, 1, "", "inputColsValidation"], [58, 3, 1, "", "isDefined"], [58, 3, 1, "", "isSet"], [58, 2, 1, "", "labelColumn"], [58, 2, 1, "", "lazyAnnotator"], [58, 2, 1, "", "learningRate"], [58, 3, 1, "", "load"], [58, 2, 1, "", "modelFile"], [58, 2, 1, "", "multiClass"], [58, 2, 1, "", "optionalInputAnnotatorTypes"], [58, 2, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "outputCol"], [58, 2, 1, "", "outputLogsPath"], [58, 3, 1, "", "read"], [58, 3, 1, "", "save"], [58, 3, 1, "", "set"], [58, 3, 1, "", "setBatchSize"], [58, 3, 1, "", "setDatasetInfo"], [58, 3, 1, "", "setDoExceptionHandling"], [58, 3, 1, "", "setDropout"], [58, 3, 1, "", "setEpochsNumber"], [58, 3, 1, "", "setFeatureScaling"], [58, 3, 1, "", "setFixImbalance"], [58, 3, 1, "", "setForceInputTypeValidation"], [58, 3, 1, "", "setInputCols"], [58, 3, 1, "", "setLabelCol"], [58, 3, 1, "", "setLazyAnnotator"], [58, 3, 1, "", "setLearningRate"], [58, 3, 1, "", "setModelFile"], [58, 3, 1, "", "setMultiClass"], [58, 3, 1, "", "setOutputCol"], [58, 3, 1, "", "setOutputLogsPath"], [58, 3, 1, "", "setParamValue"], [58, 3, 1, "", "setValidationSplit"], [58, 2, 1, "", "skipLPInputColsValidation"], [58, 2, 1, "", "validationSplit"], [58, 3, 1, "", "write"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[58, 2, 1, "", "classes"], [58, 3, 1, "", "clear"], [58, 3, 1, "", "copy"], [58, 2, 1, "", "datasetInfo"], [58, 2, 1, "", "doExceptionHandling"], [58, 3, 1, "", "explainParam"], [58, 3, 1, "", "explainParams"], [58, 3, 1, "", "extractParamMap"], [58, 2, 1, "", "featureScaling"], [58, 3, 1, "", "getInputCols"], [58, 3, 1, "", "getLazyAnnotator"], [58, 3, 1, "", "getOrDefault"], [58, 3, 1, "", "getOutputCol"], [58, 3, 1, "", "getParam"], [58, 3, 1, "", "getParamValue"], [58, 2, 1, "", "getter_attrs"], [58, 3, 1, "", "hasDefault"], [58, 3, 1, "", "hasParam"], [58, 2, 1, "", "inputAnnotatorTypes"], [58, 2, 1, "", "inputCols"], [58, 3, 1, "", "inputColsValidation"], [58, 3, 1, "", "isDefined"], [58, 3, 1, "", "isSet"], [58, 2, 1, "", "lazyAnnotator"], [58, 3, 1, "", "load"], [58, 2, 1, "", "multiClass"], [58, 2, 1, "", "name"], [58, 2, 1, "", "optionalInputAnnotatorTypes"], [58, 2, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "outputCol"], [58, 3, 1, "", "pretrained"], [58, 3, 1, "", "read"], [58, 3, 1, "", "save"], [58, 3, 1, "", "set"], [58, 3, 1, "", "setDatasetInfo"], [58, 3, 1, "", "setDoExceptionHandling"], [58, 3, 1, "", "setFeatureScaling"], [58, 3, 1, "", "setForceInputTypeValidation"], [58, 3, 1, "", "setInputCols"], [58, 3, 1, "", "setLazyAnnotator"], [58, 3, 1, "", "setMultiClass"], [58, 3, 1, "", "setOutputCol"], [58, 3, 1, "", "setParamValue"], [58, 3, 1, "", "setParams"], [58, 2, 1, "", "skipLPInputColsValidation"], [58, 3, 1, "", "transform"], [58, 3, 1, "", "write"]], "sparknlp_jsl.annotator.handle_exception_params": [[60, 1, 1, "", "HandleExceptionParams"]], "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams": [[60, 2, 1, "", "doExceptionHandling"], [60, 3, 1, "", "setDoExceptionHandling"]], "sparknlp_jsl.annotator.matcher": [[63, 0, 0, "-", "text_matcher_internal"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[63, 1, 1, "", "TextMatcherInternal"], [63, 1, 1, "", "TextMatcherInternalModel"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal": [[63, 2, 1, "", "buildFromTokens"], [63, 2, 1, "", "caseSensitive"], [63, 3, 1, "", "clear"], [63, 3, 1, "", "copy"], [63, 2, 1, "", "delimiter"], [63, 2, 1, "", "entities"], [63, 2, 1, "", "entityValue"], [63, 3, 1, "", "explainParam"], [63, 3, 1, "", "explainParams"], [63, 3, 1, "", "extractParamMap"], [63, 3, 1, "", "fit"], [63, 3, 1, "", "fitMultiple"], [63, 3, 1, "", "getInputCols"], [63, 3, 1, "", "getLazyAnnotator"], [63, 3, 1, "", "getOrDefault"], [63, 3, 1, "", "getOutputCol"], [63, 3, 1, "", "getParam"], [63, 3, 1, "", "getParamValue"], [63, 2, 1, "", "getter_attrs"], [63, 3, 1, "", "hasDefault"], [63, 3, 1, "", "hasParam"], [63, 2, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "inputCols"], [63, 3, 1, "", "inputColsValidation"], [63, 3, 1, "", "isDefined"], [63, 3, 1, "", "isSet"], [63, 2, 1, "", "lazyAnnotator"], [63, 3, 1, "", "load"], [63, 2, 1, "", "mergeOverlapping"], [63, 2, 1, "", "optionalInputAnnotatorTypes"], [63, 2, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "outputCol"], [63, 3, 1, "", "read"], [63, 3, 1, "", "save"], [63, 3, 1, "", "set"], [63, 3, 1, "", "setBuildFromTokens"], [63, 3, 1, "", "setCaseSensitive"], [63, 3, 1, "", "setDelimiter"], [63, 3, 1, "", "setEntities"], [63, 3, 1, "", "setEntityValue"], [63, 3, 1, "", "setForceInputTypeValidation"], [63, 3, 1, "", "setInputCols"], [63, 3, 1, "", "setLazyAnnotator"], [63, 3, 1, "", "setMergeOverlapping"], [63, 3, 1, "", "setOutputCol"], [63, 3, 1, "", "setParamValue"], [63, 2, 1, "", "skipLPInputColsValidation"], [63, 3, 1, "", "write"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel": [[63, 2, 1, "", "buildFromTokens"], [63, 2, 1, "", "caseSensitive"], [63, 3, 1, "", "clear"], [63, 3, 1, "", "copy"], [63, 2, 1, "", "delimiter"], [63, 2, 1, "", "entityValue"], [63, 3, 1, "", "explainParam"], [63, 3, 1, "", "explainParams"], [63, 3, 1, "", "extractParamMap"], [63, 3, 1, "", "getCaseSensitive"], [63, 3, 1, "", "getDelimiter"], [63, 3, 1, "", "getInputCols"], [63, 3, 1, "", "getLazyAnnotator"], [63, 3, 1, "", "getOrDefault"], [63, 3, 1, "", "getOutputCol"], [63, 3, 1, "", "getParam"], [63, 3, 1, "", "getParamValue"], [63, 2, 1, "", "getter_attrs"], [63, 3, 1, "", "hasDefault"], [63, 3, 1, "", "hasParam"], [63, 2, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "inputCols"], [63, 3, 1, "", "inputColsValidation"], [63, 3, 1, "", "isDefined"], [63, 3, 1, "", "isSet"], [63, 2, 1, "", "lazyAnnotator"], [63, 3, 1, "", "load"], [63, 2, 1, "", "mergeOverlapping"], [63, 2, 1, "", "name"], [63, 2, 1, "", "optionalInputAnnotatorTypes"], [63, 2, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "outputCol"], [63, 3, 1, "", "pretrained"], [63, 3, 1, "", "read"], [63, 3, 1, "", "save"], [63, 2, 1, "", "searchTrie"], [63, 3, 1, "", "set"], [63, 3, 1, "", "setBuildFromTokens"], [63, 3, 1, "", "setDelimiter"], [63, 3, 1, "", "setEntityValue"], [63, 3, 1, "", "setForceInputTypeValidation"], [63, 3, 1, "", "setInputCols"], [63, 3, 1, "", "setLazyAnnotator"], [63, 3, 1, "", "setMergeOverlapping"], [63, 3, 1, "", "setOutputCol"], [63, 3, 1, "", "setParamValue"], [63, 3, 1, "", "setParams"], [63, 2, 1, "", "skipLPInputColsValidation"], [63, 3, 1, "", "transform"], [63, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge": [[64, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[64, 1, 1, "", "ChunkMergeApproach"], [64, 1, 1, "", "ChunkMergeModel"], [64, 1, 1, "", "MergeCommonParams"], [64, 1, 1, "", "MergeFeatureParams"], [64, 1, 1, "", "MergePrioritizationParams"], [64, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[64, 2, 1, "", "blackList"], [64, 2, 1, "", "caseSensitive"], [64, 2, 1, "", "chunkPrecedence"], [64, 2, 1, "", "chunkPrecedenceValuePrioritization"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "copy"], [64, 2, 1, "", "criteria"], [64, 2, 1, "", "defaultConfidence"], [64, 2, 1, "", "doExceptionHandling"], [64, 2, 1, "", "entitiesConfidenceResource"], [64, 3, 1, "", "explainParam"], [64, 3, 1, "", "explainParams"], [64, 3, 1, "", "extractParamMap"], [64, 2, 1, "", "falsePositivesResource"], [64, 2, 1, "", "filterValue"], [64, 3, 1, "", "fit"], [64, 3, 1, "", "fitMultiple"], [64, 3, 1, "", "getInputCols"], [64, 3, 1, "", "getLazyAnnotator"], [64, 3, 1, "", "getOrDefault"], [64, 3, 1, "", "getOutputCol"], [64, 3, 1, "", "getParam"], [64, 3, 1, "", "getParamValue"], [64, 2, 1, "", "getter_attrs"], [64, 3, 1, "", "hasDefault"], [64, 3, 1, "", "hasParam"], [64, 2, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "inputCols"], [64, 3, 1, "", "inputColsValidation"], [64, 3, 1, "", "isDefined"], [64, 3, 1, "", "isSet"], [64, 2, 1, "", "lazyAnnotator"], [64, 3, 1, "", "load"], [64, 2, 1, "", "mergeOverlapping"], [64, 2, 1, "", "name"], [64, 2, 1, "", "optionalInputAnnotatorTypes"], [64, 2, 1, "", "orderingFeatures"], [64, 2, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "outputCol"], [64, 3, 1, "", "read"], [64, 2, 1, "", "regex"], [64, 2, 1, "", "replaceDictResource"], [64, 3, 1, "", "save"], [64, 2, 1, "", "selectionStrategy"], [64, 3, 1, "", "set"], [64, 3, 1, "", "setBlackList"], [64, 3, 1, "", "setCaseSensitive"], [64, 3, 1, "", "setChunkPrecedence"], [64, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [64, 3, 1, "", "setCriteria"], [64, 3, 1, "", "setDefaultConfidence"], [64, 3, 1, "", "setDenyList"], [64, 3, 1, "", "setDoExceptionHandling"], [64, 3, 1, "", "setEntitiesConfidence"], [64, 3, 1, "", "setEntitiesConfidenceResource"], [64, 3, 1, "", "setFalsePositivesResource"], [64, 3, 1, "", "setFilterValue"], [64, 3, 1, "", "setForceInputTypeValidation"], [64, 3, 1, "", "setInputCols"], [64, 3, 1, "", "setLazyAnnotator"], [64, 3, 1, "", "setMergeOverlapping"], [64, 3, 1, "", "setOrderingFeatures"], [64, 3, 1, "", "setOutputCol"], [64, 3, 1, "", "setParamValue"], [64, 3, 1, "", "setRegex"], [64, 3, 1, "", "setReplaceDictResource"], [64, 3, 1, "", "setSelectionStrategy"], [64, 3, 1, "", "setWhiteList"], [64, 2, 1, "", "skipLPInputColsValidation"], [64, 2, 1, "", "whiteList"], [64, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[64, 2, 1, "", "blackList"], [64, 2, 1, "", "caseSensitive"], [64, 2, 1, "", "chunkPrecedence"], [64, 2, 1, "", "chunkPrecedenceValuePrioritization"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "copy"], [64, 2, 1, "", "criteria"], [64, 2, 1, "", "defaultConfidence"], [64, 3, 1, "", "explainParam"], [64, 3, 1, "", "explainParams"], [64, 3, 1, "", "extractParamMap"], [64, 2, 1, "", "filterValue"], [64, 3, 1, "", "getInputCols"], [64, 3, 1, "", "getLazyAnnotator"], [64, 3, 1, "", "getOrDefault"], [64, 3, 1, "", "getOutputCol"], [64, 3, 1, "", "getParam"], [64, 3, 1, "", "getParamValue"], [64, 3, 1, "", "getReplaceDict"], [64, 2, 1, "", "getter_attrs"], [64, 3, 1, "", "hasDefault"], [64, 3, 1, "", "hasParam"], [64, 2, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "inputCols"], [64, 3, 1, "", "inputColsValidation"], [64, 3, 1, "", "isDefined"], [64, 3, 1, "", "isSet"], [64, 2, 1, "", "lazyAnnotator"], [64, 3, 1, "", "load"], [64, 2, 1, "", "mergeOverlapping"], [64, 2, 1, "", "name"], [64, 2, 1, "", "optionalInputAnnotatorTypes"], [64, 2, 1, "", "orderingFeatures"], [64, 2, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "outputCol"], [64, 3, 1, "", "pretrained"], [64, 3, 1, "", "read"], [64, 2, 1, "", "regex"], [64, 3, 1, "", "save"], [64, 2, 1, "", "selectionStrategy"], [64, 3, 1, "", "set"], [64, 3, 1, "", "setBlackList"], [64, 3, 1, "", "setCaseSensitive"], [64, 3, 1, "", "setChunkPrecedence"], [64, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [64, 3, 1, "", "setCriteria"], [64, 3, 1, "", "setDefaultConfidence"], [64, 3, 1, "", "setDenyList"], [64, 3, 1, "", "setFalsePositives"], [64, 3, 1, "", "setFilterValue"], [64, 3, 1, "", "setForceInputTypeValidation"], [64, 3, 1, "", "setInputCols"], [64, 3, 1, "", "setLazyAnnotator"], [64, 3, 1, "", "setMergeOverlapping"], [64, 3, 1, "", "setOrderingFeatures"], [64, 3, 1, "", "setOutputCol"], [64, 3, 1, "", "setParamValue"], [64, 3, 1, "", "setParams"], [64, 3, 1, "", "setRegex"], [64, 3, 1, "", "setReplaceDict"], [64, 3, 1, "", "setSelectionStrategy"], [64, 3, 1, "", "setWhiteList"], [64, 2, 1, "", "skipLPInputColsValidation"], [64, 3, 1, "", "transform"], [64, 2, 1, "", "whiteList"], [64, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[64, 2, 1, "", "mergeOverlapping"], [64, 3, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams": [[64, 3, 1, "", "getReplaceDict"], [64, 3, 1, "", "setFalsePositives"], [64, 3, 1, "", "setReplaceDict"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[64, 2, 1, "", "chunkPrecedence"], [64, 2, 1, "", "chunkPrecedenceValuePrioritization"], [64, 2, 1, "", "defaultConfidence"], [64, 2, 1, "", "orderingFeatures"], [64, 2, 1, "", "selectionStrategy"], [64, 3, 1, "", "setChunkPrecedence"], [64, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [64, 3, 1, "", "setDefaultConfidence"], [64, 3, 1, "", "setOrderingFeatures"], [64, 3, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[64, 2, 1, "", "entitiesConfidenceResource"], [64, 2, 1, "", "falsePositivesResource"], [64, 2, 1, "", "replaceDictResource"], [64, 3, 1, "", "setEntitiesConfidenceResource"], [64, 3, 1, "", "setFalsePositivesResource"], [64, 3, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[66, 1, 1, "", "MultiChunk2Doc"]], "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc": [[66, 2, 1, "", "blackList"], [66, 2, 1, "", "caseSensitive"], [66, 3, 1, "", "clear"], [66, 3, 1, "", "copy"], [66, 3, 1, "", "explainParam"], [66, 3, 1, "", "explainParams"], [66, 3, 1, "", "extractParamMap"], [66, 3, 1, "", "getInputCols"], [66, 3, 1, "", "getLazyAnnotator"], [66, 3, 1, "", "getOrDefault"], [66, 3, 1, "", "getOutputCol"], [66, 3, 1, "", "getParam"], [66, 3, 1, "", "getParamValue"], [66, 2, 1, "", "getter_attrs"], [66, 3, 1, "", "hasDefault"], [66, 3, 1, "", "hasParam"], [66, 2, 1, "", "inputAnnotatorTypes"], [66, 2, 1, "", "inputCols"], [66, 3, 1, "", "inputColsValidation"], [66, 3, 1, "", "isDefined"], [66, 3, 1, "", "isSet"], [66, 2, 1, "", "lazyAnnotator"], [66, 3, 1, "", "load"], [66, 2, 1, "", "name"], [66, 2, 1, "", "optionalInputAnnotatorTypes"], [66, 2, 1, "", "outputAnnotatorType"], [66, 2, 1, "", "outputCol"], [66, 2, 1, "", "prefix"], [66, 3, 1, "", "read"], [66, 3, 1, "", "save"], [66, 2, 1, "", "separator"], [66, 3, 1, "", "set"], [66, 3, 1, "", "setBlackList"], [66, 3, 1, "", "setCaseSensitive"], [66, 3, 1, "", "setDenyList"], [66, 3, 1, "", "setForceInputTypeValidation"], [66, 3, 1, "", "setInputCols"], [66, 3, 1, "", "setLazyAnnotator"], [66, 3, 1, "", "setOutputCol"], [66, 3, 1, "", "setParamValue"], [66, 3, 1, "", "setParams"], [66, 3, 1, "", "setPrefix"], [66, 3, 1, "", "setSeparator"], [66, 3, 1, "", "setSuffix"], [66, 3, 1, "", "setWhiteList"], [66, 2, 1, "", "skipLPInputColsValidation"], [66, 2, 1, "", "suffix"], [66, 3, 1, "", "transform"], [66, 2, 1, "", "whiteList"], [66, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner": [[68, 0, 0, "-", "iob_tagger"], [69, 0, 0, "-", "medical_ner"], [70, 0, 0, "-", "ner_chunker"], [71, 0, 0, "-", "ner_converter_internal"], [72, 0, 0, "-", "ner_template_render"], [73, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[68, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[68, 3, 1, "", "clear"], [68, 3, 1, "", "copy"], [68, 3, 1, "", "explainParam"], [68, 3, 1, "", "explainParams"], [68, 3, 1, "", "extractParamMap"], [68, 3, 1, "", "getInputCols"], [68, 3, 1, "", "getLazyAnnotator"], [68, 3, 1, "", "getOrDefault"], [68, 3, 1, "", "getOutputCol"], [68, 3, 1, "", "getParam"], [68, 3, 1, "", "getParamValue"], [68, 2, 1, "", "getter_attrs"], [68, 3, 1, "", "hasDefault"], [68, 3, 1, "", "hasParam"], [68, 2, 1, "", "inputAnnotatorTypes"], [68, 2, 1, "", "inputCols"], [68, 3, 1, "", "inputColsValidation"], [68, 3, 1, "", "isDefined"], [68, 3, 1, "", "isSet"], [68, 2, 1, "", "lazyAnnotator"], [68, 3, 1, "", "load"], [68, 2, 1, "", "name"], [68, 2, 1, "", "optionalInputAnnotatorTypes"], [68, 2, 1, "", "outputAnnotatorType"], [68, 2, 1, "", "outputCol"], [68, 3, 1, "", "read"], [68, 3, 1, "", "save"], [68, 2, 1, "", "scheme"], [68, 3, 1, "", "set"], [68, 3, 1, "", "setForceInputTypeValidation"], [68, 3, 1, "", "setInputCols"], [68, 3, 1, "", "setLazyAnnotator"], [68, 3, 1, "", "setOutputCol"], [68, 3, 1, "", "setParamValue"], [68, 3, 1, "", "setParams"], [68, 3, 1, "", "setScheme"], [68, 2, 1, "", "skipLPInputColsValidation"], [68, 3, 1, "", "transform"], [68, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.medical_ner": [[69, 1, 1, "", "MedicalNerApproach"], [69, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[69, 2, 1, "", "batchSize"], [69, 3, 1, "", "clear"], [69, 2, 1, "", "configProtoBytes"], [69, 3, 1, "", "copy"], [69, 2, 1, "", "datasetInfo"], [69, 2, 1, "", "dropout"], [69, 2, 1, "", "earlyStoppingCriterion"], [69, 2, 1, "", "earlyStoppingPatience"], [69, 2, 1, "", "enableMemoryOptimizer"], [69, 2, 1, "", "enableOutputLogs"], [69, 2, 1, "", "engine"], [69, 2, 1, "", "entities"], [69, 2, 1, "", "evaluationLogExtended"], [69, 3, 1, "", "explainParam"], [69, 3, 1, "", "explainParams"], [69, 3, 1, "", "extractParamMap"], [69, 3, 1, "", "fit"], [69, 3, 1, "", "fitMultiple"], [69, 3, 1, "", "getEngine"], [69, 3, 1, "", "getInputCols"], [69, 3, 1, "", "getLabelColumn"], [69, 3, 1, "", "getLazyAnnotator"], [69, 3, 1, "", "getOrDefault"], [69, 3, 1, "", "getOutputCol"], [69, 3, 1, "", "getParam"], [69, 3, 1, "", "getParamValue"], [69, 2, 1, "", "getter_attrs"], [69, 2, 1, "", "graphFile"], [69, 2, 1, "", "graphFolder"], [69, 3, 1, "", "hasDefault"], [69, 3, 1, "", "hasParam"], [69, 2, 1, "", "includeAllConfidenceScores"], [69, 2, 1, "", "includeConfidence"], [69, 2, 1, "", "inputAnnotatorTypes"], [69, 2, 1, "", "inputCols"], [69, 3, 1, "", "inputColsValidation"], [69, 3, 1, "", "isDefined"], [69, 3, 1, "", "isSet"], [69, 2, 1, "", "labelColumn"], [69, 2, 1, "", "lazyAnnotator"], [69, 3, 1, "", "load"], [69, 2, 1, "", "logPrefix"], [69, 2, 1, "", "lr"], [69, 2, 1, "", "maxEpochs"], [69, 2, 1, "", "minEpochs"], [69, 2, 1, "", "optionalInputAnnotatorTypes"], [69, 2, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "outputCol"], [69, 2, 1, "", "outputLogsPath"], [69, 2, 1, "", "overrideExistingTags"], [69, 2, 1, "", "po"], [69, 2, 1, "", "pretrainedModelPath"], [69, 2, 1, "", "randomSeed"], [69, 2, 1, "", "randomValidationSplitPerEpoch"], [69, 3, 1, "", "read"], [69, 3, 1, "", "save"], [69, 2, 1, "", "sentenceTokenIndex"], [69, 3, 1, "", "set"], [69, 3, 1, "", "setBatchSize"], [69, 3, 1, "", "setConfigProtoBytes"], [69, 3, 1, "", "setDatasetInfo"], [69, 3, 1, "", "setDoExceptionHandling"], [69, 3, 1, "", "setDropout"], [69, 3, 1, "", "setEarlyStoppingCriterion"], [69, 3, 1, "", "setEarlyStoppingPatience"], [69, 3, 1, "", "setEnableMemoryOptimizer"], [69, 3, 1, "", "setEnableOutputLogs"], [69, 3, 1, "", "setEntities"], [69, 3, 1, "", "setEvaluationLogExtended"], [69, 3, 1, "", "setForceInputTypeValidation"], [69, 3, 1, "", "setGraphFile"], [69, 3, 1, "", "setGraphFolder"], [69, 3, 1, "", "setIncludeAllConfidenceScores"], [69, 3, 1, "", "setIncludeConfidence"], [69, 3, 1, "", "setInputCols"], [69, 3, 1, "", "setLabelColumn"], [69, 3, 1, "", "setLazyAnnotator"], [69, 3, 1, "", "setLogPrefix"], [69, 3, 1, "", "setLr"], [69, 3, 1, "", "setMaxEpochs"], [69, 3, 1, "", "setMinEpochs"], [69, 3, 1, "", "setOutputCol"], [69, 3, 1, "", "setOutputLogsPath"], [69, 3, 1, "", "setOverrideExistingTags"], [69, 3, 1, "", "setParamValue"], [69, 3, 1, "", "setPo"], [69, 3, 1, "", "setPretrainedModelPath"], [69, 3, 1, "", "setRandomSeed"], [69, 3, 1, "", "setRandomValidationSplitPerEpoch"], [69, 3, 1, "", "setSentenceTokenIndex"], [69, 3, 1, "", "setTagsMapping"], [69, 3, 1, "", "setTestDataset"], [69, 3, 1, "", "setUseBestModel"], [69, 3, 1, "", "setUseContrib"], [69, 3, 1, "", "setValidationSplit"], [69, 3, 1, "", "setVerbose"], [69, 2, 1, "", "skipLPInputColsValidation"], [69, 2, 1, "", "testDataset"], [69, 2, 1, "", "uc"], [69, 2, 1, "", "useBestModel"], [69, 2, 1, "", "useContrib"], [69, 2, 1, "", "validationSplit"], [69, 2, 1, "", "verbose"], [69, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[69, 2, 1, "", "batchSize"], [69, 2, 1, "", "classes"], [69, 3, 1, "", "clear"], [69, 2, 1, "", "configProtoBytes"], [69, 3, 1, "", "copy"], [69, 2, 1, "", "datasetInfo"], [69, 2, 1, "", "doExceptionHandling"], [69, 3, 1, "", "explainParam"], [69, 3, 1, "", "explainParams"], [69, 3, 1, "", "extractParamMap"], [69, 3, 1, "", "getBatchSize"], [69, 3, 1, "", "getClasses"], [69, 3, 1, "", "getInputCols"], [69, 3, 1, "", "getLazyAnnotator"], [69, 3, 1, "", "getOrDefault"], [69, 3, 1, "", "getOutputCol"], [69, 3, 1, "", "getParam"], [69, 3, 1, "", "getParamValue"], [69, 3, 1, "", "getStorageRef"], [69, 3, 1, "", "getTrainingClassDistribution"], [69, 2, 1, "", "getter_attrs"], [69, 3, 1, "", "hasDefault"], [69, 3, 1, "", "hasParam"], [69, 2, 1, "", "includeAllConfidenceScores"], [69, 2, 1, "", "includeConfidence"], [69, 2, 1, "", "inferenceBatchSize"], [69, 2, 1, "", "inputAnnotatorTypes"], [69, 2, 1, "", "inputCols"], [69, 3, 1, "", "inputColsValidation"], [69, 3, 1, "", "isDefined"], [69, 3, 1, "", "isSet"], [69, 2, 1, "", "labelCasing"], [69, 2, 1, "", "lazyAnnotator"], [69, 3, 1, "", "load"], [69, 3, 1, "", "loadSavedModel"], [69, 2, 1, "", "name"], [69, 2, 1, "", "optionalInputAnnotatorTypes"], [69, 2, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "outputCol"], [69, 3, 1, "", "pretrained"], [69, 3, 1, "", "read"], [69, 3, 1, "", "save"], [69, 2, 1, "", "sentenceTokenIndex"], [69, 3, 1, "", "set"], [69, 3, 1, "", "setBatchSize"], [69, 3, 1, "", "setConfigProtoBytes"], [69, 3, 1, "", "setDatasetInfo"], [69, 3, 1, "", "setForceInputTypeValidation"], [69, 3, 1, "", "setIncludeConfidence"], [69, 3, 1, "", "setInferenceBatchSize"], [69, 3, 1, "", "setInputCols"], [69, 3, 1, "", "setLabelCasing"], [69, 3, 1, "", "setLazyAnnotator"], [69, 3, 1, "", "setOutputCol"], [69, 3, 1, "", "setParamValue"], [69, 3, 1, "", "setParams"], [69, 3, 1, "", "setSentenceTokenIndex"], [69, 3, 1, "", "setStorageRef"], [69, 2, 1, "", "skipLPInputColsValidation"], [69, 2, 1, "", "storageRef"], [69, 2, 1, "", "trainingClassDistribution"], [69, 3, 1, "", "transform"], [69, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[70, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[70, 3, 1, "", "clear"], [70, 3, 1, "", "copy"], [70, 3, 1, "", "explainParam"], [70, 3, 1, "", "explainParams"], [70, 3, 1, "", "extractParamMap"], [70, 3, 1, "", "getInputCols"], [70, 3, 1, "", "getLazyAnnotator"], [70, 3, 1, "", "getOrDefault"], [70, 3, 1, "", "getOutputCol"], [70, 3, 1, "", "getParam"], [70, 3, 1, "", "getParamValue"], [70, 2, 1, "", "getter_attrs"], [70, 3, 1, "", "hasDefault"], [70, 3, 1, "", "hasParam"], [70, 2, 1, "", "inputAnnotatorTypes"], [70, 2, 1, "", "inputCols"], [70, 3, 1, "", "inputColsValidation"], [70, 3, 1, "", "isDefined"], [70, 3, 1, "", "isSet"], [70, 2, 1, "", "lazyAnnotator"], [70, 3, 1, "", "load"], [70, 2, 1, "", "name"], [70, 2, 1, "", "optionalInputAnnotatorTypes"], [70, 2, 1, "", "outputAnnotatorType"], [70, 2, 1, "", "outputCol"], [70, 3, 1, "", "read"], [70, 2, 1, "", "regexParsers"], [70, 3, 1, "", "save"], [70, 3, 1, "", "set"], [70, 3, 1, "", "setForceInputTypeValidation"], [70, 3, 1, "", "setInputCols"], [70, 3, 1, "", "setLazyAnnotator"], [70, 3, 1, "", "setOutputCol"], [70, 3, 1, "", "setParamValue"], [70, 3, 1, "", "setParams"], [70, 3, 1, "", "setRegexParsers"], [70, 2, 1, "", "skipLPInputColsValidation"], [70, 3, 1, "", "transform"], [70, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[71, 1, 1, "", "CommonNerConverterInternalParams"], [71, 1, 1, "", "NerConverterInternal"], [71, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[71, 2, 1, "", "blackList"], [71, 2, 1, "", "caseSensitive"], [71, 2, 1, "", "criteria"], [71, 2, 1, "", "doExceptionHandling"], [71, 2, 1, "", "filterValue"], [71, 2, 1, "", "greedyMode"], [71, 2, 1, "", "ignoreStopWords"], [71, 2, 1, "", "preservePosition"], [71, 2, 1, "", "regex"], [71, 3, 1, "", "setAllowList"], [71, 3, 1, "", "setBlackList"], [71, 3, 1, "", "setCaseSensitive"], [71, 3, 1, "", "setCriteria"], [71, 3, 1, "", "setDenyList"], [71, 3, 1, "", "setDoExceptionHandling"], [71, 3, 1, "", "setFilterValue"], [71, 3, 1, "", "setGreedyMode"], [71, 3, 1, "", "setIgnoreStopWords"], [71, 3, 1, "", "setPreservePosition"], [71, 3, 1, "", "setRegex"], [71, 3, 1, "", "setThreshold"], [71, 3, 1, "", "setWhiteList"], [71, 2, 1, "", "threshold"], [71, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[71, 2, 1, "", "allPossibleFieldsToStandardize"], [71, 2, 1, "", "blackList"], [71, 2, 1, "", "caseSensitive"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "copy"], [71, 2, 1, "", "criteria"], [71, 2, 1, "", "doExceptionHandling"], [71, 3, 1, "", "explainParam"], [71, 3, 1, "", "explainParams"], [71, 3, 1, "", "extractParamMap"], [71, 2, 1, "", "filterValue"], [71, 3, 1, "", "fit"], [71, 3, 1, "", "fitMultiple"], [71, 3, 1, "", "getInputCols"], [71, 3, 1, "", "getLazyAnnotator"], [71, 3, 1, "", "getOrDefault"], [71, 3, 1, "", "getOutputCol"], [71, 3, 1, "", "getParam"], [71, 3, 1, "", "getParamValue"], [71, 2, 1, "", "getter_attrs"], [71, 2, 1, "", "greedyMode"], [71, 3, 1, "", "hasDefault"], [71, 3, 1, "", "hasParam"], [71, 2, 1, "", "ignoreStopWords"], [71, 2, 1, "", "includeOutputColumn"], [71, 2, 1, "", "includeStandardField"], [71, 2, 1, "", "inputAnnotatorTypes"], [71, 2, 1, "", "inputCols"], [71, 3, 1, "", "inputColsValidation"], [71, 3, 1, "", "isDefined"], [71, 3, 1, "", "isSet"], [71, 2, 1, "", "lazyAnnotator"], [71, 3, 1, "", "load"], [71, 2, 1, "", "name"], [71, 2, 1, "", "optionalInputAnnotatorTypes"], [71, 2, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "outputCol"], [71, 2, 1, "", "outputColumnKey"], [71, 2, 1, "", "preservePosition"], [71, 3, 1, "", "read"], [71, 2, 1, "", "regex"], [71, 2, 1, "", "replaceDictResource"], [71, 2, 1, "", "replaceLabels"], [71, 3, 1, "", "save"], [71, 3, 1, "", "set"], [71, 3, 1, "", "setAllPossibleFieldsToStandardize"], [71, 3, 1, "", "setAllowList"], [71, 3, 1, "", "setBlackList"], [71, 3, 1, "", "setCaseSensitive"], [71, 3, 1, "", "setCriteria"], [71, 3, 1, "", "setDenyList"], [71, 3, 1, "", "setDoExceptionHandling"], [71, 3, 1, "", "setFilterValue"], [71, 3, 1, "", "setGreedyMode"], [71, 3, 1, "", "setIgnoreStopWords"], [71, 3, 1, "", "setIncludeOutputColumn"], [71, 3, 1, "", "setIncludeStandardField"], [71, 3, 1, "", "setInputCols"], [71, 3, 1, "", "setLazyAnnotator"], [71, 3, 1, "", "setOutputCol"], [71, 3, 1, "", "setOutputColumnKey"], [71, 3, 1, "", "setParamValue"], [71, 3, 1, "", "setPreservePosition"], [71, 3, 1, "", "setRegex"], [71, 3, 1, "", "setReplaceDictResource"], [71, 3, 1, "", "setReplaceLabels"], [71, 3, 1, "", "setStandardFieldKey"], [71, 3, 1, "", "setThreshold"], [71, 3, 1, "", "setWhiteList"], [71, 2, 1, "", "standardFieldKey"], [71, 2, 1, "", "threshold"], [71, 2, 1, "", "whiteList"], [71, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[71, 2, 1, "", "allPossibleFieldsToStandardize"], [71, 2, 1, "", "blackList"], [71, 2, 1, "", "caseSensitive"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "copy"], [71, 2, 1, "", "criteria"], [71, 2, 1, "", "doExceptionHandling"], [71, 3, 1, "", "explainParam"], [71, 3, 1, "", "explainParams"], [71, 3, 1, "", "extractParamMap"], [71, 2, 1, "", "filterValue"], [71, 3, 1, "", "getInputCols"], [71, 3, 1, "", "getLazyAnnotator"], [71, 3, 1, "", "getOrDefault"], [71, 3, 1, "", "getOutputCol"], [71, 3, 1, "", "getParam"], [71, 3, 1, "", "getParamValue"], [71, 2, 1, "", "getter_attrs"], [71, 2, 1, "", "greedyMode"], [71, 3, 1, "", "hasDefault"], [71, 3, 1, "", "hasParam"], [71, 2, 1, "", "ignoreStopWords"], [71, 2, 1, "", "includeOutputColumn"], [71, 2, 1, "", "includeStandardField"], [71, 2, 1, "", "inputAnnotatorTypes"], [71, 2, 1, "", "inputCols"], [71, 3, 1, "", "inputColsValidation"], [71, 3, 1, "", "isDefined"], [71, 3, 1, "", "isSet"], [71, 2, 1, "", "lazyAnnotator"], [71, 3, 1, "", "load"], [71, 2, 1, "", "name"], [71, 2, 1, "", "optionalInputAnnotatorTypes"], [71, 2, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "outputCol"], [71, 2, 1, "", "outputColumnKey"], [71, 2, 1, "", "preservePosition"], [71, 3, 1, "", "read"], [71, 2, 1, "", "regex"], [71, 3, 1, "", "save"], [71, 3, 1, "", "set"], [71, 3, 1, "", "setAllPossibleFieldsToStandardize"], [71, 3, 1, "", "setAllowList"], [71, 3, 1, "", "setBlackList"], [71, 3, 1, "", "setCaseSensitive"], [71, 3, 1, "", "setCriteria"], [71, 3, 1, "", "setDenyList"], [71, 3, 1, "", "setDoExceptionHandling"], [71, 3, 1, "", "setFilterValue"], [71, 3, 1, "", "setForceInputTypeValidation"], [71, 3, 1, "", "setGreedyMode"], [71, 3, 1, "", "setIgnoreStopWords"], [71, 3, 1, "", "setIncludeOutputColumn"], [71, 3, 1, "", "setIncludeStandardField"], [71, 3, 1, "", "setInputCols"], [71, 3, 1, "", "setLazyAnnotator"], [71, 3, 1, "", "setOutputCol"], [71, 3, 1, "", "setOutputColumnKey"], [71, 3, 1, "", "setParamValue"], [71, 3, 1, "", "setParams"], [71, 3, 1, "", "setPreservePosition"], [71, 3, 1, "", "setRegex"], [71, 3, 1, "", "setStandardFieldKey"], [71, 3, 1, "", "setThreshold"], [71, 3, 1, "", "setWhiteList"], [71, 2, 1, "", "skipLPInputColsValidation"], [71, 2, 1, "", "standardFieldKey"], [71, 2, 1, "", "threshold"], [71, 3, 1, "", "transform"], [71, 2, 1, "", "whiteList"], [71, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[72, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[72, 3, 1, "", "clear"], [72, 2, 1, "", "combineEntities"], [72, 3, 1, "", "copy"], [72, 2, 1, "", "entityScopes"], [72, 3, 1, "", "explainParam"], [72, 3, 1, "", "explainParams"], [72, 3, 1, "", "extractParamMap"], [72, 3, 1, "", "getInputCols"], [72, 3, 1, "", "getLazyAnnotator"], [72, 3, 1, "", "getOrDefault"], [72, 3, 1, "", "getOutputCol"], [72, 3, 1, "", "getParam"], [72, 3, 1, "", "getParamValue"], [72, 2, 1, "", "getter_attrs"], [72, 3, 1, "", "hasDefault"], [72, 3, 1, "", "hasParam"], [72, 2, 1, "", "inputAnnotatorTypes"], [72, 2, 1, "", "inputCols"], [72, 3, 1, "", "inputColsValidation"], [72, 3, 1, "", "isDefined"], [72, 3, 1, "", "isSet"], [72, 2, 1, "", "lazyAnnotator"], [72, 3, 1, "", "load"], [72, 2, 1, "", "optionalInputAnnotatorTypes"], [72, 2, 1, "", "outputAnnotatorType"], [72, 2, 1, "", "outputCol"], [72, 2, 1, "", "permuteEntities"], [72, 3, 1, "", "pretrained"], [72, 2, 1, "", "randomSeed"], [72, 3, 1, "", "read"], [72, 2, 1, "", "resampleEntities"], [72, 3, 1, "", "save"], [72, 3, 1, "", "set"], [72, 3, 1, "", "setCombineEntities"], [72, 3, 1, "", "setEntityScopes"], [72, 3, 1, "", "setForceInputTypeValidation"], [72, 3, 1, "", "setInputCols"], [72, 3, 1, "", "setLazyAnnotator"], [72, 3, 1, "", "setOutputCol"], [72, 3, 1, "", "setParamValue"], [72, 3, 1, "", "setParams"], [72, 3, 1, "", "setPermuteEntities"], [72, 3, 1, "", "setRandomSeed"], [72, 3, 1, "", "setResampleEntities"], [72, 3, 1, "", "setTemplates"], [72, 2, 1, "", "skipLPInputColsValidation"], [72, 2, 1, "", "templates"], [72, 3, 1, "", "transform"], [72, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[73, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[73, 2, 1, "", "batchSize"], [73, 2, 1, "", "caseSensitive"], [73, 3, 1, "", "clear"], [73, 2, 1, "", "coalesceSentences"], [73, 2, 1, "", "configProtoBytes"], [73, 3, 1, "", "copy"], [73, 2, 1, "", "engine"], [73, 3, 1, "", "explainParam"], [73, 3, 1, "", "explainParams"], [73, 3, 1, "", "extractParamMap"], [73, 3, 1, "", "getBatchSize"], [73, 3, 1, "", "getCaseSensitive"], [73, 3, 1, "", "getClasses"], [73, 3, 1, "", "getEngine"], [73, 3, 1, "", "getInputCols"], [73, 3, 1, "", "getLazyAnnotator"], [73, 3, 1, "", "getMaxSentenceLength"], [73, 3, 1, "", "getOrDefault"], [73, 3, 1, "", "getOutputCol"], [73, 3, 1, "", "getParam"], [73, 3, 1, "", "getParamValue"], [73, 2, 1, "", "getter_attrs"], [73, 3, 1, "", "hasDefault"], [73, 3, 1, "", "hasParam"], [73, 2, 1, "", "ignoreEntities"], [73, 2, 1, "", "inputAnnotatorTypes"], [73, 2, 1, "", "inputCols"], [73, 3, 1, "", "inputColsValidation"], [73, 3, 1, "", "isDefined"], [73, 3, 1, "", "isSet"], [73, 2, 1, "", "lazyAnnotator"], [73, 3, 1, "", "load"], [73, 3, 1, "", "loadSavedModel"], [73, 2, 1, "", "maxSentenceLength"], [73, 2, 1, "", "max_length_limit"], [73, 2, 1, "", "name"], [73, 2, 1, "", "optionalInputAnnotatorTypes"], [73, 2, 1, "", "outputAnnotatorType"], [73, 2, 1, "", "outputCol"], [73, 2, 1, "", "predictionThreshold"], [73, 3, 1, "", "pretrained"], [73, 3, 1, "", "read"], [73, 3, 1, "", "save"], [73, 3, 1, "", "set"], [73, 3, 1, "", "setBatchSize"], [73, 3, 1, "", "setCaseSensitive"], [73, 3, 1, "", "setConfigProtoBytes"], [73, 3, 1, "", "setEntityDefinitions"], [73, 3, 1, "", "setInputCols"], [73, 3, 1, "", "setLazyAnnotator"], [73, 3, 1, "", "setMaxSentenceLength"], [73, 3, 1, "", "setOutputCol"], [73, 3, 1, "", "setParamValue"], [73, 3, 1, "", "setParams"], [73, 3, 1, "", "setPredictionThreshold"], [73, 3, 1, "", "transform"], [73, 3, 1, "", "write"]], "sparknlp_jsl.annotator.normalizer": [[74, 0, 0, "-", "date_normalizer"], [75, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[74, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[74, 2, 1, "", "anchorDateDay"], [74, 2, 1, "", "anchorDateMonth"], [74, 2, 1, "", "anchorDateYear"], [74, 3, 1, "", "clear"], [74, 3, 1, "", "copy"], [74, 2, 1, "", "defaultReplacementDay"], [74, 2, 1, "", "defaultReplacementMonth"], [74, 2, 1, "", "defaultReplacementYear"], [74, 3, 1, "", "explainParam"], [74, 3, 1, "", "explainParams"], [74, 3, 1, "", "extractParamMap"], [74, 3, 1, "", "getInputCols"], [74, 3, 1, "", "getLazyAnnotator"], [74, 3, 1, "", "getOrDefault"], [74, 3, 1, "", "getOutputCol"], [74, 3, 1, "", "getParam"], [74, 3, 1, "", "getParamValue"], [74, 2, 1, "", "getter_attrs"], [74, 3, 1, "", "hasDefault"], [74, 3, 1, "", "hasParam"], [74, 2, 1, "", "inputAnnotatorTypes"], [74, 2, 1, "", "inputCols"], [74, 3, 1, "", "inputColsValidation"], [74, 3, 1, "", "isDefined"], [74, 3, 1, "", "isSet"], [74, 2, 1, "", "lazyAnnotator"], [74, 3, 1, "", "load"], [74, 2, 1, "", "name"], [74, 2, 1, "", "optionalInputAnnotatorTypes"], [74, 2, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "outputCol"], [74, 2, 1, "", "outputDateFormat"], [74, 3, 1, "", "read"], [74, 3, 1, "", "save"], [74, 3, 1, "", "set"], [74, 3, 1, "", "setAnchorDateDay"], [74, 3, 1, "", "setAnchorDateMonth"], [74, 3, 1, "", "setAnchorDateYear"], [74, 3, 1, "", "setDefaultReplacementDay"], [74, 3, 1, "", "setDefaultReplacementMonth"], [74, 3, 1, "", "setDefaultReplacementYear"], [74, 3, 1, "", "setForceInputTypeValidation"], [74, 3, 1, "", "setInputCols"], [74, 3, 1, "", "setLazyAnnotator"], [74, 3, 1, "", "setOutputCol"], [74, 3, 1, "", "setOutputDateformat"], [74, 3, 1, "", "setParamValue"], [74, 3, 1, "", "setParams"], [74, 2, 1, "", "skipLPInputColsValidation"], [74, 3, 1, "", "transform"], [74, 3, 1, "", "write"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[75, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[75, 3, 1, "", "clear"], [75, 3, 1, "", "copy"], [75, 3, 1, "", "explainParam"], [75, 3, 1, "", "explainParams"], [75, 3, 1, "", "extractParamMap"], [75, 3, 1, "", "getInputCols"], [75, 3, 1, "", "getLazyAnnotator"], [75, 3, 1, "", "getOrDefault"], [75, 3, 1, "", "getOutputCol"], [75, 3, 1, "", "getParam"], [75, 3, 1, "", "getParamValue"], [75, 2, 1, "", "getter_attrs"], [75, 3, 1, "", "hasDefault"], [75, 3, 1, "", "hasParam"], [75, 2, 1, "", "inputAnnotatorTypes"], [75, 2, 1, "", "inputCols"], [75, 3, 1, "", "inputColsValidation"], [75, 3, 1, "", "isDefined"], [75, 3, 1, "", "isSet"], [75, 2, 1, "", "lazyAnnotator"], [75, 3, 1, "", "load"], [75, 2, 1, "", "lowercase"], [75, 2, 1, "", "optionalInputAnnotatorTypes"], [75, 2, 1, "", "outputAnnotatorType"], [75, 2, 1, "", "outputCol"], [75, 2, 1, "", "policy"], [75, 3, 1, "", "read"], [75, 3, 1, "", "save"], [75, 3, 1, "", "set"], [75, 3, 1, "", "setForceInputTypeValidation"], [75, 3, 1, "", "setInputCols"], [75, 3, 1, "", "setLazyAnnotator"], [75, 3, 1, "", "setLowercase"], [75, 3, 1, "", "setOutputCol"], [75, 3, 1, "", "setParamValue"], [75, 3, 1, "", "setParams"], [75, 3, 1, "", "setPolicy"], [75, 2, 1, "", "skipLPInputColsValidation"], [75, 3, 1, "", "transform"], [75, 3, 1, "", "write"]], "sparknlp_jsl.annotator.qa": [[77, 0, 0, "-", "beam_search_params"], [79, 0, 0, "-", "medical_qa"], [80, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[77, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[77, 2, 1, "", "doSample"], [77, 2, 1, "", "ignoreTokenIds"], [77, 2, 1, "", "maxContextLength"], [77, 2, 1, "", "maxNewTokens"], [77, 2, 1, "", "noRepeatNgramSize"], [77, 3, 1, "", "setDoSample"], [77, 3, 1, "", "setIgnoreTokenIds"], [77, 3, 1, "", "setMaxContextLength"], [77, 3, 1, "", "setMaxNewTokens"], [77, 3, 1, "", "setNoRepeatNgramSize"], [77, 3, 1, "", "setRandomSeed"], [77, 3, 1, "", "setTopK"], [77, 2, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[79, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[79, 2, 1, "", "batchSize"], [79, 2, 1, "", "caseSensitive"], [79, 3, 1, "", "clear"], [79, 2, 1, "", "configProtoBytes"], [79, 3, 1, "", "copy"], [79, 2, 1, "", "customPrompt"], [79, 2, 1, "", "doSample"], [79, 3, 1, "", "explainParam"], [79, 3, 1, "", "explainParams"], [79, 3, 1, "", "extractParamMap"], [79, 3, 1, "", "getBatchSize"], [79, 3, 1, "", "getCaseSensitive"], [79, 3, 1, "", "getInputCols"], [79, 3, 1, "", "getLazyAnnotator"], [79, 3, 1, "", "getOrDefault"], [79, 3, 1, "", "getOutputCol"], [79, 3, 1, "", "getParam"], [79, 3, 1, "", "getParamValue"], [79, 3, 1, "", "getQuestionTypes"], [79, 2, 1, "", "getter_attrs"], [79, 3, 1, "", "hasDefault"], [79, 3, 1, "", "hasParam"], [79, 2, 1, "", "ignoreTokenIds"], [79, 2, 1, "", "inputAnnotatorTypes"], [79, 2, 1, "", "inputCols"], [79, 3, 1, "", "inputColsValidation"], [79, 3, 1, "", "isDefined"], [79, 3, 1, "", "isSet"], [79, 2, 1, "", "lazyAnnotator"], [79, 3, 1, "", "load"], [79, 3, 1, "", "loadMedicalTextGenerator"], [79, 3, 1, "", "loadSavedModel"], [79, 2, 1, "", "maxContextLength"], [79, 2, 1, "", "maxNewTokens"], [79, 2, 1, "", "mlFrameworkType"], [79, 2, 1, "", "modelType"], [79, 2, 1, "", "name"], [79, 2, 1, "", "noRepeatNgramSize"], [79, 2, 1, "", "optionalInputAnnotatorTypes"], [79, 2, 1, "", "outputAnnotatorType"], [79, 2, 1, "", "outputCol"], [79, 3, 1, "", "pretrained"], [79, 2, 1, "", "questionType"], [79, 3, 1, "", "read"], [79, 3, 1, "", "save"], [79, 3, 1, "", "set"], [79, 3, 1, "", "setBatchSize"], [79, 3, 1, "", "setCaseSensitive"], [79, 3, 1, "", "setConfigProtoBytes"], [79, 3, 1, "", "setCustomPrompt"], [79, 3, 1, "", "setDoSample"], [79, 3, 1, "", "setForceInputTypeValidation"], [79, 3, 1, "", "setIgnoreTokenIds"], [79, 3, 1, "", "setInputCols"], [79, 3, 1, "", "setLazyAnnotator"], [79, 3, 1, "", "setMaxContextLength"], [79, 3, 1, "", "setMaxNewTokens"], [79, 3, 1, "", "setNoRepeatNgramSize"], [79, 3, 1, "", "setOutputCol"], [79, 3, 1, "", "setParamValue"], [79, 3, 1, "", "setParams"], [79, 3, 1, "", "setQuestionAnswerTerminals"], [79, 3, 1, "", "setQuestionPrompts"], [79, 3, 1, "", "setQuestionSkipLastToken"], [79, 3, 1, "", "setQuestionType"], [79, 3, 1, "", "setRandomSeed"], [79, 3, 1, "", "setTopK"], [79, 3, 1, "", "setUseCache"], [79, 2, 1, "", "skipLPInputColsValidation"], [79, 2, 1, "", "topK"], [79, 3, 1, "", "transform"], [79, 2, 1, "", "useCache"], [79, 3, 1, "", "write"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[80, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[80, 3, 1, "", "clear"], [80, 3, 1, "", "copy"], [80, 2, 1, "", "entities1"], [80, 2, 1, "", "entities2"], [80, 3, 1, "", "explainParam"], [80, 3, 1, "", "explainParams"], [80, 3, 1, "", "extractParamMap"], [80, 3, 1, "", "getInputCols"], [80, 3, 1, "", "getLazyAnnotator"], [80, 3, 1, "", "getOrDefault"], [80, 3, 1, "", "getOutputCol"], [80, 3, 1, "", "getParam"], [80, 3, 1, "", "getParamValue"], [80, 2, 1, "", "getter_attrs"], [80, 3, 1, "", "hasDefault"], [80, 3, 1, "", "hasParam"], [80, 2, 1, "", "inputAnnotatorTypes"], [80, 2, 1, "", "inputCols"], [80, 3, 1, "", "inputColsValidation"], [80, 3, 1, "", "isDefined"], [80, 3, 1, "", "isSet"], [80, 2, 1, "", "lazyAnnotator"], [80, 3, 1, "", "load"], [80, 2, 1, "", "name"], [80, 2, 1, "", "optionalInputAnnotatorTypes"], [80, 2, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "outputCol"], [80, 2, 1, "", "questionMark"], [80, 2, 1, "", "questionPronoun"], [80, 3, 1, "", "read"], [80, 3, 1, "", "save"], [80, 3, 1, "", "set"], [80, 3, 1, "", "setEntities1"], [80, 3, 1, "", "setEntities2"], [80, 3, 1, "", "setForceInputTypeValidation"], [80, 3, 1, "", "setInputCols"], [80, 3, 1, "", "setLazyAnnotator"], [80, 3, 1, "", "setOutputCol"], [80, 3, 1, "", "setParamValue"], [80, 3, 1, "", "setParams"], [80, 3, 1, "", "setQuestionMark"], [80, 3, 1, "", "setQuestionPronoun"], [80, 3, 1, "", "setStrategyType"], [80, 2, 1, "", "skipLPInputColsValidation"], [80, 2, 1, "", "strategyType"], [80, 3, 1, "", "transform"], [80, 3, 1, "", "write"]], "sparknlp_jsl.annotator.rag": [[81, 0, 0, "-", "context_split_assembler"], [83, 0, 0, "-", "vectordb_post_processor"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[81, 1, 1, "", "ContextSplitAssembler"]], "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler": [[81, 3, 1, "", "clear"], [81, 3, 1, "", "copy"], [81, 3, 1, "", "explainParam"], [81, 3, 1, "", "explainParams"], [81, 2, 1, "", "explodeSplits"], [81, 3, 1, "", "extractParamMap"], [81, 3, 1, "", "getInputCols"], [81, 3, 1, "", "getLazyAnnotator"], [81, 3, 1, "", "getOrDefault"], [81, 3, 1, "", "getOutputCol"], [81, 3, 1, "", "getParam"], [81, 3, 1, "", "getParamValue"], [81, 2, 1, "", "getter_attrs"], [81, 3, 1, "", "hasDefault"], [81, 3, 1, "", "hasParam"], [81, 2, 1, "", "inputAnnotatorTypes"], [81, 2, 1, "", "inputCols"], [81, 3, 1, "", "inputColsValidation"], [81, 3, 1, "", "isDefined"], [81, 3, 1, "", "isSet"], [81, 2, 1, "", "joinString"], [81, 2, 1, "", "lazyAnnotator"], [81, 3, 1, "", "load"], [81, 2, 1, "", "name"], [81, 2, 1, "", "optionalInputAnnotatorTypes"], [81, 2, 1, "", "outputAnnotatorType"], [81, 2, 1, "", "outputCol"], [81, 3, 1, "", "read"], [81, 3, 1, "", "save"], [81, 3, 1, "", "set"], [81, 3, 1, "", "setExplodeSplits"], [81, 3, 1, "", "setForceInputTypeValidation"], [81, 3, 1, "", "setInputCols"], [81, 3, 1, "", "setJoinString"], [81, 3, 1, "", "setLazyAnnotator"], [81, 3, 1, "", "setOutputCol"], [81, 3, 1, "", "setParamValue"], [81, 3, 1, "", "setParams"], [81, 2, 1, "", "skipLPInputColsValidation"], [81, 3, 1, "", "transform"], [81, 3, 1, "", "write"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[83, 1, 1, "", "VectorDBPostProcessor"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor": [[83, 2, 1, "", "allowZeroContentAfterFiltering"], [83, 2, 1, "", "caseSensitive"], [83, 3, 1, "", "clear"], [83, 3, 1, "", "copy"], [83, 2, 1, "", "diversityThreshold"], [83, 3, 1, "", "explainParam"], [83, 3, 1, "", "explainParams"], [83, 3, 1, "", "extractParamMap"], [83, 2, 1, "", "filterBy"], [83, 3, 1, "", "getInputCols"], [83, 3, 1, "", "getLazyAnnotator"], [83, 3, 1, "", "getOrDefault"], [83, 3, 1, "", "getOutputCol"], [83, 3, 1, "", "getParam"], [83, 3, 1, "", "getParamValue"], [83, 2, 1, "", "getter_attrs"], [83, 3, 1, "", "hasDefault"], [83, 3, 1, "", "hasParam"], [83, 2, 1, "", "inputAnnotatorTypes"], [83, 2, 1, "", "inputCols"], [83, 3, 1, "", "inputColsValidation"], [83, 3, 1, "", "isDefined"], [83, 3, 1, "", "isSet"], [83, 2, 1, "", "lazyAnnotator"], [83, 3, 1, "", "load"], [83, 2, 1, "", "maxTopKAfterFiltering"], [83, 2, 1, "", "name"], [83, 2, 1, "", "optionalInputAnnotatorTypes"], [83, 2, 1, "", "outputAnnotatorType"], [83, 2, 1, "", "outputCol"], [83, 3, 1, "", "read"], [83, 3, 1, "", "save"], [83, 3, 1, "", "set"], [83, 3, 1, "", "setAllowZeroContentAfterFiltering"], [83, 3, 1, "", "setCaseSensitive"], [83, 3, 1, "", "setDiversityThreshold"], [83, 3, 1, "", "setFilterBy"], [83, 3, 1, "", "setForceInputTypeValidation"], [83, 3, 1, "", "setInputCols"], [83, 3, 1, "", "setLazyAnnotator"], [83, 3, 1, "", "setMaxTopKAfterFiltering"], [83, 3, 1, "", "setMetadataCriteria"], [83, 3, 1, "", "setMetadataCriteriaAsStr"], [83, 3, 1, "", "setOutputCol"], [83, 3, 1, "", "setParamValue"], [83, 3, 1, "", "setParams"], [83, 3, 1, "", "setSortBy"], [83, 2, 1, "", "skipLPInputColsValidation"], [83, 2, 1, "", "sortBy"], [83, 3, 1, "", "transform"], [83, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re": [[85, 0, 0, "-", "relation_extraction"], [86, 0, 0, "-", "relation_extraction_dl"], [87, 0, 0, "-", "relation_ner_chunk_filter"], [88, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[85, 1, 1, "", "GenericREModel"], [85, 1, 1, "", "PosologyREModel"], [85, 1, 1, "", "RelationExtractionApproach"], [85, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel": [[85, 2, 1, "", "classes"], [85, 3, 1, "", "clear"], [85, 3, 1, "", "copy"], [85, 2, 1, "", "customLabels"], [85, 2, 1, "", "datasetInfo"], [85, 2, 1, "", "directionSensitive"], [85, 2, 1, "", "doExceptionHandling"], [85, 3, 1, "", "explainParam"], [85, 3, 1, "", "explainParams"], [85, 3, 1, "", "extractParamMap"], [85, 2, 1, "", "featureScaling"], [85, 2, 1, "", "filterByTokenDistance"], [85, 3, 1, "", "getClasses"], [85, 3, 1, "", "getInputCols"], [85, 3, 1, "", "getLazyAnnotator"], [85, 3, 1, "", "getOrDefault"], [85, 3, 1, "", "getOutputCol"], [85, 3, 1, "", "getParam"], [85, 3, 1, "", "getParamValue"], [85, 3, 1, "", "getRelationTypePerPair"], [85, 2, 1, "", "getter_attrs"], [85, 3, 1, "", "hasDefault"], [85, 3, 1, "", "hasParam"], [85, 2, 1, "", "inputAnnotatorTypes"], [85, 2, 1, "", "inputCols"], [85, 3, 1, "", "inputColsValidation"], [85, 3, 1, "", "isDefined"], [85, 3, 1, "", "isSet"], [85, 2, 1, "", "lazyAnnotator"], [85, 3, 1, "", "load"], [85, 2, 1, "", "maxSyntacticDistance"], [85, 2, 1, "", "multiClass"], [85, 2, 1, "", "name"], [85, 2, 1, "", "optionalInputAnnotatorTypes"], [85, 2, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "outputCol"], [85, 2, 1, "", "predictionThreshold"], [85, 3, 1, "", "pretrained"], [85, 3, 1, "", "read"], [85, 2, 1, "", "relationPairs"], [85, 2, 1, "", "relationPairsCaseSensitive"], [85, 3, 1, "", "save"], [85, 2, 1, "", "scopeWindow"], [85, 3, 1, "", "set"], [85, 3, 1, "", "setCustomLabels"], [85, 3, 1, "", "setDatasetInfo"], [85, 3, 1, "", "setDirectionSensitive"], [85, 3, 1, "", "setDoExceptionHandling"], [85, 3, 1, "", "setFeatureScaling"], [85, 3, 1, "", "setFilterByTokenDistance"], [85, 3, 1, "", "setForceInputTypeValidation"], [85, 3, 1, "", "setInputCols"], [85, 3, 1, "", "setLazyAnnotator"], [85, 3, 1, "", "setMaxSyntacticDistance"], [85, 3, 1, "", "setMultiClass"], [85, 3, 1, "", "setOutputCol"], [85, 3, 1, "", "setParamValue"], [85, 3, 1, "", "setParams"], [85, 3, 1, "", "setPredictionThreshold"], [85, 3, 1, "", "setRelationPairs"], [85, 3, 1, "", "setRelationPairsCaseSensitive"], [85, 3, 1, "", "setRelationTypePerPair"], [85, 3, 1, "", "setScopeWindow"], [85, 2, 1, "", "skipLPInputColsValidation"], [85, 3, 1, "", "transform"], [85, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel": [[85, 2, 1, "", "classes"], [85, 3, 1, "", "clear"], [85, 3, 1, "", "copy"], [85, 2, 1, "", "customLabels"], [85, 2, 1, "", "datasetInfo"], [85, 2, 1, "", "directionSensitive"], [85, 2, 1, "", "doExceptionHandling"], [85, 3, 1, "", "explainParam"], [85, 3, 1, "", "explainParams"], [85, 3, 1, "", "extractParamMap"], [85, 2, 1, "", "featureScaling"], [85, 2, 1, "", "filterByTokenDistance"], [85, 3, 1, "", "getClasses"], [85, 3, 1, "", "getInputCols"], [85, 3, 1, "", "getLazyAnnotator"], [85, 3, 1, "", "getOrDefault"], [85, 3, 1, "", "getOutputCol"], [85, 3, 1, "", "getParam"], [85, 3, 1, "", "getParamValue"], [85, 3, 1, "", "getRelationTypePerPair"], [85, 2, 1, "", "getter_attrs"], [85, 3, 1, "", "hasDefault"], [85, 3, 1, "", "hasParam"], [85, 2, 1, "", "inputAnnotatorTypes"], [85, 2, 1, "", "inputCols"], [85, 3, 1, "", "inputColsValidation"], [85, 3, 1, "", "isDefined"], [85, 3, 1, "", "isSet"], [85, 2, 1, "", "lazyAnnotator"], [85, 3, 1, "", "load"], [85, 2, 1, "", "maxSyntacticDistance"], [85, 2, 1, "", "multiClass"], [85, 2, 1, "", "name"], [85, 2, 1, "", "optionalInputAnnotatorTypes"], [85, 2, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "outputCol"], [85, 2, 1, "", "predictionThreshold"], [85, 3, 1, "", "pretrained"], [85, 3, 1, "", "read"], [85, 2, 1, "", "relationPairs"], [85, 2, 1, "", "relationPairsCaseSensitive"], [85, 3, 1, "", "save"], [85, 2, 1, "", "scopeWindow"], [85, 3, 1, "", "set"], [85, 3, 1, "", "setCustomLabels"], [85, 3, 1, "", "setDatasetInfo"], [85, 3, 1, "", "setDirectionSensitive"], [85, 3, 1, "", "setDoExceptionHandling"], [85, 3, 1, "", "setFeatureScaling"], [85, 3, 1, "", "setFilterByTokenDistance"], [85, 3, 1, "", "setForceInputTypeValidation"], [85, 3, 1, "", "setInputCols"], [85, 3, 1, "", "setLazyAnnotator"], [85, 3, 1, "", "setMaxSyntacticDistance"], [85, 3, 1, "", "setMultiClass"], [85, 3, 1, "", "setOutputCol"], [85, 3, 1, "", "setParamValue"], [85, 3, 1, "", "setParams"], [85, 3, 1, "", "setPredictionThreshold"], [85, 3, 1, "", "setRelationPairs"], [85, 3, 1, "", "setRelationPairsCaseSensitive"], [85, 3, 1, "", "setRelationTypePerPair"], [85, 3, 1, "", "setScopeWindow"], [85, 2, 1, "", "skipLPInputColsValidation"], [85, 3, 1, "", "transform"], [85, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[85, 2, 1, "", "batchSize"], [85, 3, 1, "", "clear"], [85, 3, 1, "", "copy"], [85, 2, 1, "", "customLabels"], [85, 2, 1, "", "datasetInfo"], [85, 2, 1, "", "directionSensitive"], [85, 2, 1, "", "doExceptionHandling"], [85, 2, 1, "", "dropout"], [85, 2, 1, "", "engine"], [85, 2, 1, "", "epochsN"], [85, 3, 1, "", "explainParam"], [85, 3, 1, "", "explainParams"], [85, 3, 1, "", "extractParamMap"], [85, 2, 1, "", "featureScaling"], [85, 2, 1, "", "filterByTokenDistance"], [85, 3, 1, "", "fit"], [85, 3, 1, "", "fitMultiple"], [85, 2, 1, "", "fixImbalance"], [85, 2, 1, "", "fromEntityBeginCol"], [85, 2, 1, "", "fromEntityEndCol"], [85, 2, 1, "", "fromEntityLabelCol"], [85, 3, 1, "", "getEngine"], [85, 3, 1, "", "getInputCols"], [85, 3, 1, "", "getLazyAnnotator"], [85, 3, 1, "", "getOrDefault"], [85, 3, 1, "", "getOutputCol"], [85, 3, 1, "", "getParam"], [85, 3, 1, "", "getParamValue"], [85, 2, 1, "", "getter_attrs"], [85, 3, 1, "", "hasDefault"], [85, 3, 1, "", "hasParam"], [85, 2, 1, "", "inputAnnotatorTypes"], [85, 2, 1, "", "inputCols"], [85, 3, 1, "", "inputColsValidation"], [85, 3, 1, "", "isDefined"], [85, 3, 1, "", "isSet"], [85, 2, 1, "", "labelColumn"], [85, 2, 1, "", "lazyAnnotator"], [85, 2, 1, "", "learningRate"], [85, 3, 1, "", "load"], [85, 2, 1, "", "maxSyntacticDistance"], [85, 2, 1, "", "modelFile"], [85, 2, 1, "", "multiClass"], [85, 2, 1, "", "name"], [85, 2, 1, "", "optionalInputAnnotatorTypes"], [85, 2, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "outputCol"], [85, 2, 1, "", "outputLogsPath"], [85, 2, 1, "", "overrideExistingLabels"], [85, 2, 1, "", "pretrainedModelPath"], [85, 3, 1, "", "read"], [85, 2, 1, "", "relationDirectionCol"], [85, 3, 1, "", "save"], [85, 2, 1, "", "scopeWindow"], [85, 3, 1, "", "set"], [85, 3, 1, "", "setBatchSize"], [85, 3, 1, "", "setCustomLabels"], [85, 3, 1, "", "setDatasetInfo"], [85, 3, 1, "", "setDirectionSensitive"], [85, 3, 1, "", "setDoExceptionHandling"], [85, 3, 1, "", "setDropout"], [85, 3, 1, "", "setEpochsNumber"], [85, 3, 1, "", "setFeatureScaling"], [85, 3, 1, "", "setFilterByTokenDistance"], [85, 3, 1, "", "setFixImbalance"], [85, 3, 1, "", "setForceInputTypeValidation"], [85, 3, 1, "", "setFromEntity"], [85, 3, 1, "", "setInputCols"], [85, 3, 1, "", "setLabelCol"], [85, 3, 1, "", "setLazyAnnotator"], [85, 3, 1, "", "setLearningRate"], [85, 3, 1, "", "setMaxSyntacticDistance"], [85, 3, 1, "", "setModelFile"], [85, 3, 1, "", "setMultiClass"], [85, 3, 1, "", "setOutputCol"], [85, 3, 1, "", "setOutputLogsPath"], [85, 3, 1, "", "setParamValue"], [85, 3, 1, "", "setPretrainedModelPath"], [85, 3, 1, "", "setRelationDirectionCol"], [85, 3, 1, "", "setScopeWindow"], [85, 3, 1, "", "setToEntity"], [85, 3, 1, "", "setValidationSplit"], [85, 3, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [85, 2, 1, "", "skipLPInputColsValidation"], [85, 2, 1, "", "toEntityBeginCol"], [85, 2, 1, "", "toEntityEndCol"], [85, 2, 1, "", "toEntityLabelCol"], [85, 2, 1, "", "validationSplit"], [85, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[85, 2, 1, "", "classes"], [85, 3, 1, "", "clear"], [85, 3, 1, "", "copy"], [85, 2, 1, "", "customLabels"], [85, 2, 1, "", "datasetInfo"], [85, 2, 1, "", "directionSensitive"], [85, 2, 1, "", "doExceptionHandling"], [85, 3, 1, "", "explainParam"], [85, 3, 1, "", "explainParams"], [85, 3, 1, "", "extractParamMap"], [85, 2, 1, "", "featureScaling"], [85, 2, 1, "", "filterByTokenDistance"], [85, 3, 1, "", "getClasses"], [85, 3, 1, "", "getInputCols"], [85, 3, 1, "", "getLazyAnnotator"], [85, 3, 1, "", "getOrDefault"], [85, 3, 1, "", "getOutputCol"], [85, 3, 1, "", "getParam"], [85, 3, 1, "", "getParamValue"], [85, 3, 1, "", "getRelationTypePerPair"], [85, 2, 1, "", "getter_attrs"], [85, 3, 1, "", "hasDefault"], [85, 3, 1, "", "hasParam"], [85, 2, 1, "", "inputAnnotatorTypes"], [85, 2, 1, "", "inputCols"], [85, 3, 1, "", "inputColsValidation"], [85, 3, 1, "", "isDefined"], [85, 3, 1, "", "isSet"], [85, 2, 1, "", "lazyAnnotator"], [85, 3, 1, "", "load"], [85, 2, 1, "", "maxSyntacticDistance"], [85, 2, 1, "", "multiClass"], [85, 2, 1, "", "name"], [85, 2, 1, "", "optionalInputAnnotatorTypes"], [85, 2, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "outputCol"], [85, 2, 1, "", "predictionThreshold"], [85, 3, 1, "", "pretrained"], [85, 3, 1, "", "read"], [85, 2, 1, "", "relationPairs"], [85, 2, 1, "", "relationPairsCaseSensitive"], [85, 3, 1, "", "save"], [85, 2, 1, "", "scopeWindow"], [85, 3, 1, "", "set"], [85, 3, 1, "", "setCustomLabels"], [85, 3, 1, "", "setDatasetInfo"], [85, 3, 1, "", "setDirectionSensitive"], [85, 3, 1, "", "setDoExceptionHandling"], [85, 3, 1, "", "setFeatureScaling"], [85, 3, 1, "", "setFilterByTokenDistance"], [85, 3, 1, "", "setForceInputTypeValidation"], [85, 3, 1, "", "setInputCols"], [85, 3, 1, "", "setLazyAnnotator"], [85, 3, 1, "", "setMaxSyntacticDistance"], [85, 3, 1, "", "setMultiClass"], [85, 3, 1, "", "setOutputCol"], [85, 3, 1, "", "setParamValue"], [85, 3, 1, "", "setParams"], [85, 3, 1, "", "setPredictionThreshold"], [85, 3, 1, "", "setRelationPairs"], [85, 3, 1, "", "setRelationPairsCaseSensitive"], [85, 3, 1, "", "setRelationTypePerPair"], [85, 3, 1, "", "setScopeWindow"], [85, 2, 1, "", "skipLPInputColsValidation"], [85, 3, 1, "", "transform"], [85, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[86, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[86, 2, 1, "", "batchSize"], [86, 2, 1, "", "classes"], [86, 3, 1, "", "clear"], [86, 3, 1, "", "copy"], [86, 2, 1, "", "customLabels"], [86, 2, 1, "", "doExceptionHandling"], [86, 3, 1, "", "explainParam"], [86, 3, 1, "", "explainParams"], [86, 3, 1, "", "extractParamMap"], [86, 3, 1, "", "getClasses"], [86, 3, 1, "", "getInputCols"], [86, 3, 1, "", "getLazyAnnotator"], [86, 3, 1, "", "getOrDefault"], [86, 3, 1, "", "getOutputCol"], [86, 3, 1, "", "getParam"], [86, 3, 1, "", "getParamValue"], [86, 3, 1, "", "getRelationTypePerPair"], [86, 2, 1, "", "getter_attrs"], [86, 3, 1, "", "hasDefault"], [86, 3, 1, "", "hasParam"], [86, 2, 1, "", "inputAnnotatorTypes"], [86, 2, 1, "", "inputCols"], [86, 3, 1, "", "inputColsValidation"], [86, 3, 1, "", "isDefined"], [86, 3, 1, "", "isSet"], [86, 2, 1, "", "lazyAnnotator"], [86, 3, 1, "", "load"], [86, 3, 1, "", "loadSavedModel"], [86, 2, 1, "", "name"], [86, 2, 1, "", "optionalInputAnnotatorTypes"], [86, 2, 1, "", "outputAnnotatorType"], [86, 2, 1, "", "outputCol"], [86, 2, 1, "", "predictionThreshold"], [86, 3, 1, "", "pretrained"], [86, 3, 1, "", "read"], [86, 2, 1, "", "relationPairsCaseSensitive"], [86, 3, 1, "", "save"], [86, 3, 1, "", "set"], [86, 3, 1, "", "setBatchSize"], [86, 3, 1, "", "setCaseSensitive"], [86, 3, 1, "", "setCustomLabels"], [86, 3, 1, "", "setDoExceptionHandling"], [86, 3, 1, "", "setForceInputTypeValidation"], [86, 3, 1, "", "setInputCols"], [86, 3, 1, "", "setLazyAnnotator"], [86, 3, 1, "", "setOutputCol"], [86, 3, 1, "", "setParamValue"], [86, 3, 1, "", "setParams"], [86, 3, 1, "", "setPredictionThreshold"], [86, 3, 1, "", "setRelationPairsCaseSensitive"], [86, 3, 1, "", "setRelationTypePerPair"], [86, 2, 1, "", "skipLPInputColsValidation"], [86, 3, 1, "", "transform"], [86, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[87, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[87, 3, 1, "", "clear"], [87, 3, 1, "", "copy"], [87, 2, 1, "", "directionSensitive"], [87, 2, 1, "", "docLevelRelations"], [87, 3, 1, "", "explainParam"], [87, 3, 1, "", "explainParams"], [87, 3, 1, "", "extractParamMap"], [87, 2, 1, "", "filterByTokenDistance"], [87, 3, 1, "", "getInputCols"], [87, 3, 1, "", "getLazyAnnotator"], [87, 3, 1, "", "getOrDefault"], [87, 3, 1, "", "getOutputCol"], [87, 3, 1, "", "getParam"], [87, 3, 1, "", "getParamValue"], [87, 2, 1, "", "getter_attrs"], [87, 3, 1, "", "hasDefault"], [87, 3, 1, "", "hasParam"], [87, 2, 1, "", "inputAnnotatorTypes"], [87, 2, 1, "", "inputCols"], [87, 3, 1, "", "inputColsValidation"], [87, 3, 1, "", "isDefined"], [87, 3, 1, "", "isSet"], [87, 2, 1, "", "lazyAnnotator"], [87, 3, 1, "", "load"], [87, 2, 1, "", "maxSyntacticDistance"], [87, 2, 1, "", "name"], [87, 2, 1, "", "optionalInputAnnotatorTypes"], [87, 2, 1, "", "outputAnnotatorType"], [87, 2, 1, "", "outputCol"], [87, 3, 1, "", "read"], [87, 2, 1, "", "relationPairs"], [87, 2, 1, "", "relationPairsCaseSensitive"], [87, 3, 1, "", "save"], [87, 3, 1, "", "set"], [87, 3, 1, "", "setDirectionSensitive"], [87, 3, 1, "", "setDocLevelRelations"], [87, 3, 1, "", "setFilterByTokenDistance"], [87, 3, 1, "", "setInputCols"], [87, 3, 1, "", "setLazyAnnotator"], [87, 3, 1, "", "setMaxSyntacticDistance"], [87, 3, 1, "", "setOutputCol"], [87, 3, 1, "", "setParamValue"], [87, 3, 1, "", "setParams"], [87, 3, 1, "", "setRelationPairs"], [87, 3, 1, "", "setRelationPairsCaseSensitive"], [87, 3, 1, "", "transform"], [87, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[88, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[88, 2, 1, "", "batchSize"], [88, 2, 1, "", "caseSensitive"], [88, 3, 1, "", "clear"], [88, 2, 1, "", "coalesceSentences"], [88, 2, 1, "", "configProtoBytes"], [88, 3, 1, "", "copy"], [88, 3, 1, "", "explainParam"], [88, 3, 1, "", "explainParams"], [88, 3, 1, "", "extractParamMap"], [88, 3, 1, "", "getBatchSize"], [88, 3, 1, "", "getCaseSensitive"], [88, 3, 1, "", "getClasses"], [88, 3, 1, "", "getInputCols"], [88, 3, 1, "", "getLazyAnnotator"], [88, 3, 1, "", "getOrDefault"], [88, 3, 1, "", "getOutputCol"], [88, 3, 1, "", "getParam"], [88, 3, 1, "", "getParamValue"], [88, 2, 1, "", "getter_attrs"], [88, 3, 1, "", "hasDefault"], [88, 3, 1, "", "hasParam"], [88, 2, 1, "", "inputAnnotatorTypes"], [88, 2, 1, "", "inputCols"], [88, 3, 1, "", "inputColsValidation"], [88, 3, 1, "", "isDefined"], [88, 3, 1, "", "isSet"], [88, 2, 1, "", "lazyAnnotator"], [88, 3, 1, "", "load"], [88, 3, 1, "", "loadSavedModel"], [88, 3, 1, "", "loadSavedModelOpenSource"], [88, 2, 1, "", "maxSentenceLength"], [88, 2, 1, "", "multiLabel"], [88, 2, 1, "", "name"], [88, 2, 1, "", "negativeRelationships"], [88, 2, 1, "", "optionalInputAnnotatorTypes"], [88, 2, 1, "", "outputAnnotatorType"], [88, 2, 1, "", "outputCol"], [88, 2, 1, "", "predictionThreshold"], [88, 3, 1, "", "pretrained"], [88, 3, 1, "", "read"], [88, 3, 1, "", "save"], [88, 3, 1, "", "set"], [88, 3, 1, "", "setBatchSize"], [88, 3, 1, "", "setCaseSensitive"], [88, 3, 1, "", "setCoalesceSentences"], [88, 3, 1, "", "setConfigProtoBytes"], [88, 3, 1, "", "setForceInputTypeValidation"], [88, 3, 1, "", "setInputCols"], [88, 3, 1, "", "setLazyAnnotator"], [88, 3, 1, "", "setMaxSentenceLength"], [88, 3, 1, "", "setNegativeRelationships"], [88, 3, 1, "", "setOutputCol"], [88, 3, 1, "", "setParamValue"], [88, 3, 1, "", "setParams"], [88, 3, 1, "", "setRelationalCategories"], [88, 2, 1, "", "skipLPInputColsValidation"], [88, 3, 1, "", "transform"], [88, 3, 1, "", "write"]], "sparknlp_jsl.annotator.regex": [[90, 0, 0, "-", "regex_matcher"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[90, 1, 1, "", "RegexMatcherInternal"], [90, 1, 1, "", "RegexMatcherInternalModel"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal": [[90, 3, 1, "", "clear"], [90, 3, 1, "", "copy"], [90, 2, 1, "", "delimiter"], [90, 3, 1, "", "explainParam"], [90, 3, 1, "", "explainParams"], [90, 2, 1, "", "externalRules"], [90, 3, 1, "", "extractParamMap"], [90, 3, 1, "", "fit"], [90, 3, 1, "", "fitMultiple"], [90, 3, 1, "", "getInputCols"], [90, 3, 1, "", "getLazyAnnotator"], [90, 3, 1, "", "getOrDefault"], [90, 3, 1, "", "getOutputCol"], [90, 3, 1, "", "getParam"], [90, 3, 1, "", "getParamValue"], [90, 2, 1, "", "getter_attrs"], [90, 3, 1, "", "hasDefault"], [90, 3, 1, "", "hasParam"], [90, 2, 1, "", "inputAnnotatorTypes"], [90, 2, 1, "", "inputCols"], [90, 3, 1, "", "inputColsValidation"], [90, 3, 1, "", "isDefined"], [90, 3, 1, "", "isSet"], [90, 2, 1, "", "lazyAnnotator"], [90, 3, 1, "", "load"], [90, 2, 1, "", "mergeOverlapping"], [90, 2, 1, "", "optionalInputAnnotatorTypes"], [90, 2, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "outputCol"], [90, 3, 1, "", "read"], [90, 2, 1, "", "rules"], [90, 3, 1, "", "save"], [90, 3, 1, "", "set"], [90, 3, 1, "", "setDelimiter"], [90, 3, 1, "", "setExternalRules"], [90, 3, 1, "", "setForceInputTypeValidation"], [90, 3, 1, "", "setInputCols"], [90, 3, 1, "", "setLazyAnnotator"], [90, 3, 1, "", "setMergeOverlapping"], [90, 3, 1, "", "setOutputCol"], [90, 3, 1, "", "setParamValue"], [90, 3, 1, "", "setRules"], [90, 3, 1, "", "setStrategy"], [90, 2, 1, "", "skipLPInputColsValidation"], [90, 2, 1, "", "strategy"], [90, 3, 1, "", "write"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel": [[90, 3, 1, "", "clear"], [90, 3, 1, "", "copy"], [90, 3, 1, "", "explainParam"], [90, 3, 1, "", "explainParams"], [90, 3, 1, "", "extractParamMap"], [90, 3, 1, "", "getInputCols"], [90, 3, 1, "", "getLazyAnnotator"], [90, 3, 1, "", "getOrDefault"], [90, 3, 1, "", "getOutputCol"], [90, 3, 1, "", "getParam"], [90, 3, 1, "", "getParamValue"], [90, 2, 1, "", "getter_attrs"], [90, 3, 1, "", "hasDefault"], [90, 3, 1, "", "hasParam"], [90, 2, 1, "", "inputAnnotatorTypes"], [90, 2, 1, "", "inputCols"], [90, 3, 1, "", "inputColsValidation"], [90, 3, 1, "", "isDefined"], [90, 3, 1, "", "isSet"], [90, 2, 1, "", "lazyAnnotator"], [90, 3, 1, "", "load"], [90, 2, 1, "", "mergeOverlapping"], [90, 2, 1, "", "name"], [90, 2, 1, "", "optionalInputAnnotatorTypes"], [90, 2, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "outputCol"], [90, 3, 1, "", "pretrained"], [90, 3, 1, "", "read"], [90, 3, 1, "", "save"], [90, 3, 1, "", "set"], [90, 3, 1, "", "setInputCols"], [90, 3, 1, "", "setLazyAnnotator"], [90, 3, 1, "", "setMergeOverlapping"], [90, 3, 1, "", "setOutputCol"], [90, 3, 1, "", "setParamValue"], [90, 3, 1, "", "setParams"], [90, 3, 1, "", "transform"], [90, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution": [[92, 0, 0, "-", "resolver_merger"], [93, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[92, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[92, 3, 1, "", "clear"], [92, 3, 1, "", "copy"], [92, 3, 1, "", "explainParam"], [92, 3, 1, "", "explainParams"], [92, 3, 1, "", "extractParamMap"], [92, 3, 1, "", "getInputCols"], [92, 3, 1, "", "getLazyAnnotator"], [92, 3, 1, "", "getOrDefault"], [92, 3, 1, "", "getOutputCol"], [92, 3, 1, "", "getParam"], [92, 3, 1, "", "getParamValue"], [92, 2, 1, "", "getter_attrs"], [92, 3, 1, "", "hasDefault"], [92, 3, 1, "", "hasParam"], [92, 2, 1, "", "inputAnnotatorTypes"], [92, 2, 1, "", "inputCols"], [92, 3, 1, "", "inputColsValidation"], [92, 3, 1, "", "isDefined"], [92, 3, 1, "", "isSet"], [92, 2, 1, "", "lazyAnnotator"], [92, 3, 1, "", "load"], [92, 2, 1, "", "name"], [92, 2, 1, "", "optionalInputAnnotatorTypes"], [92, 2, 1, "", "outputAnnotatorType"], [92, 2, 1, "", "outputCol"], [92, 3, 1, "", "read"], [92, 3, 1, "", "save"], [92, 3, 1, "", "set"], [92, 3, 1, "", "setForceInputTypeValidation"], [92, 3, 1, "", "setInputCols"], [92, 3, 1, "", "setLazyAnnotator"], [92, 3, 1, "", "setOutputCol"], [92, 3, 1, "", "setParamValue"], [92, 3, 1, "", "setParams"], [92, 2, 1, "", "skipLPInputColsValidation"], [92, 3, 1, "", "transform"], [92, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[93, 1, 1, "", "SentenceEntityResolverApproach"], [93, 1, 1, "", "SentenceEntityResolverModel"], [93, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[93, 2, 1, "", "aux_label_col"], [93, 2, 1, "", "caseSensitive"], [93, 3, 1, "", "clear"], [93, 2, 1, "", "confidenceFunction"], [93, 3, 1, "", "copy"], [93, 2, 1, "", "datasetInfo"], [93, 2, 1, "", "distanceFunction"], [93, 2, 1, "", "doExceptionHandling"], [93, 2, 1, "", "dropCodesList"], [93, 2, 1, "", "engine"], [93, 3, 1, "", "explainParam"], [93, 3, 1, "", "explainParams"], [93, 3, 1, "", "extractParamMap"], [93, 3, 1, "", "fit"], [93, 3, 1, "", "fitMultiple"], [93, 3, 1, "", "getCaseSensitive"], [93, 3, 1, "", "getEngine"], [93, 3, 1, "", "getInputCols"], [93, 3, 1, "", "getLazyAnnotator"], [93, 3, 1, "", "getOrDefault"], [93, 3, 1, "", "getOutputCol"], [93, 3, 1, "", "getParam"], [93, 3, 1, "", "getParamValue"], [93, 2, 1, "", "getter_attrs"], [93, 3, 1, "", "hasDefault"], [93, 3, 1, "", "hasParam"], [93, 2, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "inputCols"], [93, 3, 1, "", "inputColsValidation"], [93, 3, 1, "", "isDefined"], [93, 3, 1, "", "isSet"], [93, 2, 1, "", "labelCol"], [93, 2, 1, "", "lazyAnnotator"], [93, 3, 1, "", "load"], [93, 2, 1, "", "missAsEmpty"], [93, 2, 1, "", "neighbours"], [93, 2, 1, "", "normalizedCol"], [93, 2, 1, "", "optionalInputAnnotatorTypes"], [93, 2, 1, "", "outputAnnotatorType"], [93, 2, 1, "", "outputCol"], [93, 2, 1, "", "overrideExistingCodes"], [93, 2, 1, "", "pretrainedModelPath"], [93, 3, 1, "", "read"], [93, 2, 1, "", "returnCosineDistances"], [93, 2, 1, "", "returnResolvedTextEmbeddings"], [93, 3, 1, "", "save"], [93, 3, 1, "", "set"], [93, 3, 1, "", "setAuxLabelCol"], [93, 3, 1, "", "setCaseSensitive"], [93, 3, 1, "", "setConfidenceFunction"], [93, 3, 1, "", "setDatasetInfo"], [93, 3, 1, "", "setDistanceFunction"], [93, 3, 1, "", "setDoExceptionHandling"], [93, 3, 1, "", "setDropCodesList"], [93, 3, 1, "", "setExtractCosineDistances"], [93, 3, 1, "", "setForceInputTypeValidation"], [93, 3, 1, "", "setInputCols"], [93, 3, 1, "", "setLabelCol"], [93, 3, 1, "", "setLazyAnnotator"], [93, 3, 1, "", "setMissAsEmpty"], [93, 3, 1, "", "setNeighbours"], [93, 3, 1, "", "setNormalizedCol"], [93, 3, 1, "", "setOutputCol"], [93, 3, 1, "", "setOverrideExistingCodes"], [93, 3, 1, "", "setParamValue"], [93, 3, 1, "", "setPretrainedModelPath"], [93, 3, 1, "", "setReturnResolvedTextEmbeddings"], [93, 3, 1, "", "setThreshold"], [93, 3, 1, "", "setUseAuxLabel"], [93, 2, 1, "", "skipLPInputColsValidation"], [93, 2, 1, "", "threshold"], [93, 2, 1, "", "useAuxLabel"], [93, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[93, 2, 1, "", "caseSensitive"], [93, 3, 1, "", "clear"], [93, 3, 1, "", "copy"], [93, 2, 1, "", "dimension"], [93, 3, 1, "", "explainParam"], [93, 3, 1, "", "explainParams"], [93, 3, 1, "", "extractParamMap"], [93, 3, 1, "", "getCaseSensitive"], [93, 3, 1, "", "getDimension"], [93, 3, 1, "", "getInputCols"], [93, 3, 1, "", "getLazyAnnotator"], [93, 3, 1, "", "getOrDefault"], [93, 3, 1, "", "getOutputCol"], [93, 3, 1, "", "getParam"], [93, 3, 1, "", "getParamValue"], [93, 3, 1, "", "getStorageRef"], [93, 2, 1, "", "getter_attrs"], [93, 3, 1, "", "hasDefault"], [93, 3, 1, "", "hasParam"], [93, 2, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "inputCols"], [93, 3, 1, "", "inputColsValidation"], [93, 3, 1, "", "isDefined"], [93, 3, 1, "", "isSet"], [93, 2, 1, "", "lazyAnnotator"], [93, 3, 1, "", "load"], [93, 3, 1, "", "loadStorage"], [93, 3, 1, "", "loadStorages"], [93, 2, 1, "", "name"], [93, 2, 1, "", "optionalInputAnnotatorTypes"], [93, 2, 1, "", "outputAnnotatorType"], [93, 2, 1, "", "outputCol"], [93, 3, 1, "", "pretrained"], [93, 3, 1, "", "read"], [93, 2, 1, "", "returnCosineDistances"], [93, 3, 1, "", "save"], [93, 3, 1, "", "saveStorage"], [93, 2, 1, "", "searchTree"], [93, 3, 1, "", "set"], [93, 3, 1, "", "setCaseSensitive"], [93, 3, 1, "", "setDimension"], [93, 3, 1, "", "setForceInputTypeValidation"], [93, 3, 1, "", "setInputCols"], [93, 3, 1, "", "setLazyAnnotator"], [93, 3, 1, "", "setOutputCol"], [93, 3, 1, "", "setParamValue"], [93, 3, 1, "", "setParams"], [93, 3, 1, "", "setSearchTree"], [93, 3, 1, "", "setStorageRef"], [93, 3, 1, "", "setUseAuxLabel"], [93, 2, 1, "", "skipLPInputColsValidation"], [93, 2, 1, "", "storageRef"], [93, 3, 1, "", "transform"], [93, 2, 1, "", "useAuxLabel"], [93, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[93, 2, 1, "", "caseSensitive"], [93, 2, 1, "", "confidenceFunction"], [93, 2, 1, "", "datasetInfo"], [93, 2, 1, "", "distanceFunction"], [93, 2, 1, "", "doExceptionHandling"], [93, 3, 1, "", "getCaseSensitive"], [93, 2, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "missAsEmpty"], [93, 2, 1, "", "neighbours"], [93, 2, 1, "", "returnResolvedTextEmbeddings"], [93, 3, 1, "", "setCaseSensitive"], [93, 3, 1, "", "setConfidenceFunction"], [93, 3, 1, "", "setDatasetInfo"], [93, 3, 1, "", "setDistanceFunction"], [93, 3, 1, "", "setDoExceptionHandling"], [93, 3, 1, "", "setMissAsEmpty"], [93, 3, 1, "", "setNeighbours"], [93, 3, 1, "", "setReturnResolvedTextEmbeddings"], [93, 3, 1, "", "setThreshold"], [93, 2, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[94, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[94, 3, 1, "", "clear"], [94, 3, 1, "", "copy"], [94, 3, 1, "", "explainParam"], [94, 3, 1, "", "explainParams"], [94, 3, 1, "", "extractParamMap"], [94, 3, 1, "", "getInputCols"], [94, 3, 1, "", "getLazyAnnotator"], [94, 3, 1, "", "getOrDefault"], [94, 3, 1, "", "getOutputCol"], [94, 3, 1, "", "getParam"], [94, 3, 1, "", "getParamValue"], [94, 2, 1, "", "getter_attrs"], [94, 3, 1, "", "hasDefault"], [94, 3, 1, "", "hasParam"], [94, 2, 1, "", "inputAnnotatorTypes"], [94, 2, 1, "", "inputCols"], [94, 3, 1, "", "inputColsValidation"], [94, 3, 1, "", "isDefined"], [94, 3, 1, "", "isSet"], [94, 2, 1, "", "lazyAnnotator"], [94, 3, 1, "", "load"], [94, 2, 1, "", "name"], [94, 2, 1, "", "optionalInputAnnotatorTypes"], [94, 2, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "outputCol"], [94, 3, 1, "", "read"], [94, 3, 1, "", "save"], [94, 3, 1, "", "set"], [94, 3, 1, "", "setInputCols"], [94, 3, 1, "", "setLazyAnnotator"], [94, 3, 1, "", "setOutputCol"], [94, 3, 1, "", "setParamValue"], [94, 3, 1, "", "setParams"], [94, 3, 1, "", "transform"], [94, 3, 1, "", "write"]], "sparknlp_jsl.annotator.router": [[95, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[95, 3, 1, "", "clear"], [95, 3, 1, "", "copy"], [95, 3, 1, "", "explainParam"], [95, 3, 1, "", "explainParams"], [95, 3, 1, "", "extractParamMap"], [95, 2, 1, "", "filterFieldsElements"], [95, 3, 1, "", "getInputCols"], [95, 3, 1, "", "getLazyAnnotator"], [95, 3, 1, "", "getOrDefault"], [95, 3, 1, "", "getOutputCol"], [95, 3, 1, "", "getParam"], [95, 3, 1, "", "getParamValue"], [95, 2, 1, "", "getter_attrs"], [95, 3, 1, "", "hasDefault"], [95, 3, 1, "", "hasParam"], [95, 2, 1, "", "inputAnnotatorTypes"], [95, 2, 1, "", "inputCols"], [95, 3, 1, "", "inputColsValidation"], [95, 2, 1, "", "inputType"], [95, 3, 1, "", "isDefined"], [95, 3, 1, "", "isSet"], [95, 2, 1, "", "lazyAnnotator"], [95, 3, 1, "", "load"], [95, 2, 1, "", "metadataField"], [95, 2, 1, "", "name"], [95, 2, 1, "", "optionalInputAnnotatorTypes"], [95, 2, 1, "", "outputAnnotatorType"], [95, 2, 1, "", "outputCol"], [95, 3, 1, "", "read"], [95, 3, 1, "", "save"], [95, 3, 1, "", "set"], [95, 3, 1, "", "setFilterFieldsElements"], [95, 3, 1, "", "setForceInputTypeValidation"], [95, 3, 1, "", "setInputCols"], [95, 3, 1, "", "setInputType"], [95, 3, 1, "", "setLazyAnnotator"], [95, 3, 1, "", "setMetadataField"], [95, 3, 1, "", "setOutputCol"], [95, 3, 1, "", "setParamValue"], [95, 3, 1, "", "setParams"], [95, 2, 1, "", "skipLPInputColsValidation"], [95, 3, 1, "", "transform"], [95, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq": [[97, 0, 0, "-", "medical_encoder_decoder"], [98, 0, 0, "-", "medical_summarizer"], [99, 0, 0, "-", "medical_text_generator"], [100, 0, 0, "-", "text2sql"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[97, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[97, 2, 1, "", "batchSize"], [97, 2, 1, "", "caseSensitive"], [97, 3, 1, "", "clear"], [97, 2, 1, "", "configProtoBytes"], [97, 3, 1, "", "copy"], [97, 2, 1, "", "doSample"], [97, 3, 1, "", "explainParam"], [97, 3, 1, "", "explainParams"], [97, 3, 1, "", "extractParamMap"], [97, 3, 1, "", "getBatchSize"], [97, 3, 1, "", "getCaseSensitive"], [97, 3, 1, "", "getInputCols"], [97, 3, 1, "", "getLazyAnnotator"], [97, 3, 1, "", "getOrDefault"], [97, 3, 1, "", "getOutputCol"], [97, 3, 1, "", "getParam"], [97, 3, 1, "", "getParamValue"], [97, 2, 1, "", "getter_attrs"], [97, 3, 1, "", "hasDefault"], [97, 3, 1, "", "hasParam"], [97, 2, 1, "", "ignoreTokenIds"], [97, 2, 1, "", "inputAnnotatorTypes"], [97, 2, 1, "", "inputCols"], [97, 3, 1, "", "inputColsValidation"], [97, 3, 1, "", "isDefined"], [97, 3, 1, "", "isSet"], [97, 2, 1, "", "lazyAnnotator"], [97, 3, 1, "", "load"], [97, 2, 1, "", "maxNewTokens"], [97, 2, 1, "", "maxTextLength"], [97, 2, 1, "", "mlFrameworkType"], [97, 2, 1, "", "name"], [97, 2, 1, "", "noRepeatNgramSize"], [97, 2, 1, "", "optionalInputAnnotatorTypes"], [97, 2, 1, "", "outputAnnotatorType"], [97, 2, 1, "", "outputCol"], [97, 2, 1, "", "randomSeed"], [97, 3, 1, "", "read"], [97, 2, 1, "", "refineChunkSize"], [97, 2, 1, "", "refineMaxAttempts"], [97, 2, 1, "", "refineSummary"], [97, 2, 1, "", "refineSummaryTargetLength"], [97, 3, 1, "", "save"], [97, 3, 1, "", "set"], [97, 3, 1, "", "setBatchSize"], [97, 3, 1, "", "setCaseSensitive"], [97, 3, 1, "", "setConfigProtoBytes"], [97, 3, 1, "", "setDoSample"], [97, 3, 1, "", "setForceInputTypeValidation"], [97, 3, 1, "", "setIgnoreTokenIds"], [97, 3, 1, "", "setInputCols"], [97, 3, 1, "", "setLazyAnnotator"], [97, 3, 1, "", "setMaxNewTokens"], [97, 3, 1, "", "setMaxTextLength"], [97, 3, 1, "", "setNoRepeatNgramSize"], [97, 3, 1, "", "setOutputCol"], [97, 3, 1, "", "setParamValue"], [97, 3, 1, "", "setParams"], [97, 3, 1, "", "setRandomSeed"], [97, 3, 1, "", "setRefineChunkSize"], [97, 3, 1, "", "setRefineMaxAttempts"], [97, 3, 1, "", "setRefineSummary"], [97, 3, 1, "", "setRefineSummaryTargetLength"], [97, 3, 1, "", "setStopAtEos"], [97, 3, 1, "", "setTopK"], [97, 2, 1, "", "skipLPInputColsValidation"], [97, 2, 1, "", "stopAtEos"], [97, 2, 1, "", "task"], [97, 2, 1, "", "topK"], [97, 3, 1, "", "transform"], [97, 2, 1, "", "useCache"], [97, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[98, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[98, 2, 1, "", "batchSize"], [98, 2, 1, "", "caseSensitive"], [98, 3, 1, "", "clear"], [98, 2, 1, "", "configProtoBytes"], [98, 3, 1, "", "copy"], [98, 2, 1, "", "doSample"], [98, 3, 1, "", "explainParam"], [98, 3, 1, "", "explainParams"], [98, 3, 1, "", "extractParamMap"], [98, 3, 1, "", "getBatchSize"], [98, 3, 1, "", "getCaseSensitive"], [98, 3, 1, "", "getInputCols"], [98, 3, 1, "", "getLazyAnnotator"], [98, 3, 1, "", "getOrDefault"], [98, 3, 1, "", "getOutputCol"], [98, 3, 1, "", "getParam"], [98, 3, 1, "", "getParamValue"], [98, 2, 1, "", "getter_attrs"], [98, 3, 1, "", "hasDefault"], [98, 3, 1, "", "hasParam"], [98, 2, 1, "", "ignoreTokenIds"], [98, 2, 1, "", "inputAnnotatorTypes"], [98, 2, 1, "", "inputCols"], [98, 3, 1, "", "inputColsValidation"], [98, 3, 1, "", "isDefined"], [98, 3, 1, "", "isSet"], [98, 2, 1, "", "lazyAnnotator"], [98, 3, 1, "", "load"], [98, 3, 1, "", "loadSavedModel"], [98, 2, 1, "", "maxNewTokens"], [98, 2, 1, "", "maxTextLength"], [98, 2, 1, "", "mlFrameworkType"], [98, 2, 1, "", "name"], [98, 2, 1, "", "noRepeatNgramSize"], [98, 2, 1, "", "optionalInputAnnotatorTypes"], [98, 2, 1, "", "outputAnnotatorType"], [98, 2, 1, "", "outputCol"], [98, 3, 1, "", "pretrained"], [98, 2, 1, "", "randomSeed"], [98, 3, 1, "", "read"], [98, 2, 1, "", "refineChunkSize"], [98, 2, 1, "", "refineMaxAttempts"], [98, 2, 1, "", "refineSummary"], [98, 2, 1, "", "refineSummaryTargetLength"], [98, 3, 1, "", "save"], [98, 3, 1, "", "set"], [98, 3, 1, "", "setBatchSize"], [98, 3, 1, "", "setCaseSensitive"], [98, 3, 1, "", "setConfigProtoBytes"], [98, 3, 1, "", "setDoSample"], [98, 3, 1, "", "setForceInputTypeValidation"], [98, 3, 1, "", "setIgnoreTokenIds"], [98, 3, 1, "", "setInputCols"], [98, 3, 1, "", "setLazyAnnotator"], [98, 3, 1, "", "setMaxNewTokens"], [98, 3, 1, "", "setMaxTextLength"], [98, 3, 1, "", "setNoRepeatNgramSize"], [98, 3, 1, "", "setOutputCol"], [98, 3, 1, "", "setParamValue"], [98, 3, 1, "", "setParams"], [98, 3, 1, "", "setRandomSeed"], [98, 3, 1, "", "setRefineChunkSize"], [98, 3, 1, "", "setRefineMaxAttempts"], [98, 3, 1, "", "setRefineSummary"], [98, 3, 1, "", "setRefineSummaryTargetLength"], [98, 3, 1, "", "setStopAtEos"], [98, 3, 1, "", "setTopK"], [98, 2, 1, "", "skipLPInputColsValidation"], [98, 2, 1, "", "stopAtEos"], [98, 2, 1, "", "task"], [98, 2, 1, "", "topK"], [98, 3, 1, "", "transform"], [98, 2, 1, "", "useCache"], [98, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[99, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[99, 2, 1, "", "batchSize"], [99, 2, 1, "", "caseSensitive"], [99, 3, 1, "", "clear"], [99, 2, 1, "", "configProtoBytes"], [99, 3, 1, "", "copy"], [99, 2, 1, "", "customPrompt"], [99, 2, 1, "", "doSample"], [99, 3, 1, "", "explainParam"], [99, 3, 1, "", "explainParams"], [99, 3, 1, "", "extractParamMap"], [99, 3, 1, "", "getAdditionalTokens"], [99, 3, 1, "", "getBatchSize"], [99, 3, 1, "", "getCaseSensitive"], [99, 3, 1, "", "getInputCols"], [99, 3, 1, "", "getLazyAnnotator"], [99, 3, 1, "", "getOrDefault"], [99, 3, 1, "", "getOutputCol"], [99, 3, 1, "", "getParam"], [99, 3, 1, "", "getParamValue"], [99, 2, 1, "", "getter_attrs"], [99, 3, 1, "", "hasDefault"], [99, 3, 1, "", "hasParam"], [99, 2, 1, "", "ignoreTokenIds"], [99, 2, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "inputCols"], [99, 3, 1, "", "inputColsValidation"], [99, 3, 1, "", "isDefined"], [99, 3, 1, "", "isSet"], [99, 2, 1, "", "lazyAnnotator"], [99, 3, 1, "", "load"], [99, 3, 1, "", "loadSavedModel"], [99, 2, 1, "", "maxContextLength"], [99, 2, 1, "", "maxNewTokens"], [99, 2, 1, "", "maxTextLength"], [99, 2, 1, "", "mlFrameworkType"], [99, 2, 1, "", "modelType"], [99, 2, 1, "", "name"], [99, 2, 1, "", "noRepeatNgramSize"], [99, 2, 1, "", "optionalInputAnnotatorTypes"], [99, 2, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "outputCol"], [99, 3, 1, "", "pretrained"], [99, 3, 1, "", "read"], [99, 3, 1, "", "save"], [99, 3, 1, "", "set"], [99, 3, 1, "", "setAdditionalTokens"], [99, 3, 1, "", "setBatchSize"], [99, 3, 1, "", "setCaseSensitive"], [99, 3, 1, "", "setConfigProtoBytes"], [99, 3, 1, "", "setCustomPrompt"], [99, 3, 1, "", "setDoSample"], [99, 3, 1, "", "setForceInputTypeValidation"], [99, 3, 1, "", "setIgnoreTokenIds"], [99, 3, 1, "", "setInputCols"], [99, 3, 1, "", "setLazyAnnotator"], [99, 3, 1, "", "setMaxContextLength"], [99, 3, 1, "", "setMaxNewTokens"], [99, 3, 1, "", "setMaxTextLength"], [99, 3, 1, "", "setNoRepeatNgramSize"], [99, 3, 1, "", "setOutputCol"], [99, 3, 1, "", "setParamValue"], [99, 3, 1, "", "setParams"], [99, 3, 1, "", "setRandomSeed"], [99, 3, 1, "", "setStopAtEos"], [99, 3, 1, "", "setTopK"], [99, 3, 1, "", "setUseCache"], [99, 2, 1, "", "skipLPInputColsValidation"], [99, 2, 1, "", "stopAtEos"], [99, 2, 1, "", "topK"], [99, 3, 1, "", "transform"], [99, 2, 1, "", "useCache"], [99, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[100, 1, 1, "", "Text2SQL"]], "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL": [[100, 2, 1, "", "batchSize"], [100, 2, 1, "", "caseSensitive"], [100, 3, 1, "", "clear"], [100, 2, 1, "", "configProtoBytes"], [100, 3, 1, "", "copy"], [100, 2, 1, "", "customPrompt"], [100, 2, 1, "", "doSample"], [100, 3, 1, "", "explainParam"], [100, 3, 1, "", "explainParams"], [100, 3, 1, "", "extractParamMap"], [100, 3, 1, "", "getAdditionalTokens"], [100, 3, 1, "", "getBatchSize"], [100, 3, 1, "", "getCaseSensitive"], [100, 3, 1, "", "getInputCols"], [100, 3, 1, "", "getLazyAnnotator"], [100, 3, 1, "", "getOrDefault"], [100, 3, 1, "", "getOutputCol"], [100, 3, 1, "", "getParam"], [100, 3, 1, "", "getParamValue"], [100, 3, 1, "", "getPostProcessingSubstitutions"], [100, 3, 1, "", "getSchema"], [100, 2, 1, "", "getter_attrs"], [100, 3, 1, "", "hasDefault"], [100, 3, 1, "", "hasParam"], [100, 2, 1, "", "ignoreTokenIds"], [100, 2, 1, "", "inputAnnotatorTypes"], [100, 2, 1, "", "inputCols"], [100, 3, 1, "", "inputColsValidation"], [100, 3, 1, "", "isDefined"], [100, 3, 1, "", "isSet"], [100, 2, 1, "", "lazyAnnotator"], [100, 3, 1, "", "load"], [100, 3, 1, "", "loadSavedModel"], [100, 2, 1, "", "maxContextLength"], [100, 2, 1, "", "maxNewTokens"], [100, 2, 1, "", "maxTextLength"], [100, 2, 1, "", "mlFrameworkType"], [100, 2, 1, "", "modelType"], [100, 2, 1, "", "name"], [100, 2, 1, "", "noRepeatNgramSize"], [100, 2, 1, "", "optionalInputAnnotatorTypes"], [100, 2, 1, "", "outputAnnotatorType"], [100, 2, 1, "", "outputCol"], [100, 3, 1, "", "pretrained"], [100, 3, 1, "", "read"], [100, 3, 1, "", "save"], [100, 3, 1, "", "set"], [100, 3, 1, "", "setAdditionalTokens"], [100, 3, 1, "", "setBatchSize"], [100, 3, 1, "", "setCaseSensitive"], [100, 3, 1, "", "setConfigProtoBytes"], [100, 3, 1, "", "setCustomPrompt"], [100, 3, 1, "", "setDoSample"], [100, 3, 1, "", "setForceInputTypeValidation"], [100, 3, 1, "", "setIgnoreTokenIds"], [100, 3, 1, "", "setInputCols"], [100, 3, 1, "", "setLazyAnnotator"], [100, 3, 1, "", "setMaxContextLength"], [100, 3, 1, "", "setMaxNewTokens"], [100, 3, 1, "", "setMaxTextLength"], [100, 3, 1, "", "setNoRepeatNgramSize"], [100, 3, 1, "", "setOutputCol"], [100, 3, 1, "", "setParamValue"], [100, 3, 1, "", "setParams"], [100, 3, 1, "", "setPostProcessingSubstitutions"], [100, 3, 1, "", "setRandomSeed"], [100, 3, 1, "", "setSchema"], [100, 3, 1, "", "setStopAtEos"], [100, 3, 1, "", "setTableLimit"], [100, 3, 1, "", "setTopK"], [100, 3, 1, "", "setUseCache"], [100, 2, 1, "", "skipLPInputColsValidation"], [100, 2, 1, "", "stopAtEos"], [100, 2, 1, "", "tableLimit"], [100, 2, 1, "", "topK"], [100, 3, 1, "", "transform"], [100, 2, 1, "", "useCache"], [100, 3, 1, "", "write"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[101, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[101, 2, 1, "", "allPossibleFieldsToStandardize"], [101, 2, 1, "", "includeOutputColumn"], [101, 2, 1, "", "includeStandardField"], [101, 2, 1, "", "outputColumnKey"], [101, 3, 1, "", "setAllPossibleFieldsToStandardize"], [101, 3, 1, "", "setIncludeOutputColumn"], [101, 3, 1, "", "setIncludeStandardField"], [101, 3, 1, "", "setOutputColumnKey"], [101, 3, 1, "", "setStandardFieldKey"], [101, 2, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[103, 0, 0, "-", "internal_document_splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[103, 1, 1, "", "InternalDocumentSplitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter": [[103, 2, 1, "", "caseSensitive"], [103, 2, 1, "", "chunkOverlap"], [103, 2, 1, "", "chunkSize"], [103, 3, 1, "", "clear"], [103, 3, 1, "", "copy"], [103, 2, 1, "", "customBoundsStrategy"], [103, 2, 1, "", "enableSentenceIncrement"], [103, 3, 1, "", "explainParam"], [103, 3, 1, "", "explainParams"], [103, 2, 1, "", "explodeSplits"], [103, 3, 1, "", "extractParamMap"], [103, 3, 1, "", "getInputCols"], [103, 3, 1, "", "getLazyAnnotator"], [103, 3, 1, "", "getOrDefault"], [103, 3, 1, "", "getOutputCol"], [103, 3, 1, "", "getParam"], [103, 3, 1, "", "getParamValue"], [103, 2, 1, "", "getter_attrs"], [103, 3, 1, "", "hasDefault"], [103, 3, 1, "", "hasParam"], [103, 2, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "inputCols"], [103, 3, 1, "", "inputColsValidation"], [103, 3, 1, "", "isDefined"], [103, 3, 1, "", "isSet"], [103, 2, 1, "", "keepSeparators"], [103, 2, 1, "", "lazyAnnotator"], [103, 3, 1, "", "load"], [103, 2, 1, "", "maxLength"], [103, 2, 1, "", "metaDataFields"], [103, 2, 1, "", "name"], [103, 2, 1, "", "optionalInputAnnotatorTypes"], [103, 2, 1, "", "outputAnnotatorType"], [103, 2, 1, "", "outputCol"], [103, 2, 1, "", "patternsAreRegex"], [103, 3, 1, "", "read"], [103, 3, 1, "", "save"], [103, 2, 1, "", "sentenceAwareness"], [103, 3, 1, "", "set"], [103, 3, 1, "", "setCaseSensitive"], [103, 3, 1, "", "setChunkOverlap"], [103, 3, 1, "", "setChunkSize"], [103, 3, 1, "", "setCustomBoundsStrategy"], [103, 3, 1, "", "setEnableSentenceIncrement"], [103, 3, 1, "", "setExplodeSplits"], [103, 3, 1, "", "setForceInputTypeValidation"], [103, 3, 1, "", "setInputCols"], [103, 3, 1, "", "setKeepSeparators"], [103, 3, 1, "", "setLazyAnnotator"], [103, 3, 1, "", "setMaxLength"], [103, 3, 1, "", "setMetaDataFields"], [103, 3, 1, "", "setOutputCol"], [103, 3, 1, "", "setParamValue"], [103, 3, 1, "", "setParams"], [103, 3, 1, "", "setPatternsAreRegex"], [103, 3, 1, "", "setSentenceAwareness"], [103, 3, 1, "", "setSplitMode"], [103, 3, 1, "", "setSplitPatterns"], [103, 3, 1, "", "setTrimWhitespace"], [103, 2, 1, "", "skipLPInputColsValidation"], [103, 2, 1, "", "splitMode"], [103, 2, 1, "", "splitPatterns"], [103, 3, 1, "", "transform"], [103, 2, 1, "", "trimWhitespace"], [103, 3, 1, "", "write"]], "sparknlp_jsl.annotator.tf_graph_builder": [[104, 1, 1, "", "TFGraphBuilder"], [104, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[104, 2, 1, "", "batchNorm"], [104, 3, 1, "", "clear"], [104, 3, 1, "", "copy"], [104, 3, 1, "", "explainParam"], [104, 3, 1, "", "explainParams"], [104, 3, 1, "", "extractParamMap"], [104, 3, 1, "", "fit"], [104, 3, 1, "", "fitMultiple"], [104, 3, 1, "", "getBatchNorm"], [104, 3, 1, "", "getGraphFile"], [104, 3, 1, "", "getGraphFolder"], [104, 3, 1, "", "getHiddenAct"], [104, 3, 1, "", "getHiddenActL2"], [104, 3, 1, "", "getHiddenLayers"], [104, 3, 1, "", "getHiddenUnitsNumber"], [104, 3, 1, "", "getHiddenWeightsL2"], [104, 3, 1, "", "getInputCols"], [104, 3, 1, "", "getIsLicensed"], [104, 3, 1, "", "getLabelColumn"], [104, 3, 1, "", "getMaxSequenceLength"], [104, 3, 1, "", "getModelName"], [104, 3, 1, "", "getOrDefault"], [104, 3, 1, "", "getOutputAct"], [104, 3, 1, "", "getParam"], [104, 3, 1, "", "getUseRelationDirection"], [104, 2, 1, "", "graphFile"], [104, 2, 1, "", "graphFolder"], [104, 3, 1, "", "hasDefault"], [104, 3, 1, "", "hasParam"], [104, 2, 1, "", "hiddenAct"], [104, 2, 1, "", "hiddenActL2"], [104, 2, 1, "", "hiddenLayers"], [104, 2, 1, "", "hiddenUnitsNumber"], [104, 2, 1, "", "hiddenWeightsL2"], [104, 2, 1, "", "inputCols"], [104, 3, 1, "", "isDefined"], [104, 2, 1, "", "isLicensed"], [104, 3, 1, "", "isSet"], [104, 2, 1, "", "labelColumn"], [104, 3, 1, "", "load"], [104, 2, 1, "", "maxSequenceLength"], [104, 2, 1, "", "modelName"], [104, 2, 1, "", "outputAct"], [104, 3, 1, "", "read"], [104, 3, 1, "", "save"], [104, 3, 1, "", "set"], [104, 3, 1, "", "setBatchNorm"], [104, 3, 1, "", "setGraphFile"], [104, 3, 1, "", "setGraphFolder"], [104, 3, 1, "", "setHiddenAct"], [104, 3, 1, "", "setHiddenActL2"], [104, 3, 1, "", "setHiddenLayers"], [104, 3, 1, "", "setHiddenUnitsNumber"], [104, 3, 1, "", "setHiddenWeightsL2"], [104, 3, 1, "", "setInputCols"], [104, 3, 1, "", "setIsLicensed"], [104, 3, 1, "", "setLabelColumn"], [104, 3, 1, "", "setMaxSequenceLength"], [104, 3, 1, "", "setModelName"], [104, 3, 1, "", "setUseRelationDirection"], [104, 3, 1, "", "settOutputAct"], [104, 2, 1, "", "useRelationDirection"], [104, 3, 1, "", "write"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel": [[104, 3, 1, "", "clear"], [104, 3, 1, "", "copy"], [104, 3, 1, "", "explainParam"], [104, 3, 1, "", "explainParams"], [104, 3, 1, "", "extractParamMap"], [104, 3, 1, "", "getOrDefault"], [104, 3, 1, "", "getParam"], [104, 3, 1, "", "hasDefault"], [104, 3, 1, "", "hasParam"], [104, 3, 1, "", "isDefined"], [104, 3, 1, "", "isSet"], [104, 3, 1, "", "load"], [104, 3, 1, "", "read"], [104, 3, 1, "", "save"], [104, 3, 1, "", "set"], [104, 3, 1, "", "transform"], [104, 3, 1, "", "write"]], "sparknlp_jsl.annotator.white_black_list_params": [[105, 1, 1, "", "WhiteBlackListParams"]], "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams": [[105, 2, 1, "", "blackList"], [105, 2, 1, "", "caseSensitive"], [105, 3, 1, "", "setBlackList"], [105, 3, 1, "", "setCaseSensitive"], [105, 3, 1, "", "setDenyList"], [105, 3, 1, "", "setWhiteList"], [105, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.windowed": [[107, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[107, 1, 1, "", "WindowedParams"], [107, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[107, 2, 1, "", "glueString"], [107, 3, 1, "", "setGlueString"], [107, 3, 1, "", "setWindowSize"], [107, 2, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[107, 3, 1, "", "clear"], [107, 3, 1, "", "copy"], [107, 3, 1, "", "explainParam"], [107, 3, 1, "", "explainParams"], [107, 3, 1, "", "extractParamMap"], [107, 3, 1, "", "getInputCols"], [107, 3, 1, "", "getLazyAnnotator"], [107, 3, 1, "", "getOrDefault"], [107, 3, 1, "", "getOutputCol"], [107, 3, 1, "", "getParam"], [107, 3, 1, "", "getParamValue"], [107, 2, 1, "", "getter_attrs"], [107, 2, 1, "", "glueString"], [107, 3, 1, "", "hasDefault"], [107, 3, 1, "", "hasParam"], [107, 2, 1, "", "inputAnnotatorTypes"], [107, 2, 1, "", "inputCols"], [107, 3, 1, "", "inputColsValidation"], [107, 3, 1, "", "isDefined"], [107, 3, 1, "", "isSet"], [107, 2, 1, "", "lazyAnnotator"], [107, 3, 1, "", "load"], [107, 2, 1, "", "optionalInputAnnotatorTypes"], [107, 2, 1, "", "outputAnnotatorType"], [107, 2, 1, "", "outputCol"], [107, 3, 1, "", "read"], [107, 3, 1, "", "save"], [107, 3, 1, "", "set"], [107, 3, 1, "", "setForceInputTypeValidation"], [107, 3, 1, "", "setGlueString"], [107, 3, 1, "", "setInputCols"], [107, 3, 1, "", "setLazyAnnotator"], [107, 3, 1, "", "setOutputCol"], [107, 3, 1, "", "setParamValue"], [107, 3, 1, "", "setParams"], [107, 3, 1, "", "setWindowSize"], [107, 2, 1, "", "skipLPInputColsValidation"], [107, 3, 1, "", "transform"], [107, 2, 1, "", "windowSize"], [107, 3, 1, "", "write"]], "sparknlp_jsl.common": [[109, 0, 0, "-", "annotator_approach_internal"], [110, 0, 0, "-", "annotator_model_internal"], [111, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[109, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[109, 3, 1, "", "clear"], [109, 3, 1, "", "copy"], [109, 3, 1, "", "explainParam"], [109, 3, 1, "", "explainParams"], [109, 3, 1, "", "extractParamMap"], [109, 3, 1, "", "fit"], [109, 3, 1, "", "fitMultiple"], [109, 3, 1, "", "getInputCols"], [109, 3, 1, "", "getLazyAnnotator"], [109, 3, 1, "", "getOrDefault"], [109, 3, 1, "", "getOutputCol"], [109, 3, 1, "", "getParam"], [109, 3, 1, "", "getParamValue"], [109, 2, 1, "", "getter_attrs"], [109, 3, 1, "", "hasDefault"], [109, 3, 1, "", "hasParam"], [109, 2, 1, "", "inputAnnotatorTypes"], [109, 2, 1, "", "inputCols"], [109, 3, 1, "", "inputColsValidation"], [109, 3, 1, "", "isDefined"], [109, 3, 1, "", "isSet"], [109, 2, 1, "", "lazyAnnotator"], [109, 3, 1, "", "load"], [109, 2, 1, "", "optionalInputAnnotatorTypes"], [109, 2, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "outputCol"], [109, 3, 1, "", "read"], [109, 3, 1, "", "save"], [109, 3, 1, "", "set"], [109, 3, 1, "", "setForceInputTypeValidation"], [109, 3, 1, "", "setInputCols"], [109, 3, 1, "", "setLazyAnnotator"], [109, 3, 1, "", "setOutputCol"], [109, 3, 1, "", "setParamValue"], [109, 2, 1, "", "skipLPInputColsValidation"], [109, 3, 1, "", "write"]], "sparknlp_jsl.common.annotator_model_internal": [[110, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[110, 3, 1, "", "clear"], [110, 3, 1, "", "copy"], [110, 3, 1, "", "explainParam"], [110, 3, 1, "", "explainParams"], [110, 3, 1, "", "extractParamMap"], [110, 3, 1, "", "getInputCols"], [110, 3, 1, "", "getLazyAnnotator"], [110, 3, 1, "", "getOrDefault"], [110, 3, 1, "", "getOutputCol"], [110, 3, 1, "", "getParam"], [110, 3, 1, "", "getParamValue"], [110, 2, 1, "", "getter_attrs"], [110, 3, 1, "", "hasDefault"], [110, 3, 1, "", "hasParam"], [110, 2, 1, "", "inputAnnotatorTypes"], [110, 2, 1, "", "inputCols"], [110, 3, 1, "", "inputColsValidation"], [110, 3, 1, "", "isDefined"], [110, 3, 1, "", "isSet"], [110, 2, 1, "", "lazyAnnotator"], [110, 3, 1, "", "load"], [110, 2, 1, "", "optionalInputAnnotatorTypes"], [110, 2, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "outputCol"], [110, 3, 1, "", "read"], [110, 3, 1, "", "save"], [110, 3, 1, "", "set"], [110, 3, 1, "", "setForceInputTypeValidation"], [110, 3, 1, "", "setInputCols"], [110, 3, 1, "", "setLazyAnnotator"], [110, 3, 1, "", "setOutputCol"], [110, 3, 1, "", "setParamValue"], [110, 3, 1, "", "setParams"], [110, 2, 1, "", "skipLPInputColsValidation"], [110, 3, 1, "", "transform"], [110, 3, 1, "", "write"]], "sparknlp_jsl.common.annotator_properties_internal": [[111, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[111, 3, 1, "", "clear"], [111, 3, 1, "", "copy"], [111, 3, 1, "", "explainParam"], [111, 3, 1, "", "explainParams"], [111, 3, 1, "", "extractParamMap"], [111, 3, 1, "", "getInputCols"], [111, 3, 1, "", "getLazyAnnotator"], [111, 3, 1, "", "getOrDefault"], [111, 3, 1, "", "getOutputCol"], [111, 3, 1, "", "getParam"], [111, 3, 1, "", "hasDefault"], [111, 3, 1, "", "hasParam"], [111, 2, 1, "", "inputAnnotatorTypes"], [111, 2, 1, "", "inputCols"], [111, 3, 1, "", "inputColsValidation"], [111, 3, 1, "", "isDefined"], [111, 3, 1, "", "isSet"], [111, 2, 1, "", "lazyAnnotator"], [111, 2, 1, "", "optionalInputAnnotatorTypes"], [111, 2, 1, "", "outputAnnotatorType"], [111, 2, 1, "", "outputCol"], [111, 3, 1, "", "set"], [111, 3, 1, "", "setForceInputTypeValidation"], [111, 3, 1, "", "setInputCols"], [111, 3, 1, "", "setLazyAnnotator"], [111, 3, 1, "", "setOutputCol"]], "sparknlp_jsl.compatibility": [[113, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[113, 3, 1, "", "findVersion"], [113, 2, 1, "", "instance"], [113, 3, 1, "", "showVersion"], [113, 2, 1, "", "spark"]], "sparknlp_jsl.custom_transformer": [[114, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[114, 3, 1, "", "clear"], [114, 3, 1, "", "copy"], [114, 3, 1, "", "explainParam"], [114, 3, 1, "", "explainParams"], [114, 3, 1, "", "extractParamMap"], [114, 2, 1, "", "f"], [114, 3, 1, "", "getInputCol"], [114, 3, 1, "", "getOrDefault"], [114, 3, 1, "", "getOutputCol"], [114, 3, 1, "", "getParam"], [114, 3, 1, "", "hasDefault"], [114, 3, 1, "", "hasParam"], [114, 2, 1, "", "inputCol"], [114, 3, 1, "", "isDefined"], [114, 3, 1, "", "isSet"], [114, 3, 1, "", "load"], [114, 2, 1, "", "outputCol"], [114, 3, 1, "", "read"], [114, 3, 1, "", "save"], [114, 3, 1, "", "set"], [114, 3, 1, "", "setInputCol"], [114, 3, 1, "", "setOutputCol"], [114, 3, 1, "", "transform"], [114, 3, 1, "", "write"]], "sparknlp_jsl.deidentification_module": [[115, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[115, 2, 1, "", "age_group_obfuscation"], [115, 2, 1, "", "age_ranges"], [115, 2, 1, "", "custom_pipeline"], [115, 2, 1, "", "date_shift_column_name"], [115, 2, 1, "", "date_tag"], [115, 3, 1, "", "deid_with_custom_pipeline"], [115, 3, 1, "", "deid_with_pretrained_pipeline"], [115, 3, 1, "", "deidentify"], [115, 2, 1, "", "document"], [115, 2, 1, "", "documenthashcoder_col_name"], [115, 2, 1, "", "domain"], [115, 2, 1, "", "fields"], [115, 2, 1, "", "fixed_mask_length"], [115, 2, 1, "", "id_column_name"], [115, 2, 1, "", "input_file_path"], [115, 2, 1, "", "language"], [115, 2, 1, "", "masking_policy"], [115, 2, 1, "", "multi_mode_file_path"], [115, 2, 1, "", "ner_chunk"], [115, 2, 1, "", "number_of_days"], [115, 2, 1, "", "obfuscate_date"], [115, 2, 1, "", "obfuscate_ref_file_path"], [115, 2, 1, "", "obfuscate_ref_source"], [115, 2, 1, "", "output_file_path"], [115, 2, 1, "", "region"], [115, 2, 1, "", "sentence"], [115, 2, 1, "", "separator"], [115, 2, 1, "", "shift_days"], [115, 2, 1, "", "spark"], [115, 2, 1, "", "token"], [115, 2, 1, "", "unnormalized_date"], [115, 2, 1, "", "unnormalized_mode"]], "sparknlp_jsl.eval": [[116, 1, 1, "", "NerCrfEvaluation"], [116, 1, 1, "", "NerDLEvaluation"], [116, 1, 1, "", "NerDLMetrics"], [116, 1, 1, "", "NorvigSpellEvaluation"], [116, 1, 1, "", "POSEvaluation"], [116, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[116, 3, 1, "", "apply"], [116, 3, 1, "", "computeAccuracyAnnotator"], [116, 3, 1, "", "computeAccuracyModel"], [116, 3, 1, "", "getDataFrame"], [116, 3, 1, "", "new_java_array"], [116, 3, 1, "", "new_java_array_integer"], [116, 3, 1, "", "new_java_array_string"], [116, 3, 1, "", "new_java_obj"], [116, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NerDLEvaluation": [[116, 3, 1, "", "apply"], [116, 3, 1, "", "computeAccuracyAnnotator"], [116, 3, 1, "", "computeAccuracyModel"], [116, 3, 1, "", "getDataFrame"], [116, 3, 1, "", "new_java_array"], [116, 3, 1, "", "new_java_array_integer"], [116, 3, 1, "", "new_java_array_string"], [116, 3, 1, "", "new_java_obj"], [116, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NerDLMetrics": [[116, 3, 1, "", "apply"], [116, 3, 1, "", "computeMetricsFromDF"], [116, 3, 1, "", "getDataFrame"], [116, 3, 1, "", "new_java_array"], [116, 3, 1, "", "new_java_array_integer"], [116, 3, 1, "", "new_java_array_string"], [116, 3, 1, "", "new_java_obj"], [116, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[116, 3, 1, "", "apply"], [116, 3, 1, "", "computeAccuracyAnnotator"], [116, 3, 1, "", "computeAccuracyModel"], [116, 3, 1, "", "getDataFrame"], [116, 3, 1, "", "new_java_array"], [116, 3, 1, "", "new_java_array_integer"], [116, 3, 1, "", "new_java_array_string"], [116, 3, 1, "", "new_java_obj"], [116, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.POSEvaluation": [[116, 3, 1, "", "apply"], [116, 3, 1, "", "computeAccuracyAnnotator"], [116, 3, 1, "", "computeAccuracyModel"], [116, 3, 1, "", "getDataFrame"], [116, 3, 1, "", "new_java_array"], [116, 3, 1, "", "new_java_array_integer"], [116, 3, 1, "", "new_java_array_string"], [116, 3, 1, "", "new_java_obj"], [116, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[116, 3, 1, "", "apply"], [116, 3, 1, "", "computeAccuracyAnnotator"], [116, 3, 1, "", "computeAccuracyModel"], [116, 3, 1, "", "getDataFrame"], [116, 3, 1, "", "new_java_array"], [116, 3, 1, "", "new_java_array_integer"], [116, 3, 1, "", "new_java_array_string"], [116, 3, 1, "", "new_java_obj"], [116, 3, 1, "", "spark_version"]], "sparknlp_jsl.finance": [[122, 0, 0, "-", "chunk_classification"], [127, 0, 0, "-", "graph"], [136, 0, 0, "-", "sequence_classification"], [141, 0, 0, "-", "sequence_generation"], [143, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[118, 0, 0, "-", "assertion"], [121, 0, 0, "-", "deid"], [125, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[117, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[117, 1, 1, "", "AssertionDLApproach"], [117, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach": [[117, 2, 1, "", "batchSize"], [117, 3, 1, "", "clear"], [117, 2, 1, "", "configProtoBytes"], [117, 3, 1, "", "copy"], [117, 2, 1, "", "datasetInfo"], [117, 2, 1, "", "doExceptionHandling"], [117, 2, 1, "", "dropout"], [117, 2, 1, "", "enableOutputLogs"], [117, 2, 1, "", "endCol"], [117, 2, 1, "", "engine"], [117, 2, 1, "", "epochs"], [117, 3, 1, "", "explainParam"], [117, 3, 1, "", "explainParams"], [117, 3, 1, "", "extractParamMap"], [117, 3, 1, "", "fit"], [117, 3, 1, "", "fitMultiple"], [117, 3, 1, "", "getEngine"], [117, 3, 1, "", "getInputCols"], [117, 3, 1, "", "getLazyAnnotator"], [117, 3, 1, "", "getOrDefault"], [117, 3, 1, "", "getOutputCol"], [117, 3, 1, "", "getParam"], [117, 3, 1, "", "getParamValue"], [117, 2, 1, "", "getter_attrs"], [117, 2, 1, "", "graphFile"], [117, 2, 1, "", "graphFolder"], [117, 3, 1, "", "hasDefault"], [117, 3, 1, "", "hasParam"], [117, 2, 1, "", "includeConfidence"], [117, 2, 1, "", "inputAnnotatorTypes"], [117, 2, 1, "", "inputCols"], [117, 3, 1, "", "inputColsValidation"], [117, 3, 1, "", "isDefined"], [117, 3, 1, "", "isSet"], [117, 2, 1, "", "label"], [117, 2, 1, "", "lazyAnnotator"], [117, 2, 1, "", "learningRate"], [117, 3, 1, "", "load"], [117, 2, 1, "", "maxSentLen"], [117, 2, 1, "", "optionalInputAnnotatorTypes"], [117, 2, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "outputCol"], [117, 2, 1, "", "outputLogsPath"], [117, 3, 1, "", "read"], [117, 3, 1, "", "save"], [117, 2, 1, "", "scopeWindow"], [117, 3, 1, "", "set"], [117, 3, 1, "", "setBatchSize"], [117, 3, 1, "", "setConfigProtoBytes"], [117, 3, 1, "", "setDatasetInfo"], [117, 3, 1, "", "setDoExceptionHandling"], [117, 3, 1, "", "setDropout"], [117, 3, 1, "", "setEnableOutputLogs"], [117, 3, 1, "", "setEndCol"], [117, 3, 1, "", "setEpochs"], [117, 3, 1, "", "setForceInputTypeValidation"], [117, 3, 1, "", "setGraphFile"], [117, 3, 1, "", "setGraphFolder"], [117, 3, 1, "", "setIncludeConfidence"], [117, 3, 1, "", "setInputCols"], [117, 3, 1, "", "setLabelCol"], [117, 3, 1, "", "setLazyAnnotator"], [117, 3, 1, "", "setLearningRate"], [117, 3, 1, "", "setMaxSentLen"], [117, 3, 1, "", "setOutputCol"], [117, 3, 1, "", "setOutputLogsPath"], [117, 3, 1, "", "setParamValue"], [117, 3, 1, "", "setScopeWindow"], [117, 3, 1, "", "setStartCol"], [117, 3, 1, "", "setTestDataset"], [117, 3, 1, "", "setValidationSplit"], [117, 3, 1, "", "setVerbose"], [117, 2, 1, "", "skipLPInputColsValidation"], [117, 2, 1, "", "startCol"], [117, 2, 1, "", "testDataset"], [117, 2, 1, "", "validationSplit"], [117, 2, 1, "", "verbose"], [117, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[117, 2, 1, "", "classes"], [117, 3, 1, "", "clear"], [117, 2, 1, "", "configProtoBytes"], [117, 3, 1, "", "copy"], [117, 2, 1, "", "datasetInfo"], [117, 2, 1, "", "doExceptionHandling"], [117, 2, 1, "", "entityAssertionCaseSensitive"], [117, 3, 1, "", "explainParam"], [117, 3, 1, "", "explainParams"], [117, 3, 1, "", "extractParamMap"], [117, 3, 1, "", "getEntityAssertion"], [117, 3, 1, "", "getInputCols"], [117, 3, 1, "", "getLazyAnnotator"], [117, 3, 1, "", "getOrDefault"], [117, 3, 1, "", "getOutputCol"], [117, 3, 1, "", "getParam"], [117, 3, 1, "", "getParamValue"], [117, 3, 1, "", "getReplaceLabels"], [117, 3, 1, "", "getStorageRef"], [117, 2, 1, "", "getter_attrs"], [117, 3, 1, "", "hasDefault"], [117, 3, 1, "", "hasParam"], [117, 2, 1, "", "includeConfidence"], [117, 2, 1, "", "inputAnnotatorTypes"], [117, 2, 1, "", "inputCols"], [117, 3, 1, "", "inputColsValidation"], [117, 3, 1, "", "isDefined"], [117, 3, 1, "", "isSet"], [117, 2, 1, "", "lazyAnnotator"], [117, 3, 1, "", "load"], [117, 2, 1, "", "maxSentLen"], [117, 2, 1, "", "name"], [117, 2, 1, "", "optionalInputAnnotatorTypes"], [117, 2, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "outputCol"], [117, 3, 1, "", "pretrained"], [117, 3, 1, "", "read"], [117, 3, 1, "", "save"], [117, 2, 1, "", "scopeWindow"], [117, 3, 1, "", "set"], [117, 3, 1, "", "setConfigProtoBytes"], [117, 3, 1, "", "setDatasetInfo"], [117, 3, 1, "", "setDoExceptionHandling"], [117, 3, 1, "", "setEntityAssertion"], [117, 3, 1, "", "setEntityAssertionCaseSensitive"], [117, 3, 1, "", "setForceInputTypeValidation"], [117, 3, 1, "", "setIncludeConfidence"], [117, 3, 1, "", "setInputCols"], [117, 3, 1, "", "setLazyAnnotator"], [117, 3, 1, "", "setOutputCol"], [117, 3, 1, "", "setParamValue"], [117, 3, 1, "", "setParams"], [117, 3, 1, "", "setReplaceLabels"], [117, 3, 1, "", "setScopeWindow"], [117, 3, 1, "", "setStorageRef"], [117, 2, 1, "", "skipLPInputColsValidation"], [117, 2, 1, "", "storageRef"], [117, 2, 1, "", "targetNerLabels"], [117, 3, 1, "", "transform"], [117, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.deid": [[119, 0, 0, "-", "deIdentification"], [120, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[119, 1, 1, "", "DeIdentification"], [119, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[119, 2, 1, "", "ageRanges"], [119, 2, 1, "", "ageRangesByHipaa"], [119, 2, 1, "", "blackList"], [119, 2, 1, "", "blackListEntities"], [119, 3, 1, "", "clear"], [119, 2, 1, "", "combineRegexPatterns"], [119, 2, 1, "", "consistentObfuscation"], [119, 3, 1, "", "copy"], [119, 2, 1, "", "dateFormats"], [119, 2, 1, "", "dateTag"], [119, 2, 1, "", "dateToYear"], [119, 2, 1, "", "days"], [119, 2, 1, "", "doExceptionHandling"], [119, 2, 1, "", "entityCasingModesPath"], [119, 3, 1, "", "explainParam"], [119, 3, 1, "", "explainParams"], [119, 3, 1, "", "extractParamMap"], [119, 3, 1, "", "fit"], [119, 3, 1, "", "fitMultiple"], [119, 2, 1, "", "fixedMaskLength"], [119, 2, 1, "", "genderAwareness"], [119, 3, 1, "", "getBlackList"], [119, 3, 1, "", "getInputCols"], [119, 3, 1, "", "getLazyAnnotator"], [119, 3, 1, "", "getOrDefault"], [119, 3, 1, "", "getOutputCol"], [119, 3, 1, "", "getParam"], [119, 3, 1, "", "getParamValue"], [119, 3, 1, "", "getSameLengthFormattedEntities"], [119, 3, 1, "", "getUseShiftDays"], [119, 2, 1, "", "getter_attrs"], [119, 3, 1, "", "hasDefault"], [119, 3, 1, "", "hasParam"], [119, 2, 1, "", "ignoreRegex"], [119, 2, 1, "", "inputAnnotatorTypes"], [119, 2, 1, "", "inputCols"], [119, 3, 1, "", "inputColsValidation"], [119, 3, 1, "", "isDefined"], [119, 2, 1, "", "isRandomDateDisplacement"], [119, 3, 1, "", "isSet"], [119, 2, 1, "", "keepYear"], [119, 2, 1, "", "language"], [119, 2, 1, "", "lazyAnnotator"], [119, 3, 1, "", "load"], [119, 2, 1, "", "mappingsColumn"], [119, 2, 1, "", "maskingPolicy"], [119, 2, 1, "", "metadataMaskingPolicy"], [119, 2, 1, "", "minYear"], [119, 2, 1, "", "mode"], [119, 2, 1, "", "name"], [119, 2, 1, "", "obfuscateByAgeGroups"], [119, 2, 1, "", "obfuscateDate"], [119, 2, 1, "", "obfuscateRefFile"], [119, 2, 1, "", "obfuscateRefSource"], [119, 2, 1, "", "obfuscationStrategyOnException"], [119, 2, 1, "", "optionalInputAnnotatorTypes"], [119, 2, 1, "", "outputAnnotatorType"], [119, 2, 1, "", "outputAsDocument"], [119, 2, 1, "", "outputCol"], [119, 3, 1, "", "read"], [119, 2, 1, "", "refFileFormat"], [119, 2, 1, "", "refSep"], [119, 2, 1, "", "regexOverride"], [119, 2, 1, "", "regexPatternsDictionary"], [119, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [119, 2, 1, "", "region"], [119, 2, 1, "", "returnEntityMappings"], [119, 2, 1, "", "sameEntityThreshold"], [119, 2, 1, "", "sameLengthFormattedEntities"], [119, 3, 1, "", "save"], [119, 2, 1, "", "seed"], [119, 2, 1, "", "selectiveObfuscationModesPath"], [119, 3, 1, "", "set"], [119, 3, 1, "", "setAgeGroups"], [119, 3, 1, "", "setAgeRanges"], [119, 3, 1, "", "setAgeRangesByHipaa"], [119, 3, 1, "", "setBlackList"], [119, 3, 1, "", "setBlackListEntities"], [119, 3, 1, "", "setCombineRegexPatterns"], [119, 3, 1, "", "setConsistentObfuscation"], [119, 3, 1, "", "setDateFormats"], [119, 3, 1, "", "setDateTag"], [119, 3, 1, "", "setDateToYear"], [119, 3, 1, "", "setDays"], [119, 3, 1, "", "setDoExceptionHandling"], [119, 3, 1, "", "setEntityCasingModes"], [119, 3, 1, "", "setFixedMaskLength"], [119, 3, 1, "", "setForceInputTypeValidation"], [119, 3, 1, "", "setGenderAwareness"], [119, 3, 1, "", "setIgnoreRegex"], [119, 3, 1, "", "setInputCols"], [119, 3, 1, "", "setIsRandomDateDisplacement"], [119, 3, 1, "", "setKeepYear"], [119, 3, 1, "", "setLanguage"], [119, 3, 1, "", "setLazyAnnotator"], [119, 3, 1, "", "setMappingsColumn"], [119, 3, 1, "", "setMaskingPolicy"], [119, 3, 1, "", "setMetadataMaskingPolicy"], [119, 3, 1, "", "setMinYear"], [119, 3, 1, "", "setMode"], [119, 3, 1, "", "setObfuscateByAgeGroups"], [119, 3, 1, "", "setObfuscateDate"], [119, 3, 1, "", "setObfuscateRefFile"], [119, 3, 1, "", "setObfuscateRefSource"], [119, 3, 1, "", "setObfuscationStrategyOnException"], [119, 3, 1, "", "setOutputAsDocument"], [119, 3, 1, "", "setOutputCol"], [119, 3, 1, "", "setParamValue"], [119, 3, 1, "", "setRefFileFormat"], [119, 3, 1, "", "setRefSep"], [119, 3, 1, "", "setRegexOverride"], [119, 3, 1, "", "setRegexPatternsDictionary"], [119, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [119, 3, 1, "", "setRegion"], [119, 3, 1, "", "setReturnEntityMappings"], [119, 3, 1, "", "setSameEntityThreshold"], [119, 3, 1, "", "setSameLengthFormattedEntities"], [119, 3, 1, "", "setSeed"], [119, 3, 1, "", "setSelectiveObfuscationModes"], [119, 3, 1, "", "setUnnormalizedDateMode"], [119, 3, 1, "", "setUseShifDays"], [119, 3, 1, "", "setUseShiftDays"], [119, 3, 1, "", "setZipCodeTag"], [119, 2, 1, "", "skipLPInputColsValidation"], [119, 2, 1, "", "unnormalizedDateMode"], [119, 2, 1, "", "useShifDays"], [119, 3, 1, "", "write"], [119, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[119, 2, 1, "", "ageRanges"], [119, 2, 1, "", "ageRangesByHipaa"], [119, 2, 1, "", "blackList"], [119, 2, 1, "", "blackListEntities"], [119, 3, 1, "", "clear"], [119, 2, 1, "", "consistentObfuscation"], [119, 3, 1, "", "copy"], [119, 2, 1, "", "dateFormats"], [119, 2, 1, "", "dateTag"], [119, 2, 1, "", "dateToYear"], [119, 2, 1, "", "days"], [119, 2, 1, "", "doExceptionHandling"], [119, 3, 1, "", "explainParam"], [119, 3, 1, "", "explainParams"], [119, 3, 1, "", "extractParamMap"], [119, 2, 1, "", "fixedMaskLength"], [119, 2, 1, "", "genderAwareness"], [119, 3, 1, "", "getBlackList"], [119, 3, 1, "", "getInputCols"], [119, 3, 1, "", "getLazyAnnotator"], [119, 3, 1, "", "getOrDefault"], [119, 3, 1, "", "getOutputCol"], [119, 3, 1, "", "getParam"], [119, 3, 1, "", "getParamValue"], [119, 3, 1, "", "getRegexEntities"], [119, 3, 1, "", "getSameLengthFormattedEntities"], [119, 3, 1, "", "getUseShiftDays"], [119, 2, 1, "", "getter_attrs"], [119, 3, 1, "", "hasDefault"], [119, 3, 1, "", "hasParam"], [119, 2, 1, "", "ignoreRegex"], [119, 2, 1, "", "inputAnnotatorTypes"], [119, 2, 1, "", "inputCols"], [119, 3, 1, "", "inputColsValidation"], [119, 3, 1, "", "isDefined"], [119, 2, 1, "", "isRandomDateDisplacement"], [119, 3, 1, "", "isSet"], [119, 2, 1, "", "keepYear"], [119, 2, 1, "", "language"], [119, 2, 1, "", "lazyAnnotator"], [119, 3, 1, "", "load"], [119, 2, 1, "", "mappingsColumn"], [119, 2, 1, "", "maskingPolicy"], [119, 2, 1, "", "metadataMaskingPolicy"], [119, 2, 1, "", "minYear"], [119, 2, 1, "", "mode"], [119, 2, 1, "", "name"], [119, 2, 1, "", "obfuscateByAgeGroups"], [119, 2, 1, "", "obfuscateDate"], [119, 2, 1, "", "obfuscateRefSource"], [119, 2, 1, "", "obfuscationStrategyOnException"], [119, 2, 1, "", "optionalInputAnnotatorTypes"], [119, 2, 1, "", "outputAnnotatorType"], [119, 2, 1, "", "outputAsDocument"], [119, 2, 1, "", "outputCol"], [119, 3, 1, "", "pretrained"], [119, 3, 1, "", "read"], [119, 2, 1, "", "regexEntities"], [119, 2, 1, "", "regexOverride"], [119, 2, 1, "", "region"], [119, 2, 1, "", "returnEntityMappings"], [119, 2, 1, "", "sameEntityThreshold"], [119, 2, 1, "", "sameLengthFormattedEntities"], [119, 3, 1, "", "save"], [119, 2, 1, "", "seed"], [119, 3, 1, "", "set"], [119, 3, 1, "", "setAgeGroups"], [119, 3, 1, "", "setAgeRanges"], [119, 3, 1, "", "setAgeRangesByHipaa"], [119, 3, 1, "", "setBlackList"], [119, 3, 1, "", "setBlackListEntities"], [119, 3, 1, "", "setConsistentObfuscation"], [119, 3, 1, "", "setDateFormats"], [119, 3, 1, "", "setDateTag"], [119, 3, 1, "", "setDateToYear"], [119, 3, 1, "", "setDays"], [119, 3, 1, "", "setDoExceptionHandling"], [119, 3, 1, "", "setFixedMaskLength"], [119, 3, 1, "", "setForceInputTypeValidation"], [119, 3, 1, "", "setGenderAwareness"], [119, 3, 1, "", "setIgnoreRegex"], [119, 3, 1, "", "setInputCols"], [119, 3, 1, "", "setIsRandomDateDisplacement"], [119, 3, 1, "", "setKeepYear"], [119, 3, 1, "", "setLanguage"], [119, 3, 1, "", "setLazyAnnotator"], [119, 3, 1, "", "setMappingsColumn"], [119, 3, 1, "", "setMaskingPolicy"], [119, 3, 1, "", "setMetadataMaskingPolicy"], [119, 3, 1, "", "setMinYear"], [119, 3, 1, "", "setMode"], [119, 3, 1, "", "setObfuscateByAgeGroups"], [119, 3, 1, "", "setObfuscateDate"], [119, 3, 1, "", "setObfuscateRefSource"], [119, 3, 1, "", "setObfuscationStrategyOnException"], [119, 3, 1, "", "setOutputAsDocument"], [119, 3, 1, "", "setOutputCol"], [119, 3, 1, "", "setParamValue"], [119, 3, 1, "", "setParams"], [119, 3, 1, "", "setRegexOverride"], [119, 3, 1, "", "setRegion"], [119, 3, 1, "", "setReturnEntityMappings"], [119, 3, 1, "", "setSameEntityThreshold"], [119, 3, 1, "", "setSameLengthFormattedEntities"], [119, 3, 1, "", "setSeed"], [119, 3, 1, "", "setUnnormalizedDateMode"], [119, 3, 1, "", "setUseShifDays"], [119, 3, 1, "", "setUseShiftDays"], [119, 3, 1, "", "setZipCodeTag"], [119, 2, 1, "", "skipLPInputColsValidation"], [119, 3, 1, "", "transform"], [119, 2, 1, "", "unnormalizedDateMode"], [119, 2, 1, "", "useShifDays"], [119, 3, 1, "", "write"], [119, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[120, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[120, 3, 1, "", "clear"], [120, 3, 1, "", "copy"], [120, 2, 1, "", "dateShiftColumn"], [120, 3, 1, "", "explainParam"], [120, 3, 1, "", "explainParams"], [120, 3, 1, "", "extractParamMap"], [120, 3, 1, "", "getInputCols"], [120, 3, 1, "", "getLazyAnnotator"], [120, 3, 1, "", "getOrDefault"], [120, 3, 1, "", "getOutputCol"], [120, 3, 1, "", "getParam"], [120, 3, 1, "", "getParamValue"], [120, 2, 1, "", "getter_attrs"], [120, 3, 1, "", "hasDefault"], [120, 3, 1, "", "hasParam"], [120, 2, 1, "", "inputAnnotatorTypes"], [120, 2, 1, "", "inputCols"], [120, 3, 1, "", "inputColsValidation"], [120, 3, 1, "", "isDefined"], [120, 3, 1, "", "isSet"], [120, 2, 1, "", "lazyAnnotator"], [120, 3, 1, "", "load"], [120, 2, 1, "", "name"], [120, 2, 1, "", "newDateShift"], [120, 2, 1, "", "optionalInputAnnotatorTypes"], [120, 2, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "outputCol"], [120, 2, 1, "", "patientIdColumn"], [120, 2, 1, "", "rangeDays"], [120, 3, 1, "", "read"], [120, 3, 1, "", "save"], [120, 2, 1, "", "seed"], [120, 3, 1, "", "set"], [120, 3, 1, "", "setDateShiftColumn"], [120, 3, 1, "", "setIdColumn"], [120, 3, 1, "", "setInputCols"], [120, 3, 1, "", "setLazyAnnotator"], [120, 3, 1, "", "setNewDateShift"], [120, 3, 1, "", "setOutputCol"], [120, 3, 1, "", "setParamValue"], [120, 3, 1, "", "setParams"], [120, 3, 1, "", "setPatientIdColumn"], [120, 3, 1, "", "setRangeDays"], [120, 3, 1, "", "setSeed"], [120, 3, 1, "", "transform"], [120, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[123, 0, 0, "-", "chunkmapper"], [124, 0, 0, "-", "docmapper"], [126, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[123, 1, 1, "", "ChunkMapperApproach"], [123, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[123, 2, 1, "", "allowMultiTokenChunk"], [123, 3, 1, "", "clear"], [123, 3, 1, "", "copy"], [123, 2, 1, "", "dictionary"], [123, 2, 1, "", "doExceptionHandling"], [123, 2, 1, "", "enableCharFingerprintMatching"], [123, 2, 1, "", "enableFuzzyMatching"], [123, 2, 1, "", "enableTokenFingerprintMatching"], [123, 3, 1, "", "explainParam"], [123, 3, 1, "", "explainParams"], [123, 3, 1, "", "extractParamMap"], [123, 3, 1, "", "fit"], [123, 3, 1, "", "fitMultiple"], [123, 2, 1, "", "fuzzyDistanceScalingMode"], [123, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [123, 2, 1, "", "fuzzyMatchingDistances"], [123, 3, 1, "", "getInputCols"], [123, 3, 1, "", "getLazyAnnotator"], [123, 3, 1, "", "getOrDefault"], [123, 3, 1, "", "getOutputCol"], [123, 3, 1, "", "getParam"], [123, 3, 1, "", "getParamValue"], [123, 2, 1, "", "getter_attrs"], [123, 3, 1, "", "hasDefault"], [123, 3, 1, "", "hasParam"], [123, 2, 1, "", "inputAnnotatorTypes"], [123, 2, 1, "", "inputCols"], [123, 3, 1, "", "inputColsValidation"], [123, 3, 1, "", "isDefined"], [123, 3, 1, "", "isSet"], [123, 2, 1, "", "lazyAnnotator"], [123, 3, 1, "", "load"], [123, 2, 1, "", "lowerCase"], [123, 2, 1, "", "maxCharNgramFingerprint"], [123, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [123, 2, 1, "", "maxTokenNgramDroppingOperator"], [123, 2, 1, "", "maxTokenNgramDroppingTokens"], [123, 2, 1, "", "maxTokenNgramFingerprint"], [123, 2, 1, "", "minCharNgramFingerprint"], [123, 2, 1, "", "minTokenNgramFingerprint"], [123, 2, 1, "", "multivaluesRelations"], [123, 2, 1, "", "name"], [123, 2, 1, "", "optionalInputAnnotatorTypes"], [123, 2, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "outputCol"], [123, 3, 1, "", "read"], [123, 2, 1, "", "rel"], [123, 2, 1, "", "rels"], [123, 3, 1, "", "save"], [123, 3, 1, "", "set"], [123, 3, 1, "", "setAllowMultiTokenChunk"], [123, 3, 1, "", "setDictionary"], [123, 3, 1, "", "setDoExceptionHandling"], [123, 3, 1, "", "setEnableCharFingerprintMatching"], [123, 3, 1, "", "setEnableFuzzyMatching"], [123, 3, 1, "", "setEnableTokenFingerprintMatching"], [123, 3, 1, "", "setForceInputTypeValidation"], [123, 3, 1, "", "setFuzzyDistanceScalingMode"], [123, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [123, 3, 1, "", "setFuzzyMatchingDistances"], [123, 3, 1, "", "setInputCols"], [123, 3, 1, "", "setLazyAnnotator"], [123, 3, 1, "", "setLowerCase"], [123, 3, 1, "", "setMaxCharNgramFingerprint"], [123, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [123, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [123, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [123, 3, 1, "", "setMaxTokenNgramFingerprint"], [123, 3, 1, "", "setMinCharNgramFingerprint"], [123, 3, 1, "", "setMinTokenNgramFingerprint"], [123, 3, 1, "", "setMultivaluesRelations"], [123, 3, 1, "", "setOutputCol"], [123, 3, 1, "", "setParamValue"], [123, 3, 1, "", "setRel"], [123, 3, 1, "", "setRels"], [123, 2, 1, "", "skipLPInputColsValidation"], [123, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[123, 2, 1, "", "allowMultiTokenChunk"], [123, 3, 1, "", "clear"], [123, 3, 1, "", "copy"], [123, 2, 1, "", "doExceptionHandling"], [123, 2, 1, "", "enableCharFingerprintMatching"], [123, 2, 1, "", "enableFuzzyMatching"], [123, 2, 1, "", "enableTokenFingerprintMatching"], [123, 3, 1, "", "explainParam"], [123, 3, 1, "", "explainParams"], [123, 3, 1, "", "extractParamMap"], [123, 2, 1, "", "fuzzyDistanceScalingMode"], [123, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [123, 2, 1, "", "fuzzyMatchingDistances"], [123, 3, 1, "", "getInputCols"], [123, 3, 1, "", "getLazyAnnotator"], [123, 3, 1, "", "getOrDefault"], [123, 3, 1, "", "getOutputCol"], [123, 3, 1, "", "getParam"], [123, 3, 1, "", "getParamValue"], [123, 2, 1, "", "getter_attrs"], [123, 3, 1, "", "hasDefault"], [123, 3, 1, "", "hasParam"], [123, 2, 1, "", "inputAnnotatorTypes"], [123, 2, 1, "", "inputCols"], [123, 3, 1, "", "inputColsValidation"], [123, 3, 1, "", "isDefined"], [123, 3, 1, "", "isSet"], [123, 2, 1, "", "lazyAnnotator"], [123, 3, 1, "", "load"], [123, 2, 1, "", "lowerCase"], [123, 2, 1, "", "maxCharNgramFingerprint"], [123, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [123, 2, 1, "", "maxTokenNgramDroppingOperator"], [123, 2, 1, "", "maxTokenNgramDroppingTokens"], [123, 2, 1, "", "maxTokenNgramFingerprint"], [123, 2, 1, "", "minCharNgramFingerprint"], [123, 2, 1, "", "minTokenNgramFingerprint"], [123, 2, 1, "", "multivaluesRelations"], [123, 2, 1, "", "name"], [123, 2, 1, "", "optionalInputAnnotatorTypes"], [123, 2, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "outputCol"], [123, 3, 1, "", "pretrained"], [123, 3, 1, "", "read"], [123, 2, 1, "", "rel"], [123, 2, 1, "", "rels"], [123, 3, 1, "", "save"], [123, 3, 1, "", "set"], [123, 3, 1, "", "setAllowMultiTokenChunk"], [123, 3, 1, "", "setDoExceptionHandling"], [123, 3, 1, "", "setEnableCharFingerprintMatching"], [123, 3, 1, "", "setEnableFuzzyMatching"], [123, 3, 1, "", "setEnableTokenFingerprintMatching"], [123, 3, 1, "", "setForceInputTypeValidation"], [123, 3, 1, "", "setFuzzyDistanceScalingMode"], [123, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [123, 3, 1, "", "setFuzzyMatchingDistances"], [123, 3, 1, "", "setInputCols"], [123, 3, 1, "", "setLazyAnnotator"], [123, 3, 1, "", "setLowerCase"], [123, 3, 1, "", "setMaxCharNgramFingerprint"], [123, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [123, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [123, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [123, 3, 1, "", "setMaxTokenNgramFingerprint"], [123, 3, 1, "", "setMinCharNgramFingerprint"], [123, 3, 1, "", "setMinTokenNgramFingerprint"], [123, 3, 1, "", "setMultivaluesRelations"], [123, 3, 1, "", "setOutputCol"], [123, 3, 1, "", "setParamValue"], [123, 3, 1, "", "setParams"], [123, 3, 1, "", "setRel"], [123, 3, 1, "", "setRels"], [123, 2, 1, "", "skipLPInputColsValidation"], [123, 3, 1, "", "transform"], [123, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[124, 1, 1, "", "DocMapperApproach"], [124, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[124, 2, 1, "", "allowMultiTokenChunk"], [124, 3, 1, "", "clear"], [124, 3, 1, "", "copy"], [124, 2, 1, "", "dictionary"], [124, 2, 1, "", "doExceptionHandling"], [124, 2, 1, "", "enableCharFingerprintMatching"], [124, 2, 1, "", "enableFuzzyMatching"], [124, 2, 1, "", "enableTokenFingerprintMatching"], [124, 3, 1, "", "explainParam"], [124, 3, 1, "", "explainParams"], [124, 3, 1, "", "extractParamMap"], [124, 3, 1, "", "fit"], [124, 3, 1, "", "fitMultiple"], [124, 2, 1, "", "fuzzyDistanceScalingMode"], [124, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [124, 2, 1, "", "fuzzyMatchingDistances"], [124, 3, 1, "", "getInputCols"], [124, 3, 1, "", "getLazyAnnotator"], [124, 3, 1, "", "getOrDefault"], [124, 3, 1, "", "getOutputCol"], [124, 3, 1, "", "getParam"], [124, 3, 1, "", "getParamValue"], [124, 2, 1, "", "getter_attrs"], [124, 3, 1, "", "hasDefault"], [124, 3, 1, "", "hasParam"], [124, 2, 1, "", "inputAnnotatorTypes"], [124, 2, 1, "", "inputCols"], [124, 3, 1, "", "inputColsValidation"], [124, 3, 1, "", "isDefined"], [124, 3, 1, "", "isSet"], [124, 2, 1, "", "lazyAnnotator"], [124, 3, 1, "", "load"], [124, 2, 1, "", "lowerCase"], [124, 2, 1, "", "maxCharNgramFingerprint"], [124, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [124, 2, 1, "", "maxTokenNgramDroppingOperator"], [124, 2, 1, "", "maxTokenNgramDroppingTokens"], [124, 2, 1, "", "maxTokenNgramFingerprint"], [124, 2, 1, "", "minCharNgramFingerprint"], [124, 2, 1, "", "minTokenNgramFingerprint"], [124, 2, 1, "", "multivaluesRelations"], [124, 2, 1, "", "name"], [124, 2, 1, "", "optionalInputAnnotatorTypes"], [124, 2, 1, "", "outputAnnotatorType"], [124, 2, 1, "", "outputCol"], [124, 3, 1, "", "read"], [124, 2, 1, "", "rel"], [124, 2, 1, "", "rels"], [124, 3, 1, "", "save"], [124, 3, 1, "", "set"], [124, 3, 1, "", "setAllowMultiTokenChunk"], [124, 3, 1, "", "setDictionary"], [124, 3, 1, "", "setDoExceptionHandling"], [124, 3, 1, "", "setEnableCharFingerprintMatching"], [124, 3, 1, "", "setEnableFuzzyMatching"], [124, 3, 1, "", "setEnableTokenFingerprintMatching"], [124, 3, 1, "", "setForceInputTypeValidation"], [124, 3, 1, "", "setFuzzyDistanceScalingMode"], [124, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [124, 3, 1, "", "setFuzzyMatchingDistances"], [124, 3, 1, "", "setInputCols"], [124, 3, 1, "", "setLazyAnnotator"], [124, 3, 1, "", "setLowerCase"], [124, 3, 1, "", "setMaxCharNgramFingerprint"], [124, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [124, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [124, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [124, 3, 1, "", "setMaxTokenNgramFingerprint"], [124, 3, 1, "", "setMinCharNgramFingerprint"], [124, 3, 1, "", "setMinTokenNgramFingerprint"], [124, 3, 1, "", "setMultivaluesRelations"], [124, 3, 1, "", "setOutputCol"], [124, 3, 1, "", "setParamValue"], [124, 3, 1, "", "setRel"], [124, 3, 1, "", "setRels"], [124, 2, 1, "", "skipLPInputColsValidation"], [124, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[124, 2, 1, "", "allowMultiTokenChunk"], [124, 3, 1, "", "clear"], [124, 3, 1, "", "copy"], [124, 2, 1, "", "doExceptionHandling"], [124, 2, 1, "", "enableCharFingerprintMatching"], [124, 2, 1, "", "enableFuzzyMatching"], [124, 2, 1, "", "enableTokenFingerprintMatching"], [124, 3, 1, "", "explainParam"], [124, 3, 1, "", "explainParams"], [124, 3, 1, "", "extractParamMap"], [124, 2, 1, "", "fuzzyDistanceScalingMode"], [124, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [124, 2, 1, "", "fuzzyMatchingDistances"], [124, 3, 1, "", "getInputCols"], [124, 3, 1, "", "getLazyAnnotator"], [124, 3, 1, "", "getOrDefault"], [124, 3, 1, "", "getOutputCol"], [124, 3, 1, "", "getParam"], [124, 3, 1, "", "getParamValue"], [124, 2, 1, "", "getter_attrs"], [124, 3, 1, "", "hasDefault"], [124, 3, 1, "", "hasParam"], [124, 2, 1, "", "inputAnnotatorTypes"], [124, 2, 1, "", "inputCols"], [124, 3, 1, "", "inputColsValidation"], [124, 3, 1, "", "isDefined"], [124, 3, 1, "", "isSet"], [124, 2, 1, "", "lazyAnnotator"], [124, 3, 1, "", "load"], [124, 2, 1, "", "lowerCase"], [124, 2, 1, "", "maxCharNgramFingerprint"], [124, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [124, 2, 1, "", "maxTokenNgramDroppingOperator"], [124, 2, 1, "", "maxTokenNgramDroppingTokens"], [124, 2, 1, "", "maxTokenNgramFingerprint"], [124, 2, 1, "", "minCharNgramFingerprint"], [124, 2, 1, "", "minTokenNgramFingerprint"], [124, 2, 1, "", "multivaluesRelations"], [124, 2, 1, "", "name"], [124, 2, 1, "", "optionalInputAnnotatorTypes"], [124, 2, 1, "", "outputAnnotatorType"], [124, 2, 1, "", "outputCol"], [124, 3, 1, "", "pretrained"], [124, 3, 1, "", "read"], [124, 2, 1, "", "rel"], [124, 2, 1, "", "rels"], [124, 3, 1, "", "save"], [124, 3, 1, "", "set"], [124, 3, 1, "", "setAllowMultiTokenChunk"], [124, 3, 1, "", "setDoExceptionHandling"], [124, 3, 1, "", "setEnableCharFingerprintMatching"], [124, 3, 1, "", "setEnableFuzzyMatching"], [124, 3, 1, "", "setEnableTokenFingerprintMatching"], [124, 3, 1, "", "setForceInputTypeValidation"], [124, 3, 1, "", "setFuzzyDistanceScalingMode"], [124, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [124, 3, 1, "", "setFuzzyMatchingDistances"], [124, 3, 1, "", "setInputCols"], [124, 3, 1, "", "setLazyAnnotator"], [124, 3, 1, "", "setLowerCase"], [124, 3, 1, "", "setMaxCharNgramFingerprint"], [124, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [124, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [124, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [124, 3, 1, "", "setMaxTokenNgramFingerprint"], [124, 3, 1, "", "setMinCharNgramFingerprint"], [124, 3, 1, "", "setMinTokenNgramFingerprint"], [124, 3, 1, "", "setMultivaluesRelations"], [124, 3, 1, "", "setOutputCol"], [124, 3, 1, "", "setParamValue"], [124, 3, 1, "", "setParams"], [124, 3, 1, "", "setRel"], [124, 3, 1, "", "setRels"], [124, 2, 1, "", "skipLPInputColsValidation"], [124, 3, 1, "", "transform"], [124, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[126, 1, 1, "", "SentenceEntityResolverApproach"], [126, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[126, 2, 1, "", "aux_label_col"], [126, 2, 1, "", "caseSensitive"], [126, 3, 1, "", "clear"], [126, 2, 1, "", "confidenceFunction"], [126, 3, 1, "", "copy"], [126, 2, 1, "", "datasetInfo"], [126, 2, 1, "", "distanceFunction"], [126, 2, 1, "", "doExceptionHandling"], [126, 2, 1, "", "dropCodesList"], [126, 2, 1, "", "engine"], [126, 3, 1, "", "explainParam"], [126, 3, 1, "", "explainParams"], [126, 3, 1, "", "extractParamMap"], [126, 3, 1, "", "fit"], [126, 3, 1, "", "fitMultiple"], [126, 3, 1, "", "getCaseSensitive"], [126, 3, 1, "", "getEngine"], [126, 3, 1, "", "getInputCols"], [126, 3, 1, "", "getLazyAnnotator"], [126, 3, 1, "", "getOrDefault"], [126, 3, 1, "", "getOutputCol"], [126, 3, 1, "", "getParam"], [126, 3, 1, "", "getParamValue"], [126, 2, 1, "", "getter_attrs"], [126, 3, 1, "", "hasDefault"], [126, 3, 1, "", "hasParam"], [126, 2, 1, "", "inputAnnotatorTypes"], [126, 2, 1, "", "inputCols"], [126, 3, 1, "", "inputColsValidation"], [126, 3, 1, "", "isDefined"], [126, 3, 1, "", "isSet"], [126, 2, 1, "", "labelCol"], [126, 2, 1, "", "lazyAnnotator"], [126, 3, 1, "", "load"], [126, 2, 1, "", "missAsEmpty"], [126, 2, 1, "", "neighbours"], [126, 2, 1, "", "normalizedCol"], [126, 2, 1, "", "optionalInputAnnotatorTypes"], [126, 2, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "outputCol"], [126, 2, 1, "", "overrideExistingCodes"], [126, 2, 1, "", "pretrainedModelPath"], [126, 3, 1, "", "read"], [126, 2, 1, "", "returnCosineDistances"], [126, 2, 1, "", "returnResolvedTextEmbeddings"], [126, 3, 1, "", "save"], [126, 3, 1, "", "set"], [126, 3, 1, "", "setAuxLabelCol"], [126, 3, 1, "", "setCaseSensitive"], [126, 3, 1, "", "setConfidenceFunction"], [126, 3, 1, "", "setDatasetInfo"], [126, 3, 1, "", "setDistanceFunction"], [126, 3, 1, "", "setDoExceptionHandling"], [126, 3, 1, "", "setDropCodesList"], [126, 3, 1, "", "setExtractCosineDistances"], [126, 3, 1, "", "setForceInputTypeValidation"], [126, 3, 1, "", "setInputCols"], [126, 3, 1, "", "setLabelCol"], [126, 3, 1, "", "setLazyAnnotator"], [126, 3, 1, "", "setMissAsEmpty"], [126, 3, 1, "", "setNeighbours"], [126, 3, 1, "", "setNormalizedCol"], [126, 3, 1, "", "setOutputCol"], [126, 3, 1, "", "setOverrideExistingCodes"], [126, 3, 1, "", "setParamValue"], [126, 3, 1, "", "setPretrainedModelPath"], [126, 3, 1, "", "setReturnResolvedTextEmbeddings"], [126, 3, 1, "", "setThreshold"], [126, 3, 1, "", "setUseAuxLabel"], [126, 2, 1, "", "skipLPInputColsValidation"], [126, 2, 1, "", "threshold"], [126, 2, 1, "", "useAuxLabel"], [126, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[126, 2, 1, "", "caseSensitive"], [126, 3, 1, "", "clear"], [126, 3, 1, "", "copy"], [126, 2, 1, "", "dimension"], [126, 3, 1, "", "explainParam"], [126, 3, 1, "", "explainParams"], [126, 3, 1, "", "extractParamMap"], [126, 3, 1, "", "getCaseSensitive"], [126, 3, 1, "", "getDimension"], [126, 3, 1, "", "getInputCols"], [126, 3, 1, "", "getLazyAnnotator"], [126, 3, 1, "", "getOrDefault"], [126, 3, 1, "", "getOutputCol"], [126, 3, 1, "", "getParam"], [126, 3, 1, "", "getParamValue"], [126, 3, 1, "", "getStorageRef"], [126, 2, 1, "", "getter_attrs"], [126, 3, 1, "", "hasDefault"], [126, 3, 1, "", "hasParam"], [126, 2, 1, "", "inputAnnotatorTypes"], [126, 2, 1, "", "inputCols"], [126, 3, 1, "", "inputColsValidation"], [126, 3, 1, "", "isDefined"], [126, 3, 1, "", "isSet"], [126, 2, 1, "", "lazyAnnotator"], [126, 3, 1, "", "load"], [126, 3, 1, "", "loadStorage"], [126, 3, 1, "", "loadStorages"], [126, 2, 1, "", "name"], [126, 2, 1, "", "optionalInputAnnotatorTypes"], [126, 2, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "outputCol"], [126, 3, 1, "", "pretrained"], [126, 3, 1, "", "read"], [126, 2, 1, "", "returnCosineDistances"], [126, 3, 1, "", "save"], [126, 3, 1, "", "saveStorage"], [126, 2, 1, "", "searchTree"], [126, 3, 1, "", "set"], [126, 3, 1, "", "setCaseSensitive"], [126, 3, 1, "", "setDimension"], [126, 3, 1, "", "setForceInputTypeValidation"], [126, 3, 1, "", "setInputCols"], [126, 3, 1, "", "setLazyAnnotator"], [126, 3, 1, "", "setOutputCol"], [126, 3, 1, "", "setParamValue"], [126, 3, 1, "", "setParams"], [126, 3, 1, "", "setSearchTree"], [126, 3, 1, "", "setStorageRef"], [126, 3, 1, "", "setUseAuxLabel"], [126, 2, 1, "", "skipLPInputColsValidation"], [126, 2, 1, "", "storageRef"], [126, 3, 1, "", "transform"], [126, 2, 1, "", "useAuxLabel"], [126, 3, 1, "", "write"]], "sparknlp_jsl.finance.graph": [[128, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[129, 0, 0, "-", "relation_extraction_dl"], [130, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[129, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[129, 2, 1, "", "batchSize"], [129, 2, 1, "", "classes"], [129, 3, 1, "", "clear"], [129, 3, 1, "", "copy"], [129, 2, 1, "", "customLabels"], [129, 2, 1, "", "doExceptionHandling"], [129, 3, 1, "", "explainParam"], [129, 3, 1, "", "explainParams"], [129, 3, 1, "", "extractParamMap"], [129, 3, 1, "", "getClasses"], [129, 3, 1, "", "getInputCols"], [129, 3, 1, "", "getLazyAnnotator"], [129, 3, 1, "", "getOrDefault"], [129, 3, 1, "", "getOutputCol"], [129, 3, 1, "", "getParam"], [129, 3, 1, "", "getParamValue"], [129, 3, 1, "", "getRelationTypePerPair"], [129, 2, 1, "", "getter_attrs"], [129, 3, 1, "", "hasDefault"], [129, 3, 1, "", "hasParam"], [129, 2, 1, "", "inputAnnotatorTypes"], [129, 2, 1, "", "inputCols"], [129, 3, 1, "", "inputColsValidation"], [129, 3, 1, "", "isDefined"], [129, 3, 1, "", "isSet"], [129, 2, 1, "", "lazyAnnotator"], [129, 3, 1, "", "load"], [129, 3, 1, "", "loadSavedModel"], [129, 2, 1, "", "name"], [129, 2, 1, "", "optionalInputAnnotatorTypes"], [129, 2, 1, "", "outputAnnotatorType"], [129, 2, 1, "", "outputCol"], [129, 2, 1, "", "predictionThreshold"], [129, 3, 1, "", "pretrained"], [129, 3, 1, "", "read"], [129, 2, 1, "", "relationPairsCaseSensitive"], [129, 3, 1, "", "save"], [129, 3, 1, "", "set"], [129, 3, 1, "", "setBatchSize"], [129, 3, 1, "", "setCaseSensitive"], [129, 3, 1, "", "setCustomLabels"], [129, 3, 1, "", "setDoExceptionHandling"], [129, 3, 1, "", "setForceInputTypeValidation"], [129, 3, 1, "", "setInputCols"], [129, 3, 1, "", "setLazyAnnotator"], [129, 3, 1, "", "setOutputCol"], [129, 3, 1, "", "setParamValue"], [129, 3, 1, "", "setParams"], [129, 3, 1, "", "setPredictionThreshold"], [129, 3, 1, "", "setRelationPairsCaseSensitive"], [129, 3, 1, "", "setRelationTypePerPair"], [129, 2, 1, "", "skipLPInputColsValidation"], [129, 3, 1, "", "transform"], [129, 3, 1, "", "write"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[130, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[130, 2, 1, "", "batchSize"], [130, 2, 1, "", "caseSensitive"], [130, 3, 1, "", "clear"], [130, 2, 1, "", "coalesceSentences"], [130, 2, 1, "", "configProtoBytes"], [130, 3, 1, "", "copy"], [130, 3, 1, "", "explainParam"], [130, 3, 1, "", "explainParams"], [130, 3, 1, "", "extractParamMap"], [130, 3, 1, "", "getBatchSize"], [130, 3, 1, "", "getCaseSensitive"], [130, 3, 1, "", "getClasses"], [130, 3, 1, "", "getInputCols"], [130, 3, 1, "", "getLazyAnnotator"], [130, 3, 1, "", "getOrDefault"], [130, 3, 1, "", "getOutputCol"], [130, 3, 1, "", "getParam"], [130, 3, 1, "", "getParamValue"], [130, 2, 1, "", "getter_attrs"], [130, 3, 1, "", "hasDefault"], [130, 3, 1, "", "hasParam"], [130, 2, 1, "", "inputAnnotatorTypes"], [130, 2, 1, "", "inputCols"], [130, 3, 1, "", "inputColsValidation"], [130, 3, 1, "", "isDefined"], [130, 3, 1, "", "isSet"], [130, 2, 1, "", "lazyAnnotator"], [130, 3, 1, "", "load"], [130, 3, 1, "", "loadSavedModel"], [130, 3, 1, "", "loadSavedModelOpenSource"], [130, 2, 1, "", "maxSentenceLength"], [130, 2, 1, "", "multiLabel"], [130, 2, 1, "", "name"], [130, 2, 1, "", "negativeRelationships"], [130, 2, 1, "", "optionalInputAnnotatorTypes"], [130, 2, 1, "", "outputAnnotatorType"], [130, 2, 1, "", "outputCol"], [130, 2, 1, "", "predictionThreshold"], [130, 3, 1, "", "pretrained"], [130, 3, 1, "", "read"], [130, 3, 1, "", "save"], [130, 3, 1, "", "set"], [130, 3, 1, "", "setBatchSize"], [130, 3, 1, "", "setCaseSensitive"], [130, 3, 1, "", "setCoalesceSentences"], [130, 3, 1, "", "setConfigProtoBytes"], [130, 3, 1, "", "setForceInputTypeValidation"], [130, 3, 1, "", "setInputCols"], [130, 3, 1, "", "setLazyAnnotator"], [130, 3, 1, "", "setMaxSentenceLength"], [130, 3, 1, "", "setNegativeRelationships"], [130, 3, 1, "", "setOutputCol"], [130, 3, 1, "", "setParamValue"], [130, 3, 1, "", "setParams"], [130, 3, 1, "", "setRelationalCategories"], [130, 2, 1, "", "skipLPInputColsValidation"], [130, 3, 1, "", "transform"], [130, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification": [[132, 0, 0, "-", "finance_bert_for_sequence_classification"], [133, 0, 0, "-", "finance_classifier_dl"], [134, 0, 0, "-", "finance_document_ml_classifier"], [135, 0, 0, "-", "finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[132, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[132, 2, 1, "", "batchSize"], [132, 2, 1, "", "caseSensitive"], [132, 3, 1, "", "clear"], [132, 2, 1, "", "coalesceSentences"], [132, 2, 1, "", "configProtoBytes"], [132, 3, 1, "", "copy"], [132, 3, 1, "", "explainParam"], [132, 3, 1, "", "explainParams"], [132, 3, 1, "", "extractParamMap"], [132, 3, 1, "", "getBatchSize"], [132, 3, 1, "", "getCaseSensitive"], [132, 3, 1, "", "getClasses"], [132, 3, 1, "", "getInputCols"], [132, 3, 1, "", "getLazyAnnotator"], [132, 3, 1, "", "getOrDefault"], [132, 3, 1, "", "getOutputCol"], [132, 3, 1, "", "getParam"], [132, 3, 1, "", "getParamValue"], [132, 2, 1, "", "getter_attrs"], [132, 3, 1, "", "hasDefault"], [132, 3, 1, "", "hasParam"], [132, 2, 1, "", "inputAnnotatorTypes"], [132, 2, 1, "", "inputCols"], [132, 3, 1, "", "inputColsValidation"], [132, 3, 1, "", "isDefined"], [132, 3, 1, "", "isSet"], [132, 2, 1, "", "lazyAnnotator"], [132, 3, 1, "", "load"], [132, 3, 1, "", "loadSavedModel"], [132, 3, 1, "", "loadSavedModelOpenSource"], [132, 2, 1, "", "maxSentenceLength"], [132, 2, 1, "", "name"], [132, 2, 1, "", "optionalInputAnnotatorTypes"], [132, 2, 1, "", "outputAnnotatorType"], [132, 2, 1, "", "outputCol"], [132, 3, 1, "", "pretrained"], [132, 3, 1, "", "read"], [132, 3, 1, "", "save"], [132, 3, 1, "", "set"], [132, 3, 1, "", "setBatchSize"], [132, 3, 1, "", "setCaseSensitive"], [132, 3, 1, "", "setCoalesceSentences"], [132, 3, 1, "", "setConfigProtoBytes"], [132, 3, 1, "", "setForceInputTypeValidation"], [132, 3, 1, "", "setInputCols"], [132, 3, 1, "", "setLazyAnnotator"], [132, 3, 1, "", "setMaxSentenceLength"], [132, 3, 1, "", "setOutputCol"], [132, 3, 1, "", "setParamValue"], [132, 3, 1, "", "setParams"], [132, 2, 1, "", "skipLPInputColsValidation"], [132, 3, 1, "", "transform"], [132, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[133, 1, 1, "", "FinanceClassifierDLApproach"], [133, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach": [[133, 2, 1, "", "batchSize"], [133, 3, 1, "", "clear"], [133, 2, 1, "", "configProtoBytes"], [133, 3, 1, "", "copy"], [133, 2, 1, "", "dropout"], [133, 2, 1, "", "enableOutputLogs"], [133, 2, 1, "", "evaluationLogExtended"], [133, 3, 1, "", "explainParam"], [133, 3, 1, "", "explainParams"], [133, 3, 1, "", "extractParamMap"], [133, 3, 1, "", "fit"], [133, 3, 1, "", "fitMultiple"], [133, 3, 1, "", "getInputCols"], [133, 3, 1, "", "getLazyAnnotator"], [133, 3, 1, "", "getOrDefault"], [133, 3, 1, "", "getOutputCol"], [133, 3, 1, "", "getParam"], [133, 3, 1, "", "getParamValue"], [133, 2, 1, "", "getter_attrs"], [133, 3, 1, "", "hasDefault"], [133, 3, 1, "", "hasParam"], [133, 2, 1, "", "inputAnnotatorTypes"], [133, 2, 1, "", "inputCols"], [133, 3, 1, "", "inputColsValidation"], [133, 3, 1, "", "isDefined"], [133, 3, 1, "", "isSet"], [133, 2, 1, "", "labelColumn"], [133, 2, 1, "", "lazyAnnotator"], [133, 3, 1, "", "load"], [133, 2, 1, "", "lr"], [133, 2, 1, "", "maxEpochs"], [133, 2, 1, "", "optionalInputAnnotatorTypes"], [133, 2, 1, "", "outputAnnotatorType"], [133, 2, 1, "", "outputCol"], [133, 2, 1, "", "outputLogsPath"], [133, 2, 1, "", "randomSeed"], [133, 3, 1, "", "read"], [133, 3, 1, "", "save"], [133, 3, 1, "", "set"], [133, 3, 1, "", "setBatchSize"], [133, 3, 1, "", "setConfigProtoBytes"], [133, 3, 1, "", "setDropout"], [133, 3, 1, "", "setEnableOutputLogs"], [133, 3, 1, "", "setEvaluationLogExtended"], [133, 3, 1, "", "setInputCols"], [133, 3, 1, "", "setLabelColumn"], [133, 3, 1, "", "setLazyAnnotator"], [133, 3, 1, "", "setLr"], [133, 3, 1, "", "setMaxEpochs"], [133, 3, 1, "", "setOutputCol"], [133, 3, 1, "", "setOutputLogsPath"], [133, 3, 1, "", "setParamValue"], [133, 3, 1, "", "setRandomSeed"], [133, 3, 1, "", "setTestDataset"], [133, 3, 1, "", "setValidationSplit"], [133, 3, 1, "", "setVerbose"], [133, 2, 1, "", "testDataset"], [133, 2, 1, "", "validationSplit"], [133, 2, 1, "", "verbose"], [133, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[133, 2, 1, "", "classes"], [133, 3, 1, "", "clear"], [133, 2, 1, "", "configProtoBytes"], [133, 3, 1, "", "copy"], [133, 2, 1, "", "engine"], [133, 3, 1, "", "explainParam"], [133, 3, 1, "", "explainParams"], [133, 3, 1, "", "extractParamMap"], [133, 3, 1, "", "getEngine"], [133, 3, 1, "", "getInputCols"], [133, 3, 1, "", "getLazyAnnotator"], [133, 3, 1, "", "getOrDefault"], [133, 3, 1, "", "getOutputCol"], [133, 3, 1, "", "getParam"], [133, 3, 1, "", "getParamValue"], [133, 3, 1, "", "getStorageRef"], [133, 2, 1, "", "getter_attrs"], [133, 3, 1, "", "hasDefault"], [133, 3, 1, "", "hasParam"], [133, 2, 1, "", "inputAnnotatorTypes"], [133, 2, 1, "", "inputCols"], [133, 3, 1, "", "inputColsValidation"], [133, 3, 1, "", "isDefined"], [133, 3, 1, "", "isSet"], [133, 2, 1, "", "lazyAnnotator"], [133, 3, 1, "", "load"], [133, 2, 1, "", "name"], [133, 2, 1, "", "optionalInputAnnotatorTypes"], [133, 2, 1, "", "outputAnnotatorType"], [133, 2, 1, "", "outputCol"], [133, 3, 1, "", "pretrained"], [133, 3, 1, "", "read"], [133, 3, 1, "", "save"], [133, 3, 1, "", "set"], [133, 3, 1, "", "setConfigProtoBytes"], [133, 3, 1, "", "setInputCols"], [133, 3, 1, "", "setLazyAnnotator"], [133, 3, 1, "", "setOutputCol"], [133, 3, 1, "", "setParamValue"], [133, 3, 1, "", "setParams"], [133, 3, 1, "", "setStorageRef"], [133, 2, 1, "", "storageRef"], [133, 3, 1, "", "transform"], [133, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[134, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [134, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach": [[134, 2, 1, "", "classificationModelClass"], [134, 2, 1, "", "classificationModelPath"], [134, 3, 1, "", "clear"], [134, 3, 1, "", "copy"], [134, 3, 1, "", "explainParam"], [134, 3, 1, "", "explainParams"], [134, 3, 1, "", "extractParamMap"], [134, 3, 1, "", "fit"], [134, 2, 1, "", "fitIntercept"], [134, 3, 1, "", "fitMultiple"], [134, 3, 1, "", "getInputCols"], [134, 3, 1, "", "getLazyAnnotator"], [134, 3, 1, "", "getOrDefault"], [134, 3, 1, "", "getOutputCol"], [134, 3, 1, "", "getParam"], [134, 3, 1, "", "getParamValue"], [134, 2, 1, "", "getter_attrs"], [134, 3, 1, "", "hasDefault"], [134, 3, 1, "", "hasParam"], [134, 2, 1, "", "inputAnnotatorTypes"], [134, 2, 1, "", "inputCols"], [134, 3, 1, "", "inputColsValidation"], [134, 3, 1, "", "isDefined"], [134, 3, 1, "", "isSet"], [134, 2, 1, "", "labelCol"], [134, 2, 1, "", "labels"], [134, 2, 1, "", "lazyAnnotator"], [134, 3, 1, "", "load"], [134, 2, 1, "", "maxIter"], [134, 2, 1, "", "maxTokenNgram"], [134, 2, 1, "", "mergeChunks"], [134, 2, 1, "", "minTokenNgram"], [134, 2, 1, "", "optionalInputAnnotatorTypes"], [134, 2, 1, "", "outputAnnotatorType"], [134, 2, 1, "", "outputCol"], [134, 3, 1, "", "read"], [134, 3, 1, "", "save"], [134, 3, 1, "", "set"], [134, 3, 1, "", "setClassificationModelClass"], [134, 3, 1, "", "setClassificationModelPath"], [134, 3, 1, "", "setFitIntercept"], [134, 3, 1, "", "setForceInputTypeValidation"], [134, 3, 1, "", "setInputCols"], [134, 3, 1, "", "setLabelCol"], [134, 3, 1, "", "setLabels"], [134, 3, 1, "", "setLazyAnnotator"], [134, 3, 1, "", "setMaxIter"], [134, 3, 1, "", "setMaxTokenNgram"], [134, 3, 1, "", "setMergeChunks"], [134, 3, 1, "", "setMinTokenNgram"], [134, 3, 1, "", "setOutputCol"], [134, 3, 1, "", "setParamValue"], [134, 3, 1, "", "setTol"], [134, 3, 1, "", "setVectorizationModelPath"], [134, 2, 1, "", "skipLPInputColsValidation"], [134, 2, 1, "", "tol"], [134, 2, 1, "", "vectorizationModelPath"], [134, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[134, 2, 1, "", "classificationModel"], [134, 3, 1, "", "clear"], [134, 3, 1, "", "copy"], [134, 3, 1, "", "explainParam"], [134, 3, 1, "", "explainParams"], [134, 3, 1, "", "extractParamMap"], [134, 3, 1, "", "getInputCols"], [134, 3, 1, "", "getLazyAnnotator"], [134, 3, 1, "", "getOrDefault"], [134, 3, 1, "", "getOutputCol"], [134, 3, 1, "", "getParam"], [134, 3, 1, "", "getParamValue"], [134, 2, 1, "", "getter_attrs"], [134, 3, 1, "", "hasDefault"], [134, 3, 1, "", "hasParam"], [134, 2, 1, "", "inputAnnotatorTypes"], [134, 2, 1, "", "inputCols"], [134, 3, 1, "", "inputColsValidation"], [134, 3, 1, "", "isDefined"], [134, 3, 1, "", "isSet"], [134, 2, 1, "", "labels"], [134, 2, 1, "", "lazyAnnotator"], [134, 3, 1, "", "load"], [134, 2, 1, "", "maxTokenNgram"], [134, 2, 1, "", "mergeChunks"], [134, 2, 1, "", "minTokenNgram"], [134, 2, 1, "", "name"], [134, 2, 1, "", "optionalInputAnnotatorTypes"], [134, 2, 1, "", "outputAnnotatorType"], [134, 2, 1, "", "outputCol"], [134, 3, 1, "", "pretrained"], [134, 3, 1, "", "read"], [134, 3, 1, "", "save"], [134, 3, 1, "", "set"], [134, 3, 1, "", "setClassificationModel"], [134, 3, 1, "", "setForceInputTypeValidation"], [134, 3, 1, "", "setInputCols"], [134, 3, 1, "", "setLabels"], [134, 3, 1, "", "setLazyAnnotator"], [134, 3, 1, "", "setMergeChunks"], [134, 3, 1, "", "setOutputCol"], [134, 3, 1, "", "setParamValue"], [134, 3, 1, "", "setParams"], [134, 3, 1, "", "setVectorizationModel"], [134, 2, 1, "", "skipLPInputColsValidation"], [134, 3, 1, "", "transform"], [134, 2, 1, "", "vectorizationModel"], [134, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[135, 1, 1, "", "FinanceFewShotClassifierApproach"], [135, 1, 1, "", "FinanceFewShotClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach": [[135, 2, 1, "", "batchSize"], [135, 3, 1, "", "clear"], [135, 3, 1, "", "copy"], [135, 2, 1, "", "datasetInfo"], [135, 2, 1, "", "doExceptionHandling"], [135, 2, 1, "", "dropout"], [135, 2, 1, "", "engine"], [135, 2, 1, "", "epochsN"], [135, 3, 1, "", "explainParam"], [135, 3, 1, "", "explainParams"], [135, 3, 1, "", "extractParamMap"], [135, 2, 1, "", "featureScaling"], [135, 3, 1, "", "fit"], [135, 3, 1, "", "fitMultiple"], [135, 2, 1, "", "fixImbalance"], [135, 3, 1, "", "getEngine"], [135, 3, 1, "", "getInputCols"], [135, 3, 1, "", "getLazyAnnotator"], [135, 3, 1, "", "getOrDefault"], [135, 3, 1, "", "getOutputCol"], [135, 3, 1, "", "getParam"], [135, 3, 1, "", "getParamValue"], [135, 2, 1, "", "getter_attrs"], [135, 3, 1, "", "hasDefault"], [135, 3, 1, "", "hasParam"], [135, 2, 1, "", "inputAnnotatorTypes"], [135, 2, 1, "", "inputCols"], [135, 3, 1, "", "inputColsValidation"], [135, 3, 1, "", "isDefined"], [135, 3, 1, "", "isSet"], [135, 2, 1, "", "labelColumn"], [135, 2, 1, "", "lazyAnnotator"], [135, 2, 1, "", "learningRate"], [135, 3, 1, "", "load"], [135, 2, 1, "", "modelFile"], [135, 2, 1, "", "multiClass"], [135, 2, 1, "", "name"], [135, 2, 1, "", "optionalInputAnnotatorTypes"], [135, 2, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "outputCol"], [135, 2, 1, "", "outputLogsPath"], [135, 3, 1, "", "read"], [135, 3, 1, "", "save"], [135, 3, 1, "", "set"], [135, 3, 1, "", "setBatchSize"], [135, 3, 1, "", "setDatasetInfo"], [135, 3, 1, "", "setDoExceptionHandling"], [135, 3, 1, "", "setDropout"], [135, 3, 1, "", "setEpochsNumber"], [135, 3, 1, "", "setFeatureScaling"], [135, 3, 1, "", "setFixImbalance"], [135, 3, 1, "", "setForceInputTypeValidation"], [135, 3, 1, "", "setInputCols"], [135, 3, 1, "", "setLabelCol"], [135, 3, 1, "", "setLazyAnnotator"], [135, 3, 1, "", "setLearningRate"], [135, 3, 1, "", "setModelFile"], [135, 3, 1, "", "setMultiClass"], [135, 3, 1, "", "setOutputCol"], [135, 3, 1, "", "setOutputLogsPath"], [135, 3, 1, "", "setParamValue"], [135, 3, 1, "", "setValidationSplit"], [135, 2, 1, "", "skipLPInputColsValidation"], [135, 2, 1, "", "validationSplit"], [135, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel": [[135, 2, 1, "", "classes"], [135, 3, 1, "", "clear"], [135, 3, 1, "", "copy"], [135, 2, 1, "", "datasetInfo"], [135, 2, 1, "", "doExceptionHandling"], [135, 3, 1, "", "explainParam"], [135, 3, 1, "", "explainParams"], [135, 3, 1, "", "extractParamMap"], [135, 2, 1, "", "featureScaling"], [135, 3, 1, "", "getInputCols"], [135, 3, 1, "", "getLazyAnnotator"], [135, 3, 1, "", "getOrDefault"], [135, 3, 1, "", "getOutputCol"], [135, 3, 1, "", "getParam"], [135, 3, 1, "", "getParamValue"], [135, 2, 1, "", "getter_attrs"], [135, 3, 1, "", "hasDefault"], [135, 3, 1, "", "hasParam"], [135, 2, 1, "", "inputAnnotatorTypes"], [135, 2, 1, "", "inputCols"], [135, 3, 1, "", "inputColsValidation"], [135, 3, 1, "", "isDefined"], [135, 3, 1, "", "isSet"], [135, 2, 1, "", "lazyAnnotator"], [135, 3, 1, "", "load"], [135, 2, 1, "", "multiClass"], [135, 2, 1, "", "name"], [135, 2, 1, "", "optionalInputAnnotatorTypes"], [135, 2, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "outputCol"], [135, 3, 1, "", "pretrained"], [135, 3, 1, "", "read"], [135, 3, 1, "", "save"], [135, 3, 1, "", "set"], [135, 3, 1, "", "setDatasetInfo"], [135, 3, 1, "", "setDoExceptionHandling"], [135, 3, 1, "", "setFeatureScaling"], [135, 3, 1, "", "setForceInputTypeValidation"], [135, 3, 1, "", "setInputCols"], [135, 3, 1, "", "setLazyAnnotator"], [135, 3, 1, "", "setMultiClass"], [135, 3, 1, "", "setOutputCol"], [135, 3, 1, "", "setParamValue"], [135, 3, 1, "", "setParams"], [135, 2, 1, "", "skipLPInputColsValidation"], [135, 3, 1, "", "transform"], [135, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation": [[137, 0, 0, "-", "finance_encoder_decoder"], [138, 0, 0, "-", "finance_qa"], [139, 0, 0, "-", "finance_summarizer"], [140, 0, 0, "-", "finance_text_generator"], [142, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[137, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[137, 2, 1, "", "batchSize"], [137, 2, 1, "", "caseSensitive"], [137, 3, 1, "", "clear"], [137, 2, 1, "", "configProtoBytes"], [137, 3, 1, "", "copy"], [137, 2, 1, "", "doSample"], [137, 3, 1, "", "explainParam"], [137, 3, 1, "", "explainParams"], [137, 3, 1, "", "extractParamMap"], [137, 3, 1, "", "getBatchSize"], [137, 3, 1, "", "getCaseSensitive"], [137, 3, 1, "", "getInputCols"], [137, 3, 1, "", "getLazyAnnotator"], [137, 3, 1, "", "getOrDefault"], [137, 3, 1, "", "getOutputCol"], [137, 3, 1, "", "getParam"], [137, 3, 1, "", "getParamValue"], [137, 2, 1, "", "getter_attrs"], [137, 3, 1, "", "hasDefault"], [137, 3, 1, "", "hasParam"], [137, 2, 1, "", "ignoreTokenIds"], [137, 2, 1, "", "inputAnnotatorTypes"], [137, 2, 1, "", "inputCols"], [137, 3, 1, "", "inputColsValidation"], [137, 3, 1, "", "isDefined"], [137, 3, 1, "", "isSet"], [137, 2, 1, "", "lazyAnnotator"], [137, 3, 1, "", "load"], [137, 2, 1, "", "maxNewTokens"], [137, 2, 1, "", "maxTextLength"], [137, 2, 1, "", "mlFrameworkType"], [137, 2, 1, "", "name"], [137, 2, 1, "", "noRepeatNgramSize"], [137, 2, 1, "", "optionalInputAnnotatorTypes"], [137, 2, 1, "", "outputAnnotatorType"], [137, 2, 1, "", "outputCol"], [137, 2, 1, "", "randomSeed"], [137, 3, 1, "", "read"], [137, 2, 1, "", "refineChunkSize"], [137, 2, 1, "", "refineMaxAttempts"], [137, 2, 1, "", "refineSummary"], [137, 2, 1, "", "refineSummaryTargetLength"], [137, 3, 1, "", "save"], [137, 3, 1, "", "set"], [137, 3, 1, "", "setBatchSize"], [137, 3, 1, "", "setCaseSensitive"], [137, 3, 1, "", "setConfigProtoBytes"], [137, 3, 1, "", "setDoSample"], [137, 3, 1, "", "setForceInputTypeValidation"], [137, 3, 1, "", "setIgnoreTokenIds"], [137, 3, 1, "", "setInputCols"], [137, 3, 1, "", "setLazyAnnotator"], [137, 3, 1, "", "setMaxNewTokens"], [137, 3, 1, "", "setMaxTextLength"], [137, 3, 1, "", "setNoRepeatNgramSize"], [137, 3, 1, "", "setOutputCol"], [137, 3, 1, "", "setParamValue"], [137, 3, 1, "", "setParams"], [137, 3, 1, "", "setRandomSeed"], [137, 3, 1, "", "setRefineChunkSize"], [137, 3, 1, "", "setRefineMaxAttempts"], [137, 3, 1, "", "setRefineSummary"], [137, 3, 1, "", "setRefineSummaryTargetLength"], [137, 3, 1, "", "setStopAtEos"], [137, 3, 1, "", "setTopK"], [137, 2, 1, "", "skipLPInputColsValidation"], [137, 2, 1, "", "stopAtEos"], [137, 2, 1, "", "task"], [137, 2, 1, "", "topK"], [137, 3, 1, "", "transform"], [137, 2, 1, "", "useCache"], [137, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[138, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[138, 2, 1, "", "batchSize"], [138, 2, 1, "", "caseSensitive"], [138, 3, 1, "", "clear"], [138, 2, 1, "", "configProtoBytes"], [138, 3, 1, "", "copy"], [138, 2, 1, "", "customPrompt"], [138, 2, 1, "", "doSample"], [138, 3, 1, "", "explainParam"], [138, 3, 1, "", "explainParams"], [138, 3, 1, "", "extractParamMap"], [138, 3, 1, "", "getBatchSize"], [138, 3, 1, "", "getCaseSensitive"], [138, 3, 1, "", "getInputCols"], [138, 3, 1, "", "getLazyAnnotator"], [138, 3, 1, "", "getOrDefault"], [138, 3, 1, "", "getOutputCol"], [138, 3, 1, "", "getParam"], [138, 3, 1, "", "getParamValue"], [138, 3, 1, "", "getQuestionTypes"], [138, 2, 1, "", "getter_attrs"], [138, 3, 1, "", "hasDefault"], [138, 3, 1, "", "hasParam"], [138, 2, 1, "", "ignoreTokenIds"], [138, 2, 1, "", "inputAnnotatorTypes"], [138, 2, 1, "", "inputCols"], [138, 3, 1, "", "inputColsValidation"], [138, 3, 1, "", "isDefined"], [138, 3, 1, "", "isSet"], [138, 2, 1, "", "lazyAnnotator"], [138, 3, 1, "", "load"], [138, 3, 1, "", "loadMedicalTextGenerator"], [138, 3, 1, "", "loadSavedModel"], [138, 2, 1, "", "maxContextLength"], [138, 2, 1, "", "maxNewTokens"], [138, 2, 1, "", "mlFrameworkType"], [138, 2, 1, "", "modelType"], [138, 2, 1, "", "name"], [138, 2, 1, "", "noRepeatNgramSize"], [138, 2, 1, "", "optionalInputAnnotatorTypes"], [138, 2, 1, "", "outputAnnotatorType"], [138, 2, 1, "", "outputCol"], [138, 3, 1, "", "pretrained"], [138, 2, 1, "", "questionType"], [138, 3, 1, "", "read"], [138, 3, 1, "", "save"], [138, 3, 1, "", "set"], [138, 3, 1, "", "setBatchSize"], [138, 3, 1, "", "setCaseSensitive"], [138, 3, 1, "", "setConfigProtoBytes"], [138, 3, 1, "", "setCustomPrompt"], [138, 3, 1, "", "setDoSample"], [138, 3, 1, "", "setForceInputTypeValidation"], [138, 3, 1, "", "setIgnoreTokenIds"], [138, 3, 1, "", "setInputCols"], [138, 3, 1, "", "setLazyAnnotator"], [138, 3, 1, "", "setMaxContextLength"], [138, 3, 1, "", "setMaxNewTokens"], [138, 3, 1, "", "setNoRepeatNgramSize"], [138, 3, 1, "", "setOutputCol"], [138, 3, 1, "", "setParamValue"], [138, 3, 1, "", "setParams"], [138, 3, 1, "", "setQuestionAnswerTerminals"], [138, 3, 1, "", "setQuestionPrompts"], [138, 3, 1, "", "setQuestionSkipLastToken"], [138, 3, 1, "", "setQuestionType"], [138, 3, 1, "", "setRandomSeed"], [138, 3, 1, "", "setTopK"], [138, 3, 1, "", "setUseCache"], [138, 2, 1, "", "skipLPInputColsValidation"], [138, 2, 1, "", "topK"], [138, 3, 1, "", "transform"], [138, 2, 1, "", "useCache"], [138, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[139, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[139, 2, 1, "", "batchSize"], [139, 2, 1, "", "caseSensitive"], [139, 3, 1, "", "clear"], [139, 2, 1, "", "configProtoBytes"], [139, 3, 1, "", "copy"], [139, 2, 1, "", "doSample"], [139, 3, 1, "", "explainParam"], [139, 3, 1, "", "explainParams"], [139, 3, 1, "", "extractParamMap"], [139, 3, 1, "", "getBatchSize"], [139, 3, 1, "", "getCaseSensitive"], [139, 3, 1, "", "getInputCols"], [139, 3, 1, "", "getLazyAnnotator"], [139, 3, 1, "", "getOrDefault"], [139, 3, 1, "", "getOutputCol"], [139, 3, 1, "", "getParam"], [139, 3, 1, "", "getParamValue"], [139, 2, 1, "", "getter_attrs"], [139, 3, 1, "", "hasDefault"], [139, 3, 1, "", "hasParam"], [139, 2, 1, "", "ignoreTokenIds"], [139, 2, 1, "", "inputAnnotatorTypes"], [139, 2, 1, "", "inputCols"], [139, 3, 1, "", "inputColsValidation"], [139, 3, 1, "", "isDefined"], [139, 3, 1, "", "isSet"], [139, 2, 1, "", "lazyAnnotator"], [139, 3, 1, "", "load"], [139, 3, 1, "", "loadSavedModel"], [139, 2, 1, "", "maxNewTokens"], [139, 2, 1, "", "maxTextLength"], [139, 2, 1, "", "mlFrameworkType"], [139, 2, 1, "", "name"], [139, 2, 1, "", "noRepeatNgramSize"], [139, 2, 1, "", "optionalInputAnnotatorTypes"], [139, 2, 1, "", "outputAnnotatorType"], [139, 2, 1, "", "outputCol"], [139, 3, 1, "", "pretrained"], [139, 2, 1, "", "randomSeed"], [139, 3, 1, "", "read"], [139, 2, 1, "", "refineChunkSize"], [139, 2, 1, "", "refineMaxAttempts"], [139, 2, 1, "", "refineSummary"], [139, 2, 1, "", "refineSummaryTargetLength"], [139, 3, 1, "", "save"], [139, 3, 1, "", "set"], [139, 3, 1, "", "setBatchSize"], [139, 3, 1, "", "setCaseSensitive"], [139, 3, 1, "", "setConfigProtoBytes"], [139, 3, 1, "", "setDoSample"], [139, 3, 1, "", "setForceInputTypeValidation"], [139, 3, 1, "", "setIgnoreTokenIds"], [139, 3, 1, "", "setInputCols"], [139, 3, 1, "", "setLazyAnnotator"], [139, 3, 1, "", "setMaxNewTokens"], [139, 3, 1, "", "setMaxTextLength"], [139, 3, 1, "", "setNoRepeatNgramSize"], [139, 3, 1, "", "setOutputCol"], [139, 3, 1, "", "setParamValue"], [139, 3, 1, "", "setParams"], [139, 3, 1, "", "setRandomSeed"], [139, 3, 1, "", "setRefineChunkSize"], [139, 3, 1, "", "setRefineMaxAttempts"], [139, 3, 1, "", "setRefineSummary"], [139, 3, 1, "", "setRefineSummaryTargetLength"], [139, 3, 1, "", "setStopAtEos"], [139, 3, 1, "", "setTopK"], [139, 2, 1, "", "skipLPInputColsValidation"], [139, 2, 1, "", "stopAtEos"], [139, 2, 1, "", "task"], [139, 2, 1, "", "topK"], [139, 3, 1, "", "transform"], [139, 2, 1, "", "useCache"], [139, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[140, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[140, 2, 1, "", "batchSize"], [140, 2, 1, "", "caseSensitive"], [140, 3, 1, "", "clear"], [140, 2, 1, "", "configProtoBytes"], [140, 3, 1, "", "copy"], [140, 2, 1, "", "customPrompt"], [140, 2, 1, "", "doSample"], [140, 3, 1, "", "explainParam"], [140, 3, 1, "", "explainParams"], [140, 3, 1, "", "extractParamMap"], [140, 3, 1, "", "getAdditionalTokens"], [140, 3, 1, "", "getBatchSize"], [140, 3, 1, "", "getCaseSensitive"], [140, 3, 1, "", "getInputCols"], [140, 3, 1, "", "getLazyAnnotator"], [140, 3, 1, "", "getOrDefault"], [140, 3, 1, "", "getOutputCol"], [140, 3, 1, "", "getParam"], [140, 3, 1, "", "getParamValue"], [140, 2, 1, "", "getter_attrs"], [140, 3, 1, "", "hasDefault"], [140, 3, 1, "", "hasParam"], [140, 2, 1, "", "ignoreTokenIds"], [140, 2, 1, "", "inputAnnotatorTypes"], [140, 2, 1, "", "inputCols"], [140, 3, 1, "", "inputColsValidation"], [140, 3, 1, "", "isDefined"], [140, 3, 1, "", "isSet"], [140, 2, 1, "", "lazyAnnotator"], [140, 3, 1, "", "load"], [140, 3, 1, "", "loadSavedModel"], [140, 2, 1, "", "maxContextLength"], [140, 2, 1, "", "maxNewTokens"], [140, 2, 1, "", "maxTextLength"], [140, 2, 1, "", "mlFrameworkType"], [140, 2, 1, "", "modelType"], [140, 2, 1, "", "name"], [140, 2, 1, "", "noRepeatNgramSize"], [140, 2, 1, "", "optionalInputAnnotatorTypes"], [140, 2, 1, "", "outputAnnotatorType"], [140, 2, 1, "", "outputCol"], [140, 3, 1, "", "pretrained"], [140, 3, 1, "", "read"], [140, 3, 1, "", "save"], [140, 3, 1, "", "set"], [140, 3, 1, "", "setAdditionalTokens"], [140, 3, 1, "", "setBatchSize"], [140, 3, 1, "", "setCaseSensitive"], [140, 3, 1, "", "setConfigProtoBytes"], [140, 3, 1, "", "setCustomPrompt"], [140, 3, 1, "", "setDoSample"], [140, 3, 1, "", "setForceInputTypeValidation"], [140, 3, 1, "", "setIgnoreTokenIds"], [140, 3, 1, "", "setInputCols"], [140, 3, 1, "", "setLazyAnnotator"], [140, 3, 1, "", "setMaxContextLength"], [140, 3, 1, "", "setMaxNewTokens"], [140, 3, 1, "", "setMaxTextLength"], [140, 3, 1, "", "setNoRepeatNgramSize"], [140, 3, 1, "", "setOutputCol"], [140, 3, 1, "", "setParamValue"], [140, 3, 1, "", "setParams"], [140, 3, 1, "", "setRandomSeed"], [140, 3, 1, "", "setStopAtEos"], [140, 3, 1, "", "setTopK"], [140, 3, 1, "", "setUseCache"], [140, 2, 1, "", "skipLPInputColsValidation"], [140, 2, 1, "", "stopAtEos"], [140, 2, 1, "", "topK"], [140, 3, 1, "", "transform"], [140, 2, 1, "", "useCache"], [140, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[142, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator": [[142, 3, 1, "", "clear"], [142, 3, 1, "", "copy"], [142, 2, 1, "", "entities1"], [142, 2, 1, "", "entities2"], [142, 3, 1, "", "explainParam"], [142, 3, 1, "", "explainParams"], [142, 3, 1, "", "extractParamMap"], [142, 3, 1, "", "getInputCols"], [142, 3, 1, "", "getLazyAnnotator"], [142, 3, 1, "", "getOrDefault"], [142, 3, 1, "", "getOutputCol"], [142, 3, 1, "", "getParam"], [142, 3, 1, "", "getParamValue"], [142, 2, 1, "", "getter_attrs"], [142, 3, 1, "", "hasDefault"], [142, 3, 1, "", "hasParam"], [142, 2, 1, "", "inputAnnotatorTypes"], [142, 2, 1, "", "inputCols"], [142, 3, 1, "", "inputColsValidation"], [142, 3, 1, "", "isDefined"], [142, 3, 1, "", "isSet"], [142, 2, 1, "", "lazyAnnotator"], [142, 3, 1, "", "load"], [142, 2, 1, "", "name"], [142, 2, 1, "", "optionalInputAnnotatorTypes"], [142, 2, 1, "", "outputAnnotatorType"], [142, 2, 1, "", "outputCol"], [142, 2, 1, "", "questionMark"], [142, 2, 1, "", "questionPronoun"], [142, 3, 1, "", "read"], [142, 3, 1, "", "save"], [142, 3, 1, "", "set"], [142, 3, 1, "", "setEntities1"], [142, 3, 1, "", "setEntities2"], [142, 3, 1, "", "setForceInputTypeValidation"], [142, 3, 1, "", "setInputCols"], [142, 3, 1, "", "setLazyAnnotator"], [142, 3, 1, "", "setOutputCol"], [142, 3, 1, "", "setParamValue"], [142, 3, 1, "", "setParams"], [142, 3, 1, "", "setQuestionMark"], [142, 3, 1, "", "setQuestionPronoun"], [142, 3, 1, "", "setStrategyType"], [142, 2, 1, "", "skipLPInputColsValidation"], [142, 2, 1, "", "strategyType"], [142, 3, 1, "", "transform"], [142, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification": [[146, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[144, 0, 0, "-", "finance_bert_for_token_classifier"], [145, 0, 0, "-", "finance_ner"], [147, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[144, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[144, 2, 1, "", "batchSize"], [144, 2, 1, "", "caseSensitive"], [144, 3, 1, "", "clear"], [144, 2, 1, "", "configProtoBytes"], [144, 3, 1, "", "copy"], [144, 3, 1, "", "explainParam"], [144, 3, 1, "", "explainParams"], [144, 3, 1, "", "extractParamMap"], [144, 3, 1, "", "getBatchSize"], [144, 3, 1, "", "getCaseSensitive"], [144, 3, 1, "", "getClasses"], [144, 3, 1, "", "getInputCols"], [144, 3, 1, "", "getLazyAnnotator"], [144, 3, 1, "", "getOrDefault"], [144, 3, 1, "", "getOutputCol"], [144, 3, 1, "", "getParam"], [144, 3, 1, "", "getParamValue"], [144, 2, 1, "", "getter_attrs"], [144, 3, 1, "", "hasDefault"], [144, 3, 1, "", "hasParam"], [144, 2, 1, "", "inputAnnotatorTypes"], [144, 2, 1, "", "inputCols"], [144, 3, 1, "", "inputColsValidation"], [144, 3, 1, "", "isDefined"], [144, 3, 1, "", "isSet"], [144, 2, 1, "", "lazyAnnotator"], [144, 3, 1, "", "load"], [144, 3, 1, "", "loadSavedModel"], [144, 3, 1, "", "loadSavedModelOpenSource"], [144, 2, 1, "", "maxSentenceLength"], [144, 2, 1, "", "name"], [144, 2, 1, "", "optionalInputAnnotatorTypes"], [144, 2, 1, "", "outputAnnotatorType"], [144, 2, 1, "", "outputCol"], [144, 3, 1, "", "pretrained"], [144, 3, 1, "", "read"], [144, 3, 1, "", "save"], [144, 3, 1, "", "set"], [144, 3, 1, "", "setBatchSize"], [144, 3, 1, "", "setCaseSensitive"], [144, 3, 1, "", "setConfigProtoBytes"], [144, 3, 1, "", "setForceInputTypeValidation"], [144, 3, 1, "", "setInputCols"], [144, 3, 1, "", "setLazyAnnotator"], [144, 3, 1, "", "setMaxSentenceLength"], [144, 3, 1, "", "setOutputCol"], [144, 3, 1, "", "setParamValue"], [144, 3, 1, "", "setParams"], [144, 2, 1, "", "skipLPInputColsValidation"], [144, 3, 1, "", "transform"], [144, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[145, 1, 1, "", "FinanceNerApproach"], [145, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach": [[145, 2, 1, "", "batchSize"], [145, 3, 1, "", "clear"], [145, 2, 1, "", "configProtoBytes"], [145, 3, 1, "", "copy"], [145, 2, 1, "", "datasetInfo"], [145, 2, 1, "", "dropout"], [145, 2, 1, "", "earlyStoppingCriterion"], [145, 2, 1, "", "earlyStoppingPatience"], [145, 2, 1, "", "enableMemoryOptimizer"], [145, 2, 1, "", "enableOutputLogs"], [145, 2, 1, "", "engine"], [145, 2, 1, "", "entities"], [145, 2, 1, "", "evaluationLogExtended"], [145, 3, 1, "", "explainParam"], [145, 3, 1, "", "explainParams"], [145, 3, 1, "", "extractParamMap"], [145, 3, 1, "", "fit"], [145, 3, 1, "", "fitMultiple"], [145, 3, 1, "", "getEngine"], [145, 3, 1, "", "getInputCols"], [145, 3, 1, "", "getLabelColumn"], [145, 3, 1, "", "getLazyAnnotator"], [145, 3, 1, "", "getOrDefault"], [145, 3, 1, "", "getOutputCol"], [145, 3, 1, "", "getParam"], [145, 3, 1, "", "getParamValue"], [145, 2, 1, "", "getter_attrs"], [145, 2, 1, "", "graphFile"], [145, 2, 1, "", "graphFolder"], [145, 3, 1, "", "hasDefault"], [145, 3, 1, "", "hasParam"], [145, 2, 1, "", "includeAllConfidenceScores"], [145, 2, 1, "", "includeConfidence"], [145, 2, 1, "", "inputAnnotatorTypes"], [145, 2, 1, "", "inputCols"], [145, 3, 1, "", "inputColsValidation"], [145, 3, 1, "", "isDefined"], [145, 3, 1, "", "isSet"], [145, 2, 1, "", "labelColumn"], [145, 2, 1, "", "lazyAnnotator"], [145, 3, 1, "", "load"], [145, 2, 1, "", "logPrefix"], [145, 2, 1, "", "lr"], [145, 2, 1, "", "maxEpochs"], [145, 2, 1, "", "minEpochs"], [145, 2, 1, "", "optionalInputAnnotatorTypes"], [145, 2, 1, "", "outputAnnotatorType"], [145, 2, 1, "", "outputCol"], [145, 2, 1, "", "outputLogsPath"], [145, 2, 1, "", "overrideExistingTags"], [145, 2, 1, "", "po"], [145, 2, 1, "", "pretrainedModelPath"], [145, 2, 1, "", "randomSeed"], [145, 2, 1, "", "randomValidationSplitPerEpoch"], [145, 3, 1, "", "read"], [145, 3, 1, "", "save"], [145, 2, 1, "", "sentenceTokenIndex"], [145, 3, 1, "", "set"], [145, 3, 1, "", "setBatchSize"], [145, 3, 1, "", "setConfigProtoBytes"], [145, 3, 1, "", "setDatasetInfo"], [145, 3, 1, "", "setDoExceptionHandling"], [145, 3, 1, "", "setDropout"], [145, 3, 1, "", "setEarlyStoppingCriterion"], [145, 3, 1, "", "setEarlyStoppingPatience"], [145, 3, 1, "", "setEnableMemoryOptimizer"], [145, 3, 1, "", "setEnableOutputLogs"], [145, 3, 1, "", "setEntities"], [145, 3, 1, "", "setEvaluationLogExtended"], [145, 3, 1, "", "setForceInputTypeValidation"], [145, 3, 1, "", "setGraphFile"], [145, 3, 1, "", "setGraphFolder"], [145, 3, 1, "", "setIncludeAllConfidenceScores"], [145, 3, 1, "", "setIncludeConfidence"], [145, 3, 1, "", "setInputCols"], [145, 3, 1, "", "setLabelColumn"], [145, 3, 1, "", "setLazyAnnotator"], [145, 3, 1, "", "setLogPrefix"], [145, 3, 1, "", "setLr"], [145, 3, 1, "", "setMaxEpochs"], [145, 3, 1, "", "setMinEpochs"], [145, 3, 1, "", "setOutputCol"], [145, 3, 1, "", "setOutputLogsPath"], [145, 3, 1, "", "setOverrideExistingTags"], [145, 3, 1, "", "setParamValue"], [145, 3, 1, "", "setPo"], [145, 3, 1, "", "setPretrainedModelPath"], [145, 3, 1, "", "setRandomSeed"], [145, 3, 1, "", "setRandomValidationSplitPerEpoch"], [145, 3, 1, "", "setSentenceTokenIndex"], [145, 3, 1, "", "setTagsMapping"], [145, 3, 1, "", "setTestDataset"], [145, 3, 1, "", "setUseBestModel"], [145, 3, 1, "", "setUseContrib"], [145, 3, 1, "", "setValidationSplit"], [145, 3, 1, "", "setVerbose"], [145, 2, 1, "", "skipLPInputColsValidation"], [145, 2, 1, "", "testDataset"], [145, 2, 1, "", "uc"], [145, 2, 1, "", "useBestModel"], [145, 2, 1, "", "useContrib"], [145, 2, 1, "", "validationSplit"], [145, 2, 1, "", "verbose"], [145, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[145, 2, 1, "", "batchSize"], [145, 2, 1, "", "classes"], [145, 3, 1, "", "clear"], [145, 2, 1, "", "configProtoBytes"], [145, 3, 1, "", "copy"], [145, 2, 1, "", "datasetInfo"], [145, 2, 1, "", "doExceptionHandling"], [145, 3, 1, "", "explainParam"], [145, 3, 1, "", "explainParams"], [145, 3, 1, "", "extractParamMap"], [145, 3, 1, "", "getBatchSize"], [145, 3, 1, "", "getClasses"], [145, 3, 1, "", "getInputCols"], [145, 3, 1, "", "getLazyAnnotator"], [145, 3, 1, "", "getOrDefault"], [145, 3, 1, "", "getOutputCol"], [145, 3, 1, "", "getParam"], [145, 3, 1, "", "getParamValue"], [145, 3, 1, "", "getStorageRef"], [145, 3, 1, "", "getTrainingClassDistribution"], [145, 2, 1, "", "getter_attrs"], [145, 3, 1, "", "hasDefault"], [145, 3, 1, "", "hasParam"], [145, 2, 1, "", "includeAllConfidenceScores"], [145, 2, 1, "", "includeConfidence"], [145, 2, 1, "", "inferenceBatchSize"], [145, 2, 1, "", "inputAnnotatorTypes"], [145, 2, 1, "", "inputCols"], [145, 3, 1, "", "inputColsValidation"], [145, 3, 1, "", "isDefined"], [145, 3, 1, "", "isSet"], [145, 2, 1, "", "labelCasing"], [145, 2, 1, "", "lazyAnnotator"], [145, 3, 1, "", "load"], [145, 3, 1, "", "loadSavedModel"], [145, 2, 1, "", "name"], [145, 2, 1, "", "optionalInputAnnotatorTypes"], [145, 2, 1, "", "outputAnnotatorType"], [145, 2, 1, "", "outputCol"], [145, 3, 1, "", "pretrained"], [145, 3, 1, "", "read"], [145, 3, 1, "", "save"], [145, 2, 1, "", "sentenceTokenIndex"], [145, 3, 1, "", "set"], [145, 3, 1, "", "setBatchSize"], [145, 3, 1, "", "setConfigProtoBytes"], [145, 3, 1, "", "setDatasetInfo"], [145, 3, 1, "", "setForceInputTypeValidation"], [145, 3, 1, "", "setIncludeConfidence"], [145, 3, 1, "", "setInferenceBatchSize"], [145, 3, 1, "", "setInputCols"], [145, 3, 1, "", "setLabelCasing"], [145, 3, 1, "", "setLazyAnnotator"], [145, 3, 1, "", "setOutputCol"], [145, 3, 1, "", "setParamValue"], [145, 3, 1, "", "setParams"], [145, 3, 1, "", "setSentenceTokenIndex"], [145, 3, 1, "", "setStorageRef"], [145, 2, 1, "", "skipLPInputColsValidation"], [145, 2, 1, "", "storageRef"], [145, 2, 1, "", "trainingClassDistribution"], [145, 3, 1, "", "transform"], [145, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[147, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[147, 2, 1, "", "batchSize"], [147, 2, 1, "", "caseSensitive"], [147, 3, 1, "", "clear"], [147, 2, 1, "", "coalesceSentences"], [147, 2, 1, "", "configProtoBytes"], [147, 3, 1, "", "copy"], [147, 2, 1, "", "engine"], [147, 3, 1, "", "explainParam"], [147, 3, 1, "", "explainParams"], [147, 3, 1, "", "extractParamMap"], [147, 3, 1, "", "getBatchSize"], [147, 3, 1, "", "getCaseSensitive"], [147, 3, 1, "", "getClasses"], [147, 3, 1, "", "getEngine"], [147, 3, 1, "", "getInputCols"], [147, 3, 1, "", "getLazyAnnotator"], [147, 3, 1, "", "getMaxSentenceLength"], [147, 3, 1, "", "getOrDefault"], [147, 3, 1, "", "getOutputCol"], [147, 3, 1, "", "getParam"], [147, 3, 1, "", "getParamValue"], [147, 2, 1, "", "getter_attrs"], [147, 3, 1, "", "hasDefault"], [147, 3, 1, "", "hasParam"], [147, 2, 1, "", "ignoreEntities"], [147, 2, 1, "", "inputAnnotatorTypes"], [147, 2, 1, "", "inputCols"], [147, 3, 1, "", "inputColsValidation"], [147, 3, 1, "", "isDefined"], [147, 3, 1, "", "isSet"], [147, 2, 1, "", "lazyAnnotator"], [147, 3, 1, "", "load"], [147, 3, 1, "", "loadSavedModel"], [147, 2, 1, "", "maxSentenceLength"], [147, 2, 1, "", "max_length_limit"], [147, 2, 1, "", "name"], [147, 2, 1, "", "optionalInputAnnotatorTypes"], [147, 2, 1, "", "outputAnnotatorType"], [147, 2, 1, "", "outputCol"], [147, 2, 1, "", "predictionThreshold"], [147, 3, 1, "", "pretrained"], [147, 3, 1, "", "read"], [147, 3, 1, "", "save"], [147, 3, 1, "", "set"], [147, 3, 1, "", "setBatchSize"], [147, 3, 1, "", "setCaseSensitive"], [147, 3, 1, "", "setConfigProtoBytes"], [147, 3, 1, "", "setEntityDefinitions"], [147, 3, 1, "", "setInputCols"], [147, 3, 1, "", "setLazyAnnotator"], [147, 3, 1, "", "setMaxSentenceLength"], [147, 3, 1, "", "setOutputCol"], [147, 3, 1, "", "setParamValue"], [147, 3, 1, "", "setParams"], [147, 3, 1, "", "setPredictionThreshold"], [147, 3, 1, "", "transform"], [147, 3, 1, "", "write"]], "sparknlp_jsl.functions": [[148, 5, 1, "", "profile"], [148, 5, 1, "", "profileESRDV21Y19"], [148, 5, 1, "", "profileRxHCCV05Y20"], [148, 5, 1, "", "profileRxHCCV05Y21"], [148, 5, 1, "", "profileRxHCCV05Y22"], [148, 5, 1, "", "profileRxHCCV05Y23"], [148, 5, 1, "", "profileRxHCCV08Y22"], [148, 5, 1, "", "profileRxHCCV08Y23"], [148, 5, 1, "", "profileV22"], [148, 5, 1, "", "profileV22Y17"], [148, 5, 1, "", "profileV22Y18"], [148, 5, 1, "", "profileV22Y19"], [148, 5, 1, "", "profileV22Y20"], [148, 5, 1, "", "profileV22Y21"], [148, 5, 1, "", "profileV22Y22"], [148, 5, 1, "", "profileV23"], [148, 5, 1, "", "profileV23Y18"], [148, 5, 1, "", "profileV23Y19"], [148, 5, 1, "", "profileV24"], [148, 5, 1, "", "profileV24Y19"], [148, 5, 1, "", "profileV24Y20"], [148, 5, 1, "", "profileV24Y21"], [148, 5, 1, "", "profileV24Y22"], [148, 5, 1, "", "profileV28"], [148, 5, 1, "", "profileV28Y24"]], "sparknlp_jsl.internal": [[150, 5, 1, "", "CustomLabels"], [150, 5, 1, "", "EntityWeights"], [150, 5, 1, "", "RelationalCategories"], [150, 5, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[156, 0, 0, "-", "chunk_classification"], [161, 0, 0, "-", "graph"], [166, 0, 0, "-", "sequence_classification"], [171, 0, 0, "-", "sequence_generation"], [177, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[152, 0, 0, "-", "assertion"], [155, 0, 0, "-", "deid"], [159, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[151, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[151, 1, 1, "", "AssertionDLApproach"], [151, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach": [[151, 2, 1, "", "batchSize"], [151, 3, 1, "", "clear"], [151, 2, 1, "", "configProtoBytes"], [151, 3, 1, "", "copy"], [151, 2, 1, "", "datasetInfo"], [151, 2, 1, "", "doExceptionHandling"], [151, 2, 1, "", "dropout"], [151, 2, 1, "", "enableOutputLogs"], [151, 2, 1, "", "endCol"], [151, 2, 1, "", "engine"], [151, 2, 1, "", "epochs"], [151, 3, 1, "", "explainParam"], [151, 3, 1, "", "explainParams"], [151, 3, 1, "", "extractParamMap"], [151, 3, 1, "", "fit"], [151, 3, 1, "", "fitMultiple"], [151, 3, 1, "", "getEngine"], [151, 3, 1, "", "getInputCols"], [151, 3, 1, "", "getLazyAnnotator"], [151, 3, 1, "", "getOrDefault"], [151, 3, 1, "", "getOutputCol"], [151, 3, 1, "", "getParam"], [151, 3, 1, "", "getParamValue"], [151, 2, 1, "", "getter_attrs"], [151, 2, 1, "", "graphFile"], [151, 2, 1, "", "graphFolder"], [151, 3, 1, "", "hasDefault"], [151, 3, 1, "", "hasParam"], [151, 2, 1, "", "includeConfidence"], [151, 2, 1, "", "inputAnnotatorTypes"], [151, 2, 1, "", "inputCols"], [151, 3, 1, "", "inputColsValidation"], [151, 3, 1, "", "isDefined"], [151, 3, 1, "", "isSet"], [151, 2, 1, "", "label"], [151, 2, 1, "", "lazyAnnotator"], [151, 2, 1, "", "learningRate"], [151, 3, 1, "", "load"], [151, 2, 1, "", "maxSentLen"], [151, 2, 1, "", "optionalInputAnnotatorTypes"], [151, 2, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "outputCol"], [151, 2, 1, "", "outputLogsPath"], [151, 3, 1, "", "read"], [151, 3, 1, "", "save"], [151, 2, 1, "", "scopeWindow"], [151, 3, 1, "", "set"], [151, 3, 1, "", "setBatchSize"], [151, 3, 1, "", "setConfigProtoBytes"], [151, 3, 1, "", "setDatasetInfo"], [151, 3, 1, "", "setDoExceptionHandling"], [151, 3, 1, "", "setDropout"], [151, 3, 1, "", "setEnableOutputLogs"], [151, 3, 1, "", "setEndCol"], [151, 3, 1, "", "setEpochs"], [151, 3, 1, "", "setForceInputTypeValidation"], [151, 3, 1, "", "setGraphFile"], [151, 3, 1, "", "setGraphFolder"], [151, 3, 1, "", "setIncludeConfidence"], [151, 3, 1, "", "setInputCols"], [151, 3, 1, "", "setLabelCol"], [151, 3, 1, "", "setLazyAnnotator"], [151, 3, 1, "", "setLearningRate"], [151, 3, 1, "", "setMaxSentLen"], [151, 3, 1, "", "setOutputCol"], [151, 3, 1, "", "setOutputLogsPath"], [151, 3, 1, "", "setParamValue"], [151, 3, 1, "", "setScopeWindow"], [151, 3, 1, "", "setStartCol"], [151, 3, 1, "", "setTestDataset"], [151, 3, 1, "", "setValidationSplit"], [151, 3, 1, "", "setVerbose"], [151, 2, 1, "", "skipLPInputColsValidation"], [151, 2, 1, "", "startCol"], [151, 2, 1, "", "testDataset"], [151, 2, 1, "", "validationSplit"], [151, 2, 1, "", "verbose"], [151, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[151, 2, 1, "", "classes"], [151, 3, 1, "", "clear"], [151, 2, 1, "", "configProtoBytes"], [151, 3, 1, "", "copy"], [151, 2, 1, "", "datasetInfo"], [151, 2, 1, "", "doExceptionHandling"], [151, 2, 1, "", "entityAssertionCaseSensitive"], [151, 3, 1, "", "explainParam"], [151, 3, 1, "", "explainParams"], [151, 3, 1, "", "extractParamMap"], [151, 3, 1, "", "getEntityAssertion"], [151, 3, 1, "", "getInputCols"], [151, 3, 1, "", "getLazyAnnotator"], [151, 3, 1, "", "getOrDefault"], [151, 3, 1, "", "getOutputCol"], [151, 3, 1, "", "getParam"], [151, 3, 1, "", "getParamValue"], [151, 3, 1, "", "getReplaceLabels"], [151, 3, 1, "", "getStorageRef"], [151, 2, 1, "", "getter_attrs"], [151, 3, 1, "", "hasDefault"], [151, 3, 1, "", "hasParam"], [151, 2, 1, "", "includeConfidence"], [151, 2, 1, "", "inputAnnotatorTypes"], [151, 2, 1, "", "inputCols"], [151, 3, 1, "", "inputColsValidation"], [151, 3, 1, "", "isDefined"], [151, 3, 1, "", "isSet"], [151, 2, 1, "", "lazyAnnotator"], [151, 3, 1, "", "load"], [151, 2, 1, "", "maxSentLen"], [151, 2, 1, "", "name"], [151, 2, 1, "", "optionalInputAnnotatorTypes"], [151, 2, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "outputCol"], [151, 3, 1, "", "pretrained"], [151, 3, 1, "", "read"], [151, 3, 1, "", "save"], [151, 2, 1, "", "scopeWindow"], [151, 3, 1, "", "set"], [151, 3, 1, "", "setConfigProtoBytes"], [151, 3, 1, "", "setDatasetInfo"], [151, 3, 1, "", "setDoExceptionHandling"], [151, 3, 1, "", "setEntityAssertion"], [151, 3, 1, "", "setEntityAssertionCaseSensitive"], [151, 3, 1, "", "setForceInputTypeValidation"], [151, 3, 1, "", "setIncludeConfidence"], [151, 3, 1, "", "setInputCols"], [151, 3, 1, "", "setLazyAnnotator"], [151, 3, 1, "", "setOutputCol"], [151, 3, 1, "", "setParamValue"], [151, 3, 1, "", "setParams"], [151, 3, 1, "", "setReplaceLabels"], [151, 3, 1, "", "setScopeWindow"], [151, 3, 1, "", "setStorageRef"], [151, 2, 1, "", "skipLPInputColsValidation"], [151, 2, 1, "", "storageRef"], [151, 2, 1, "", "targetNerLabels"], [151, 3, 1, "", "transform"], [151, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.deid": [[153, 0, 0, "-", "deIdentification"], [154, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[153, 1, 1, "", "DeIdentification"], [153, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[153, 2, 1, "", "ageRanges"], [153, 2, 1, "", "ageRangesByHipaa"], [153, 2, 1, "", "blackList"], [153, 2, 1, "", "blackListEntities"], [153, 3, 1, "", "clear"], [153, 2, 1, "", "combineRegexPatterns"], [153, 2, 1, "", "consistentObfuscation"], [153, 3, 1, "", "copy"], [153, 2, 1, "", "dateFormats"], [153, 2, 1, "", "dateTag"], [153, 2, 1, "", "dateToYear"], [153, 2, 1, "", "days"], [153, 2, 1, "", "doExceptionHandling"], [153, 2, 1, "", "entityCasingModesPath"], [153, 3, 1, "", "explainParam"], [153, 3, 1, "", "explainParams"], [153, 3, 1, "", "extractParamMap"], [153, 3, 1, "", "fit"], [153, 3, 1, "", "fitMultiple"], [153, 2, 1, "", "fixedMaskLength"], [153, 2, 1, "", "genderAwareness"], [153, 3, 1, "", "getBlackList"], [153, 3, 1, "", "getInputCols"], [153, 3, 1, "", "getLazyAnnotator"], [153, 3, 1, "", "getOrDefault"], [153, 3, 1, "", "getOutputCol"], [153, 3, 1, "", "getParam"], [153, 3, 1, "", "getParamValue"], [153, 3, 1, "", "getSameLengthFormattedEntities"], [153, 3, 1, "", "getUseShiftDays"], [153, 2, 1, "", "getter_attrs"], [153, 3, 1, "", "hasDefault"], [153, 3, 1, "", "hasParam"], [153, 2, 1, "", "ignoreRegex"], [153, 2, 1, "", "inputAnnotatorTypes"], [153, 2, 1, "", "inputCols"], [153, 3, 1, "", "inputColsValidation"], [153, 3, 1, "", "isDefined"], [153, 2, 1, "", "isRandomDateDisplacement"], [153, 3, 1, "", "isSet"], [153, 2, 1, "", "keepYear"], [153, 2, 1, "", "language"], [153, 2, 1, "", "lazyAnnotator"], [153, 3, 1, "", "load"], [153, 2, 1, "", "mappingsColumn"], [153, 2, 1, "", "maskingPolicy"], [153, 2, 1, "", "metadataMaskingPolicy"], [153, 2, 1, "", "minYear"], [153, 2, 1, "", "mode"], [153, 2, 1, "", "name"], [153, 2, 1, "", "obfuscateByAgeGroups"], [153, 2, 1, "", "obfuscateDate"], [153, 2, 1, "", "obfuscateRefFile"], [153, 2, 1, "", "obfuscateRefSource"], [153, 2, 1, "", "obfuscationStrategyOnException"], [153, 2, 1, "", "optionalInputAnnotatorTypes"], [153, 2, 1, "", "outputAnnotatorType"], [153, 2, 1, "", "outputAsDocument"], [153, 2, 1, "", "outputCol"], [153, 3, 1, "", "read"], [153, 2, 1, "", "refFileFormat"], [153, 2, 1, "", "refSep"], [153, 2, 1, "", "regexOverride"], [153, 2, 1, "", "regexPatternsDictionary"], [153, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [153, 2, 1, "", "region"], [153, 2, 1, "", "returnEntityMappings"], [153, 2, 1, "", "sameEntityThreshold"], [153, 2, 1, "", "sameLengthFormattedEntities"], [153, 3, 1, "", "save"], [153, 2, 1, "", "seed"], [153, 2, 1, "", "selectiveObfuscationModesPath"], [153, 3, 1, "", "set"], [153, 3, 1, "", "setAgeGroups"], [153, 3, 1, "", "setAgeRanges"], [153, 3, 1, "", "setAgeRangesByHipaa"], [153, 3, 1, "", "setBlackList"], [153, 3, 1, "", "setBlackListEntities"], [153, 3, 1, "", "setCombineRegexPatterns"], [153, 3, 1, "", "setConsistentObfuscation"], [153, 3, 1, "", "setDateFormats"], [153, 3, 1, "", "setDateTag"], [153, 3, 1, "", "setDateToYear"], [153, 3, 1, "", "setDays"], [153, 3, 1, "", "setDoExceptionHandling"], [153, 3, 1, "", "setEntityCasingModes"], [153, 3, 1, "", "setFixedMaskLength"], [153, 3, 1, "", "setForceInputTypeValidation"], [153, 3, 1, "", "setGenderAwareness"], [153, 3, 1, "", "setIgnoreRegex"], [153, 3, 1, "", "setInputCols"], [153, 3, 1, "", "setIsRandomDateDisplacement"], [153, 3, 1, "", "setKeepYear"], [153, 3, 1, "", "setLanguage"], [153, 3, 1, "", "setLazyAnnotator"], [153, 3, 1, "", "setMappingsColumn"], [153, 3, 1, "", "setMaskingPolicy"], [153, 3, 1, "", "setMetadataMaskingPolicy"], [153, 3, 1, "", "setMinYear"], [153, 3, 1, "", "setMode"], [153, 3, 1, "", "setObfuscateByAgeGroups"], [153, 3, 1, "", "setObfuscateDate"], [153, 3, 1, "", "setObfuscateRefFile"], [153, 3, 1, "", "setObfuscateRefSource"], [153, 3, 1, "", "setObfuscationStrategyOnException"], [153, 3, 1, "", "setOutputAsDocument"], [153, 3, 1, "", "setOutputCol"], [153, 3, 1, "", "setParamValue"], [153, 3, 1, "", "setRefFileFormat"], [153, 3, 1, "", "setRefSep"], [153, 3, 1, "", "setRegexOverride"], [153, 3, 1, "", "setRegexPatternsDictionary"], [153, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [153, 3, 1, "", "setRegion"], [153, 3, 1, "", "setReturnEntityMappings"], [153, 3, 1, "", "setSameEntityThreshold"], [153, 3, 1, "", "setSameLengthFormattedEntities"], [153, 3, 1, "", "setSeed"], [153, 3, 1, "", "setSelectiveObfuscationModes"], [153, 3, 1, "", "setUnnormalizedDateMode"], [153, 3, 1, "", "setUseShifDays"], [153, 3, 1, "", "setUseShiftDays"], [153, 3, 1, "", "setZipCodeTag"], [153, 2, 1, "", "skipLPInputColsValidation"], [153, 2, 1, "", "unnormalizedDateMode"], [153, 2, 1, "", "useShifDays"], [153, 3, 1, "", "write"], [153, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[153, 2, 1, "", "ageRanges"], [153, 2, 1, "", "ageRangesByHipaa"], [153, 2, 1, "", "blackList"], [153, 2, 1, "", "blackListEntities"], [153, 3, 1, "", "clear"], [153, 2, 1, "", "consistentObfuscation"], [153, 3, 1, "", "copy"], [153, 2, 1, "", "dateFormats"], [153, 2, 1, "", "dateTag"], [153, 2, 1, "", "dateToYear"], [153, 2, 1, "", "days"], [153, 2, 1, "", "doExceptionHandling"], [153, 3, 1, "", "explainParam"], [153, 3, 1, "", "explainParams"], [153, 3, 1, "", "extractParamMap"], [153, 2, 1, "", "fixedMaskLength"], [153, 2, 1, "", "genderAwareness"], [153, 3, 1, "", "getBlackList"], [153, 3, 1, "", "getInputCols"], [153, 3, 1, "", "getLazyAnnotator"], [153, 3, 1, "", "getOrDefault"], [153, 3, 1, "", "getOutputCol"], [153, 3, 1, "", "getParam"], [153, 3, 1, "", "getParamValue"], [153, 3, 1, "", "getRegexEntities"], [153, 3, 1, "", "getSameLengthFormattedEntities"], [153, 3, 1, "", "getUseShiftDays"], [153, 2, 1, "", "getter_attrs"], [153, 3, 1, "", "hasDefault"], [153, 3, 1, "", "hasParam"], [153, 2, 1, "", "ignoreRegex"], [153, 2, 1, "", "inputAnnotatorTypes"], [153, 2, 1, "", "inputCols"], [153, 3, 1, "", "inputColsValidation"], [153, 3, 1, "", "isDefined"], [153, 2, 1, "", "isRandomDateDisplacement"], [153, 3, 1, "", "isSet"], [153, 2, 1, "", "keepYear"], [153, 2, 1, "", "language"], [153, 2, 1, "", "lazyAnnotator"], [153, 3, 1, "", "load"], [153, 2, 1, "", "mappingsColumn"], [153, 2, 1, "", "maskingPolicy"], [153, 2, 1, "", "metadataMaskingPolicy"], [153, 2, 1, "", "minYear"], [153, 2, 1, "", "mode"], [153, 2, 1, "", "name"], [153, 2, 1, "", "obfuscateByAgeGroups"], [153, 2, 1, "", "obfuscateDate"], [153, 2, 1, "", "obfuscateRefSource"], [153, 2, 1, "", "obfuscationStrategyOnException"], [153, 2, 1, "", "optionalInputAnnotatorTypes"], [153, 2, 1, "", "outputAnnotatorType"], [153, 2, 1, "", "outputAsDocument"], [153, 2, 1, "", "outputCol"], [153, 3, 1, "", "pretrained"], [153, 3, 1, "", "read"], [153, 2, 1, "", "regexEntities"], [153, 2, 1, "", "regexOverride"], [153, 2, 1, "", "region"], [153, 2, 1, "", "returnEntityMappings"], [153, 2, 1, "", "sameEntityThreshold"], [153, 2, 1, "", "sameLengthFormattedEntities"], [153, 3, 1, "", "save"], [153, 2, 1, "", "seed"], [153, 3, 1, "", "set"], [153, 3, 1, "", "setAgeGroups"], [153, 3, 1, "", "setAgeRanges"], [153, 3, 1, "", "setAgeRangesByHipaa"], [153, 3, 1, "", "setBlackList"], [153, 3, 1, "", "setBlackListEntities"], [153, 3, 1, "", "setConsistentObfuscation"], [153, 3, 1, "", "setDateFormats"], [153, 3, 1, "", "setDateTag"], [153, 3, 1, "", "setDateToYear"], [153, 3, 1, "", "setDays"], [153, 3, 1, "", "setDoExceptionHandling"], [153, 3, 1, "", "setFixedMaskLength"], [153, 3, 1, "", "setForceInputTypeValidation"], [153, 3, 1, "", "setGenderAwareness"], [153, 3, 1, "", "setIgnoreRegex"], [153, 3, 1, "", "setInputCols"], [153, 3, 1, "", "setIsRandomDateDisplacement"], [153, 3, 1, "", "setKeepYear"], [153, 3, 1, "", "setLanguage"], [153, 3, 1, "", "setLazyAnnotator"], [153, 3, 1, "", "setMappingsColumn"], [153, 3, 1, "", "setMaskingPolicy"], [153, 3, 1, "", "setMetadataMaskingPolicy"], [153, 3, 1, "", "setMinYear"], [153, 3, 1, "", "setMode"], [153, 3, 1, "", "setObfuscateByAgeGroups"], [153, 3, 1, "", "setObfuscateDate"], [153, 3, 1, "", "setObfuscateRefSource"], [153, 3, 1, "", "setObfuscationStrategyOnException"], [153, 3, 1, "", "setOutputAsDocument"], [153, 3, 1, "", "setOutputCol"], [153, 3, 1, "", "setParamValue"], [153, 3, 1, "", "setParams"], [153, 3, 1, "", "setRegexOverride"], [153, 3, 1, "", "setRegion"], [153, 3, 1, "", "setReturnEntityMappings"], [153, 3, 1, "", "setSameEntityThreshold"], [153, 3, 1, "", "setSameLengthFormattedEntities"], [153, 3, 1, "", "setSeed"], [153, 3, 1, "", "setUnnormalizedDateMode"], [153, 3, 1, "", "setUseShifDays"], [153, 3, 1, "", "setUseShiftDays"], [153, 3, 1, "", "setZipCodeTag"], [153, 2, 1, "", "skipLPInputColsValidation"], [153, 3, 1, "", "transform"], [153, 2, 1, "", "unnormalizedDateMode"], [153, 2, 1, "", "useShifDays"], [153, 3, 1, "", "write"], [153, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[154, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[154, 3, 1, "", "clear"], [154, 3, 1, "", "copy"], [154, 2, 1, "", "dateShiftColumn"], [154, 3, 1, "", "explainParam"], [154, 3, 1, "", "explainParams"], [154, 3, 1, "", "extractParamMap"], [154, 3, 1, "", "getInputCols"], [154, 3, 1, "", "getLazyAnnotator"], [154, 3, 1, "", "getOrDefault"], [154, 3, 1, "", "getOutputCol"], [154, 3, 1, "", "getParam"], [154, 3, 1, "", "getParamValue"], [154, 2, 1, "", "getter_attrs"], [154, 3, 1, "", "hasDefault"], [154, 3, 1, "", "hasParam"], [154, 2, 1, "", "inputAnnotatorTypes"], [154, 2, 1, "", "inputCols"], [154, 3, 1, "", "inputColsValidation"], [154, 3, 1, "", "isDefined"], [154, 3, 1, "", "isSet"], [154, 2, 1, "", "lazyAnnotator"], [154, 3, 1, "", "load"], [154, 2, 1, "", "name"], [154, 2, 1, "", "newDateShift"], [154, 2, 1, "", "optionalInputAnnotatorTypes"], [154, 2, 1, "", "outputAnnotatorType"], [154, 2, 1, "", "outputCol"], [154, 2, 1, "", "patientIdColumn"], [154, 2, 1, "", "rangeDays"], [154, 3, 1, "", "read"], [154, 3, 1, "", "save"], [154, 2, 1, "", "seed"], [154, 3, 1, "", "set"], [154, 3, 1, "", "setDateShiftColumn"], [154, 3, 1, "", "setIdColumn"], [154, 3, 1, "", "setInputCols"], [154, 3, 1, "", "setLazyAnnotator"], [154, 3, 1, "", "setNewDateShift"], [154, 3, 1, "", "setOutputCol"], [154, 3, 1, "", "setParamValue"], [154, 3, 1, "", "setParams"], [154, 3, 1, "", "setPatientIdColumn"], [154, 3, 1, "", "setRangeDays"], [154, 3, 1, "", "setSeed"], [154, 3, 1, "", "transform"], [154, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[157, 0, 0, "-", "chunkmapper"], [158, 0, 0, "-", "docmapper"], [160, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[157, 1, 1, "", "ChunkMapperApproach"], [157, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[157, 2, 1, "", "allowMultiTokenChunk"], [157, 3, 1, "", "clear"], [157, 3, 1, "", "copy"], [157, 2, 1, "", "dictionary"], [157, 2, 1, "", "doExceptionHandling"], [157, 2, 1, "", "enableCharFingerprintMatching"], [157, 2, 1, "", "enableFuzzyMatching"], [157, 2, 1, "", "enableTokenFingerprintMatching"], [157, 3, 1, "", "explainParam"], [157, 3, 1, "", "explainParams"], [157, 3, 1, "", "extractParamMap"], [157, 3, 1, "", "fit"], [157, 3, 1, "", "fitMultiple"], [157, 2, 1, "", "fuzzyDistanceScalingMode"], [157, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [157, 2, 1, "", "fuzzyMatchingDistances"], [157, 3, 1, "", "getInputCols"], [157, 3, 1, "", "getLazyAnnotator"], [157, 3, 1, "", "getOrDefault"], [157, 3, 1, "", "getOutputCol"], [157, 3, 1, "", "getParam"], [157, 3, 1, "", "getParamValue"], [157, 2, 1, "", "getter_attrs"], [157, 3, 1, "", "hasDefault"], [157, 3, 1, "", "hasParam"], [157, 2, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "inputCols"], [157, 3, 1, "", "inputColsValidation"], [157, 3, 1, "", "isDefined"], [157, 3, 1, "", "isSet"], [157, 2, 1, "", "lazyAnnotator"], [157, 3, 1, "", "load"], [157, 2, 1, "", "lowerCase"], [157, 2, 1, "", "maxCharNgramFingerprint"], [157, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [157, 2, 1, "", "maxTokenNgramDroppingOperator"], [157, 2, 1, "", "maxTokenNgramDroppingTokens"], [157, 2, 1, "", "maxTokenNgramFingerprint"], [157, 2, 1, "", "minCharNgramFingerprint"], [157, 2, 1, "", "minTokenNgramFingerprint"], [157, 2, 1, "", "multivaluesRelations"], [157, 2, 1, "", "name"], [157, 2, 1, "", "optionalInputAnnotatorTypes"], [157, 2, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "outputCol"], [157, 3, 1, "", "read"], [157, 2, 1, "", "rel"], [157, 2, 1, "", "rels"], [157, 3, 1, "", "save"], [157, 3, 1, "", "set"], [157, 3, 1, "", "setAllowMultiTokenChunk"], [157, 3, 1, "", "setDictionary"], [157, 3, 1, "", "setDoExceptionHandling"], [157, 3, 1, "", "setEnableCharFingerprintMatching"], [157, 3, 1, "", "setEnableFuzzyMatching"], [157, 3, 1, "", "setEnableTokenFingerprintMatching"], [157, 3, 1, "", "setForceInputTypeValidation"], [157, 3, 1, "", "setFuzzyDistanceScalingMode"], [157, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [157, 3, 1, "", "setFuzzyMatchingDistances"], [157, 3, 1, "", "setInputCols"], [157, 3, 1, "", "setLazyAnnotator"], [157, 3, 1, "", "setLowerCase"], [157, 3, 1, "", "setMaxCharNgramFingerprint"], [157, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [157, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [157, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [157, 3, 1, "", "setMaxTokenNgramFingerprint"], [157, 3, 1, "", "setMinCharNgramFingerprint"], [157, 3, 1, "", "setMinTokenNgramFingerprint"], [157, 3, 1, "", "setMultivaluesRelations"], [157, 3, 1, "", "setOutputCol"], [157, 3, 1, "", "setParamValue"], [157, 3, 1, "", "setRel"], [157, 3, 1, "", "setRels"], [157, 2, 1, "", "skipLPInputColsValidation"], [157, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[157, 2, 1, "", "allowMultiTokenChunk"], [157, 3, 1, "", "clear"], [157, 3, 1, "", "copy"], [157, 2, 1, "", "doExceptionHandling"], [157, 2, 1, "", "enableCharFingerprintMatching"], [157, 2, 1, "", "enableFuzzyMatching"], [157, 2, 1, "", "enableTokenFingerprintMatching"], [157, 3, 1, "", "explainParam"], [157, 3, 1, "", "explainParams"], [157, 3, 1, "", "extractParamMap"], [157, 2, 1, "", "fuzzyDistanceScalingMode"], [157, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [157, 2, 1, "", "fuzzyMatchingDistances"], [157, 3, 1, "", "getInputCols"], [157, 3, 1, "", "getLazyAnnotator"], [157, 3, 1, "", "getOrDefault"], [157, 3, 1, "", "getOutputCol"], [157, 3, 1, "", "getParam"], [157, 3, 1, "", "getParamValue"], [157, 2, 1, "", "getter_attrs"], [157, 3, 1, "", "hasDefault"], [157, 3, 1, "", "hasParam"], [157, 2, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "inputCols"], [157, 3, 1, "", "inputColsValidation"], [157, 3, 1, "", "isDefined"], [157, 3, 1, "", "isSet"], [157, 2, 1, "", "lazyAnnotator"], [157, 3, 1, "", "load"], [157, 2, 1, "", "lowerCase"], [157, 2, 1, "", "maxCharNgramFingerprint"], [157, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [157, 2, 1, "", "maxTokenNgramDroppingOperator"], [157, 2, 1, "", "maxTokenNgramDroppingTokens"], [157, 2, 1, "", "maxTokenNgramFingerprint"], [157, 2, 1, "", "minCharNgramFingerprint"], [157, 2, 1, "", "minTokenNgramFingerprint"], [157, 2, 1, "", "multivaluesRelations"], [157, 2, 1, "", "name"], [157, 2, 1, "", "optionalInputAnnotatorTypes"], [157, 2, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "outputCol"], [157, 3, 1, "", "pretrained"], [157, 3, 1, "", "read"], [157, 2, 1, "", "rel"], [157, 2, 1, "", "rels"], [157, 3, 1, "", "save"], [157, 3, 1, "", "set"], [157, 3, 1, "", "setAllowMultiTokenChunk"], [157, 3, 1, "", "setDoExceptionHandling"], [157, 3, 1, "", "setEnableCharFingerprintMatching"], [157, 3, 1, "", "setEnableFuzzyMatching"], [157, 3, 1, "", "setEnableTokenFingerprintMatching"], [157, 3, 1, "", "setForceInputTypeValidation"], [157, 3, 1, "", "setFuzzyDistanceScalingMode"], [157, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [157, 3, 1, "", "setFuzzyMatchingDistances"], [157, 3, 1, "", "setInputCols"], [157, 3, 1, "", "setLazyAnnotator"], [157, 3, 1, "", "setLowerCase"], [157, 3, 1, "", "setMaxCharNgramFingerprint"], [157, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [157, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [157, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [157, 3, 1, "", "setMaxTokenNgramFingerprint"], [157, 3, 1, "", "setMinCharNgramFingerprint"], [157, 3, 1, "", "setMinTokenNgramFingerprint"], [157, 3, 1, "", "setMultivaluesRelations"], [157, 3, 1, "", "setOutputCol"], [157, 3, 1, "", "setParamValue"], [157, 3, 1, "", "setParams"], [157, 3, 1, "", "setRel"], [157, 3, 1, "", "setRels"], [157, 2, 1, "", "skipLPInputColsValidation"], [157, 3, 1, "", "transform"], [157, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[158, 1, 1, "", "DocMapperApproach"], [158, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[158, 2, 1, "", "allowMultiTokenChunk"], [158, 3, 1, "", "clear"], [158, 3, 1, "", "copy"], [158, 2, 1, "", "dictionary"], [158, 2, 1, "", "doExceptionHandling"], [158, 2, 1, "", "enableCharFingerprintMatching"], [158, 2, 1, "", "enableFuzzyMatching"], [158, 2, 1, "", "enableTokenFingerprintMatching"], [158, 3, 1, "", "explainParam"], [158, 3, 1, "", "explainParams"], [158, 3, 1, "", "extractParamMap"], [158, 3, 1, "", "fit"], [158, 3, 1, "", "fitMultiple"], [158, 2, 1, "", "fuzzyDistanceScalingMode"], [158, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [158, 2, 1, "", "fuzzyMatchingDistances"], [158, 3, 1, "", "getInputCols"], [158, 3, 1, "", "getLazyAnnotator"], [158, 3, 1, "", "getOrDefault"], [158, 3, 1, "", "getOutputCol"], [158, 3, 1, "", "getParam"], [158, 3, 1, "", "getParamValue"], [158, 2, 1, "", "getter_attrs"], [158, 3, 1, "", "hasDefault"], [158, 3, 1, "", "hasParam"], [158, 2, 1, "", "inputAnnotatorTypes"], [158, 2, 1, "", "inputCols"], [158, 3, 1, "", "inputColsValidation"], [158, 3, 1, "", "isDefined"], [158, 3, 1, "", "isSet"], [158, 2, 1, "", "lazyAnnotator"], [158, 3, 1, "", "load"], [158, 2, 1, "", "lowerCase"], [158, 2, 1, "", "maxCharNgramFingerprint"], [158, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [158, 2, 1, "", "maxTokenNgramDroppingOperator"], [158, 2, 1, "", "maxTokenNgramDroppingTokens"], [158, 2, 1, "", "maxTokenNgramFingerprint"], [158, 2, 1, "", "minCharNgramFingerprint"], [158, 2, 1, "", "minTokenNgramFingerprint"], [158, 2, 1, "", "multivaluesRelations"], [158, 2, 1, "", "name"], [158, 2, 1, "", "optionalInputAnnotatorTypes"], [158, 2, 1, "", "outputAnnotatorType"], [158, 2, 1, "", "outputCol"], [158, 3, 1, "", "read"], [158, 2, 1, "", "rel"], [158, 2, 1, "", "rels"], [158, 3, 1, "", "save"], [158, 3, 1, "", "set"], [158, 3, 1, "", "setAllowMultiTokenChunk"], [158, 3, 1, "", "setDictionary"], [158, 3, 1, "", "setDoExceptionHandling"], [158, 3, 1, "", "setEnableCharFingerprintMatching"], [158, 3, 1, "", "setEnableFuzzyMatching"], [158, 3, 1, "", "setEnableTokenFingerprintMatching"], [158, 3, 1, "", "setForceInputTypeValidation"], [158, 3, 1, "", "setFuzzyDistanceScalingMode"], [158, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [158, 3, 1, "", "setFuzzyMatchingDistances"], [158, 3, 1, "", "setInputCols"], [158, 3, 1, "", "setLazyAnnotator"], [158, 3, 1, "", "setLowerCase"], [158, 3, 1, "", "setMaxCharNgramFingerprint"], [158, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [158, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [158, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [158, 3, 1, "", "setMaxTokenNgramFingerprint"], [158, 3, 1, "", "setMinCharNgramFingerprint"], [158, 3, 1, "", "setMinTokenNgramFingerprint"], [158, 3, 1, "", "setMultivaluesRelations"], [158, 3, 1, "", "setOutputCol"], [158, 3, 1, "", "setParamValue"], [158, 3, 1, "", "setRel"], [158, 3, 1, "", "setRels"], [158, 2, 1, "", "skipLPInputColsValidation"], [158, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[158, 2, 1, "", "allowMultiTokenChunk"], [158, 3, 1, "", "clear"], [158, 3, 1, "", "copy"], [158, 2, 1, "", "doExceptionHandling"], [158, 2, 1, "", "enableCharFingerprintMatching"], [158, 2, 1, "", "enableFuzzyMatching"], [158, 2, 1, "", "enableTokenFingerprintMatching"], [158, 3, 1, "", "explainParam"], [158, 3, 1, "", "explainParams"], [158, 3, 1, "", "extractParamMap"], [158, 2, 1, "", "fuzzyDistanceScalingMode"], [158, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [158, 2, 1, "", "fuzzyMatchingDistances"], [158, 3, 1, "", "getInputCols"], [158, 3, 1, "", "getLazyAnnotator"], [158, 3, 1, "", "getOrDefault"], [158, 3, 1, "", "getOutputCol"], [158, 3, 1, "", "getParam"], [158, 3, 1, "", "getParamValue"], [158, 2, 1, "", "getter_attrs"], [158, 3, 1, "", "hasDefault"], [158, 3, 1, "", "hasParam"], [158, 2, 1, "", "inputAnnotatorTypes"], [158, 2, 1, "", "inputCols"], [158, 3, 1, "", "inputColsValidation"], [158, 3, 1, "", "isDefined"], [158, 3, 1, "", "isSet"], [158, 2, 1, "", "lazyAnnotator"], [158, 3, 1, "", "load"], [158, 2, 1, "", "lowerCase"], [158, 2, 1, "", "maxCharNgramFingerprint"], [158, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [158, 2, 1, "", "maxTokenNgramDroppingOperator"], [158, 2, 1, "", "maxTokenNgramDroppingTokens"], [158, 2, 1, "", "maxTokenNgramFingerprint"], [158, 2, 1, "", "minCharNgramFingerprint"], [158, 2, 1, "", "minTokenNgramFingerprint"], [158, 2, 1, "", "multivaluesRelations"], [158, 2, 1, "", "name"], [158, 2, 1, "", "optionalInputAnnotatorTypes"], [158, 2, 1, "", "outputAnnotatorType"], [158, 2, 1, "", "outputCol"], [158, 3, 1, "", "pretrained"], [158, 3, 1, "", "read"], [158, 2, 1, "", "rel"], [158, 2, 1, "", "rels"], [158, 3, 1, "", "save"], [158, 3, 1, "", "set"], [158, 3, 1, "", "setAllowMultiTokenChunk"], [158, 3, 1, "", "setDoExceptionHandling"], [158, 3, 1, "", "setEnableCharFingerprintMatching"], [158, 3, 1, "", "setEnableFuzzyMatching"], [158, 3, 1, "", "setEnableTokenFingerprintMatching"], [158, 3, 1, "", "setForceInputTypeValidation"], [158, 3, 1, "", "setFuzzyDistanceScalingMode"], [158, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [158, 3, 1, "", "setFuzzyMatchingDistances"], [158, 3, 1, "", "setInputCols"], [158, 3, 1, "", "setLazyAnnotator"], [158, 3, 1, "", "setLowerCase"], [158, 3, 1, "", "setMaxCharNgramFingerprint"], [158, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [158, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [158, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [158, 3, 1, "", "setMaxTokenNgramFingerprint"], [158, 3, 1, "", "setMinCharNgramFingerprint"], [158, 3, 1, "", "setMinTokenNgramFingerprint"], [158, 3, 1, "", "setMultivaluesRelations"], [158, 3, 1, "", "setOutputCol"], [158, 3, 1, "", "setParamValue"], [158, 3, 1, "", "setParams"], [158, 3, 1, "", "setRel"], [158, 3, 1, "", "setRels"], [158, 2, 1, "", "skipLPInputColsValidation"], [158, 3, 1, "", "transform"], [158, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[160, 1, 1, "", "SentenceEntityResolverApproach"], [160, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[160, 2, 1, "", "aux_label_col"], [160, 2, 1, "", "caseSensitive"], [160, 3, 1, "", "clear"], [160, 2, 1, "", "confidenceFunction"], [160, 3, 1, "", "copy"], [160, 2, 1, "", "datasetInfo"], [160, 2, 1, "", "distanceFunction"], [160, 2, 1, "", "doExceptionHandling"], [160, 2, 1, "", "dropCodesList"], [160, 2, 1, "", "engine"], [160, 3, 1, "", "explainParam"], [160, 3, 1, "", "explainParams"], [160, 3, 1, "", "extractParamMap"], [160, 3, 1, "", "fit"], [160, 3, 1, "", "fitMultiple"], [160, 3, 1, "", "getCaseSensitive"], [160, 3, 1, "", "getEngine"], [160, 3, 1, "", "getInputCols"], [160, 3, 1, "", "getLazyAnnotator"], [160, 3, 1, "", "getOrDefault"], [160, 3, 1, "", "getOutputCol"], [160, 3, 1, "", "getParam"], [160, 3, 1, "", "getParamValue"], [160, 2, 1, "", "getter_attrs"], [160, 3, 1, "", "hasDefault"], [160, 3, 1, "", "hasParam"], [160, 2, 1, "", "inputAnnotatorTypes"], [160, 2, 1, "", "inputCols"], [160, 3, 1, "", "inputColsValidation"], [160, 3, 1, "", "isDefined"], [160, 3, 1, "", "isSet"], [160, 2, 1, "", "labelCol"], [160, 2, 1, "", "lazyAnnotator"], [160, 3, 1, "", "load"], [160, 2, 1, "", "missAsEmpty"], [160, 2, 1, "", "neighbours"], [160, 2, 1, "", "normalizedCol"], [160, 2, 1, "", "optionalInputAnnotatorTypes"], [160, 2, 1, "", "outputAnnotatorType"], [160, 2, 1, "", "outputCol"], [160, 2, 1, "", "overrideExistingCodes"], [160, 2, 1, "", "pretrainedModelPath"], [160, 3, 1, "", "read"], [160, 2, 1, "", "returnCosineDistances"], [160, 2, 1, "", "returnResolvedTextEmbeddings"], [160, 3, 1, "", "save"], [160, 3, 1, "", "set"], [160, 3, 1, "", "setAuxLabelCol"], [160, 3, 1, "", "setCaseSensitive"], [160, 3, 1, "", "setConfidenceFunction"], [160, 3, 1, "", "setDatasetInfo"], [160, 3, 1, "", "setDistanceFunction"], [160, 3, 1, "", "setDoExceptionHandling"], [160, 3, 1, "", "setDropCodesList"], [160, 3, 1, "", "setExtractCosineDistances"], [160, 3, 1, "", "setForceInputTypeValidation"], [160, 3, 1, "", "setInputCols"], [160, 3, 1, "", "setLabelCol"], [160, 3, 1, "", "setLazyAnnotator"], [160, 3, 1, "", "setMissAsEmpty"], [160, 3, 1, "", "setNeighbours"], [160, 3, 1, "", "setNormalizedCol"], [160, 3, 1, "", "setOutputCol"], [160, 3, 1, "", "setOverrideExistingCodes"], [160, 3, 1, "", "setParamValue"], [160, 3, 1, "", "setPretrainedModelPath"], [160, 3, 1, "", "setReturnResolvedTextEmbeddings"], [160, 3, 1, "", "setThreshold"], [160, 3, 1, "", "setUseAuxLabel"], [160, 2, 1, "", "skipLPInputColsValidation"], [160, 2, 1, "", "threshold"], [160, 2, 1, "", "useAuxLabel"], [160, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[160, 2, 1, "", "caseSensitive"], [160, 3, 1, "", "clear"], [160, 3, 1, "", "copy"], [160, 2, 1, "", "dimension"], [160, 3, 1, "", "explainParam"], [160, 3, 1, "", "explainParams"], [160, 3, 1, "", "extractParamMap"], [160, 3, 1, "", "getCaseSensitive"], [160, 3, 1, "", "getDimension"], [160, 3, 1, "", "getInputCols"], [160, 3, 1, "", "getLazyAnnotator"], [160, 3, 1, "", "getOrDefault"], [160, 3, 1, "", "getOutputCol"], [160, 3, 1, "", "getParam"], [160, 3, 1, "", "getParamValue"], [160, 3, 1, "", "getStorageRef"], [160, 2, 1, "", "getter_attrs"], [160, 3, 1, "", "hasDefault"], [160, 3, 1, "", "hasParam"], [160, 2, 1, "", "inputAnnotatorTypes"], [160, 2, 1, "", "inputCols"], [160, 3, 1, "", "inputColsValidation"], [160, 3, 1, "", "isDefined"], [160, 3, 1, "", "isSet"], [160, 2, 1, "", "lazyAnnotator"], [160, 3, 1, "", "load"], [160, 3, 1, "", "loadStorage"], [160, 3, 1, "", "loadStorages"], [160, 2, 1, "", "name"], [160, 2, 1, "", "optionalInputAnnotatorTypes"], [160, 2, 1, "", "outputAnnotatorType"], [160, 2, 1, "", "outputCol"], [160, 3, 1, "", "pretrained"], [160, 3, 1, "", "read"], [160, 2, 1, "", "returnCosineDistances"], [160, 3, 1, "", "save"], [160, 3, 1, "", "saveStorage"], [160, 2, 1, "", "searchTree"], [160, 3, 1, "", "set"], [160, 3, 1, "", "setCaseSensitive"], [160, 3, 1, "", "setDimension"], [160, 3, 1, "", "setForceInputTypeValidation"], [160, 3, 1, "", "setInputCols"], [160, 3, 1, "", "setLazyAnnotator"], [160, 3, 1, "", "setOutputCol"], [160, 3, 1, "", "setParamValue"], [160, 3, 1, "", "setParams"], [160, 3, 1, "", "setSearchTree"], [160, 3, 1, "", "setStorageRef"], [160, 3, 1, "", "setUseAuxLabel"], [160, 2, 1, "", "skipLPInputColsValidation"], [160, 2, 1, "", "storageRef"], [160, 3, 1, "", "transform"], [160, 2, 1, "", "useAuxLabel"], [160, 3, 1, "", "write"]], "sparknlp_jsl.legal.graph": [[162, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[163, 0, 0, "-", "relation_extraction_dl"], [164, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[163, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[163, 2, 1, "", "batchSize"], [163, 2, 1, "", "classes"], [163, 3, 1, "", "clear"], [163, 3, 1, "", "copy"], [163, 2, 1, "", "customLabels"], [163, 2, 1, "", "doExceptionHandling"], [163, 3, 1, "", "explainParam"], [163, 3, 1, "", "explainParams"], [163, 3, 1, "", "extractParamMap"], [163, 3, 1, "", "getClasses"], [163, 3, 1, "", "getInputCols"], [163, 3, 1, "", "getLazyAnnotator"], [163, 3, 1, "", "getOrDefault"], [163, 3, 1, "", "getOutputCol"], [163, 3, 1, "", "getParam"], [163, 3, 1, "", "getParamValue"], [163, 3, 1, "", "getRelationTypePerPair"], [163, 2, 1, "", "getter_attrs"], [163, 3, 1, "", "hasDefault"], [163, 3, 1, "", "hasParam"], [163, 2, 1, "", "inputAnnotatorTypes"], [163, 2, 1, "", "inputCols"], [163, 3, 1, "", "inputColsValidation"], [163, 3, 1, "", "isDefined"], [163, 3, 1, "", "isSet"], [163, 2, 1, "", "lazyAnnotator"], [163, 3, 1, "", "load"], [163, 3, 1, "", "loadSavedModel"], [163, 2, 1, "", "name"], [163, 2, 1, "", "optionalInputAnnotatorTypes"], [163, 2, 1, "", "outputAnnotatorType"], [163, 2, 1, "", "outputCol"], [163, 2, 1, "", "predictionThreshold"], [163, 3, 1, "", "pretrained"], [163, 3, 1, "", "read"], [163, 2, 1, "", "relationPairsCaseSensitive"], [163, 3, 1, "", "save"], [163, 3, 1, "", "set"], [163, 3, 1, "", "setBatchSize"], [163, 3, 1, "", "setCaseSensitive"], [163, 3, 1, "", "setCustomLabels"], [163, 3, 1, "", "setDoExceptionHandling"], [163, 3, 1, "", "setForceInputTypeValidation"], [163, 3, 1, "", "setInputCols"], [163, 3, 1, "", "setLazyAnnotator"], [163, 3, 1, "", "setOutputCol"], [163, 3, 1, "", "setParamValue"], [163, 3, 1, "", "setParams"], [163, 3, 1, "", "setPredictionThreshold"], [163, 3, 1, "", "setRelationPairsCaseSensitive"], [163, 3, 1, "", "setRelationTypePerPair"], [163, 2, 1, "", "skipLPInputColsValidation"], [163, 3, 1, "", "transform"], [163, 3, 1, "", "write"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[164, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[164, 2, 1, "", "batchSize"], [164, 2, 1, "", "caseSensitive"], [164, 3, 1, "", "clear"], [164, 2, 1, "", "coalesceSentences"], [164, 2, 1, "", "configProtoBytes"], [164, 3, 1, "", "copy"], [164, 3, 1, "", "explainParam"], [164, 3, 1, "", "explainParams"], [164, 3, 1, "", "extractParamMap"], [164, 3, 1, "", "getBatchSize"], [164, 3, 1, "", "getCaseSensitive"], [164, 3, 1, "", "getClasses"], [164, 3, 1, "", "getInputCols"], [164, 3, 1, "", "getLazyAnnotator"], [164, 3, 1, "", "getOrDefault"], [164, 3, 1, "", "getOutputCol"], [164, 3, 1, "", "getParam"], [164, 3, 1, "", "getParamValue"], [164, 2, 1, "", "getter_attrs"], [164, 3, 1, "", "hasDefault"], [164, 3, 1, "", "hasParam"], [164, 2, 1, "", "inputAnnotatorTypes"], [164, 2, 1, "", "inputCols"], [164, 3, 1, "", "inputColsValidation"], [164, 3, 1, "", "isDefined"], [164, 3, 1, "", "isSet"], [164, 2, 1, "", "lazyAnnotator"], [164, 3, 1, "", "load"], [164, 3, 1, "", "loadSavedModel"], [164, 3, 1, "", "loadSavedModelOpenSource"], [164, 2, 1, "", "maxSentenceLength"], [164, 2, 1, "", "multiLabel"], [164, 2, 1, "", "name"], [164, 2, 1, "", "negativeRelationships"], [164, 2, 1, "", "optionalInputAnnotatorTypes"], [164, 2, 1, "", "outputAnnotatorType"], [164, 2, 1, "", "outputCol"], [164, 2, 1, "", "predictionThreshold"], [164, 3, 1, "", "pretrained"], [164, 3, 1, "", "read"], [164, 3, 1, "", "save"], [164, 3, 1, "", "set"], [164, 3, 1, "", "setBatchSize"], [164, 3, 1, "", "setCaseSensitive"], [164, 3, 1, "", "setCoalesceSentences"], [164, 3, 1, "", "setConfigProtoBytes"], [164, 3, 1, "", "setForceInputTypeValidation"], [164, 3, 1, "", "setInputCols"], [164, 3, 1, "", "setLazyAnnotator"], [164, 3, 1, "", "setMaxSentenceLength"], [164, 3, 1, "", "setNegativeRelationships"], [164, 3, 1, "", "setOutputCol"], [164, 3, 1, "", "setParamValue"], [164, 3, 1, "", "setParams"], [164, 3, 1, "", "setRelationalCategories"], [164, 2, 1, "", "skipLPInputColsValidation"], [164, 3, 1, "", "transform"], [164, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification": [[167, 0, 0, "-", "legal_bert_for_sequence_classification"], [168, 0, 0, "-", "legal_classifier_dl"], [169, 0, 0, "-", "legal_document_ml_classifier"], [170, 0, 0, "-", "legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[167, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[167, 2, 1, "", "batchSize"], [167, 2, 1, "", "caseSensitive"], [167, 3, 1, "", "clear"], [167, 2, 1, "", "coalesceSentences"], [167, 2, 1, "", "configProtoBytes"], [167, 3, 1, "", "copy"], [167, 3, 1, "", "explainParam"], [167, 3, 1, "", "explainParams"], [167, 3, 1, "", "extractParamMap"], [167, 3, 1, "", "getBatchSize"], [167, 3, 1, "", "getCaseSensitive"], [167, 3, 1, "", "getClasses"], [167, 3, 1, "", "getInputCols"], [167, 3, 1, "", "getLazyAnnotator"], [167, 3, 1, "", "getOrDefault"], [167, 3, 1, "", "getOutputCol"], [167, 3, 1, "", "getParam"], [167, 3, 1, "", "getParamValue"], [167, 2, 1, "", "getter_attrs"], [167, 3, 1, "", "hasDefault"], [167, 3, 1, "", "hasParam"], [167, 2, 1, "", "inputAnnotatorTypes"], [167, 2, 1, "", "inputCols"], [167, 3, 1, "", "inputColsValidation"], [167, 3, 1, "", "isDefined"], [167, 3, 1, "", "isSet"], [167, 2, 1, "", "lazyAnnotator"], [167, 3, 1, "", "load"], [167, 3, 1, "", "loadSavedModel"], [167, 3, 1, "", "loadSavedModelOpenSource"], [167, 2, 1, "", "maxSentenceLength"], [167, 2, 1, "", "name"], [167, 2, 1, "", "optionalInputAnnotatorTypes"], [167, 2, 1, "", "outputAnnotatorType"], [167, 2, 1, "", "outputCol"], [167, 3, 1, "", "pretrained"], [167, 3, 1, "", "read"], [167, 3, 1, "", "save"], [167, 3, 1, "", "set"], [167, 3, 1, "", "setBatchSize"], [167, 3, 1, "", "setCaseSensitive"], [167, 3, 1, "", "setCoalesceSentences"], [167, 3, 1, "", "setConfigProtoBytes"], [167, 3, 1, "", "setForceInputTypeValidation"], [167, 3, 1, "", "setInputCols"], [167, 3, 1, "", "setLazyAnnotator"], [167, 3, 1, "", "setMaxSentenceLength"], [167, 3, 1, "", "setOutputCol"], [167, 3, 1, "", "setParamValue"], [167, 3, 1, "", "setParams"], [167, 2, 1, "", "skipLPInputColsValidation"], [167, 3, 1, "", "transform"], [167, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[168, 1, 1, "", "LegalClassifierDLApproach"], [168, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach": [[168, 2, 1, "", "batchSize"], [168, 3, 1, "", "clear"], [168, 2, 1, "", "configProtoBytes"], [168, 3, 1, "", "copy"], [168, 2, 1, "", "dropout"], [168, 2, 1, "", "enableOutputLogs"], [168, 2, 1, "", "evaluationLogExtended"], [168, 3, 1, "", "explainParam"], [168, 3, 1, "", "explainParams"], [168, 3, 1, "", "extractParamMap"], [168, 3, 1, "", "fit"], [168, 3, 1, "", "fitMultiple"], [168, 3, 1, "", "getInputCols"], [168, 3, 1, "", "getLazyAnnotator"], [168, 3, 1, "", "getOrDefault"], [168, 3, 1, "", "getOutputCol"], [168, 3, 1, "", "getParam"], [168, 3, 1, "", "getParamValue"], [168, 2, 1, "", "getter_attrs"], [168, 3, 1, "", "hasDefault"], [168, 3, 1, "", "hasParam"], [168, 2, 1, "", "inputAnnotatorTypes"], [168, 2, 1, "", "inputCols"], [168, 3, 1, "", "inputColsValidation"], [168, 3, 1, "", "isDefined"], [168, 3, 1, "", "isSet"], [168, 2, 1, "", "labelColumn"], [168, 2, 1, "", "lazyAnnotator"], [168, 3, 1, "", "load"], [168, 2, 1, "", "lr"], [168, 2, 1, "", "maxEpochs"], [168, 2, 1, "", "optionalInputAnnotatorTypes"], [168, 2, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "outputCol"], [168, 2, 1, "", "outputLogsPath"], [168, 2, 1, "", "randomSeed"], [168, 3, 1, "", "read"], [168, 3, 1, "", "save"], [168, 3, 1, "", "set"], [168, 3, 1, "", "setBatchSize"], [168, 3, 1, "", "setConfigProtoBytes"], [168, 3, 1, "", "setDropout"], [168, 3, 1, "", "setEnableOutputLogs"], [168, 3, 1, "", "setEvaluationLogExtended"], [168, 3, 1, "", "setInputCols"], [168, 3, 1, "", "setLabelColumn"], [168, 3, 1, "", "setLazyAnnotator"], [168, 3, 1, "", "setLr"], [168, 3, 1, "", "setMaxEpochs"], [168, 3, 1, "", "setOutputCol"], [168, 3, 1, "", "setOutputLogsPath"], [168, 3, 1, "", "setParamValue"], [168, 3, 1, "", "setRandomSeed"], [168, 3, 1, "", "setTestDataset"], [168, 3, 1, "", "setValidationSplit"], [168, 3, 1, "", "setVerbose"], [168, 2, 1, "", "testDataset"], [168, 2, 1, "", "validationSplit"], [168, 2, 1, "", "verbose"], [168, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[168, 2, 1, "", "classes"], [168, 3, 1, "", "clear"], [168, 2, 1, "", "configProtoBytes"], [168, 3, 1, "", "copy"], [168, 2, 1, "", "engine"], [168, 3, 1, "", "explainParam"], [168, 3, 1, "", "explainParams"], [168, 3, 1, "", "extractParamMap"], [168, 3, 1, "", "getEngine"], [168, 3, 1, "", "getInputCols"], [168, 3, 1, "", "getLazyAnnotator"], [168, 3, 1, "", "getOrDefault"], [168, 3, 1, "", "getOutputCol"], [168, 3, 1, "", "getParam"], [168, 3, 1, "", "getParamValue"], [168, 3, 1, "", "getStorageRef"], [168, 2, 1, "", "getter_attrs"], [168, 3, 1, "", "hasDefault"], [168, 3, 1, "", "hasParam"], [168, 2, 1, "", "inputAnnotatorTypes"], [168, 2, 1, "", "inputCols"], [168, 3, 1, "", "inputColsValidation"], [168, 3, 1, "", "isDefined"], [168, 3, 1, "", "isSet"], [168, 2, 1, "", "lazyAnnotator"], [168, 3, 1, "", "load"], [168, 2, 1, "", "name"], [168, 2, 1, "", "optionalInputAnnotatorTypes"], [168, 2, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "outputCol"], [168, 3, 1, "", "pretrained"], [168, 3, 1, "", "read"], [168, 3, 1, "", "save"], [168, 3, 1, "", "set"], [168, 3, 1, "", "setConfigProtoBytes"], [168, 3, 1, "", "setInputCols"], [168, 3, 1, "", "setLazyAnnotator"], [168, 3, 1, "", "setOutputCol"], [168, 3, 1, "", "setParamValue"], [168, 3, 1, "", "setParams"], [168, 3, 1, "", "setStorageRef"], [168, 2, 1, "", "storageRef"], [168, 3, 1, "", "transform"], [168, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[169, 1, 1, "", "LegalDocumentMLClassifierApproach"], [169, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach": [[169, 2, 1, "", "classificationModelClass"], [169, 2, 1, "", "classificationModelPath"], [169, 3, 1, "", "clear"], [169, 3, 1, "", "copy"], [169, 3, 1, "", "explainParam"], [169, 3, 1, "", "explainParams"], [169, 3, 1, "", "extractParamMap"], [169, 3, 1, "", "fit"], [169, 2, 1, "", "fitIntercept"], [169, 3, 1, "", "fitMultiple"], [169, 3, 1, "", "getInputCols"], [169, 3, 1, "", "getLazyAnnotator"], [169, 3, 1, "", "getOrDefault"], [169, 3, 1, "", "getOutputCol"], [169, 3, 1, "", "getParam"], [169, 3, 1, "", "getParamValue"], [169, 2, 1, "", "getter_attrs"], [169, 3, 1, "", "hasDefault"], [169, 3, 1, "", "hasParam"], [169, 2, 1, "", "inputAnnotatorTypes"], [169, 2, 1, "", "inputCols"], [169, 3, 1, "", "inputColsValidation"], [169, 3, 1, "", "isDefined"], [169, 3, 1, "", "isSet"], [169, 2, 1, "", "labelCol"], [169, 2, 1, "", "labels"], [169, 2, 1, "", "lazyAnnotator"], [169, 3, 1, "", "load"], [169, 2, 1, "", "maxIter"], [169, 2, 1, "", "maxTokenNgram"], [169, 2, 1, "", "mergeChunks"], [169, 2, 1, "", "minTokenNgram"], [169, 2, 1, "", "optionalInputAnnotatorTypes"], [169, 2, 1, "", "outputAnnotatorType"], [169, 2, 1, "", "outputCol"], [169, 3, 1, "", "read"], [169, 3, 1, "", "save"], [169, 3, 1, "", "set"], [169, 3, 1, "", "setClassificationModelClass"], [169, 3, 1, "", "setClassificationModelPath"], [169, 3, 1, "", "setFitIntercept"], [169, 3, 1, "", "setForceInputTypeValidation"], [169, 3, 1, "", "setInputCols"], [169, 3, 1, "", "setLabelCol"], [169, 3, 1, "", "setLabels"], [169, 3, 1, "", "setLazyAnnotator"], [169, 3, 1, "", "setMaxIter"], [169, 3, 1, "", "setMaxTokenNgram"], [169, 3, 1, "", "setMergeChunks"], [169, 3, 1, "", "setMinTokenNgram"], [169, 3, 1, "", "setOutputCol"], [169, 3, 1, "", "setParamValue"], [169, 3, 1, "", "setTol"], [169, 3, 1, "", "setVectorizationModelPath"], [169, 2, 1, "", "skipLPInputColsValidation"], [169, 2, 1, "", "tol"], [169, 2, 1, "", "vectorizationModelPath"], [169, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[169, 2, 1, "", "classificationModel"], [169, 3, 1, "", "clear"], [169, 3, 1, "", "copy"], [169, 3, 1, "", "explainParam"], [169, 3, 1, "", "explainParams"], [169, 3, 1, "", "extractParamMap"], [169, 3, 1, "", "getInputCols"], [169, 3, 1, "", "getLazyAnnotator"], [169, 3, 1, "", "getOrDefault"], [169, 3, 1, "", "getOutputCol"], [169, 3, 1, "", "getParam"], [169, 3, 1, "", "getParamValue"], [169, 2, 1, "", "getter_attrs"], [169, 3, 1, "", "hasDefault"], [169, 3, 1, "", "hasParam"], [169, 2, 1, "", "inputAnnotatorTypes"], [169, 2, 1, "", "inputCols"], [169, 3, 1, "", "inputColsValidation"], [169, 3, 1, "", "isDefined"], [169, 3, 1, "", "isSet"], [169, 2, 1, "", "labels"], [169, 2, 1, "", "lazyAnnotator"], [169, 3, 1, "", "load"], [169, 2, 1, "", "maxTokenNgram"], [169, 2, 1, "", "mergeChunks"], [169, 2, 1, "", "minTokenNgram"], [169, 2, 1, "", "name"], [169, 2, 1, "", "optionalInputAnnotatorTypes"], [169, 2, 1, "", "outputAnnotatorType"], [169, 2, 1, "", "outputCol"], [169, 3, 1, "", "pretrained"], [169, 3, 1, "", "read"], [169, 3, 1, "", "save"], [169, 3, 1, "", "set"], [169, 3, 1, "", "setClassificationModel"], [169, 3, 1, "", "setForceInputTypeValidation"], [169, 3, 1, "", "setInputCols"], [169, 3, 1, "", "setLabels"], [169, 3, 1, "", "setLazyAnnotator"], [169, 3, 1, "", "setMergeChunks"], [169, 3, 1, "", "setOutputCol"], [169, 3, 1, "", "setParamValue"], [169, 3, 1, "", "setParams"], [169, 3, 1, "", "setVectorizationModel"], [169, 2, 1, "", "skipLPInputColsValidation"], [169, 3, 1, "", "transform"], [169, 2, 1, "", "vectorizationModel"], [169, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[170, 1, 1, "", "LegalFewShotClassifierApproach"], [170, 1, 1, "", "LegalFewShotClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach": [[170, 2, 1, "", "batchSize"], [170, 3, 1, "", "clear"], [170, 3, 1, "", "copy"], [170, 2, 1, "", "datasetInfo"], [170, 2, 1, "", "doExceptionHandling"], [170, 2, 1, "", "dropout"], [170, 2, 1, "", "engine"], [170, 2, 1, "", "epochsN"], [170, 3, 1, "", "explainParam"], [170, 3, 1, "", "explainParams"], [170, 3, 1, "", "extractParamMap"], [170, 2, 1, "", "featureScaling"], [170, 3, 1, "", "fit"], [170, 3, 1, "", "fitMultiple"], [170, 2, 1, "", "fixImbalance"], [170, 3, 1, "", "getEngine"], [170, 3, 1, "", "getInputCols"], [170, 3, 1, "", "getLazyAnnotator"], [170, 3, 1, "", "getOrDefault"], [170, 3, 1, "", "getOutputCol"], [170, 3, 1, "", "getParam"], [170, 3, 1, "", "getParamValue"], [170, 2, 1, "", "getter_attrs"], [170, 3, 1, "", "hasDefault"], [170, 3, 1, "", "hasParam"], [170, 2, 1, "", "inputAnnotatorTypes"], [170, 2, 1, "", "inputCols"], [170, 3, 1, "", "inputColsValidation"], [170, 3, 1, "", "isDefined"], [170, 3, 1, "", "isSet"], [170, 2, 1, "", "labelColumn"], [170, 2, 1, "", "lazyAnnotator"], [170, 2, 1, "", "learningRate"], [170, 3, 1, "", "load"], [170, 2, 1, "", "modelFile"], [170, 2, 1, "", "multiClass"], [170, 2, 1, "", "name"], [170, 2, 1, "", "optionalInputAnnotatorTypes"], [170, 2, 1, "", "outputAnnotatorType"], [170, 2, 1, "", "outputCol"], [170, 2, 1, "", "outputLogsPath"], [170, 3, 1, "", "read"], [170, 3, 1, "", "save"], [170, 3, 1, "", "set"], [170, 3, 1, "", "setBatchSize"], [170, 3, 1, "", "setDatasetInfo"], [170, 3, 1, "", "setDoExceptionHandling"], [170, 3, 1, "", "setDropout"], [170, 3, 1, "", "setEpochsNumber"], [170, 3, 1, "", "setFeatureScaling"], [170, 3, 1, "", "setFixImbalance"], [170, 3, 1, "", "setForceInputTypeValidation"], [170, 3, 1, "", "setInputCols"], [170, 3, 1, "", "setLabelCol"], [170, 3, 1, "", "setLazyAnnotator"], [170, 3, 1, "", "setLearningRate"], [170, 3, 1, "", "setModelFile"], [170, 3, 1, "", "setMultiClass"], [170, 3, 1, "", "setOutputCol"], [170, 3, 1, "", "setOutputLogsPath"], [170, 3, 1, "", "setParamValue"], [170, 3, 1, "", "setValidationSplit"], [170, 2, 1, "", "skipLPInputColsValidation"], [170, 2, 1, "", "validationSplit"], [170, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel": [[170, 2, 1, "", "classes"], [170, 3, 1, "", "clear"], [170, 3, 1, "", "copy"], [170, 2, 1, "", "datasetInfo"], [170, 2, 1, "", "doExceptionHandling"], [170, 3, 1, "", "explainParam"], [170, 3, 1, "", "explainParams"], [170, 3, 1, "", "extractParamMap"], [170, 2, 1, "", "featureScaling"], [170, 3, 1, "", "getInputCols"], [170, 3, 1, "", "getLazyAnnotator"], [170, 3, 1, "", "getOrDefault"], [170, 3, 1, "", "getOutputCol"], [170, 3, 1, "", "getParam"], [170, 3, 1, "", "getParamValue"], [170, 2, 1, "", "getter_attrs"], [170, 3, 1, "", "hasDefault"], [170, 3, 1, "", "hasParam"], [170, 2, 1, "", "inputAnnotatorTypes"], [170, 2, 1, "", "inputCols"], [170, 3, 1, "", "inputColsValidation"], [170, 3, 1, "", "isDefined"], [170, 3, 1, "", "isSet"], [170, 2, 1, "", "lazyAnnotator"], [170, 3, 1, "", "load"], [170, 2, 1, "", "multiClass"], [170, 2, 1, "", "name"], [170, 2, 1, "", "optionalInputAnnotatorTypes"], [170, 2, 1, "", "outputAnnotatorType"], [170, 2, 1, "", "outputCol"], [170, 3, 1, "", "pretrained"], [170, 3, 1, "", "read"], [170, 3, 1, "", "save"], [170, 3, 1, "", "set"], [170, 3, 1, "", "setDatasetInfo"], [170, 3, 1, "", "setDoExceptionHandling"], [170, 3, 1, "", "setFeatureScaling"], [170, 3, 1, "", "setForceInputTypeValidation"], [170, 3, 1, "", "setInputCols"], [170, 3, 1, "", "setLazyAnnotator"], [170, 3, 1, "", "setMultiClass"], [170, 3, 1, "", "setOutputCol"], [170, 3, 1, "", "setParamValue"], [170, 3, 1, "", "setParams"], [170, 2, 1, "", "skipLPInputColsValidation"], [170, 3, 1, "", "transform"], [170, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation": [[172, 0, 0, "-", "legal_encoder_decoder"], [173, 0, 0, "-", "legal_qa"], [174, 0, 0, "-", "legal_summarizer"], [175, 0, 0, "-", "legal_text_generator"], [176, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[172, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[172, 2, 1, "", "batchSize"], [172, 2, 1, "", "caseSensitive"], [172, 3, 1, "", "clear"], [172, 2, 1, "", "configProtoBytes"], [172, 3, 1, "", "copy"], [172, 2, 1, "", "doSample"], [172, 3, 1, "", "explainParam"], [172, 3, 1, "", "explainParams"], [172, 3, 1, "", "extractParamMap"], [172, 3, 1, "", "getBatchSize"], [172, 3, 1, "", "getCaseSensitive"], [172, 3, 1, "", "getInputCols"], [172, 3, 1, "", "getLazyAnnotator"], [172, 3, 1, "", "getOrDefault"], [172, 3, 1, "", "getOutputCol"], [172, 3, 1, "", "getParam"], [172, 3, 1, "", "getParamValue"], [172, 2, 1, "", "getter_attrs"], [172, 3, 1, "", "hasDefault"], [172, 3, 1, "", "hasParam"], [172, 2, 1, "", "ignoreTokenIds"], [172, 2, 1, "", "inputAnnotatorTypes"], [172, 2, 1, "", "inputCols"], [172, 3, 1, "", "inputColsValidation"], [172, 3, 1, "", "isDefined"], [172, 3, 1, "", "isSet"], [172, 2, 1, "", "lazyAnnotator"], [172, 3, 1, "", "load"], [172, 2, 1, "", "maxNewTokens"], [172, 2, 1, "", "maxTextLength"], [172, 2, 1, "", "mlFrameworkType"], [172, 2, 1, "", "name"], [172, 2, 1, "", "noRepeatNgramSize"], [172, 2, 1, "", "optionalInputAnnotatorTypes"], [172, 2, 1, "", "outputAnnotatorType"], [172, 2, 1, "", "outputCol"], [172, 2, 1, "", "randomSeed"], [172, 3, 1, "", "read"], [172, 2, 1, "", "refineChunkSize"], [172, 2, 1, "", "refineMaxAttempts"], [172, 2, 1, "", "refineSummary"], [172, 2, 1, "", "refineSummaryTargetLength"], [172, 3, 1, "", "save"], [172, 3, 1, "", "set"], [172, 3, 1, "", "setBatchSize"], [172, 3, 1, "", "setCaseSensitive"], [172, 3, 1, "", "setConfigProtoBytes"], [172, 3, 1, "", "setDoSample"], [172, 3, 1, "", "setForceInputTypeValidation"], [172, 3, 1, "", "setIgnoreTokenIds"], [172, 3, 1, "", "setInputCols"], [172, 3, 1, "", "setLazyAnnotator"], [172, 3, 1, "", "setMaxNewTokens"], [172, 3, 1, "", "setMaxTextLength"], [172, 3, 1, "", "setNoRepeatNgramSize"], [172, 3, 1, "", "setOutputCol"], [172, 3, 1, "", "setParamValue"], [172, 3, 1, "", "setParams"], [172, 3, 1, "", "setRandomSeed"], [172, 3, 1, "", "setRefineChunkSize"], [172, 3, 1, "", "setRefineMaxAttempts"], [172, 3, 1, "", "setRefineSummary"], [172, 3, 1, "", "setRefineSummaryTargetLength"], [172, 3, 1, "", "setStopAtEos"], [172, 3, 1, "", "setTopK"], [172, 2, 1, "", "skipLPInputColsValidation"], [172, 2, 1, "", "stopAtEos"], [172, 2, 1, "", "task"], [172, 2, 1, "", "topK"], [172, 3, 1, "", "transform"], [172, 2, 1, "", "useCache"], [172, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[173, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[173, 2, 1, "", "batchSize"], [173, 2, 1, "", "caseSensitive"], [173, 3, 1, "", "clear"], [173, 2, 1, "", "configProtoBytes"], [173, 3, 1, "", "copy"], [173, 2, 1, "", "customPrompt"], [173, 2, 1, "", "doSample"], [173, 3, 1, "", "explainParam"], [173, 3, 1, "", "explainParams"], [173, 3, 1, "", "extractParamMap"], [173, 3, 1, "", "getBatchSize"], [173, 3, 1, "", "getCaseSensitive"], [173, 3, 1, "", "getInputCols"], [173, 3, 1, "", "getLazyAnnotator"], [173, 3, 1, "", "getOrDefault"], [173, 3, 1, "", "getOutputCol"], [173, 3, 1, "", "getParam"], [173, 3, 1, "", "getParamValue"], [173, 3, 1, "", "getQuestionTypes"], [173, 2, 1, "", "getter_attrs"], [173, 3, 1, "", "hasDefault"], [173, 3, 1, "", "hasParam"], [173, 2, 1, "", "ignoreTokenIds"], [173, 2, 1, "", "inputAnnotatorTypes"], [173, 2, 1, "", "inputCols"], [173, 3, 1, "", "inputColsValidation"], [173, 3, 1, "", "isDefined"], [173, 3, 1, "", "isSet"], [173, 2, 1, "", "lazyAnnotator"], [173, 3, 1, "", "load"], [173, 3, 1, "", "loadMedicalTextGenerator"], [173, 3, 1, "", "loadSavedModel"], [173, 2, 1, "", "maxContextLength"], [173, 2, 1, "", "maxNewTokens"], [173, 2, 1, "", "mlFrameworkType"], [173, 2, 1, "", "modelType"], [173, 2, 1, "", "name"], [173, 2, 1, "", "noRepeatNgramSize"], [173, 2, 1, "", "optionalInputAnnotatorTypes"], [173, 2, 1, "", "outputAnnotatorType"], [173, 2, 1, "", "outputCol"], [173, 3, 1, "", "pretrained"], [173, 2, 1, "", "questionType"], [173, 3, 1, "", "read"], [173, 3, 1, "", "save"], [173, 3, 1, "", "set"], [173, 3, 1, "", "setBatchSize"], [173, 3, 1, "", "setCaseSensitive"], [173, 3, 1, "", "setConfigProtoBytes"], [173, 3, 1, "", "setCustomPrompt"], [173, 3, 1, "", "setDoSample"], [173, 3, 1, "", "setForceInputTypeValidation"], [173, 3, 1, "", "setIgnoreTokenIds"], [173, 3, 1, "", "setInputCols"], [173, 3, 1, "", "setLazyAnnotator"], [173, 3, 1, "", "setMaxContextLength"], [173, 3, 1, "", "setMaxNewTokens"], [173, 3, 1, "", "setNoRepeatNgramSize"], [173, 3, 1, "", "setOutputCol"], [173, 3, 1, "", "setParamValue"], [173, 3, 1, "", "setParams"], [173, 3, 1, "", "setQuestionAnswerTerminals"], [173, 3, 1, "", "setQuestionPrompts"], [173, 3, 1, "", "setQuestionSkipLastToken"], [173, 3, 1, "", "setQuestionType"], [173, 3, 1, "", "setRandomSeed"], [173, 3, 1, "", "setTopK"], [173, 3, 1, "", "setUseCache"], [173, 2, 1, "", "skipLPInputColsValidation"], [173, 2, 1, "", "topK"], [173, 3, 1, "", "transform"], [173, 2, 1, "", "useCache"], [173, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[174, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[174, 2, 1, "", "batchSize"], [174, 2, 1, "", "caseSensitive"], [174, 3, 1, "", "clear"], [174, 2, 1, "", "configProtoBytes"], [174, 3, 1, "", "copy"], [174, 2, 1, "", "doSample"], [174, 3, 1, "", "explainParam"], [174, 3, 1, "", "explainParams"], [174, 3, 1, "", "extractParamMap"], [174, 3, 1, "", "getBatchSize"], [174, 3, 1, "", "getCaseSensitive"], [174, 3, 1, "", "getInputCols"], [174, 3, 1, "", "getLazyAnnotator"], [174, 3, 1, "", "getOrDefault"], [174, 3, 1, "", "getOutputCol"], [174, 3, 1, "", "getParam"], [174, 3, 1, "", "getParamValue"], [174, 2, 1, "", "getter_attrs"], [174, 3, 1, "", "hasDefault"], [174, 3, 1, "", "hasParam"], [174, 2, 1, "", "ignoreTokenIds"], [174, 2, 1, "", "inputAnnotatorTypes"], [174, 2, 1, "", "inputCols"], [174, 3, 1, "", "inputColsValidation"], [174, 3, 1, "", "isDefined"], [174, 3, 1, "", "isSet"], [174, 2, 1, "", "lazyAnnotator"], [174, 3, 1, "", "load"], [174, 3, 1, "", "loadSavedModel"], [174, 2, 1, "", "maxNewTokens"], [174, 2, 1, "", "maxTextLength"], [174, 2, 1, "", "mlFrameworkType"], [174, 2, 1, "", "name"], [174, 2, 1, "", "noRepeatNgramSize"], [174, 2, 1, "", "optionalInputAnnotatorTypes"], [174, 2, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "outputCol"], [174, 3, 1, "", "pretrained"], [174, 2, 1, "", "randomSeed"], [174, 3, 1, "", "read"], [174, 2, 1, "", "refineChunkSize"], [174, 2, 1, "", "refineMaxAttempts"], [174, 2, 1, "", "refineSummary"], [174, 2, 1, "", "refineSummaryTargetLength"], [174, 3, 1, "", "save"], [174, 3, 1, "", "set"], [174, 3, 1, "", "setBatchSize"], [174, 3, 1, "", "setCaseSensitive"], [174, 3, 1, "", "setConfigProtoBytes"], [174, 3, 1, "", "setDoSample"], [174, 3, 1, "", "setForceInputTypeValidation"], [174, 3, 1, "", "setIgnoreTokenIds"], [174, 3, 1, "", "setInputCols"], [174, 3, 1, "", "setLazyAnnotator"], [174, 3, 1, "", "setMaxNewTokens"], [174, 3, 1, "", "setMaxTextLength"], [174, 3, 1, "", "setNoRepeatNgramSize"], [174, 3, 1, "", "setOutputCol"], [174, 3, 1, "", "setParamValue"], [174, 3, 1, "", "setParams"], [174, 3, 1, "", "setRandomSeed"], [174, 3, 1, "", "setRefineChunkSize"], [174, 3, 1, "", "setRefineMaxAttempts"], [174, 3, 1, "", "setRefineSummary"], [174, 3, 1, "", "setRefineSummaryTargetLength"], [174, 3, 1, "", "setStopAtEos"], [174, 3, 1, "", "setTopK"], [174, 2, 1, "", "skipLPInputColsValidation"], [174, 2, 1, "", "stopAtEos"], [174, 2, 1, "", "task"], [174, 2, 1, "", "topK"], [174, 3, 1, "", "transform"], [174, 2, 1, "", "useCache"], [174, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[175, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[175, 2, 1, "", "batchSize"], [175, 2, 1, "", "caseSensitive"], [175, 3, 1, "", "clear"], [175, 2, 1, "", "configProtoBytes"], [175, 3, 1, "", "copy"], [175, 2, 1, "", "customPrompt"], [175, 2, 1, "", "doSample"], [175, 3, 1, "", "explainParam"], [175, 3, 1, "", "explainParams"], [175, 3, 1, "", "extractParamMap"], [175, 3, 1, "", "getAdditionalTokens"], [175, 3, 1, "", "getBatchSize"], [175, 3, 1, "", "getCaseSensitive"], [175, 3, 1, "", "getInputCols"], [175, 3, 1, "", "getLazyAnnotator"], [175, 3, 1, "", "getOrDefault"], [175, 3, 1, "", "getOutputCol"], [175, 3, 1, "", "getParam"], [175, 3, 1, "", "getParamValue"], [175, 2, 1, "", "getter_attrs"], [175, 3, 1, "", "hasDefault"], [175, 3, 1, "", "hasParam"], [175, 2, 1, "", "ignoreTokenIds"], [175, 2, 1, "", "inputAnnotatorTypes"], [175, 2, 1, "", "inputCols"], [175, 3, 1, "", "inputColsValidation"], [175, 3, 1, "", "isDefined"], [175, 3, 1, "", "isSet"], [175, 2, 1, "", "lazyAnnotator"], [175, 3, 1, "", "load"], [175, 3, 1, "", "loadSavedModel"], [175, 2, 1, "", "maxContextLength"], [175, 2, 1, "", "maxNewTokens"], [175, 2, 1, "", "maxTextLength"], [175, 2, 1, "", "mlFrameworkType"], [175, 2, 1, "", "modelType"], [175, 2, 1, "", "name"], [175, 2, 1, "", "noRepeatNgramSize"], [175, 2, 1, "", "optionalInputAnnotatorTypes"], [175, 2, 1, "", "outputAnnotatorType"], [175, 2, 1, "", "outputCol"], [175, 3, 1, "", "pretrained"], [175, 3, 1, "", "read"], [175, 3, 1, "", "save"], [175, 3, 1, "", "set"], [175, 3, 1, "", "setAdditionalTokens"], [175, 3, 1, "", "setBatchSize"], [175, 3, 1, "", "setCaseSensitive"], [175, 3, 1, "", "setConfigProtoBytes"], [175, 3, 1, "", "setCustomPrompt"], [175, 3, 1, "", "setDoSample"], [175, 3, 1, "", "setForceInputTypeValidation"], [175, 3, 1, "", "setIgnoreTokenIds"], [175, 3, 1, "", "setInputCols"], [175, 3, 1, "", "setLazyAnnotator"], [175, 3, 1, "", "setMaxContextLength"], [175, 3, 1, "", "setMaxNewTokens"], [175, 3, 1, "", "setMaxTextLength"], [175, 3, 1, "", "setNoRepeatNgramSize"], [175, 3, 1, "", "setOutputCol"], [175, 3, 1, "", "setParamValue"], [175, 3, 1, "", "setParams"], [175, 3, 1, "", "setRandomSeed"], [175, 3, 1, "", "setStopAtEos"], [175, 3, 1, "", "setTopK"], [175, 3, 1, "", "setUseCache"], [175, 2, 1, "", "skipLPInputColsValidation"], [175, 2, 1, "", "stopAtEos"], [175, 2, 1, "", "topK"], [175, 3, 1, "", "transform"], [175, 2, 1, "", "useCache"], [175, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[176, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator": [[176, 3, 1, "", "clear"], [176, 3, 1, "", "copy"], [176, 2, 1, "", "entities1"], [176, 2, 1, "", "entities2"], [176, 3, 1, "", "explainParam"], [176, 3, 1, "", "explainParams"], [176, 3, 1, "", "extractParamMap"], [176, 3, 1, "", "getInputCols"], [176, 3, 1, "", "getLazyAnnotator"], [176, 3, 1, "", "getOrDefault"], [176, 3, 1, "", "getOutputCol"], [176, 3, 1, "", "getParam"], [176, 3, 1, "", "getParamValue"], [176, 2, 1, "", "getter_attrs"], [176, 3, 1, "", "hasDefault"], [176, 3, 1, "", "hasParam"], [176, 2, 1, "", "inputAnnotatorTypes"], [176, 2, 1, "", "inputCols"], [176, 3, 1, "", "inputColsValidation"], [176, 3, 1, "", "isDefined"], [176, 3, 1, "", "isSet"], [176, 2, 1, "", "lazyAnnotator"], [176, 3, 1, "", "load"], [176, 2, 1, "", "name"], [176, 2, 1, "", "optionalInputAnnotatorTypes"], [176, 2, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "outputCol"], [176, 2, 1, "", "questionMark"], [176, 2, 1, "", "questionPronoun"], [176, 3, 1, "", "read"], [176, 3, 1, "", "save"], [176, 3, 1, "", "set"], [176, 3, 1, "", "setEntities1"], [176, 3, 1, "", "setEntities2"], [176, 3, 1, "", "setForceInputTypeValidation"], [176, 3, 1, "", "setInputCols"], [176, 3, 1, "", "setLazyAnnotator"], [176, 3, 1, "", "setOutputCol"], [176, 3, 1, "", "setParamValue"], [176, 3, 1, "", "setParams"], [176, 3, 1, "", "setQuestionMark"], [176, 3, 1, "", "setQuestionPronoun"], [176, 3, 1, "", "setStrategyType"], [176, 2, 1, "", "skipLPInputColsValidation"], [176, 2, 1, "", "strategyType"], [176, 3, 1, "", "transform"], [176, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification": [[178, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[179, 0, 0, "-", "legal_bert_for_token_classifier"], [180, 0, 0, "-", "legal_ner"], [181, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[179, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[179, 2, 1, "", "batchSize"], [179, 2, 1, "", "caseSensitive"], [179, 3, 1, "", "clear"], [179, 2, 1, "", "configProtoBytes"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "explainParam"], [179, 3, 1, "", "explainParams"], [179, 3, 1, "", "extractParamMap"], [179, 3, 1, "", "getBatchSize"], [179, 3, 1, "", "getCaseSensitive"], [179, 3, 1, "", "getClasses"], [179, 3, 1, "", "getInputCols"], [179, 3, 1, "", "getLazyAnnotator"], [179, 3, 1, "", "getOrDefault"], [179, 3, 1, "", "getOutputCol"], [179, 3, 1, "", "getParam"], [179, 3, 1, "", "getParamValue"], [179, 2, 1, "", "getter_attrs"], [179, 3, 1, "", "hasDefault"], [179, 3, 1, "", "hasParam"], [179, 2, 1, "", "inputAnnotatorTypes"], [179, 2, 1, "", "inputCols"], [179, 3, 1, "", "inputColsValidation"], [179, 3, 1, "", "isDefined"], [179, 3, 1, "", "isSet"], [179, 2, 1, "", "lazyAnnotator"], [179, 3, 1, "", "load"], [179, 3, 1, "", "loadSavedModel"], [179, 3, 1, "", "loadSavedModelOpenSource"], [179, 2, 1, "", "maxSentenceLength"], [179, 2, 1, "", "name"], [179, 2, 1, "", "optionalInputAnnotatorTypes"], [179, 2, 1, "", "outputAnnotatorType"], [179, 2, 1, "", "outputCol"], [179, 3, 1, "", "pretrained"], [179, 3, 1, "", "read"], [179, 3, 1, "", "save"], [179, 3, 1, "", "set"], [179, 3, 1, "", "setBatchSize"], [179, 3, 1, "", "setCaseSensitive"], [179, 3, 1, "", "setConfigProtoBytes"], [179, 3, 1, "", "setForceInputTypeValidation"], [179, 3, 1, "", "setInputCols"], [179, 3, 1, "", "setLazyAnnotator"], [179, 3, 1, "", "setMaxSentenceLength"], [179, 3, 1, "", "setOutputCol"], [179, 3, 1, "", "setParamValue"], [179, 3, 1, "", "setParams"], [179, 2, 1, "", "skipLPInputColsValidation"], [179, 3, 1, "", "transform"], [179, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[180, 1, 1, "", "LegalNerApproach"], [180, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach": [[180, 2, 1, "", "batchSize"], [180, 3, 1, "", "clear"], [180, 2, 1, "", "configProtoBytes"], [180, 3, 1, "", "copy"], [180, 2, 1, "", "datasetInfo"], [180, 2, 1, "", "dropout"], [180, 2, 1, "", "earlyStoppingCriterion"], [180, 2, 1, "", "earlyStoppingPatience"], [180, 2, 1, "", "enableMemoryOptimizer"], [180, 2, 1, "", "enableOutputLogs"], [180, 2, 1, "", "engine"], [180, 2, 1, "", "entities"], [180, 2, 1, "", "evaluationLogExtended"], [180, 3, 1, "", "explainParam"], [180, 3, 1, "", "explainParams"], [180, 3, 1, "", "extractParamMap"], [180, 3, 1, "", "fit"], [180, 3, 1, "", "fitMultiple"], [180, 3, 1, "", "getEngine"], [180, 3, 1, "", "getInputCols"], [180, 3, 1, "", "getLabelColumn"], [180, 3, 1, "", "getLazyAnnotator"], [180, 3, 1, "", "getOrDefault"], [180, 3, 1, "", "getOutputCol"], [180, 3, 1, "", "getParam"], [180, 3, 1, "", "getParamValue"], [180, 2, 1, "", "getter_attrs"], [180, 2, 1, "", "graphFile"], [180, 2, 1, "", "graphFolder"], [180, 3, 1, "", "hasDefault"], [180, 3, 1, "", "hasParam"], [180, 2, 1, "", "includeAllConfidenceScores"], [180, 2, 1, "", "includeConfidence"], [180, 2, 1, "", "inputAnnotatorTypes"], [180, 2, 1, "", "inputCols"], [180, 3, 1, "", "inputColsValidation"], [180, 3, 1, "", "isDefined"], [180, 3, 1, "", "isSet"], [180, 2, 1, "", "labelColumn"], [180, 2, 1, "", "lazyAnnotator"], [180, 3, 1, "", "load"], [180, 2, 1, "", "logPrefix"], [180, 2, 1, "", "lr"], [180, 2, 1, "", "maxEpochs"], [180, 2, 1, "", "minEpochs"], [180, 2, 1, "", "optionalInputAnnotatorTypes"], [180, 2, 1, "", "outputAnnotatorType"], [180, 2, 1, "", "outputCol"], [180, 2, 1, "", "outputLogsPath"], [180, 2, 1, "", "overrideExistingTags"], [180, 2, 1, "", "po"], [180, 2, 1, "", "pretrainedModelPath"], [180, 2, 1, "", "randomSeed"], [180, 2, 1, "", "randomValidationSplitPerEpoch"], [180, 3, 1, "", "read"], [180, 3, 1, "", "save"], [180, 2, 1, "", "sentenceTokenIndex"], [180, 3, 1, "", "set"], [180, 3, 1, "", "setBatchSize"], [180, 3, 1, "", "setConfigProtoBytes"], [180, 3, 1, "", "setDatasetInfo"], [180, 3, 1, "", "setDoExceptionHandling"], [180, 3, 1, "", "setDropout"], [180, 3, 1, "", "setEarlyStoppingCriterion"], [180, 3, 1, "", "setEarlyStoppingPatience"], [180, 3, 1, "", "setEnableMemoryOptimizer"], [180, 3, 1, "", "setEnableOutputLogs"], [180, 3, 1, "", "setEntities"], [180, 3, 1, "", "setEvaluationLogExtended"], [180, 3, 1, "", "setForceInputTypeValidation"], [180, 3, 1, "", "setGraphFile"], [180, 3, 1, "", "setGraphFolder"], [180, 3, 1, "", "setIncludeAllConfidenceScores"], [180, 3, 1, "", "setIncludeConfidence"], [180, 3, 1, "", "setInputCols"], [180, 3, 1, "", "setLabelColumn"], [180, 3, 1, "", "setLazyAnnotator"], [180, 3, 1, "", "setLogPrefix"], [180, 3, 1, "", "setLr"], [180, 3, 1, "", "setMaxEpochs"], [180, 3, 1, "", "setMinEpochs"], [180, 3, 1, "", "setOutputCol"], [180, 3, 1, "", "setOutputLogsPath"], [180, 3, 1, "", "setOverrideExistingTags"], [180, 3, 1, "", "setParamValue"], [180, 3, 1, "", "setPo"], [180, 3, 1, "", "setPretrainedModelPath"], [180, 3, 1, "", "setRandomSeed"], [180, 3, 1, "", "setRandomValidationSplitPerEpoch"], [180, 3, 1, "", "setSentenceTokenIndex"], [180, 3, 1, "", "setTagsMapping"], [180, 3, 1, "", "setTestDataset"], [180, 3, 1, "", "setUseBestModel"], [180, 3, 1, "", "setUseContrib"], [180, 3, 1, "", "setValidationSplit"], [180, 3, 1, "", "setVerbose"], [180, 2, 1, "", "skipLPInputColsValidation"], [180, 2, 1, "", "testDataset"], [180, 2, 1, "", "uc"], [180, 2, 1, "", "useBestModel"], [180, 2, 1, "", "useContrib"], [180, 2, 1, "", "validationSplit"], [180, 2, 1, "", "verbose"], [180, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[180, 2, 1, "", "batchSize"], [180, 2, 1, "", "classes"], [180, 3, 1, "", "clear"], [180, 2, 1, "", "configProtoBytes"], [180, 3, 1, "", "copy"], [180, 2, 1, "", "datasetInfo"], [180, 2, 1, "", "doExceptionHandling"], [180, 3, 1, "", "explainParam"], [180, 3, 1, "", "explainParams"], [180, 3, 1, "", "extractParamMap"], [180, 3, 1, "", "getBatchSize"], [180, 3, 1, "", "getClasses"], [180, 3, 1, "", "getInputCols"], [180, 3, 1, "", "getLazyAnnotator"], [180, 3, 1, "", "getOrDefault"], [180, 3, 1, "", "getOutputCol"], [180, 3, 1, "", "getParam"], [180, 3, 1, "", "getParamValue"], [180, 3, 1, "", "getStorageRef"], [180, 3, 1, "", "getTrainingClassDistribution"], [180, 2, 1, "", "getter_attrs"], [180, 3, 1, "", "hasDefault"], [180, 3, 1, "", "hasParam"], [180, 2, 1, "", "includeAllConfidenceScores"], [180, 2, 1, "", "includeConfidence"], [180, 2, 1, "", "inferenceBatchSize"], [180, 2, 1, "", "inputAnnotatorTypes"], [180, 2, 1, "", "inputCols"], [180, 3, 1, "", "inputColsValidation"], [180, 3, 1, "", "isDefined"], [180, 3, 1, "", "isSet"], [180, 2, 1, "", "labelCasing"], [180, 2, 1, "", "lazyAnnotator"], [180, 3, 1, "", "load"], [180, 3, 1, "", "loadSavedModel"], [180, 2, 1, "", "name"], [180, 2, 1, "", "optionalInputAnnotatorTypes"], [180, 2, 1, "", "outputAnnotatorType"], [180, 2, 1, "", "outputCol"], [180, 3, 1, "", "pretrained"], [180, 3, 1, "", "read"], [180, 3, 1, "", "save"], [180, 2, 1, "", "sentenceTokenIndex"], [180, 3, 1, "", "set"], [180, 3, 1, "", "setBatchSize"], [180, 3, 1, "", "setConfigProtoBytes"], [180, 3, 1, "", "setDatasetInfo"], [180, 3, 1, "", "setForceInputTypeValidation"], [180, 3, 1, "", "setIncludeConfidence"], [180, 3, 1, "", "setInferenceBatchSize"], [180, 3, 1, "", "setInputCols"], [180, 3, 1, "", "setLabelCasing"], [180, 3, 1, "", "setLazyAnnotator"], [180, 3, 1, "", "setOutputCol"], [180, 3, 1, "", "setParamValue"], [180, 3, 1, "", "setParams"], [180, 3, 1, "", "setSentenceTokenIndex"], [180, 3, 1, "", "setStorageRef"], [180, 2, 1, "", "skipLPInputColsValidation"], [180, 2, 1, "", "storageRef"], [180, 2, 1, "", "trainingClassDistribution"], [180, 3, 1, "", "transform"], [180, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[181, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[181, 2, 1, "", "batchSize"], [181, 2, 1, "", "caseSensitive"], [181, 3, 1, "", "clear"], [181, 2, 1, "", "coalesceSentences"], [181, 2, 1, "", "configProtoBytes"], [181, 3, 1, "", "copy"], [181, 2, 1, "", "engine"], [181, 3, 1, "", "explainParam"], [181, 3, 1, "", "explainParams"], [181, 3, 1, "", "extractParamMap"], [181, 3, 1, "", "getBatchSize"], [181, 3, 1, "", "getCaseSensitive"], [181, 3, 1, "", "getClasses"], [181, 3, 1, "", "getEngine"], [181, 3, 1, "", "getInputCols"], [181, 3, 1, "", "getLazyAnnotator"], [181, 3, 1, "", "getMaxSentenceLength"], [181, 3, 1, "", "getOrDefault"], [181, 3, 1, "", "getOutputCol"], [181, 3, 1, "", "getParam"], [181, 3, 1, "", "getParamValue"], [181, 2, 1, "", "getter_attrs"], [181, 3, 1, "", "hasDefault"], [181, 3, 1, "", "hasParam"], [181, 2, 1, "", "ignoreEntities"], [181, 2, 1, "", "inputAnnotatorTypes"], [181, 2, 1, "", "inputCols"], [181, 3, 1, "", "inputColsValidation"], [181, 3, 1, "", "isDefined"], [181, 3, 1, "", "isSet"], [181, 2, 1, "", "lazyAnnotator"], [181, 3, 1, "", "load"], [181, 3, 1, "", "loadSavedModel"], [181, 2, 1, "", "maxSentenceLength"], [181, 2, 1, "", "max_length_limit"], [181, 2, 1, "", "name"], [181, 2, 1, "", "optionalInputAnnotatorTypes"], [181, 2, 1, "", "outputAnnotatorType"], [181, 2, 1, "", "outputCol"], [181, 2, 1, "", "predictionThreshold"], [181, 3, 1, "", "pretrained"], [181, 3, 1, "", "read"], [181, 3, 1, "", "save"], [181, 3, 1, "", "set"], [181, 3, 1, "", "setBatchSize"], [181, 3, 1, "", "setCaseSensitive"], [181, 3, 1, "", "setConfigProtoBytes"], [181, 3, 1, "", "setEntityDefinitions"], [181, 3, 1, "", "setInputCols"], [181, 3, 1, "", "setLazyAnnotator"], [181, 3, 1, "", "setMaxSentenceLength"], [181, 3, 1, "", "setOutputCol"], [181, 3, 1, "", "setParamValue"], [181, 3, 1, "", "setParams"], [181, 3, 1, "", "setPredictionThreshold"], [181, 3, 1, "", "transform"], [181, 3, 1, "", "write"]], "sparknlp_jsl.llm": [[183, 0, 0, "-", "llm_loader"]], "sparknlp_jsl.llm.llm_loader": [[183, 1, 1, "", "LLMLoader"]], "sparknlp_jsl.llm.llm_loader.LLMLoader": [[183, 2, 1, "", "classname"], [183, 3, 1, "", "clear"], [183, 3, 1, "", "copy"], [183, 3, 1, "", "encodeModel"], [183, 3, 1, "", "explainParam"], [183, 3, 1, "", "explainParams"], [183, 3, 1, "", "extractParamMap"], [183, 3, 1, "", "generate"], [183, 3, 1, "", "getMetadata"], [183, 3, 1, "", "getMetadataEntry"], [183, 3, 1, "", "getOrDefault"], [183, 3, 1, "", "getParam"], [183, 3, 1, "", "hasDefault"], [183, 3, 1, "", "hasParam"], [183, 3, 1, "", "isDefined"], [183, 3, 1, "", "isSet"], [183, 3, 1, "", "load"], [183, 3, 1, "", "pretrained"], [183, 3, 1, "", "set"], [183, 3, 1, "", "setCachePrompt"], [183, 3, 1, "", "setDynamicTemperatureExponent"], [183, 3, 1, "", "setDynamicTemperatureRange"], [183, 3, 1, "", "setFrequencyPenalty"], [183, 3, 1, "", "setGrammar"], [183, 3, 1, "", "setIgnoreEos"], [183, 3, 1, "", "setInputPrefix"], [183, 3, 1, "", "setInputSuffix"], [183, 3, 1, "", "setMinKeep"], [183, 3, 1, "", "setMinP"], [183, 3, 1, "", "setMiroStatEta"], [183, 3, 1, "", "setMiroStatTau"], [183, 3, 1, "", "setNKeep"], [183, 3, 1, "", "setNPredict"], [183, 3, 1, "", "setNProbs"], [183, 3, 1, "", "setPenalizeNl"], [183, 3, 1, "", "setPenaltyPrompt"], [183, 3, 1, "", "setPresencePenalty"], [183, 3, 1, "", "setRepeatLastN"], [183, 3, 1, "", "setRepeatPenalty"], [183, 3, 1, "", "setSeed"], [183, 3, 1, "", "setStopStrings"], [183, 3, 1, "", "setTemperature"], [183, 3, 1, "", "setTfsZ"], [183, 3, 1, "", "setTopK"], [183, 3, 1, "", "setTopP"], [183, 3, 1, "", "setTypicalP"], [183, 3, 1, "", "setUseChatTemplate"], [183, 3, 1, "", "transform"]], "sparknlp_jsl.modelTracer": [[184, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[184, 3, 1, "", "addUidCols"]], "sparknlp_jsl.pipeline_output_parser": [[185, 1, 1, "", "PipelineOutputParser"]], "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser": [[185, 3, 1, "", "check_column_mapping_dict"], [185, 3, 1, "", "check_unique_id"], [185, 3, 1, "", "get_assertions"], [185, 3, 1, "", "get_classification"], [185, 3, 1, "", "get_deidentification"], [185, 3, 1, "", "get_documents"], [185, 3, 1, "", "get_entities"], [185, 3, 1, "", "get_relations"], [185, 3, 1, "", "get_resolutions"], [185, 3, 1, "", "get_summary"], [185, 3, 1, "", "get_unique_id"], [185, 3, 1, "", "run"], [185, 3, 1, "", "update_columns_maps"]], "sparknlp_jsl.pipeline_tracer": [[186, 1, 1, "", "PipelineStage"], [186, 1, 1, "", "PipelineTracer"], [186, 1, 1, "", "StageField"]], "sparknlp_jsl.pipeline_tracer.PipelineStage": [[186, 2, 1, "", "index"], [186, 2, 1, "", "inputAnnotatorType"], [186, 2, 1, "", "inputCol"], [186, 2, 1, "", "name"], [186, 2, 1, "", "outputAnnotatorType"], [186, 2, 1, "", "outputCol"], [186, 2, 1, "", "stage"], [186, 2, 1, "", "uid"]], "sparknlp_jsl.pipeline_tracer.PipelineTracer": [[186, 3, 1, "", "createParserDictionary"], [186, 3, 1, "", "getParserDictDirectly"], [186, 3, 1, "", "getPipelineStages"], [186, 3, 1, "", "getPossibleAssertions"], [186, 3, 1, "", "getPossibleEntities"], [186, 3, 1, "", "getPossibleRelations"], [186, 3, 1, "", "listAvailableModels"], [186, 3, 1, "", "printPipelineSchema"], [186, 3, 1, "", "showAvailableModels"]], "sparknlp_jsl.pipeline_tracer.StageField": [[186, 2, 1, "", "fieldType"], [186, 2, 1, "", "name"], [186, 2, 1, "", "value"]], "sparknlp_jsl.pretrained": [[187, 1, 1, "", "InternalResourceDownloader"], [187, 5, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[187, 3, 1, "", "downloadModel"], [187, 3, 1, "", "downloadModelDirectly"], [187, 3, 1, "", "returnPrivateModels"], [187, 3, 1, "", "returnPrivatePipelines"], [187, 3, 1, "", "showAvailableAnnotators"], [187, 3, 1, "", "showPrivateModels"], [187, 3, 1, "", "showPrivatePipelines"], [187, 3, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[188, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[188, 2, 1, "", "columns"], [188, 2, 1, "", "instance"], [188, 3, 1, "", "obfuscateColumns"], [188, 2, 1, "", "obfuscateRefFile"], [188, 2, 1, "", "spark"]], "sparknlp_jsl.text_to_documents_columns": [[189, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[189, 2, 1, "", "columns"], [189, 2, 1, "", "instance"], [189, 2, 1, "", "spark"], [189, 3, 1, "", "toDocumentsColumns"], [189, 3, 1, "", "toDocumentsColumnsWithId"]], "sparknlp_jsl.training": [[190, 1, 1, "", "AnnotationToolJsonReader"], [190, 1, 1, "", "CantemistReader"], [190, 1, 1, "", "CodiEspReader"], [190, 1, 1, "", "REDatasetHelper"], [190, 1, 1, "", "SynonymAugmentationUMLS"], [190, 4, 1, "", "tf_graph"], [190, 4, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[190, 3, 1, "", "apply"], [190, 3, 1, "", "generateAssertionTrainSet"], [190, 3, 1, "", "generateConll"], [190, 3, 1, "", "generatePlainAssertionTrainSet"], [190, 3, 1, "", "getDataFrame"], [190, 3, 1, "", "new_java_array"], [190, 3, 1, "", "new_java_array_integer"], [190, 3, 1, "", "new_java_array_string"], [190, 3, 1, "", "new_java_obj"], [190, 3, 1, "", "readDataset"], [190, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.CantemistReader": [[190, 3, 1, "", "apply"], [190, 3, 1, "", "getDataFrame"], [190, 3, 1, "", "new_java_array"], [190, 3, 1, "", "new_java_array_integer"], [190, 3, 1, "", "new_java_array_string"], [190, 3, 1, "", "new_java_obj"], [190, 3, 1, "", "readDatasetTaskNer"], [190, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.CodiEspReader": [[190, 3, 1, "", "apply"], [190, 3, 1, "", "getDataFrame"], [190, 3, 1, "", "new_java_array"], [190, 3, 1, "", "new_java_array_integer"], [190, 3, 1, "", "new_java_array_string"], [190, 3, 1, "", "new_java_obj"], [190, 3, 1, "", "readDatasetTaskX"], [190, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.REDatasetHelper": [[190, 2, 1, "", "annotation_schema"], [190, 3, 1, "", "create_annotation_column"], [190, 2, 1, "", "data"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[190, 3, 1, "", "apply"], [190, 3, 1, "", "augmentCsv"], [190, 3, 1, "", "augmentDataFrame"], [190, 3, 1, "", "getDataFrame"], [190, 3, 1, "", "new_java_array"], [190, 3, 1, "", "new_java_array_integer"], [190, 3, 1, "", "new_java_array_string"], [190, 3, 1, "", "new_java_obj"], [190, 3, 1, "", "spark_version"]], "sparknlp_jsl.training_log_parser": [[191, 1, 1, "", "assertion_log_parser"], [191, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[191, 3, 1, "", "get_best_f1_scores"], [191, 3, 1, "", "get_charts"], [191, 3, 1, "", "loss_plot"], [191, 3, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[191, 3, 1, "", "evaluate"], [191, 3, 1, "", "evaluate_conll_file"], [191, 3, 1, "", "get_best_f1_scores"], [191, 3, 1, "", "get_charts"], [191, 3, 1, "", "loss_plot"], [191, 3, 1, "", "parse_logfile"]], "sparknlp_jsl.transpiler": [[192, 0, 0, "-", "builder"], [193, 0, 0, "-", "class_names"], [194, 0, 0, "-", "converter"], [195, 0, 0, "-", "externalSources"], [197, 0, 0, "-", "nlu_2_python"], [198, 0, 0, "-", "python_2_scala"], [199, 0, 0, "-", "source_loader"], [200, 0, 0, "-", "uploader"]], "sparknlp_jsl.transpiler.builder": [[192, 5, 1, "", "build_python_code"], [192, 5, 1, "", "build_scala_code"], [192, 5, 1, "", "compile_scala_code"], [192, 5, 1, "", "prepare_python_code"]], "sparknlp_jsl.transpiler.class_names": [[193, 1, 1, "", "ClassNames"]], "sparknlp_jsl.transpiler.class_names.ClassNames": [[193, 2, 1, "", "classes"], [193, 2, 1, "", "internal_classes"], [193, 2, 1, "", "openSource_classes"]], "sparknlp_jsl.transpiler.converter": [[194, 5, 1, "", "run_converter"]], "sparknlp_jsl.transpiler.nlu_2_python": [[197, 5, 1, "", "bucket"], [197, 5, 1, "", "convert_nlu_component_to_python"], [197, 5, 1, "", "is_component_finance"], [197, 5, 1, "", "is_component_legal"], [197, 5, 1, "", "is_component_medical"], [197, 5, 1, "", "is_component_ocr"], [197, 5, 1, "", "is_component_open_source"], [197, 5, 1, "", "is_component_pretrained"], [197, 4, 1, "", "medical_annotators_set"], [197, 5, 1, "", "nlu_component_to_spark_nlp_code"], [197, 4, 1, "", "open_source_annotator_set_final"], [197, 5, 1, "", "starts_with_finance"], [197, 5, 1, "", "starts_with_legal"], [197, 5, 1, "", "starts_with_medical"], [197, 5, 1, "", "to_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[198, 5, 1, "", "anonymize_script"], [198, 5, 1, "", "break_line_after_backslash"], [198, 5, 1, "", "convert"], [198, 5, 1, "", "convert_class_name"], [198, 5, 1, "", "convert_python_dict_to_scala_script"], [198, 5, 1, "", "find_key_values"], [198, 5, 1, "", "get_data_dict"], [198, 5, 1, "", "get_import_section"], [198, 5, 1, "", "prepare_scala_code"], [198, 5, 1, "", "remove_blank_lines"], [198, 5, 1, "", "restore_sensitive_values"], [198, 5, 1, "", "run_transpiler"]], "sparknlp_jsl.transpiler.source_loader": [[199, 5, 1, "", "get_python_code_from_md"], [199, 5, 1, "", "get_scala_code_from_md"], [199, 5, 1, "", "load_file_as_dict"], [199, 5, 1, "", "process_python_code"], [199, 5, 1, "", "update_md_file"], [199, 5, 1, "", "update_md_file_for_working_scala_code"]], "sparknlp_jsl.transpiler.uploader": [[200, 5, 1, "", "apply_method_to_all_md_files"], [200, 4, 1, "", "generated_code_failed"], [200, 4, 1, "", "generated_code_works"], [200, 4, 1, "", "python_code_failed"], [200, 4, 1, "", "results_list"], [200, 4, 1, "", "scala_code_works"], [200, 4, 1, "", "scala_generated"], [200, 5, 1, "", "upload_scala_code_in_md_file"]], "sparknlp_jsl.updateModels": [[201, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[201, 3, 1, "", "updateCacheModels"], [201, 3, 1, "", "updateModels"]], "sparknlp_jsl.util": [[202, 5, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[203, 0, 0, "-", "alab_utils"], [204, 0, 0, "-", "conll_parse"], [205, 0, 0, "-", "deidentification_utils"], [206, 0, 0, "-", "imports"], [208, 0, 0, "-", "java_helper"], [209, 0, 0, "-", "licensed_annotator_type"], [210, 0, 0, "-", "log_parse"], [211, 0, 0, "-", "ner_utils"], [212, 0, 0, "-", "ocr_nlp_processor"], [213, 0, 0, "-", "ocr_utils"], [214, 0, 0, "-", "risk_adjustment_utils"], [215, 0, 0, "-", "run_transpiled_code"], [216, 0, 0, "-", "training_log_parser_utils"], [217, 0, 0, "-", "visualner_annotations_parser"]], "sparknlp_jsl.utils.alab_utils": [[203, 4, 1, "", "document_assembler"], [203, 4, 1, "", "empty_df"], [203, 5, 1, "", "get_doc_assembler"], [203, 5, 1, "", "get_empty_df"], [203, 5, 1, "", "get_ner_df"], [203, 5, 1, "", "get_ner_sentence_borders"], [203, 5, 1, "", "get_nlp_pos_pipeline"], [203, 5, 1, "", "get_nlp_token_pipeline"], [203, 5, 1, "", "get_pos"], [203, 5, 1, "", "get_regex_tokenizer"], [203, 5, 1, "", "get_regular_tokenizer"], [203, 5, 1, "", "get_rel_df"], [203, 5, 1, "", "get_sent_detector"], [203, 5, 1, "", "get_sentence_pipeline"], [203, 5, 1, "", "get_single_task_conll"], [203, 5, 1, "", "get_token_df"], [203, 4, 1, "", "nlp_pos_pipeline"], [203, 4, 1, "", "nlp_token_pipeline"], [203, 4, 1, "", "pos"], [203, 4, 1, "", "pos_pipeline_initialized"], [203, 5, 1, "", "read_conll"], [203, 4, 1, "", "regex_tokenizer"], [203, 4, 1, "", "regular_tokenizer"], [203, 4, 1, "", "sentence_detector"], [203, 5, 1, "", "strip_json_entities"], [203, 4, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_utils": [[205, 5, 1, "", "dict_to_annotation_converter"], [205, 5, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[206, 5, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.java_helper": [[208, 5, 1, "", "parse_str_to_dict"]], "sparknlp_jsl.utils.licensed_annotator_type": [[209, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[209, 2, 1, "", "ASSERTION"], [209, 2, 1, "", "DISAMBIGUATION"], [209, 2, 1, "", "FEATURE_VECTOR"], [209, 2, 1, "", "KEYWORD"], [209, 2, 1, "", "SELECTOR"], [209, 2, 1, "", "SQL"], [209, 2, 1, "", "VECTOR_SIMILARITY_RANKINGS"]], "sparknlp_jsl.utils.ner_utils": [[211, 5, 1, "", "evaluate"], [211, 5, 1, "", "evaluate_conll_file"], [211, 5, 1, "", "get_charts"], [211, 5, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[212, 4, 1, "", "colors"], [212, 5, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[213, 4, 1, "", "colors"], [213, 4, 1, "", "colors_rgb"], [213, 5, 1, "", "draw_boxes_on_image_handwritten_region"], [213, 5, 1, "", "get_handwritten_regions"], [213, 4, 1, "", "label2color"], [213, 4, 1, "", "label2rgb"], [213, 4, 1, "", "pretrained_model"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[214, 1, 1, "", "RiskAdjustmentUtil"]], "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil": [[214, 3, 1, "", "HCC_from_ICD"], [214, 3, 1, "", "HCC_labels"], [214, 3, 1, "", "diff_between_HCCs"]], "sparknlp_jsl.utils.run_transpiled_code": [[215, 1, 1, "", "RunTranspiledCode"]], "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode": [[215, 3, 1, "", "build_scala_code"], [215, 3, 1, "", "compile_scala_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[216, 5, 1, "", "aggregate_entities"], [216, 5, 1, "", "calc_metrics"], [216, 5, 1, "", "count_chunks"], [216, 5, 1, "", "get_result"], [216, 5, 1, "", "is_chunk_end"], [216, 5, 1, "", "is_chunk_start"], [216, 5, 1, "", "split_tag"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[217, 5, 1, "", "convert_to_CONLL"], [217, 5, 1, "", "get_tokens"], [217, 5, 1, "", "pdfs_to_visualner_to_conll"], [217, 5, 1, "", "visualner_annotations_to_conll"], [217, 5, 1, "", "write_CONLL"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": [0, 1], "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217], "quick": 1, "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "alab": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 150, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218], "class": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 123, 124, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 147, 151, 153, 154, 157, 158, 160, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 201, 209, 214, 215], "annot": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "annotation_merg": 3, "assert": [4, 5, 6, 7, 8, 9, 10, 117, 118, 151, 152], "assertiondl": [4, 117, 151], "assertion_chunk_convert": 5, "exampl": [5, 35, 36, 39, 83, 119, 153, 205], "assertion_dl_reg": 6, "assertion_merg": 7, "contextual_assert": 8, "fewshot_assertion_sentence_convert": 9, "submodul": [10, 20, 28, 34, 38, 43, 52, 54, 59, 61, 62, 65, 67, 76, 78, 82, 84, 89, 91, 96, 102, 106, 112, 118, 121, 125, 128, 136, 141, 146, 149, 152, 155, 159, 162, 166, 171, 178, 182, 196, 207], "chunk2_token": 11, "chunker": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "assertion_filter": 12, "chunk_convert": 13, "chunk_key_phrase_extract": 14, "chunk_sentence_splitt": 15, "chunker_filter": 16, "chunkmapp": [17, 123, 157], "chunkmapper_filter": 18, "docmapp": [19, 124, 158], "mapper2_chunk": 21, "classif": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "document_log_classifi": 22, "document_ml_classifi": 23, "few_shot_assertion_classifi": 24, "few_shot_classifi": 25, "generic_log_reg_classifi": 26, "generic_svm_classifi": 27, "large_few_shot_classifi": 29, "medical_bert_for_sequence_classif": 30, "medical_bert_for_token_classifi": 31, "medical_distilbert_for_sequence_classif": 32, "context": [33, 34], "contextual_pars": 33, "deid": [35, 36, 37, 38, 39, 40, 41, 42, 119, 120, 121, 153, 154, 155], "deidentif": [35, 119, 153], "default": [35, 36, 119, 153], "dictionari": [35, 36, 119, 153], "deidentication_param": 36, "doccument_hashcod": 37, "light_deidentif": 39, "name_obfusc": 40, "reidentif": 41, "replac": 42, "disambigu": [43, 44], "ner_disambigu": 44, "doc2_chunk_intern": 45, "document_filterer_by_classifi": 46, "document_filterer_by_n": 47, "embed": [48, 49, 50, 51, 52], "average_embed": 48, "bert_sentence_embed": 49, "entity_chunk_embed": 50, "extractive_summar": 51, "er": [53, 54], "entity_ruler_intern": 53, "feature_assembl": 55, "filtering_param": 56, "flatten": 57, "generic_classifi": [58, 59], "handle_exception_param": 60, "subpackag": [61, 122, 127, 131, 143, 149, 156, 161, 165, 177, 196], "packag": [61, 149], "matcher": [62, 63], "text_matcher_intern": 63, "merg": [64, 65], "chunk_merg": 64, "multi_chunk2_doc": 66, "ner": [67, 68, 69, 70, 71, 72, 73, 144, 145, 146, 147, 178, 179, 180, 181], "iob_tagg": 68, "medical_n": 69, "ner_chunk": 70, "ner_converter_intern": 71, "ner_template_rend": 72, "zero_shot_n": [73, 147, 181], "normal": [74, 75, 76], "date_norm": 74, "drug_norm": 75, "qa": [77, 78, 79, 80], "beam_search_param": 77, "medical_qa": 79, "qa_ner_gener": [80, 142, 176], "rag": [81, 82, 83], "context_split_assembl": 81, "vectordb_post_processor": 83, "note": 83, "re": [84, 85, 86, 87, 88], "relation_extract": [85, 128, 129, 130, 162, 163, 164], "relation_extraction_dl": [86, 129, 163], "relation_ner_chunk_filt": 87, "zero_shot_relation_extract": [88, 130, 164], "regex": [89, 90], "regex_match": 90, "resolut": [91, 92, 93, 123, 124, 125, 126, 157, 158, 159, 160], "resolver_merg": 92, "sentence_entity_resolv": [93, 126, 160], "resolution2_chunk": 94, "router": 95, "seq2seq": [96, 97, 98, 99, 100], "medical_encoder_decod": 97, "medical_summar": 98, "medical_text_gener": 99, "text2sql": 100, "source_tracking_metadata_param": 101, "splitter": [102, 103], "internal_document_splitt": 103, "tf_graph_build": 104, "white_black_list_param": 105, "window": [106, 107], "windowed_sent": 107, "base": 108, "common": [109, 110, 111, 112], "annotator_approach_intern": 109, "annotator_model_intern": 110, "annotator_properties_intern": 111, "compat": 113, "custom_transform": 114, "deidentification_modul": 115, "eval": 116, "financ": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "chunk_classif": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "document_hashcod": [120, 154], "graph": [127, 128, 129, 130, 161, 162, 163, 164], "sequence_classif": [132, 133, 134, 135, 136, 166, 167, 168, 169, 170], "finance_bert_for_sequence_classif": 132, "finance_classifier_dl": 133, "finance_document_ml_classifi": 134, "finance_few_shot_classifi": 135, "sequence_gener": [137, 138, 139, 140, 141, 142, 171, 172, 173, 174, 175, 176], "finance_encoder_decod": 137, "finance_qa": 138, "finance_summar": 139, "finance_text_gener": 140, "token_classif": [143, 144, 145, 146, 147, 177, 178, 179, 180, 181], "finance_bert_for_token_classifi": 144, "finance_n": 145, "function": [148, 149, 150, 187, 192, 194, 197, 198, 199, 200, 202, 203, 205, 206, 208, 211, 212, 213, 216, 217], "input": 148, "paramet": [148, 160, 186], "output": 148, "attribut": [149, 190, 197, 200, 203, 212, 213], "intern": 150, "legal": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "legal_bert_for_sequence_classif": 167, "legal_classifier_dl": 168, "legal_document_ml_classifi": 169, "legal_few_shot_classifi": 170, "legal_encoder_decod": 172, "legal_qa": 173, "legal_summar": 174, "legal_text_gener": 175, "legal_bert_for_token_classifi": 179, "legal_n": 180, "llm": [182, 183], "llm_loader": 183, "modeltrac": 184, "pipeline_output_pars": 185, "pipeline_trac": 186, "return": [186, 205], "throw": 186, "pretrain": 187, "structured_deidentif": 188, "text_to_documents_column": 189, "train": 190, "training_log_pars": 191, "transpil": [192, 193, 194, 195, 196, 197, 198, 199, 200], "builder": 192, "class_nam": 193, "convert": 194, "externalsourc": 195, "nlu_2_python": 197, "python_2_scala": 198, "source_load": 199, "upload": 200, "updatemodel": 201, "util": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "alab_util": 203, "conll_pars": 204, "deidentification_util": 205, "import": 206, "java_help": 208, "licensed_annotator_typ": 209, "log_pars": 210, "ner_util": 211, "ocr_nlp_processor": 212, "ocr_util": 213, "risk_adjustment_util": 214, "run_transpiled_cod": 215, "training_log_parser_util": 216, "visualner_annotations_pars": 217, "api": 218, "refer": 218}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "Quick Start": [[1, "quick-start"]], "sparknlp_jsl.alab": [[2, "module-sparknlp_jsl.alab"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [60, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [83, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [157, "module-contents"], [158, "module-contents"], [160, "module-contents"], [163, "module-contents"], [164, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [60, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [83, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [157, "classes"], [158, "classes"], [160, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [193, "classes"], [201, "classes"], [209, "classes"], [214, "classes"], [215, "classes"]], "sparknlp_jsl.annotator.annotation_merger": [[3, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[4, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[5, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "Example:": [[5, "example"], [39, "example"], [39, "id13"], [83, "example"], [205, "example"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[6, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[7, "module-sparknlp_jsl.annotator.assertion.assertion_merger"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[8, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[9, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"]], "sparknlp_jsl.annotator.assertion": [[10, "module-sparknlp_jsl.annotator.assertion"]], "Submodules": [[10, "submodules"], [20, "submodules"], [28, "submodules"], [34, "submodules"], [38, "submodules"], [43, "submodules"], [52, "submodules"], [54, "submodules"], [59, "submodules"], [61, "submodules"], [62, "submodules"], [65, "submodules"], [67, "submodules"], [76, "submodules"], [78, "submodules"], [82, "submodules"], [84, "submodules"], [89, "submodules"], [91, "submodules"], [96, "submodules"], [102, "submodules"], [106, "submodules"], [112, "submodules"], [118, "submodules"], [121, "submodules"], [125, "submodules"], [128, "submodules"], [136, "submodules"], [141, "submodules"], [146, "submodules"], [149, "submodules"], [152, "submodules"], [155, "submodules"], [159, "submodules"], [162, "submodules"], [166, "submodules"], [171, "submodules"], [178, "submodules"], [182, "submodules"], [196, "submodules"], [207, "submodules"]], "sparknlp_jsl.annotator.chunk2_token": [[11, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[12, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[13, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[14, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[15, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[16, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[17, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[18, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[19, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[20, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[21, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[22, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[23, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[24, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[25, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[26, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[27, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[28, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[29, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[30, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[31, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[32, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[33, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[34, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[35, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Default and example dictionary": [[35, "default-and-example-dictionary"], [35, "id8"], [36, "default-and-example-dictionary"], [119, "default-and-example-dictionary"], [119, "id13"], [153, "default-and-example-dictionary"], [153, "id13"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[36, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[37, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[38, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.light_deIdentification": [[39, "module-sparknlp_jsl.annotator.deid.light_deIdentification"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[40, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[41, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[42, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[43, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[44, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[45, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[46, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[47, "module-sparknlp_jsl.annotator.document_filterer_by_ner"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[48, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[49, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[50, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[51, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "sparknlp_jsl.annotator.embeddings": [[52, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[53, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "sparknlp_jsl.annotator.er": [[54, "module-sparknlp_jsl.annotator.er"]], "sparknlp_jsl.annotator.feature_assembler": [[55, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.filtering_params": [[56, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.flattener": [[57, "module-sparknlp_jsl.annotator.flattener"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[58, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[59, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator.handle_exception_params": [[60, "module-sparknlp_jsl.annotator.handle_exception_params"]], "sparknlp_jsl.annotator": [[61, "module-sparknlp_jsl.annotator"]], "Subpackages": [[61, "subpackages"], [122, "subpackages"], [127, "subpackages"], [131, "subpackages"], [143, "subpackages"], [149, "subpackages"], [156, "subpackages"], [161, "subpackages"], [165, "subpackages"], [177, "subpackages"], [196, "subpackages"]], "Package Contents": [[61, "package-contents"], [149, "package-contents"]], "sparknlp_jsl.annotator.matcher": [[62, "module-sparknlp_jsl.annotator.matcher"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[63, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[64, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[65, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[66, "module-sparknlp_jsl.annotator.multi_chunk2_doc"]], "sparknlp_jsl.annotator.ner": [[67, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[68, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[69, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[70, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[71, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[72, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[73, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[74, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[75, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[76, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[77, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[78, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[79, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[80, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[81, "module-sparknlp_jsl.annotator.rag.context_split_assembler"]], "sparknlp_jsl.annotator.rag": [[82, "module-sparknlp_jsl.annotator.rag"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[83, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"]], "Notes:": [[83, "notes"], [83, "id1"]], "sparknlp_jsl.annotator.re": [[84, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[85, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[86, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[87, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[88, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.regex": [[89, "module-sparknlp_jsl.annotator.regex"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[90, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "sparknlp_jsl.annotator.resolution": [[91, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[92, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[93, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[94, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[95, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[96, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[97, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[98, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[99, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[100, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[101, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.splitter": [[102, "module-sparknlp_jsl.annotator.splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[103, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "sparknlp_jsl.annotator.tf_graph_builder": [[104, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.white_black_list_params": [[105, "module-sparknlp_jsl.annotator.white_black_list_params"]], "sparknlp_jsl.annotator.windowed": [[106, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[107, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[108, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[109, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[110, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[111, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[112, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[113, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[114, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[115, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[116, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[117, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[118, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[119, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[120, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[121, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[122, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[123, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[124, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[125, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[126, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[127, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[128, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[129, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[130, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[131, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[132, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[133, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[134, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[135, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[136, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[137, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[138, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[139, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[140, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[141, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[142, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[143, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[144, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[145, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[146, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[147, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[148, "module-sparknlp_jsl.functions"]], "Functions": [[148, "functions"], [149, "functions"], [150, "functions"], [187, "functions"], [192, "functions"], [194, "functions"], [197, "functions"], [198, "functions"], [199, "functions"], [200, "functions"], [202, "functions"], [203, "functions"], [205, "functions"], [206, "functions"], [208, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [216, "functions"], [217, "functions"]], "INPUT PARAMETERS": [[148, "input-parameters"], [148, "id1"], [148, "id3"], [148, "id5"], [148, "id7"], [148, "id9"], [148, "id11"], [148, "id13"], [148, "id15"], [148, "id17"], [148, "id19"], [148, "id21"], [148, "id23"], [148, "id25"], [148, "id27"], [148, "id29"], [148, "id31"], [148, "id33"], [148, "id35"], [148, "id37"], [148, "id39"], [148, "id41"], [148, "id43"], [148, "id45"], [148, "id47"]], "OUTPUT PARAMETERS": [[148, "output-parameters"], [148, "id2"], [148, "id4"], [148, "id6"], [148, "id8"], [148, "id10"], [148, "id12"], [148, "id14"], [148, "id16"], [148, "id18"], [148, "id20"], [148, "id22"], [148, "id24"], [148, "id26"], [148, "id28"], [148, "id30"], [148, "id32"], [148, "id34"], [148, "id36"], [148, "id38"], [148, "id40"], [148, "id42"], [148, "id44"], [148, "id46"], [148, "id48"]], "sparknlp_jsl": [[149, "module-sparknlp_jsl"]], "Attributes": [[149, "attributes"], [190, "attributes"], [197, "attributes"], [200, "attributes"], [203, "attributes"], [212, "attributes"], [213, "attributes"]], "sparknlp_jsl.internal": [[150, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[151, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[152, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[153, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[154, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[155, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[156, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[157, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[158, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[159, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[160, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "Parameters:": [[160, "parameters"], [186, "parameters"], [186, "id1"], [186, "id2"]], "sparknlp_jsl.legal.graph": [[161, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[162, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[163, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[164, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[165, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[166, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[167, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[168, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[169, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[170, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[171, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[172, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[173, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[174, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[175, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[176, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[177, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[178, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[179, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[180, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[181, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.llm": [[182, "module-sparknlp_jsl.llm"]], "sparknlp_jsl.llm.llm_loader": [[183, "module-sparknlp_jsl.llm.llm_loader"]], "sparknlp_jsl.modelTracer": [[184, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.pipeline_output_parser": [[185, "module-sparknlp_jsl.pipeline_output_parser"]], "sparknlp_jsl.pipeline_tracer": [[186, "module-sparknlp_jsl.pipeline_tracer"]], "Returns:": [[186, "returns"], [205, "returns"]], "Throws:": [[186, "throws"]], "sparknlp_jsl.pretrained": [[187, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[188, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[189, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[190, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[191, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.transpiler.builder": [[192, "module-sparknlp_jsl.transpiler.builder"]], "sparknlp_jsl.transpiler.class_names": [[193, "module-sparknlp_jsl.transpiler.class_names"]], "sparknlp_jsl.transpiler.converter": [[194, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalSources": [[195, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[196, "module-sparknlp_jsl.transpiler"]], "sparknlp_jsl.transpiler.nlu_2_python": [[197, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[198, "module-sparknlp_jsl.transpiler.python_2_scala"]], "sparknlp_jsl.transpiler.source_loader": [[199, "module-sparknlp_jsl.transpiler.source_loader"]], "sparknlp_jsl.transpiler.uploader": [[200, "module-sparknlp_jsl.transpiler.uploader"]], "sparknlp_jsl.updateModels": [[201, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[202, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[203, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[204, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[205, "module-sparknlp_jsl.utils.deidentification_utils"]], "sparknlp_jsl.utils.imports": [[206, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[207, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.java_helper": [[208, "module-sparknlp_jsl.utils.java_helper"]], "sparknlp_jsl.utils.licensed_annotator_type": [[209, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[210, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[211, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[212, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[213, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[214, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "sparknlp_jsl.utils.run_transpiled_code": [[215, "module-sparknlp_jsl.utils.run_transpiled_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[216, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[217, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "API Reference": [[218, "api-reference"]], "Modules": [[218, "modules"]]}, "indexentries": {"annotationlab (class in sparknlp_jsl.alab)": [[2, "sparknlp_jsl.alab.AnnotationLab"]], "base_url (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.base_url"]], "client_id (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.client_id"]], "client_secret (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.client_secret"]], "cookies (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.cookies"]], "create_project() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_conll_data_from_visualner() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_conll_data_from_visualner"]], "get_project_config() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "http_success_codes (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.http_success_codes"]], "module": [[2, "module-sparknlp_jsl.alab"], [3, "module-sparknlp_jsl.annotator.annotation_merger"], [4, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [5, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [6, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [7, "module-sparknlp_jsl.annotator.assertion.assertion_merger"], [8, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"], [9, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"], [10, "module-sparknlp_jsl.annotator.assertion"], [11, "module-sparknlp_jsl.annotator.chunk2_token"], [12, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [13, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [14, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [15, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [16, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [17, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [18, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [19, "module-sparknlp_jsl.annotator.chunker.docmapper"], [20, "module-sparknlp_jsl.annotator.chunker"], [21, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"], [22, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [23, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [24, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"], [25, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"], [26, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [27, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [28, "module-sparknlp_jsl.annotator.classification"], [29, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"], [30, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [31, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [32, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [33, "module-sparknlp_jsl.annotator.context.contextual_parser"], [34, "module-sparknlp_jsl.annotator.context"], [35, "module-sparknlp_jsl.annotator.deid.deIdentification"], [36, "module-sparknlp_jsl.annotator.deid.deidentication_params"], [37, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [38, "module-sparknlp_jsl.annotator.deid"], [39, "module-sparknlp_jsl.annotator.deid.light_deIdentification"], [40, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [41, "module-sparknlp_jsl.annotator.deid.reIdentification"], [42, "module-sparknlp_jsl.annotator.deid.replacer"], [43, "module-sparknlp_jsl.annotator.disambiguation"], [44, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [45, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [46, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"], [47, "module-sparknlp_jsl.annotator.document_filterer_by_ner"], [48, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [49, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [50, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [51, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"], [52, "module-sparknlp_jsl.annotator.embeddings"], [53, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"], [54, "module-sparknlp_jsl.annotator.er"], [55, "module-sparknlp_jsl.annotator.feature_assembler"], [56, "module-sparknlp_jsl.annotator.filtering_params"], [57, "module-sparknlp_jsl.annotator.flattener"], [58, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [59, "module-sparknlp_jsl.annotator.generic_classifier"], [60, "module-sparknlp_jsl.annotator.handle_exception_params"], [61, "module-sparknlp_jsl.annotator"], [62, "module-sparknlp_jsl.annotator.matcher"], [63, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"], [64, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [65, "module-sparknlp_jsl.annotator.merge"], [66, "module-sparknlp_jsl.annotator.multi_chunk2_doc"], [67, "module-sparknlp_jsl.annotator.ner"], [68, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [69, "module-sparknlp_jsl.annotator.ner.medical_ner"], [70, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [71, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [72, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [73, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [74, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [75, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [76, "module-sparknlp_jsl.annotator.normalizer"], [77, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [78, "module-sparknlp_jsl.annotator.qa"], [79, "module-sparknlp_jsl.annotator.qa.medical_qa"], [80, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [81, "module-sparknlp_jsl.annotator.rag.context_split_assembler"], [82, "module-sparknlp_jsl.annotator.rag"], [83, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"], [84, "module-sparknlp_jsl.annotator.re"], [85, "module-sparknlp_jsl.annotator.re.relation_extraction"], [86, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [87, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [88, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [89, "module-sparknlp_jsl.annotator.regex"], [90, "module-sparknlp_jsl.annotator.regex.regex_matcher"], [91, "module-sparknlp_jsl.annotator.resolution"], [92, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [93, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [94, "module-sparknlp_jsl.annotator.resolution2_chunk"], [95, "module-sparknlp_jsl.annotator.router"], [96, "module-sparknlp_jsl.annotator.seq2seq"], [97, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [98, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [99, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [100, "module-sparknlp_jsl.annotator.seq2seq.text2sql"], [101, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [102, "module-sparknlp_jsl.annotator.splitter"], [103, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"], [104, "module-sparknlp_jsl.annotator.tf_graph_builder"], [105, "module-sparknlp_jsl.annotator.white_black_list_params"], [106, "module-sparknlp_jsl.annotator.windowed"], [107, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [108, "module-sparknlp_jsl.base"], [109, "module-sparknlp_jsl.common.annotator_approach_internal"], [110, "module-sparknlp_jsl.common.annotator_model_internal"], [111, "module-sparknlp_jsl.common.annotator_properties_internal"], [112, "module-sparknlp_jsl.common"], [113, "module-sparknlp_jsl.compatibility"], [114, "module-sparknlp_jsl.custom_transformer"], [115, "module-sparknlp_jsl.deidentification_module"], [116, "module-sparknlp_jsl.eval"], [117, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [118, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [119, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [120, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [121, "module-sparknlp_jsl.finance.chunk_classification.deid"], [122, "module-sparknlp_jsl.finance.chunk_classification"], [123, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [124, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [125, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [126, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [127, "module-sparknlp_jsl.finance.graph"], [128, "module-sparknlp_jsl.finance.graph.relation_extraction"], [129, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [130, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [131, "module-sparknlp_jsl.finance"], [132, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [133, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [134, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [135, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"], [136, "module-sparknlp_jsl.finance.sequence_classification"], [137, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [138, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [139, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [140, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [141, "module-sparknlp_jsl.finance.sequence_generation"], [142, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [143, "module-sparknlp_jsl.finance.token_classification"], [144, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [145, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [146, "module-sparknlp_jsl.finance.token_classification.ner"], [147, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [148, "module-sparknlp_jsl.functions"], [149, "module-sparknlp_jsl"], [150, "module-sparknlp_jsl.internal"], [151, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [152, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [153, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [154, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [155, "module-sparknlp_jsl.legal.chunk_classification.deid"], [156, "module-sparknlp_jsl.legal.chunk_classification"], [157, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [158, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [159, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [160, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [161, "module-sparknlp_jsl.legal.graph"], [162, "module-sparknlp_jsl.legal.graph.relation_extraction"], [163, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [164, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [165, "module-sparknlp_jsl.legal"], [166, "module-sparknlp_jsl.legal.sequence_classification"], [167, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [168, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [169, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [170, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"], [171, "module-sparknlp_jsl.legal.sequence_generation"], [172, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [173, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [174, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [175, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [176, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [177, "module-sparknlp_jsl.legal.token_classification"], [178, "module-sparknlp_jsl.legal.token_classification.ner"], [179, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [180, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [181, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [182, "module-sparknlp_jsl.llm"], [183, "module-sparknlp_jsl.llm.llm_loader"], [184, "module-sparknlp_jsl.modelTracer"], [185, "module-sparknlp_jsl.pipeline_output_parser"], [186, "module-sparknlp_jsl.pipeline_tracer"], [187, "module-sparknlp_jsl.pretrained"], [188, "module-sparknlp_jsl.structured_deidentification"], [189, "module-sparknlp_jsl.text_to_documents_columns"], [190, "module-sparknlp_jsl.training"], [191, "module-sparknlp_jsl.training_log_parser"], [192, "module-sparknlp_jsl.transpiler.builder"], [193, "module-sparknlp_jsl.transpiler.class_names"], [194, "module-sparknlp_jsl.transpiler.converter"], [195, "module-sparknlp_jsl.transpiler.externalSources"], [196, "module-sparknlp_jsl.transpiler"], [197, "module-sparknlp_jsl.transpiler.nlu_2_python"], [198, "module-sparknlp_jsl.transpiler.python_2_scala"], [199, "module-sparknlp_jsl.transpiler.source_loader"], [200, "module-sparknlp_jsl.transpiler.uploader"], [201, "module-sparknlp_jsl.updateModels"], [202, "module-sparknlp_jsl.util"], [203, "module-sparknlp_jsl.utils.alab_utils"], [204, "module-sparknlp_jsl.utils.conll_parse"], [205, "module-sparknlp_jsl.utils.deidentification_utils"], [206, "module-sparknlp_jsl.utils.imports"], [207, "module-sparknlp_jsl.utils"], [208, "module-sparknlp_jsl.utils.java_helper"], [209, "module-sparknlp_jsl.utils.licensed_annotator_type"], [210, "module-sparknlp_jsl.utils.log_parse"], [211, "module-sparknlp_jsl.utils.ner_utils"], [212, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [213, "module-sparknlp_jsl.utils.ocr_utils"], [214, "module-sparknlp_jsl.utils.risk_adjustment_utils"], [215, "module-sparknlp_jsl.utils.run_transpiled_code"], [216, "module-sparknlp_jsl.utils.training_log_parser_utils"], [217, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "password (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.password"]], "review_annotations() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[2, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[2, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "username (annotationlab attribute)": [[2, "sparknlp_jsl.alab.AnnotationLab.username"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "clear() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.clear"]], "copy() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.copy"]], "explainparam() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.explainParam"]], "explainparams() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.explainParams"]], "extractparammap() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.extractParamMap"]], "getinputcols() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getInputCols"]], "getlazyannotator() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getLazyAnnotator"]], "getordefault() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getOrDefault"]], "getoutputcol() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getOutputCol"]], "getparam() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getParam"]], "getparamvalue() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getParamValue"]], "getter_attrs (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getter_attrs"]], "hasdefault() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.hasDefault"]], "hasparam() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.hasParam"]], "inputannotatortypes (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputcols (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputCols"]], "inputcolsvalidation() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputColsValidation"]], "inputtype (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "isdefined() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.isDefined"]], "isset() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.isSet"]], "lazyannotator (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.lazyAnnotator"]], "load() (annotationmerger class method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.load"]], "name (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "optionalinputannotatortypes (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "outputcol (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputCol"]], "read() (annotationmerger class method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.read"]], "save() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.save"]], "set() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.set"]], "setforceinputtypevalidation() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setForceInputTypeValidation"]], "setinputcols() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "setlazyannotator() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setLazyAnnotator"]], "setoutputcol() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setOutputCol"]], "setparamvalue() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setParamValue"]], "setparams() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setParams"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[3, "module-sparknlp_jsl.annotator.annotation_merger"]], "transform() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.transform"]], "write() (annotationmerger method)": [[3, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.write"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.batchSize"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.classes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.classes"]], "clear() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.clear"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.clear"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.clear"]], "clear() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.clear"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.clear"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.clear"]], "configprotobytes (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.configProtoBytes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.configProtoBytes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "copy() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.copy"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.copy"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.copy"]], "copy() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.copy"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.copy"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.copy"]], "datasetinfo (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.datasetInfo"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.datasetInfo"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.datasetInfo"]], "datasetinfo (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.datasetInfo"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.datasetInfo"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.datasetInfo"]], "doexceptionhandling (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"]], "doexceptionhandling (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.doExceptionHandling"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.doExceptionHandling"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.doExceptionHandling"]], "dropout (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.dropout"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.endCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.endCol"]], "engine (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.engine"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.engine"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.engine"]], "entityassertioncasesensitive (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"]], "epochs (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.epochs"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.epochs"]], "explainparam() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.explainParam"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParam"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParam"]], "explainparam() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.explainParam"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParam"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParam"]], "explainparams() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.explainParams"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParams"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParams"]], "explainparams() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.explainParams"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParams"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParams"]], "extractparammap() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.extractParamMap"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.extractParamMap"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.extractParamMap"]], "extractparammap() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.extractParamMap"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.extractParamMap"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.extractParamMap"]], "fit() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.fit"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.fit"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.fit"]], "fitmultiple() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.fitMultiple"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.fitMultiple"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.fitMultiple"]], "getengine() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getEngine"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getEngine"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getEngine"]], "getentityassertion() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getEntityAssertion"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getEntityAssertion"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getEntityAssertion"]], "getinputcols() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getInputCols"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getInputCols"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getInputCols"]], "getinputcols() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getInputCols"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getInputCols"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getInputCols"]], "getlazyannotator() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"]], "getlazyannotator() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"]], "getordefault() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getOrDefault"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOrDefault"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOrDefault"]], "getordefault() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getOrDefault"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getOrDefault"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getOrDefault"]], "getoutputcol() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getOutputCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOutputCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOutputCol"]], "getoutputcol() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getOutputCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getOutputCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getOutputCol"]], "getparam() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getParam"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParam"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParam"]], "getparam() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getParam"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getParam"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getParam"]], "getparamvalue() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getParamValue"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParamValue"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParamValue"]], "getparamvalue() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getParamValue"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getParamValue"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getParamValue"]], "getreplacelabels() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getReplaceLabels"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getReplaceLabels"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getReplaceLabels"]], "getstorageref() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getStorageRef"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getStorageRef"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getStorageRef"]], "getter_attrs (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getter_attrs"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getter_attrs"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getter_attrs"]], "getter_attrs (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getter_attrs"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getter_attrs"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getter_attrs"]], "graphfile (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFile"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFolder"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "hasdefault() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.hasDefault"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasDefault"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasDefault"]], "hasdefault() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.hasDefault"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.hasDefault"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.hasDefault"]], "hasparam() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.hasParam"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasParam"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasParam"]], "hasparam() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.hasParam"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.hasParam"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.hasParam"]], "includeconfidence (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.includeConfidence"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.includeConfidence"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "inputcols (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputCols"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputCols"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputCols"]], "inputcols (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputCols"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputCols"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputCols"]], "inputcolsvalidation() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputColsValidation"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputColsValidation"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputColsValidation"]], "inputcolsvalidation() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputColsValidation"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputColsValidation"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputColsValidation"]], "isdefined() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.isDefined"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.isDefined"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.isDefined"]], "isdefined() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.isDefined"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.isDefined"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.isDefined"]], "isset() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.isSet"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.isSet"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.isSet"]], "isset() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.isSet"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.isSet"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.isSet"]], "label (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.label"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.label"]], "lazyannotator (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"]], "lazyannotator (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.lazyAnnotator"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.lazyAnnotator"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.lazyAnnotator"]], "learningrate (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.learningRate"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.learningRate"]], "load() (assertiondlapproach class method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.load"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.load"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.load"]], "load() (assertiondlmodel class method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.load"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.load"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.load"]], "maxsentlen (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.maxSentLen"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.maxSentLen"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "optionalinputannotatortypes (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputcol (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputCol"]], "outputcol (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.outputCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.outputCol"]], "outputlogspath (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputLogsPath"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "read() (assertiondlapproach class method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.read"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.read"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.read"]], "read() (assertiondlmodel class method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.read"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.read"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.read"]], "save() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.save"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.save"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.save"]], "save() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.save"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.save"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.save"]], "scopewindow (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.scopeWindow"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.scopeWindow"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "set() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.set"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.set"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.set"]], "set() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.set"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.set"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.set"]], "setbatchsize() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBatchSize"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdatasetinfo() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"]], "setdatasetinfo() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setDatasetInfo"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setDatasetInfo"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setDatasetInfo"]], "setdoexceptionhandling() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setDoExceptionHandling"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setDoExceptionHandling"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setDoExceptionHandling"]], "setdropout() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDropout"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEndCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setentityassertion() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertion"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertion"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertion"]], "setentityassertioncasesensitive() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"]], "setepochs() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEpochs"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setforceinputtypevalidation() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"]], "setgraphfile() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFile"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFolder"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setinputcols() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setInputCols"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setInputCols"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setInputCols"]], "setinputcols() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setInputCols"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setInputCols"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setInputCols"]], "setlabelcol() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLabelCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlazyannotator() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"]], "setlazyannotator() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"]], "setlearningrate() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLearningRate"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputcol() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputCol"]], "setoutputcol() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setOutputCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setOutputCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setOutputCol"]], "setoutputlogspath() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setparamvalue() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setParamValue"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setParamValue"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setParamValue"]], "setparamvalue() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setParamValue"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setParamValue"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setParamValue"]], "setparams() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setParams"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setParams"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setParams"]], "setreplacelabels() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setReplaceLabels"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setReplaceLabels"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setReplaceLabels"]], "setscopewindow() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setScopeWindow"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setScopeWindow"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setStartCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "setstorageref() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setStorageRef"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setStorageRef"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setStorageRef"]], "settestdataset() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setTestDataset"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setValidationSplit"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setVerbose"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "skiplpinputcolsvalidation (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[4, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.startCol"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.startCol"]], "storageref (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.storageRef"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.storageRef"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.storageRef"]], "targetnerlabels (assertiondlmodel attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.targetNerLabels"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.testDataset"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.testDataset"]], "transform() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.transform"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.transform"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.transform"]], "validationsplit (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.validationSplit"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.verbose"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.verbose"]], "write() (assertiondlapproach method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.write"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.write"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.write"]], "write() (assertiondlmodel method)": [[4, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.write"], [117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.write"], [151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.write"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "clear() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.clear"]], "copy() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.copy"]], "explainparam() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.explainParam"]], "explainparams() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.explainParams"]], "extractparammap() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.extractParamMap"]], "getordefault() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getOrDefault"]], "getparam() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getParam"]], "getparamvalue() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getParamValue"]], "getter_attrs (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getter_attrs"]], "hasdefault() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.hasDefault"]], "hasparam() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.hasParam"]], "inputannotatortypes (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "isdefined() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.isDefined"]], "isset() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.isSet"]], "load() (assertionchunkconverter class method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.load"]], "name (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "read() (assertionchunkconverter class method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.read"]], "save() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.save"]], "set() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.set"]], "setchunkbegincol() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setmetadatafields() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setMetadataFields"]], "setoutputcol() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparamvalue() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParamValue"]], "setparams() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[5, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "transform() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.transform"]], "write() (assertionchunkconverter method)": [[5, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.write"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "clear() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.clear"]], "clear() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.clear"]], "copy() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.copy"]], "copy() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.copy"]], "enetparam (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "explainparam() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.explainParam"]], "explainparam() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.explainParam"]], "explainparams() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.explainParams"]], "explainparams() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.explainParams"]], "extractparammap() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.extractParamMap"]], "extractparammap() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.extractParamMap"]], "fit() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.fit"]], "fitmultiple() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.fitMultiple"]], "getinputcols() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getInputCols"]], "getinputcols() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getInputCols"]], "getlazyannotator() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getLazyAnnotator"]], "getlazyannotator() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getLazyAnnotator"]], "getordefault() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getOrDefault"]], "getordefault() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getOrDefault"]], "getoutputcol() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getOutputCol"]], "getoutputcol() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getOutputCol"]], "getparam() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getParam"]], "getparam() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getParam"]], "getparamvalue() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getParamValue"]], "getparamvalue() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getParamValue"]], "getstorageref() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getStorageRef"]], "getter_attrs (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getter_attrs"]], "getter_attrs (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getter_attrs"]], "hasdefault() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.hasDefault"]], "hasdefault() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.hasDefault"]], "hasparam() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.hasParam"]], "hasparam() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.hasParam"]], "inputannotatortypes (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "inputcols (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputCols"]], "inputcols (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputCols"]], "inputcolsvalidation() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputColsValidation"]], "inputcolsvalidation() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputColsValidation"]], "isdefined() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.isDefined"]], "isdefined() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.isDefined"]], "isset() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.isSet"]], "isset() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.isSet"]], "label (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "lazyannotator (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.lazyAnnotator"]], "lazyannotator (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.lazyAnnotator"]], "load() (assertionlogregapproach class method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.load"]], "load() (assertionlogregmodel class method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.load"]], "maxiter (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "optionalinputannotatortypes (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.optionalInputAnnotatorTypes"]], "outputannotatortype (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "outputcol (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputCol"]], "outputcol (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputCol"]], "pretrained() (assertionlogregmodel static method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "read() (assertionlogregapproach class method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.read"]], "read() (assertionlogregmodel class method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.read"]], "regparam (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "save() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.save"]], "save() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.save"]], "set() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.set"]], "set() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.set"]], "setafter() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setforceinputtypevalidation() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setForceInputTypeValidation"]], "setinputcols() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setInputCols"]], "setinputcols() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setInputCols"]], "setlabelcol() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setlazyannotator() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLazyAnnotator"]], "setlazyannotator() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setLazyAnnotator"]], "setmaxiter() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setoutputcol() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setOutputCol"]], "setoutputcol() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setOutputCol"]], "setparamvalue() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setParamValue"]], "setparamvalue() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setParamValue"]], "setparams() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setParams"]], "setreg() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "setstorageref() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setStorageRef"]], "settargetnerlabels() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "skiplpinputcolsvalidation (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[6, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "storageref (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.storageRef"]], "targetnerlabels (assertionlogregapproach attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "transform() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.transform"]], "write() (assertionlogregapproach method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.write"]], "write() (assertionlogregmodel method)": [[6, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.write"]], "assertionmerger (class in sparknlp_jsl.annotator.assertion.assertion_merger)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger"]], "applyfilterbeforemerge (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.applyFilterBeforeMerge"]], "assertionsourceprecedence (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.assertionSourcePrecedence"]], "blacklist (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.blackList"]], "casesensitive (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.caseSensitive"]], "clear() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.clear"]], "copy() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.copy"]], "defaultconfidence (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.defaultConfidence"]], "explainparam() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.explainParam"]], "explainparams() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.explainParams"]], "extractparammap() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.extractParamMap"]], "getinputcols() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getInputCols"]], "getlazyannotator() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getLazyAnnotator"]], "getordefault() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getOrDefault"]], "getoutputcol() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getOutputCol"]], "getparam() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getParam"]], "getparamvalue() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getParamValue"]], "getter_attrs (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getter_attrs"]], "hasdefault() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.hasDefault"]], "hasparam() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.hasParam"]], "inputannotatortypes (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputAnnotatorTypes"]], "inputcols (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputCols"]], "inputcolsvalidation() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputColsValidation"]], "isdefined() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.isDefined"]], "isset() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.isSet"]], "lazyannotator (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.lazyAnnotator"]], "load() (assertionmerger class method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.load"]], "mergeoverlapping (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.mergeOverlapping"]], "name (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.name"]], "optionalinputannotatortypes (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.optionalInputAnnotatorTypes"]], "orderingfeatures (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.orderingFeatures"]], "outputannotatortype (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.outputAnnotatorType"]], "outputcol (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.outputCol"]], "read() (assertionmerger class method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.read"]], "save() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.save"]], "selectionstrategy (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.selectionStrategy"]], "set() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.set"]], "setapplyfilterbeforemerge() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setApplyFilterBeforeMerge"]], "setassertionsourceprecedence() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setAssertionSourcePrecedence"]], "setassertionsconfidence() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setAssertionsConfidence"]], "setblacklist() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setBlackList"]], "setcasesensitive() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setCaseSensitive"]], "setdefaultconfidence() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setDefaultConfidence"]], "setdenylist() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setDenyList"]], "setforceinputtypevalidation() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setForceInputTypeValidation"]], "setinputcols() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setInputCols"]], "setlazyannotator() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setLazyAnnotator"]], "setmergeoverlapping() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setMergeOverlapping"]], "setorderingfeatures() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setOrderingFeatures"]], "setoutputcol() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setOutputCol"]], "setparamvalue() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setParamValue"]], "setparams() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setParams"]], "setselectionstrategy() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setSelectionStrategy"]], "setsortbybegin() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setSortByBegin"]], "setwhitelist() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setWhiteList"]], "skiplpinputcolsvalidation (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.skipLPInputColsValidation"]], "sortbybegin (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.sortByBegin"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[7, "module-sparknlp_jsl.annotator.assertion.assertion_merger"]], "transform() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.transform"]], "whitelist (assertionmerger attribute)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.whiteList"]], "write() (assertionmerger method)": [[7, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.write"]], "contextualassertion (class in sparknlp_jsl.annotator.assertion.contextual_assertion)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion"]], "addprefixkeywords() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.addPrefixKeywords"]], "addsuffixkeywords() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.addSuffixKeywords"]], "assertion (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.assertion"]], "casesensitive (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.caseSensitive"]], "clear() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.clear"]], "confidencecalculationdirection (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.confidenceCalculationDirection"]], "copy() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.copy"]], "doexceptionhandling (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.doExceptionHandling"]], "explainparam() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.explainParam"]], "explainparams() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.explainParams"]], "extractparammap() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.extractParamMap"]], "getinputcols() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getInputCols"]], "getlazyannotator() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getLazyAnnotator"]], "getordefault() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getOrDefault"]], "getoutputcol() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getOutputCol"]], "getparam() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getParam"]], "getparamvalue() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getParamValue"]], "getter_attrs (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getter_attrs"]], "hasdefault() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.hasDefault"]], "hasparam() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.hasParam"]], "includechunktoscope (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.includeChunkToScope"]], "inputannotatortypes (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputAnnotatorTypes"]], "inputcols (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputCols"]], "inputcolsvalidation() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputColsValidation"]], "isdefined() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.isDefined"]], "isset() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.isSet"]], "lazyannotator (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.lazyAnnotator"]], "load() (contextualassertion class method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.load"]], "name (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.name"]], "optionalinputannotatortypes (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.outputAnnotatorType"]], "outputcol (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.outputCol"]], "prefixandsuffixmatch (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.prefixAndSuffixMatch"]], "pretrained() (contextualassertion static method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.pretrained"]], "read() (contextualassertion class method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.read"]], "save() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.save"]], "scopewindow (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.scopeWindow"]], "scopewindowdelimiters (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.scopeWindowDelimiters"]], "set() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.set"]], "setassertion() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setAssertion"]], "setcasesensitive() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setCaseSensitive"]], "setconfidencecalculationdirection() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setConfidenceCalculationDirection"]], "setdoexceptionhandling() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setDoExceptionHandling"]], "setexceptionkeywords() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setExceptionKeywords"]], "setexceptionregexpatterns() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setExceptionRegexPatterns"]], "setforceinputtypevalidation() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setForceInputTypeValidation"]], "setincludechunktoscope() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setIncludeChunkToScope"]], "setinputcols() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setInputCols"]], "setlazyannotator() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setLazyAnnotator"]], "setoutputcol() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setOutputCol"]], "setparamvalue() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setParamValue"]], "setparams() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setParams"]], "setprefixandsuffixmatch() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixAndSuffixMatch"]], "setprefixkeywords() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixKeywords"]], "setprefixregexpatterns() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixRegexPatterns"]], "setscopewindow() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setScopeWindow"]], "setscopewindowdelimiters() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setScopeWindowDelimiters"]], "setsuffixkeywords() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setSuffixKeywords"]], "setsuffixregexpatterns() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setSuffixRegexPatterns"]], "skiplpinputcolsvalidation (contextualassertion attribute)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[8, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"]], "transform() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.transform"]], "write() (contextualassertion method)": [[8, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.write"]], "fewshotassertionsentenceconverter (class in sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter"]], "clear() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.clear"]], "copy() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.copy"]], "explainparam() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.explainParam"]], "explainparams() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.explainParams"]], "extractparammap() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.extractParamMap"]], "getordefault() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getOrDefault"]], "getparam() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getParam"]], "getparamvalue() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getParamValue"]], "getter_attrs (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getter_attrs"]], "hasdefault() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.hasDefault"]], "hasparam() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.hasParam"]], "inputannotatortypes (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.inputAnnotatorTypes"]], "inputcols (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.inputCols"]], "isdefined() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.isDefined"]], "isset() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.isSet"]], "load() (fewshotassertionsentenceconverter class method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.load"]], "name (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.name"]], "outputannotatortype (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.outputAnnotatorType"]], "outputcol (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.outputCol"]], "read() (fewshotassertionsentenceconverter class method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.read"]], "save() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.save"]], "scopewindow (fewshotassertionsentenceconverter attribute)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.scopeWindow"]], "set() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.set"]], "setparamvalue() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setParamValue"]], "setparams() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setParams"]], "setscopewindow() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setScopeWindow"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[9, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"]], "transform() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.transform"]], "write() (fewshotassertionsentenceconverter method)": [[9, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.write"]], "sparknlp_jsl.annotator.assertion": [[10, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "clear() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.clear"]], "copy() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.copy"]], "explainparam() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.explainParam"]], "explainparams() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.explainParams"]], "extractparammap() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.extractParamMap"]], "getinputcols() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getInputCols"]], "getlazyannotator() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getLazyAnnotator"]], "getordefault() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getOrDefault"]], "getoutputcol() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getOutputCol"]], "getparam() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getParam"]], "getparamvalue() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getParamValue"]], "getter_attrs (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getter_attrs"]], "hasdefault() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.hasDefault"]], "hasparam() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.hasParam"]], "inputannotatortypes (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "inputcols (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputCols"]], "inputcolsvalidation() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputColsValidation"]], "isdefined() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.isDefined"]], "isset() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.isSet"]], "lazyannotator (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.lazyAnnotator"]], "load() (chunk2token class method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.load"]], "name (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "optionalinputannotatortypes (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.optionalInputAnnotatorTypes"]], "outputannotatortype (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "outputcol (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputCol"]], "read() (chunk2token class method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.read"]], "save() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.save"]], "set() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.set"]], "setforceinputtypevalidation() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setForceInputTypeValidation"]], "setinputcols() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setInputCols"]], "setlazyannotator() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setLazyAnnotator"]], "setoutputcol() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setOutputCol"]], "setparamvalue() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setParamValue"]], "setparams() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setParams"]], "skiplpinputcolsvalidation (chunk2token attribute)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunk2_token": [[11, "module-sparknlp_jsl.annotator.chunk2_token"]], "transform() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.transform"]], "write() (chunk2token method)": [[11, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.write"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "blacklist (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.blackList"]], "casesensitive (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "clear() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.clear"]], "copy() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.copy"]], "criteria (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "doexceptionhandling (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.doExceptionHandling"]], "explainparam() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.explainParam"]], "explainparams() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.explainParams"]], "extractparammap() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.extractParamMap"]], "filtervalue (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.filterValue"]], "getinputcols() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getInputCols"]], "getlazyannotator() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getLazyAnnotator"]], "getordefault() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getOrDefault"]], "getoutputcol() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getOutputCol"]], "getparam() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getParam"]], "getparamvalue() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getParamValue"]], "getter_attrs (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getter_attrs"]], "hasdefault() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.hasDefault"]], "hasparam() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.hasParam"]], "inputannotatortypes (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "inputcols (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputCols"]], "inputcolsvalidation() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputColsValidation"]], "isdefined() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.isDefined"]], "isset() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.isSet"]], "lazyannotator (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.lazyAnnotator"]], "load() (assertionfilterer class method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.load"]], "name (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "optionalinputannotatortypes (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "outputcol (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputCol"]], "read() (assertionfilterer class method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.read"]], "regex (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "save() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.save"]], "set() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.set"]], "setblacklist() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setBlackList"]], "setcasesensitive() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "setcriteria() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "setdenylist() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setDenyList"]], "setdoexceptionhandling() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setDoExceptionHandling"]], "setfiltervalue() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setFilterValue"]], "setforceinputtypevalidation() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setForceInputTypeValidation"]], "setinputcols() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setInputCols"]], "setlazyannotator() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setLazyAnnotator"]], "setoutputcol() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setOutputCol"]], "setparamvalue() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setParamValue"]], "setparams() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setParams"]], "setregex() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setRegex"]], "setwhitelist() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setWhiteList"]], "skiplpinputcolsvalidation (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[12, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "transform() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.transform"]], "whitelist (assertionfilterer attribute)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "write() (assertionfilterer method)": [[12, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.write"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "clear() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.clear"]], "copy() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.copy"]], "explainparam() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.explainParam"]], "explainparams() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.explainParams"]], "extractparammap() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.extractParamMap"]], "getinputcols() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getInputCols"]], "getlazyannotator() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getLazyAnnotator"]], "getordefault() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getOrDefault"]], "getoutputcol() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getOutputCol"]], "getparam() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getParam"]], "getparamvalue() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getParamValue"]], "getter_attrs (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getter_attrs"]], "hasdefault() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.hasDefault"]], "hasparam() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.hasParam"]], "inputannotatortypes (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "inputcols (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputCols"]], "inputcolsvalidation() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputColsValidation"]], "isdefined() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.isDefined"]], "isset() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.isSet"]], "lazyannotator (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.lazyAnnotator"]], "load() (chunkconverter class method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.load"]], "name (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "optionalinputannotatortypes (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "outputcol (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputCol"]], "read() (chunkconverter class method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.read"]], "save() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.save"]], "set() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.set"]], "setforceinputtypevalidation() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setForceInputTypeValidation"]], "setinputcols() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setInputCols"]], "setlazyannotator() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setLazyAnnotator"]], "setoutputcol() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setOutputCol"]], "setparamvalue() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setParamValue"]], "setparams() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setParams"]], "skiplpinputcolsvalidation (chunkconverter attribute)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[13, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "transform() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.transform"]], "write() (chunkconverter method)": [[13, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.write"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "batchsize (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.batchSize"]], "casesensitive (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.caseSensitive"]], "clear() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.clear"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "configprotobytes (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.configProtoBytes"]], "copy() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.copy"]], "dimension (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dimension"]], "divergence (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "engine (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.engine"]], "explainparam() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.explainParam"]], "explainparams() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.explainParams"]], "extractparammap() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.extractParamMap"]], "getbatchsize() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getBatchSize"]], "getcasesensitive() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getCaseSensitive"]], "getdimension() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getDimension"]], "getengine() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getEngine"]], "getinputcols() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getInputCols"]], "getlazyannotator() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getLazyAnnotator"]], "getmaxsentencelength() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getMaxSentenceLength"]], "getordefault() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getOrDefault"]], "getoutputcol() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getOutputCol"]], "getparam() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getParam"]], "getparamvalue() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getParamValue"]], "getstorageref() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getStorageRef"]], "getter_attrs (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getter_attrs"]], "hasdefault() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.hasDefault"]], "hasparam() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.hasParam"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "inputcols (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputCols"]], "inputcolsvalidation() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputColsValidation"]], "isdefined() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isDefined"]], "islong (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isLong"]], "isset() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isSet"]], "lazyannotator (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.lazyAnnotator"]], "load() (chunkkeyphraseextraction class method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.load"]], "loadsavedmodel() (chunkkeyphraseextraction static method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.loadSavedModel"]], "maxsentencelength (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.maxSentenceLength"]], "max_length_limit (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.max_length_limit"]], "name (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "optionalinputannotatortypes (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "outputcol (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputCol"]], "pretrained() (chunkkeyphraseextraction static method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "read() (chunkkeyphraseextraction class method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.read"]], "save() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.save"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "set() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.set"]], "setbatchsize() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setBatchSize"]], "setcasesensitive() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setCaseSensitive"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setconfigprotobytes() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConfigProtoBytes"]], "setdimension() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDimension"]], "setdivergence() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setinputcols() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setInputCols"]], "setislong() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setIsLong"]], "setlazyannotator() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setLazyAnnotator"]], "setmaxsentencelength() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setMaxSentenceLength"]], "setoutputcol() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setOutputCol"]], "setparamvalue() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setParamValue"]], "setparams() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setParams"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "setstorageref() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setStorageRef"]], "settopn() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[14, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "storageref (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.storageRef"]], "topn (chunkkeyphraseextraction attribute)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "transform() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.transform"]], "write() (chunkkeyphraseextraction method)": [[14, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.write"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "clear() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.clear"]], "copy() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.copy"]], "defaultentity (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "explainparam() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.explainParam"]], "explainparams() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.explainParams"]], "extractparammap() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.extractParamMap"]], "getinputcols() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getInputCols"]], "getlazyannotator() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getLazyAnnotator"]], "getordefault() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getOrDefault"]], "getoutputcol() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getOutputCol"]], "getparam() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getParam"]], "getparamvalue() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getParamValue"]], "getter_attrs (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getter_attrs"]], "groupbysentences (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "hasdefault() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.hasDefault"]], "hasparam() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.hasParam"]], "inputannotatortypes (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "inputcols (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputCols"]], "inputcolsvalidation() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputColsValidation"]], "insertchunk (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "isdefined() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.isDefined"]], "isset() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.isSet"]], "lazyannotator (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.lazyAnnotator"]], "load() (chunksentencesplitter class method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.load"]], "name (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "optionalinputannotatortypes (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "outputcol (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputCol"]], "read() (chunksentencesplitter class method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.read"]], "save() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.save"]], "set() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.set"]], "setdefaultentity() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setforceinputtypevalidation() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setForceInputTypeValidation"]], "setgroupbysentences() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinputcols() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInputCols"]], "setinsertchunk() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "setlazyannotator() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setLazyAnnotator"]], "setoutputcol() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setOutputCol"]], "setparamvalue() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setParamValue"]], "setparams() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setParams"]], "skiplpinputcolsvalidation (chunksentencesplitter attribute)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[15, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "transform() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.transform"]], "write() (chunksentencesplitter method)": [[15, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.write"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "casesensitive (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.caseSensitive"]], "casesensitive (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.caseSensitive"]], "clear() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.clear"]], "clear() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.clear"]], "copy() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.copy"]], "copy() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.copy"]], "criteria (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "doexceptionhandling (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.doExceptionHandling"]], "doexceptionhandling (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.doExceptionHandling"]], "entitiesconfidence (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.entitiesConfidence"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "entitiesconfidenceresourceasjsonstring (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResourceAsJsonString"]], "explainparam() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.explainParam"]], "explainparam() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.explainParam"]], "explainparams() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.explainParams"]], "explainparams() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.explainParams"]], "extractparammap() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.extractParamMap"]], "extractparammap() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.extractParamMap"]], "filtervalue (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "fit() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.fit"]], "fitmultiple() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.fitMultiple"]], "getinputcols() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getInputCols"]], "getinputcols() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getInputCols"]], "getlazyannotator() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getLazyAnnotator"]], "getlazyannotator() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getLazyAnnotator"]], "getordefault() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getOrDefault"]], "getordefault() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getOrDefault"]], "getoutputcol() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getOutputCol"]], "getoutputcol() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getOutputCol"]], "getparam() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getParam"]], "getparam() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getParam"]], "getparamvalue() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getParamValue"]], "getparamvalue() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getParamValue"]], "getter_attrs (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getter_attrs"]], "getter_attrs (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getter_attrs"]], "hasdefault() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.hasDefault"]], "hasdefault() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.hasDefault"]], "hasparam() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.hasParam"]], "hasparam() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.hasParam"]], "inputannotatortypes (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "inputcols (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputCols"]], "inputcols (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputCols"]], "inputcolsvalidation() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputColsValidation"]], "inputcolsvalidation() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputColsValidation"]], "isdefined() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.isDefined"]], "isdefined() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.isDefined"]], "isset() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.isSet"]], "isset() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.isSet"]], "lazyannotator (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.lazyAnnotator"]], "lazyannotator (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.lazyAnnotator"]], "load() (chunkfilterer class method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.load"]], "load() (chunkfiltererapproach class method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.load"]], "name (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "optionalinputannotatortypes (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "outputcol (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputCol"]], "outputcol (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputCol"]], "read() (chunkfilterer class method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.read"]], "read() (chunkfiltererapproach class method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.read"]], "regex (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "save() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.save"]], "save() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.save"]], "set() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.set"]], "set() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.set"]], "setblacklist() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcasesensitive() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCaseSensitive"]], "setcasesensitive() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCaseSensitive"]], "setcriteria() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setdenylist() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setDenyList"]], "setdenylist() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setDenyList"]], "setdoexceptionhandling() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setDoExceptionHandling"]], "setdoexceptionhandling() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setDoExceptionHandling"]], "setentitiesconfidence() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresourceasjsonstring() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResourceAsJsonString"]], "setfilterentity() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setfiltervalue() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterValue"]], "setfiltervalue() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterValue"]], "setforceinputtypevalidation() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setForceInputTypeValidation"]], "setinputcols() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setInputCols"]], "setinputcols() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setInputCols"]], "setlazyannotator() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setLazyAnnotator"]], "setlazyannotator() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setLazyAnnotator"]], "setoutputcol() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setOutputCol"]], "setoutputcol() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setOutputCol"]], "setparamvalue() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setParamValue"]], "setparamvalue() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setParamValue"]], "setparams() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setParams"]], "setregex() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "skiplpinputcolsvalidation (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[16, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "transform() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.transform"]], "whitelist (chunkfilterer attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "write() (chunkfilterer method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.write"]], "write() (chunkfiltererapproach method)": [[16, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.write"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "clear() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.clear"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.clear"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.clear"]], "clear() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.clear"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.clear"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.clear"]], "copy() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.copy"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.copy"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.copy"]], "copy() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.copy"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.copy"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.copy"]], "dictionary (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.dictionary"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.dictionary"]], "doexceptionhandling (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.doExceptionHandling"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.doExceptionHandling"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.doExceptionHandling"]], "doexceptionhandling (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.doExceptionHandling"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.doExceptionHandling"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.doExceptionHandling"]], "doexceptionhandling (commonchunkmapperparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.doExceptionHandling"]], "enablecharfingerprintmatching (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablecharfingerprintmatching (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.enableCharFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.enableCharFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enablefuzzymatching (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.enableFuzzyMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.enableFuzzyMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "enabletokenfingerprintmatching (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.enableTokenFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.enableTokenFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.enableTokenFingerprintMatching"]], "explainparam() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.explainParam"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParam"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParam"]], "explainparam() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.explainParam"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParam"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParam"]], "explainparams() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.explainParams"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParams"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParams"]], "explainparams() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.explainParams"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParams"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParams"]], "extractparammap() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.extractParamMap"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.extractParamMap"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.extractParamMap"]], "extractparammap() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.extractParamMap"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.extractParamMap"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.extractParamMap"]], "fit() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fit"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fit"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fit"]], "fitmultiple() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fitMultiple"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fitMultiple"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fitMultiple"]], "fuzzydistancescalingmode (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzydistancescalingmode (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.fuzzyDistanceScalingMode"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.fuzzyDistanceScalingMode"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistancethresholds (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.fuzzyMatchingDistanceThresholds"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.fuzzyMatchingDistanceThresholds"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "fuzzymatchingdistances (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.fuzzyMatchingDistances"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.fuzzyMatchingDistances"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.fuzzyMatchingDistances"]], "getinputcols() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getInputCols"]], "getinputcols() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getInputCols"]], "getlazyannotator() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getLazyAnnotator"]], "getlazyannotator() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getLazyAnnotator"]], "getordefault() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getOrDefault"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOrDefault"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOrDefault"]], "getordefault() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getOrDefault"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOrDefault"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOrDefault"]], "getoutputcol() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOutputCol"]], "getoutputcol() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOutputCol"]], "getparam() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getParam"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParam"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParam"]], "getparam() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getParam"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParam"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParam"]], "getparamvalue() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParamValue"]], "getparamvalue() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParamValue"]], "getter_attrs (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getter_attrs"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getter_attrs"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getter_attrs"]], "getter_attrs (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getter_attrs"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getter_attrs"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getter_attrs"]], "hasdefault() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.hasDefault"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasDefault"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasDefault"]], "hasdefault() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.hasDefault"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasDefault"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasDefault"]], "hasparam() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.hasParam"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasParam"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasParam"]], "hasparam() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.hasParam"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasParam"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasParam"]], "inputannotatortypes (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "inputcols (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputCols"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputCols"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputCols"]], "inputcols (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputCols"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputCols"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputCols"]], "inputcolsvalidation() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputColsValidation"]], "inputcolsvalidation() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputColsValidation"]], "isdefined() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.isDefined"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isDefined"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isDefined"]], "isdefined() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.isDefined"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isDefined"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isDefined"]], "isset() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.isSet"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isSet"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isSet"]], "isset() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.isSet"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isSet"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isSet"]], "lazyannotator (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lazyAnnotator"]], "lazyannotator (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lazyAnnotator"]], "load() (chunkmapperapproach class method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.load"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.load"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.load"]], "load() (chunkmappermodel class method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.load"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.load"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.load"]], "lowercase (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lowerCase"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lowerCase"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lowerCase"]], "lowercase (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lowerCase"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lowerCase"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lowerCase"]], "lowercase (commonchunkmapperparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxcharngramfingerprint (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.maxCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingcharsratio (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingCharsRatio"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingCharsRatio"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingoperator (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingOperator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingOperator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramdroppingtokens (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingTokens"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingTokens"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "maxtokenngramfingerprint (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.maxTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mincharngramfingerprint (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.minCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.minCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "mintokenngramfingerprint (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.minTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.minTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.minTokenNgramFingerprint"]], "multivaluesrelations (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.multivaluesRelations"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.multivaluesRelations"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.multivaluesRelations"]], "multivaluesrelations (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.multivaluesRelations"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.multivaluesRelations"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.multivaluesRelations"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "optionalinputannotatortypes (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputAnnotatorType"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputAnnotatorType"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "outputcol (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputCol"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputCol"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputCol"]], "outputcol (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputCol"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputCol"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputCol"]], "pretrained() (chunkmappermodel static method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "read() (chunkmapperapproach class method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.read"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.read"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.read"]], "read() (chunkmappermodel class method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.read"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.read"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.read"]], "rel (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rel"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rel"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rel"]], "rel (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rel"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rel"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rel"]], "rel (commonchunkmapperparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rels"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rels"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rels"]], "rels (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rels"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rels"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rels"]], "rels (commonchunkmapperparams attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "save() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.save"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.save"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.save"]], "save() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.save"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.save"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.save"]], "set() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.set"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.set"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.set"]], "set() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.set"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.set"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.set"]], "setallowmultitokenchunk() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDictionary"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDictionary"]], "setdoexceptionhandling() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setDoExceptionHandling"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setDoExceptionHandling"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setDoExceptionHandling"]], "setdoexceptionhandling() (commonchunkmapperparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setDoExceptionHandling"]], "setenablecharfingerprintmatching() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablecharfingerprintmatching() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setEnableCharFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setEnableCharFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenablefuzzymatching() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setEnableFuzzyMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setEnableFuzzyMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setenabletokenfingerprintmatching() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setEnableTokenFingerprintMatching"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setEnableTokenFingerprintMatching"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setEnableTokenFingerprintMatching"]], "setforceinputtypevalidation() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"]], "setfuzzydistancescalingmode() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzydistancescalingmode() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setFuzzyDistanceScalingMode"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setFuzzyDistanceScalingMode"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistancethresholds() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setFuzzyMatchingDistanceThresholds"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setFuzzyMatchingDistanceThresholds"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setfuzzymatchingdistances() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setFuzzyMatchingDistances"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setFuzzyMatchingDistances"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setFuzzyMatchingDistances"]], "setinputcols() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setInputCols"]], "setinputcols() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setInputCols"]], "setlazyannotator() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLazyAnnotator"]], "setlazyannotator() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLazyAnnotator"]], "setlowercase() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLowerCase"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLowerCase"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLowerCase"]], "setlowercase() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLowerCase"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLowerCase"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLowerCase"]], "setlowercase() (commonchunkmapperparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxcharngramfingerprint() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMaxCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingcharsratio() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingCharsRatio"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingCharsRatio"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingoperator() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingOperator"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingOperator"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramdroppingtokens() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingTokens"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingTokens"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmaxtokenngramfingerprint() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMaxTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmincharngramfingerprint() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMinCharNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMinCharNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMinTokenNgramFingerprint"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMinTokenNgramFingerprint"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMultivaluesRelations"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMultivaluesRelations"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMultivaluesRelations"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setoutputcol() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setOutputCol"]], "setoutputcol() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setOutputCol"]], "setparamvalue() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setParamValue"]], "setparamvalue() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParamValue"]], "setparams() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setParams"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParams"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParams"]], "setrel() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRel"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRel"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRel"]], "setrel() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRel"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRel"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRel"]], "setrel() (commonchunkmapperparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRels"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRels"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRels"]], "setrels() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRels"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRels"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRels"]], "setrels() (commonchunkmapperparams method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[17, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "transform() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.transform"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.transform"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.transform"]], "write() (chunkmapperapproach method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.write"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.write"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.write"]], "write() (chunkmappermodel method)": [[17, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.write"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.write"], [157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.write"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "clear() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.clear"]], "copy() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.copy"]], "explainparam() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.explainParam"]], "explainparams() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.explainParams"]], "extractparammap() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.extractParamMap"]], "getinputcols() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getInputCols"]], "getlazyannotator() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getLazyAnnotator"]], "getordefault() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getOrDefault"]], "getoutputcol() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getOutputCol"]], "getparam() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getParam"]], "getparamvalue() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getParamValue"]], "getter_attrs (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getter_attrs"]], "hasdefault() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.hasDefault"]], "hasparam() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.hasParam"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "inputcols (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputCols"]], "inputcolsvalidation() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputColsValidation"]], "isdefined() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.isDefined"]], "isset() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.isSet"]], "lazyannotator (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.lazyAnnotator"]], "load() (chunkmapperfilterer class method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.load"]], "name (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "optionalinputannotatortypes (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "outputcol (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputCol"]], "read() (chunkmapperfilterer class method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.read"]], "returncriteria (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "save() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.save"]], "set() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.set"]], "setforceinputtypevalidation() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setForceInputTypeValidation"]], "setinputcols() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setInputCols"]], "setlazyannotator() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setLazyAnnotator"]], "setoutputcol() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setOutputCol"]], "setparamvalue() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setParamValue"]], "setparams() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setParams"]], "setreturncriteria() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "skiplpinputcolsvalidation (chunkmapperfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[18, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "transform() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.transform"]], "write() (chunkmapperfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.write"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "allowmultitokenchunk (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.allowMultiTokenChunk"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.allowMultiTokenChunk"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.allowMultiTokenChunk"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.allowMultiTokenChunk"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.allowMultiTokenChunk"]], "clear() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.clear"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.clear"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.clear"]], "clear() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.clear"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.clear"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.clear"]], "copy() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.copy"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.copy"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.copy"]], "copy() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.copy"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.copy"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.copy"]], "dictionary (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "doexceptionhandling (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.doExceptionHandling"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.doExceptionHandling"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.doExceptionHandling"]], "doexceptionhandling (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.doExceptionHandling"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.doExceptionHandling"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.doExceptionHandling"]], "enablecharfingerprintmatching (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableCharFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableCharFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableCharFingerprintMatching"]], "enablecharfingerprintmatching (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.enableCharFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.enableCharFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.enableCharFingerprintMatching"]], "enablefuzzymatching (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableFuzzyMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableFuzzyMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableFuzzyMatching"]], "enablefuzzymatching (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.enableFuzzyMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.enableFuzzyMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.enableFuzzyMatching"]], "enabletokenfingerprintmatching (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableTokenFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableTokenFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableTokenFingerprintMatching"]], "enabletokenfingerprintmatching (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.enableTokenFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.enableTokenFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.enableTokenFingerprintMatching"]], "explainparam() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.explainParam"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.explainParam"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.explainParam"]], "explainparam() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.explainParam"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.explainParam"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.explainParam"]], "explainparams() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.explainParams"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.explainParams"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.explainParams"]], "explainparams() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.explainParams"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.explainParams"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.explainParams"]], "extractparammap() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.extractParamMap"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.extractParamMap"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.extractParamMap"]], "extractparammap() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.extractParamMap"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.extractParamMap"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.extractParamMap"]], "fit() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fit"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fit"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fit"]], "fitmultiple() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fitMultiple"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fitMultiple"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fitMultiple"]], "fuzzydistancescalingmode (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"]], "fuzzydistancescalingmode (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.fuzzyDistanceScalingMode"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.fuzzyDistanceScalingMode"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistancethresholds (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.fuzzyMatchingDistanceThresholds"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.fuzzyMatchingDistanceThresholds"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyMatchingDistances"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistances"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistances"]], "fuzzymatchingdistances (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.fuzzyMatchingDistances"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.fuzzyMatchingDistances"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.fuzzyMatchingDistances"]], "getinputcols() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getInputCols"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getInputCols"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getInputCols"]], "getinputcols() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getInputCols"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getInputCols"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getInputCols"]], "getlazyannotator() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getLazyAnnotator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getLazyAnnotator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getLazyAnnotator"]], "getlazyannotator() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getLazyAnnotator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getLazyAnnotator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getLazyAnnotator"]], "getordefault() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getOrDefault"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getOrDefault"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getOrDefault"]], "getordefault() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getOrDefault"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getOrDefault"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getOrDefault"]], "getoutputcol() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getOutputCol"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getOutputCol"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getOutputCol"]], "getoutputcol() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getOutputCol"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getOutputCol"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getOutputCol"]], "getparam() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getParam"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getParam"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getParam"]], "getparam() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getParam"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getParam"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getParam"]], "getparamvalue() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getParamValue"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getParamValue"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getParamValue"]], "getparamvalue() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getParamValue"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getParamValue"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getParamValue"]], "getter_attrs (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getter_attrs"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getter_attrs"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getter_attrs"]], "getter_attrs (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getter_attrs"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getter_attrs"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getter_attrs"]], "hasdefault() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.hasDefault"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.hasDefault"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.hasDefault"]], "hasdefault() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.hasDefault"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.hasDefault"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.hasDefault"]], "hasparam() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.hasParam"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.hasParam"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.hasParam"]], "hasparam() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.hasParam"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.hasParam"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.hasParam"]], "inputannotatortypes (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "inputcols (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputCols"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputCols"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputCols"]], "inputcols (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputCols"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputCols"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputCols"]], "inputcolsvalidation() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputColsValidation"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputColsValidation"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputColsValidation"]], "inputcolsvalidation() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputColsValidation"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputColsValidation"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputColsValidation"]], "isdefined() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.isDefined"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.isDefined"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.isDefined"]], "isdefined() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.isDefined"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.isDefined"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.isDefined"]], "isset() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.isSet"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.isSet"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.isSet"]], "isset() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.isSet"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.isSet"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.isSet"]], "lazyannotator (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.lazyAnnotator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.lazyAnnotator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.lazyAnnotator"]], "lazyannotator (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.lazyAnnotator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.lazyAnnotator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.lazyAnnotator"]], "load() (docmapperapproach class method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.load"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.load"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.load"]], "load() (docmappermodel class method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.load"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.load"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.load"]], "lowercase (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.lowerCase"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.lowerCase"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.lowerCase"]], "lowercase (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.lowerCase"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.lowerCase"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.lowerCase"]], "maxcharngramfingerprint (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxCharNgramFingerprint"]], "maxcharngramfingerprint (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.maxCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.maxCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingcharsratio (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.maxTokenNgramDroppingCharsRatio"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramDroppingCharsRatio"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingoperator (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.maxTokenNgramDroppingOperator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramDroppingOperator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"]], "maxtokenngramdroppingtokens (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.maxTokenNgramDroppingTokens"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramDroppingTokens"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramFingerprint"]], "maxtokenngramfingerprint (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.maxTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.maxTokenNgramFingerprint"]], "mincharngramfingerprint (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.minCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.minCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.minCharNgramFingerprint"]], "mincharngramfingerprint (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.minCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.minCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.minCharNgramFingerprint"]], "mintokenngramfingerprint (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.minTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.minTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.minTokenNgramFingerprint"]], "mintokenngramfingerprint (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.minTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.minTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.minTokenNgramFingerprint"]], "multivaluesrelations (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.multivaluesRelations"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.multivaluesRelations"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.multivaluesRelations"]], "multivaluesrelations (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.multivaluesRelations"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.multivaluesRelations"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.multivaluesRelations"]], "name (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "optionalinputannotatortypes (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.optionalInputAnnotatorTypes"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.optionalInputAnnotatorTypes"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.optionalInputAnnotatorTypes"]], "outputannotatortype (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "outputcol (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputCol"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputCol"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputCol"]], "outputcol (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputCol"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputCol"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputCol"]], "pretrained() (docmappermodel static method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "read() (docmapperapproach class method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.read"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.read"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.read"]], "read() (docmappermodel class method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.read"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.read"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.read"]], "rel (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.rel"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.rel"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.rel"]], "rel (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.rel"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.rel"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.rel"]], "rels (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.rels"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.rels"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.rels"]], "rels (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.rels"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.rels"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.rels"]], "save() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.save"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.save"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.save"]], "save() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.save"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.save"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.save"]], "set() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.set"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.set"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.set"]], "set() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.set"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.set"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.set"]], "setallowmultitokenchunk() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setAllowMultiTokenChunk"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setAllowMultiTokenChunk"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setAllowMultiTokenChunk"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setAllowMultiTokenChunk"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setAllowMultiTokenChunk"]], "setdictionary() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "setdoexceptionhandling() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDoExceptionHandling"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDoExceptionHandling"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setDoExceptionHandling"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setDoExceptionHandling"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setDoExceptionHandling"]], "setenablecharfingerprintmatching() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"]], "setenablecharfingerprintmatching() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setEnableCharFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setEnableCharFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableFuzzyMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableFuzzyMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableFuzzyMatching"]], "setenablefuzzymatching() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setEnableFuzzyMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setEnableFuzzyMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"]], "setenabletokenfingerprintmatching() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setEnableTokenFingerprintMatching"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setEnableTokenFingerprintMatching"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setEnableTokenFingerprintMatching"]], "setforceinputtypevalidation() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setForceInputTypeValidation"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setForceInputTypeValidation"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setForceInputTypeValidation"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setForceInputTypeValidation"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setForceInputTypeValidation"]], "setfuzzydistancescalingmode() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"]], "setfuzzydistancescalingmode() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setFuzzyDistanceScalingMode"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setFuzzyDistanceScalingMode"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistancethresholds() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setFuzzyMatchingDistanceThresholds"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setFuzzyMatchingDistanceThresholds"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyMatchingDistances"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistances"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistances"]], "setfuzzymatchingdistances() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setFuzzyMatchingDistances"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setFuzzyMatchingDistances"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setFuzzyMatchingDistances"]], "setinputcols() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setInputCols"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setInputCols"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setInputCols"]], "setinputcols() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setInputCols"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setInputCols"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setInputCols"]], "setlazyannotator() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setLazyAnnotator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setLazyAnnotator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setLazyAnnotator"]], "setlazyannotator() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setLazyAnnotator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setLazyAnnotator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setLazyAnnotator"]], "setlowercase() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setLowerCase"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setLowerCase"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setLowerCase"]], "setlowercase() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setLowerCase"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setLowerCase"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setLowerCase"]], "setmaxcharngramfingerprint() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"]], "setmaxcharngramfingerprint() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMaxCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMaxCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingcharsratio() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMaxTokenNgramDroppingCharsRatio"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramDroppingCharsRatio"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingoperator() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMaxTokenNgramDroppingOperator"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramDroppingOperator"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramdroppingtokens() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMaxTokenNgramDroppingTokens"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramDroppingTokens"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"]], "setmaxtokenngramfingerprint() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMaxTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMinCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMinCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMinCharNgramFingerprint"]], "setmincharngramfingerprint() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMinCharNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMinCharNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"]], "setmintokenngramfingerprint() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMinTokenNgramFingerprint"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMinTokenNgramFingerprint"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMultivaluesRelations"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMultivaluesRelations"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMultivaluesRelations"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMultivaluesRelations"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMultivaluesRelations"]], "setoutputcol() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setOutputCol"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setOutputCol"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setOutputCol"]], "setoutputcol() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setOutputCol"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setOutputCol"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setOutputCol"]], "setparamvalue() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setParamValue"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setParamValue"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setParamValue"]], "setparamvalue() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setParamValue"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setParamValue"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setParamValue"]], "setparams() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setParams"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setParams"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setParams"]], "setrel() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setRel"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setRel"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setRel"]], "setrel() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setRel"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setRel"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setRel"]], "setrels() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setRels"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setRels"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setRels"]], "setrels() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setRels"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setRels"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setRels"]], "skiplpinputcolsvalidation (docmapperapproach attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.skipLPInputColsValidation"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.skipLPInputColsValidation"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (docmappermodel attribute)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.skipLPInputColsValidation"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.skipLPInputColsValidation"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.docmapper": [[19, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "transform() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.transform"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.transform"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.transform"]], "write() (docmapperapproach method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.write"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.write"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.write"]], "write() (docmappermodel method)": [[19, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.write"], [124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.write"], [158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.write"]], "sparknlp_jsl.annotator.chunker": [[20, "module-sparknlp_jsl.annotator.chunker"]], "mapper2chunk (class in sparknlp_jsl.annotator.chunker.mapper2_chunk)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk"]], "clear() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.clear"]], "copy() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.copy"]], "explainparam() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.explainParam"]], "explainparams() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.explainParams"]], "extractparammap() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.extractParamMap"]], "filternonevalues (mapper2chunk attribute)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.filterNoneValues"]], "getordefault() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getOrDefault"]], "getparam() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getParam"]], "getparamvalue() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getParamValue"]], "getter_attrs (mapper2chunk attribute)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getter_attrs"]], "hasdefault() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.hasDefault"]], "hasparam() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.hasParam"]], "inputannotatortypes (mapper2chunk attribute)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.inputAnnotatorTypes"]], "isdefined() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.isDefined"]], "isset() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.isSet"]], "load() (mapper2chunk class method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.load"]], "name (mapper2chunk attribute)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.name"]], "outputannotatortype (mapper2chunk attribute)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.outputAnnotatorType"]], "read() (mapper2chunk class method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.read"]], "save() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.save"]], "set() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.set"]], "setfilternonevalues() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setFilterNoneValues"]], "setparamvalue() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setParamValue"]], "setparams() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setParams"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[21, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"]], "transform() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.transform"]], "write() (mapper2chunk method)": [[21, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.write"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "clear() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.clear"]], "clear() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.clear"]], "copy() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.copy"]], "copy() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.copy"]], "explainparam() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.explainParam"]], "explainparam() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.explainParam"]], "explainparams() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.explainParams"]], "explainparams() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.explainParams"]], "extractparammap() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.extractParamMap"]], "extractparammap() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.extractParamMap"]], "fit() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fit"]], "fitintercept (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "fitmultiple() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitMultiple"]], "getinputcols() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getInputCols"]], "getinputcols() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getInputCols"]], "getlazyannotator() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getLazyAnnotator"]], "getordefault() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getOrDefault"]], "getordefault() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getOrDefault"]], "getoutputcol() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getOutputCol"]], "getoutputcol() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getOutputCol"]], "getparam() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getParam"]], "getparam() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getParam"]], "getparamvalue() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getParamValue"]], "getparamvalue() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getParamValue"]], "getter_attrs (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getter_attrs"]], "getter_attrs (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getter_attrs"]], "hasdefault() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.hasDefault"]], "hasdefault() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.hasDefault"]], "hasparam() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.hasParam"]], "hasparam() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.hasParam"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputAnnotatorTypes"]], "inputcols (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputCols"]], "inputcols (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputCols"]], "inputcolsvalidation() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputColsValidation"]], "isdefined() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.isDefined"]], "isdefined() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.isDefined"]], "isset() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.isSet"]], "isset() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.isSet"]], "labelcol (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "lazyannotator (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.lazyAnnotator"]], "lazyannotator (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.lazyAnnotator"]], "load() (documentlogregclassifierapproach class method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.load"]], "load() (documentlogregclassifiermodel class method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.load"]], "maxiter (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "optionalinputannotatortypes (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "outputcol (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputCol"]], "outputcol (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputCol"]], "pretrained() (documentlogregclassifiermodel static method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "read() (documentlogregclassifierapproach class method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.read"]], "read() (documentlogregclassifiermodel class method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.read"]], "save() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.save"]], "save() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.save"]], "set() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.set"]], "set() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.set"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setForceInputTypeValidation"]], "setinputcols() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setInputCols"]], "setinputcols() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setInputCols"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setlazyannotator() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLazyAnnotator"]], "setmaxiter() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "setoutputcol() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setOutputCol"]], "setoutputcol() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setOutputCol"]], "setparamvalue() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setParamValue"]], "setparamvalue() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setParamValue"]], "setparams() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setParams"]], "settol() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[22, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "transform() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.transform"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "write() (documentlogregclassifierapproach method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.write"]], "write() (documentlogregclassifiermodel method)": [[22, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.write"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "clear() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.clear"]], "clear() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.clear"]], "copy() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.copy"]], "copy() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.copy"]], "explainparam() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.explainParam"]], "explainparam() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.explainParam"]], "explainparams() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.explainParams"]], "explainparams() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.explainParams"]], "extractparammap() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.extractParamMap"]], "fit() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fit"]], "fitintercept (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getInputCols"]], "getinputcols() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getOrDefault"]], "getordefault() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getOutputCol"]], "getparam() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getParam"]], "getparam() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getParam"]], "getparamvalue() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getParamValue"]], "getter_attrs (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getter_attrs"]], "hasdefault() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.hasDefault"]], "hasdefault() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.hasDefault"]], "hasparam() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.hasParam"]], "hasparam() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.hasParam"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputCols"]], "inputcols (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputColsValidation"]], "isdefined() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.isDefined"]], "isdefined() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.isDefined"]], "isset() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.isSet"]], "isset() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.isSet"]], "labelcol (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labels"]], "labels (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "lazyannotator (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.lazyAnnotator"]], "load() (documentmlclassifierapproach class method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.load"]], "load() (documentmlclassifiermodel class method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.load"]], "maxiter (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.maxTokenNgram"]], "maxtokenngram (documentmlclassifierparams attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.mergeChunks"]], "mergechunks (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.mergeChunks"]], "mergechunks (documentmlclassifierparams attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.minTokenNgram"]], "mintokenngram (documentmlclassifierparams attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "optionalinputannotatortypes (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputCol"]], "outputcol (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputCol"]], "pretrained() (documentmlclassifiermodel static method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "read() (documentmlclassifierapproach class method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.read"]], "read() (documentmlclassifiermodel class method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.read"]], "save() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.save"]], "save() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.save"]], "set() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.set"]], "set() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.set"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setInputCols"]], "setinputcols() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setInputCols"]], "setlabelcol() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabels"]], "setlabels() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setlazyannotator() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setMergeChunks"]], "setmergechunks() (documentmlclassifierparams method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setParamValue"]], "setparams() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setParams"]], "settol() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[23, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "transform() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.transform"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "write() (documentmlclassifierapproach method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.write"]], "write() (documentmlclassifiermodel method)": [[23, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.write"]], "fewshotassertionclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_assertion_classifier)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach"]], "fewshotassertionclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_assertion_classifier)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel"]], "batchsize (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.batchSize"]], "classes (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.classes"]], "clear() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.clear"]], "clear() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.clear"]], "copy() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.copy"]], "copy() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.copy"]], "datasetinfo (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.datasetInfo"]], "datasetinfo (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.datasetInfo"]], "doexceptionhandling (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.doExceptionHandling"]], "doexceptionhandling (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.doExceptionHandling"]], "dropout (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.dropout"]], "engine (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.engine"]], "epochsn (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.epochsN"]], "explainparam() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.explainParam"]], "explainparam() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.explainParam"]], "explainparams() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.explainParams"]], "explainparams() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.explainParams"]], "extractparammap() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.extractParamMap"]], "extractparammap() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.extractParamMap"]], "featurescaling (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.featureScaling"]], "featurescaling (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.featureScaling"]], "fit() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fit"]], "fitmultiple() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fitMultiple"]], "fiximbalance (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fixImbalance"]], "getengine() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getEngine"]], "getinputcols() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getInputCols"]], "getinputcols() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getInputCols"]], "getlazyannotator() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getLazyAnnotator"]], "getordefault() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getOrDefault"]], "getordefault() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getOrDefault"]], "getoutputcol() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getOutputCol"]], "getoutputcol() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getOutputCol"]], "getparam() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getParam"]], "getparam() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getParam"]], "getparamvalue() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getParamValue"]], "getparamvalue() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getParamValue"]], "getstorageref() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getStorageRef"]], "getter_attrs (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getter_attrs"]], "getter_attrs (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getter_attrs"]], "hasdefault() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.hasDefault"]], "hasdefault() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.hasDefault"]], "hasparam() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.hasParam"]], "hasparam() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.hasParam"]], "inputannotatortypes (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputAnnotatorTypes"]], "inputcols (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputCols"]], "inputcols (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputCols"]], "inputcolsvalidation() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputColsValidation"]], "isdefined() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.isDefined"]], "isdefined() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.isDefined"]], "isset() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.isSet"]], "isset() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.isSet"]], "labelcolumn (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.labelColumn"]], "lazyannotator (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.lazyAnnotator"]], "lazyannotator (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.lazyAnnotator"]], "learningrate (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.learningRate"]], "load() (fewshotassertionclassifierapproach class method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.load"]], "load() (fewshotassertionclassifiermodel class method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.load"]], "loadsavedmodel() (fewshotassertionclassifiermodel static method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.loadSavedModel"]], "modelfile (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.modelFile"]], "multiclass (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.multiClass"]], "multiclass (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.multiClass"]], "name (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.name"]], "name (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.name"]], "optionalinputannotatortypes (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.outputAnnotatorType"]], "outputcol (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputCol"]], "outputcol (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.outputCol"]], "outputlogspath (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputLogsPath"]], "pretrained() (fewshotassertionclassifiermodel static method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.pretrained"]], "read() (fewshotassertionclassifierapproach class method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.read"]], "read() (fewshotassertionclassifiermodel class method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.read"]], "save() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.save"]], "save() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.save"]], "set() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.set"]], "set() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.set"]], "setbatchsize() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setBatchSize"]], "setdatasetinfo() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setDoExceptionHandling"]], "setdropout() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDropout"]], "setepochsnumber() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setFeatureScaling"]], "setfiximbalance() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setForceInputTypeValidation"]], "setinputcols() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setInputCols"]], "setinputcols() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setInputCols"]], "setlabelcol() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLabelCol"]], "setlazyannotator() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setLazyAnnotator"]], "setlearningrate() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLearningRate"]], "setmodelfile() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setModelFile"]], "setmulticlass() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setMultiClass"]], "setmulticlass() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setMultiClass"]], "setoutputcol() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setOutputCol"]], "setoutputcol() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setOutputCol"]], "setoutputlogspath() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setOutputLogsPath"]], "setparamvalue() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setParamValue"]], "setparamvalue() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setParamValue"]], "setparams() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setParams"]], "setstorageref() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setStorageRef"]], "setvalidationsplit() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[24, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"]], "storageref (fewshotassertionclassifiermodel attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.storageRef"]], "transform() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.transform"]], "validationsplit (fewshotassertionclassifierapproach attribute)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.validationSplit"]], "write() (fewshotassertionclassifierapproach method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.write"]], "write() (fewshotassertionclassifiermodel method)": [[24, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.write"]], "fewshotclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach"]], "fewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel"]], "batchsize (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.batchSize"]], "classes (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.classes"]], "clear() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.clear"]], "clear() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.clear"]], "copy() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.copy"]], "copy() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.copy"]], "datasetinfo (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.datasetInfo"]], "datasetinfo (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.datasetInfo"]], "doexceptionhandling (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.doExceptionHandling"]], "dropout (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.dropout"]], "engine (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.engine"]], "epochsn (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.epochsN"]], "explainparam() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.explainParam"]], "explainparam() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.explainParam"]], "explainparams() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.explainParams"]], "explainparams() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.explainParams"]], "extractparammap() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.extractParamMap"]], "extractparammap() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.extractParamMap"]], "featurescaling (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.featureScaling"]], "featurescaling (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.featureScaling"]], "fit() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fit"]], "fitmultiple() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fitMultiple"]], "fiximbalance (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fixImbalance"]], "getengine() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getEngine"]], "getinputcols() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getInputCols"]], "getinputcols() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getInputCols"]], "getlazyannotator() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getLazyAnnotator"]], "getordefault() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getOrDefault"]], "getordefault() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getOrDefault"]], "getoutputcol() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getOutputCol"]], "getoutputcol() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getOutputCol"]], "getparam() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getParam"]], "getparam() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getParam"]], "getparamvalue() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getParamValue"]], "getparamvalue() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getParamValue"]], "getter_attrs (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getter_attrs"]], "getter_attrs (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getter_attrs"]], "hasdefault() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.hasDefault"]], "hasdefault() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.hasDefault"]], "hasparam() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.hasParam"]], "hasparam() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.hasParam"]], "inputannotatortypes (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputCols"]], "inputcols (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputCols"]], "inputcolsvalidation() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputColsValidation"]], "isdefined() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.isDefined"]], "isdefined() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.isDefined"]], "isset() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.isSet"]], "isset() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.isSet"]], "labelcolumn (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.labelColumn"]], "lazyannotator (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.lazyAnnotator"]], "learningrate (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.learningRate"]], "load() (fewshotclassifierapproach class method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.load"]], "load() (fewshotclassifiermodel class method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.load"]], "modelfile (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.modelFile"]], "multiclass (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.multiClass"]], "multiclass (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.multiClass"]], "name (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.name"]], "name (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.name"]], "optionalinputannotatortypes (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputAnnotatorType"]], "outputcol (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputCol"]], "outputcol (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputCol"]], "outputlogspath (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputLogsPath"]], "pretrained() (fewshotclassifiermodel static method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.pretrained"]], "read() (fewshotclassifierapproach class method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.read"]], "read() (fewshotclassifiermodel class method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.read"]], "save() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.save"]], "save() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.save"]], "set() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.set"]], "set() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.set"]], "setbatchsize() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDropout"]], "setepochsnumber() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setInputCols"]], "setinputcols() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setInputCols"]], "setlabelcol() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLearningRate"]], "setmodelfile() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setModelFile"]], "setmulticlass() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setMultiClass"]], "setmulticlass() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setMultiClass"]], "setoutputcol() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setOutputCol"]], "setoutputcol() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setParamValue"]], "setparamvalue() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setParamValue"]], "setparams() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setParams"]], "setvalidationsplit() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (fewshotclassifiermodel attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[25, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "transform() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.transform"]], "validationsplit (fewshotclassifierapproach attribute)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.validationSplit"]], "write() (fewshotclassifierapproach method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.write"]], "write() (fewshotclassifiermodel method)": [[25, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.write"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "batchsize (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.batchSize"]], "classes (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.classes"]], "clear() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.clear"]], "clear() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.clear"]], "copy() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.copy"]], "copy() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.copy"]], "datasetinfo (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.datasetInfo"]], "datasetinfo (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.datasetInfo"]], "doexceptionhandling (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.doExceptionHandling"]], "dropout (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.dropout"]], "engine (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.engine"]], "epochsn (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.epochsN"]], "explainparam() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.explainParam"]], "explainparam() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.explainParam"]], "explainparams() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.explainParams"]], "explainparams() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.explainParams"]], "extractparammap() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.extractParamMap"]], "extractparammap() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.extractParamMap"]], "featurescaling (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.featureScaling"]], "featurescaling (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.featureScaling"]], "fit() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fit"]], "fitmultiple() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fitMultiple"]], "fiximbalance (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fixImbalance"]], "getengine() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getEngine"]], "getinputcols() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getInputCols"]], "getinputcols() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getInputCols"]], "getlazyannotator() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getLazyAnnotator"]], "getordefault() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getOrDefault"]], "getordefault() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getOrDefault"]], "getoutputcol() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getOutputCol"]], "getoutputcol() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getOutputCol"]], "getparam() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getParam"]], "getparam() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getParam"]], "getparamvalue() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getParamValue"]], "getparamvalue() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getParamValue"]], "getter_attrs (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getter_attrs"]], "getter_attrs (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getter_attrs"]], "hasdefault() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.hasDefault"]], "hasdefault() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.hasDefault"]], "hasparam() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.hasParam"]], "hasparam() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.hasParam"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "inputcols (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputCols"]], "inputcols (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputCols"]], "inputcolsvalidation() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputColsValidation"]], "isdefined() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.isDefined"]], "isdefined() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.isDefined"]], "isset() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.isSet"]], "isset() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.isSet"]], "labelcolumn (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.labelColumn"]], "lazyannotator (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.lazyAnnotator"]], "lazyannotator (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.lazyAnnotator"]], "learningrate (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.learningRate"]], "load() (genericlogregclassifierapproach class method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.load"]], "load() (genericlogregclassifiermodel class method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.load"]], "modelfile (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.modelFile"]], "multiclass (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.multiClass"]], "multiclass (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.multiClass"]], "name (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "optionalinputannotatortypes (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "outputcol (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputCol"]], "outputcol (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputCol"]], "outputlogspath (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputLogsPath"]], "pretrained() (genericlogregclassifiermodel static method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "read() (genericlogregclassifierapproach class method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.read"]], "read() (genericlogregclassifiermodel class method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.read"]], "save() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.save"]], "save() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.save"]], "set() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.set"]], "set() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.set"]], "setbatchsize() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setDoExceptionHandling"]], "setdropout() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDropout"]], "setepochsnumber() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setInputCols"]], "setinputcols() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setInputCols"]], "setlabelcol() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLabelCol"]], "setlazyannotator() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLearningRate"]], "setmodelfile() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setModelFile"]], "setmulticlass() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setMultiClass"]], "setmulticlass() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setMultiClass"]], "setoutputcol() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setOutputCol"]], "setoutputcol() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setOutputCol"]], "setoutputlogspath() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setParamValue"]], "setparamvalue() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setParamValue"]], "setparams() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setParams"]], "setvalidationsplit() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericlogregclassifiermodel attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[26, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "transform() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.transform"]], "validationsplit (genericlogregclassifierapproach attribute)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.validationSplit"]], "write() (genericlogregclassifierapproach method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.write"]], "write() (genericlogregclassifiermodel method)": [[26, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.write"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "batchsize (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.batchSize"]], "classes (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.classes"]], "clear() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.clear"]], "clear() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.clear"]], "copy() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.copy"]], "copy() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.copy"]], "datasetinfo (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.datasetInfo"]], "datasetinfo (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.datasetInfo"]], "doexceptionhandling (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.doExceptionHandling"]], "dropout (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.dropout"]], "engine (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.engine"]], "epochsn (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.epochsN"]], "explainparam() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.explainParam"]], "explainparam() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.explainParam"]], "explainparams() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.explainParams"]], "explainparams() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.explainParams"]], "extractparammap() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.extractParamMap"]], "extractparammap() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.extractParamMap"]], "featurescaling (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.featureScaling"]], "featurescaling (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.featureScaling"]], "fit() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fit"]], "fitmultiple() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fitMultiple"]], "fiximbalance (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fixImbalance"]], "getengine() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getEngine"]], "getinputcols() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getInputCols"]], "getinputcols() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getInputCols"]], "getlazyannotator() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getLazyAnnotator"]], "getordefault() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getOrDefault"]], "getordefault() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getOrDefault"]], "getoutputcol() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getOutputCol"]], "getoutputcol() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getOutputCol"]], "getparam() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getParam"]], "getparam() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getParam"]], "getparamvalue() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getParamValue"]], "getparamvalue() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getParamValue"]], "getter_attrs (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getter_attrs"]], "getter_attrs (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getter_attrs"]], "hasdefault() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.hasDefault"]], "hasdefault() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.hasDefault"]], "hasparam() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.hasParam"]], "hasparam() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.hasParam"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "inputcols (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputCols"]], "inputcols (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputCols"]], "inputcolsvalidation() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputColsValidation"]], "isdefined() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.isDefined"]], "isdefined() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.isDefined"]], "isset() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.isSet"]], "isset() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.isSet"]], "labelcolumn (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.labelColumn"]], "lazyannotator (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.lazyAnnotator"]], "lazyannotator (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.lazyAnnotator"]], "learningrate (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.learningRate"]], "load() (genericsvmclassifierapproach class method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.load"]], "load() (genericsvmclassifiermodel class method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.load"]], "modelfile (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.modelFile"]], "multiclass (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.multiClass"]], "multiclass (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.multiClass"]], "name (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "optionalinputannotatortypes (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "outputcol (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputCol"]], "outputcol (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputCol"]], "outputlogspath (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputLogsPath"]], "pretrained() (genericsvmclassifiermodel static method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "read() (genericsvmclassifierapproach class method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.read"]], "read() (genericsvmclassifiermodel class method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.read"]], "save() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.save"]], "save() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.save"]], "set() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.set"]], "set() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.set"]], "setbatchsize() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setDoExceptionHandling"]], "setdropout() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDropout"]], "setepochsnumber() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setInputCols"]], "setinputcols() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setInputCols"]], "setlabelcol() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLabelCol"]], "setlazyannotator() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLearningRate"]], "setmodelfile() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setModelFile"]], "setmulticlass() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setMultiClass"]], "setmulticlass() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setMultiClass"]], "setoutputcol() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setOutputCol"]], "setoutputcol() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setOutputCol"]], "setoutputlogspath() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setParamValue"]], "setparamvalue() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setParamValue"]], "setparams() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setParams"]], "setvalidationsplit() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericsvmclassifiermodel attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[27, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "transform() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.transform"]], "validationsplit (genericsvmclassifierapproach attribute)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.validationSplit"]], "write() (genericsvmclassifierapproach method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.write"]], "write() (genericsvmclassifiermodel method)": [[27, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.write"]], "sparknlp_jsl.annotator.classification": [[28, "module-sparknlp_jsl.annotator.classification"]], "largefewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.large_few_shot_classifier)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel"]], "batchsize (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.batchSize"]], "casesensitive (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.caseSensitive"]], "clear() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.clear"]], "copy() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.copy"]], "explainparam() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.explainParam"]], "explainparams() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.explainParams"]], "extractparammap() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.extractParamMap"]], "getbatchsize() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getBatchSize"]], "getcasesensitive() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getCaseSensitive"]], "getclasses() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getClasses"]], "getinputcols() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getInputCols"]], "getlazyannotator() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getLazyAnnotator"]], "getmaxsentencelength() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getMaxSentenceLength"]], "getordefault() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getOrDefault"]], "getoutputcol() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getOutputCol"]], "getparam() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getParam"]], "getparamvalue() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getParamValue"]], "getter_attrs (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getter_attrs"]], "hasdefault() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasDefault"]], "hasdifferentiablehead (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasDifferentiableHead"]], "hasparam() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasParam"]], "inputannotatortypes (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputColsValidation"]], "isdefined() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.isDefined"]], "isset() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.isSet"]], "lazyannotator (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.lazyAnnotator"]], "load() (largefewshotclassifiermodel class method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.load"]], "loadsavedmodel() (largefewshotclassifiermodel static method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.loadSavedModel"]], "maxsentencelength (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.maxSentenceLength"]], "max_length_limit (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.max_length_limit"]], "modelarchitecture (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.modelArchitecture"]], "name (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.name"]], "optionalinputannotatortypes (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.outputAnnotatorType"]], "outputcol (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.outputCol"]], "pretrained() (largefewshotclassifiermodel static method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.pretrained"]], "read() (largefewshotclassifiermodel class method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.read"]], "save() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.save"]], "set() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.set"]], "setbatchsize() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setBatchSize"]], "setcasesensitive() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setCaseSensitive"]], "setforceinputtypevalidation() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setInputCols"]], "setlazyannotator() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setLazyAnnotator"]], "setmaxsentencelength() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setMaxSentenceLength"]], "setoutputcol() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setOutputCol"]], "setparamvalue() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setParamValue"]], "setparams() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setParams"]], "skiplpinputcolsvalidation (largefewshotclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[29, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"]], "transform() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.transform"]], "write() (largefewshotclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.write"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "batchsize (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.batchSize"]], "casesensitive (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.caseSensitive"]], "clear() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.clear"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "copy() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.copy"]], "explainparam() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.explainParam"]], "explainparams() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.explainParams"]], "extractparammap() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.extractParamMap"]], "getbatchsize() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getBatchSize"]], "getcasesensitive() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getCaseSensitive"]], "getclasses() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "getinputcols() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getInputCols"]], "getlazyannotator() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getOrDefault"]], "getoutputcol() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getOutputCol"]], "getparam() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getParam"]], "getparamvalue() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getParamValue"]], "getter_attrs (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getter_attrs"]], "hasdefault() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.hasDefault"]], "hasparam() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.hasParam"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputColsValidation"]], "isdefined() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.isDefined"]], "isset() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.isSet"]], "lazyannotator (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.lazyAnnotator"]], "load() (medicalbertforsequenceclassification class method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.load"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "optionalinputannotatortypes (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "outputcol (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputCol"]], "pretrained() (medicalbertforsequenceclassification static method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "read() (medicalbertforsequenceclassification class method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.read"]], "save() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.save"]], "set() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.set"]], "setbatchsize() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setBatchSize"]], "setcasesensitive() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setInputCols"]], "setlazyannotator() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setOutputCol"]], "setparamvalue() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setParamValue"]], "setparams() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (medicalbertforsequenceclassification attribute)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[30, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "transform() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.transform"]], "write() (medicalbertforsequenceclassification method)": [[30, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.write"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "batchsize (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.batchSize"]], "casesensitive (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.caseSensitive"]], "clear() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.clear"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "copy() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.copy"]], "explainparam() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.explainParam"]], "explainparams() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.explainParams"]], "extractparammap() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.extractParamMap"]], "getbatchsize() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getBatchSize"]], "getcasesensitive() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getCaseSensitive"]], "getclasses() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "getinputcols() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getInputCols"]], "getlazyannotator() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getLazyAnnotator"]], "getordefault() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getOrDefault"]], "getoutputcol() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getOutputCol"]], "getparam() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getParam"]], "getparamvalue() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getParamValue"]], "getter_attrs (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getter_attrs"]], "hasdefault() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.hasDefault"]], "hasparam() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.hasParam"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "inputcols (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputCols"]], "inputcolsvalidation() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputColsValidation"]], "isdefined() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.isDefined"]], "isset() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.isSet"]], "lazyannotator (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.lazyAnnotator"]], "load() (medicalbertfortokenclassifier class method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.load"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "optionalinputannotatortypes (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "outputcol (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputCol"]], "pretrained() (medicalbertfortokenclassifier static method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "read() (medicalbertfortokenclassifier class method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.read"]], "save() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.save"]], "set() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.set"]], "setbatchsize() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setBatchSize"]], "setcasesensitive() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setCaseSensitive"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setForceInputTypeValidation"]], "setinputcols() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setInputCols"]], "setlazyannotator() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setLazyAnnotator"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "setoutputcol() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setOutputCol"]], "setparamvalue() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setParamValue"]], "setparams() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setParams"]], "skiplpinputcolsvalidation (medicalbertfortokenclassifier attribute)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[31, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "transform() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.transform"]], "write() (medicalbertfortokenclassifier method)": [[31, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.write"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "batchsize (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.batchSize"]], "casesensitive (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.caseSensitive"]], "clear() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.clear"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "copy() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.copy"]], "explainparam() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.explainParam"]], "explainparams() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.explainParams"]], "extractparammap() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.extractParamMap"]], "getbatchsize() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getBatchSize"]], "getcasesensitive() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getCaseSensitive"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "getinputcols() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getInputCols"]], "getlazyannotator() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getOrDefault"]], "getoutputcol() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getOutputCol"]], "getparam() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getParam"]], "getparamvalue() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getParamValue"]], "getter_attrs (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getter_attrs"]], "hasdefault() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.hasDefault"]], "hasparam() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.hasParam"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputColsValidation"]], "isdefined() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.isDefined"]], "isset() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.isSet"]], "lazyannotator (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.lazyAnnotator"]], "load() (medicaldistilbertforsequenceclassification class method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.load"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "optionalinputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "outputcol (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputCol"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "read() (medicaldistilbertforsequenceclassification class method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.read"]], "save() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.save"]], "set() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.set"]], "setbatchsize() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setBatchSize"]], "setcasesensitive() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setInputCols"]], "setlazyannotator() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setOutputCol"]], "setparamvalue() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setParamValue"]], "setparams() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (medicaldistilbertforsequenceclassification attribute)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[32, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "transform() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.transform"]], "write() (medicaldistilbertforsequenceclassification method)": [[32, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.write"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "clear() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.clear"]], "clear() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.clear"]], "completecontextmatch (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "copy() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.copy"]], "copy() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.copy"]], "dictionary (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "doexceptionhandling (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.doExceptionHandling"]], "doexceptionhandling (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.doExceptionHandling"]], "explainparam() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.explainParam"]], "explainparam() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.explainParam"]], "explainparams() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.explainParams"]], "explainparams() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.explainParams"]], "extractparammap() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.extractParamMap"]], "extractparammap() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.extractParamMap"]], "fit() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.fit"]], "fitmultiple() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.fitMultiple"]], "getinputcols() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getInputCols"]], "getinputcols() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getInputCols"]], "getlazyannotator() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getLazyAnnotator"]], "getlazyannotator() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getLazyAnnotator"]], "getordefault() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getOrDefault"]], "getordefault() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getOrDefault"]], "getoutputcol() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getOutputCol"]], "getoutputcol() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getOutputCol"]], "getparam() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getParam"]], "getparam() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getParam"]], "getparamvalue() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getParamValue"]], "getparamvalue() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getParamValue"]], "getter_attrs (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getter_attrs"]], "getter_attrs (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getter_attrs"]], "hasdefault() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.hasDefault"]], "hasdefault() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.hasDefault"]], "hasparam() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.hasParam"]], "hasparam() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.hasParam"]], "inputannotatortypes (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "inputcols (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputCols"]], "inputcols (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputCols"]], "inputcolsvalidation() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputColsValidation"]], "inputcolsvalidation() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputColsValidation"]], "isdefined() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.isDefined"]], "isdefined() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.isDefined"]], "isset() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.isSet"]], "isset() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.isSet"]], "jsonpath (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "lazyannotator (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.lazyAnnotator"]], "lazyannotator (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.lazyAnnotator"]], "load() (contextualparserapproach class method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.load"]], "load() (contextualparsermodel class method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.load"]], "name (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.name"]], "optionalcontextrules (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "optionalinputannotatortypes (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "outputcol (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputCol"]], "outputcol (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputCol"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "pretrained() (contextualparsermodel static method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.pretrained"]], "read() (contextualparserapproach class method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.read"]], "read() (contextualparsermodel class method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.read"]], "save() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.save"]], "save() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.save"]], "set() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.set"]], "set() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.set"]], "setcasesensitive() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setdoexceptionhandling() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setDoExceptionHandling"]], "setforceinputtypevalidation() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setForceInputTypeValidation"]], "setinputcols() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setInputCols"]], "setinputcols() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setInputCols"]], "setjsonpath() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setlazyannotator() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setLazyAnnotator"]], "setlazyannotator() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setLazyAnnotator"]], "setoptionalcontextrules() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setoutputcol() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOutputCol"]], "setoutputcol() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOutputCol"]], "setparamvalue() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setParamValue"]], "setparamvalue() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setParamValue"]], "setparams() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setParams"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "skiplpinputcolsvalidation (contextualparserapproach attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (contextualparsermodel attribute)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.context.contextual_parser": [[33, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "transform() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.transform"]], "write() (contextualparserapproach method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.write"]], "write() (contextualparsermodel method)": [[33, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.write"]], "sparknlp_jsl.annotator.context": [[34, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "ageranges (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ageRanges"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRanges"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRanges"]], "agerangesbyhipaa (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRangesByHipaa"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ageRangesByHipaa"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ageRangesByHipaa"]], "agerangesbyhipaa (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"]], "blacklist (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.blackList"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.blackList"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.blackList"]], "blacklistentities (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackListEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.blackListEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.blackListEntities"]], "blacklistentities (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackListEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.blackListEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.blackListEntities"]], "clear() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.clear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.clear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.clear"]], "clear() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.clear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.clear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.clear"]], "combineregexpatterns (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.combineRegexPatterns"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.combineRegexPatterns"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.combineRegexPatterns"]], "consistentobfuscation (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.consistentObfuscation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentObfuscation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "copy() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.copy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.copy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.copy"]], "copy() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.copy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.copy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.copy"]], "dateformats (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateFormats"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateFormats"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateToYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateToYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.days"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.days"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.days"]], "doexceptionhandling (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.doExceptionHandling"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.doExceptionHandling"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.doExceptionHandling"]], "doexceptionhandling (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.doExceptionHandling"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.doExceptionHandling"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.doExceptionHandling"]], "entitycasingmodespath (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.entityCasingModesPath"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "explainparam() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.explainParam"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.explainParam"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.explainParam"]], "explainparam() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.explainParam"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParam"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParam"]], "explainparams() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.explainParams"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.explainParams"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.explainParams"]], "explainparams() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.explainParams"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParams"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParams"]], "extractparammap() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.extractParamMap"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.extractParamMap"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.extractParamMap"]], "extractparammap() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.extractParamMap"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.extractParamMap"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.extractParamMap"]], "fit() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fit"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fit"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fit"]], "fitmultiple() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fitMultiple"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fitMultiple"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fitMultiple"]], "fixedmasklength (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fixedMaskLength"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.fixedMaskLength"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "genderawareness (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.genderAwareness"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.genderAwareness"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.genderAwareness"]], "genderawareness (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.genderAwareness"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.genderAwareness"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.genderAwareness"]], "getblacklist() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getBlackList"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getBlackList"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getinputcols() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getInputCols"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getInputCols"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getInputCols"]], "getinputcols() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getInputCols"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getInputCols"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getInputCols"]], "getlazyannotator() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getLazyAnnotator"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getLazyAnnotator"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getLazyAnnotator"]], "getlazyannotator() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"]], "getordefault() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getOrDefault"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getOrDefault"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getOrDefault"]], "getordefault() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getOrDefault"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getOrDefault"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getOrDefault"]], "getoutputcol() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getOutputCol"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getOutputCol"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getOutputCol"]], "getoutputcol() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getOutputCol"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getOutputCol"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getOutputCol"]], "getparam() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getParam"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getParam"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getParam"]], "getparam() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getParam"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getParam"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getParam"]], "getparamvalue() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getParamValue"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getParamValue"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getParamValue"]], "getparamvalue() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getParamValue"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getParamValue"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getParamValue"]], "getregexentities() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getRegexEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "getsamelengthformattedentities() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"]], "getsamelengthformattedentities() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"]], "getuseshiftdays() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getUseShiftDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getUseShiftDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getUseShiftDays"]], "getuseshiftdays() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getUseShiftDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getUseShiftDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getUseShiftDays"]], "getter_attrs (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getter_attrs"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getter_attrs"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getter_attrs"]], "getter_attrs (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getter_attrs"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getter_attrs"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getter_attrs"]], "hasdefault() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.hasDefault"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.hasDefault"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.hasDefault"]], "hasdefault() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.hasDefault"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.hasDefault"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.hasDefault"]], "hasparam() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.hasParam"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.hasParam"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.hasParam"]], "hasparam() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.hasParam"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.hasParam"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.hasParam"]], "ignoreregex (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ignoreRegex"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ignoreRegex"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputAnnotatorTypes"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "inputcols (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputCols"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputCols"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputCols"]], "inputcols (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputCols"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputCols"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputCols"]], "inputcolsvalidation() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputColsValidation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputColsValidation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputColsValidation"]], "inputcolsvalidation() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputColsValidation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputColsValidation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputColsValidation"]], "isdefined() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isDefined"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isDefined"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isDefined"]], "isdefined() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isDefined"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isDefined"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isDefined"]], "israndomdatedisplacement (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isRandomDateDisplacement"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "isset() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isSet"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isSet"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isSet"]], "isset() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isSet"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isSet"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isSet"]], "keepyear (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.keepYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.keepYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.keepYear"]], "keepyear (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.keepYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.keepYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.keepYear"]], "language (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.language"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.language"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.language"]], "lazyannotator (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.lazyAnnotator"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.lazyAnnotator"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.lazyAnnotator"]], "lazyannotator (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.lazyAnnotator"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.lazyAnnotator"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.lazyAnnotator"]], "load() (deidentification class method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.load"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.load"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.load"]], "load() (deidentificationmodel class method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.load"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.load"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.load"]], "mappingscolumn (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.mappingsColumn"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.mappingsColumn"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.maskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.maskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "metadatamaskingpolicy (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.metadataMaskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.metadataMaskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.metadataMaskingPolicy"]], "metadatamaskingpolicy (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"]], "minyear (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.minYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.minYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.mode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.mode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatebyagegroups (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"]], "obfuscatebyagegroups (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"]], "obfuscatedate (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateDate"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateDate"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefFile"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefSource"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"]], "obfuscationstrategyonexception (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"]], "optionalinputannotatortypes (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"]], "outputannotatortype (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputAnnotatorType"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputAsDocument"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAsDocument"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "outputcol (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputCol"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputCol"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputCol"]], "outputcol (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputCol"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputCol"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputCol"]], "pretrained() (deidentificationmodel static method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "read() (deidentification class method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.read"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.read"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.read"]], "read() (deidentificationmodel class method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.read"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.read"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.read"]], "reffileformat (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.refFileFormat"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.refSep"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.regexEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexOverride"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.regexOverride"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionary"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "regexpatternsdictionaryasjsonstring (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"]], "region (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.region"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.region"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.returnEntityMappings"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.returnEntityMappings"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.sameEntityThreshold"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "samelengthformattedentities (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"]], "samelengthformattedentities (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"]], "save() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.save"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.save"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.save"]], "save() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.save"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.save"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.save"]], "seed (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.seed"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.seed"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.seed"]], "selectiveobfuscationmodespath (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "set() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.set"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.set"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.set"]], "set() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.set"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.set"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.set"]], "setagegroups() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeGroups"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeGroups"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeGroups"]], "setagegroups() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeGroups"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeGroups"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeGroups"]], "setageranges() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeRanges"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRanges"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setagerangesbyhipaa() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"]], "setagerangesbyhipaa() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"]], "setblacklist() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setBlackList"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackList"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setblacklistentities() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackListEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setBlackListEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setBlackListEntities"]], "setblacklistentities() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackListEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackListEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackListEntities"]], "setcombineregexpatterns() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setCombineRegexPatterns"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setCombineRegexPatterns"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setCombineRegexPatterns"]], "setconsistentobfuscation() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setConsistentObfuscation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateFormats"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateFormats"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateToYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateToYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDays"]], "setdoexceptionhandling() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDoExceptionHandling"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDoExceptionHandling"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDoExceptionHandling"]], "setdoexceptionhandling() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDoExceptionHandling"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDoExceptionHandling"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDoExceptionHandling"]], "setentitycasingmodes() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setEntityCasingModes"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setfixedmasklength() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setFixedMaskLength"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setforceinputtypevalidation() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setForceInputTypeValidation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setForceInputTypeValidation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setForceInputTypeValidation"]], "setforceinputtypevalidation() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"]], "setgenderawareness() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGenderAwareness"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setGenderAwareness"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setGenderAwareness"]], "setgenderawareness() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGenderAwareness"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setGenderAwareness"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setGenderAwareness"]], "setignoreregex() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setIgnoreRegex"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setinputcols() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setInputCols"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setInputCols"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setInputCols"]], "setinputcols() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setInputCols"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setInputCols"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setInputCols"]], "setisrandomdatedisplacement() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setkeepyear() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setKeepYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setKeepYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setKeepYear"]], "setkeepyear() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setKeepYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepYear"]], "setlanguage() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setLanguage"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setLanguage"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setlazyannotator() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLazyAnnotator"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setLazyAnnotator"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setLazyAnnotator"]], "setlazyannotator() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"]], "setmappingscolumn() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMappingsColumn"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMappingsColumn"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMaskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"]], "setminyear() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMinYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMinYear"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatebyagegroups() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"]], "setobfuscatebyagegroups() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"]], "setobfuscatedate() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateDate"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateDate"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefFile"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefSource"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setobfuscationstrategyonexception() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"]], "setobfuscationstrategyonexception() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setOutputAsDocument"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setoutputcol() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputCol"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setOutputCol"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setOutputCol"]], "setoutputcol() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputCol"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputCol"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputCol"]], "setparamvalue() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setParamValue"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setParamValue"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setParamValue"]], "setparamvalue() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setParamValue"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setParamValue"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setParamValue"]], "setparams() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setParams"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setParams"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setParams"]], "setreffileformat() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRefFileFormat"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRefSep"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexOverride"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegexOverride"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregexpatternsdictionaryasjsonstring() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"]], "setregion() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegion"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegion"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setReturnEntityMappings"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSameEntityThreshold"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"]], "setsamelengthformattedentities() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"]], "setseed() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSeed"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSeed"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSeed"]], "setselectiveobfuscationmodes() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUseShifDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShifDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setuseshiftdays() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShiftDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUseShiftDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUseShiftDays"]], "setuseshiftdays() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShiftDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShiftDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShiftDays"]], "setzipcodetag() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setZipCodeTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setZipCodeTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "skiplpinputcolsvalidation (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.skipLPInputColsValidation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.skipLPInputColsValidation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.deidentification": [[35, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "transform() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.transform"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.transform"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.transform"]], "unnormalizeddatemode (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.unnormalizedDateMode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.useShifDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.useShifDays"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.useShifDays"]], "write() (deidentification method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.write"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.write"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.write"]], "write() (deidentificationmodel method)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.write"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.write"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.write"]], "zipcodetag (deidentification attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.zipCodeTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[35, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"], [119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.zipCodeTag"], [153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "deidentificationparams (class in sparknlp_jsl.annotator.deid.deidentication_params)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams"]], "ageranges (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRanges"]], "agerangesbyhipaa (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRangesByHipaa"]], "blacklist (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackList"]], "blacklistentities (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackListEntities"]], "consistentobfuscation (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.consistentObfuscation"]], "dateformats (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateFormats"]], "datetag (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateTag"]], "datetoyear (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateToYear"]], "days (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.days"]], "fixedmasklength (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.fixedMaskLength"]], "genderawareness (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.genderAwareness"]], "getblacklist() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getBlackList"]], "getsamelengthformattedentities() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getSameLengthFormattedEntities"]], "getuseshiftdays() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getUseShiftDays"]], "ignoreregex (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ignoreRegex"]], "israndomdatedisplacement (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.isRandomDateDisplacement"]], "keepyear (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.keepYear"]], "language (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.language"]], "mappingscolumn (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mappingsColumn"]], "maskingpolicy (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.maskingPolicy"]], "metadatamaskingpolicy (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.metadataMaskingPolicy"]], "minyear (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.minYear"]], "mode (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mode"]], "obfuscatebyagegroups (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateByAgeGroups"]], "obfuscatedate (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateDate"]], "obfuscaterefsource (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscationStrategyOnException"]], "outputasdocument (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.outputAsDocument"]], "regexoverride (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.regexOverride"]], "region (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.region"]], "returnentitymappings (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.returnEntityMappings"]], "sameentitythreshold (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameEntityThreshold"]], "samelengthformattedentities (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameLengthFormattedEntities"]], "seed (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.seed"]], "setagegroups() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeGroups"]], "setageranges() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRanges"]], "setagerangesbyhipaa() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRangesByHipaa"]], "setblacklist() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackList"]], "setblacklistentities() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackListEntities"]], "setconsistentobfuscation() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setConsistentObfuscation"]], "setdateformats() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateFormats"]], "setdatetag() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateTag"]], "setdatetoyear() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateToYear"]], "setdays() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDays"]], "setfixedmasklength() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setFixedMaskLength"]], "setgenderawareness() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGenderAwareness"]], "setignoreregex() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIsRandomDateDisplacement"]], "setkeepyear() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setKeepYear"]], "setlanguage() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setLanguage"]], "setmappingscolumn() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMappingsColumn"]], "setmaskingpolicy() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMetadataMaskingPolicy"]], "setminyear() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMinYear"]], "setmode() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMode"]], "setobfuscatebyagegroups() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateByAgeGroups"]], "setobfuscatedate() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateDate"]], "setobfuscaterefsource() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateRefSource"]], "setobfuscationstrategyonexception() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setOutputAsDocument"]], "setregexoverride() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegexOverride"]], "setregion() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegion"]], "setreturnentitymappings() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setReturnEntityMappings"]], "setsameentitythreshold() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameLengthFormattedEntities"]], "setseed() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSeed"]], "setunnormalizeddatemode() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUnnormalizedDateMode"]], "setuseshifdays() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShifDays"]], "setuseshiftdays() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShiftDays"]], "setzipcodetag() (deidentificationparams method)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[36, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "unnormalizeddatemode (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.unnormalizedDateMode"]], "useshifdays (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.useShifDays"]], "zipcodetag (deidentificationparams attribute)": [[36, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "clear() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.clear"]], "copy() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.copy"]], "dateshiftcolumn (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "explainparam() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.explainParam"]], "explainparams() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.explainParams"]], "extractparammap() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.extractParamMap"]], "getinputcols() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getInputCols"]], "getlazyannotator() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getLazyAnnotator"]], "getordefault() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getOrDefault"]], "getoutputcol() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getOutputCol"]], "getparam() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getParam"]], "getparamvalue() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getParamValue"]], "getter_attrs (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getter_attrs"]], "hasdefault() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.hasDefault"]], "hasparam() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.hasParam"]], "inputannotatortypes (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "inputcols (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputCols"]], "inputcolsvalidation() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputColsValidation"]], "isdefined() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.isDefined"]], "isset() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.isSet"]], "lazyannotator (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.lazyAnnotator"]], "load() (documenthashcoder class method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.load"]], "name (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "outputcol (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputCol"]], "patientidcolumn (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "read() (documenthashcoder class method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.read"]], "save() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.save"]], "seed (documenthashcoder attribute)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "set() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.set"]], "setdateshiftcolumn() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setinputcols() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setInputCols"]], "setlazyannotator() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setoutputcol() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setOutputCol"]], "setparamvalue() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParamValue"]], "setparams() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[37, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "transform() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.transform"]], "write() (documenthashcoder method)": [[37, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.write"]], "sparknlp_jsl.annotator.deid": [[38, "module-sparknlp_jsl.annotator.deid"]], "lightdeidentification (class in sparknlp_jsl.annotator.deid.light_deidentification)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification"]], "ageranges (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.ageRanges"]], "clear() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.clear"]], "copy() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.copy"]], "dateentities (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.dateEntities"]], "dateformats (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.dateFormats"]], "days (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.days"]], "explainparam() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.explainParam"]], "explainparams() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.explainParams"]], "extractparammap() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.extractParamMap"]], "fixedmasklength (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.fixedMaskLength"]], "genderawareness (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.genderAwareness"]], "getinputcols() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getInputCols"]], "getlazyannotator() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getLazyAnnotator"]], "getordefault() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getOrDefault"]], "getoutputcol() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getOutputCol"]], "getparam() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getParam"]], "getparamvalue() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getParamValue"]], "getter_attrs (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getter_attrs"]], "hasdefault() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.hasDefault"]], "hasparam() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.hasParam"]], "inputannotatortypes (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputAnnotatorTypes"]], "inputcols (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputCols"]], "inputcolsvalidation() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputColsValidation"]], "isdefined() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.isDefined"]], "isset() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.isSet"]], "language (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.language"]], "lazyannotator (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.lazyAnnotator"]], "load() (lightdeidentification class method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.load"]], "maskingpolicy (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.maskingPolicy"]], "mode (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.mode"]], "name (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.name"]], "obfuscatedate (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.obfuscateDate"]], "obfuscaterefsource (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.obfuscateRefSource"]], "optionalinputannotatortypes (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.optionalInputAnnotatorTypes"]], "outputannotatortype (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.outputAnnotatorType"]], "outputcol (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.outputCol"]], "read() (lightdeidentification class method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.read"]], "region (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.region"]], "samelengthformattedentities (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.sameLengthFormattedEntities"]], "save() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.save"]], "seed (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.seed"]], "set() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.set"]], "setageranges() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setAgeRanges"]], "setcustomfakers() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setCustomFakers"]], "setdateentities() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDateEntities"]], "setdateformats() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDateFormats"]], "setdays() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDays"]], "setfixedmasklength() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setFixedMaskLength"]], "setforceinputtypevalidation() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setForceInputTypeValidation"]], "setgenderawareness() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setGenderAwareness"]], "setinputcols() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setInputCols"]], "setlanguage() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setLanguage"]], "setlazyannotator() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setLazyAnnotator"]], "setmaskingpolicy() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setMaskingPolicy"]], "setmode() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setMode"]], "setobfuscatedate() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscateDate"]], "setobfuscaterefsource() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscateRefSource"]], "setoutputcol() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setOutputCol"]], "setparamvalue() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setParamValue"]], "setparams() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setParams"]], "setregion() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setRegion"]], "setsamelengthformattedentities() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSameLengthFormattedEntities"]], "setseed() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSeed"]], "setselectiveobfuscationmodes() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setUnnormalizedDateMode"]], "setuseshiftdays() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setUseShiftDays"]], "skiplpinputcolsvalidation (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.light_deidentification": [[39, "module-sparknlp_jsl.annotator.deid.light_deIdentification"]], "transform() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.transform"]], "unnormalizeddatemode (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.unnormalizedDateMode"]], "useshiftdays (lightdeidentification attribute)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.useShiftDays"]], "write() (lightdeidentification method)": [[39, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.write"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "clear() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.clear"]], "clear() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.clear"]], "copy() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.copy"]], "copy() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.copy"]], "explainparam() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.explainParam"]], "explainparam() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.explainParam"]], "explainparams() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.explainParams"]], "explainparams() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.explainParams"]], "extractparammap() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.extractParamMap"]], "extractparammap() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.extractParamMap"]], "fit() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.fit"]], "fitmultiple() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.fitMultiple"]], "genderawareness (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "getinputcols() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getInputCols"]], "getinputcols() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getInputCols"]], "getlazyannotator() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getLazyAnnotator"]], "getlazyannotator() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getLazyAnnotator"]], "getordefault() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getOrDefault"]], "getordefault() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getOrDefault"]], "getoutputcol() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getOutputCol"]], "getoutputcol() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getOutputCol"]], "getparam() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getParam"]], "getparam() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getParam"]], "getparamvalue() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getParamValue"]], "getparamvalue() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getParamValue"]], "getter_attrs (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getter_attrs"]], "getter_attrs (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getter_attrs"]], "hasdefault() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.hasDefault"]], "hasdefault() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.hasDefault"]], "hasparam() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.hasParam"]], "hasparam() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.hasParam"]], "inputannotatortypes (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "inputcols (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputCols"]], "inputcols (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputCols"]], "inputcolsvalidation() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputColsValidation"]], "inputcolsvalidation() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputColsValidation"]], "isdefined() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.isDefined"]], "isdefined() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.isDefined"]], "isset() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.isSet"]], "isset() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.isSet"]], "language (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "lazyannotator (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.lazyAnnotator"]], "lazyannotator (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.lazyAnnotator"]], "load() (namechunkobfuscator class method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.load"]], "load() (namechunkobfuscatorapproach class method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.load"]], "nameentities (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "optionalinputannotatortypes (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.optionalInputAnnotatorTypes"]], "outputannotatortype (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "outputcol (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputCol"]], "outputcol (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputCol"]], "read() (namechunkobfuscator class method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.read"]], "read() (namechunkobfuscatorapproach class method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.read"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "save() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.save"]], "save() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.save"]], "seed (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "set() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.set"]], "set() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.set"]], "setforceinputtypevalidation() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setForceInputTypeValidation"]], "setforceinputtypevalidation() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setForceInputTypeValidation"]], "setgenderawareness() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setinputcols() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setInputCols"]], "setinputcols() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setInputCols"]], "setlanguage() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setlazyannotator() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLazyAnnotator"]], "setlazyannotator() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLazyAnnotator"]], "setnameentities() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setoutputcol() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setOutputCol"]], "setoutputcol() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setOutputCol"]], "setparamvalue() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setParamValue"]], "setparamvalue() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setParamValue"]], "setparams() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setParams"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "skiplpinputcolsvalidation (namechunkobfuscator attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (namechunkobfuscatorapproach attribute)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[40, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "transform() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.transform"]], "write() (namechunkobfuscator method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.write"]], "write() (namechunkobfuscatorapproach method)": [[40, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.write"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "clear() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.clear"]], "copy() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.copy"]], "explainparam() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.explainParam"]], "explainparams() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.explainParams"]], "extractparammap() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.extractParamMap"]], "getinputcols() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getInputCols"]], "getlazyannotator() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getLazyAnnotator"]], "getordefault() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getOrDefault"]], "getoutputcol() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getOutputCol"]], "getparam() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getParam"]], "getparamvalue() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getParamValue"]], "getter_attrs (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getter_attrs"]], "hasdefault() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.hasDefault"]], "hasparam() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.hasParam"]], "inputannotatortypes (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "inputcols (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputCols"]], "inputcolsvalidation() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputColsValidation"]], "isdefined() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.isDefined"]], "isset() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.isSet"]], "lazyannotator (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.lazyAnnotator"]], "load() (reidentification class method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.load"]], "name (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "optionalinputannotatortypes (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.optionalInputAnnotatorTypes"]], "outputannotatortype (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "outputcol (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputCol"]], "read() (reidentification class method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.read"]], "save() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.save"]], "set() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.set"]], "setforceinputtypevalidation() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setForceInputTypeValidation"]], "setinputcols() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setInputCols"]], "setlazyannotator() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setLazyAnnotator"]], "setoutputcol() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setOutputCol"]], "setparamvalue() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setParamValue"]], "setparams() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setParams"]], "skiplpinputcolsvalidation (reidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.reidentification": [[41, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "transform() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.transform"]], "write() (reidentification method)": [[41, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.write"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "clear() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.clear"]], "copy() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.copy"]], "explainparam() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.explainParam"]], "explainparams() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.explainParams"]], "extractparammap() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.extractParamMap"]], "getinputcols() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getInputCols"]], "getlazyannotator() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getLazyAnnotator"]], "getordefault() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getOrDefault"]], "getoutputcol() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getOutputCol"]], "getparam() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getParam"]], "getparamvalue() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getParamValue"]], "getusereplacement() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "getter_attrs (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.getter_attrs"]], "hasdefault() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.hasDefault"]], "hasparam() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.hasParam"]], "inputannotatortypes (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "inputcols (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputCols"]], "inputcolsvalidation() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputColsValidation"]], "isdefined() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.isDefined"]], "isset() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.isSet"]], "lazyannotator (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.lazyAnnotator"]], "load() (replacer class method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.load"]], "name (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "nonevaluesto (replacer attribute)": [[42, "id0"], [42, "sparknlp_jsl.annotator.deid.replacer.Replacer.noneValuesTo"]], "optionalinputannotatortypes (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.optionalInputAnnotatorTypes"]], "outputannotatortype (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "outputcol (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputCol"]], "placeholder (replacer attribute)": [[42, "id1"], [42, "sparknlp_jsl.annotator.deid.replacer.Replacer.placeHolder"]], "placeholderdelimiters (replacer attribute)": [[42, "id2"], [42, "sparknlp_jsl.annotator.deid.replacer.Replacer.placeHolderDelimiters"]], "read() (replacer class method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.read"]], "save() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.save"]], "set() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.set"]], "setforceinputtypevalidation() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setForceInputTypeValidation"]], "setinputcols() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setInputCols"]], "setlazyannotator() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setLazyAnnotator"]], "setnonevaluesto() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setNoneValuesTo"]], "setoutputcol() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setOutputCol"]], "setparamvalue() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setParamValue"]], "setparams() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setParams"]], "setplaceholder() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setPlaceHolder"]], "setplaceholderdelimiters() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setPlaceHolderDelimiters"]], "setusereplacement() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "skiplpinputcolsvalidation (replacer attribute)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.replacer": [[42, "module-sparknlp_jsl.annotator.deid.replacer"]], "transform() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.transform"]], "usereplacement (replacer attribute)": [[42, "id3"], [42, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "write() (replacer method)": [[42, "sparknlp_jsl.annotator.deid.replacer.Replacer.write"]], "sparknlp_jsl.annotator.disambiguation": [[43, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "clear() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.clear"]], "clear() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.clear"]], "copy() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.copy"]], "copy() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.copy"]], "embeddingtypeparam (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "explainparam() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.explainParam"]], "explainparam() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.explainParam"]], "explainparams() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.explainParams"]], "explainparams() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.explainParams"]], "extractparammap() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.extractParamMap"]], "extractparammap() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.extractParamMap"]], "fit() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.fit"]], "fitmultiple() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.fitMultiple"]], "getinputcols() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getInputCols"]], "getinputcols() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getInputCols"]], "getlazyannotator() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getLazyAnnotator"]], "getlazyannotator() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getLazyAnnotator"]], "getordefault() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getOrDefault"]], "getordefault() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getOrDefault"]], "getoutputcol() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getOutputCol"]], "getoutputcol() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getOutputCol"]], "getparam() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getParam"]], "getparam() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getParam"]], "getparamvalue() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getParamValue"]], "getparamvalue() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getParamValue"]], "getter_attrs (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getter_attrs"]], "getter_attrs (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getter_attrs"]], "hasdefault() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.hasDefault"]], "hasdefault() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.hasDefault"]], "hasparam() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.hasParam"]], "hasparam() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.hasParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "inputcols (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputCols"]], "inputcols (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputCols"]], "inputcolsvalidation() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputColsValidation"]], "inputcolsvalidation() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputColsValidation"]], "isdefined() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.isDefined"]], "isdefined() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.isDefined"]], "isset() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.isSet"]], "isset() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.isSet"]], "lazyannotator (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.lazyAnnotator"]], "lazyannotator (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.lazyAnnotator"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "load() (nerdisambiguator class method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.load"]], "load() (nerdisambiguatormodel class method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.load"]], "name (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "optionalinputannotatortypes (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "outputcol (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputCol"]], "outputcol (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputCol"]], "predictionslimit (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "read() (nerdisambiguator class method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.read"]], "read() (nerdisambiguatormodel class method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.read"]], "s3knowledgebasename (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "save() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.save"]], "save() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.save"]], "set() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.set"]], "set() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.set"]], "setembeddingtype() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setforceinputtypevalidation() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setForceInputTypeValidation"]], "setforceinputtypevalidation() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setForceInputTypeValidation"]], "setinputcols() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setInputCols"]], "setinputcols() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setInputCols"]], "setlazyannotator() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLazyAnnotator"]], "setlazyannotator() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLazyAnnotator"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setoutputcol() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setOutputCol"]], "setoutputcol() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setOutputCol"]], "setparamvalue() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setParamValue"]], "setparamvalue() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setParamValue"]], "setparams() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setParams"]], "setpredictionlimit() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "skiplpinputcolsvalidation (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[44, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "transform() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.transform"]], "write() (nerdisambiguator method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.write"]], "write() (nerdisambiguatormodel method)": [[44, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.write"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "clear() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.clear"]], "copy() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.copy"]], "explainparam() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.explainParam"]], "explainparams() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.explainParams"]], "extractparammap() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.extractParamMap"]], "failonmissing (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "getinputcols() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getInputCols"]], "getlazyannotator() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getLazyAnnotator"]], "getordefault() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getOrDefault"]], "getoutputcol() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getOutputCol"]], "getparam() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getParam"]], "getparamvalue() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getParamValue"]], "getter_attrs (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getter_attrs"]], "hasdefault() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.hasDefault"]], "hasparam() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.hasParam"]], "inputannotatortypes (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "inputcols (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputCols"]], "inputcolsvalidation() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputColsValidation"]], "isarray (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "isdefined() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isDefined"]], "isset() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isSet"]], "lazyannotator (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lazyAnnotator"]], "load() (doc2chunkinternal class method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.load"]], "lowercase (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "optionalinputannotatortypes (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.outputAnnotatorType"]], "outputcol (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.outputCol"]], "read() (doc2chunkinternal class method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.read"]], "save() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.save"]], "set() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.set"]], "setchunkcol() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setinputcols() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setInputCols"]], "setisarray() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlazyannotator() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLazyAnnotator"]], "setlowercase() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setoutputcol() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setOutputCol"]], "setparamvalue() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParamValue"]], "setparams() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[45, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "transform() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.transform"]], "write() (doc2chunkinternal method)": [[45, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.write"]], "documentfiltererbyclassifier (class in sparknlp_jsl.annotator.document_filterer_by_classifier)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier"]], "blacklist (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.blackList"]], "casesensitive (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.caseSensitive"]], "clear() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.clear"]], "copy() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.copy"]], "explainparam() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.explainParam"]], "explainparams() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.explainParams"]], "extractparammap() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.extractParamMap"]], "getinputcols() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getInputCols"]], "getlazyannotator() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getLazyAnnotator"]], "getordefault() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getOrDefault"]], "getoutputcol() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getOutputCol"]], "getparam() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getParam"]], "getparamvalue() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getParamValue"]], "getter_attrs (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getter_attrs"]], "hasdefault() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.hasDefault"]], "hasparam() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.hasParam"]], "inputannotatortypes (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputAnnotatorTypes"]], "inputcols (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputCols"]], "inputcolsvalidation() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputColsValidation"]], "isdefined() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.isDefined"]], "isset() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.isSet"]], "lazyannotator (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.lazyAnnotator"]], "load() (documentfiltererbyclassifier class method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.load"]], "name (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.name"]], "optionalinputannotatortypes (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.optionalInputAnnotatorTypes"]], "outputannotatortype (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputAnnotatorType"]], "outputcol (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputCol"]], "read() (documentfiltererbyclassifier class method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.read"]], "save() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.save"]], "set() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.set"]], "setblacklist() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setBlackList"]], "setcasesensitive() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setCaseSensitive"]], "setdenylist() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setDenyList"]], "setforceinputtypevalidation() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setForceInputTypeValidation"]], "setinputcols() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setInputCols"]], "setlazyannotator() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setLazyAnnotator"]], "setoutputcol() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setOutputCol"]], "setparamvalue() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setParamValue"]], "setparams() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setParams"]], "setwhitelist() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setWhiteList"]], "skiplpinputcolsvalidation (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[46, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "transform() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.transform"]], "whitelist (documentfiltererbyclassifier attribute)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.whiteList"]], "write() (documentfiltererbyclassifier method)": [[46, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.write"]], "documentfiltererbyner (class in sparknlp_jsl.annotator.document_filterer_by_ner)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER"]], "blacklist (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.blackList"]], "casesensitive (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.caseSensitive"]], "clear() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.clear"]], "copy() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.copy"]], "explainparam() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.explainParam"]], "explainparams() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.explainParams"]], "extractparammap() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.extractParamMap"]], "getinputcols() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getInputCols"]], "getlazyannotator() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getLazyAnnotator"]], "getordefault() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getOrDefault"]], "getoutputcol() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getOutputCol"]], "getparam() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getParam"]], "getparamvalue() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getParamValue"]], "getter_attrs (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getter_attrs"]], "hasdefault() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.hasDefault"]], "hasparam() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.hasParam"]], "inputannotatortypes (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputAnnotatorTypes"]], "inputcols (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputCols"]], "inputcolsvalidation() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputColsValidation"]], "isdefined() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.isDefined"]], "isset() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.isSet"]], "joinstring (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.joinString"]], "lazyannotator (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.lazyAnnotator"]], "load() (documentfiltererbyner class method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.load"]], "name (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.name"]], "optionalinputannotatortypes (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.optionalInputAnnotatorTypes"]], "outputannotatortype (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputAnnotatorType"]], "outputasdocument (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputAsDocument"]], "outputcol (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputCol"]], "read() (documentfiltererbyner class method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.read"]], "save() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.save"]], "set() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.set"]], "setblacklist() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setBlackList"]], "setcasesensitive() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setCaseSensitive"]], "setdenylist() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setDenyList"]], "setforceinputtypevalidation() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setForceInputTypeValidation"]], "setinputcols() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setInputCols"]], "setlazyannotator() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setLazyAnnotator"]], "setoutputcol() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setOutputCol"]], "setparamvalue() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setParamValue"]], "setparams() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setParams"]], "setwhitelist() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setWhiteList"]], "skiplpinputcolsvalidation (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[47, "module-sparknlp_jsl.annotator.document_filterer_by_ner"]], "transform() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.transform"]], "whitelist (documentfiltererbyner attribute)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.whiteList"]], "write() (documentfiltererbyner method)": [[47, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.write"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "clear() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.clear"]], "copy() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.copy"]], "explainparam() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.explainParam"]], "explainparams() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.explainParams"]], "extractparammap() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.extractParamMap"]], "getinputcols() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getInputCols"]], "getlazyannotator() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getLazyAnnotator"]], "getordefault() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getOrDefault"]], "getoutputcol() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getOutputCol"]], "getparam() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getParam"]], "getparamvalue() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getParamValue"]], "getter_attrs (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getter_attrs"]], "hasdefault() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.hasDefault"]], "hasparam() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.hasParam"]], "inputannotatortypes (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "inputcols (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputCols"]], "inputcolsvalidation() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputColsValidation"]], "isdefined() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.isDefined"]], "isset() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.isSet"]], "lazyannotator (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.lazyAnnotator"]], "load() (averageembeddings class method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.load"]], "name (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "optionalinputannotatortypes (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "outputcol (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputCol"]], "read() (averageembeddings class method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.read"]], "save() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.save"]], "set() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.set"]], "setforceinputtypevalidation() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setForceInputTypeValidation"]], "setinputcols() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setInputCols"]], "setlazyannotator() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setLazyAnnotator"]], "setoutputcol() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setOutputCol"]], "setparamvalue() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setParamValue"]], "setparams() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setParams"]], "skiplpinputcolsvalidation (averageembeddings attribute)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[48, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "transform() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.transform"]], "write() (averageembeddings method)": [[48, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.write"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "batchsize (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.batchSize"]], "casesensitive (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.caseSensitive"]], "chunkweight (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "clear() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.clear"]], "configprotobytes (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.configProtoBytes"]], "copy() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.copy"]], "dimension (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.dimension"]], "engine (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.engine"]], "explainparam() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.explainParam"]], "explainparams() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.explainParams"]], "extractparammap() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.extractParamMap"]], "getbatchsize() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getBatchSize"]], "getcasesensitive() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getCaseSensitive"]], "getdimension() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getDimension"]], "getengine() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getEngine"]], "getinputcols() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getInputCols"]], "getlazyannotator() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getLazyAnnotator"]], "getmaxsentencelength() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getMaxSentenceLength"]], "getordefault() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getOrDefault"]], "getoutputcol() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getOutputCol"]], "getparam() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getParam"]], "getparamvalue() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getParamValue"]], "getstorageref() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getStorageRef"]], "getter_attrs (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getter_attrs"]], "hasdefault() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.hasDefault"]], "hasparam() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.hasParam"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "inputcols (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputCols"]], "inputcolsvalidation() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputColsValidation"]], "isdefined() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isDefined"]], "islong (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isLong"]], "isset() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isSet"]], "lazyannotator (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.lazyAnnotator"]], "load() (bertsentencechunkembeddings static method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "loadsavedmodel() (bertsentencechunkembeddings static method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.loadSavedModel"]], "maxsentencelength (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.maxSentenceLength"]], "max_length_limit (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.max_length_limit"]], "name (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "optionalinputannotatortypes (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "outputcol (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputCol"]], "pretrained() (bertsentencechunkembeddings static method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "read() (bertsentencechunkembeddings class method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.read"]], "save() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.save"]], "set() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.set"]], "setbatchsize() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setBatchSize"]], "setcasesensitive() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setCaseSensitive"]], "setchunkweight() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "setconfigprotobytes() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setConfigProtoBytes"]], "setdimension() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setDimension"]], "setinputcols() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setInputCols"]], "setislong() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setIsLong"]], "setlazyannotator() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setLazyAnnotator"]], "setmaxsentencelength() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setMaxSentenceLength"]], "setoutputcol() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setOutputCol"]], "setparamvalue() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setParamValue"]], "setparams() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setParams"]], "setstorageref() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setStorageRef"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[49, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "storageref (bertsentencechunkembeddings attribute)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.storageRef"]], "transform() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.transform"]], "write() (bertsentencechunkembeddings method)": [[49, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.write"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "batchsize (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.batchSize"]], "casesensitive (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.caseSensitive"]], "clear() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.clear"]], "configprotobytes (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.configProtoBytes"]], "copy() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.copy"]], "dimension (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.dimension"]], "engine (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.engine"]], "entityweights (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "explainparam() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.explainParam"]], "explainparams() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.explainParams"]], "extractparammap() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.extractParamMap"]], "getbatchsize() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getBatchSize"]], "getcasesensitive() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getCaseSensitive"]], "getdimension() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getDimension"]], "getengine() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getEngine"]], "getinputcols() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getInputCols"]], "getlazyannotator() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getLazyAnnotator"]], "getmaxsentencelength() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getMaxSentenceLength"]], "getordefault() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getOrDefault"]], "getoutputcol() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getOutputCol"]], "getparam() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getParam"]], "getparamvalue() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getParamValue"]], "getstorageref() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getStorageRef"]], "getter_attrs (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getter_attrs"]], "hasdefault() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.hasDefault"]], "hasparam() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.hasParam"]], "inputannotatortypes (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "inputcols (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputCols"]], "inputcolsvalidation() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputColsValidation"]], "isdefined() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isDefined"]], "islong (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isLong"]], "isset() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isSet"]], "lazyannotator (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.lazyAnnotator"]], "load() (entitychunkembeddings class method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.load"]], "loadsavedmodel() (entitychunkembeddings static method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.loadSavedModel"]], "maxsentencelength (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSentenceLength"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "max_length_limit (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.max_length_limit"]], "name (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "optionalinputannotatortypes (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "outputcol (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputCol"]], "pretrained() (entitychunkembeddings static method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "read() (entitychunkembeddings class method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.read"]], "save() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.save"]], "set() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.set"]], "setbatchsize() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setBatchSize"]], "setcasesensitive() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setCaseSensitive"]], "setconfigprotobytes() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setConfigProtoBytes"]], "setdimension() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setDimension"]], "setentityweights() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setinputcols() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setInputCols"]], "setislong() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setIsLong"]], "setlazyannotator() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setLazyAnnotator"]], "setmaxsentencelength() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSentenceLength"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "setoutputcol() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setOutputCol"]], "setparamvalue() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setParamValue"]], "setparams() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setParams"]], "setstorageref() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setStorageRef"]], "settargetentities() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[50, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "storageref (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.storageRef"]], "targetentities (entitychunkembeddings attribute)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "transform() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.transform"]], "write() (entitychunkembeddings method)": [[50, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.write"]], "extractivesummarization (class in sparknlp_jsl.annotator.embeddings.extractive_summarization)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization"]], "clear() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.clear"]], "copy() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.copy"]], "explainparam() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.explainParam"]], "explainparams() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.explainParams"]], "extractparammap() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.extractParamMap"]], "getinputcols() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getInputCols"]], "getlazyannotator() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getLazyAnnotator"]], "getordefault() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getOrDefault"]], "getoutputcol() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getOutputCol"]], "getparam() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getParam"]], "getparamvalue() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getParamValue"]], "getter_attrs (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getter_attrs"]], "hasdefault() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.hasDefault"]], "hasparam() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.hasParam"]], "inputannotatortypes (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputAnnotatorTypes"]], "inputcols (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputCols"]], "inputcolsvalidation() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputColsValidation"]], "isdefined() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.isDefined"]], "isset() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.isSet"]], "lazyannotator (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.lazyAnnotator"]], "load() (extractivesummarization class method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.load"]], "name (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.name"]], "optionalinputannotatortypes (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.optionalInputAnnotatorTypes"]], "outputannotatortype (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputAnnotatorType"]], "outputcol (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputCol"]], "read() (extractivesummarization class method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.read"]], "returnsingledocument (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.returnSingleDocument"]], "save() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.save"]], "set() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.set"]], "setforceinputtypevalidation() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setForceInputTypeValidation"]], "setinputcols() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setInputCols"]], "setlazyannotator() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setLazyAnnotator"]], "setoutputcol() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setOutputCol"]], "setparamvalue() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setParamValue"]], "setparams() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setParams"]], "setreturnsingledocument() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setReturnSingleDocument"]], "setsimilaritythreshold() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSimilarityThreshold"]], "setsummarysize() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSummarySize"]], "similaritythreshold (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.similarityThreshold"]], "skiplpinputcolsvalidation (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[51, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "summarysize (extractivesummarization attribute)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.summarySize"]], "transform() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.transform"]], "write() (extractivesummarization method)": [[51, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.write"]], "sparknlp_jsl.annotator.embeddings": [[52, "module-sparknlp_jsl.annotator.embeddings"]], "entityrulerinternalapproach (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach"]], "entityrulerinternalmodel (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel"]], "alphabet (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.alphabet"]], "casesensitive (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.caseSensitive"]], "casesensitive (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.caseSensitive"]], "clear() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.clear"]], "clear() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.clear"]], "copy() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.copy"]], "copy() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.copy"]], "database (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.database"]], "enableinmemorystorage (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.enableInMemoryStorage"]], "enableinmemorystorage (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.enableInMemoryStorage"]], "explainparam() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.explainParam"]], "explainparam() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.explainParam"]], "explainparams() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.explainParams"]], "explainparams() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.explainParams"]], "extractparammap() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.extractParamMap"]], "extractparammap() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.extractParamMap"]], "fit() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.fit"]], "fitmultiple() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.fitMultiple"]], "getcasesensitive() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getCaseSensitive"]], "getcasesensitive() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getCaseSensitive"]], "getenableinmemorystorage() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getEnableInMemoryStorage"]], "getenableinmemorystorage() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getEnableInMemoryStorage"]], "getincludestorage() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getIncludeStorage"]], "getincludestorage() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getIncludeStorage"]], "getinputcols() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getInputCols"]], "getinputcols() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getInputCols"]], "getlazyannotator() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getLazyAnnotator"]], "getlazyannotator() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getLazyAnnotator"]], "getordefault() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getOrDefault"]], "getordefault() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getOrDefault"]], "getoutputcol() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getOutputCol"]], "getoutputcol() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getOutputCol"]], "getparam() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getParam"]], "getparam() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getParam"]], "getparamvalue() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getParamValue"]], "getparamvalue() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getParamValue"]], "getstoragepath() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getStoragePath"]], "getstorageref() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getStorageRef"]], "getstorageref() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getStorageRef"]], "getter_attrs (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getter_attrs"]], "getter_attrs (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getter_attrs"]], "hasdefault() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.hasDefault"]], "hasdefault() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.hasDefault"]], "hasparam() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.hasParam"]], "hasparam() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.hasParam"]], "includestorage (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.includeStorage"]], "includestorage (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.includeStorage"]], "inputannotatortypes (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputAnnotatorTypes"]], "inputcols (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputCols"]], "inputcols (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputCols"]], "inputcolsvalidation() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputColsValidation"]], "inputcolsvalidation() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputColsValidation"]], "isdefined() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.isDefined"]], "isdefined() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.isDefined"]], "isset() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.isSet"]], "isset() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.isSet"]], "lazyannotator (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.lazyAnnotator"]], "lazyannotator (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.lazyAnnotator"]], "load() (entityrulerinternalapproach class method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.load"]], "load() (entityrulerinternalmodel class method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.load"]], "loadstorage() (entityrulerinternalmodel static method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorage"]], "loadstorages() (entityrulerinternalmodel static method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorages"]], "name (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.name"]], "name (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.name"]], "optionalinputannotatortypes (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputAnnotatorType"]], "outputannotatortype (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputAnnotatorType"]], "outputcol (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputCol"]], "outputcol (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputCol"]], "patternsresource (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.patternsResource"]], "pretrained() (entityrulerinternalmodel static method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.pretrained"]], "read() (entityrulerinternalapproach class method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.read"]], "read() (entityrulerinternalmodel class method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.read"]], "save() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.save"]], "save() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.save"]], "savestorage() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.saveStorage"]], "sentencematch (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.sentenceMatch"]], "set() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.set"]], "set() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.set"]], "setalphabetresource() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setAlphabetResource"]], "setcasesensitive() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setCaseSensitive"]], "setcasesensitive() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setCaseSensitive"]], "setenableinmemorystorage() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setEnableInMemoryStorage"]], "setenableinmemorystorage() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setEnableInMemoryStorage"]], "setforceinputtypevalidation() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setForceInputTypeValidation"]], "setincludestorage() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setIncludeStorage"]], "setincludestorage() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setIncludeStorage"]], "setinputcols() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setInputCols"]], "setinputcols() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setInputCols"]], "setlazyannotator() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setLazyAnnotator"]], "setlazyannotator() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setLazyAnnotator"]], "setoutputcol() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setOutputCol"]], "setoutputcol() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setOutputCol"]], "setparamvalue() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setParamValue"]], "setparamvalue() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setParamValue"]], "setparams() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setParams"]], "setpatternsresource() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setPatternsResource"]], "setsentencematch() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setSentenceMatch"]], "setstoragepath() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setStoragePath"]], "setstorageref() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setStorageRef"]], "setstorageref() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setStorageRef"]], "setusestorage() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setUseStorage"]], "skiplpinputcolsvalidation (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[53, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "storagepath (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.storagePath"]], "storageref (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.storageRef"]], "storageref (entityrulerinternalmodel attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.storageRef"]], "transform() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.transform"]], "usestorage (entityrulerinternalapproach attribute)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.useStorage"]], "write() (entityrulerinternalapproach method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.write"]], "write() (entityrulerinternalmodel method)": [[53, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.write"]], "sparknlp_jsl.annotator.er": [[54, "module-sparknlp_jsl.annotator.er"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "clear() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.clear"]], "copy() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.copy"]], "explainparam() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.explainParam"]], "explainparams() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.explainParams"]], "extractparammap() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.extractParamMap"]], "getinputcols() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getInputCols"]], "getlazyannotator() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getLazyAnnotator"]], "getordefault() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getOrDefault"]], "getoutputcol() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getOutputCol"]], "getparam() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getParam"]], "getparamvalue() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getParamValue"]], "getter_attrs (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getter_attrs"]], "hasdefault() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.hasDefault"]], "hasparam() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.hasParam"]], "inputannotatortypes (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "inputcolsvalidation() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputColsValidation"]], "isdefined() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.isDefined"]], "isset() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.isSet"]], "lazyannotator (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.lazyAnnotator"]], "load() (featuresassembler class method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.load"]], "name (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "optionalinputannotatortypes (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.optionalInputAnnotatorTypes"]], "outputannotatortype (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "read() (featuresassembler class method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.read"]], "save() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.save"]], "set() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.set"]], "setforceinputtypevalidation() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setForceInputTypeValidation"]], "setinputcols() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setlazyannotator() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setLazyAnnotator"]], "setoutputcol() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparamvalue() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParamValue"]], "setparams() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[55, "module-sparknlp_jsl.annotator.feature_assembler"]], "transform() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.transform"]], "write() (featuresassembler method)": [[55, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.write"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "blacklist (filteringparams attribute)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.blackList"]], "casesensitive (filteringparams attribute)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.caseSensitive"]], "criteria (filteringparams attribute)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "filtervalue (filteringparams attribute)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setblacklist() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setBlackList"]], "setcasesensitive() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCaseSensitive"]], "setcriteria() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setdenylist() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setDenyList"]], "setfiltervalue() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "setwhitelist() (filteringparams method)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setWhiteList"]], "sparknlp_jsl.annotator.filtering_params": [[56, "module-sparknlp_jsl.annotator.filtering_params"]], "whitelist (filteringparams attribute)": [[56, "sparknlp_jsl.annotator.filtering_params.FilteringParams.whiteList"]], "flattener (class in sparknlp_jsl.annotator.flattener)": [[57, "sparknlp_jsl.annotator.flattener.Flattener"]], "cleanannotations (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.cleanAnnotations"]], "clear() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.clear"]], "copy() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.copy"]], "explainparam() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.explainParam"]], "explainparams() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.explainParams"]], "extractparammap() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.extractParamMap"]], "flattenexplodedcolumns (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.flattenExplodedColumns"]], "getinputcols() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.getInputCols"]], "getordefault() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.getOrDefault"]], "getparam() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.getParam"]], "getparamvalue() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.getParamValue"]], "getter_attrs (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.getter_attrs"]], "hasdefault() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.hasDefault"]], "hasparam() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.hasParam"]], "inputcols (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.inputCols"]], "isdefined() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.isDefined"]], "isset() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.isSet"]], "keeporiginalcolumns (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.keepOriginalColumns"]], "load() (flattener class method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.load"]], "name (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.name"]], "orderbycolumn (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.orderByColumn"]], "orderdescending (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.orderDescending"]], "outputannotatortype (flattener attribute)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.outputAnnotatorType"]], "read() (flattener class method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.read"]], "save() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.save"]], "set() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.set"]], "setcleanannotations() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setCleanAnnotations"]], "setexplodeselectedfields() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setExplodeSelectedFields"]], "setflattenexplodedcolumns() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setFlattenExplodedColumns"]], "setinputcols() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setInputCols"]], "setkeeporiginalcolumns() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setKeepOriginalColumns"]], "setorderbycolumn() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setOrderByColumn"]], "setorderdescending() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setOrderDescending"]], "setparamvalue() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setParamValue"]], "setparams() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.setParams"]], "sparknlp_jsl.annotator.flattener": [[57, "module-sparknlp_jsl.annotator.flattener"]], "transform() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.transform"]], "write() (flattener method)": [[57, "sparknlp_jsl.annotator.flattener.Flattener.write"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "clear() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.clear"]], "clear() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.clear"]], "copy() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.copy"]], "copy() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.copy"]], "datasetinfo (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.datasetInfo"]], "datasetinfo (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.datasetInfo"]], "doexceptionhandling (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.doExceptionHandling"]], "dropout (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "engine (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.engine"]], "epochsn (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "explainparam() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.explainParam"]], "explainparam() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.explainParam"]], "explainparams() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.explainParams"]], "explainparams() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.explainParams"]], "extractparammap() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.extractParamMap"]], "extractparammap() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.extractParamMap"]], "featurescaling (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "featurescaling (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.featureScaling"]], "fit() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fit"]], "fitmultiple() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fitMultiple"]], "fiximbalance (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "getengine() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getEngine"]], "getinputcols() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getInputCols"]], "getinputcols() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getInputCols"]], "getlazyannotator() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getLazyAnnotator"]], "getordefault() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getOrDefault"]], "getordefault() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getOrDefault"]], "getoutputcol() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getOutputCol"]], "getoutputcol() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getOutputCol"]], "getparam() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getParam"]], "getparam() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getParam"]], "getparamvalue() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getParamValue"]], "getparamvalue() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getParamValue"]], "getter_attrs (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getter_attrs"]], "getter_attrs (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getter_attrs"]], "hasdefault() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.hasDefault"]], "hasdefault() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.hasDefault"]], "hasparam() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.hasParam"]], "hasparam() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.hasParam"]], "inputannotatortypes (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "inputcols (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputCols"]], "inputcols (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputCols"]], "inputcolsvalidation() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputColsValidation"]], "isdefined() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.isDefined"]], "isdefined() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.isDefined"]], "isset() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.isSet"]], "isset() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.isSet"]], "labelcolumn (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "lazyannotator (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.lazyAnnotator"]], "lazyannotator (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.lazyAnnotator"]], "learningrate (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "load() (genericclassifierapproach class method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.load"]], "load() (genericclassifiermodel class method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.load"]], "modelfile (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "optionalinputannotatortypes (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputcol (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputCol"]], "outputcol (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputCol"]], "outputlogspath (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "read() (genericclassifierapproach class method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.read"]], "read() (genericclassifiermodel class method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.read"]], "save() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.save"]], "save() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.save"]], "set() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.set"]], "set() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.set"]], "setbatchsize() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setDoExceptionHandling"]], "setdropout() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setInputCols"]], "setinputcols() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setInputCols"]], "setlabelcol() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlazyannotator() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputcol() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputCol"]], "setoutputcol() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setOutputCol"]], "setoutputlogspath() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setParamValue"]], "setparamvalue() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setParamValue"]], "setparams() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setParams"]], "setvalidationsplit() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[58, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "transform() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.transform"]], "validationsplit (genericclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "write() (genericclassifierapproach method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.write"]], "write() (genericclassifiermodel method)": [[58, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.write"]], "sparknlp_jsl.annotator.generic_classifier": [[59, "module-sparknlp_jsl.annotator.generic_classifier"]], "handleexceptionparams (class in sparknlp_jsl.annotator.handle_exception_params)": [[60, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams"]], "doexceptionhandling (handleexceptionparams attribute)": [[60, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.doExceptionHandling"]], "setdoexceptionhandling() (handleexceptionparams method)": [[60, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.setDoExceptionHandling"]], "sparknlp_jsl.annotator.handle_exception_params": [[60, "module-sparknlp_jsl.annotator.handle_exception_params"]], "assertion (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.disambiguation"]], "embeddings (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.embeddings"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.qa"]], "rag (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.rag"]], "re (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.re"]], "regex (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.regex"]], "resolution (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator": [[61, "module-sparknlp_jsl.annotator"]], "splitter (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.splitter"]], "windowed (in module sparknlp_jsl.annotator)": [[61, "sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.matcher": [[62, "module-sparknlp_jsl.annotator.matcher"]], "textmatcherinternal (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal"]], "textmatcherinternalmodel (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel"]], "buildfromtokens (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.buildFromTokens"]], "buildfromtokens (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.buildFromTokens"]], "casesensitive (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.caseSensitive"]], "casesensitive (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.caseSensitive"]], "clear() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.clear"]], "clear() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.clear"]], "copy() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.copy"]], "copy() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.copy"]], "delimiter (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.delimiter"]], "delimiter (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.delimiter"]], "entities (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entities"]], "entityvalue (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entityValue"]], "entityvalue (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.entityValue"]], "explainparam() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.explainParam"]], "explainparam() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.explainParam"]], "explainparams() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.explainParams"]], "explainparams() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.explainParams"]], "extractparammap() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.extractParamMap"]], "extractparammap() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.extractParamMap"]], "fit() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.fit"]], "fitmultiple() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.fitMultiple"]], "getcasesensitive() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getCaseSensitive"]], "getdelimiter() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getDelimiter"]], "getinputcols() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getInputCols"]], "getinputcols() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getInputCols"]], "getlazyannotator() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getLazyAnnotator"]], "getlazyannotator() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getLazyAnnotator"]], "getordefault() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getOrDefault"]], "getordefault() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getOrDefault"]], "getoutputcol() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getOutputCol"]], "getoutputcol() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getOutputCol"]], "getparam() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getParam"]], "getparam() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getParam"]], "getparamvalue() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getParamValue"]], "getparamvalue() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getParamValue"]], "getter_attrs (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getter_attrs"]], "getter_attrs (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getter_attrs"]], "hasdefault() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.hasDefault"]], "hasdefault() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.hasDefault"]], "hasparam() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.hasParam"]], "hasparam() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.hasParam"]], "inputannotatortypes (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputAnnotatorTypes"]], "inputcols (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputCols"]], "inputcols (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputCols"]], "inputcolsvalidation() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputColsValidation"]], "inputcolsvalidation() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputColsValidation"]], "isdefined() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.isDefined"]], "isdefined() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.isDefined"]], "isset() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.isSet"]], "isset() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.isSet"]], "lazyannotator (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.lazyAnnotator"]], "lazyannotator (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.lazyAnnotator"]], "load() (textmatcherinternal class method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.load"]], "load() (textmatcherinternalmodel class method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.load"]], "mergeoverlapping (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.mergeOverlapping"]], "mergeoverlapping (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.mergeOverlapping"]], "name (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.name"]], "optionalinputannotatortypes (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputAnnotatorType"]], "outputannotatortype (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputAnnotatorType"]], "outputcol (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputCol"]], "outputcol (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputCol"]], "pretrained() (textmatcherinternalmodel static method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.pretrained"]], "read() (textmatcherinternal class method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.read"]], "read() (textmatcherinternalmodel class method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.read"]], "save() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.save"]], "save() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.save"]], "searchtrie (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.searchTrie"]], "set() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.set"]], "set() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.set"]], "setbuildfromtokens() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setBuildFromTokens"]], "setbuildfromtokens() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setBuildFromTokens"]], "setcasesensitive() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setCaseSensitive"]], "setdelimiter() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setDelimiter"]], "setdelimiter() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setDelimiter"]], "setentities() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntities"]], "setentityvalue() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntityValue"]], "setentityvalue() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setEntityValue"]], "setforceinputtypevalidation() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setForceInputTypeValidation"]], "setforceinputtypevalidation() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setForceInputTypeValidation"]], "setinputcols() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setInputCols"]], "setinputcols() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setInputCols"]], "setlazyannotator() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setLazyAnnotator"]], "setlazyannotator() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setLazyAnnotator"]], "setmergeoverlapping() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setMergeOverlapping"]], "setoutputcol() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setOutputCol"]], "setoutputcol() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setOutputCol"]], "setparamvalue() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setParamValue"]], "setparamvalue() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setParamValue"]], "setparams() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setParams"]], "skiplpinputcolsvalidation (textmatcherinternal attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (textmatcherinternalmodel attribute)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[63, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "transform() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.transform"]], "write() (textmatcherinternal method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.write"]], "write() (textmatcherinternalmodel method)": [[63, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.write"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergefeatureparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "blacklist (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.blackList"]], "blacklist (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.blackList"]], "casesensitive (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.caseSensitive"]], "casesensitive (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.caseSensitive"]], "chunkprecedence (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.chunkPrecedence"]], "chunkprecedence (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.chunkPrecedence"]], "chunkprecedence (mergeprioritizationparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.chunkPrecedenceValuePrioritization"]], "chunkprecedencevalueprioritization (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.chunkPrecedenceValuePrioritization"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "clear() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.clear"]], "clear() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.clear"]], "copy() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.copy"]], "copy() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.copy"]], "criteria (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.criteria"]], "criteria (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.criteria"]], "defaultconfidence (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.defaultConfidence"]], "defaultconfidence (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.defaultConfidence"]], "defaultconfidence (mergeprioritizationparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "doexceptionhandling (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.doExceptionHandling"]], "entitiesconfidenceresource (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.entitiesConfidenceResource"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "explainparam() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.explainParam"]], "explainparam() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.explainParam"]], "explainparams() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.explainParams"]], "explainparams() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.explainParams"]], "extractparammap() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.extractParamMap"]], "extractparammap() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.extractParamMap"]], "falsepositivesresource (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.falsePositivesResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "filtervalue (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.filterValue"]], "filtervalue (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.filterValue"]], "fit() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.fit"]], "fitmultiple() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.fitMultiple"]], "getinputcols() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getInputCols"]], "getinputcols() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getInputCols"]], "getlazyannotator() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getLazyAnnotator"]], "getlazyannotator() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getLazyAnnotator"]], "getordefault() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getOrDefault"]], "getordefault() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getOrDefault"]], "getoutputcol() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getOutputCol"]], "getoutputcol() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getOutputCol"]], "getparam() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getParam"]], "getparam() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getParam"]], "getparamvalue() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getParamValue"]], "getparamvalue() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getParamValue"]], "getreplacedict() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getReplaceDict"]], "getreplacedict() (mergefeatureparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.getReplaceDict"]], "getter_attrs (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getter_attrs"]], "getter_attrs (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getter_attrs"]], "hasdefault() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.hasDefault"]], "hasdefault() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.hasDefault"]], "hasparam() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.hasParam"]], "hasparam() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.hasParam"]], "inputannotatortypes (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "inputcols (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputCols"]], "inputcols (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputCols"]], "inputcolsvalidation() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputColsValidation"]], "inputcolsvalidation() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputColsValidation"]], "isdefined() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.isDefined"]], "isdefined() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.isDefined"]], "isset() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.isSet"]], "isset() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.isSet"]], "lazyannotator (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.lazyAnnotator"]], "lazyannotator (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.lazyAnnotator"]], "load() (chunkmergeapproach class method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.load"]], "load() (chunkmergemodel class method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.load"]], "mergeoverlapping (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.mergeOverlapping"]], "mergeoverlapping (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.mergeOverlapping"]], "mergeoverlapping (mergecommonparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "optionalinputannotatortypes (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.optionalInputAnnotatorTypes"]], "orderingfeatures (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.orderingFeatures"]], "orderingfeatures (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.orderingFeatures"]], "orderingfeatures (mergeprioritizationparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "outputcol (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputCol"]], "outputcol (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputCol"]], "pretrained() (chunkmergemodel static method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "read() (chunkmergeapproach class method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.read"]], "read() (chunkmergemodel class method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.read"]], "regex (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.regex"]], "regex (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.regex"]], "replacedictresource (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.replaceDictResource"]], "replacedictresource (mergeresourceparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "save() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.save"]], "save() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.save"]], "selectionstrategy (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.selectionStrategy"]], "selectionstrategy (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.selectionStrategy"]], "selectionstrategy (mergeprioritizationparams attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "set() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.set"]], "set() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.set"]], "setblacklist() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setBlackList"]], "setblacklist() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setBlackList"]], "setcasesensitive() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setCaseSensitive"]], "setcasesensitive() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setCaseSensitive"]], "setchunkprecedence() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setChunkPrecedence"]], "setchunkprecedence() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setChunkPrecedence"]], "setchunkprecedence() (mergeprioritizationparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setChunkPrecedenceValuePrioritization"]], "setchunkprecedencevalueprioritization() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setChunkPrecedenceValuePrioritization"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setcriteria() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setCriteria"]], "setcriteria() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setCriteria"]], "setdefaultconfidence() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDefaultConfidence"]], "setdefaultconfidence() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setDefaultConfidence"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setdenylist() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDenyList"]], "setdenylist() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setDenyList"]], "setdoexceptionhandling() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDoExceptionHandling"]], "setentitiesconfidence() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositives() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setFalsePositives"]], "setfalsepositives() (mergefeatureparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setFalsePositives"]], "setfalsepositivesresource() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFalsePositivesResource"]], "setfalsepositivesresource() (mergeresourceparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setfiltervalue() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFilterValue"]], "setfiltervalue() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setFilterValue"]], "setforceinputtypevalidation() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setForceInputTypeValidation"]], "setinputcols() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setlazyannotator() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setLazyAnnotator"]], "setlazyannotator() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setLazyAnnotator"]], "setmergeoverlapping() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setMergeOverlapping"]], "setmergeoverlapping() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setMergeOverlapping"]], "setmergeoverlapping() (mergecommonparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setOrderingFeatures"]], "setorderingfeatures() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setOrderingFeatures"]], "setorderingfeatures() (mergeprioritizationparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setoutputcol() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setOutputCol"]], "setoutputcol() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setOutputCol"]], "setparamvalue() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setParamValue"]], "setparamvalue() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setParamValue"]], "setparams() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setParams"]], "setregex() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setRegex"]], "setregex() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setRegex"]], "setreplacedict() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setReplaceDict"]], "setreplacedict() (mergefeatureparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setReplaceDict"]], "setreplacedictresource() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setReplaceDictResource"]], "setreplacedictresource() (mergeresourceparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setselectionstrategy() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setSelectionStrategy"]], "setselectionstrategy() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setSelectionStrategy"]], "setselectionstrategy() (mergeprioritizationparams method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "setwhitelist() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setWhiteList"]], "setwhitelist() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setWhiteList"]], "skiplpinputcolsvalidation (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[64, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "transform() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.transform"]], "whitelist (chunkmergeapproach attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.whiteList"]], "whitelist (chunkmergemodel attribute)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.whiteList"]], "write() (chunkmergeapproach method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.write"]], "write() (chunkmergemodel method)": [[64, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.write"]], "sparknlp_jsl.annotator.merge": [[65, "module-sparknlp_jsl.annotator.merge"]], "multichunk2doc (class in sparknlp_jsl.annotator.multi_chunk2_doc)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc"]], "blacklist (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.blackList"]], "casesensitive (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.caseSensitive"]], "clear() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.clear"]], "copy() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.copy"]], "explainparam() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.explainParam"]], "explainparams() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.explainParams"]], "extractparammap() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.extractParamMap"]], "getinputcols() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getInputCols"]], "getlazyannotator() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getLazyAnnotator"]], "getordefault() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getOrDefault"]], "getoutputcol() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getOutputCol"]], "getparam() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getParam"]], "getparamvalue() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getParamValue"]], "getter_attrs (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getter_attrs"]], "hasdefault() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.hasDefault"]], "hasparam() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.hasParam"]], "inputannotatortypes (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputAnnotatorTypes"]], "inputcols (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputCols"]], "inputcolsvalidation() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputColsValidation"]], "isdefined() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.isDefined"]], "isset() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.isSet"]], "lazyannotator (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.lazyAnnotator"]], "load() (multichunk2doc class method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.load"]], "name (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.name"]], "optionalinputannotatortypes (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.optionalInputAnnotatorTypes"]], "outputannotatortype (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.outputAnnotatorType"]], "outputcol (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.outputCol"]], "prefix (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.prefix"]], "read() (multichunk2doc class method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.read"]], "save() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.save"]], "separator (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.separator"]], "set() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.set"]], "setblacklist() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setBlackList"]], "setcasesensitive() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setCaseSensitive"]], "setdenylist() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setDenyList"]], "setforceinputtypevalidation() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setForceInputTypeValidation"]], "setinputcols() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setInputCols"]], "setlazyannotator() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setLazyAnnotator"]], "setoutputcol() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setOutputCol"]], "setparamvalue() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setParamValue"]], "setparams() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setParams"]], "setprefix() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setPrefix"]], "setseparator() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setSeparator"]], "setsuffix() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setSuffix"]], "setwhitelist() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setWhiteList"]], "skiplpinputcolsvalidation (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[66, "module-sparknlp_jsl.annotator.multi_chunk2_doc"]], "suffix (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.suffix"]], "transform() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.transform"]], "whitelist (multichunk2doc attribute)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.whiteList"]], "write() (multichunk2doc method)": [[66, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.write"]], "sparknlp_jsl.annotator.ner": [[67, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "clear() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.clear"]], "copy() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.copy"]], "explainparam() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.explainParam"]], "explainparams() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.explainParams"]], "extractparammap() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.extractParamMap"]], "getinputcols() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getInputCols"]], "getlazyannotator() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getLazyAnnotator"]], "getordefault() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getOrDefault"]], "getoutputcol() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getOutputCol"]], "getparam() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getParam"]], "getparamvalue() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getParamValue"]], "getter_attrs (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getter_attrs"]], "hasdefault() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.hasDefault"]], "hasparam() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.hasParam"]], "inputannotatortypes (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "inputcols (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputCols"]], "inputcolsvalidation() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputColsValidation"]], "isdefined() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.isDefined"]], "isset() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.isSet"]], "lazyannotator (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.lazyAnnotator"]], "load() (iobtagger class method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.load"]], "name (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "optionalinputannotatortypes (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.optionalInputAnnotatorTypes"]], "outputannotatortype (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "outputcol (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputCol"]], "read() (iobtagger class method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.read"]], "save() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.save"]], "scheme (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "set() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.set"]], "setforceinputtypevalidation() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setForceInputTypeValidation"]], "setinputcols() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setInputCols"]], "setlazyannotator() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setLazyAnnotator"]], "setoutputcol() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setOutputCol"]], "setparamvalue() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setParamValue"]], "setparams() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setParams"]], "setscheme() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "skiplpinputcolsvalidation (iobtagger attribute)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[68, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "transform() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.transform"]], "write() (iobtagger method)": [[68, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.write"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "batchsize (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.batchSize"]], "classes (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "clear() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.clear"]], "clear() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.clear"]], "configprotobytes (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "copy() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.copy"]], "copy() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.copy"]], "datasetinfo (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.datasetInfo"]], "datasetinfo (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.datasetInfo"]], "doexceptionhandling (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.doExceptionHandling"]], "dropout (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableOutputLogs"]], "engine (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.engine"]], "entities (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.entities"]], "evaluationlogextended (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.evaluationLogExtended"]], "explainparam() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.explainParam"]], "explainparam() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.explainParam"]], "explainparams() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.explainParams"]], "explainparams() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.explainParams"]], "extractparammap() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.extractParamMap"]], "extractparammap() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.extractParamMap"]], "fit() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.fit"]], "fitmultiple() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.fitMultiple"]], "getbatchsize() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getBatchSize"]], "getclasses() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "getengine() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getEngine"]], "getinputcols() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getInputCols"]], "getinputcols() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getInputCols"]], "getlabelcolumn() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getLabelColumn"]], "getlazyannotator() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getLazyAnnotator"]], "getlazyannotator() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getLazyAnnotator"]], "getordefault() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getOrDefault"]], "getordefault() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getOrDefault"]], "getoutputcol() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getOutputCol"]], "getoutputcol() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getOutputCol"]], "getparam() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getParam"]], "getparam() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getParam"]], "getparamvalue() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getParamValue"]], "getparamvalue() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getParamValue"]], "getstorageref() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getStorageRef"]], "gettrainingclassdistribution() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "getter_attrs (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getter_attrs"]], "getter_attrs (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getter_attrs"]], "graphfile (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "hasdefault() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.hasDefault"]], "hasdefault() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.hasDefault"]], "hasparam() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.hasParam"]], "hasparam() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.hasParam"]], "includeallconfidencescores (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "inputcols (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputCols"]], "inputcols (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputCols"]], "inputcolsvalidation() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputColsValidation"]], "inputcolsvalidation() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputColsValidation"]], "isdefined() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.isDefined"]], "isdefined() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.isDefined"]], "isset() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.isSet"]], "isset() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.isSet"]], "labelcasing (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "labelcolumn (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.labelColumn"]], "lazyannotator (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lazyAnnotator"]], "lazyannotator (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.lazyAnnotator"]], "load() (medicalnerapproach class method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.load"]], "load() (medicalnermodel class method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.load"]], "loadsavedmodel() (medicalnermodel static method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "maxepochs (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.maxEpochs"]], "minepochs (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.minEpochs"]], "name (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "optionalinputannotatortypes (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "outputcol (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputCol"]], "outputcol (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputCol"]], "outputlogspath (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputLogsPath"]], "overrideexistingtags (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomseed (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomSeed"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "read() (medicalnerapproach class method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.read"]], "read() (medicalnermodel class method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.read"]], "save() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.save"]], "save() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.save"]], "sentencetokenindex (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "set() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.set"]], "set() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.set"]], "setbatchsize() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setbatchsize() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdatasetinfo() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDatasetInfo"]], "setdatasetinfo() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setDatasetInfo"]], "setdoexceptionhandling() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDoExceptionHandling"]], "setdropout() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableOutputLogs"]], "setentities() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEntities"]], "setevaluationlogextended() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setForceInputTypeValidation"]], "setgraphfile() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setinputcols() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setInputCols"]], "setinputcols() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInputCols"]], "setlabelcasing() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlabelcolumn() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLabelColumn"]], "setlazyannotator() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLazyAnnotator"]], "setlazyannotator() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLazyAnnotator"]], "setlogprefix() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setmaxepochs() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setMaxEpochs"]], "setminepochs() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setMinEpochs"]], "setoutputcol() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOutputCol"]], "setoutputcol() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setOutputCol"]], "setoutputlogspath() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setparamvalue() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setParamValue"]], "setparamvalue() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setParamValue"]], "setparams() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setParams"]], "setpo() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomseed() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "setstorageref() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setStorageRef"]], "settagsmapping() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "settestdataset() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTestDataset"]], "setusebestmodel() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "setverbose() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setVerbose"]], "skiplpinputcolsvalidation (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.medical_ner": [[69, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "storageref (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.storageRef"]], "testdataset (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.testDataset"]], "trainingclassdistribution (medicalnermodel attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "transform() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.transform"]], "uc (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.uc"]], "usebestmodel (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "validationsplit (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.validationSplit"]], "verbose (medicalnerapproach attribute)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.verbose"]], "write() (medicalnerapproach method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.write"]], "write() (medicalnermodel method)": [[69, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.write"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "clear() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.clear"]], "copy() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.copy"]], "explainparam() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.explainParam"]], "explainparams() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.explainParams"]], "extractparammap() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.extractParamMap"]], "getinputcols() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getInputCols"]], "getlazyannotator() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getLazyAnnotator"]], "getordefault() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getOrDefault"]], "getoutputcol() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getOutputCol"]], "getparam() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getParam"]], "getparamvalue() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getParamValue"]], "getter_attrs (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getter_attrs"]], "hasdefault() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.hasDefault"]], "hasparam() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.hasParam"]], "inputannotatortypes (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "inputcols (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputCols"]], "inputcolsvalidation() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputColsValidation"]], "isdefined() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.isDefined"]], "isset() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.isSet"]], "lazyannotator (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.lazyAnnotator"]], "load() (nerchunker class method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.load"]], "name (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "optionalinputannotatortypes (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.optionalInputAnnotatorTypes"]], "outputannotatortype (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "outputcol (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputCol"]], "read() (nerchunker class method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.read"]], "regexparsers (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "save() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.save"]], "set() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.set"]], "setforceinputtypevalidation() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setForceInputTypeValidation"]], "setinputcols() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setInputCols"]], "setlazyannotator() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setLazyAnnotator"]], "setoutputcol() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setOutputCol"]], "setparamvalue() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setParamValue"]], "setparams() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setParams"]], "setregexparsers() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "skiplpinputcolsvalidation (nerchunker attribute)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[70, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "transform() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.transform"]], "write() (nerchunker method)": [[70, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.write"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "allpossiblefieldstostandardize (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.allPossibleFieldsToStandardize"]], "allpossiblefieldstostandardize (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.allPossibleFieldsToStandardize"]], "blacklist (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.blackList"]], "blacklist (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.blackList"]], "blacklist (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.blackList"]], "casesensitive (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.caseSensitive"]], "casesensitive (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.caseSensitive"]], "casesensitive (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.caseSensitive"]], "clear() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.clear"]], "clear() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.clear"]], "copy() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.copy"]], "copy() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.copy"]], "criteria (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.criteria"]], "criteria (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.criteria"]], "criteria (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.criteria"]], "doexceptionhandling (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.doExceptionHandling"]], "doexceptionhandling (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.doExceptionHandling"]], "doexceptionhandling (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.doExceptionHandling"]], "explainparam() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.explainParam"]], "explainparam() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.explainParam"]], "explainparams() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.explainParams"]], "explainparams() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.explainParams"]], "extractparammap() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.extractParamMap"]], "extractparammap() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.extractParamMap"]], "filtervalue (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.filterValue"]], "filtervalue (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.filterValue"]], "filtervalue (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.filterValue"]], "fit() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.fit"]], "fitmultiple() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.fitMultiple"]], "getinputcols() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getInputCols"]], "getinputcols() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getInputCols"]], "getlazyannotator() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getLazyAnnotator"]], "getlazyannotator() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getLazyAnnotator"]], "getordefault() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getOrDefault"]], "getordefault() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getOrDefault"]], "getoutputcol() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getOutputCol"]], "getoutputcol() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getOutputCol"]], "getparam() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getParam"]], "getparam() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getParam"]], "getparamvalue() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getParamValue"]], "getparamvalue() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getParamValue"]], "getter_attrs (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getter_attrs"]], "getter_attrs (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getter_attrs"]], "greedymode (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "greedymode (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.greedyMode"]], "greedymode (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.greedyMode"]], "hasdefault() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.hasDefault"]], "hasdefault() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.hasDefault"]], "hasparam() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.hasParam"]], "hasparam() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.hasParam"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "ignorestopwords (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.ignoreStopWords"]], "ignorestopwords (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.ignoreStopWords"]], "includeoutputcolumn (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.includeOutputColumn"]], "includeoutputcolumn (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.includeOutputColumn"]], "includestandardfield (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.includeStandardField"]], "includestandardfield (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.includeStandardField"]], "inputannotatortypes (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "inputcols (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputCols"]], "inputcols (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputCols"]], "inputcolsvalidation() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputColsValidation"]], "inputcolsvalidation() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputColsValidation"]], "isdefined() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.isDefined"]], "isdefined() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.isDefined"]], "isset() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.isSet"]], "isset() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.isSet"]], "lazyannotator (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.lazyAnnotator"]], "lazyannotator (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.lazyAnnotator"]], "load() (nerconverterinternal class method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.load"]], "load() (nerconverterinternalmodel class method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.load"]], "name (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "optionalinputannotatortypes (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "outputcol (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputCol"]], "outputcol (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputCol"]], "outputcolumnkey (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputColumnKey"]], "outputcolumnkey (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputColumnKey"]], "preserveposition (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "preserveposition (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.preservePosition"]], "preserveposition (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.preservePosition"]], "read() (nerconverterinternal class method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.read"]], "read() (nerconverterinternalmodel class method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.read"]], "regex (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.regex"]], "regex (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.regex"]], "regex (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.regex"]], "replacedictresource (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "save() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.save"]], "save() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.save"]], "set() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.set"]], "set() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.set"]], "setallpossiblefieldstostandardize() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setAllPossibleFieldsToStandardize"]], "setallpossiblefieldstostandardize() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setAllPossibleFieldsToStandardize"]], "setallowlist() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setallowlist() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setAllowList"]], "setallowlist() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setAllowList"]], "setblacklist() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setBlackList"]], "setblacklist() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setBlackList"]], "setblacklist() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setBlackList"]], "setcasesensitive() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setCaseSensitive"]], "setcasesensitive() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setCaseSensitive"]], "setcasesensitive() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setCaseSensitive"]], "setcriteria() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setCriteria"]], "setcriteria() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setCriteria"]], "setcriteria() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setCriteria"]], "setdenylist() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setdenylist() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setDenyList"]], "setdenylist() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setDenyList"]], "setdoexceptionhandling() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDoExceptionHandling"]], "setdoexceptionhandling() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setDoExceptionHandling"]], "setdoexceptionhandling() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setDoExceptionHandling"]], "setfiltervalue() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setFilterValue"]], "setfiltervalue() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setFilterValue"]], "setfiltervalue() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setFilterValue"]], "setforceinputtypevalidation() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setForceInputTypeValidation"]], "setgreedymode() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setgreedymode() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setGreedyMode"]], "setgreedymode() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setIgnoreStopWords"]], "setincludeoutputcolumn() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIncludeOutputColumn"]], "setincludeoutputcolumn() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setIncludeOutputColumn"]], "setincludestandardfield() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIncludeStandardField"]], "setincludestandardfield() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setIncludeStandardField"]], "setinputcols() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setInputCols"]], "setinputcols() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setInputCols"]], "setlazyannotator() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setLazyAnnotator"]], "setlazyannotator() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setLazyAnnotator"]], "setoutputcol() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setOutputCol"]], "setoutputcol() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setOutputCol"]], "setoutputcolumnkey() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setOutputColumnKey"]], "setoutputcolumnkey() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setOutputColumnKey"]], "setparamvalue() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setParamValue"]], "setparamvalue() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setParamValue"]], "setparams() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setParams"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setpreserveposition() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setPreservePosition"]], "setpreserveposition() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setPreservePosition"]], "setregex() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setRegex"]], "setregex() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setRegex"]], "setregex() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setRegex"]], "setreplacedictresource() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setstandardfieldkey() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setStandardFieldKey"]], "setstandardfieldkey() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setStandardFieldKey"]], "setthreshold() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "setthreshold() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setThreshold"]], "setthreshold() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setThreshold"]], "setwhitelist() (commonnerconverterinternalparams method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setWhiteList"]], "setwhitelist() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setWhiteList"]], "setwhitelist() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setWhiteList"]], "skiplpinputcolsvalidation (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[71, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "standardfieldkey (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.standardFieldKey"]], "standardfieldkey (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.standardFieldKey"]], "threshold (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "threshold (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.threshold"]], "threshold (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.threshold"]], "transform() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.transform"]], "whitelist (commonnerconverterinternalparams attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.whiteList"]], "whitelist (nerconverterinternal attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.whiteList"]], "whitelist (nerconverterinternalmodel attribute)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.whiteList"]], "write() (nerconverterinternal method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.write"]], "write() (nerconverterinternalmodel method)": [[71, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.write"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "clear() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.clear"]], "combineentities (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "copy() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.copy"]], "entityscopes (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "explainparam() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.explainParam"]], "explainparams() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.explainParams"]], "extractparammap() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.extractParamMap"]], "getinputcols() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getInputCols"]], "getlazyannotator() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getLazyAnnotator"]], "getordefault() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getOrDefault"]], "getoutputcol() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getOutputCol"]], "getparam() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getParam"]], "getparamvalue() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getParamValue"]], "getter_attrs (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getter_attrs"]], "hasdefault() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.hasDefault"]], "hasparam() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.hasParam"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "inputcols (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputCols"]], "inputcolsvalidation() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputColsValidation"]], "isdefined() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.isDefined"]], "isset() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.isSet"]], "lazyannotator (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.lazyAnnotator"]], "load() (nertemplaterendermodel class method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.load"]], "optionalinputannotatortypes (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "outputcol (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputCol"]], "permuteentities (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "read() (nertemplaterendermodel class method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.read"]], "resampleentities (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "save() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.save"]], "set() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.set"]], "setcombineentities() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setforceinputtypevalidation() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setForceInputTypeValidation"]], "setinputcols() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setInputCols"]], "setlazyannotator() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setLazyAnnotator"]], "setoutputcol() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setOutputCol"]], "setparamvalue() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setParamValue"]], "setparams() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setParams"]], "setpermuteentities() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "skiplpinputcolsvalidation (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[72, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "transform() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.transform"]], "write() (nertemplaterendermodel method)": [[72, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.write"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "batchsize (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.batchSize"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.batchSize"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.batchSize"]], "casesensitive (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"]], "clear() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.clear"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.clear"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.clear"]], "coalescesentences (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"]], "configprotobytes (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"]], "copy() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.copy"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.copy"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.copy"]], "engine (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.engine"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.engine"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.engine"]], "explainparam() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.explainParam"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParam"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParam"]], "explainparams() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.explainParams"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParams"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParams"]], "extractparammap() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"]], "getbatchsize() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"]], "getcasesensitive() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"]], "getclasses() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getClasses"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "getengine() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getEngine"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getEngine"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getEngine"]], "getinputcols() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"]], "getlazyannotator() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"]], "getmaxsentencelength() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"]], "getordefault() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"]], "getoutputcol() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"]], "getparam() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getParam"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParam"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParam"]], "getparamvalue() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"]], "getter_attrs (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"]], "hasdefault() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"]], "hasparam() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.hasParam"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasParam"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasParam"]], "ignoreentities (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "inputcols (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputCols"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputCols"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputCols"]], "inputcolsvalidation() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"]], "isdefined() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.isDefined"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isDefined"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isDefined"]], "isset() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.isSet"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isSet"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isSet"]], "lazyannotator (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"]], "load() (zeroshotnermodel static method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "loadsavedmodel() (zeroshotnermodel static method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"]], "maxsentencelength (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"]], "max_length_limit (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"]], "name (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "optionalinputannotatortypes (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "outputcol (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputCol"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputCol"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputCol"]], "predictionthreshold (zeroshotnermodel attribute)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "read() (zeroshotnermodel class method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.read"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.read"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.read"]], "save() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.save"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.save"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.save"]], "set() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.set"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.set"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.set"]], "setbatchsize() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"]], "setcasesensitive() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"]], "setconfigprotobytes() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"]], "setentitydefinitions() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setinputcols() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"]], "setlazyannotator() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"]], "setmaxsentencelength() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"]], "setoutputcol() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"]], "setparamvalue() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"]], "setparams() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setParams"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParams"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParams"]], "setpredictionthreshold() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[73, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "transform() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.transform"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.transform"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.transform"]], "write() (zeroshotnermodel method)": [[73, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.write"], [147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.write"], [181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.write"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "clear() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.clear"]], "copy() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.copy"]], "defaultreplacementday (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "explainparam() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.explainParam"]], "explainparams() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.explainParams"]], "extractparammap() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.extractParamMap"]], "getinputcols() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getInputCols"]], "getlazyannotator() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getLazyAnnotator"]], "getordefault() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getOrDefault"]], "getoutputcol() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getOutputCol"]], "getparam() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getParam"]], "getparamvalue() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getParamValue"]], "getter_attrs (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getter_attrs"]], "hasdefault() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.hasDefault"]], "hasparam() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.hasParam"]], "inputannotatortypes (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "inputcols (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputCols"]], "inputcolsvalidation() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputColsValidation"]], "isdefined() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.isDefined"]], "isset() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.isSet"]], "lazyannotator (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.lazyAnnotator"]], "load() (datenormalizer class method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.load"]], "name (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "optionalinputannotatortypes (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.optionalInputAnnotatorTypes"]], "outputannotatortype (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputcol (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputCol"]], "outputdateformat (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "read() (datenormalizer class method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.read"]], "save() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.save"]], "set() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.set"]], "setanchordateday() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setforceinputtypevalidation() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setForceInputTypeValidation"]], "setinputcols() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setInputCols"]], "setlazyannotator() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setLazyAnnotator"]], "setoutputcol() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputCol"]], "setoutputdateformat() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "setparamvalue() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setParamValue"]], "setparams() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setParams"]], "skiplpinputcolsvalidation (datenormalizer attribute)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[74, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "transform() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.transform"]], "write() (datenormalizer method)": [[74, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.write"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "clear() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.clear"]], "copy() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.copy"]], "explainparam() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.explainParam"]], "explainparams() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.explainParams"]], "extractparammap() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.extractParamMap"]], "getinputcols() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getInputCols"]], "getlazyannotator() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getLazyAnnotator"]], "getordefault() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getOrDefault"]], "getoutputcol() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getOutputCol"]], "getparam() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getParam"]], "getparamvalue() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getParamValue"]], "getter_attrs (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getter_attrs"]], "hasdefault() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.hasDefault"]], "hasparam() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.hasParam"]], "inputannotatortypes (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "inputcols (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputCols"]], "inputcolsvalidation() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputColsValidation"]], "isdefined() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.isDefined"]], "isset() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.isSet"]], "lazyannotator (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lazyAnnotator"]], "load() (drugnormalizer class method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.load"]], "lowercase (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "optionalinputannotatortypes (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.optionalInputAnnotatorTypes"]], "outputannotatortype (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "outputcol (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputCol"]], "policy (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "read() (drugnormalizer class method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.read"]], "save() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.save"]], "set() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.set"]], "setforceinputtypevalidation() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setForceInputTypeValidation"]], "setinputcols() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setInputCols"]], "setlazyannotator() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLazyAnnotator"]], "setlowercase() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setoutputcol() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setOutputCol"]], "setparamvalue() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setParamValue"]], "setparams() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setParams"]], "setpolicy() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "skiplpinputcolsvalidation (drugnormalizer attribute)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[75, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "transform() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.transform"]], "write() (drugnormalizer method)": [[75, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.write"]], "sparknlp_jsl.annotator.normalizer": [[76, "module-sparknlp_jsl.annotator.normalizer"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[77, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[77, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[78, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "batchsize (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.batchSize"]], "casesensitive (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.caseSensitive"]], "clear() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.clear"]], "configprotobytes (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "copy() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.copy"]], "customprompt (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "dosample (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.doSample"]], "explainparam() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.explainParam"]], "explainparams() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.explainParams"]], "extractparammap() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.extractParamMap"]], "getbatchsize() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getBatchSize"]], "getcasesensitive() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getCaseSensitive"]], "getinputcols() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getInputCols"]], "getlazyannotator() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getLazyAnnotator"]], "getordefault() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getOrDefault"]], "getoutputcol() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getOutputCol"]], "getparam() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getParam"]], "getparamvalue() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getParamValue"]], "getquestiontypes() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "getter_attrs (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getter_attrs"]], "hasdefault() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.hasDefault"]], "hasparam() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.hasParam"]], "ignoretokenids (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "inputcols (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputCols"]], "inputcolsvalidation() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputColsValidation"]], "isdefined() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.isDefined"]], "isset() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.isSet"]], "lazyannotator (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.lazyAnnotator"]], "load() (medicalquestionanswering class method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.load"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "maxcontextlength (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.maxContextLength"]], "maxnewtokens (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.maxNewTokens"]], "mlframeworktype (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.mlFrameworkType"]], "modeltype (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.modelType"]], "name (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "norepeatngramsize (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "outputcol (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputCol"]], "pretrained() (medicalquestionanswering static method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "read() (medicalquestionanswering class method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.read"]], "save() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.save"]], "set() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.set"]], "setbatchsize() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setBatchSize"]], "setcasesensitive() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCaseSensitive"]], "setconfigprotobytes() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setdosample() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setInputCols"]], "setlazyannotator() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setOutputCol"]], "setparamvalue() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setParamValue"]], "setparams() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setParams"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setrandomseed() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setRandomSeed"]], "settopk() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setTopK"]], "setusecache() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.qa.medical_qa": [[79, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "topk (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.topK"]], "transform() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.transform"]], "usecache (medicalquestionanswering attribute)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "write() (medicalquestionanswering method)": [[79, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.write"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "clear() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.clear"]], "copy() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.copy"]], "entities1 (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "explainparam() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.explainParam"]], "explainparams() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.explainParams"]], "extractparammap() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.extractParamMap"]], "getinputcols() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getInputCols"]], "getlazyannotator() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getLazyAnnotator"]], "getordefault() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getOrDefault"]], "getoutputcol() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getOutputCol"]], "getparam() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getParam"]], "getparamvalue() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getParamValue"]], "getter_attrs (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getter_attrs"]], "hasdefault() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.hasDefault"]], "hasparam() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.hasParam"]], "inputannotatortypes (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputCols"]], "inputcolsvalidation() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputColsValidation"]], "isdefined() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.isDefined"]], "isset() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.isSet"]], "lazyannotator (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.lazyAnnotator"]], "load() (nerquestiongenerator class method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.load"]], "name (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "optionalinputannotatortypes (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "outputcol (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputCol"]], "questionmark (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "read() (nerquestiongenerator class method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.read"]], "save() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.save"]], "set() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.set"]], "setentities1() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setInputCols"]], "setlazyannotator() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setOutputCol"]], "setparamvalue() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setParamValue"]], "setparams() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setParams"]], "setquestionmark() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[80, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "transform() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.transform"]], "write() (nerquestiongenerator method)": [[80, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.write"]], "contextsplitassembler (class in sparknlp_jsl.annotator.rag.context_split_assembler)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler"]], "clear() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.clear"]], "copy() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.copy"]], "explainparam() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explainParam"]], "explainparams() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explainParams"]], "explodesplits (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explodeSplits"]], "extractparammap() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.extractParamMap"]], "getinputcols() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getInputCols"]], "getlazyannotator() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getLazyAnnotator"]], "getordefault() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getOrDefault"]], "getoutputcol() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getOutputCol"]], "getparam() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getParam"]], "getparamvalue() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getParamValue"]], "getter_attrs (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getter_attrs"]], "hasdefault() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.hasDefault"]], "hasparam() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.hasParam"]], "inputannotatortypes (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputAnnotatorTypes"]], "inputcols (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputCols"]], "inputcolsvalidation() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputColsValidation"]], "isdefined() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.isDefined"]], "isset() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.isSet"]], "joinstring (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.joinString"]], "lazyannotator (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.lazyAnnotator"]], "load() (contextsplitassembler class method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.load"]], "name (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.name"]], "optionalinputannotatortypes (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.optionalInputAnnotatorTypes"]], "outputannotatortype (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.outputAnnotatorType"]], "outputcol (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.outputCol"]], "read() (contextsplitassembler class method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.read"]], "save() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.save"]], "set() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.set"]], "setexplodesplits() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setExplodeSplits"]], "setforceinputtypevalidation() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setForceInputTypeValidation"]], "setinputcols() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setInputCols"]], "setjoinstring() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setJoinString"]], "setlazyannotator() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setLazyAnnotator"]], "setoutputcol() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setOutputCol"]], "setparamvalue() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setParamValue"]], "setparams() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setParams"]], "skiplpinputcolsvalidation (contextsplitassembler attribute)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[81, "module-sparknlp_jsl.annotator.rag.context_split_assembler"]], "transform() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.transform"]], "write() (contextsplitassembler method)": [[81, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.write"]], "sparknlp_jsl.annotator.rag": [[82, "module-sparknlp_jsl.annotator.rag"]], "vectordbpostprocessor (class in sparknlp_jsl.annotator.rag.vectordb_post_processor)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor"]], "allowzerocontentafterfiltering (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.allowZeroContentAfterFiltering"]], "casesensitive (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.caseSensitive"]], "clear() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.clear"]], "copy() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.copy"]], "diversitythreshold (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.diversityThreshold"]], "explainparam() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.explainParam"]], "explainparams() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.explainParams"]], "extractparammap() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.extractParamMap"]], "filterby (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.filterBy"]], "getinputcols() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getInputCols"]], "getlazyannotator() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getLazyAnnotator"]], "getordefault() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getOrDefault"]], "getoutputcol() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getOutputCol"]], "getparam() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getParam"]], "getparamvalue() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getParamValue"]], "getter_attrs (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getter_attrs"]], "hasdefault() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.hasDefault"]], "hasparam() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.hasParam"]], "inputannotatortypes (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputAnnotatorTypes"]], "inputcols (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputCols"]], "inputcolsvalidation() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputColsValidation"]], "isdefined() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.isDefined"]], "isset() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.isSet"]], "lazyannotator (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.lazyAnnotator"]], "load() (vectordbpostprocessor class method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.load"]], "maxtopkafterfiltering (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.maxTopKAfterFiltering"]], "name (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.name"]], "optionalinputannotatortypes (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.optionalInputAnnotatorTypes"]], "outputannotatortype (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.outputAnnotatorType"]], "outputcol (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.outputCol"]], "read() (vectordbpostprocessor class method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.read"]], "save() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.save"]], "set() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.set"]], "setallowzerocontentafterfiltering() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setAllowZeroContentAfterFiltering"]], "setcasesensitive() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setCaseSensitive"]], "setdiversitythreshold() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setDiversityThreshold"]], "setfilterby() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setFilterBy"]], "setforceinputtypevalidation() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setForceInputTypeValidation"]], "setinputcols() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setInputCols"]], "setlazyannotator() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setLazyAnnotator"]], "setmaxtopkafterfiltering() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMaxTopKAfterFiltering"]], "setmetadatacriteria() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMetadataCriteria"]], "setmetadatacriteriaasstr() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMetadataCriteriaAsStr"]], "setoutputcol() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setOutputCol"]], "setparamvalue() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setParamValue"]], "setparams() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setParams"]], "setsortby() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setSortBy"]], "skiplpinputcolsvalidation (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.skipLPInputColsValidation"]], "sortby (vectordbpostprocessor attribute)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.sortBy"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[83, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"]], "transform() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.transform"]], "write() (vectordbpostprocessor method)": [[83, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.write"]], "sparknlp_jsl.annotator.re": [[84, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "batchsize (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.batchSize"]], "classes (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.classes"]], "classes (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.classes"]], "classes (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "clear() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.clear"]], "clear() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.clear"]], "clear() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.clear"]], "clear() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.clear"]], "copy() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.copy"]], "copy() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.copy"]], "copy() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.copy"]], "copy() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.copy"]], "customlabels (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.customLabels"]], "customlabels (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.customLabels"]], "customlabels (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "datasetinfo (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.datasetInfo"]], "datasetinfo (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.datasetInfo"]], "datasetinfo (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.datasetInfo"]], "datasetinfo (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.datasetInfo"]], "directionsensitive (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.directionSensitive"]], "directionsensitive (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.directionSensitive"]], "directionsensitive (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.directionSensitive"]], "directionsensitive (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.directionSensitive"]], "doexceptionhandling (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.doExceptionHandling"]], "doexceptionhandling (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.doExceptionHandling"]], "doexceptionhandling (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.doExceptionHandling"]], "doexceptionhandling (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.doExceptionHandling"]], "dropout (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.dropout"]], "engine (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.engine"]], "epochsn (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.epochsN"]], "explainparam() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.explainParam"]], "explainparam() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.explainParam"]], "explainparam() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.explainParam"]], "explainparam() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.explainParam"]], "explainparams() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.explainParams"]], "explainparams() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.explainParams"]], "explainparams() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.explainParams"]], "explainparams() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.explainParams"]], "extractparammap() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.extractParamMap"]], "extractparammap() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.extractParamMap"]], "extractparammap() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.extractParamMap"]], "extractparammap() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.extractParamMap"]], "featurescaling (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.featureScaling"]], "featurescaling (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.featureScaling"]], "featurescaling (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.featureScaling"]], "featurescaling (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.featureScaling"]], "filterbytokendistance (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.filterByTokenDistance"]], "filterbytokendistance (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.filterByTokenDistance"]], "filterbytokendistance (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.filterByTokenDistance"]], "filterbytokendistance (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.filterByTokenDistance"]], "fit() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fit"]], "fitmultiple() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fitMultiple"]], "fiximbalance (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fixImbalance"]], "fromentitybegincol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getClasses"]], "getclasses() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getClasses"]], "getclasses() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getengine() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getEngine"]], "getinputcols() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getInputCols"]], "getinputcols() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getInputCols"]], "getinputcols() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getInputCols"]], "getinputcols() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getInputCols"]], "getlazyannotator() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getLazyAnnotator"]], "getlazyannotator() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getLazyAnnotator"]], "getlazyannotator() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getLazyAnnotator"]], "getlazyannotator() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getLazyAnnotator"]], "getordefault() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getOrDefault"]], "getordefault() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getOrDefault"]], "getordefault() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getOrDefault"]], "getordefault() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getOrDefault"]], "getoutputcol() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getOutputCol"]], "getoutputcol() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getOutputCol"]], "getoutputcol() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getOutputCol"]], "getoutputcol() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getOutputCol"]], "getparam() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getParam"]], "getparam() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getParam"]], "getparam() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getParam"]], "getparam() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getParam"]], "getparamvalue() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getParamValue"]], "getparamvalue() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getParamValue"]], "getparamvalue() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getParamValue"]], "getparamvalue() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getParamValue"]], "getrelationtypeperpair() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getRelationTypePerPair"]], "getrelationtypeperpair() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getRelationTypePerPair"]], "getrelationtypeperpair() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "getter_attrs (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getter_attrs"]], "getter_attrs (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getter_attrs"]], "getter_attrs (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getter_attrs"]], "getter_attrs (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getter_attrs"]], "hasdefault() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.hasDefault"]], "hasdefault() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.hasDefault"]], "hasdefault() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.hasDefault"]], "hasdefault() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.hasDefault"]], "hasparam() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.hasParam"]], "hasparam() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.hasParam"]], "hasparam() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.hasParam"]], "hasparam() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.hasParam"]], "inputannotatortypes (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputAnnotatorTypes"]], "inputannotatortypes (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "inputcols (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputCols"]], "inputcols (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputCols"]], "inputcols (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputCols"]], "inputcols (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputCols"]], "inputcolsvalidation() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputColsValidation"]], "inputcolsvalidation() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputColsValidation"]], "inputcolsvalidation() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputColsValidation"]], "inputcolsvalidation() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputColsValidation"]], "isdefined() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.isDefined"]], "isdefined() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.isDefined"]], "isdefined() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.isDefined"]], "isdefined() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.isDefined"]], "isset() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.isSet"]], "isset() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.isSet"]], "isset() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.isSet"]], "isset() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.isSet"]], "labelcolumn (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.labelColumn"]], "lazyannotator (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.lazyAnnotator"]], "lazyannotator (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.lazyAnnotator"]], "lazyannotator (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.lazyAnnotator"]], "lazyannotator (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.lazyAnnotator"]], "learningrate (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.learningRate"]], "load() (genericremodel class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.load"]], "load() (posologyremodel class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.load"]], "load() (relationextractionapproach class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.load"]], "load() (relationextractionmodel class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.load"]], "maxsyntacticdistance (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.maxSyntacticDistance"]], "maxsyntacticdistance (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "modelfile (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.modelFile"]], "multiclass (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.multiClass"]], "multiclass (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.multiClass"]], "multiclass (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.multiClass"]], "multiclass (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.multiClass"]], "name (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.name"]], "name (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.name"]], "name (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "optionalinputannotatortypes (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.outputAnnotatorType"]], "outputannotatortype (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.outputAnnotatorType"]], "outputannotatortype (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "outputcol (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.outputCol"]], "outputcol (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.outputCol"]], "outputcol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputCol"]], "outputcol (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputCol"]], "outputlogspath (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputLogsPath"]], "overrideexistinglabels (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.predictionThreshold"]], "predictionthreshold (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.predictionThreshold"]], "predictionthreshold (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (genericremodel static method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.pretrained"]], "pretrained() (posologyremodel static method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.pretrained"]], "pretrained() (relationextractionmodel static method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "read() (genericremodel class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.read"]], "read() (posologyremodel class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.read"]], "read() (relationextractionapproach class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.read"]], "read() (relationextractionmodel class method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.read"]], "relationdirectioncol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.relationPairs"]], "relationpairs (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.relationPairs"]], "relationpairs (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.relationPairsCaseSensitive"]], "relationpairscasesensitive (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.relationPairsCaseSensitive"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "save() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.save"]], "save() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.save"]], "save() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.save"]], "save() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.save"]], "scopewindow (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.scopeWindow"]], "scopewindow (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.scopeWindow"]], "scopewindow (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.scopeWindow"]], "scopewindow (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.scopeWindow"]], "set() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.set"]], "set() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.set"]], "set() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.set"]], "set() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.set"]], "setbatchsize() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setBatchSize"]], "setcustomlabels() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setCustomLabels"]], "setcustomlabels() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setCustomLabels"]], "setcustomlabels() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setdatasetinfo() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDatasetInfo"]], "setdatasetinfo() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDatasetInfo"]], "setdatasetinfo() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDatasetInfo"]], "setdatasetinfo() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDatasetInfo"]], "setdirectionsensitive() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDirectionSensitive"]], "setdirectionsensitive() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDirectionSensitive"]], "setdirectionsensitive() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDirectionSensitive"]], "setdirectionsensitive() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDirectionSensitive"]], "setdoexceptionhandling() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDoExceptionHandling"]], "setdoexceptionhandling() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDoExceptionHandling"]], "setdoexceptionhandling() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDoExceptionHandling"]], "setdropout() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDropout"]], "setepochsnumber() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setEpochsNumber"]], "setfeaturescaling() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setFeatureScaling"]], "setfeaturescaling() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setFeatureScaling"]], "setfeaturescaling() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFeatureScaling"]], "setfeaturescaling() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFeatureScaling"]], "setfilterbytokendistance() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setFilterByTokenDistance"]], "setfilterbytokendistance() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setFilterByTokenDistance"]], "setfilterbytokendistance() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFilterByTokenDistance"]], "setfilterbytokendistance() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFilterByTokenDistance"]], "setfiximbalance() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setForceInputTypeValidation"]], "setforceinputtypevalidation() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setForceInputTypeValidation"]], "setforceinputtypevalidation() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setForceInputTypeValidation"]], "setfromentity() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setinputcols() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setInputCols"]], "setinputcols() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setInputCols"]], "setinputcols() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setInputCols"]], "setinputcols() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setInputCols"]], "setlabelcol() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLabelCol"]], "setlazyannotator() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setLazyAnnotator"]], "setlazyannotator() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setLazyAnnotator"]], "setlazyannotator() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLazyAnnotator"]], "setlazyannotator() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setLazyAnnotator"]], "setlearningrate() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLearningRate"]], "setmaxsyntacticdistance() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setmodelfile() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setModelFile"]], "setmulticlass() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setMultiClass"]], "setmulticlass() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setMultiClass"]], "setmulticlass() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMultiClass"]], "setmulticlass() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMultiClass"]], "setoutputcol() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setOutputCol"]], "setoutputcol() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setOutputCol"]], "setoutputcol() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setOutputCol"]], "setoutputcol() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setOutputCol"]], "setoutputlogspath() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setOutputLogsPath"]], "setparamvalue() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setParamValue"]], "setparamvalue() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setParamValue"]], "setparamvalue() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setParamValue"]], "setparamvalue() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setParamValue"]], "setparams() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setParams"]], "setparams() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setParams"]], "setparams() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setParams"]], "setpredictionthreshold() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setPredictionThreshold"]], "setpredictionthreshold() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setPredictionThreshold"]], "setpredictionthreshold() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationPairs"]], "setrelationpairs() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationPairs"]], "setrelationpairs() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationPairsCaseSensitive"]], "setrelationpairscasesensitive() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationPairsCaseSensitive"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationTypePerPair"]], "setrelationtypeperpair() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationTypePerPair"]], "setrelationtypeperpair() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "setscopewindow() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setScopeWindow"]], "setscopewindow() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setScopeWindow"]], "setscopewindow() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setScopeWindow"]], "setscopewindow() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setScopeWindow"]], "settoentity() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "setvalidationsplit() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setValidationSplit"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "skiplpinputcolsvalidation (genericremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (posologyremodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (relationextractionmodel attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.relation_extraction": [[85, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "transform() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.transform"]], "transform() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.transform"]], "transform() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.transform"]], "validationsplit (relationextractionapproach attribute)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.validationSplit"]], "write() (genericremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.write"]], "write() (posologyremodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.write"]], "write() (relationextractionapproach method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.write"]], "write() (relationextractionmodel method)": [[85, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.write"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.batchSize"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.classes"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.classes"]], "clear() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.clear"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.clear"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.clear"]], "copy() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.copy"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.copy"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.copy"]], "customlabels (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.customLabels"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "doexceptionhandling (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"]], "explainparam() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.explainParam"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParam"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParam"]], "explainparams() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.explainParams"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParams"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParams"]], "extractparammap() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"]], "getclasses() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getClasses"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "getinputcols() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getInputCols"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getInputCols"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getInputCols"]], "getlazyannotator() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"]], "getordefault() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"]], "getoutputcol() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"]], "getparam() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getParam"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParam"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParam"]], "getparamvalue() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getParamValue"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParamValue"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParamValue"]], "getrelationtypeperpair() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"]], "getter_attrs (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"]], "hasdefault() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.hasDefault"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasDefault"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasDefault"]], "hasparam() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.hasParam"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasParam"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasParam"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "inputcols (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputCols"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputCols"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputCols"]], "inputcolsvalidation() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"]], "isdefined() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.isDefined"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isDefined"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isDefined"]], "isset() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.isSet"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isSet"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isSet"]], "lazyannotator (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"]], "load() (relationextractiondlmodel class method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.load"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.load"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.load"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "optionalinputannotatortypes (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "outputcol (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputCol"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputCol"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputCol"]], "predictionthreshold (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "read() (relationextractiondlmodel class method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.read"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.read"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.read"]], "relationpairscasesensitive (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"]], "save() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.save"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.save"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.save"]], "set() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.set"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.set"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.set"]], "setbatchsize() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setdoexceptionhandling() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"]], "setforceinputtypevalidation() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"]], "setinputcols() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setInputCols"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setInputCols"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setInputCols"]], "setlazyannotator() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"]], "setoutputcol() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"]], "setparamvalue() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setParamValue"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParamValue"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParamValue"]], "setparams() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setParams"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParams"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParams"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "setrelationpairscasesensitive() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"]], "skiplpinputcolsvalidation (relationextractiondlmodel attribute)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[86, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "transform() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.transform"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.transform"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.transform"]], "write() (relationextractiondlmodel method)": [[86, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.write"], [129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.write"], [163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.write"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "clear() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.clear"]], "copy() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.copy"]], "directionsensitive (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.directionSensitive"]], "doclevelrelations (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "explainparam() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.explainParam"]], "explainparams() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.explainParams"]], "extractparammap() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.extractParamMap"]], "filterbytokendistance (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.filterByTokenDistance"]], "getinputcols() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getInputCols"]], "getlazyannotator() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getLazyAnnotator"]], "getordefault() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getOrDefault"]], "getoutputcol() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getOutputCol"]], "getparam() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getParam"]], "getparamvalue() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getParamValue"]], "getter_attrs (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getter_attrs"]], "hasdefault() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.hasDefault"]], "hasparam() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.hasParam"]], "inputannotatortypes (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "inputcols (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputCols"]], "inputcolsvalidation() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputColsValidation"]], "isdefined() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.isDefined"]], "isset() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.isSet"]], "lazyannotator (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.lazyAnnotator"]], "load() (renerchunksfilter class method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.load"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "optionalinputannotatortypes (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.optionalInputAnnotatorTypes"]], "outputannotatortype (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "outputcol (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputCol"]], "read() (renerchunksfilter class method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.read"]], "relationpairs (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "save() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.save"]], "set() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.set"]], "setdirectionsensitive() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDirectionSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setfilterbytokendistance() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setFilterByTokenDistance"]], "setinputcols() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setInputCols"]], "setlazyannotator() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setLazyAnnotator"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setoutputcol() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setOutputCol"]], "setparamvalue() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setParamValue"]], "setparams() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setParams"]], "setrelationpairs() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[87, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "transform() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.transform"]], "write() (renerchunksfilter method)": [[87, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.write"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "batchsize (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.batchSize"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.batchSize"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.batchSize"]], "casesensitive (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"]], "clear() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"]], "coalescesentences (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"]], "configprotobytes (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"]], "copy() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"]], "explainparam() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"]], "explainparams() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"]], "extractparammap() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"]], "getbatchsize() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getBatchSize"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getBatchSize"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getBatchSize"]], "getcasesensitive() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"]], "getclasses() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "getinputcols() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"]], "getlazyannotator() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"]], "getordefault() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"]], "getoutputcol() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"]], "getparam() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"]], "getparamvalue() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"]], "getter_attrs (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"]], "hasdefault() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"]], "hasparam() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "inputcols (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"]], "inputcolsvalidation() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"]], "isdefined() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"]], "isset() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"]], "lazyannotator (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"]], "load() (zeroshotrelationextractionmodel class method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "loadsavedmodelopensource() (zeroshotrelationextractionmodel static method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"]], "maxsentencelength (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "name (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "optionalinputannotatortypes (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "outputcol (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "read() (zeroshotrelationextractionmodel class method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"]], "save() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"]], "set() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"]], "setbatchsize() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setBatchSize"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setBatchSize"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setBatchSize"]], "setcasesensitive() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"]], "setcoalescesentences() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"]], "setconfigprotobytes() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"]], "setforceinputtypevalidation() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"]], "setinputcols() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"]], "setlazyannotator() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"]], "setmaxsentencelength() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setoutputcol() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"]], "setparamvalue() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"]], "setparams() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "skiplpinputcolsvalidation (zeroshotrelationextractionmodel attribute)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[88, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "transform() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"]], "write() (zeroshotrelationextractionmodel method)": [[88, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"], [130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"], [164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"]], "sparknlp_jsl.annotator.regex": [[89, "module-sparknlp_jsl.annotator.regex"]], "regexmatcherinternal (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal"]], "regexmatcherinternalmodel (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel"]], "clear() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.clear"]], "clear() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.clear"]], "copy() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.copy"]], "copy() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.copy"]], "delimiter (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.delimiter"]], "explainparam() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.explainParam"]], "explainparam() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.explainParam"]], "explainparams() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.explainParams"]], "explainparams() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.explainParams"]], "externalrules (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.externalRules"]], "extractparammap() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.extractParamMap"]], "extractparammap() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.extractParamMap"]], "fit() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.fit"]], "fitmultiple() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.fitMultiple"]], "getinputcols() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getInputCols"]], "getinputcols() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getInputCols"]], "getlazyannotator() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getLazyAnnotator"]], "getlazyannotator() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getLazyAnnotator"]], "getordefault() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getOrDefault"]], "getordefault() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getOrDefault"]], "getoutputcol() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getOutputCol"]], "getoutputcol() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getOutputCol"]], "getparam() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getParam"]], "getparam() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getParam"]], "getparamvalue() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getParamValue"]], "getparamvalue() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getParamValue"]], "getter_attrs (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getter_attrs"]], "getter_attrs (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getter_attrs"]], "hasdefault() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.hasDefault"]], "hasdefault() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.hasDefault"]], "hasparam() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.hasParam"]], "hasparam() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.hasParam"]], "inputannotatortypes (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputAnnotatorTypes"]], "inputcols (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputCols"]], "inputcols (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputCols"]], "inputcolsvalidation() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputColsValidation"]], "inputcolsvalidation() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputColsValidation"]], "isdefined() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.isDefined"]], "isdefined() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.isDefined"]], "isset() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.isSet"]], "isset() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.isSet"]], "lazyannotator (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.lazyAnnotator"]], "lazyannotator (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.lazyAnnotator"]], "load() (regexmatcherinternal class method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.load"]], "load() (regexmatcherinternalmodel class method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.load"]], "mergeoverlapping (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.mergeOverlapping"]], "mergeoverlapping (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.mergeOverlapping"]], "name (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.name"]], "optionalinputannotatortypes (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputAnnotatorType"]], "outputannotatortype (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputAnnotatorType"]], "outputcol (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputCol"]], "outputcol (regexmatcherinternalmodel attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputCol"]], "pretrained() (regexmatcherinternalmodel static method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.pretrained"]], "read() (regexmatcherinternal class method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.read"]], "read() (regexmatcherinternalmodel class method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.read"]], "rules (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.rules"]], "save() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.save"]], "save() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.save"]], "set() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.set"]], "set() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.set"]], "setdelimiter() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setDelimiter"]], "setexternalrules() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setExternalRules"]], "setforceinputtypevalidation() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setForceInputTypeValidation"]], "setinputcols() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setInputCols"]], "setinputcols() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setInputCols"]], "setlazyannotator() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setLazyAnnotator"]], "setlazyannotator() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setLazyAnnotator"]], "setmergeoverlapping() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setMergeOverlapping"]], "setoutputcol() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setOutputCol"]], "setoutputcol() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setOutputCol"]], "setparamvalue() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setParamValue"]], "setparamvalue() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setParamValue"]], "setparams() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setParams"]], "setrules() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setRules"]], "setstrategy() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setStrategy"]], "skiplpinputcolsvalidation (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[90, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "strategy (regexmatcherinternal attribute)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.strategy"]], "transform() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.transform"]], "write() (regexmatcherinternal method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.write"]], "write() (regexmatcherinternalmodel method)": [[90, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.write"]], "sparknlp_jsl.annotator.resolution": [[91, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "clear() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.clear"]], "copy() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.copy"]], "explainparam() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.explainParam"]], "explainparams() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.explainParams"]], "extractparammap() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.extractParamMap"]], "getinputcols() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getInputCols"]], "getlazyannotator() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getLazyAnnotator"]], "getordefault() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getOrDefault"]], "getoutputcol() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getOutputCol"]], "getparam() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getParam"]], "getparamvalue() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getParamValue"]], "getter_attrs (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getter_attrs"]], "hasdefault() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.hasDefault"]], "hasparam() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.hasParam"]], "inputannotatortypes (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "inputcols (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputCols"]], "inputcolsvalidation() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputColsValidation"]], "isdefined() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.isDefined"]], "isset() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.isSet"]], "lazyannotator (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.lazyAnnotator"]], "load() (resolvermerger class method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.load"]], "name (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "optionalinputannotatortypes (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "outputcol (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputCol"]], "read() (resolvermerger class method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.read"]], "save() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.save"]], "set() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.set"]], "setforceinputtypevalidation() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setForceInputTypeValidation"]], "setinputcols() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setInputCols"]], "setlazyannotator() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setLazyAnnotator"]], "setoutputcol() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setOutputCol"]], "setparamvalue() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setParamValue"]], "setparams() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setParams"]], "skiplpinputcolsvalidation (resolvermerger attribute)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[92, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "transform() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.transform"]], "write() (resolvermerger method)": [[92, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.write"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "casesensitive (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"]], "casesensitive (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.caseSensitive"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.caseSensitive"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.caseSensitive"]], "casesensitive (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.caseSensitive"]], "clear() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"]], "clear() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"]], "confidencefunction (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"]], "confidencefunction (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "copy() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"]], "copy() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"]], "datasetinfo (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"]], "datasetinfo (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.datasetInfo"]], "dimension (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"]], "distancefunction (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "doexceptionhandling (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"]], "doexceptionhandling (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.doExceptionHandling"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "engine (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"]], "explainparam() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"]], "explainparam() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"]], "explainparams() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"]], "explainparams() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"]], "extractparammap() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"]], "extractparammap() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"]], "fit() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"]], "fitmultiple() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"]], "getcasesensitive() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"]], "getcasesensitive() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getCaseSensitive"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getCaseSensitive"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getCaseSensitive"]], "getcasesensitive() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.getCaseSensitive"]], "getdimension() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"]], "getengine() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"]], "getinputcols() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"]], "getinputcols() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"]], "getlazyannotator() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"]], "getlazyannotator() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"]], "getordefault() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"]], "getordefault() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"]], "getoutputcol() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"]], "getoutputcol() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"]], "getparam() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"]], "getparam() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"]], "getparamvalue() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"]], "getparamvalue() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"]], "getstorageref() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getStorageRef"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getStorageRef"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getStorageRef"]], "getter_attrs (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"]], "getter_attrs (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"]], "hasdefault() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"]], "hasdefault() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"]], "hasparam() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"]], "hasparam() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "inputcols (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"]], "inputcols (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"]], "inputcolsvalidation() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"]], "inputcolsvalidation() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"]], "isdefined() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"]], "isdefined() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"]], "isset() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"]], "isset() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"]], "labelcol (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "lazyannotator (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"]], "lazyannotator (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"]], "load() (sentenceentityresolverapproach class method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"]], "load() (sentenceentityresolvermodel class method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"]], "loadstorage() (sentenceentityresolvermodel static method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.loadStorage"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.loadStorage"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.loadStorage"]], "loadstorages() (sentenceentityresolvermodel static method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.loadStorages"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.loadStorages"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.loadStorages"]], "missasempty (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"]], "missasempty (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"]], "neighbours (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "optionalinputannotatortypes (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "outputcol (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"]], "outputcol (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "read() (sentenceentityresolverapproach class method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"]], "read() (sentenceentityresolvermodel class method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "returnresolvedtextembeddings (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"]], "returnresolvedtextembeddings (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.returnResolvedTextEmbeddings"]], "save() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"]], "save() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"]], "savestorage() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.saveStorage"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.saveStorage"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.saveStorage"]], "searchtree (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "set() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"]], "set() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setcasesensitive() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"]], "setcasesensitive() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setCaseSensitive"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setCaseSensitive"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setCaseSensitive"]], "setcasesensitive() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setCaseSensitive"]], "setconfidencefunction() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"]], "setconfidencefunction() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdatasetinfo() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"]], "setdatasetinfo() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDatasetInfo"]], "setdimension() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"]], "setdistancefunction() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdoexceptionhandling() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDoExceptionHandling"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setforceinputtypevalidation() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"]], "setinputcols() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"]], "setinputcols() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"]], "setlabelcol() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setlazyannotator() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"]], "setlazyannotator() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"]], "setmissasempty() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"]], "setmissasempty() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"]], "setneighbours() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoutputcol() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"]], "setoutputcol() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setparamvalue() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"]], "setparamvalue() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"]], "setparams() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setreturnresolvedtextembeddings() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"]], "setreturnresolvedtextembeddings() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setReturnResolvedTextEmbeddings"]], "setsearchtree() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setstorageref() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setStorageRef"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setStorageRef"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setStorageRef"]], "setthreshold() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"]], "setthreshold() (sentenceresolverparams method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "skiplpinputcolsvalidation (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[93, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "storageref (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.storageRef"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.storageRef"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.storageRef"]], "threshold (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"]], "threshold (sentenceresolverparams attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "transform() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "write() (sentenceentityresolverapproach method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"]], "write() (sentenceentityresolvermodel method)": [[93, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"], [126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"], [160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "clear() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.clear"]], "copy() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.copy"]], "explainparam() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.explainParam"]], "explainparams() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.explainParams"]], "extractparammap() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.extractParamMap"]], "getinputcols() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getInputCols"]], "getlazyannotator() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getLazyAnnotator"]], "getordefault() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getOrDefault"]], "getoutputcol() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getOutputCol"]], "getparam() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getParam"]], "getparamvalue() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getParamValue"]], "getter_attrs (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getter_attrs"]], "hasdefault() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.hasDefault"]], "hasparam() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.hasParam"]], "inputannotatortypes (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "inputcols (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputCols"]], "inputcolsvalidation() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputColsValidation"]], "isdefined() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.isDefined"]], "isset() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.isSet"]], "lazyannotator (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.lazyAnnotator"]], "load() (resolution2chunk class method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.load"]], "name (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "optionalinputannotatortypes (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.optionalInputAnnotatorTypes"]], "outputannotatortype (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "outputcol (resolution2chunk attribute)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputCol"]], "read() (resolution2chunk class method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.read"]], "save() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.save"]], "set() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.set"]], "setinputcols() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setInputCols"]], "setlazyannotator() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setLazyAnnotator"]], "setoutputcol() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setOutputCol"]], "setparamvalue() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParamValue"]], "setparams() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[94, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "transform() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.transform"]], "write() (resolution2chunk method)": [[94, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.write"]], "router (class in sparknlp_jsl.annotator.router)": [[95, "sparknlp_jsl.annotator.router.Router"]], "clear() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.clear"]], "copy() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.copy"]], "explainparam() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.explainParam"]], "explainparams() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.explainParams"]], "extractparammap() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.extractParamMap"]], "filterfieldselements (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "getinputcols() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.getInputCols"]], "getlazyannotator() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.getLazyAnnotator"]], "getordefault() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.getOrDefault"]], "getoutputcol() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.getOutputCol"]], "getparam() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.getParam"]], "getparamvalue() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.getParamValue"]], "getter_attrs (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.getter_attrs"]], "hasdefault() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.hasDefault"]], "hasparam() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.hasParam"]], "inputannotatortypes (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputcols (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.inputCols"]], "inputcolsvalidation() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.inputColsValidation"]], "inputtype (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.inputType"]], "isdefined() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.isDefined"]], "isset() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.isSet"]], "lazyannotator (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.lazyAnnotator"]], "load() (router class method)": [[95, "sparknlp_jsl.annotator.router.Router.load"]], "metadatafield (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.name"]], "optionalinputannotatortypes (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.optionalInputAnnotatorTypes"]], "outputannotatortype (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "outputcol (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.outputCol"]], "read() (router class method)": [[95, "sparknlp_jsl.annotator.router.Router.read"]], "save() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.save"]], "set() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.set"]], "setfilterfieldselements() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setforceinputtypevalidation() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setForceInputTypeValidation"]], "setinputcols() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setlazyannotator() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setLazyAnnotator"]], "setmetadatafield() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "setoutputcol() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setOutputCol"]], "setparamvalue() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setParamValue"]], "setparams() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.setParams"]], "skiplpinputcolsvalidation (router attribute)": [[95, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[95, "module-sparknlp_jsl.annotator.router"]], "transform() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.transform"]], "write() (router method)": [[95, "sparknlp_jsl.annotator.router.Router.write"]], "sparknlp_jsl.annotator.seq2seq": [[96, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "batchsize (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.batchSize"]], "casesensitive (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.caseSensitive"]], "clear() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.clear"]], "configprotobytes (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "copy() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.copy"]], "dosample (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "explainparam() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.explainParam"]], "explainparams() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.explainParams"]], "extractparammap() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.extractParamMap"]], "getbatchsize() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getBatchSize"]], "getcasesensitive() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getCaseSensitive"]], "getinputcols() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getInputCols"]], "getlazyannotator() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getLazyAnnotator"]], "getordefault() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getOrDefault"]], "getoutputcol() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getOutputCol"]], "getparam() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getParam"]], "getparamvalue() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getParamValue"]], "getter_attrs (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getter_attrs"]], "hasdefault() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.hasDefault"]], "hasparam() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.hasParam"]], "ignoretokenids (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "inputcols (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputCols"]], "inputcolsvalidation() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputColsValidation"]], "isdefined() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.isDefined"]], "isset() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.isSet"]], "lazyannotator (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.lazyAnnotator"]], "load() (medicalencoderdecoder class method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.load"]], "maxnewtokens (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "mlframeworktype (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.mlFrameworkType"]], "name (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "outputcol (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputCol"]], "randomseed (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "read() (medicalencoderdecoder class method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.read"]], "refinechunksize (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "save() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.save"]], "set() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.set"]], "setbatchsize() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setBatchSize"]], "setcasesensitive() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setCaseSensitive"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setInputCols"]], "setlazyannotator() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setOutputCol"]], "setparamvalue() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setParamValue"]], "setparams() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setParams"]], "setrandomseed() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[97, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "transform() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.transform"]], "usecache (medicalencoderdecoder attribute)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "write() (medicalencoderdecoder method)": [[97, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.write"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "batchsize (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.batchSize"]], "casesensitive (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.caseSensitive"]], "clear() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.clear"]], "configprotobytes (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.configProtoBytes"]], "copy() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.copy"]], "dosample (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.doSample"]], "explainparam() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.explainParam"]], "explainparams() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.explainParams"]], "extractparammap() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.extractParamMap"]], "getbatchsize() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getBatchSize"]], "getcasesensitive() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getCaseSensitive"]], "getinputcols() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getInputCols"]], "getlazyannotator() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getLazyAnnotator"]], "getordefault() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getOrDefault"]], "getoutputcol() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getOutputCol"]], "getparam() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getParam"]], "getparamvalue() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getParamValue"]], "getter_attrs (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getter_attrs"]], "hasdefault() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.hasDefault"]], "hasparam() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.hasParam"]], "ignoretokenids (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.ignoreTokenIds"]], "inputannotatortypes (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputAnnotatorTypes"]], "inputcols (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputCols"]], "inputcolsvalidation() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputColsValidation"]], "isdefined() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.isDefined"]], "isset() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.isSet"]], "lazyannotator (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.lazyAnnotator"]], "load() (medicalsummarizer class method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.load"]], "loadsavedmodel() (medicalsummarizer static method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "maxnewtokens (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.maxNewTokens"]], "maxtextlength (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.maxTextLength"]], "mlframeworktype (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.mlFrameworkType"]], "name (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "norepeatngramsize (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.outputAnnotatorType"]], "outputcol (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.outputCol"]], "pretrained() (medicalsummarizer static method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "randomseed (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.randomSeed"]], "read() (medicalsummarizer class method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.read"]], "refinechunksize (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineChunkSize"]], "refinemaxattempts (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineMaxAttempts"]], "refinesummary (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineSummary"]], "refinesummarytargetlength (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineSummaryTargetLength"]], "save() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.save"]], "set() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.set"]], "setbatchsize() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setBatchSize"]], "setcasesensitive() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setCaseSensitive"]], "setconfigprotobytes() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setConfigProtoBytes"]], "setdosample() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setDoSample"]], "setforceinputtypevalidation() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setIgnoreTokenIds"]], "setinputcols() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setInputCols"]], "setlazyannotator() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setMaxNewTokens"]], "setmaxtextlength() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setOutputCol"]], "setparamvalue() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setParamValue"]], "setparams() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setParams"]], "setrandomseed() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRandomSeed"]], "setrefinechunksize() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setStopAtEos"]], "settopk() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setTopK"]], "skiplpinputcolsvalidation (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[98, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "stopateos (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.stopAtEos"]], "task (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.task"]], "topk (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.topK"]], "transform() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.transform"]], "usecache (medicalsummarizer attribute)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.useCache"]], "write() (medicalsummarizer method)": [[98, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.write"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "batchsize (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.batchSize"]], "casesensitive (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.caseSensitive"]], "clear() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.clear"]], "configprotobytes (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "copy() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.copy"]], "customprompt (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.customPrompt"]], "dosample (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.doSample"]], "explainparam() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.explainParam"]], "explainparams() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.explainParams"]], "extractparammap() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.extractParamMap"]], "getadditionaltokens() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getAdditionalTokens"]], "getbatchsize() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getBatchSize"]], "getcasesensitive() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getCaseSensitive"]], "getinputcols() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getInputCols"]], "getlazyannotator() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getLazyAnnotator"]], "getordefault() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getOrDefault"]], "getoutputcol() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getOutputCol"]], "getparam() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getParam"]], "getparamvalue() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getParamValue"]], "getter_attrs (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getter_attrs"]], "hasdefault() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.hasDefault"]], "hasparam() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.hasParam"]], "ignoretokenids (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.ignoreTokenIds"]], "inputannotatortypes (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "inputcols (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputCols"]], "inputcolsvalidation() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputColsValidation"]], "isdefined() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.isDefined"]], "isset() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.isSet"]], "lazyannotator (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.lazyAnnotator"]], "load() (medicaltextgenerator class method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.load"]], "loadsavedmodel() (medicaltextgenerator static method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxcontextlength (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxContextLength"]], "maxnewtokens (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxNewTokens"]], "maxtextlength (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "mlframeworktype (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.mlFrameworkType"]], "modeltype (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "norepeatngramsize (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "outputcol (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputCol"]], "pretrained() (medicaltextgenerator static method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "read() (medicaltextgenerator class method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.read"]], "save() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.save"]], "set() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.set"]], "setadditionaltokens() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setAdditionalTokens"]], "setbatchsize() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setBatchSize"]], "setcasesensitive() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCaseSensitive"]], "setconfigprotobytes() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCustomPrompt"]], "setdosample() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setDoSample"]], "setforceinputtypevalidation() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setIgnoreTokenIds"]], "setinputcols() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setInputCols"]], "setlazyannotator() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setOutputCol"]], "setparamvalue() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setParamValue"]], "setparams() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setParams"]], "setrandomseed() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setRandomSeed"]], "setstopateos() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "settopk() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setTopK"]], "setusecache() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[99, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "topk (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.topK"]], "transform() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.transform"]], "usecache (medicaltextgenerator attribute)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "write() (medicaltextgenerator method)": [[99, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.write"]], "text2sql (class in sparknlp_jsl.annotator.seq2seq.text2sql)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL"]], "batchsize (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.batchSize"]], "casesensitive (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.caseSensitive"]], "clear() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.clear"]], "configprotobytes (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.configProtoBytes"]], "copy() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.copy"]], "customprompt (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.customPrompt"]], "dosample (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.doSample"]], "explainparam() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.explainParam"]], "explainparams() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.explainParams"]], "extractparammap() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.extractParamMap"]], "getadditionaltokens() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getAdditionalTokens"]], "getbatchsize() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getBatchSize"]], "getcasesensitive() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getCaseSensitive"]], "getinputcols() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getInputCols"]], "getlazyannotator() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getLazyAnnotator"]], "getordefault() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getOrDefault"]], "getoutputcol() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getOutputCol"]], "getparam() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getParam"]], "getparamvalue() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getParamValue"]], "getpostprocessingsubstitutions() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getPostProcessingSubstitutions"]], "getschema() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getSchema"]], "getter_attrs (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getter_attrs"]], "hasdefault() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.hasDefault"]], "hasparam() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.hasParam"]], "ignoretokenids (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.ignoreTokenIds"]], "inputannotatortypes (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputAnnotatorTypes"]], "inputcols (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputCols"]], "inputcolsvalidation() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputColsValidation"]], "isdefined() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.isDefined"]], "isset() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.isSet"]], "lazyannotator (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.lazyAnnotator"]], "load() (text2sql class method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.load"]], "loadsavedmodel() (text2sql static method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.loadSavedModel"]], "maxcontextlength (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxContextLength"]], "maxnewtokens (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxNewTokens"]], "maxtextlength (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxTextLength"]], "mlframeworktype (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.mlFrameworkType"]], "modeltype (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.modelType"]], "name (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.name"]], "norepeatngramsize (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.noRepeatNgramSize"]], "optionalinputannotatortypes (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.optionalInputAnnotatorTypes"]], "outputannotatortype (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.outputAnnotatorType"]], "outputcol (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.outputCol"]], "pretrained() (text2sql static method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.pretrained"]], "read() (text2sql class method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.read"]], "save() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.save"]], "set() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.set"]], "setadditionaltokens() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setAdditionalTokens"]], "setbatchsize() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setBatchSize"]], "setcasesensitive() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setCaseSensitive"]], "setconfigprotobytes() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setConfigProtoBytes"]], "setcustomprompt() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setCustomPrompt"]], "setdosample() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setDoSample"]], "setforceinputtypevalidation() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setForceInputTypeValidation"]], "setignoretokenids() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setIgnoreTokenIds"]], "setinputcols() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setInputCols"]], "setlazyannotator() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setLazyAnnotator"]], "setmaxcontextlength() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxContextLength"]], "setmaxnewtokens() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxNewTokens"]], "setmaxtextlength() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxTextLength"]], "setnorepeatngramsize() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setNoRepeatNgramSize"]], "setoutputcol() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setOutputCol"]], "setparamvalue() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setParamValue"]], "setparams() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setParams"]], "setpostprocessingsubstitutions() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setPostProcessingSubstitutions"]], "setrandomseed() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setRandomSeed"]], "setschema() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setSchema"]], "setstopateos() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setStopAtEos"]], "settablelimit() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTableLimit"]], "settopk() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTopK"]], "setusecache() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setUseCache"]], "skiplpinputcolsvalidation (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[100, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "stopateos (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.stopAtEos"]], "tablelimit (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.tableLimit"]], "topk (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.topK"]], "transform() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.transform"]], "usecache (text2sql attribute)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.useCache"]], "write() (text2sql method)": [[100, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.write"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[101, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[101, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[102, "module-sparknlp_jsl.annotator.splitter"]], "internaldocumentsplitter (class in sparknlp_jsl.annotator.splitter.internal_document_splitter)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter"]], "casesensitive (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.caseSensitive"]], "chunkoverlap (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.chunkOverlap"]], "chunksize (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.chunkSize"]], "clear() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.clear"]], "copy() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.copy"]], "customboundsstrategy (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.customBoundsStrategy"]], "enablesentenceincrement (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.enableSentenceIncrement"]], "explainparam() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explainParam"]], "explainparams() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explainParams"]], "explodesplits (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explodeSplits"]], "extractparammap() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.extractParamMap"]], "getinputcols() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getInputCols"]], "getlazyannotator() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getLazyAnnotator"]], "getordefault() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getOrDefault"]], "getoutputcol() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getOutputCol"]], "getparam() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getParam"]], "getparamvalue() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getParamValue"]], "getter_attrs (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getter_attrs"]], "hasdefault() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.hasDefault"]], "hasparam() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.hasParam"]], "inputannotatortypes (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputAnnotatorTypes"]], "inputcols (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputCols"]], "inputcolsvalidation() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputColsValidation"]], "isdefined() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.isDefined"]], "isset() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.isSet"]], "keepseparators (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.keepSeparators"]], "lazyannotator (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.lazyAnnotator"]], "load() (internaldocumentsplitter class method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.load"]], "maxlength (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.maxLength"]], "metadatafields (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.metaDataFields"]], "name (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.name"]], "optionalinputannotatortypes (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputAnnotatorType"]], "outputcol (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputCol"]], "patternsareregex (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.patternsAreRegex"]], "read() (internaldocumentsplitter class method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.read"]], "save() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.save"]], "sentenceawareness (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.sentenceAwareness"]], "set() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.set"]], "setcasesensitive() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCaseSensitive"]], "setchunkoverlap() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setChunkOverlap"]], "setchunksize() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setChunkSize"]], "setcustomboundsstrategy() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCustomBoundsStrategy"]], "setenablesentenceincrement() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setEnableSentenceIncrement"]], "setexplodesplits() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setExplodeSplits"]], "setforceinputtypevalidation() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setForceInputTypeValidation"]], "setinputcols() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setInputCols"]], "setkeepseparators() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setKeepSeparators"]], "setlazyannotator() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setLazyAnnotator"]], "setmaxlength() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMaxLength"]], "setmetadatafields() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMetaDataFields"]], "setoutputcol() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setOutputCol"]], "setparamvalue() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setParamValue"]], "setparams() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setParams"]], "setpatternsareregex() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setPatternsAreRegex"]], "setsentenceawareness() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSentenceAwareness"]], "setsplitmode() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitMode"]], "setsplitpatterns() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitPatterns"]], "settrimwhitespace() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setTrimWhitespace"]], "skiplpinputcolsvalidation (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[103, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "splitmode (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitMode"]], "splitpatterns (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitPatterns"]], "transform() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.transform"]], "trimwhitespace (internaldocumentsplitter attribute)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.trimWhitespace"]], "write() (internaldocumentsplitter method)": [[103, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.write"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "clear() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.clear"]], "clear() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.clear"]], "copy() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.copy"]], "copy() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.copy"]], "explainparam() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.explainParam"]], "explainparam() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.explainParam"]], "explainparams() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.explainParams"]], "explainparams() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.explainParams"]], "extractparammap() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.extractParamMap"]], "extractparammap() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.extractParamMap"]], "fit() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.fit"]], "fitmultiple() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.fitMultiple"]], "getbatchnorm() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getordefault() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOrDefault"]], "getordefault() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.getOrDefault"]], "getoutputact() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getparam() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getParam"]], "getparam() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.getParam"]], "getuserelationdirection() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hasdefault() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hasDefault"]], "hasdefault() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.hasDefault"]], "hasparam() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hasParam"]], "hasparam() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.hasParam"]], "hiddenact (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "isdefined() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isDefined"]], "isdefined() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.isDefined"]], "islicensed (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "isset() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isSet"]], "isset() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.isSet"]], "labelcolumn (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "load() (tfgraphbuilder class method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.load"]], "load() (tfgraphbuildermodel class method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.load"]], "maxsequencelength (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "read() (tfgraphbuilder class method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.read"]], "read() (tfgraphbuildermodel class method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.read"]], "save() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.save"]], "save() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.save"]], "set() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.set"]], "set() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.set"]], "setbatchnorm() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[104, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "transform() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.transform"]], "userelationdirection (tfgraphbuilder attribute)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "write() (tfgraphbuilder method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.write"]], "write() (tfgraphbuildermodel method)": [[104, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.write"]], "whiteblacklistparams (class in sparknlp_jsl.annotator.white_black_list_params)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams"]], "blacklist (whiteblacklistparams attribute)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.blackList"]], "casesensitive (whiteblacklistparams attribute)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.caseSensitive"]], "setblacklist() (whiteblacklistparams method)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setBlackList"]], "setcasesensitive() (whiteblacklistparams method)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setCaseSensitive"]], "setdenylist() (whiteblacklistparams method)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setDenyList"]], "setwhitelist() (whiteblacklistparams method)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setWhiteList"]], "sparknlp_jsl.annotator.white_black_list_params": [[105, "module-sparknlp_jsl.annotator.white_black_list_params"]], "whitelist (whiteblacklistparams attribute)": [[105, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.whiteList"]], "sparknlp_jsl.annotator.windowed": [[106, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "clear() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.clear"]], "copy() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.copy"]], "explainparam() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.explainParam"]], "explainparams() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.explainParams"]], "extractparammap() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.extractParamMap"]], "getinputcols() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getInputCols"]], "getlazyannotator() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getLazyAnnotator"]], "getordefault() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getOrDefault"]], "getoutputcol() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getOutputCol"]], "getparam() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getParam"]], "getparamvalue() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getParamValue"]], "getter_attrs (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getter_attrs"]], "gluestring (windowedparams attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "gluestring (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.glueString"]], "hasdefault() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.hasDefault"]], "hasparam() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.hasParam"]], "inputannotatortypes (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "inputcols (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputCols"]], "inputcolsvalidation() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputColsValidation"]], "isdefined() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.isDefined"]], "isset() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.isSet"]], "lazyannotator (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.lazyAnnotator"]], "load() (windowedsentencemodel class method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.load"]], "optionalinputannotatortypes (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.optionalInputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "outputcol (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputCol"]], "read() (windowedsentencemodel class method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.read"]], "save() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.save"]], "set() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.set"]], "setforceinputtypevalidation() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setForceInputTypeValidation"]], "setgluestring() (windowedparams method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setgluestring() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setGlueString"]], "setinputcols() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setInputCols"]], "setlazyannotator() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setLazyAnnotator"]], "setoutputcol() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setOutputCol"]], "setparamvalue() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setParamValue"]], "setparams() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setParams"]], "setwindowsize() (windowedparams method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "setwindowsize() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setWindowSize"]], "skiplpinputcolsvalidation (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[107, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "transform() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.transform"]], "windowsize (windowedparams attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "windowsize (windowedsentencemodel attribute)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.windowSize"]], "write() (windowedsentencemodel method)": [[107, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.write"]], "sparknlp_jsl.base": [[108, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "clear() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.clear"]], "copy() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.copy"]], "explainparam() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.explainParam"]], "explainparams() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.explainParams"]], "extractparammap() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.extractParamMap"]], "fit() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.fit"]], "fitmultiple() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.fitMultiple"]], "getinputcols() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getInputCols"]], "getlazyannotator() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getLazyAnnotator"]], "getordefault() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getOrDefault"]], "getoutputcol() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getOutputCol"]], "getparam() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getParam"]], "getparamvalue() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getParamValue"]], "getter_attrs (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getter_attrs"]], "hasdefault() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.hasDefault"]], "hasparam() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.hasParam"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "inputcols (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputCols"]], "inputcolsvalidation() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputColsValidation"]], "isdefined() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.isDefined"]], "isset() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.isSet"]], "lazyannotator (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.lazyAnnotator"]], "load() (annotatorapproachinternal class method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.load"]], "optionalinputannotatortypes (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "outputcol (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputCol"]], "read() (annotatorapproachinternal class method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.read"]], "save() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.save"]], "set() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.set"]], "setforceinputtypevalidation() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setForceInputTypeValidation"]], "setinputcols() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setInputCols"]], "setlazyannotator() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setLazyAnnotator"]], "setoutputcol() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setOutputCol"]], "setparamvalue() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setParamValue"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[109, "module-sparknlp_jsl.common.annotator_approach_internal"]], "write() (annotatorapproachinternal method)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.write"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "clear() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.clear"]], "copy() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.copy"]], "explainparam() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.explainParam"]], "explainparams() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.explainParams"]], "extractparammap() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.extractParamMap"]], "getinputcols() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getInputCols"]], "getlazyannotator() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getLazyAnnotator"]], "getordefault() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getOrDefault"]], "getoutputcol() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getOutputCol"]], "getparam() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getParam"]], "getparamvalue() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getParamValue"]], "getter_attrs (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getter_attrs"]], "hasdefault() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.hasDefault"]], "hasparam() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.hasParam"]], "inputannotatortypes (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "inputcols (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputCols"]], "inputcolsvalidation() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputColsValidation"]], "isdefined() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.isDefined"]], "isset() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.isSet"]], "lazyannotator (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.lazyAnnotator"]], "load() (annotatormodelinternal class method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.load"]], "optionalinputannotatortypes (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "outputcol (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputCol"]], "read() (annotatormodelinternal class method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.read"]], "save() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.save"]], "set() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.set"]], "setforceinputtypevalidation() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setForceInputTypeValidation"]], "setinputcols() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setInputCols"]], "setlazyannotator() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setLazyAnnotator"]], "setoutputcol() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setOutputCol"]], "setparamvalue() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParamValue"]], "setparams() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[110, "module-sparknlp_jsl.common.annotator_model_internal"]], "transform() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.transform"]], "write() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.write"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "clear() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.clear"]], "copy() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.copy"]], "explainparam() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.explainParam"]], "explainparams() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.explainParams"]], "extractparammap() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.extractParamMap"]], "getinputcols() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getInputCols"]], "getlazyannotator() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getLazyAnnotator"]], "getordefault() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getOrDefault"]], "getoutputcol() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getOutputCol"]], "getparam() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getParam"]], "hasdefault() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.hasDefault"]], "hasparam() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.hasParam"]], "inputannotatortypes (annotatorpropertiesinternal attribute)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputAnnotatorTypes"]], "inputcols (annotatorpropertiesinternal attribute)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputCols"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "isdefined() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.isDefined"]], "isset() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.isSet"]], "lazyannotator (annotatorpropertiesinternal attribute)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.lazyAnnotator"]], "optionalinputannotatortypes (annotatorpropertiesinternal attribute)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorpropertiesinternal attribute)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.outputAnnotatorType"]], "outputcol (annotatorpropertiesinternal attribute)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.outputCol"]], "set() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.set"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "setinputcols() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setInputCols"]], "setlazyannotator() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setLazyAnnotator"]], "setoutputcol() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setOutputCol"]], "sparknlp_jsl.common.annotator_properties_internal": [[111, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[112, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[113, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[113, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "instance (compatibility attribute)": [[113, "sparknlp_jsl.compatibility.Compatibility.instance"]], "showversion() (compatibility method)": [[113, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "spark (compatibility attribute)": [[113, "sparknlp_jsl.compatibility.Compatibility.spark"]], "sparknlp_jsl.compatibility": [[113, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "clear() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.clear"]], "copy() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.copy"]], "explainparam() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.explainParam"]], "explainparams() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.explainParams"]], "extractparammap() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.extractParamMap"]], "f (customtransformer attribute)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "getinputcol() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.getInputCol"]], "getordefault() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.getOrDefault"]], "getoutputcol() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.getOutputCol"]], "getparam() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.getParam"]], "hasdefault() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.hasDefault"]], "hasparam() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.hasParam"]], "inputcol (customtransformer attribute)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.inputCol"]], "isdefined() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.isDefined"]], "isset() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.isSet"]], "load() (customtransformer class method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.load"]], "outputcol (customtransformer attribute)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.outputCol"]], "read() (customtransformer class method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.read"]], "save() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.save"]], "set() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.set"]], "setinputcol() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[114, "module-sparknlp_jsl.custom_transformer"]], "transform() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.transform"]], "write() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.write"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier"]], "age_group_obfuscation (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.age_group_obfuscation"]], "age_ranges (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.age_ranges"]], "custom_pipeline (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.custom_pipeline"]], "date_shift_column_name (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.date_shift_column_name"]], "date_tag (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.date_tag"]], "deid_with_custom_pipeline() (deidentifier method)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "document (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.document"]], "documenthashcoder_col_name (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.documenthashcoder_col_name"]], "domain (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.domain"]], "fields (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.fields"]], "fixed_mask_length (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.fixed_mask_length"]], "id_column_name (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.id_column_name"]], "input_file_path (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.input_file_path"]], "language (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.language"]], "masking_policy (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.masking_policy"]], "multi_mode_file_path (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.multi_mode_file_path"]], "ner_chunk (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.ner_chunk"]], "number_of_days (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.number_of_days"]], "obfuscate_date (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_date"]], "obfuscate_ref_file_path (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_ref_file_path"]], "obfuscate_ref_source (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_ref_source"]], "output_file_path (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.output_file_path"]], "region (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.region"]], "sentence (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.sentence"]], "separator (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.separator"]], "shift_days (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.shift_days"]], "spark (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.spark"]], "sparknlp_jsl.deidentification_module": [[115, "module-sparknlp_jsl.deidentification_module"]], "token (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.token"]], "unnormalized_date (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.unnormalized_date"]], "unnormalized_mode (deidentifier attribute)": [[115, "sparknlp_jsl.deidentification_module.Deidentifier.unnormalized_mode"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[116, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[116, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[116, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation"]], "apply() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.apply"]], "apply() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.apply"]], "apply() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.apply"]], "apply() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.apply"]], "apply() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.apply"]], "apply() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.apply"]], "computeaccuracyannotator() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "getdataframe() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.getDataFrame"]], "getdataframe() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.getDataFrame"]], "getdataframe() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.getDataFrame"]], "getdataframe() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.getDataFrame"]], "getdataframe() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.getDataFrame"]], "getdataframe() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.getDataFrame"]], "new_java_array() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array"]], "new_java_array() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array"]], "new_java_array() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.new_java_array"]], "new_java_array() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array"]], "new_java_array() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.new_java_array"]], "new_java_array() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array"]], "new_java_array_integer() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array_integer"]], "new_java_array_integer() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array_integer"]], "new_java_array_integer() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.new_java_array_integer"]], "new_java_array_integer() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array_integer"]], "new_java_array_integer() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.new_java_array_integer"]], "new_java_array_integer() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array_integer"]], "new_java_array_string() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array_string"]], "new_java_array_string() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array_string"]], "new_java_array_string() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.new_java_array_string"]], "new_java_array_string() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array_string"]], "new_java_array_string() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.new_java_array_string"]], "new_java_array_string() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array_string"]], "new_java_obj() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_obj"]], "new_java_obj() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.new_java_obj"]], "new_java_obj() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.new_java_obj"]], "new_java_obj() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_obj"]], "new_java_obj() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.new_java_obj"]], "new_java_obj() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_obj"]], "spark_version() (nercrfevaluation method)": [[116, "sparknlp_jsl.eval.NerCrfEvaluation.spark_version"]], "spark_version() (nerdlevaluation method)": [[116, "sparknlp_jsl.eval.NerDLEvaluation.spark_version"]], "spark_version() (nerdlmetrics method)": [[116, "sparknlp_jsl.eval.NerDLMetrics.spark_version"]], "spark_version() (norvigspellevaluation method)": [[116, "sparknlp_jsl.eval.NorvigSpellEvaluation.spark_version"]], "spark_version() (posevaluation method)": [[116, "sparknlp_jsl.eval.POSEvaluation.spark_version"]], "spark_version() (symspellevaluation method)": [[116, "sparknlp_jsl.eval.SymSpellEvaluation.spark_version"]], "sparknlp_jsl.eval": [[116, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[117, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[117, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[118, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[119, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[119, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "clear() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.clear"]], "copy() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.copy"]], "dateshiftcolumn (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.dateShiftColumn"]], "explainparam() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.explainParam"]], "explainparams() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.explainParams"]], "extractparammap() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.extractParamMap"]], "getinputcols() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getInputCols"]], "getlazyannotator() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getLazyAnnotator"]], "getordefault() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getOrDefault"]], "getoutputcol() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getOutputCol"]], "getparam() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getParam"]], "getparamvalue() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getParamValue"]], "getter_attrs (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getter_attrs"]], "hasdefault() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.hasDefault"]], "hasparam() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.hasParam"]], "inputannotatortypes (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputAnnotatorTypes"]], "inputcols (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputCols"]], "inputcolsvalidation() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputColsValidation"]], "isdefined() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.isDefined"]], "isset() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.isSet"]], "lazyannotator (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.lazyAnnotator"]], "load() (financedocumenthashcoder class method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.load"]], "name (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.name"]], "newdateshift (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.outputAnnotatorType"]], "outputcol (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.outputCol"]], "patientidcolumn (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.patientIdColumn"]], "rangedays (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.rangeDays"]], "read() (financedocumenthashcoder class method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.read"]], "save() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.save"]], "seed (financedocumenthashcoder attribute)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.seed"]], "set() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.set"]], "setdateshiftcolumn() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setDateShiftColumn"]], "setidcolumn() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "setinputcols() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setInputCols"]], "setlazyannotator() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setNewDateShift"]], "setoutputcol() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setOutputCol"]], "setparamvalue() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setParamValue"]], "setparams() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setParams"]], "setpatientidcolumn() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setPatientIdColumn"]], "setrangedays() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setRangeDays"]], "setseed() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setSeed"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[120, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "transform() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.transform"]], "write() (financedocumenthashcoder method)": [[120, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.write"]], "sparknlp_jsl.finance.chunk_classification.deid": [[121, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[122, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[123, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[123, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[124, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[124, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[125, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[126, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[126, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[127, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[128, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[129, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[129, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[130, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[130, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[131, "module-sparknlp_jsl.finance"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "batchsize (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.batchSize"]], "casesensitive (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.caseSensitive"]], "clear() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.clear"]], "coalescesentences (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.coalesceSentences"]], "configprotobytes (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.configProtoBytes"]], "copy() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.copy"]], "explainparam() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.explainParam"]], "explainparams() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.explainParams"]], "extractparammap() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.extractParamMap"]], "getbatchsize() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getBatchSize"]], "getcasesensitive() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getCaseSensitive"]], "getclasses() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getClasses"]], "getinputcols() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getInputCols"]], "getlazyannotator() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getOrDefault"]], "getoutputcol() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getOutputCol"]], "getparam() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getParam"]], "getparamvalue() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getParamValue"]], "getter_attrs (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getter_attrs"]], "hasdefault() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.hasDefault"]], "hasparam() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.hasParam"]], "inputannotatortypes (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputColsValidation"]], "isdefined() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.isDefined"]], "isset() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.isSet"]], "lazyannotator (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.lazyAnnotator"]], "load() (financebertforsequenceclassification class method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.load"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.maxSentenceLength"]], "name (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "optionalinputannotatortypes (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.outputAnnotatorType"]], "outputcol (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.outputCol"]], "pretrained() (financebertforsequenceclassification static method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "read() (financebertforsequenceclassification class method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.read"]], "save() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.save"]], "set() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.set"]], "setbatchsize() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setBatchSize"]], "setcasesensitive() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setInputCols"]], "setlazyannotator() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setOutputCol"]], "setparamvalue() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setParamValue"]], "setparams() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (financebertforsequenceclassification attribute)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[132, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "transform() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.transform"]], "write() (financebertforsequenceclassification method)": [[132, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.write"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "batchsize (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.batchSize"]], "classes (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.classes"]], "clear() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.clear"]], "clear() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.clear"]], "configprotobytes (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.configProtoBytes"]], "configprotobytes (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.configProtoBytes"]], "copy() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.copy"]], "copy() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.copy"]], "dropout (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.dropout"]], "enableoutputlogs (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.enableOutputLogs"]], "engine (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.engine"]], "evaluationlogextended (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.evaluationLogExtended"]], "explainparam() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.explainParam"]], "explainparam() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.explainParam"]], "explainparams() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.explainParams"]], "explainparams() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.explainParams"]], "extractparammap() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.extractParamMap"]], "extractparammap() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.extractParamMap"]], "fit() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.fit"]], "fitmultiple() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.fitMultiple"]], "getengine() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getEngine"]], "getinputcols() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getInputCols"]], "getinputcols() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getInputCols"]], "getlazyannotator() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getLazyAnnotator"]], "getlazyannotator() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getLazyAnnotator"]], "getordefault() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getOrDefault"]], "getordefault() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getOrDefault"]], "getoutputcol() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getOutputCol"]], "getoutputcol() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getOutputCol"]], "getparam() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getParam"]], "getparam() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getParam"]], "getparamvalue() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getParamValue"]], "getparamvalue() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getParamValue"]], "getstorageref() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getStorageRef"]], "getter_attrs (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getter_attrs"]], "getter_attrs (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getter_attrs"]], "hasdefault() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.hasDefault"]], "hasdefault() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.hasDefault"]], "hasparam() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.hasParam"]], "hasparam() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.hasParam"]], "inputannotatortypes (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputAnnotatorTypes"]], "inputcols (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputCols"]], "inputcols (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputCols"]], "inputcolsvalidation() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputColsValidation"]], "inputcolsvalidation() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputColsValidation"]], "isdefined() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.isDefined"]], "isdefined() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.isDefined"]], "isset() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.isSet"]], "isset() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.isSet"]], "labelcolumn (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.labelColumn"]], "lazyannotator (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.lazyAnnotator"]], "lazyannotator (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.lazyAnnotator"]], "load() (financeclassifierdlapproach class method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.load"]], "load() (financeclassifierdlmodel class method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.load"]], "lr (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.lr"]], "maxepochs (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.maxEpochs"]], "name (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "optionalinputannotatortypes (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.outputAnnotatorType"]], "outputcol (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputCol"]], "outputcol (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.outputCol"]], "outputlogspath (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputLogsPath"]], "pretrained() (financeclassifierdlmodel static method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "randomseed (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.randomSeed"]], "read() (financeclassifierdlapproach class method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.read"]], "read() (financeclassifierdlmodel class method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.read"]], "save() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.save"]], "save() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.save"]], "set() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.set"]], "set() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.set"]], "setbatchsize() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setBatchSize"]], "setconfigprotobytes() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setConfigProtoBytes"]], "setdropout() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setDropout"]], "setenableoutputlogs() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setEnableOutputLogs"]], "setevaluationlogextended() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setEvaluationLogExtended"]], "setinputcols() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setInputCols"]], "setinputcols() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setInputCols"]], "setlabelcolumn() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLabelColumn"]], "setlazyannotator() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLazyAnnotator"]], "setlazyannotator() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setLazyAnnotator"]], "setlr() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLr"]], "setmaxepochs() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setMaxEpochs"]], "setoutputcol() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setOutputCol"]], "setoutputcol() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setOutputCol"]], "setoutputlogspath() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setOutputLogsPath"]], "setparamvalue() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setParamValue"]], "setparamvalue() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setParamValue"]], "setparams() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setParams"]], "setrandomseed() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setRandomSeed"]], "setstorageref() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setStorageRef"]], "settestdataset() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setTestDataset"]], "setvalidationsplit() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setValidationSplit"]], "setverbose() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setVerbose"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[133, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "storageref (financeclassifierdlmodel attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.storageRef"]], "testdataset (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.testDataset"]], "transform() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.transform"]], "validationsplit (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.validationSplit"]], "verbose (financeclassifierdlapproach attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.verbose"]], "write() (financeclassifierdlapproach method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.write"]], "write() (financeclassifierdlmodel method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.write"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "classificationmodel (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.classificationModelPath"]], "clear() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.clear"]], "clear() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.clear"]], "copy() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.copy"]], "copy() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.copy"]], "explainparam() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.explainParam"]], "explainparam() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.explainParam"]], "explainparams() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.explainParams"]], "explainparams() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.explainParams"]], "extractparammap() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.extractParamMap"]], "fit() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fit"]], "fitintercept (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getInputCols"]], "getinputcols() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getOrDefault"]], "getordefault() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getOutputCol"]], "getparam() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getParam"]], "getparam() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getParam"]], "getparamvalue() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getParamValue"]], "getter_attrs (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getter_attrs"]], "hasdefault() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.hasDefault"]], "hasdefault() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.hasDefault"]], "hasparam() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.hasParam"]], "hasparam() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.hasParam"]], "inputannotatortypes (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputCols"]], "inputcols (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputColsValidation"]], "isdefined() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.isDefined"]], "isdefined() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.isDefined"]], "isset() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.isSet"]], "isset() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.isSet"]], "labelcol (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.labelCol"]], "labels (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.labels"]], "labels (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.labels"]], "lazyannotator (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.lazyAnnotator"]], "load() (financedocumentmlclassifierapproach class method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.load"]], "load() (financedocumentmlclassifiermodel class method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.load"]], "maxiter (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.maxIter"]], "maxtokenngram (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.maxTokenNgram"]], "mergechunks (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.mergeChunks"]], "mergechunks (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.mergeChunks"]], "mintokenngram (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.minTokenNgram"]], "name (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "optionalinputannotatortypes (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.outputCol"]], "outputcol (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.outputCol"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "read() (financedocumentmlclassifierapproach class method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.read"]], "read() (financedocumentmlclassifiermodel class method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.read"]], "save() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.save"]], "save() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.save"]], "set() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.set"]], "set() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.set"]], "setclassificationmodel() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setInputCols"]], "setinputcols() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setInputCols"]], "setlabelcol() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLabelCol"]], "setlabels() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLabels"]], "setlabels() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setLabels"]], "setlazyannotator() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setMergeChunks"]], "setmintokenngram() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setParamValue"]], "setparams() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setParams"]], "settol() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[134, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "tol (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.tol"]], "transform() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.transform"]], "vectorizationmodel (financedocumentmlclassifiermodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (financedocumentmlclassifierapproach attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.vectorizationModelPath"]], "write() (financedocumentmlclassifierapproach method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.write"]], "write() (financedocumentmlclassifiermodel method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.write"]], "financefewshotclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach"]], "financefewshotclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel"]], "batchsize (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.batchSize"]], "classes (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.classes"]], "clear() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.clear"]], "clear() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.clear"]], "copy() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.copy"]], "copy() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.copy"]], "datasetinfo (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.datasetInfo"]], "datasetinfo (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.datasetInfo"]], "doexceptionhandling (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.doExceptionHandling"]], "dropout (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.dropout"]], "engine (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.engine"]], "epochsn (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.epochsN"]], "explainparam() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.explainParam"]], "explainparam() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.explainParam"]], "explainparams() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.explainParams"]], "explainparams() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.explainParams"]], "extractparammap() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.extractParamMap"]], "extractparammap() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.extractParamMap"]], "featurescaling (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.featureScaling"]], "featurescaling (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.featureScaling"]], "fit() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fit"]], "fitmultiple() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fitMultiple"]], "fiximbalance (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fixImbalance"]], "getengine() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getEngine"]], "getinputcols() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getInputCols"]], "getinputcols() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getInputCols"]], "getlazyannotator() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getOrDefault"]], "getordefault() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getOrDefault"]], "getoutputcol() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getOutputCol"]], "getoutputcol() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getOutputCol"]], "getparam() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getParam"]], "getparam() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getParam"]], "getparamvalue() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getParamValue"]], "getparamvalue() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getParamValue"]], "getter_attrs (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getter_attrs"]], "getter_attrs (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getter_attrs"]], "hasdefault() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.hasDefault"]], "hasdefault() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.hasDefault"]], "hasparam() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.hasParam"]], "hasparam() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.hasParam"]], "inputannotatortypes (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputCols"]], "inputcols (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputColsValidation"]], "isdefined() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.isDefined"]], "isdefined() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.isDefined"]], "isset() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.isSet"]], "isset() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.isSet"]], "labelcolumn (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.labelColumn"]], "lazyannotator (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.lazyAnnotator"]], "learningrate (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.learningRate"]], "load() (financefewshotclassifierapproach class method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.load"]], "load() (financefewshotclassifiermodel class method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.load"]], "modelfile (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.modelFile"]], "multiclass (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.multiClass"]], "multiclass (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.multiClass"]], "name (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.name"]], "name (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.name"]], "optionalinputannotatortypes (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.outputAnnotatorType"]], "outputcol (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputCol"]], "outputcol (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.outputCol"]], "outputlogspath (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputLogsPath"]], "pretrained() (financefewshotclassifiermodel static method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.pretrained"]], "read() (financefewshotclassifierapproach class method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.read"]], "read() (financefewshotclassifiermodel class method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.read"]], "save() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.save"]], "save() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.save"]], "set() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.set"]], "set() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.set"]], "setbatchsize() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDropout"]], "setepochsnumber() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setInputCols"]], "setinputcols() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setInputCols"]], "setlabelcol() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLearningRate"]], "setmodelfile() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setModelFile"]], "setmulticlass() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setMultiClass"]], "setmulticlass() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setMultiClass"]], "setoutputcol() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setOutputCol"]], "setoutputcol() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setParamValue"]], "setparamvalue() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setParamValue"]], "setparams() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setParams"]], "setvalidationsplit() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financefewshotclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[135, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "transform() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.transform"]], "validationsplit (financefewshotclassifierapproach attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.validationSplit"]], "write() (financefewshotclassifierapproach method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.write"]], "write() (financefewshotclassifiermodel method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.write"]], "sparknlp_jsl.finance.sequence_classification": [[136, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "batchsize (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.batchSize"]], "casesensitive (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.caseSensitive"]], "clear() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.clear"]], "configprotobytes (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.configProtoBytes"]], "copy() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.copy"]], "dosample (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.doSample"]], "explainparam() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.explainParam"]], "explainparams() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.explainParams"]], "extractparammap() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.extractParamMap"]], "getbatchsize() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getBatchSize"]], "getcasesensitive() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getCaseSensitive"]], "getinputcols() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getInputCols"]], "getlazyannotator() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getLazyAnnotator"]], "getordefault() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getOrDefault"]], "getoutputcol() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getOutputCol"]], "getparam() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getParam"]], "getparamvalue() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getParamValue"]], "getter_attrs (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getter_attrs"]], "hasdefault() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.hasDefault"]], "hasparam() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.hasParam"]], "ignoretokenids (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputAnnotatorTypes"]], "inputcols (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputCols"]], "inputcolsvalidation() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputColsValidation"]], "isdefined() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.isDefined"]], "isset() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.isSet"]], "lazyannotator (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.lazyAnnotator"]], "load() (financeencoderdecoder class method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.load"]], "maxnewtokens (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.maxNewTokens"]], "maxtextlength (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.maxTextLength"]], "mlframeworktype (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.mlFrameworkType"]], "name (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "norepeatngramsize (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.outputAnnotatorType"]], "outputcol (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.outputCol"]], "randomseed (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.randomSeed"]], "read() (financeencoderdecoder class method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.read"]], "refinechunksize (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineChunkSize"]], "refinemaxattempts (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineMaxAttempts"]], "refinesummary (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineSummary"]], "refinesummarytargetlength (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineSummaryTargetLength"]], "save() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.save"]], "set() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.set"]], "setbatchsize() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setBatchSize"]], "setcasesensitive() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setCaseSensitive"]], "setconfigprotobytes() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setConfigProtoBytes"]], "setdosample() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setInputCols"]], "setlazyannotator() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setOutputCol"]], "setparamvalue() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setParamValue"]], "setparams() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setParams"]], "setrandomseed() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setStopAtEos"]], "settopk() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[137, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "stopateos (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.stopAtEos"]], "task (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.task"]], "topk (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.topK"]], "transform() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.transform"]], "usecache (financeencoderdecoder attribute)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.useCache"]], "write() (financeencoderdecoder method)": [[137, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.write"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "batchsize (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.batchSize"]], "casesensitive (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.caseSensitive"]], "clear() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.clear"]], "configprotobytes (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.configProtoBytes"]], "copy() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.copy"]], "customprompt (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.customPrompt"]], "dosample (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.doSample"]], "explainparam() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.explainParam"]], "explainparams() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.explainParams"]], "extractparammap() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.extractParamMap"]], "getbatchsize() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getBatchSize"]], "getcasesensitive() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getCaseSensitive"]], "getinputcols() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getInputCols"]], "getlazyannotator() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getLazyAnnotator"]], "getordefault() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getOrDefault"]], "getoutputcol() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getOutputCol"]], "getparam() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getParam"]], "getparamvalue() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getParamValue"]], "getquestiontypes() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getQuestionTypes"]], "getter_attrs (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getter_attrs"]], "hasdefault() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.hasDefault"]], "hasparam() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.hasParam"]], "ignoretokenids (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputAnnotatorTypes"]], "inputcols (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputCols"]], "inputcolsvalidation() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputColsValidation"]], "isdefined() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.isDefined"]], "isset() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.isSet"]], "lazyannotator (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.lazyAnnotator"]], "load() (financequestionanswering class method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.load"]], "loadmedicaltextgenerator() (financequestionanswering static method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (financequestionanswering static method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "maxcontextlength (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.maxContextLength"]], "maxnewtokens (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.maxNewTokens"]], "mlframeworktype (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.mlFrameworkType"]], "modeltype (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.modelType"]], "name (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "norepeatngramsize (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.outputAnnotatorType"]], "outputcol (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.outputCol"]], "pretrained() (financequestionanswering static method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "questiontype (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.questionType"]], "read() (financequestionanswering class method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.read"]], "save() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.save"]], "set() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.set"]], "setbatchsize() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setBatchSize"]], "setcasesensitive() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setCaseSensitive"]], "setconfigprotobytes() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setCustomPrompt"]], "setdosample() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setInputCols"]], "setlazyannotator() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setOutputCol"]], "setparamvalue() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setParamValue"]], "setparams() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setParams"]], "setquestionanswerterminals() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionType"]], "setrandomseed() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setRandomSeed"]], "settopk() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setTopK"]], "setusecache() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[138, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "topk (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.topK"]], "transform() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.transform"]], "usecache (financequestionanswering attribute)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.useCache"]], "write() (financequestionanswering method)": [[138, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.write"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "batchsize (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.batchSize"]], "casesensitive (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.caseSensitive"]], "clear() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.clear"]], "configprotobytes (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.configProtoBytes"]], "copy() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.copy"]], "dosample (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.doSample"]], "explainparam() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.explainParam"]], "explainparams() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.explainParams"]], "extractparammap() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.extractParamMap"]], "getbatchsize() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getBatchSize"]], "getcasesensitive() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getCaseSensitive"]], "getinputcols() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getInputCols"]], "getlazyannotator() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getLazyAnnotator"]], "getordefault() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getOrDefault"]], "getoutputcol() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getOutputCol"]], "getparam() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getParam"]], "getparamvalue() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getParamValue"]], "getter_attrs (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getter_attrs"]], "hasdefault() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.hasDefault"]], "hasparam() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.hasParam"]], "ignoretokenids (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.ignoreTokenIds"]], "inputannotatortypes (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputAnnotatorTypes"]], "inputcols (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputCols"]], "inputcolsvalidation() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputColsValidation"]], "isdefined() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.isDefined"]], "isset() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.isSet"]], "lazyannotator (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.lazyAnnotator"]], "load() (financesummarizer class method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.load"]], "loadsavedmodel() (financesummarizer static method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "maxnewtokens (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.maxNewTokens"]], "maxtextlength (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.maxTextLength"]], "mlframeworktype (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.mlFrameworkType"]], "name (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "norepeatngramsize (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.outputAnnotatorType"]], "outputcol (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.outputCol"]], "pretrained() (financesummarizer static method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "randomseed (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.randomSeed"]], "read() (financesummarizer class method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.read"]], "refinechunksize (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineChunkSize"]], "refinemaxattempts (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineMaxAttempts"]], "refinesummary (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineSummary"]], "refinesummarytargetlength (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineSummaryTargetLength"]], "save() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.save"]], "set() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.set"]], "setbatchsize() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setBatchSize"]], "setcasesensitive() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setCaseSensitive"]], "setconfigprotobytes() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setConfigProtoBytes"]], "setdosample() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setDoSample"]], "setforceinputtypevalidation() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setIgnoreTokenIds"]], "setinputcols() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setInputCols"]], "setlazyannotator() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setMaxNewTokens"]], "setmaxtextlength() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setOutputCol"]], "setparamvalue() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setParamValue"]], "setparams() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setParams"]], "setrandomseed() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRandomSeed"]], "setrefinechunksize() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setStopAtEos"]], "settopk() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setTopK"]], "skiplpinputcolsvalidation (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[139, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "stopateos (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.stopAtEos"]], "task (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.task"]], "topk (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.topK"]], "transform() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.transform"]], "usecache (financesummarizer attribute)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.useCache"]], "write() (financesummarizer method)": [[139, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.write"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "batchsize (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.batchSize"]], "casesensitive (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.caseSensitive"]], "clear() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.clear"]], "configprotobytes (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.configProtoBytes"]], "copy() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.copy"]], "customprompt (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.customPrompt"]], "dosample (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.doSample"]], "explainparam() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.explainParam"]], "explainparams() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.explainParams"]], "extractparammap() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.extractParamMap"]], "getadditionaltokens() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getAdditionalTokens"]], "getbatchsize() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getBatchSize"]], "getcasesensitive() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getCaseSensitive"]], "getinputcols() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getInputCols"]], "getlazyannotator() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getLazyAnnotator"]], "getordefault() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getOrDefault"]], "getoutputcol() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getOutputCol"]], "getparam() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getParam"]], "getparamvalue() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getParamValue"]], "getter_attrs (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getter_attrs"]], "hasdefault() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.hasDefault"]], "hasparam() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.hasParam"]], "ignoretokenids (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.ignoreTokenIds"]], "inputannotatortypes (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputAnnotatorTypes"]], "inputcols (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputCols"]], "inputcolsvalidation() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputColsValidation"]], "isdefined() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.isDefined"]], "isset() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.isSet"]], "lazyannotator (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.lazyAnnotator"]], "load() (financetextgenerator class method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.load"]], "loadsavedmodel() (financetextgenerator static method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "maxcontextlength (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxContextLength"]], "maxnewtokens (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxNewTokens"]], "maxtextlength (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxTextLength"]], "mlframeworktype (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.mlFrameworkType"]], "modeltype (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.modelType"]], "name (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "norepeatngramsize (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.outputAnnotatorType"]], "outputcol (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.outputCol"]], "pretrained() (financetextgenerator static method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "read() (financetextgenerator class method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.read"]], "save() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.save"]], "set() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.set"]], "setadditionaltokens() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setAdditionalTokens"]], "setbatchsize() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setBatchSize"]], "setcasesensitive() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setCaseSensitive"]], "setconfigprotobytes() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setCustomPrompt"]], "setdosample() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setDoSample"]], "setforceinputtypevalidation() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setIgnoreTokenIds"]], "setinputcols() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setInputCols"]], "setlazyannotator() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setOutputCol"]], "setparamvalue() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setParamValue"]], "setparams() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setParams"]], "setrandomseed() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setRandomSeed"]], "setstopateos() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setStopAtEos"]], "settopk() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setTopK"]], "setusecache() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[140, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "stopateos (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.stopAtEos"]], "topk (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.topK"]], "transform() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.transform"]], "usecache (financetextgenerator attribute)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.useCache"]], "write() (financetextgenerator method)": [[140, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.write"]], "sparknlp_jsl.finance.sequence_generation": [[141, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "clear() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.clear"]], "copy() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.copy"]], "entities1 (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.entities1"]], "entities2 (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.entities2"]], "explainparam() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.explainParam"]], "explainparams() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.explainParams"]], "extractparammap() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.extractParamMap"]], "getinputcols() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getInputCols"]], "getlazyannotator() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getLazyAnnotator"]], "getordefault() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getOrDefault"]], "getoutputcol() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getOutputCol"]], "getparam() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getParam"]], "getparamvalue() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getParamValue"]], "getter_attrs (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getter_attrs"]], "hasdefault() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.hasDefault"]], "hasparam() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.hasParam"]], "inputannotatortypes (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputCols"]], "inputcolsvalidation() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputColsValidation"]], "isdefined() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.isDefined"]], "isset() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.isSet"]], "lazyannotator (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.lazyAnnotator"]], "load() (financenerquestiongenerator class method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.load"]], "name (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.name"]], "optionalinputannotatortypes (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.outputAnnotatorType"]], "outputcol (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.outputCol"]], "questionmark (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.questionMark"]], "questionpronoun (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.questionPronoun"]], "read() (financenerquestiongenerator class method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.read"]], "save() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.save"]], "set() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.set"]], "setentities1() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setEntities1"]], "setentities2() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setInputCols"]], "setlazyannotator() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setOutputCol"]], "setparamvalue() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setParamValue"]], "setparams() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setParams"]], "setquestionmark() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[142, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "strategytype (financenerquestiongenerator attribute)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.strategyType"]], "transform() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.transform"]], "write() (financenerquestiongenerator method)": [[142, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.write"]], "sparknlp_jsl.finance.token_classification": [[143, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "batchsize (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.batchSize"]], "casesensitive (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.caseSensitive"]], "clear() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.clear"]], "configprotobytes (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.configProtoBytes"]], "copy() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.copy"]], "explainparam() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.explainParam"]], "explainparams() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.explainParams"]], "extractparammap() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.extractParamMap"]], "getbatchsize() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getBatchSize"]], "getcasesensitive() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getCaseSensitive"]], "getclasses() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getClasses"]], "getinputcols() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getInputCols"]], "getlazyannotator() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getLazyAnnotator"]], "getordefault() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getOrDefault"]], "getoutputcol() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getOutputCol"]], "getparam() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getParam"]], "getparamvalue() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getParamValue"]], "getter_attrs (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getter_attrs"]], "hasdefault() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.hasDefault"]], "hasparam() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.hasParam"]], "inputannotatortypes (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputAnnotatorTypes"]], "inputcols (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputCols"]], "inputcolsvalidation() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputColsValidation"]], "isdefined() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.isDefined"]], "isset() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.isSet"]], "lazyannotator (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.lazyAnnotator"]], "load() (financebertfortokenclassification class method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.load"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "maxsentencelength (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.maxSentenceLength"]], "name (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "optionalinputannotatortypes (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.outputAnnotatorType"]], "outputcol (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.outputCol"]], "pretrained() (financebertfortokenclassification static method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "read() (financebertfortokenclassification class method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.read"]], "save() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.save"]], "set() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.set"]], "setbatchsize() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setBatchSize"]], "setcasesensitive() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setCaseSensitive"]], "setconfigprotobytes() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setForceInputTypeValidation"]], "setinputcols() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setInputCols"]], "setlazyannotator() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setLazyAnnotator"]], "setmaxsentencelength() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setMaxSentenceLength"]], "setoutputcol() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setOutputCol"]], "setparamvalue() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setParamValue"]], "setparams() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setParams"]], "skiplpinputcolsvalidation (financebertfortokenclassification attribute)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.skipLPInputColsValidation"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[144, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "transform() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.transform"]], "write() (financebertfortokenclassification method)": [[144, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.write"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "batchsize (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.batchSize"]], "batchsize (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.batchSize"]], "classes (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.classes"]], "clear() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.clear"]], "clear() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.clear"]], "configprotobytes (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.configProtoBytes"]], "configprotobytes (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.configProtoBytes"]], "copy() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.copy"]], "copy() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.copy"]], "datasetinfo (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.datasetInfo"]], "datasetinfo (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.datasetInfo"]], "doexceptionhandling (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.doExceptionHandling"]], "dropout (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.dropout"]], "earlystoppingcriterion (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.enableOutputLogs"]], "engine (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.engine"]], "entities (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.entities"]], "evaluationlogextended (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.evaluationLogExtended"]], "explainparam() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.explainParam"]], "explainparam() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.explainParam"]], "explainparams() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.explainParams"]], "explainparams() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.explainParams"]], "extractparammap() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.extractParamMap"]], "extractparammap() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.extractParamMap"]], "fit() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.fit"]], "fitmultiple() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.fitMultiple"]], "getbatchsize() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getBatchSize"]], "getclasses() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getClasses"]], "getengine() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getEngine"]], "getinputcols() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getInputCols"]], "getinputcols() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getInputCols"]], "getlabelcolumn() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getLabelColumn"]], "getlazyannotator() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getLazyAnnotator"]], "getlazyannotator() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getLazyAnnotator"]], "getordefault() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getOrDefault"]], "getordefault() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getOrDefault"]], "getoutputcol() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getOutputCol"]], "getoutputcol() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getOutputCol"]], "getparam() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getParam"]], "getparam() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getParam"]], "getparamvalue() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getParamValue"]], "getparamvalue() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getParamValue"]], "getstorageref() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getStorageRef"]], "gettrainingclassdistribution() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getTrainingClassDistribution"]], "getter_attrs (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getter_attrs"]], "getter_attrs (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getter_attrs"]], "graphfile (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.graphFile"]], "graphfolder (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.graphFolder"]], "hasdefault() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.hasDefault"]], "hasdefault() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.hasDefault"]], "hasparam() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.hasParam"]], "hasparam() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.hasParam"]], "includeallconfidencescores (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.includeAllConfidenceScores"]], "includeconfidence (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.includeConfidence"]], "includeconfidence (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.includeConfidence"]], "inferencebatchsize (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inferenceBatchSize"]], "inputannotatortypes (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputAnnotatorTypes"]], "inputcols (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputCols"]], "inputcols (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputCols"]], "inputcolsvalidation() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputColsValidation"]], "inputcolsvalidation() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputColsValidation"]], "isdefined() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.isDefined"]], "isdefined() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.isDefined"]], "isset() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.isSet"]], "isset() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.isSet"]], "labelcasing (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.labelCasing"]], "labelcolumn (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.labelColumn"]], "lazyannotator (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.lazyAnnotator"]], "lazyannotator (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.lazyAnnotator"]], "load() (financenerapproach class method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.load"]], "load() (financenermodel class method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.load"]], "loadsavedmodel() (financenermodel static method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "logprefix (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.logPrefix"]], "lr (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.lr"]], "maxepochs (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.maxEpochs"]], "minepochs (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.minEpochs"]], "name (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "optionalinputannotatortypes (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputAnnotatorType"]], "outputannotatortype (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.outputAnnotatorType"]], "outputcol (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputCol"]], "outputcol (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.outputCol"]], "outputlogspath (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputLogsPath"]], "overrideexistingtags (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.overrideExistingTags"]], "po (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.po"]], "pretrained() (financenermodel static method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "pretrainedmodelpath (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.pretrainedModelPath"]], "randomseed (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.randomSeed"]], "randomvalidationsplitperepoch (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.randomValidationSplitPerEpoch"]], "read() (financenerapproach class method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.read"]], "read() (financenermodel class method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.read"]], "save() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.save"]], "save() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.save"]], "sentencetokenindex (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.sentenceTokenIndex"]], "sentencetokenindex (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.sentenceTokenIndex"]], "set() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.set"]], "set() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.set"]], "setbatchsize() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setBatchSize"]], "setbatchsize() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setBatchSize"]], "setconfigprotobytes() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setConfigProtoBytes"]], "setdatasetinfo() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDatasetInfo"]], "setdatasetinfo() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setDatasetInfo"]], "setdoexceptionhandling() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDoExceptionHandling"]], "setdropout() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDropout"]], "setearlystoppingcriterion() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEnableOutputLogs"]], "setentities() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEntities"]], "setevaluationlogextended() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setForceInputTypeValidation"]], "setgraphfile() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setGraphFile"]], "setgraphfolder() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setIncludeConfidence"]], "setincludeconfidence() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setIncludeConfidence"]], "setinferencebatchsize() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setInferenceBatchSize"]], "setinputcols() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setInputCols"]], "setinputcols() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setInputCols"]], "setlabelcasing() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setLabelCasing"]], "setlabelcolumn() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLabelColumn"]], "setlazyannotator() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLazyAnnotator"]], "setlazyannotator() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setLazyAnnotator"]], "setlogprefix() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLogPrefix"]], "setlr() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLr"]], "setmaxepochs() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setMaxEpochs"]], "setminepochs() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setMinEpochs"]], "setoutputcol() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOutputCol"]], "setoutputcol() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setOutputCol"]], "setoutputlogspath() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOverrideExistingTags"]], "setparamvalue() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setParamValue"]], "setparamvalue() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setParamValue"]], "setparams() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setParams"]], "setpo() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setPo"]], "setpretrainedmodelpath() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setPretrainedModelPath"]], "setrandomseed() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setSentenceTokenIndex"]], "setstorageref() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setStorageRef"]], "settagsmapping() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setTagsMapping"]], "settestdataset() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setTestDataset"]], "setusebestmodel() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setUseBestModel"]], "setusecontrib() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setUseContrib"]], "setvalidationsplit() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setValidationSplit"]], "setverbose() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setVerbose"]], "skiplpinputcolsvalidation (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[145, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "storageref (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.storageRef"]], "testdataset (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.testDataset"]], "trainingclassdistribution (financenermodel attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.trainingClassDistribution"]], "transform() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.transform"]], "uc (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.uc"]], "usebestmodel (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.useBestModel"]], "usecontrib (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.useContrib"]], "validationsplit (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.validationSplit"]], "verbose (financenerapproach attribute)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.verbose"]], "write() (financenerapproach method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.write"]], "write() (financenermodel method)": [[145, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.write"]], "sparknlp_jsl.finance.token_classification.ner": [[146, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[147, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[147, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profile"]], "profileesrdv21y19() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileESRDV21Y19"]], "profilerxhccv05y20() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileRxHCCV05Y20"]], "profilerxhccv05y21() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileRxHCCV05Y21"]], "profilerxhccv05y22() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileRxHCCV05Y22"]], "profilerxhccv05y23() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileRxHCCV05Y23"]], "profilerxhccv08y22() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileRxHCCV08Y22"]], "profilerxhccv08y23() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileRxHCCV08Y23"]], "profilev22() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV24"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV24Y22"]], "profilev28() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV28"]], "profilev28y24() (in module sparknlp_jsl.functions)": [[148, "sparknlp_jsl.functions.profileV28Y24"]], "sparknlp_jsl.functions": [[148, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[149, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[149, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[149, "sparknlp_jsl.library_settings"]], "load_license_validator() (in module sparknlp_jsl)": [[149, "sparknlp_jsl.load_license_validator"]], "pub_version() (in module sparknlp_jsl)": [[149, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[149, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[149, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[149, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[149, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[149, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[149, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[150, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[150, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[150, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[150, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[150, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[151, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[151, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[152, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[153, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[153, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "clear() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.clear"]], "copy() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.copy"]], "dateshiftcolumn (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.dateShiftColumn"]], "explainparam() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.explainParam"]], "explainparams() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.explainParams"]], "extractparammap() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.extractParamMap"]], "getinputcols() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getInputCols"]], "getlazyannotator() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getLazyAnnotator"]], "getordefault() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getOrDefault"]], "getoutputcol() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getOutputCol"]], "getparam() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getParam"]], "getparamvalue() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getParamValue"]], "getter_attrs (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getter_attrs"]], "hasdefault() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.hasDefault"]], "hasparam() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.hasParam"]], "inputannotatortypes (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputAnnotatorTypes"]], "inputcols (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputCols"]], "inputcolsvalidation() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputColsValidation"]], "isdefined() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.isDefined"]], "isset() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.isSet"]], "lazyannotator (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.lazyAnnotator"]], "load() (legaldocumenthashcoder class method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.load"]], "name (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.name"]], "newdateshift (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.outputAnnotatorType"]], "outputcol (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.outputCol"]], "patientidcolumn (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.patientIdColumn"]], "rangedays (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.rangeDays"]], "read() (legaldocumenthashcoder class method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.read"]], "save() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.save"]], "seed (legaldocumenthashcoder attribute)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.seed"]], "set() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.set"]], "setdateshiftcolumn() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setDateShiftColumn"]], "setidcolumn() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "setinputcols() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setInputCols"]], "setlazyannotator() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setNewDateShift"]], "setoutputcol() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setOutputCol"]], "setparamvalue() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setParamValue"]], "setparams() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setParams"]], "setpatientidcolumn() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setPatientIdColumn"]], "setrangedays() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setRangeDays"]], "setseed() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setSeed"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[154, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "transform() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.transform"]], "write() (legaldocumenthashcoder method)": [[154, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.write"]], "sparknlp_jsl.legal.chunk_classification.deid": [[155, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[156, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[157, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[157, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[158, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[158, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[159, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[160, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[160, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[161, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[162, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[163, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[163, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[164, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[164, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[165, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[166, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "batchsize (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.batchSize"]], "casesensitive (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.caseSensitive"]], "clear() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.clear"]], "coalescesentences (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.configProtoBytes"]], "copy() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.copy"]], "explainparam() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.explainParam"]], "explainparams() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.explainParams"]], "extractparammap() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.extractParamMap"]], "getbatchsize() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getBatchSize"]], "getcasesensitive() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getCaseSensitive"]], "getclasses() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getClasses"]], "getinputcols() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getInputCols"]], "getlazyannotator() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getOrDefault"]], "getoutputcol() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getOutputCol"]], "getparam() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getParam"]], "getparamvalue() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getParamValue"]], "getter_attrs (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getter_attrs"]], "hasdefault() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.hasDefault"]], "hasparam() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.hasParam"]], "inputannotatortypes (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputColsValidation"]], "isdefined() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.isDefined"]], "isset() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.isSet"]], "lazyannotator (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.lazyAnnotator"]], "load() (legalbertforsequenceclassification class method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.load"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.maxSentenceLength"]], "name (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "optionalinputannotatortypes (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.outputAnnotatorType"]], "outputcol (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.outputCol"]], "pretrained() (legalbertforsequenceclassification static method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "read() (legalbertforsequenceclassification class method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.read"]], "save() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.save"]], "set() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.set"]], "setbatchsize() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setBatchSize"]], "setcasesensitive() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setInputCols"]], "setlazyannotator() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setOutputCol"]], "setparamvalue() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setParamValue"]], "setparams() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (legalbertforsequenceclassification attribute)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[167, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "transform() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.transform"]], "write() (legalbertforsequenceclassification method)": [[167, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.write"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "batchsize (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.batchSize"]], "classes (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.classes"]], "clear() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.clear"]], "clear() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.clear"]], "configprotobytes (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.configProtoBytes"]], "configprotobytes (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.configProtoBytes"]], "copy() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.copy"]], "copy() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.copy"]], "dropout (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.dropout"]], "enableoutputlogs (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.enableOutputLogs"]], "engine (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.engine"]], "evaluationlogextended (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.evaluationLogExtended"]], "explainparam() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.explainParam"]], "explainparam() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.explainParam"]], "explainparams() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.explainParams"]], "explainparams() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.explainParams"]], "extractparammap() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.extractParamMap"]], "extractparammap() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.extractParamMap"]], "fit() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.fit"]], "fitmultiple() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.fitMultiple"]], "getengine() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getEngine"]], "getinputcols() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getInputCols"]], "getinputcols() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getInputCols"]], "getlazyannotator() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getLazyAnnotator"]], "getlazyannotator() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getLazyAnnotator"]], "getordefault() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getOrDefault"]], "getordefault() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getOrDefault"]], "getoutputcol() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getOutputCol"]], "getoutputcol() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getOutputCol"]], "getparam() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getParam"]], "getparam() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getParam"]], "getparamvalue() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getParamValue"]], "getparamvalue() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getParamValue"]], "getstorageref() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getStorageRef"]], "getter_attrs (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getter_attrs"]], "getter_attrs (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getter_attrs"]], "hasdefault() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.hasDefault"]], "hasdefault() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.hasDefault"]], "hasparam() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.hasParam"]], "hasparam() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.hasParam"]], "inputannotatortypes (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputAnnotatorTypes"]], "inputcols (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputCols"]], "inputcols (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputCols"]], "inputcolsvalidation() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputColsValidation"]], "inputcolsvalidation() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputColsValidation"]], "isdefined() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.isDefined"]], "isdefined() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.isDefined"]], "isset() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.isSet"]], "isset() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.isSet"]], "labelcolumn (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.labelColumn"]], "lazyannotator (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.lazyAnnotator"]], "lazyannotator (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.lazyAnnotator"]], "load() (legalclassifierdlapproach class method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.load"]], "load() (legalclassifierdlmodel class method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.load"]], "lr (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.lr"]], "maxepochs (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.maxEpochs"]], "name (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "optionalinputannotatortypes (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.outputAnnotatorType"]], "outputcol (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputCol"]], "outputcol (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.outputCol"]], "outputlogspath (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputLogsPath"]], "pretrained() (legalclassifierdlmodel static method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "randomseed (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.randomSeed"]], "read() (legalclassifierdlapproach class method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.read"]], "read() (legalclassifierdlmodel class method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.read"]], "save() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.save"]], "save() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.save"]], "set() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.set"]], "set() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.set"]], "setbatchsize() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setBatchSize"]], "setconfigprotobytes() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setConfigProtoBytes"]], "setdropout() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setDropout"]], "setenableoutputlogs() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setEnableOutputLogs"]], "setevaluationlogextended() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setEvaluationLogExtended"]], "setinputcols() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setInputCols"]], "setinputcols() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setInputCols"]], "setlabelcolumn() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLabelColumn"]], "setlazyannotator() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLazyAnnotator"]], "setlazyannotator() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setLazyAnnotator"]], "setlr() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLr"]], "setmaxepochs() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setMaxEpochs"]], "setoutputcol() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setOutputCol"]], "setoutputcol() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setOutputCol"]], "setoutputlogspath() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setOutputLogsPath"]], "setparamvalue() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setParamValue"]], "setparamvalue() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setParamValue"]], "setparams() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setParams"]], "setrandomseed() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setRandomSeed"]], "setstorageref() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setStorageRef"]], "settestdataset() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setTestDataset"]], "setvalidationsplit() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setValidationSplit"]], "setverbose() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setVerbose"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[168, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "storageref (legalclassifierdlmodel attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.storageRef"]], "testdataset (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.testDataset"]], "transform() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.transform"]], "validationsplit (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.validationSplit"]], "verbose (legalclassifierdlapproach attribute)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.verbose"]], "write() (legalclassifierdlapproach method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.write"]], "write() (legalclassifierdlmodel method)": [[168, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.write"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "classificationmodel (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.classificationModelPath"]], "clear() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.clear"]], "clear() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.clear"]], "copy() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.copy"]], "copy() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.copy"]], "explainparam() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.explainParam"]], "explainparam() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.explainParam"]], "explainparams() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.explainParams"]], "explainparams() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.explainParams"]], "extractparammap() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.extractParamMap"]], "fit() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fit"]], "fitintercept (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getInputCols"]], "getinputcols() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getOrDefault"]], "getordefault() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getOutputCol"]], "getparam() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getParam"]], "getparam() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getParam"]], "getparamvalue() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getParamValue"]], "getter_attrs (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getter_attrs"]], "hasdefault() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.hasDefault"]], "hasdefault() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.hasDefault"]], "hasparam() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.hasParam"]], "hasparam() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.hasParam"]], "inputannotatortypes (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputCols"]], "inputcols (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputColsValidation"]], "isdefined() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.isDefined"]], "isdefined() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.isDefined"]], "isset() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.isSet"]], "isset() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.isSet"]], "labelcol (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.labelCol"]], "labels (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.labels"]], "labels (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.labels"]], "lazyannotator (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.lazyAnnotator"]], "load() (legaldocumentmlclassifierapproach class method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.load"]], "load() (legaldocumentmlclassifiermodel class method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.load"]], "maxiter (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.maxIter"]], "maxtokenngram (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.maxTokenNgram"]], "mergechunks (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.mergeChunks"]], "mergechunks (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.mergeChunks"]], "mintokenngram (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.minTokenNgram"]], "name (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "optionalinputannotatortypes (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.outputCol"]], "outputcol (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.outputCol"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "read() (legaldocumentmlclassifierapproach class method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.read"]], "read() (legaldocumentmlclassifiermodel class method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.read"]], "save() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.save"]], "save() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.save"]], "set() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.set"]], "set() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.set"]], "setclassificationmodel() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setInputCols"]], "setinputcols() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setInputCols"]], "setlabelcol() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLabelCol"]], "setlabels() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLabels"]], "setlabels() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setLabels"]], "setlazyannotator() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setMergeChunks"]], "setmintokenngram() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setParamValue"]], "setparams() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setParams"]], "settol() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[169, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "tol (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.tol"]], "transform() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.transform"]], "vectorizationmodel (legaldocumentmlclassifiermodel attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (legaldocumentmlclassifierapproach attribute)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.vectorizationModelPath"]], "write() (legaldocumentmlclassifierapproach method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.write"]], "write() (legaldocumentmlclassifiermodel method)": [[169, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.write"]], "legalfewshotclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach"]], "legalfewshotclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel"]], "batchsize (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.batchSize"]], "classes (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.classes"]], "clear() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.clear"]], "clear() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.clear"]], "copy() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.copy"]], "copy() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.copy"]], "datasetinfo (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.datasetInfo"]], "datasetinfo (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.datasetInfo"]], "doexceptionhandling (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.doExceptionHandling"]], "dropout (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.dropout"]], "engine (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.engine"]], "epochsn (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.epochsN"]], "explainparam() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.explainParam"]], "explainparam() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.explainParam"]], "explainparams() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.explainParams"]], "explainparams() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.explainParams"]], "extractparammap() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.extractParamMap"]], "extractparammap() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.extractParamMap"]], "featurescaling (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.featureScaling"]], "featurescaling (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.featureScaling"]], "fit() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fit"]], "fitmultiple() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fitMultiple"]], "fiximbalance (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fixImbalance"]], "getengine() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getEngine"]], "getinputcols() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getInputCols"]], "getinputcols() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getInputCols"]], "getlazyannotator() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getOrDefault"]], "getordefault() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getOrDefault"]], "getoutputcol() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getOutputCol"]], "getoutputcol() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getOutputCol"]], "getparam() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getParam"]], "getparam() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getParam"]], "getparamvalue() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getParamValue"]], "getparamvalue() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getParamValue"]], "getter_attrs (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getter_attrs"]], "getter_attrs (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getter_attrs"]], "hasdefault() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.hasDefault"]], "hasdefault() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.hasDefault"]], "hasparam() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.hasParam"]], "hasparam() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.hasParam"]], "inputannotatortypes (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputCols"]], "inputcols (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputColsValidation"]], "isdefined() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.isDefined"]], "isdefined() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.isDefined"]], "isset() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.isSet"]], "isset() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.isSet"]], "labelcolumn (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.labelColumn"]], "lazyannotator (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.lazyAnnotator"]], "learningrate (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.learningRate"]], "load() (legalfewshotclassifierapproach class method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.load"]], "load() (legalfewshotclassifiermodel class method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.load"]], "modelfile (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.modelFile"]], "multiclass (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.multiClass"]], "multiclass (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.multiClass"]], "name (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.name"]], "name (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.name"]], "optionalinputannotatortypes (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.outputAnnotatorType"]], "outputcol (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputCol"]], "outputcol (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.outputCol"]], "outputlogspath (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputLogsPath"]], "pretrained() (legalfewshotclassifiermodel static method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.pretrained"]], "read() (legalfewshotclassifierapproach class method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.read"]], "read() (legalfewshotclassifiermodel class method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.read"]], "save() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.save"]], "save() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.save"]], "set() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.set"]], "set() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.set"]], "setbatchsize() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDropout"]], "setepochsnumber() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setInputCols"]], "setinputcols() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setInputCols"]], "setlabelcol() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLearningRate"]], "setmodelfile() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setModelFile"]], "setmulticlass() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setMultiClass"]], "setmulticlass() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setMultiClass"]], "setoutputcol() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setOutputCol"]], "setoutputcol() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setParamValue"]], "setparamvalue() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setParamValue"]], "setparams() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setParams"]], "setvalidationsplit() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legalfewshotclassifiermodel attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[170, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "transform() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.transform"]], "validationsplit (legalfewshotclassifierapproach attribute)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.validationSplit"]], "write() (legalfewshotclassifierapproach method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.write"]], "write() (legalfewshotclassifiermodel method)": [[170, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.write"]], "sparknlp_jsl.legal.sequence_generation": [[171, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "batchsize (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.batchSize"]], "casesensitive (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.caseSensitive"]], "clear() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.clear"]], "configprotobytes (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.configProtoBytes"]], "copy() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.copy"]], "dosample (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.doSample"]], "explainparam() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.explainParam"]], "explainparams() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.explainParams"]], "extractparammap() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.extractParamMap"]], "getbatchsize() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getBatchSize"]], "getcasesensitive() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getCaseSensitive"]], "getinputcols() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getInputCols"]], "getlazyannotator() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getLazyAnnotator"]], "getordefault() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getOrDefault"]], "getoutputcol() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getOutputCol"]], "getparam() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getParam"]], "getparamvalue() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getParamValue"]], "getter_attrs (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getter_attrs"]], "hasdefault() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.hasDefault"]], "hasparam() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.hasParam"]], "ignoretokenids (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputAnnotatorTypes"]], "inputcols (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputCols"]], "inputcolsvalidation() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputColsValidation"]], "isdefined() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.isDefined"]], "isset() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.isSet"]], "lazyannotator (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.lazyAnnotator"]], "load() (legalencoderdecoder class method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.load"]], "maxnewtokens (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.maxNewTokens"]], "maxtextlength (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.maxTextLength"]], "mlframeworktype (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.mlFrameworkType"]], "name (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "norepeatngramsize (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.outputAnnotatorType"]], "outputcol (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.outputCol"]], "randomseed (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.randomSeed"]], "read() (legalencoderdecoder class method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.read"]], "refinechunksize (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineMaxAttempts"]], "refinesummary (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineSummaryTargetLength"]], "save() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.save"]], "set() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.set"]], "setbatchsize() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setBatchSize"]], "setcasesensitive() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setCaseSensitive"]], "setconfigprotobytes() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setInputCols"]], "setlazyannotator() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setOutputCol"]], "setparamvalue() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setParamValue"]], "setparams() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setParams"]], "setrandomseed() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setStopAtEos"]], "settopk() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[172, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "stopateos (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.stopAtEos"]], "task (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.task"]], "topk (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.topK"]], "transform() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.transform"]], "usecache (legalencoderdecoder attribute)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.useCache"]], "write() (legalencoderdecoder method)": [[172, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.write"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "batchsize (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.batchSize"]], "casesensitive (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.caseSensitive"]], "clear() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.clear"]], "configprotobytes (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.configProtoBytes"]], "copy() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.copy"]], "customprompt (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.customPrompt"]], "dosample (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.doSample"]], "explainparam() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.explainParam"]], "explainparams() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.explainParams"]], "extractparammap() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.extractParamMap"]], "getbatchsize() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getBatchSize"]], "getcasesensitive() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getCaseSensitive"]], "getinputcols() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getInputCols"]], "getlazyannotator() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getLazyAnnotator"]], "getordefault() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getOrDefault"]], "getoutputcol() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getOutputCol"]], "getparam() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getParam"]], "getparamvalue() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getParamValue"]], "getquestiontypes() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getQuestionTypes"]], "getter_attrs (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getter_attrs"]], "hasdefault() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.hasDefault"]], "hasparam() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.hasParam"]], "ignoretokenids (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputAnnotatorTypes"]], "inputcols (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputCols"]], "inputcolsvalidation() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputColsValidation"]], "isdefined() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.isDefined"]], "isset() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.isSet"]], "lazyannotator (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.lazyAnnotator"]], "load() (legalquestionanswering class method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.load"]], "loadmedicaltextgenerator() (legalquestionanswering static method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (legalquestionanswering static method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "maxcontextlength (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.maxContextLength"]], "maxnewtokens (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.maxNewTokens"]], "mlframeworktype (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.mlFrameworkType"]], "modeltype (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.modelType"]], "name (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "norepeatngramsize (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.outputAnnotatorType"]], "outputcol (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.outputCol"]], "pretrained() (legalquestionanswering static method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "questiontype (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.questionType"]], "read() (legalquestionanswering class method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.read"]], "save() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.save"]], "set() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.set"]], "setbatchsize() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setBatchSize"]], "setcasesensitive() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setCaseSensitive"]], "setconfigprotobytes() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setCustomPrompt"]], "setdosample() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setInputCols"]], "setlazyannotator() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setOutputCol"]], "setparamvalue() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setParamValue"]], "setparams() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setParams"]], "setquestionanswerterminals() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionType"]], "setrandomseed() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setRandomSeed"]], "settopk() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setTopK"]], "setusecache() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[173, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "topk (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.topK"]], "transform() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.transform"]], "usecache (legalquestionanswering attribute)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.useCache"]], "write() (legalquestionanswering method)": [[173, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.write"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "batchsize (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.batchSize"]], "casesensitive (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.caseSensitive"]], "clear() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.clear"]], "configprotobytes (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.configProtoBytes"]], "copy() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.copy"]], "dosample (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.doSample"]], "explainparam() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.explainParam"]], "explainparams() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.explainParams"]], "extractparammap() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.extractParamMap"]], "getbatchsize() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getBatchSize"]], "getcasesensitive() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getCaseSensitive"]], "getinputcols() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getInputCols"]], "getlazyannotator() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getLazyAnnotator"]], "getordefault() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getOrDefault"]], "getoutputcol() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getOutputCol"]], "getparam() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getParam"]], "getparamvalue() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getParamValue"]], "getter_attrs (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getter_attrs"]], "hasdefault() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.hasDefault"]], "hasparam() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.hasParam"]], "ignoretokenids (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.ignoreTokenIds"]], "inputannotatortypes (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputAnnotatorTypes"]], "inputcols (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputCols"]], "inputcolsvalidation() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputColsValidation"]], "isdefined() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.isDefined"]], "isset() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.isSet"]], "lazyannotator (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.lazyAnnotator"]], "load() (legalsummarizer class method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.load"]], "loadsavedmodel() (legalsummarizer static method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "maxnewtokens (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.maxNewTokens"]], "maxtextlength (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.maxTextLength"]], "mlframeworktype (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.mlFrameworkType"]], "name (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "norepeatngramsize (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.outputAnnotatorType"]], "outputcol (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.outputCol"]], "pretrained() (legalsummarizer static method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "randomseed (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.randomSeed"]], "read() (legalsummarizer class method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.read"]], "refinechunksize (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineChunkSize"]], "refinemaxattempts (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineMaxAttempts"]], "refinesummary (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineSummary"]], "refinesummarytargetlength (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineSummaryTargetLength"]], "save() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.save"]], "set() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.set"]], "setbatchsize() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setBatchSize"]], "setcasesensitive() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setCaseSensitive"]], "setconfigprotobytes() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setConfigProtoBytes"]], "setdosample() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setDoSample"]], "setforceinputtypevalidation() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setIgnoreTokenIds"]], "setinputcols() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setInputCols"]], "setlazyannotator() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setMaxNewTokens"]], "setmaxtextlength() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setOutputCol"]], "setparamvalue() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setParamValue"]], "setparams() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setParams"]], "setrandomseed() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRandomSeed"]], "setrefinechunksize() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setStopAtEos"]], "settopk() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setTopK"]], "skiplpinputcolsvalidation (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[174, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "stopateos (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.stopAtEos"]], "task (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.task"]], "topk (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.topK"]], "transform() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.transform"]], "usecache (legalsummarizer attribute)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.useCache"]], "write() (legalsummarizer method)": [[174, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.write"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "batchsize (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.batchSize"]], "casesensitive (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.caseSensitive"]], "clear() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.clear"]], "configprotobytes (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.configProtoBytes"]], "copy() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.copy"]], "customprompt (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.customPrompt"]], "dosample (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.doSample"]], "explainparam() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.explainParam"]], "explainparams() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.explainParams"]], "extractparammap() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.extractParamMap"]], "getadditionaltokens() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getAdditionalTokens"]], "getbatchsize() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getBatchSize"]], "getcasesensitive() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getCaseSensitive"]], "getinputcols() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getInputCols"]], "getlazyannotator() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getLazyAnnotator"]], "getordefault() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getOrDefault"]], "getoutputcol() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getOutputCol"]], "getparam() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getParam"]], "getparamvalue() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getParamValue"]], "getter_attrs (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getter_attrs"]], "hasdefault() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.hasDefault"]], "hasparam() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.hasParam"]], "ignoretokenids (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.ignoreTokenIds"]], "inputannotatortypes (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputAnnotatorTypes"]], "inputcols (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputCols"]], "inputcolsvalidation() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputColsValidation"]], "isdefined() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.isDefined"]], "isset() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.isSet"]], "lazyannotator (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.lazyAnnotator"]], "load() (legaltextgenerator class method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.load"]], "loadsavedmodel() (legaltextgenerator static method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "maxcontextlength (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxContextLength"]], "maxnewtokens (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxNewTokens"]], "maxtextlength (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxTextLength"]], "mlframeworktype (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.mlFrameworkType"]], "modeltype (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.modelType"]], "name (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "norepeatngramsize (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.outputAnnotatorType"]], "outputcol (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.outputCol"]], "pretrained() (legaltextgenerator static method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "read() (legaltextgenerator class method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.read"]], "save() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.save"]], "set() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.set"]], "setadditionaltokens() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setAdditionalTokens"]], "setbatchsize() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setBatchSize"]], "setcasesensitive() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setCaseSensitive"]], "setconfigprotobytes() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setCustomPrompt"]], "setdosample() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setDoSample"]], "setforceinputtypevalidation() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setIgnoreTokenIds"]], "setinputcols() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setInputCols"]], "setlazyannotator() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setOutputCol"]], "setparamvalue() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setParamValue"]], "setparams() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setParams"]], "setrandomseed() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setRandomSeed"]], "setstopateos() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setStopAtEos"]], "settopk() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setTopK"]], "setusecache() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[175, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "stopateos (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.stopAtEos"]], "topk (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.topK"]], "transform() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.transform"]], "usecache (legaltextgenerator attribute)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.useCache"]], "write() (legaltextgenerator method)": [[175, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.write"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "clear() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.clear"]], "copy() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.copy"]], "entities1 (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.entities1"]], "entities2 (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.entities2"]], "explainparam() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.explainParam"]], "explainparams() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.explainParams"]], "extractparammap() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.extractParamMap"]], "getinputcols() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getInputCols"]], "getlazyannotator() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getLazyAnnotator"]], "getordefault() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getOrDefault"]], "getoutputcol() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getOutputCol"]], "getparam() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getParam"]], "getparamvalue() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getParamValue"]], "getter_attrs (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getter_attrs"]], "hasdefault() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.hasDefault"]], "hasparam() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.hasParam"]], "inputannotatortypes (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputCols"]], "inputcolsvalidation() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputColsValidation"]], "isdefined() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.isDefined"]], "isset() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.isSet"]], "lazyannotator (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.lazyAnnotator"]], "load() (legalnerquestiongenerator class method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.load"]], "name (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.name"]], "optionalinputannotatortypes (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.outputAnnotatorType"]], "outputcol (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.outputCol"]], "questionmark (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.questionMark"]], "questionpronoun (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.questionPronoun"]], "read() (legalnerquestiongenerator class method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.read"]], "save() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.save"]], "set() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.set"]], "setentities1() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setEntities1"]], "setentities2() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setInputCols"]], "setlazyannotator() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setOutputCol"]], "setparamvalue() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setParamValue"]], "setparams() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setParams"]], "setquestionmark() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[176, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "strategytype (legalnerquestiongenerator attribute)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.strategyType"]], "transform() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.transform"]], "write() (legalnerquestiongenerator method)": [[176, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.write"]], "sparknlp_jsl.legal.token_classification": [[177, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[178, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "batchsize (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.batchSize"]], "casesensitive (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.caseSensitive"]], "clear() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.clear"]], "configprotobytes (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.configProtoBytes"]], "copy() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.copy"]], "explainparam() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.explainParam"]], "explainparams() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.explainParams"]], "extractparammap() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.extractParamMap"]], "getbatchsize() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getBatchSize"]], "getcasesensitive() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getCaseSensitive"]], "getclasses() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getClasses"]], "getinputcols() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getInputCols"]], "getlazyannotator() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getLazyAnnotator"]], "getordefault() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getOrDefault"]], "getoutputcol() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getOutputCol"]], "getparam() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getParam"]], "getparamvalue() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getParamValue"]], "getter_attrs (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getter_attrs"]], "hasdefault() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.hasDefault"]], "hasparam() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.hasParam"]], "inputannotatortypes (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputAnnotatorTypes"]], "inputcols (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputCols"]], "inputcolsvalidation() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputColsValidation"]], "isdefined() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.isDefined"]], "isset() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.isSet"]], "lazyannotator (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.lazyAnnotator"]], "load() (legalbertfortokenclassification class method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.load"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "maxsentencelength (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.maxSentenceLength"]], "name (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "optionalinputannotatortypes (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.outputAnnotatorType"]], "outputcol (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.outputCol"]], "pretrained() (legalbertfortokenclassification static method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "read() (legalbertfortokenclassification class method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.read"]], "save() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.save"]], "set() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.set"]], "setbatchsize() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setBatchSize"]], "setcasesensitive() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setCaseSensitive"]], "setconfigprotobytes() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setForceInputTypeValidation"]], "setinputcols() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setInputCols"]], "setlazyannotator() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setLazyAnnotator"]], "setmaxsentencelength() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setMaxSentenceLength"]], "setoutputcol() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setOutputCol"]], "setparamvalue() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setParamValue"]], "setparams() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setParams"]], "skiplpinputcolsvalidation (legalbertfortokenclassification attribute)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.skipLPInputColsValidation"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[179, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "transform() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.transform"]], "write() (legalbertfortokenclassification method)": [[179, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.write"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "batchsize (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.batchSize"]], "batchsize (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.batchSize"]], "classes (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.classes"]], "clear() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.clear"]], "clear() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.clear"]], "configprotobytes (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.configProtoBytes"]], "configprotobytes (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.configProtoBytes"]], "copy() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.copy"]], "copy() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.copy"]], "datasetinfo (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.datasetInfo"]], "datasetinfo (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.datasetInfo"]], "doexceptionhandling (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.doExceptionHandling"]], "dropout (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.dropout"]], "earlystoppingcriterion (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.enableOutputLogs"]], "engine (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.engine"]], "entities (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.entities"]], "evaluationlogextended (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.evaluationLogExtended"]], "explainparam() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.explainParam"]], "explainparam() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.explainParam"]], "explainparams() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.explainParams"]], "explainparams() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.explainParams"]], "extractparammap() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.extractParamMap"]], "extractparammap() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.extractParamMap"]], "fit() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.fit"]], "fitmultiple() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.fitMultiple"]], "getbatchsize() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getBatchSize"]], "getclasses() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getClasses"]], "getengine() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getEngine"]], "getinputcols() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getInputCols"]], "getinputcols() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getInputCols"]], "getlabelcolumn() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getLabelColumn"]], "getlazyannotator() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getLazyAnnotator"]], "getlazyannotator() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getLazyAnnotator"]], "getordefault() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getOrDefault"]], "getordefault() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getOrDefault"]], "getoutputcol() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getOutputCol"]], "getoutputcol() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getOutputCol"]], "getparam() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getParam"]], "getparam() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getParam"]], "getparamvalue() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getParamValue"]], "getparamvalue() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getParamValue"]], "getstorageref() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getStorageRef"]], "gettrainingclassdistribution() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getTrainingClassDistribution"]], "getter_attrs (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getter_attrs"]], "getter_attrs (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getter_attrs"]], "graphfile (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.graphFile"]], "graphfolder (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.graphFolder"]], "hasdefault() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.hasDefault"]], "hasdefault() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.hasDefault"]], "hasparam() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.hasParam"]], "hasparam() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.hasParam"]], "includeallconfidencescores (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.includeAllConfidenceScores"]], "includeconfidence (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.includeConfidence"]], "includeconfidence (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.includeConfidence"]], "inferencebatchsize (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inferenceBatchSize"]], "inputannotatortypes (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputAnnotatorTypes"]], "inputcols (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputCols"]], "inputcols (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputCols"]], "inputcolsvalidation() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputColsValidation"]], "inputcolsvalidation() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputColsValidation"]], "isdefined() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.isDefined"]], "isdefined() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.isDefined"]], "isset() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.isSet"]], "isset() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.isSet"]], "labelcasing (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.labelCasing"]], "labelcolumn (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.labelColumn"]], "lazyannotator (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.lazyAnnotator"]], "lazyannotator (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.lazyAnnotator"]], "load() (legalnerapproach class method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.load"]], "load() (legalnermodel class method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.load"]], "loadsavedmodel() (legalnermodel static method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "logprefix (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.logPrefix"]], "lr (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.lr"]], "maxepochs (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.maxEpochs"]], "minepochs (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.minEpochs"]], "name (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "optionalinputannotatortypes (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputAnnotatorType"]], "outputannotatortype (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.outputAnnotatorType"]], "outputcol (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputCol"]], "outputcol (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.outputCol"]], "outputlogspath (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputLogsPath"]], "overrideexistingtags (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.overrideExistingTags"]], "po (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.po"]], "pretrained() (legalnermodel static method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "pretrainedmodelpath (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.pretrainedModelPath"]], "randomseed (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.randomSeed"]], "randomvalidationsplitperepoch (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.randomValidationSplitPerEpoch"]], "read() (legalnerapproach class method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.read"]], "read() (legalnermodel class method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.read"]], "save() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.save"]], "save() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.save"]], "sentencetokenindex (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.sentenceTokenIndex"]], "set() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.set"]], "set() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.set"]], "setbatchsize() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setBatchSize"]], "setbatchsize() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setBatchSize"]], "setconfigprotobytes() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setConfigProtoBytes"]], "setdatasetinfo() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDatasetInfo"]], "setdatasetinfo() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setDatasetInfo"]], "setdoexceptionhandling() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDoExceptionHandling"]], "setdropout() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDropout"]], "setearlystoppingcriterion() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEnableOutputLogs"]], "setentities() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEntities"]], "setevaluationlogextended() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setForceInputTypeValidation"]], "setgraphfile() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setGraphFile"]], "setgraphfolder() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setInferenceBatchSize"]], "setinputcols() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setInputCols"]], "setinputcols() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setInputCols"]], "setlabelcasing() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setLabelCasing"]], "setlabelcolumn() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLabelColumn"]], "setlazyannotator() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLazyAnnotator"]], "setlazyannotator() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setLazyAnnotator"]], "setlogprefix() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLogPrefix"]], "setlr() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLr"]], "setmaxepochs() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setMaxEpochs"]], "setminepochs() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setMinEpochs"]], "setoutputcol() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOutputCol"]], "setoutputcol() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setOutputCol"]], "setoutputlogspath() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOverrideExistingTags"]], "setparamvalue() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setParamValue"]], "setparamvalue() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setParamValue"]], "setparams() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setParams"]], "setpo() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setPo"]], "setpretrainedmodelpath() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setPretrainedModelPath"]], "setrandomseed() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setSentenceTokenIndex"]], "setstorageref() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setStorageRef"]], "settagsmapping() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setTagsMapping"]], "settestdataset() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setTestDataset"]], "setusebestmodel() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setUseBestModel"]], "setusecontrib() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setUseContrib"]], "setvalidationsplit() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setValidationSplit"]], "setverbose() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setVerbose"]], "skiplpinputcolsvalidation (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[180, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "storageref (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.storageRef"]], "testdataset (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.testDataset"]], "trainingclassdistribution (legalnermodel attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.trainingClassDistribution"]], "transform() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.transform"]], "uc (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.uc"]], "usebestmodel (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.useBestModel"]], "usecontrib (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.useContrib"]], "validationsplit (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.validationSplit"]], "verbose (legalnerapproach attribute)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.verbose"]], "write() (legalnerapproach method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.write"]], "write() (legalnermodel method)": [[180, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.write"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[181, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[181, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.llm": [[182, "module-sparknlp_jsl.llm"]], "llmloader (class in sparknlp_jsl.llm.llm_loader)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader"]], "classname (llmloader attribute)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.classname"]], "clear() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.clear"]], "copy() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.copy"]], "encodemodel() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.encodeModel"]], "explainparam() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.explainParam"]], "explainparams() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.explainParams"]], "extractparammap() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.extractParamMap"]], "generate() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.generate"]], "getmetadata() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.getMetadata"]], "getmetadataentry() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.getMetadataEntry"]], "getordefault() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.getOrDefault"]], "getparam() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.getParam"]], "hasdefault() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.hasDefault"]], "hasparam() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.hasParam"]], "isdefined() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.isDefined"]], "isset() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.isSet"]], "load() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.load"]], "pretrained() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.pretrained"]], "set() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.set"]], "setcacheprompt() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setCachePrompt"]], "setdynamictemperatureexponent() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setDynamicTemperatureRange"]], "setfrequencypenalty() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setFrequencyPenalty"]], "setgrammar() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setGrammar"]], "setignoreeos() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setIgnoreEos"]], "setinputprefix() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setInputPrefix"]], "setinputsuffix() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setInputSuffix"]], "setminkeep() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMinKeep"]], "setminp() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMinP"]], "setmirostateta() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMiroStatEta"]], "setmirostattau() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMiroStatTau"]], "setnkeep() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNKeep"]], "setnpredict() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNPredict"]], "setnprobs() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNProbs"]], "setpenalizenl() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPenalizeNl"]], "setpenaltyprompt() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPenaltyPrompt"]], "setpresencepenalty() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPresencePenalty"]], "setrepeatlastn() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setRepeatLastN"]], "setrepeatpenalty() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setRepeatPenalty"]], "setseed() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setSeed"]], "setstopstrings() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setStopStrings"]], "settemperature() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTemperature"]], "settfsz() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTfsZ"]], "settopk() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTopK"]], "settopp() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTopP"]], "settypicalp() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTypicalP"]], "setusechattemplate() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.setUseChatTemplate"]], "sparknlp_jsl.llm.llm_loader": [[183, "module-sparknlp_jsl.llm.llm_loader"]], "transform() (llmloader method)": [[183, "sparknlp_jsl.llm.llm_loader.LLMLoader.transform"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[184, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[184, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[184, "module-sparknlp_jsl.modelTracer"]], "pipelineoutputparser (class in sparknlp_jsl.pipeline_output_parser)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser"]], "check_column_mapping_dict() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.check_column_mapping_dict"]], "check_unique_id() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.check_unique_id"]], "get_assertions() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_assertions"]], "get_classification() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_classification"]], "get_deidentification() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_deidentification"]], "get_documents() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_documents"]], "get_entities() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_entities"]], "get_relations() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_relations"]], "get_resolutions() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_resolutions"]], "get_summary() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_summary"]], "get_unique_id() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_unique_id"]], "run() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.run"]], "sparknlp_jsl.pipeline_output_parser": [[185, "module-sparknlp_jsl.pipeline_output_parser"]], "update_columns_maps() (pipelineoutputparser method)": [[185, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.update_columns_maps"]], "pipelinestage (class in sparknlp_jsl.pipeline_tracer)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage"]], "pipelinetracer (class in sparknlp_jsl.pipeline_tracer)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer"]], "stagefield (class in sparknlp_jsl.pipeline_tracer)": [[186, "sparknlp_jsl.pipeline_tracer.StageField"]], "createparserdictionary() (pipelinetracer method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.createParserDictionary"]], "fieldtype (stagefield attribute)": [[186, "sparknlp_jsl.pipeline_tracer.StageField.fieldType"]], "getparserdictdirectly() (pipelinetracer static method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getParserDictDirectly"]], "getpipelinestages() (pipelinetracer method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPipelineStages"]], "getpossibleassertions() (pipelinetracer method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleAssertions"]], "getpossibleentities() (pipelinetracer method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleEntities"]], "getpossiblerelations() (pipelinetracer method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleRelations"]], "index (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.index"]], "inputannotatortype (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.inputAnnotatorType"]], "inputcol (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.inputCol"]], "listavailablemodels() (pipelinetracer static method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.listAvailableModels"]], "name (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.name"]], "name (stagefield attribute)": [[186, "sparknlp_jsl.pipeline_tracer.StageField.name"]], "outputannotatortype (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.outputAnnotatorType"]], "outputcol (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.outputCol"]], "printpipelineschema() (pipelinetracer method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.printPipelineSchema"]], "showavailablemodels() (pipelinetracer static method)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineTracer.showAvailableModels"]], "sparknlp_jsl.pipeline_tracer": [[186, "module-sparknlp_jsl.pipeline_tracer"]], "stage (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.stage"]], "uid (pipelinestage attribute)": [[186, "sparknlp_jsl.pipeline_tracer.PipelineStage.uid"]], "value (stagefield attribute)": [[186, "sparknlp_jsl.pipeline_tracer.StageField.value"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "downloadmodeldirectly() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModelDirectly"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[187, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[187, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[187, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[188, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "columns (structureddeidentification attribute)": [[188, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.columns"]], "instance (structureddeidentification attribute)": [[188, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.instance"]], "obfuscatecolumns() (structureddeidentification method)": [[188, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "obfuscatereffile (structureddeidentification attribute)": [[188, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateRefFile"]], "spark (structureddeidentification attribute)": [[188, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.spark"]], "sparknlp_jsl.structured_deidentification": [[188, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[189, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "columns (texttodocumentscolumns attribute)": [[189, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.columns"]], "instance (texttodocumentscolumns attribute)": [[189, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.instance"]], "spark (texttodocumentscolumns attribute)": [[189, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.spark"]], "sparknlp_jsl.text_to_documents_columns": [[189, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[189, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "todocumentscolumnswithid() (texttodocumentscolumns method)": [[189, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumnsWithId"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "annotation_schema (redatasethelper attribute)": [[190, "sparknlp_jsl.training.REDatasetHelper.annotation_schema"]], "apply() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.apply"]], "apply() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.apply"]], "apply() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.apply"]], "apply() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.apply"]], "augmentcsv() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[190, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "data (redatasethelper attribute)": [[190, "sparknlp_jsl.training.REDatasetHelper.data"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "getdataframe() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.getDataFrame"]], "getdataframe() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.getDataFrame"]], "getdataframe() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.getDataFrame"]], "getdataframe() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.getDataFrame"]], "new_java_array() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array"]], "new_java_array() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.new_java_array"]], "new_java_array() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.new_java_array"]], "new_java_array() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array"]], "new_java_array_integer() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array_integer"]], "new_java_array_integer() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.new_java_array_integer"]], "new_java_array_integer() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.new_java_array_integer"]], "new_java_array_integer() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array_integer"]], "new_java_array_string() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array_string"]], "new_java_array_string() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.new_java_array_string"]], "new_java_array_string() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.new_java_array_string"]], "new_java_array_string() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array_string"]], "new_java_obj() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_obj"]], "new_java_obj() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.new_java_obj"]], "new_java_obj() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.new_java_obj"]], "new_java_obj() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_obj"]], "readdataset() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "spark_version() (annotationtooljsonreader method)": [[190, "sparknlp_jsl.training.AnnotationToolJsonReader.spark_version"]], "spark_version() (cantemistreader method)": [[190, "sparknlp_jsl.training.CantemistReader.spark_version"]], "spark_version() (codiespreader method)": [[190, "sparknlp_jsl.training.CodiEspReader.spark_version"]], "spark_version() (synonymaugmentationumls method)": [[190, "sparknlp_jsl.training.SynonymAugmentationUMLS.spark_version"]], "sparknlp_jsl.training": [[190, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[190, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[191, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[191, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[191, "module-sparknlp_jsl.training_log_parser"]], "build_python_code() (in module sparknlp_jsl.transpiler.builder)": [[192, "sparknlp_jsl.transpiler.builder.build_python_code"]], "build_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[192, "sparknlp_jsl.transpiler.builder.build_scala_code"]], "compile_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[192, "sparknlp_jsl.transpiler.builder.compile_scala_code"]], "prepare_python_code() (in module sparknlp_jsl.transpiler.builder)": [[192, "sparknlp_jsl.transpiler.builder.prepare_python_code"]], "sparknlp_jsl.transpiler.builder": [[192, "module-sparknlp_jsl.transpiler.builder"]], "classnames (class in sparknlp_jsl.transpiler.class_names)": [[193, "sparknlp_jsl.transpiler.class_names.ClassNames"]], "classes (classnames attribute)": [[193, "sparknlp_jsl.transpiler.class_names.ClassNames.classes"]], "internal_classes (classnames attribute)": [[193, "sparknlp_jsl.transpiler.class_names.ClassNames.internal_classes"]], "opensource_classes (classnames attribute)": [[193, "sparknlp_jsl.transpiler.class_names.ClassNames.openSource_classes"]], "sparknlp_jsl.transpiler.class_names": [[193, "module-sparknlp_jsl.transpiler.class_names"]], "run_converter() (in module sparknlp_jsl.transpiler.converter)": [[194, "sparknlp_jsl.transpiler.converter.run_converter"]], "sparknlp_jsl.transpiler.converter": [[194, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalsources": [[195, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[196, "module-sparknlp_jsl.transpiler"]], "bucket() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.bucket"]], "convert_nlu_component_to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.convert_nlu_component_to_python"]], "is_component_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.is_component_finance"]], "is_component_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.is_component_legal"]], "is_component_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.is_component_medical"]], "is_component_ocr() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.is_component_ocr"]], "is_component_open_source() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.is_component_open_source"]], "is_component_pretrained() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.is_component_pretrained"]], "medical_annotators_set (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.medical_annotators_set"]], "nlu_component_to_spark_nlp_code() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.nlu_component_to_spark_nlp_code"]], "open_source_annotator_set_final (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.open_source_annotator_set_final"]], "sparknlp_jsl.transpiler.nlu_2_python": [[197, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "starts_with_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_finance"]], "starts_with_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_legal"]], "starts_with_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_medical"]], "to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[197, "sparknlp_jsl.transpiler.nlu_2_python.to_python"]], "anonymize_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.anonymize_script"]], "break_line_after_backslash() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.break_line_after_backslash"]], "convert() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.convert"]], "convert_class_name() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.convert_class_name"]], "convert_python_dict_to_scala_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.convert_python_dict_to_scala_script"]], "find_key_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.find_key_values"]], "get_data_dict() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.get_data_dict"]], "get_import_section() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.get_import_section"]], "prepare_scala_code() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.prepare_scala_code"]], "remove_blank_lines() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.remove_blank_lines"]], "restore_sensitive_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.restore_sensitive_values"]], "run_transpiler() (in module sparknlp_jsl.transpiler.python_2_scala)": [[198, "sparknlp_jsl.transpiler.python_2_scala.run_transpiler"]], "sparknlp_jsl.transpiler.python_2_scala": [[198, "module-sparknlp_jsl.transpiler.python_2_scala"]], "get_python_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[199, "sparknlp_jsl.transpiler.source_loader.get_python_code_from_md"]], "get_scala_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[199, "sparknlp_jsl.transpiler.source_loader.get_scala_code_from_md"]], "load_file_as_dict() (in module sparknlp_jsl.transpiler.source_loader)": [[199, "sparknlp_jsl.transpiler.source_loader.load_file_as_dict"]], "process_python_code() (in module sparknlp_jsl.transpiler.source_loader)": [[199, "sparknlp_jsl.transpiler.source_loader.process_python_code"]], "sparknlp_jsl.transpiler.source_loader": [[199, "module-sparknlp_jsl.transpiler.source_loader"]], "update_md_file() (in module sparknlp_jsl.transpiler.source_loader)": [[199, "sparknlp_jsl.transpiler.source_loader.update_md_file"]], "update_md_file_for_working_scala_code() (in module sparknlp_jsl.transpiler.source_loader)": [[199, "sparknlp_jsl.transpiler.source_loader.update_md_file_for_working_scala_code"]], "apply_method_to_all_md_files() (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.apply_method_to_all_md_files"]], "generated_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.generated_code_failed"]], "generated_code_works (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.generated_code_works"]], "python_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.python_code_failed"]], "results_list (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.results_list"]], "scala_code_works (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.scala_code_works"]], "scala_generated (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.scala_generated"]], "sparknlp_jsl.transpiler.uploader": [[200, "module-sparknlp_jsl.transpiler.uploader"]], "upload_scala_code_in_md_file() (in module sparknlp_jsl.transpiler.uploader)": [[200, "sparknlp_jsl.transpiler.uploader.upload_scala_code_in_md_file"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[201, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[201, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[201, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[201, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[202, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[202, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[203, "module-sparknlp_jsl.utils.alab_utils"]], "strip_json_entities() (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.strip_json_entities"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[203, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[204, "module-sparknlp_jsl.utils.conll_parse"]], "dict_to_annotation_converter() (in module sparknlp_jsl.utils.deidentification_utils)": [[205, "sparknlp_jsl.utils.deidentification_utils.dict_to_annotation_converter"]], "sparknlp_jsl.utils.deidentification_utils": [[205, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[205, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[206, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[206, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[207, "module-sparknlp_jsl.utils"]], "parse_str_to_dict() (in module sparknlp_jsl.utils.java_helper)": [[208, "sparknlp_jsl.utils.java_helper.parse_str_to_dict"]], "sparknlp_jsl.utils.java_helper": [[208, "module-sparknlp_jsl.utils.java_helper"]], "assertion (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "vector_similarity_rankings (internalannotatortype attribute)": [[209, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.VECTOR_SIMILARITY_RANKINGS"]], "sparknlp_jsl.utils.licensed_annotator_type": [[209, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[210, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[211, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[211, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[211, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[211, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[211, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[212, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[212, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[212, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "draw_boxes_on_image_handwritten_region() (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.draw_boxes_on_image_handwritten_region"]], "get_handwritten_regions() (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.get_handwritten_regions"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "pretrained_model (in module sparknlp_jsl.utils.ocr_utils)": [[213, "sparknlp_jsl.utils.ocr_utils.pretrained_model"]], "sparknlp_jsl.utils.ocr_utils": [[213, "module-sparknlp_jsl.utils.ocr_utils"]], "hcc_from_icd() (riskadjustmentutil static method)": [[214, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_from_ICD"]], "hcc_labels() (riskadjustmentutil static method)": [[214, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_labels"]], "riskadjustmentutil (class in sparknlp_jsl.utils.risk_adjustment_utils)": [[214, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil"]], "diff_between_hccs() (riskadjustmentutil static method)": [[214, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.diff_between_HCCs"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[214, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "runtranspiledcode (class in sparknlp_jsl.utils.run_transpiled_code)": [[215, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode"]], "build_scala_code() (runtranspiledcode static method)": [[215, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.build_scala_code"]], "compile_scala_code() (runtranspiledcode static method)": [[215, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.compile_scala_code"]], "sparknlp_jsl.utils.run_transpiled_code": [[215, "module-sparknlp_jsl.utils.run_transpiled_code"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[216, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[216, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]], "convert_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[217, "sparknlp_jsl.utils.visualner_annotations_parser.convert_to_CONLL"]], "get_tokens() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[217, "sparknlp_jsl.utils.visualner_annotations_parser.get_tokens"]], "pdfs_to_visualner_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[217, "sparknlp_jsl.utils.visualner_annotations_parser.pdfs_to_visualner_to_conll"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[217, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "visualner_annotations_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[217, "sparknlp_jsl.utils.visualner_annotations_parser.visualner_annotations_to_conll"]], "write_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[217, "sparknlp_jsl.utils.visualner_annotations_parser.write_CONLL"]]}})