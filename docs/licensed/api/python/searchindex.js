Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index", "reference/autosummary/sparknlp_jsl/nlp_test/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/java_helper/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/java_helper/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deidentication_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.extractive_summarization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.handle_exception_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.text2sql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter.internal_document_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.white_black_list_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias.bias_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.java_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.risk_adjustment_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], "healthcar": [0, 1, 10, 12, 33, 35, 41, 97], "i": [0, 10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 33, 35, 36, 39, 41, 43, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 77, 78, 80, 81, 84, 85, 86, 88, 90, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 119, 120, 123, 124, 125, 135, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 160, 162, 164, 165, 167, 168, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 195, 196, 199, 200, 201, 203, 207, 208, 211, 212, 213, 215, 218, 219, 223, 224, 226, 230, 232, 233], "commerci": 0, "extens": [0, 80], "clinic": [0, 43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 76, 78, 80, 81, 86, 90, 93, 94, 95, 96, 98, 100, 104, 107, 108, 109, 110, 113, 118, 119, 120, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 196, 199, 201, 214, 219], "biomed": 0, "text": [0, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 82, 90, 93, 94, 95, 96, 97, 98, 100, 102, 104, 107, 108, 109, 110, 113, 114, 115, 117, 119, 120, 123, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201, 203, 209, 211, 212, 216, 217, 221, 230], "mine": 0, "If": [0, 10, 12, 13, 22, 23, 24, 33, 35, 36, 41, 43, 48, 50, 51, 52, 53, 54, 55, 63, 64, 65, 66, 68, 69, 70, 72, 78, 81, 84, 85, 86, 88, 90, 94, 96, 98, 99, 102, 105, 107, 108, 109, 110, 113, 117, 123, 124, 125, 133, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 168, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 199, 200, 201, 203, 207, 215, 219, 224, 226], "you": [0, 10, 33, 41, 42, 43, 51, 66, 68, 69, 72, 94, 97, 104, 107, 109, 113, 115, 123, 133, 137, 139, 158, 165, 171, 173, 193, 200, 214, 215, 217], "don": [0, 52, 105, 113, 211, 212], "t": [0, 10, 23, 24, 43, 52, 86, 94, 104, 105, 107, 113, 119, 120, 135, 137, 153, 158, 160, 165, 171, 188, 193, 195, 200, 211, 212, 217, 233], "have": [0, 23, 24, 41, 43, 50, 52, 53, 55, 68, 81, 90, 94, 97, 107, 113, 124, 137, 139, 143, 144, 153, 162, 165, 171, 173, 177, 178, 188, 196, 200, 203, 207, 211], "subscript": 0, "yet": [0, 24, 123], "can": [0, 10, 23, 33, 41, 43, 44, 45, 48, 50, 52, 63, 64, 65, 66, 68, 69, 70, 72, 76, 81, 84, 86, 90, 94, 96, 102, 104, 105, 107, 109, 110, 113, 117, 119, 120, 123, 124, 137, 139, 146, 150, 152, 153, 158, 160, 164, 165, 171, 173, 180, 184, 187, 188, 193, 195, 199, 200, 207, 208, 211, 212, 214, 217, 219, 223, 224, 226], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": [0, 81], "try": [0, 57, 58, 86, 99, 113, 133, 146, 154, 180, 189], "http": [0, 20, 22, 23, 24, 41, 76, 109, 113], "www": [0, 220], "johnsnowlab": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 115, 118, 119, 120, 123, 127, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201], "com": [0, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 115, 118, 119, 120, 123, 127, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 220], "provid": [0, 22, 23, 24, 41, 43, 51, 64, 66, 69, 94, 95, 113, 131, 137, 139, 153, 164, 165, 171, 173, 188, 199, 200, 215, 218, 232], "specif": [0, 10, 33, 81, 94, 109, 123, 124, 165, 200, 203, 230, 232], "annot": [0, 10, 33, 41, 129, 130, 131, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 160, 162, 164, 165, 167, 169, 170, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 195, 196, 199, 200, 201, 203, 212, 214, 216, 217, 221, 230], "pipelin": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 107, 108, 109, 110, 113, 114, 115, 119, 120, 135, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201, 202, 203, 208, 212, 214, 230], "model": [0, 1, 5, 8, 10, 12, 15, 16, 23, 24, 28, 31, 33, 35, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 78, 80, 81, 86, 88, 90, 93, 94, 95, 96, 97, 98, 104, 107, 108, 109, 110, 113, 117, 118, 119, 120, 124, 127, 130, 133, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 168, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 208, 211, 212, 214, 217, 219, 231], "embed": [0, 10, 12, 16, 18, 33, 35, 39, 43, 45, 48, 50, 53, 55, 59, 63, 64, 65, 68, 70, 72, 74, 76, 84, 89, 93, 94, 95, 96, 107, 108, 109, 110, 113, 115, 124, 136, 137, 139, 144, 146, 149, 152, 153, 155, 162, 164, 165, 169, 171, 173, 178, 180, 183, 187, 188, 190, 196, 199, 200, 211, 212], "entiti": [0, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 64, 66, 68, 69, 72, 73, 74, 76, 78, 81, 85, 90, 94, 95, 96, 97, 98, 99, 105, 107, 108, 109, 110, 112, 113, 115, 125, 137, 139, 143, 144, 146, 149, 150, 162, 164, 165, 167, 170, 171, 173, 177, 178, 180, 183, 184, 196, 199, 200, 201, 203, 207, 211, 212, 213, 215, 217, 221, 223, 230], "recognit": [0, 24, 51, 64, 94, 98, 164, 165, 167, 199, 200, 201], "link": [0, 76], "normal": [0, 13, 24, 36, 57, 58, 89, 113, 124, 146, 153, 154, 168, 169, 180, 188, 189, 211], "assert": [0, 10, 33, 41, 48, 89, 142, 151, 169, 176, 185, 217, 218, 221, 227], "statu": [0, 43, 44, 45, 137, 171, 217, 232], "detect": [0, 44, 230], "de": [0, 69, 72, 139, 173, 215, 223], "identif": [0, 215], "relat": [0, 10, 33, 41, 53, 55, 81, 107, 108, 109, 110, 124, 125, 143, 144, 149, 150, 162, 170, 177, 178, 183, 184, 196, 203, 212, 221], "extract": [0, 41, 43, 45, 48, 50, 66, 76, 80, 82, 94, 95, 107, 108, 110, 113, 123, 137, 146, 149, 150, 165, 171, 180, 183, 184, 200, 202, 203, 211, 212], "spell": [0, 136, 211], "check": [0, 10, 33, 41, 43, 45, 66, 100, 104, 109, 124, 158, 193, 219, 233], "correct": [0, 207], "The": [0, 10, 13, 20, 21, 22, 23, 24, 33, 36, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 76, 78, 80, 81, 84, 86, 90, 94, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 113, 115, 117, 118, 119, 120, 123, 124, 125, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 168, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 202, 208, 211, 213, 214, 215, 216, 217, 219, 223, 226, 232], "librari": [0, 1, 41, 63, 64, 65, 77, 114, 133, 140, 152, 164, 169, 174, 187, 199], "offer": [0, 232], "access": [0, 41], "sever": [0, 23, 43, 48, 69, 72, 113, 137, 139, 171, 173, 232], "transform": [0, 13, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 84, 90, 94, 95, 98, 99, 100, 105, 107, 108, 109, 110, 113, 114, 134, 137, 139, 140, 144, 146, 149, 150, 152, 153, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 184, 187, 188, 196, 199, 200, 201, 203], "jsl": [0, 41, 53, 55, 144, 162, 178, 196, 221, 230], "bert": [0, 63, 64, 65, 80, 81, 94, 108, 110, 113, 115, 149, 150, 152, 164, 165, 183, 184, 187, 199, 200], "biobert": [0, 203], "clinicalbert": 0, "glove": [0, 45], "med": 0, "icd": [0, 113, 146, 180, 232], "o": [0, 24, 64, 72, 74, 93, 96, 164, 199, 215, 217, 233], "It": [0, 22, 24, 41, 48, 52, 69, 70, 81, 84, 85, 86, 94, 96, 123, 124, 125, 139, 153, 165, 168, 173, 188, 200, 203, 211, 213, 223], "also": [0, 24, 63, 64, 65, 68, 76, 81, 94, 96, 105, 107, 113, 131, 139, 152, 164, 165, 168, 173, 187, 199, 200, 211], "includ": [0, 21, 41, 43, 48, 51, 90, 94, 96, 104, 109, 110, 121, 124, 125, 137, 158, 165, 171, 193, 200, 211, 212, 221], "over": [0, 19, 69, 94, 123, 165, 200, 211, 212, 230, 232], "50": [0, 10, 24, 33, 53, 55, 86, 143, 144, 162, 165, 177, 178, 196], "pre": [0, 41, 50, 53, 55, 63, 64, 65, 66, 77, 80, 94, 98, 107, 108, 110, 114, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 199, 200, 201], "train": [0, 2, 9, 10, 12, 15, 22, 23, 24, 25, 32, 33, 35, 38, 41, 43, 44, 45, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 80, 81, 84, 86, 90, 93, 94, 95, 96, 98, 99, 107, 108, 110, 113, 114, 124, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 162, 164, 165, 167, 169, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 196, 199, 200, 201, 203, 208, 211], "recogn": [0, 81, 94, 96, 98, 110, 165, 200], "follow": [0, 19, 20, 48, 51, 66, 69, 72, 85, 94, 96, 113, 123, 139, 165, 168, 173, 200, 203, 215, 217, 220], "mani": [0, 18, 76, 81, 117], "more": [0, 18, 19, 22, 23, 44, 50, 63, 65, 69, 77, 81, 96, 97, 114, 139, 140, 152, 164, 173, 174, 187, 199], "support": [0, 10, 33, 61, 69, 72, 94, 139, 153, 173, 188], "sign": [0, 217], "symptom": [0, 81, 107], "treatment": [0, 109, 110, 150, 184, 217], "procedur": 0, "test": [0, 43, 49, 51, 94, 109, 110, 115, 137, 153, 165, 171, 188, 200, 203, 208, 211, 212, 213, 217, 218, 224], "lab": [0, 41, 169, 217, 221], "section": [0, 68, 97], "drug": [0, 81, 96, 100, 109, 110, 150, 184, 215], "name": [0, 6, 10, 12, 20, 22, 24, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 133, 135, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 199, 200, 201, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 230, 232], "dosag": [0, 81, 96, 100], "strength": [0, 81, 96], "rout": 0, "durat": 0, "frequenc": [0, 24, 41, 96, 211, 212], "risk": [0, 168, 232], "factor": [0, 24, 168], "smoke": 0, "obes": 0, "diabet": [0, 50, 80], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 64, 164, 199, 215], "subdivis": 0, "cell": [0, 12, 18, 19, 20, 22, 23, 24, 35, 64, 94, 164, 165, 199, 200, 207, 215], "structur": [0, 110, 124, 150, 184, 215, 223], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 68, 69, 73, 74, 90, 93, 120, 139, 168, 173, 215, 232], "gender": [0, 69, 72, 90, 93, 139, 173, 203], "height": [0, 15, 38, 209], "weight": [0, 22, 24, 41, 80, 81, 124, 170, 209], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 217], "sensit": [0, 43, 48, 52, 66, 78, 80, 90, 107, 108, 109, 123, 124, 125], "data": [0, 22, 23, 24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 88, 90, 93, 94, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 119, 120, 123, 124, 135, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201, 203, 207, 208, 211, 212, 215, 217, 223], "patient": [0, 43, 52, 53, 55, 66, 69, 70, 72, 74, 81, 104, 105, 137, 144, 158, 162, 168, 171, 178, 193, 196, 215, 232], "address": [0, 43, 45, 50, 57, 58, 59, 60, 61, 68, 76, 80, 81, 86, 90, 95, 104, 113, 118, 119, 120, 155, 158, 159, 160, 190, 193, 194, 195, 200], "phone": [0, 69, 139, 173, 215], "email": [0, 69, 215], "date": [0, 42, 68, 69, 70, 73, 99, 115, 135, 139, 173, 215, 219, 223], "identifi": [0, 49, 50, 51, 90, 109, 113, 115, 208, 215, 217, 232, 233], "For": [0, 19, 24, 41, 45, 48, 63, 64, 68, 69, 77, 80, 81, 93, 94, 98, 100, 107, 108, 109, 110, 113, 114, 123, 139, 140, 149, 150, 152, 153, 164, 165, 167, 173, 174, 183, 184, 187, 188, 199, 200, 201, 214], "inform": [0, 1, 23, 24, 66, 68, 70, 90, 96, 99, 100, 107, 124, 139, 168, 173, 211, 217, 232], "visit": [0, 78, 107], "our": 0, "site": [0, 66], "built": [0, 24, 153, 188], "top": [0, 50, 63, 64, 65, 94, 117, 152, 164, 165, 187, 199, 200, 217], "apach": 0, "x": [0, 13, 20, 21, 24, 36, 123, 207], "us": [0, 1, 10, 12, 18, 19, 20, 22, 23, 24, 35, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 76, 77, 80, 81, 85, 86, 90, 94, 95, 96, 98, 99, 102, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 123, 124, 127, 135, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 169, 170, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 203, 208, 211, 212, 214, 215, 217, 221, 223, 230, 232], "need": [0, 10, 18, 23, 24, 33, 45, 66, 69, 80, 94, 95, 105, 107, 113, 139, 165, 173, 200, 217], "java": [0, 68, 97, 117, 118, 127, 129, 130, 136, 157, 159, 192, 194, 214, 226], "8": [0, 24, 63, 65, 81, 94, 123, 152, 164, 165, 187, 199, 200, 217], "ar": [0, 10, 19, 20, 21, 23, 24, 33, 41, 43, 48, 50, 51, 52, 53, 54, 55, 57, 58, 61, 63, 64, 65, 66, 68, 69, 72, 73, 76, 78, 80, 81, 85, 86, 88, 90, 94, 96, 97, 98, 100, 102, 104, 107, 108, 109, 110, 113, 115, 117, 119, 120, 123, 124, 125, 133, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 158, 160, 164, 165, 167, 168, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 193, 195, 199, 200, 201, 203, 207, 211, 212, 215, 217, 219, 221, 223, 232, 233], "pyspark": [0, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 78, 80, 81, 86, 90, 93, 94, 95, 96, 99, 104, 107, 108, 110, 114, 118, 119, 120, 133, 137, 139, 140, 144, 146, 149, 150, 152, 153, 154, 158, 159, 160, 162, 164, 165, 171, 173, 174, 178, 180, 183, 184, 187, 188, 189, 193, 194, 195, 196, 199, 200, 202, 203, 208, 211, 212, 215, 216, 217, 221, 230], "6": [0, 10, 24, 33, 47, 109, 153, 188, 217], "7": [0, 2, 25, 217], "recommend": [0, 76, 94, 165, 200], "basic": [0, 22, 24], "knowledg": [0, 76, 113], "framework": 0, "work": [0, 94, 124, 165, 200, 232], "environ": [0, 68, 224], "befor": [0, 24, 45, 50, 94, 97, 117, 118, 123, 127, 130, 157, 159, 165, 192, 194, 200, 232], "pleas": [0, 41, 63, 64, 73, 94, 108, 113, 149, 152, 153, 164, 165, 183, 187, 188, 199, 200, 214], "refer": [0, 1, 41, 50, 68, 69, 70, 72, 73, 77, 107, 113, 114, 139, 140, 173, 174, 223], "document": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 82, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 115, 119, 120, 123, 135, 137, 139, 140, 144, 146, 149, 150, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 184, 187, 188, 189, 193, 195, 196, 199, 200, 201, 203, 207, 211, 212, 216, 217, 221], "first": [0, 23, 24, 49, 51, 66, 68, 69, 78, 80, 94, 105, 107, 139, 165, 173, 200, 217], "let": [0, 107, 113], "": [0, 10, 24, 41, 45, 53, 68, 69, 72, 76, 80, 97, 102, 104, 113, 117, 118, 119, 120, 121, 124, 127, 129, 130, 157, 158, 159, 160, 168, 192, 193, 194, 195, 211, 212, 213, 215], "make": [0, 41, 66, 69, 70, 97, 139, 173, 211], "sure": [0, 41, 69, 139, 173], "version": [0, 10, 33, 72, 96, 107, 131, 133, 168, 169, 214, 219, 232], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 217], "extra": [0, 48, 96], "index": [0, 13, 36, 43, 44, 94, 97, 123, 137, 171, 207, 208, 221], "url": [0, 41, 69, 215], "pypi": 0, "secret": [0, 41, 169], "code": [0, 21, 24, 41, 66, 69, 70, 113, 124, 146, 168, 180, 215, 217, 230, 232], "upgrad": [0, 232], "part": [0, 24, 69, 70, 77, 114, 140, 174, 207, 208, 224], "split": [0, 18, 24, 51, 86, 94, 123, 208, 211, 217, 221, 233], "e": [0, 24, 45, 50, 53, 63, 64, 65, 66, 69, 72, 81, 94, 97, 104, 105, 109, 113, 120, 137, 139, 146, 152, 158, 164, 165, 171, 173, 180, 187, 193, 199, 200, 203, 207, 211, 212, 215, 219, 223, 233], "onli": [0, 20, 21, 24, 41, 50, 53, 69, 72, 86, 90, 94, 102, 104, 107, 109, 117, 119, 120, 123, 139, 158, 160, 165, 173, 193, 195, 200, 211, 212, 217], "avail": [0, 10, 21, 33, 50, 63, 64, 81, 90, 94, 96, 104, 119, 120, 152, 153, 158, 160, 164, 165, 187, 188, 193, 195, 199, 200, 214], "user": [0, 41, 66, 96, 113, 120, 212], "valid": [0, 10, 33, 41, 43, 69, 86, 94, 109, 137, 153, 165, 171, 188, 200, 208, 219], "licens": [0, 69, 96, 139, 169, 173, 215], "did": [0, 123], "receiv": [0, 24], "contact": [0, 215], "u": [0, 20, 24, 69, 94, 135, 165, 200, 219], "href": 0, "mailto": 0, "info": [0, 207], "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 41, 43, 45, 49, 50, 51, 53, 57, 58, 60, 63, 64, 65, 66, 68, 69, 70, 72, 74, 77, 80, 81, 88, 90, 94, 96, 97, 100, 104, 105, 107, 109, 113, 117, 118, 120, 123, 124, 127, 130, 131, 135, 137, 139, 153, 154, 157, 158, 159, 165, 171, 173, 188, 189, 192, 193, 194, 200, 202, 203, 208, 211, 212, 213, 215, 217, 223, 224, 226, 232, 233, 234], "simpl": [0, 24], "piec": [0, 51], "import": [0, 10, 33, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 99, 107, 108, 113, 114, 123, 137, 139, 140, 144, 146, 149, 152, 153, 154, 162, 164, 165, 169, 171, 173, 174, 178, 180, 183, 187, 188, 189, 196, 199, 200, 209, 217, 225], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 63, 64, 65, 94, 104, 108, 110, 118, 119, 120, 133, 149, 150, 152, 158, 159, 160, 164, 165, 169, 183, 184, 187, 193, 194, 195, 199, 200, 203, 208, 211, 212, 215, 216, 221, 230], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 63, 64, 65, 104, 110, 118, 119, 120, 133, 150, 152, 158, 159, 160, 164, 184, 187, 193, 194, 195, 199, 202, 203, 208, 211, 212, 215, 216, 217, 221, 227, 230], "builder": [0, 124], "appnam": 0, "enterpris": 0, "master": 0, "local": [0, 43, 63, 64, 65, 68, 80, 86, 94, 98, 104, 107, 110, 113, 118, 119, 120, 137, 139, 146, 150, 152, 153, 158, 159, 160, 164, 165, 167, 171, 173, 180, 184, 187, 188, 193, 194, 195, 199, 200, 201], "config": [0, 66], "driver": [0, 215], "memori": [0, 22, 23, 24, 63, 65, 94, 104, 124, 152, 158, 164, 165, 187, 193, 199, 200], "16": [0, 47, 217], "maxresults": 0, "2g": 0, "jar": [0, 41, 221, 230], "nlp_2": 0, "11": [0, 9, 32, 45, 52, 68, 69, 73, 99, 139, 173, 217], "version_publ": 0, "getorcr": 0, "main": 1, "page": [1, 45, 207, 234], "workshop": [1, 24, 41, 77, 94, 114, 140, 153, 165, 174, 188, 200], "hub": [1, 45, 63, 64, 81, 94, 107, 108, 113, 152, 153, 164, 165, 187, 188, 199, 200, 214], "welcom": 1, "python": [1, 19, 20, 21, 24, 124, 226], "legal": [1, 53, 55, 63, 64, 65, 66, 94, 98, 107, 108, 110, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 169], "financ": [1, 53, 55, 63, 64, 65, 66, 94, 98, 107, 108, 110, 169, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 199, 201], "contain": [1, 22, 23, 24, 41, 43, 44, 45, 52, 53, 55, 63, 64, 65, 68, 69, 70, 72, 73, 77, 85, 90, 94, 96, 97, 107, 108, 113, 114, 121, 124, 125, 129, 130, 131, 137, 139, 140, 143, 144, 146, 149, 152, 162, 164, 165, 171, 173, 174, 177, 178, 180, 183, 187, 196, 199, 200, 203, 208, 212, 213, 215, 217, 223], "how": [1, 48, 50, 53, 63, 64, 65, 73, 76, 86, 90, 94, 96, 105, 107, 117, 123, 152, 153, 164, 165, 187, 188, 199, 200], "exampl": [1, 10, 19, 24, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 115, 119, 120, 123, 124, 137, 139, 140, 144, 146, 149, 150, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 184, 187, 188, 189, 193, 195, 196, 199, 200, 201, 215, 217, 220], "get": [1, 13, 36, 41, 43, 69, 74, 94, 104, 119, 120, 124, 137, 153, 158, 160, 169, 171, 188, 193, 195, 200, 208, 211, 212, 221], "start": [1, 10, 18, 22, 33, 43, 44, 45, 77, 90, 94, 107, 113, 114, 137, 140, 146, 165, 169, 171, 174, 180, 200, 211, 212, 217, 219, 221, 233], "requir": [1, 22, 23, 24, 41, 43, 45, 57, 58, 63, 65, 73, 77, 94, 113, 114, 137, 140, 152, 154, 164, 165, 171, 174, 187, 189, 199, 200, 217, 224], "instal": [1, 10, 41, 224], "session": [1, 15, 16, 38, 39, 41, 203, 208, 211, 212, 217, 221, 230], "from": [1, 9, 10, 12, 16, 18, 20, 22, 23, 24, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 100, 104, 107, 108, 109, 113, 114, 115, 117, 118, 119, 120, 123, 124, 127, 130, 137, 139, 140, 144, 146, 149, 152, 153, 154, 157, 158, 159, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 207, 211, 212, 213, 214, 217, 220, 221], "api": [1, 105], "assertionmodel": [2, 25, 43, 45, 48, 137, 146, 171, 180], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 215], "cpu": [2, 23, 25], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 123, 127, 130, 135, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 169, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 203, 207, 209, 211, 212, 213, 214, 215, 217, 219, 220, 221, 223, 224, 230, 233], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 47, 70, 99, 104, 119, 120, 153, 158, 160, 188, 193, 195, 217], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 86, 94, 137, 153, 165, 171, 188, 200, 211, 218, 229], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 52, 90, 93, 94, 153, 188, 217], "learning_r": [2, 4, 9, 25, 27, 32, 86], "01": [2, 15, 25, 38, 45, 68, 70, 73, 94, 99, 139, 165, 173, 200, 217], "dropout": [2, 15, 24, 25, 38, 43, 86, 94, 137, 153, 165, 171, 188, 200], "15": [2, 10, 25, 33, 70, 90, 93, 99], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 13, 15, 17, 25, 36, 38, 40, 43, 45, 72, 94, 95, 110, 113, 137, 146, 150, 153, 165, 171, 180, 184, 188, 200, 203, 208, 211, 217], "calcul": [2, 23, 24, 25, 43, 50, 94, 113, 137, 165, 168, 171, 200, 203, 208, 211, 212, 213, 232], "accuraci": [2, 8, 25, 31, 69, 94, 124, 165, 200], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34, 43], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 123, 124, 135, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 160, 162, 164, 165, 167, 168, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 195, 196, 199, 200, 201, 207, 211, 212, 221, 223, 230], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 123, 124, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 160, 162, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 195, 196, 199, 200, 201, 202, 207, 208, 211, 212, 213, 221, 223, 230], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 94, 137, 153, 165, 171, 188, 200, 218, 229, 233], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 42, 43, 50, 51, 52, 53, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 77, 84, 86, 88, 90, 94, 96, 97, 99, 104, 105, 107, 108, 113, 114, 115, 117, 118, 123, 124, 125, 129, 130, 135, 136, 139, 140, 146, 152, 153, 154, 158, 164, 165, 173, 174, 180, 187, 188, 189, 193, 199, 200, 203, 208, 212, 214, 215, 217, 218, 221, 224, 229, 230, 233], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33, 41, 124], "param": [4, 6, 10, 27, 29, 33, 41, 53, 68, 69, 72, 77, 90, 94, 97, 117, 118, 123, 127, 130, 131, 139, 157, 159, 165, 169, 173, 192, 194, 200, 203, 207, 208, 211, 212, 213, 217, 221, 226, 230], "run_test": [4, 6, 27, 29, 212], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 57, 58, 86, 154, 189], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 10, 11, 24, 30, 34, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 80, 81, 82, 84, 85, 86, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 113, 115, 117, 118, 119, 120, 121, 123, 124, 125, 127, 130, 134, 137, 139, 140, 144, 150, 157, 159, 160, 165, 169, 171, 173, 174, 178, 184, 192, 194, 195, 200, 203, 208, 211, 212, 213, 217, 218, 221, 230, 232], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32, 44, 94, 124, 165, 200, 218, 229], "is_valid": [8, 31], "fals": [8, 10, 12, 13, 15, 19, 22, 23, 24, 31, 33, 35, 36, 38, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 115, 119, 120, 123, 124, 135, 137, 139, 140, 144, 146, 149, 150, 152, 153, 154, 158, 160, 162, 164, 165, 167, 168, 169, 171, 173, 174, 178, 180, 183, 184, 187, 188, 189, 193, 195, 196, 199, 200, 201, 203, 208, 211, 212, 215, 217, 221, 224, 226, 230, 233], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 16, 32, 33, 39, 41, 50, 51, 68, 69, 70, 86, 94, 97, 102, 104, 105, 107, 117, 119, 120, 139, 153, 158, 160, 165, 173, 188, 193, 195, 200, 211, 212, 215, 217, 221, 223, 230], "enumer": [9, 32, 221], "deriv": [9, 32, 60, 61], "defin": [9, 22, 32, 41, 45, 48, 51, 52, 57, 58, 66, 78, 81, 85, 90, 94, 96, 99, 109, 113, 124, 125, 154, 165, 189, 200, 212, 221], "new": [9, 24, 32, 41, 43, 50, 54, 70, 74, 94, 96, 98, 102, 104, 107, 108, 113, 117, 119, 120, 131, 146, 149, 158, 160, 165, 167, 168, 180, 183, 193, 195, 200, 201, 202, 203, 207, 217, 219, 232, 233], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 44, 53, 55, 70, 100, 108, 113, 144, 146, 162, 178, 180, 196, 208, 217, 232], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 86, 104, 119, 120, 153, 158, 160, 188, 193, 195, 233], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 45, 76, 77, 81, 86, 107, 108, 114, 117, 137, 140, 149, 170, 171, 174, 183, 217], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 41, 104, 158, 193, 203, 218, 229], "predict": [9, 10, 15, 24, 32, 33, 38, 41, 43, 57, 58, 76, 86, 94, 107, 137, 154, 165, 171, 189, 200, 203, 207, 208, 211, 212, 218, 229, 233], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 110], "genericclassifi": [9, 32, 60, 61, 124], "default_model_node_nam": [9, 32], "except": [10, 33, 69, 88, 94, 96, 168, 211, 212, 224], "wrongtfvers": [10, 33], "rais": [10, 22, 23, 24, 33, 94, 224], "tensorflow": [10, 12, 16, 21, 23, 33, 35, 39, 43, 63, 64, 65, 86, 94, 104, 107, 117, 119, 120, 124, 137, 152, 153, 158, 160, 164, 165, 171, 187, 188, 193, 195, 199, 200], "current": [10, 24, 33, 63, 64, 65, 90, 94, 99, 104, 110, 118, 119, 120, 124, 133, 150, 152, 158, 159, 160, 164, 165, 184, 187, 193, 194, 195, 199, 200, 216, 224, 232, 233], "xx": [10, 33], "tensorflowaddonsneed": 10, "when": [10, 12, 24, 35, 41, 43, 44, 51, 66, 69, 81, 90, 94, 95, 96, 97, 99, 105, 107, 113, 117, 119, 123, 137, 139, 146, 165, 168, 171, 173, 180, 200, 211, 212, 214, 217, 224], "addon": 10, "tfgraphbuild": [10, 33, 107, 124], "creat": [10, 12, 22, 23, 33, 35, 41, 44, 53, 66, 70, 99, 107, 124, 134, 207, 208, 211, 212, 217], "graph": [10, 12, 33, 35, 43, 94, 107, 124, 137, 151, 165, 169, 171, 185, 200, 218], "ner_dl": [10, 11, 33, 34, 94, 165, 200], "generic_classifi": [10, 11, 33, 34, 89, 169], "assertion_dl": [10, 11, 33, 34, 43, 137, 171], "relation_extract": [10, 33, 89, 106, 124, 147, 151, 181, 185], "nlp": [10, 12, 33, 35, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 114, 118, 119, 120, 123, 127, 140, 152, 153, 155, 158, 159, 160, 164, 165, 169, 174, 187, 188, 190, 193, 194, 195, 199, 200, 203, 214, 217, 221, 230, 234], "paramet": [10, 23, 33, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 125, 127, 131, 133, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 168, 170, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 202, 207, 208, 211, 212, 214, 215, 217, 218, 219, 220, 229, 230, 232], "dict": [10, 33, 41, 43, 52, 66, 68, 81, 90, 96, 98, 104, 107, 108, 110, 119, 120, 169, 203, 207, 211, 212, 213, 215, 221, 223, 226, 232, 233], "tf_graph": [10, 33, 107, 124, 217], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "return": [10, 13, 22, 23, 24, 33, 36, 41, 43, 45, 48, 50, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 76, 77, 80, 81, 86, 90, 94, 98, 104, 107, 108, 110, 112, 113, 114, 118, 119, 120, 133, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 168, 169, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 203, 207, 208, 211, 212, 213, 214, 215, 217, 218, 221, 224, 226, 229, 230, 232, 233], "automat": [10, 41, 69, 105, 110, 139, 150, 173, 184, 207], "file": [10, 16, 21, 33, 39, 41, 43, 52, 66, 68, 69, 72, 86, 90, 94, 96, 107, 113, 124, 135, 137, 139, 146, 153, 165, 171, 173, 180, 188, 200, 203, 207, 208, 211, 212, 215, 217, 218, 219, 221, 223, 229, 230], "method": [10, 22, 33, 41, 50, 66, 68, 72, 86, 96, 107, 123, 139, 146, 173, 180, 207, 208, 211, 212, 217, 223, 232, 234], "overridden": [10, 33], "child": [10, 33], "get_model_filenam": [10, 33], "implement": [10, 18, 19, 20, 22, 24, 59, 60, 61, 97, 110, 117, 118, 127, 129, 130, 150, 155, 157, 159, 184, 190, 192, 194, 211, 212], "check_build_param": [10, 33], "given": [10, 18, 22, 24, 33, 43, 50, 52, 53, 55, 68, 70, 72, 80, 81, 90, 94, 104, 107, 110, 123, 124, 135, 139, 144, 150, 158, 162, 165, 168, 173, 178, 184, 193, 196, 200, 203, 211, 212, 219, 224, 232], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "default": [10, 12, 22, 23, 24, 33, 35, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 77, 80, 81, 85, 86, 90, 94, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 115, 118, 119, 120, 123, 124, 125, 133, 137, 139, 140, 143, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 168, 171, 173, 174, 177, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 203, 207, 208, 211, 212, 213, 214, 215, 217, 219, 221, 223, 226, 230, 233], "valu": [10, 22, 23, 33, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 77, 80, 81, 82, 84, 85, 86, 88, 90, 94, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 113, 115, 117, 119, 120, 121, 123, 124, 125, 127, 131, 134, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 168, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 199, 200, 201, 207, 208, 209, 211, 212, 213, 215, 219, 223, 226, 233], "str": [10, 12, 13, 16, 33, 35, 36, 39, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 76, 77, 80, 81, 84, 85, 86, 90, 93, 94, 96, 98, 100, 104, 105, 107, 108, 109, 110, 113, 115, 118, 119, 120, 121, 123, 124, 125, 133, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 168, 169, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 203, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 229, 230, 232], "ani": [10, 23, 33, 41, 42, 69, 70, 81, 90, 94, 109, 115, 124, 165, 200, 203, 211, 212], "retriev": [10, 33, 94, 165, 200, 211, 212, 232], "found": [10, 33, 66, 77, 81, 114, 140, 174, 211, 212], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 16, 19, 21, 22, 23, 33, 39, 63, 64, 65, 124, 152, 164, 187, 199], "genericclassifierapproach": [10, 33, 86], "extend": [10, 33, 77, 94, 114, 140, 153, 165, 174, 188, 200, 217], "base": [10, 20, 22, 24, 33, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 69, 72, 76, 77, 78, 80, 81, 82, 84, 85, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 110, 113, 114, 117, 118, 119, 120, 123, 125, 127, 129, 130, 131, 137, 139, 140, 144, 146, 149, 152, 153, 154, 157, 158, 159, 160, 162, 164, 165, 167, 169, 171, 173, 174, 178, 180, 183, 187, 188, 189, 192, 193, 194, 195, 196, 199, 200, 201, 203, 208, 211, 212, 213, 217, 221, 232], "sparknlp": [10, 33, 43, 45, 47, 48, 50, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 107, 108, 110, 114, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 196, 199, 200, 201, 203, 208, 211, 212, 221], "datafram": [10, 33, 41, 70, 109, 113, 202, 203, 207, 208, 211, 212, 215, 216, 217, 218, 221, 223], "pd": [10, 33, 41, 70, 221], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 41, 52, 66, 68, 72, 74, 84, 90, 96, 135, 139, 153, 173, 188, 211, 212, 217, 223], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 107, 124], "200": [10, 24, 33, 107, 124, 230], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 124], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "output_act": 10, "softmax": [10, 18, 113, 124], "loss_func": 10, "cross_entropi": 10, "gc_graph": [10, 33], "auto": [10, 33, 124], "save": [10, 12, 16, 33, 35, 39, 41, 43, 53, 63, 64, 65, 86, 94, 104, 107, 110, 118, 119, 120, 124, 135, 137, 150, 152, 153, 158, 159, 160, 164, 165, 171, 184, 187, 188, 193, 194, 195, 199, 200, 203, 207, 208, 211, 212, 217, 220, 230], "gcl": [10, 33], "pb": [10, 33, 86, 94, 107, 124, 165, 200], "we": [10, 22, 24, 41, 52, 53, 55, 57, 58, 69, 76, 81, 86, 94, 105, 113, 139, 143, 144, 146, 153, 154, 162, 168, 173, 177, 178, 180, 188, 189, 196], "modelfil": [10, 86], "gen_clf": [10, 33, 57, 58, 86, 154, 189], "setlabelcolumn": [10, 33, 57, 86, 94, 107, 124, 153, 154, 165, 188, 189, 200], "setinputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 115, 119, 120, 123, 124, 134, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201], "featur": [10, 24, 33, 45, 84, 86, 90, 94, 107], "setoutputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 115, 119, 120, 134, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201], "setmodelfil": [10, 33, 86, 107], "setepochsnumb": [10, 33, 86, 107], "setbatchs": [10, 33, 43, 86, 94, 107, 108, 137, 153, 171, 188], "setfeaturesc": [10, 33, 86, 107], "zscore": [10, 33, 86, 107], "setfiximbal": [10, 33, 86, 107], "setlearningr": [10, 33, 43, 86, 107, 137, 171], "001": [10, 24, 33, 86, 94, 107, 165, 200], "setoutputlogspath": [10, 33, 43, 86], "log": [10, 33, 43, 45, 86, 94, 137, 153, 165, 171, 188, 200, 203, 208, 211, 212, 218, 229], "setvalidationsplit": [10, 33, 43, 86, 94, 107], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 45, 48, 49, 52, 66, 68, 72, 74, 76, 90, 93, 95, 96, 99, 100, 104, 107, 108, 109, 113, 119, 120, 137, 139, 146, 149, 158, 160, 168, 171, 173, 180, 183, 193, 195], "features_asm": [10, 33, 86], "bool": [10, 12, 13, 33, 35, 36, 41, 43, 48, 50, 51, 52, 53, 63, 65, 66, 68, 69, 72, 74, 76, 77, 82, 86, 88, 90, 94, 96, 100, 102, 104, 105, 107, 108, 109, 113, 117, 118, 119, 121, 123, 124, 125, 159, 168, 169, 194, 211, 212, 214, 215, 217, 221, 224, 226, 230], "an": [10, 18, 19, 22, 23, 24, 33, 41, 43, 48, 51, 57, 58, 59, 66, 69, 72, 76, 77, 80, 81, 84, 90, 94, 96, 98, 99, 105, 107, 110, 113, 114, 123, 124, 131, 137, 139, 140, 146, 153, 154, 155, 165, 167, 168, 171, 173, 174, 180, 188, 189, 190, 200, 201, 203, 208, 211, 212, 215, 217, 221, 230, 232, 234], "otherwis": [10, 24, 33, 43, 45, 50, 57, 58, 59, 60, 61, 68, 69, 74, 76, 77, 80, 81, 84, 86, 90, 94, 102, 104, 105, 107, 108, 113, 114, 117, 118, 119, 120, 139, 140, 155, 158, 159, 160, 165, 173, 174, 190, 193, 194, 195, 200, 203, 218, 224, 229, 233], "locat": [10, 41, 53, 55, 63, 64, 65, 66, 76, 94, 96, 98, 107, 108, 110, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 199, 200, 201, 214, 215, 219], "where": [10, 12, 16, 23, 24, 33, 35, 39, 41, 48, 53, 55, 68, 70, 77, 86, 93, 94, 105, 107, 108, 114, 124, 139, 140, 143, 144, 149, 162, 165, 173, 174, 177, 178, 183, 196, 200, 207, 208, 211, 212, 217, 219], "logregclassifiertfgraphbuild": 10, "svmclassifiertfgraphbuild": 10, "fewshotclassifiertfgraphbuild": 10, "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 124, 137, 171], "blstm_34_32_30_": [10, 33], "_": [10, 33, 47, 73, 74, 94, 165, 200], "format": [10, 23, 33, 41, 43, 66, 68, 69, 72, 90, 93, 94, 96, 99, 139, 165, 173, 200, 203, 207, 208, 211, 212, 213, 215, 217, 219, 223, 230], "setlabelcol": [10, 33, 43, 45, 58, 86, 113, 137, 146, 171, 180], "label": [10, 33, 41, 43, 45, 48, 51, 52, 54, 57, 58, 59, 60, 61, 63, 64, 65, 69, 86, 90, 93, 94, 96, 98, 107, 108, 110, 112, 113, 124, 125, 136, 137, 139, 146, 150, 152, 153, 154, 155, 164, 165, 167, 170, 171, 173, 180, 184, 187, 188, 189, 190, 199, 200, 201, 207, 208, 211, 217, 218, 221, 230], "chunk": [10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 66, 68, 69, 70, 72, 76, 77, 80, 81, 85, 90, 93, 95, 96, 97, 99, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 119, 120, 123, 137, 139, 140, 143, 144, 149, 150, 154, 158, 160, 162, 171, 173, 174, 177, 178, 183, 184, 189, 193, 195, 196, 207, 217, 218, 229, 230, 233], "128": [10, 12, 24, 33, 35, 43, 63, 64, 65, 123, 137, 152, 164, 171, 187, 199], "setdropout": [10, 33, 43, 86, 94, 137, 153, 171, 188], "setepoch": [10, 33, 43, 137, 171], "setstartcol": [10, 33, 43, 45, 77, 137, 171], "setendcol": [10, 33, 43, 45, 137, 171], "end": [10, 23, 33, 43, 44, 45, 50, 68, 90, 93, 94, 105, 107, 117, 119, 137, 139, 165, 168, 171, 173, 200, 211, 212, 217, 219, 221, 233], "setmaxsentlen": [10, 33, 43, 137, 171], "250": [10, 33, 43, 81, 137, 171], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 94, 124], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 94, 124, 165, 200], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38, 94, 165, 200], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38, 94, 165, 200], "12": [10, 33, 47, 70, 99, 217], "medic": [10, 113, 124, 203, 215, 220, 232], "ner": [10, 15, 16, 33, 38, 39, 41, 43, 45, 50, 51, 52, 53, 55, 64, 68, 69, 70, 72, 74, 76, 80, 81, 89, 90, 105, 109, 110, 136, 137, 139, 144, 150, 151, 162, 163, 169, 171, 173, 178, 184, 185, 196, 197, 203, 208, 211, 212, 217, 221, 230], "is_med": [10, 12, 33, 35, 203], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 80, 94, 107, 108, 149, 165, 183, 200], "sentenc": [10, 13, 15, 33, 36, 38, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 59, 63, 64, 65, 66, 68, 69, 72, 74, 76, 78, 80, 81, 82, 90, 93, 94, 95, 96, 97, 98, 108, 109, 110, 112, 113, 115, 117, 119, 123, 135, 137, 139, 143, 144, 146, 149, 150, 152, 153, 155, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 190, 196, 199, 200, 201, 203, 207, 208, 211, 212, 217, 221], "token": [10, 33, 41, 42, 43, 44, 45, 47, 48, 50, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 90, 93, 94, 95, 96, 98, 102, 104, 107, 108, 109, 110, 113, 114, 115, 117, 119, 120, 123, 124, 135, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 169, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201, 207, 208, 211, 212, 217, 221], "setmaxepoch": [10, 33, 94, 153, 165, 188, 200], "setrandomse": [10, 33, 94, 97, 102, 117, 165, 200], "setverbos": [10, 33, 43, 94, 165, 200], "setevaluationlogextend": [10, 33], "setincludeconfid": [10, 33, 43, 94, 208], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 94], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 107, 124, 217], "6000": [10, 33], "relu": [10, 24, 33, 124], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 53, 55, 80, 81, 99, 124, 143, 144, 162, 177, 178, 196, 217], "pos_tag": [10, 33, 81, 107, 109, 110, 124, 207], "train_ner_chunk": [10, 33, 107, 124, 217], "depend": [10, 23, 24, 33, 42, 54, 81, 94, 104, 107, 108, 109, 110, 112, 115, 124, 149, 158, 165, 183, 193, 200, 203, 212, 221], "70": [10, 33, 52, 94, 200, 230], "setfroment": [10, 33, 107], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33, 217], "settoent": [10, 33, 107], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33, 217], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 50, 84, 90, 94, 109, 124, 165, 200, 211, 212, 217, 230, 232], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 86, 90, 94, 97, 98, 104, 107, 108, 110, 113, 118, 119, 120, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 214, 219, 232], "spark": [10, 33, 41, 42, 43, 45, 47, 49, 50, 52, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 86, 90, 93, 94, 96, 98, 99, 100, 104, 107, 108, 109, 110, 113, 114, 115, 118, 119, 120, 133, 135, 136, 137, 139, 140, 149, 152, 153, 155, 158, 159, 160, 164, 165, 167, 169, 171, 173, 174, 183, 187, 188, 190, 193, 194, 195, 199, 200, 201, 203, 208, 211, 212, 214, 215, 216, 217, 221, 223, 230, 234], "model_nam": [10, 33, 219], "want": [10, 33, 41, 42, 43, 51, 53, 55, 66, 68, 69, 76, 81, 94, 97, 104, 105, 107, 109, 113, 115, 137, 139, 144, 158, 171, 173, 178, 193, 215], "configur": [10, 33, 41, 68, 88], "path": [10, 33, 41, 43, 45, 49, 52, 53, 55, 57, 58, 66, 68, 80, 86, 90, 94, 96, 98, 104, 107, 113, 124, 137, 139, 143, 144, 146, 153, 162, 165, 167, 171, 173, 177, 178, 180, 188, 196, 200, 201, 203, 207, 208, 211, 212, 217, 218, 219, 220, 221, 223, 229, 230], "rb": [10, 33], "filenam": [10, 25, 33], "doesn": [10, 24, 107], "modulenotfounderror": 10, "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 43, 50, 53, 63, 65, 74, 78, 107, 115, 120, 123, 152, 164, 168, 187, 199, 215, 219, 232], "descript": [10, 33, 41, 50, 104, 113, 146, 158, 180, 193, 212, 217, 232], "everi": [10, 19, 33, 41, 68, 94, 139, 165, 173, 200, 211, 214], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 53, 55, 76, 81, 144, 162, 178, 196], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "int": [12, 24, 35, 41, 42, 43, 50, 53, 57, 58, 63, 64, 65, 69, 70, 72, 76, 81, 82, 86, 94, 97, 99, 102, 104, 107, 108, 109, 113, 115, 117, 119, 120, 123, 124, 127, 153, 160, 168, 188, 195, 207, 208, 211, 212, 215, 217, 220, 223, 230, 232], "lstm_size": [12, 35, 94, 165, 200], "gpu_devic": [12, 35], "nerdl": [12, 35, 203], "arg": [12, 13, 16, 22, 23, 24, 35, 36, 39, 41, 43, 53, 54, 55, 63, 64, 65, 66, 69, 80, 94, 98, 105, 107, 108, 110, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 169, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 199, 200, 201, 211, 214, 216, 217, 221, 224], "folder": [12, 16, 35, 39, 43, 63, 64, 65, 86, 94, 104, 108, 110, 118, 119, 120, 124, 137, 149, 150, 152, 153, 158, 159, 160, 164, 165, 171, 183, 184, 187, 188, 193, 194, 195, 199, 200, 214, 219, 230], "number": [12, 22, 23, 24, 35, 41, 43, 45, 50, 53, 57, 58, 68, 69, 70, 82, 86, 90, 94, 102, 104, 105, 107, 108, 113, 117, 119, 120, 124, 137, 139, 149, 153, 154, 158, 160, 165, 171, 173, 183, 188, 189, 193, 195, 200, 203, 207, 208, 211, 212, 215, 220, 223, 233], "uniqu": [12, 35, 76, 94], "tag": [12, 16, 35, 39, 41, 43, 52, 69, 90, 93, 94, 95, 96, 107, 137, 139, 153, 165, 171, 173, 188, 200, 207, 211, 218, 223, 229, 233], "dimens": [12, 19, 22, 24, 35, 94, 165, 200], "word": [12, 13, 35, 36, 53, 55, 69, 76, 93, 96, 98, 100, 102, 113, 117, 124, 139, 144, 153, 167, 173, 178, 188, 201, 203, 211, 212, 233], "charact": [12, 13, 16, 35, 36, 39, 68, 72, 76, 96, 123, 139, 173, 211, 212], "option": [12, 23, 24, 35, 41, 43, 45, 50, 52, 57, 58, 59, 60, 61, 66, 68, 69, 76, 80, 81, 84, 86, 90, 94, 96, 104, 113, 118, 119, 120, 123, 124, 153, 155, 158, 159, 160, 165, 188, 190, 193, 194, 195, 200, 207, 211, 212, 214, 215, 217, 223, 224, 230], "size": [12, 22, 23, 24, 35, 43, 63, 65, 86, 94, 102, 117, 123, 124, 127, 137, 152, 153, 164, 165, 171, 187, 188, 199, 200, 209], "hidden": [12, 15, 24, 35, 38, 64, 124, 164, 199, 209], "lstm": [12, 22, 24, 35, 94, 165, 200], "disk": [12, 16, 35, 39, 43, 86, 94, 107, 137, 153, 165, 171, 188, 200], "which": [12, 19, 23, 24, 35, 50, 51, 52, 60, 61, 63, 64, 65, 66, 68, 80, 81, 84, 88, 90, 94, 96, 98, 99, 102, 104, 107, 108, 109, 110, 113, 117, 119, 120, 123, 124, 133, 137, 139, 146, 150, 152, 158, 160, 164, 165, 167, 171, 173, 180, 184, 187, 193, 195, 199, 200, 201, 207, 208, 211, 212, 224, 232], "gpu": [12, 23, 35, 169], "being": [12, 13, 24, 35, 36, 69, 115, 123, 124, 139, 173, 232], "datasetencod": [13, 36], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "encod": [13, 16, 36, 39, 98, 107, 108, 110, 124, 149, 150, 153, 167, 183, 184, 188, 201], "shuffl": [13, 36, 153, 188], "lower": [13, 36, 52, 53, 68, 77, 94, 114, 139, 140, 165, 173, 174, 200, 211], "case": [13, 18, 22, 24, 36, 41, 43, 44, 48, 50, 52, 53, 63, 65, 66, 68, 77, 78, 80, 81, 90, 94, 105, 107, 108, 109, 114, 123, 125, 139, 140, 152, 164, 165, 173, 174, 187, 199, 200, 211, 212, 233], "remov": [13, 36, 50, 52, 90, 100, 109, 211, 212, 232], "addit": [13, 24, 36, 45, 94, 109, 113, 119, 146, 153, 165, 180, 188, 200, 232], "white": [13, 36, 48, 52, 70, 78, 85, 90, 96, 125, 209], "space": [13, 23, 24, 36, 207, 211], "process": [13, 24, 36, 43, 48, 52, 63, 64, 65, 69, 77, 78, 85, 86, 88, 90, 94, 96, 104, 107, 108, 113, 114, 117, 119, 120, 123, 124, 125, 137, 140, 146, 149, 152, 158, 164, 165, 171, 174, 180, 183, 187, 193, 199, 200, 203, 208, 211, 212, 217, 230], "get_char_index": [13, 36], "list": [13, 22, 23, 36, 41, 43, 45, 48, 52, 53, 57, 58, 63, 64, 65, 69, 72, 78, 81, 85, 90, 94, 95, 96, 97, 98, 102, 104, 105, 107, 108, 109, 110, 113, 115, 117, 119, 120, 121, 123, 124, 125, 137, 139, 146, 150, 158, 160, 165, 167, 168, 171, 173, 180, 184, 193, 195, 200, 201, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 221, 223, 226, 229, 230, 232, 233, 234], "outpu": [13, 36], "layer": [13, 23, 24, 36, 43, 60, 63, 64, 65, 86, 94, 124, 137, 152, 164, 165, 171, 187, 199, 200], "nermodel": [15, 38, 43, 48, 93, 94, 96, 137, 165, 171, 200], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 47, 68, 73, 105, 113, 139, 146, 173, 180, 217], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 94, 165, 200], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 57, 58, 63, 64, 65, 68, 77, 84, 90, 94, 95, 104, 114, 117, 119, 120, 121, 137, 139, 140, 152, 153, 154, 158, 160, 164, 165, 171, 173, 174, 187, 188, 189, 193, 195, 199, 200, 208], "fill": [15, 38, 97], "l": [15, 38, 69, 72, 217], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 63, 65, 86, 94, 124, 137, 152, 153, 164, 165, 171, 187, 188, 199, 200], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 45, 70, 74, 76, 94, 107, 115, 137, 165, 171, 200], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 53, 55, 80, 81, 144, 178], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 47, 115], "lr": [15, 38, 43, 94, 153, 165, 188, 200], "po": [15, 38, 42, 52, 94, 107, 115, 136, 165, 200, 207, 211, 221], "65": [15, 38, 217], "measur": [15, 38, 50, 123, 168, 232], "20": [15, 24, 38, 70, 86, 99, 123, 153, 188], "get_softmax": [15, 38], "score": [15, 38, 43, 50, 59, 60, 61, 86, 94, 98, 107, 110, 137, 150, 155, 165, 167, 171, 184, 190, 200, 201, 207, 208, 213, 218, 229, 233], "threshold": [15, 38, 52, 53, 69, 76, 81, 90, 96, 98, 107, 108, 113, 139, 173, 207, 208, 218, 229], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "restor": [16, 39, 43, 45, 50, 57, 58, 59, 60, 61, 63, 64, 65, 68, 76, 80, 81, 86, 90, 94, 104, 110, 113, 118, 119, 120, 124, 150, 152, 155, 158, 159, 160, 164, 165, 184, 187, 190, 193, 194, 195, 199, 200], "directori": [16, 39, 41, 214], "save_model": [16, 39], "separ": [16, 39, 41, 50, 68, 72, 90, 94, 96, 107, 109, 123, 135, 165, 200, 203, 207, 223, 226], "variabl": [16, 20, 22, 24, 39, 68, 104, 119, 120, 158, 160, 193, 195], "sentencegroup": [17, 40], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 45, 63, 64, 65, 68, 69, 72, 76, 90, 102, 104, 117, 119, 120, 123, 124, 137, 139, 152, 158, 160, 164, 171, 173, 187, 193, 195, 199, 208, 211, 212], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 76, 94, 107, 203, 217], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 50, 124], "ad": [18, 51, 94, 96, 124, 165, 200, 211, 212, 232], "note": [18, 43, 94, 153, 165, 188, 200, 233], "mai": [18, 22, 24, 44, 53, 66, 68, 77, 81, 94, 109, 114, 124, 140, 168, 174], "effici": [18, 19, 22, 23, 41], "wrapper": [18, 20, 24, 105, 136, 226], "instead": [18, 20, 45, 63, 65, 94, 211], "concaten": [18, 23, 50], "whole": [18, 50], "sequenc": [18, 19, 22, 23, 63, 65, 69, 70, 124, 139, 152, 173, 187], "your": [18, 41, 51, 94, 124, 153, 165, 169, 188, 200, 215], "time": [18, 19, 20, 23, 24, 41, 69, 72, 94, 117, 124, 139, 173, 200, 211, 232], "do": [18, 23, 48, 66, 90, 94, 96, 97, 125, 211, 212], "feed": [18, 63, 65, 94], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 76], "state": [18, 22, 23, 24, 64, 94, 104, 119, 153, 158, 164, 165, 188, 193, 199, 200, 211, 215, 217, 232], "run": [18, 22, 23, 24, 124, 211, 212], "num_proj": [18, 24], "activ": [18, 24, 69, 107, 108, 124, 149, 183, 203, 208, 211, 212], "input_s": [18, 22, 23, 24], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41, 214], "construct": [19, 24, 64, 164, 199], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22], "object": [19, 41, 54, 63, 64, 65, 94, 107, 124, 136, 152, 153, 164, 165, 187, 188, 199, 200], "repres": [19, 24, 41, 50, 51, 52, 69, 90, 113, 124, 139, 173, 230, 232], "A": [19, 22, 23, 24, 47, 50, 53, 55, 63, 64, 65, 66, 69, 80, 81, 86, 90, 93, 94, 95, 96, 98, 102, 104, 107, 108, 110, 113, 117, 119, 120, 124, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 158, 160, 164, 165, 167, 168, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 193, 195, 199, 200, 201, 207, 208, 211, 214, 215, 217, 223, 232], "entir": [19, 22, 63, 65, 94], "expand": 19, "In": [19, 24, 44, 50, 66, 70, 81, 94, 105, 108, 124, 149, 153, 165, 183, 188, 200], "effect": [19, 69, 72, 117, 139, 173], "recurr": [19, 22, 23, 24, 90, 93, 94, 165, 200], "network": [19, 22, 23, 24, 60, 94, 124, 165, 200], "unlik": [19, 22, 104, 158, 193], "subclass": [19, 22, 81, 97, 117, 118, 127, 130, 157, 159, 192, 194], "onc": [19, 94, 102, 108, 117, 149, 183], "put": [19, 33, 76, 153, 188], "loop": [19, 104, 119, 120, 158, 160, 193, 195], "insid": [19, 96, 153, 188], "usual": [19, 94, 96, 110, 113, 150, 184], "lead": [19, 44, 124], "much": [19, 22, 86, 153, 188], "complex": [19, 124], "less": [19, 23, 69, 94, 139, 165, 173, 200], "must": [19, 22, 23, 24, 43, 45, 50, 53, 69, 70, 77, 105, 114, 137, 140, 171, 174], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 63, 64, 65, 94, 152, 164, 165, 169, 187, 199, 200, 203], "v1": 19, "nn": [19, 52, 95], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 94, 165, 200], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22, 68], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": 20, "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 76, 113], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 50, 80, 81, 94, 117, 124, 233], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 48, 94, 200], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 53, 217], "sigmoid": [20, 124], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 68, 72], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": 20, "scheme": [20, 93, 217], "distribut": [21, 43, 86, 94, 107, 113, 133, 137, 146, 153, 165, 171, 180, 188, 200, 203], "origin": [21, 24, 41, 53, 57, 58, 69, 72, 74, 96, 99, 113, 124, 139, 146, 154, 168, 173, 180, 189, 211, 212, 233], "sourc": [21, 24, 53, 55, 63, 64, 65, 66, 69, 72, 77, 90, 94, 96, 98, 107, 108, 110, 114, 121, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 199, 201, 217, 223], "modifi": [21, 90, 93, 96, 212], "chang": [21, 24, 90, 96, 124, 207, 211, 212, 224, 232], "just": [21, 78, 94, 165, 200, 211, 212], "therefor": [21, 24], "all": [21, 24, 41, 50, 51, 53, 57, 58, 63, 65, 68, 69, 72, 81, 86, 94, 96, 100, 102, 105, 107, 109, 113, 117, 121, 123, 124, 133, 139, 146, 154, 165, 173, 180, 189, 200, 211, 212, 219, 221, 230, 234], "function": [21, 41, 43, 53, 60, 61, 85, 96, 113, 124, 125, 135, 202, 217, 232, 234], "enabl": [21, 24, 43, 48, 52, 68, 74, 94, 123, 124, 165, 200], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "add": [22, 24, 44, 94, 96, 99, 100, 105, 109, 123, 165, 200, 202, 207, 211, 212, 215], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 50, 90, 104, 107, 119, 120, 121, 123, 158, 160, 193, 195], "reduc": [22, 24], "scale": [22, 24, 53, 86, 107], "begin": [22, 23, 24, 44, 51, 70, 77, 90, 93, 94, 96, 107, 109, 113, 114, 140, 146, 174, 180, 211, 212, 217, 221], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 33, 41, 43, 50, 52, 53, 66, 76, 80, 90, 94, 96, 97, 100, 104, 113, 117, 118, 123, 127, 130, 137, 153, 157, 158, 159, 165, 171, 188, 192, 193, 194, 200, 203, 207, 208, 211, 212, 213, 214, 217, 219, 223], "faster": [22, 63, 65, 124, 152, 164, 187, 199], "bia": [22, 24, 169, 205], "matric": [22, 24], "long": [22, 24, 53, 104, 158, 168, 193, 217], "scope": [22, 23, 24, 43, 97, 137, 171], "match": [22, 23, 43, 45, 53, 63, 65, 66, 68, 76, 77, 90, 95, 114, 123, 137, 139, 140, 152, 164, 171, 173, 174, 187, 199, 212], "inputs_shap": [22, 24], "short": [22, 24, 53, 104, 158, 193], "term": [22, 24, 43, 57, 58, 68, 69, 72, 124, 137, 139, 154, 168, 171, 173, 189, 211, 212, 215], "lstmblockwrapp": 22, "helper": [22, 23, 134, 215, 219], "housekeep": 22, "altern": 22, "similar": [22, 24, 50, 69, 82, 139, 173, 208, 233], "type": [22, 23, 24, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 76, 77, 78, 80, 81, 86, 90, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 120, 123, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 193, 195, 196, 199, 200, 201, 211, 212, 213, 218, 221, 229, 230, 233], "_call_cel": 22, "properti": [22, 23, 51, 69, 131, 139, 173], "unit": [22, 24, 100, 107, 108, 124, 149, 183], "initial_st": 22, "sequence_length": [22, 23], "d": [22, 24, 41, 69, 215], "tensor": [22, 23, 24, 124], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24, 97, 169, 207, 211, 212, 230], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 54, 84], "_num_unit": 22, "expect": [22, 99, 217], "zero": [22, 23, 98, 110, 150, 167, 184, 201], "ha": [22, 23, 24, 41, 43, 48, 50, 52, 54, 57, 58, 66, 68, 69, 70, 77, 80, 88, 94, 96, 97, 99, 105, 107, 114, 119, 120, 123, 137, 140, 153, 154, 160, 165, 171, 174, 188, 189, 195, 200, 208, 230], "heterogen": 22, "specifi": [22, 24, 43, 57, 58, 69, 70, 81, 86, 90, 93, 94, 110, 121, 123, 137, 150, 153, 154, 165, 171, 184, 188, 189, 200, 217, 219, 232], "each": [22, 23, 24, 41, 43, 45, 50, 57, 58, 68, 80, 81, 86, 90, 94, 97, 104, 105, 109, 110, 123, 124, 137, 139, 150, 153, 154, 165, 171, 173, 184, 188, 189, 200, 203, 207, 208, 211, 212, 213, 219, 221, 230], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 50, 57, 58, 61, 79, 81, 84, 86, 154, 189], "element": [22, 23, 127, 207, 226], "pair": [22, 24, 41, 52, 81, 90, 96, 105, 107, 109, 110, 150, 184], "final": [22, 23, 53, 123], "cell_stat": 22, "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 50, 51, 53, 60, 69, 82, 84, 94, 96, 153, 165, 188, 200, 203, 207, 211, 221, 230], "both": [22, 23, 24, 44, 64, 66, 68, 69, 72, 80, 81, 94, 100, 107, 139, 164, 165, 168, 173, 199, 200, 203, 211, 212, 215], "than": [22, 43, 50, 52, 69, 94, 97, 104, 113, 139, 158, 165, 173, 193, 200], "abov": [22, 117, 233], "consist": [22, 24, 50, 69, 72, 81, 110, 139, 150, 173, 184, 207, 208, 211], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 60, 94, 124, 165, 200], "stack": [23, 24], "combin": [23, 24, 68, 80, 96, 97, 105, 168, 211, 212], "backward": 23, "next": [23, 88, 96, 99], "bidirectional_rnn": 23, "doe": [23, 24, 90, 94, 165, 200, 219], "share": [23, 24, 53, 81], "between": [23, 24, 41, 43, 50, 51, 59, 60, 61, 69, 80, 81, 82, 94, 95, 96, 100, 107, 108, 109, 110, 113, 123, 124, 137, 139, 149, 150, 153, 155, 165, 171, 173, 183, 184, 188, 190, 200, 208, 211, 212, 215, 217, 226, 232, 233], "direct": [23, 24, 41, 107, 108, 109, 124, 149, 183], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 50, 203], "1303": 23, "5778": 23, "instanc": [23, 41, 81, 107, 108, 113, 131, 149, 183, 203], "one": [23, 24, 41, 42, 43, 63, 65, 79, 80, 81, 86, 88, 90, 94, 96, 105, 109, 113, 123, 137, 165, 171, 200, 207, 211, 212, 215, 219], "per": [23, 24, 41, 43, 45, 63, 65, 69, 76, 86, 94, 96, 107, 137, 153, 165, 171, 188, 200, 218, 229, 233], "nest": 23, "appropri": [23, 41, 212], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 50, 68, 69, 72, 81, 90, 94, 96, 104, 105, 119, 120, 139, 158, 160, 165, 173, 193, 195, 200, 203, 208, 211, 212], "correspond": [23, 50, 59, 60, 61, 69, 76, 80, 139, 155, 173, 190, 207, 208, 211, 212, 213, 232], "either": [23, 45, 50, 68, 77, 93, 105, 107, 113, 114, 140, 153, 174, 188, 224], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": 23, "cell_bw": 23, "empti": [23, 77, 81, 86, 90, 94, 105, 107, 113, 114, 140, 165, 174, 200, 217], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 45, 57, 58, 94, 154, 165, 189, 200, 211, 212, 221], "parallel": 23, "those": [23, 41, 50, 70, 96, 109], "tempor": 23, "trade": 23, "off": [23, 94, 137, 153, 165, 171, 188, 200], "take": [23, 63, 65, 69, 80, 84, 86, 105, 117, 123, 131, 139, 152, 168, 173, 187, 207, 208, 223], "while": [23, 41, 44, 69, 94, 99, 113, 117, 124, 146, 165, 180, 200, 203], "smaller": [23, 124], "longer": [23, 90, 124, 208], "bit": [23, 63, 65, 152, 187], "becaus": [23, 78, 97, 117, 118, 127, 130, 157, 159, 192, 194, 217], "avoid": [23, 24, 41, 44, 50, 203, 208, 211, 212], "transpos": 23, "howev": [23, 52, 94, 165, 200], "most": [23, 50, 81, 94, 123, 165, 200, 208], "major": 23, "so": [23, 24, 61, 78, 94, 153, 165, 188, 200], "accept": [23, 153, 188], "emit": [23, 88, 94, 96], "form": [23, 57, 58, 76, 81, 94, 100, 105, 107, 153, 154, 165, 188, 189, 200], "transpar": [23, 209], "swap": [23, 211, 212], "produc": [23, 24, 90, 96], "infer": [23, 24, 94, 110, 124, 150, 165, 184, 200], "back": 23, "prop": 23, "would": [23, 123, 153, 188], "typic": 23, "fit": [23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 77, 78, 80, 81, 84, 86, 90, 94, 95, 98, 99, 100, 104, 105, 107, 108, 109, 110, 113, 114, 119, 120, 137, 139, 140, 144, 146, 149, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 180, 183, 187, 188, 189, 193, 195, 196, 199, 200, 201, 230], "veri": [23, 53, 69, 94, 123, 139, 165, 173, 200], "minim": [23, 82, 98, 107, 108, 110, 149, 150, 167, 183, 184, 201], "perform": [23, 24, 43, 68, 69, 72, 88, 94, 96, 104, 109, 117, 118, 119, 124, 139, 158, 159, 165, 173, 193, 194, 200, 203, 218, 229, 233], "penalti": [23, 88, 94, 96], "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "non": [24, 43, 81], "peephol": 24, "pdf": [24, 230], "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 86, 94, 107, 113, 124, 137, 153, 165, 171, 188, 200], "continu": [24, 88, 96, 113, 146, 180], "iet": 24, "850": 24, "855": 24, "1999": [24, 99], "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 94, 165, 200], "larg": [24, 63, 65, 94, 117, 123, 152, 164, 165, 187, 199, 200], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": [24, 59, 155, 190], "al": [24, 59, 155, 190], "search": [24, 43, 76, 94, 113, 137, 146, 165, 171, 180, 200], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41, 124], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 53, 69, 105, 123, 139, 173, 207, 211, 212, 217], "intern": [24, 94, 96, 104, 113, 119, 131, 158, 165, 169, 193, 200, 214, 215, 217, 232], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 45, 51, 52, 53, 55, 57, 58, 66, 69, 70, 77, 84, 86, 90, 93, 94, 107, 109, 113, 114, 115, 120, 121, 123, 124, 137, 139, 140, 143, 144, 146, 153, 154, 162, 165, 171, 173, 174, 177, 178, 180, 188, 189, 196, 200, 202, 203, 208, 211, 212, 215, 216, 217, 221, 223], "c_state": 24, "m_state": 24, "after": [24, 45, 57, 58, 63, 64, 65, 94, 99, 104, 107, 152, 154, 158, 164, 187, 189, 193, 199, 211], "read": [24, 43, 52, 66, 68, 84, 90, 96, 123, 153, 188, 207, 211, 212, 217], "previou": [24, 233], "wa": [24, 41, 43, 53, 55, 70, 72, 74, 81, 105, 123, 137, 144, 153, 162, 171, 178, 188, 196], "here": 24, "cannot": [24, 224], "via": [24, 48, 52], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 45, 50, 72, 76, 94, 102, 117, 123, 165, 200, 220, 226], "sainath": 24, "bo": 24, "li": [24, 123], "pattern": [24, 41, 68, 69, 95, 100, 104, 123, 139, 158, 168, 173, 193, 211, 221], "v": [24, 45, 69, 105, 218, 229], "convolut": 24, "lvcsr": 24, "task": [24, 41, 63, 64, 65, 110, 117, 150, 152, 164, 184, 187, 199, 217, 221], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": [24, 207], "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 50, 86, 104, 207], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "affect": [24, 50, 119, 120, 160, 195], "real": [24, 94, 165], "onlin": 24, "system": [24, 68, 215], "two": [24, 50, 52, 54, 68, 69, 78, 79, 90, 96, 105, 139, 173, 232], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 57, 58, 113, 117, 208, 211], "srivastava": 24, "j": 24, "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 69, 113, 124, 139, 173, 211, 212], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": [24, 168], "ugrnncel": 24, "updat": [24, 94, 200, 207, 219, 221, 232], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": 24, "determin": [24, 48, 50, 51, 52, 78, 82, 90, 107, 109, 110, 123, 124, 125, 150, 184], "whether": [24, 43, 48, 50, 51, 52, 53, 54, 57, 58, 63, 65, 66, 68, 69, 72, 76, 77, 78, 82, 86, 90, 94, 96, 100, 102, 104, 105, 107, 109, 110, 113, 114, 117, 119, 120, 121, 123, 124, 125, 137, 139, 140, 146, 150, 152, 153, 154, 158, 160, 164, 165, 169, 171, 173, 174, 180, 184, 187, 188, 189, 193, 195, 199, 200, 203, 212, 218, 224, 226], "integr": 24, "instantan": 24, "idea": [24, 124], "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": [24, 81, 100, 123, 218, 229, 233], "design": 24, "improv": [24, 44, 94, 104, 110, 119, 124, 150, 158, 165, 184, 193, 200], "flow": [24, 124], "through": [24, 41, 66, 221], "dimension": 24, "y": [24, 72, 74], "To": [24, 43, 45, 48, 52, 63, 64, 65, 66, 73, 107, 113, 152, 164, 187, 199, 217], "achiev": [24, 50, 94, 165, 200], "subsequ": [24, 51, 53], "deepli": 24, "best": [24, 94, 153, 165, 188, 200, 218], "new_i": 24, "equal": [24, 41, 52, 80, 81, 90, 94, 117, 165, 200], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 97, 117, 118, 127, 129, 130, 157, 159, 192, 194], "execut": [24, 41, 69, 72, 139, 173], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 113, 146, 180], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": [24, 43, 86, 94, 109, 131, 137, 153, 165, 171, 188, 200], "second": [24, 49, 69, 94, 105, 165, 200, 214], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 51, 69, 95, 105], "g": [24, 53, 63, 64, 65, 81, 94, 104, 105, 109, 113, 120, 137, 146, 152, 158, 164, 165, 171, 180, 187, 193, 199, 200, 203, 207, 211, 212, 233], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 63, 64, 65, 93, 94, 95, 96, 98, 104, 107, 117, 119, 164, 165, 167, 199, 200, 201, 207, 233], "ginsburg": 24, "trick": 24, "brief": [24, 50], "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 95], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 94, 165, 200], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "ensu": 24, "flavor": 24, "replac": [24, 43, 66, 68, 69, 70, 71, 72, 89, 90, 96, 100, 139, 173, 207, 211, 212], "multipl": [24, 42, 81, 110, 150, 184], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 84, 85, 86, 90, 93, 94, 95, 98, 99, 100, 104, 107, 108, 109, 110, 113, 114, 119, 120, 123, 135, 137, 139, 140, 144, 149, 150, 152, 153, 154, 158, 160, 162, 164, 165, 167, 171, 173, 174, 178, 183, 184, 187, 188, 189, 193, 195, 196, 199, 200, 201, 203, 208, 211, 212, 213, 231], "gain": 24, "boolean": [24, 41, 51, 69, 90, 97, 124, 218, 229], "exist": [24, 41, 94, 107, 113, 146, 180, 219], "alreadi": [24, 41, 57, 58, 94, 107, 113, 146, 154, 165, 180, 189, 200], "error": [24, 88, 94, 96, 165, 200, 207, 208, 224], "string": [24, 48, 52, 70, 76, 77, 85, 90, 95, 100, 105, 114, 120, 124, 127, 140, 153, 174, 188, 203, 207, 209, 211, 212, 216, 217, 219, 226], "mistak": 24, "keyword": [24, 42, 50, 89, 115, 227], "argument": [24, 107, 168], "weightnormlstmcel": 24, "norm": 24, "adapt": 24, "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 53, 55, 121, 144, 178, 233], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 124, 137, 153, 171, 188], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 43, 50, 66, 80, 81, 94, 99, 165, 200, 208, 211, 212], "act": [24, 69, 153, 188], "w": 24, "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 44, 47, 52, 53, 55, 66, 68, 69, 76, 80, 81, 90, 93, 94, 96, 100, 108, 123, 139, 144, 149, 153, 165, 173, 178, 183, 188, 200, 207, 211, 212, 213, 214, 217], "respect": [24, 41, 232], "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": [24, 104, 124, 158, 193], "see": [24, 48, 63, 64, 65, 73, 77, 94, 96, 105, 107, 108, 113, 114, 140, 149, 152, 153, 164, 165, 174, 183, 187, 188, 199, 200, 214, 230], "its": [24, 69, 72, 74, 81, 90], "own": [24, 94, 153, 165, 188, 200, 215], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 45, 48, 52, 68, 123, 124, 139, 173, 203, 221], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41, 100, 107], "analysi": [24, 109, 153, 188], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 48, 94, 100, 137, 171], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": [24, 61, 123, 124], "1807": 24, "08518": 24, "mark": [24, 43, 45, 50, 70, 105, 137, 171], "collier": 24, "joeran": 24, "beel": 24, "turn": [24, 104, 211, 212], "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 69, 72, 74, 94, 104, 139, 158, 165, 173, 193, 200, 211], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 49, 52, 66, 84, 85, 90, 97, 99, 115, 121, 123, 135], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 99, 168], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 45], "id": [24, 41, 49, 69, 70, 77, 102, 104, 113, 117, 119, 120, 135, 139, 140, 158, 160, 173, 174, 193, 195, 215, 217, 221], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": [24, 139], "goe": 24, "contract": [24, 211, 212], "map": [24, 53, 54, 55, 66, 68, 69, 73, 81, 94, 96, 107, 108, 113, 120, 131, 139, 143, 144, 146, 162, 165, 173, 177, 178, 180, 196, 200, 207, 215, 217, 226, 232], "linear": [24, 63, 64, 65, 124, 152, 164, 187, 199], "decoupl": 24, "tf_graph_1x": [33, 217], "manipul": 41, "json": [41, 52, 53, 55, 66, 68, 135, 139, 143, 144, 162, 173, 177, 178, 196, 203, 208, 211, 212, 217, 221, 223], "export": [41, 217, 221], "layout": 41, "annotationlab": 41, "interfac": [41, 113], "john": [41, 70, 72, 74, 105, 169], "snow": [41, 169], "tool": 41, "multi": [41, 53, 63, 64, 65, 68, 86, 107, 152, 153, 164, 187, 188, 199], "modal": 41, "team": 41, "collabor": 41, "ml": [41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 72, 77, 78, 80, 81, 86, 90, 93, 94, 95, 96, 99, 100, 107, 108, 114, 137, 139, 140, 144, 146, 149, 152, 153, 154, 162, 164, 165, 171, 173, 174, 178, 180, 183, 187, 188, 189, 196, 199, 200, 202, 230], "programmat": 41, "conll": [41, 94, 165, 200, 203, 207, 208, 211, 212, 217, 221], "excel": 41, "classif": [41, 86, 89, 152, 153, 154, 164, 169, 187, 188, 189, 199, 203, 232], "preannot": 41, "upload": 41, "interact": [41, 207, 215], "up": [41, 124, 153, 188, 212], "delet": [41, 232], "edit": [41, 53], "usag": [41, 94, 96, 100, 104, 153, 158, 165, 188, 193, 200], "tutori": 41, "set_credenti": 41, "usernam": [41, 215], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": [41, 169], "client": 41, "get_all_project": 41, "visibl": [41, 69, 139, 173], "rtype": [41, 221], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 68, 69, 70, 94, 97, 102, 117, 119, 120, 139, 153, 160, 165, 173, 188, 195, 200, 211, 212, 215, 223, 230], "sequenti": [41, 90], "sampl": [41, 70, 102, 104, 117, 119, 120, 158, 160, 193, 195, 203, 207, 211, 212, 220], "show": [41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 90, 93, 98, 99, 100, 104, 105, 107, 108, 109, 110, 114, 119, 120, 137, 139, 140, 144, 149, 152, 153, 158, 160, 162, 164, 167, 171, 173, 174, 178, 183, 187, 188, 193, 195, 196, 199, 201, 209, 214, 217, 230], "guidelin": 41, "delete_project": 41, "confirm": [41, 78], "set_project_config": 41, "classification_label": 41, "ner_label": [41, 93, 217], "assertion_label": [41, 217, 221], "relations_label": 41, "By": [41, 50, 81, 94, 109, 165, 200], "multiclass": [41, 86, 107], "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "custom": [41, 43, 45, 66, 68, 104, 107, 108, 113, 119, 120, 123, 134, 135, 139, 158, 160, 170, 173, 193, 195, 209, 211], "titl": [41, 51, 211, 212, 221], "increment": [41, 123], "offset": [41, 43], "delete_task": 41, "task_id": [41, 217], "get_annot": 41, "output_nam": 41, "save_dir": [41, 230], "write": [41, 121, 207, 230], "get_conll_data": 41, "input_json_path": [41, 221], "exported_conl": 41, "ground_truth": [41, 113, 221], "excluded_label": [41, 217, 221], "excluded_task_id": [41, 221], "excluded_task_titl": [41, 221], "regex_pattern": [41, 211, 221], "io": [41, 211, 212, 230], "select": [41, 43, 44, 48, 50, 51, 53, 55, 63, 64, 65, 68, 69, 70, 72, 73, 81, 82, 90, 98, 104, 105, 107, 108, 113, 119, 120, 137, 139, 144, 149, 152, 158, 160, 162, 164, 167, 171, 173, 178, 183, 187, 193, 195, 196, 199, 201, 215, 221, 223], "ground": [41, 113, 208, 221], "truth": [41, 113, 208, 221], "complet": [41, 221], "latest": [41, 221], "exclud": [41, 45, 94, 165, 200, 217, 221], "irrelev": [41, 221], "regex": [41, 42, 48, 49, 52, 66, 68, 69, 85, 90, 95, 115, 123, 139, 173, 211, 221], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "included_task_id": 41, "seed": [41, 69, 70, 72, 94, 97, 102, 117, 119, 120, 139, 153, 160, 165, 173, 188, 195, 200, 215, 223], "panda": [41, 70, 207, 208, 212, 221], "relev": [41, 50, 217], "assign": [41, 211, 212, 213], "strategi": [41, 69, 90, 105, 123, 207], "occurr": [41, 94, 113, 165, 200], "unannot": 41, "count": [41, 94, 203, 211, 212], "fraction": 41, "absolut": 41, "dictionari": [41, 45, 53, 55, 66, 68, 81, 90, 96, 98, 107, 108, 110, 115, 120, 139, 143, 144, 150, 162, 167, 173, 177, 178, 184, 196, 201, 203, 207, 211, 212, 213, 223], "entity_label": [41, 69, 135, 139, 173], "sample_weight_or_count": 41, "max": [41, 43, 45, 53, 58, 63, 64, 65, 117, 119, 137, 152, 154, 164, 171, 187, 189, 199, 209], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "doc_wise_annot": [41, 221], "were": [41, 54, 94, 165, 200, 221, 232], "discard": [41, 98, 167, 201], "rest": [41, 48, 52, 69, 78, 90, 96, 125, 208], "plausibl": 41, "possibl": [41, 42, 43, 48, 50, 52, 53, 54, 58, 66, 69, 81, 85, 86, 90, 96, 100, 107, 109, 115, 121, 123, 124, 137, 154, 171, 189, 211, 212], "neg": [41, 43, 104, 110, 158, 193], "entity1": [41, 105, 107, 108, 149, 183], "entity2": [41, 105, 107, 108, 149, 183], "wise": [41, 94, 221], "done": [41, 45, 94, 153, 165, 188, 200, 212], "cross": [41, 208], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42, 74, 212], "full_pipelin": 41, "df": [41, 99, 136, 202, 212, 215, 216, 217], "collect": [41, 84, 94, 165, 200], "documentassembl": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 90, 93, 94, 95, 96, 99, 100, 107, 108, 109, 110, 113, 114, 115, 119, 120, 137, 139, 140, 144, 146, 149, 152, 153, 160, 162, 164, 165, 171, 173, 174, 178, 180, 183, 187, 188, 195, 196, 199, 200, 221], "older": [41, 69], "offeset": 41, "overrit": 41, "upload_preannot": 41, "get_iaa_metr": 41, "conll_dir": 41, "annotator_nam": 41, "set_ref_annot": 41, "return_nerdlmetr": 41, "results_token_bas": 41, "iaa": 41, "metric": [41, 43, 94, 203, 211, 212, 213, 218, 229, 233], "present": [41, 43, 47, 48, 90, 93, 96, 113, 137, 146, 171, 180, 232], "comparison": [41, 80, 212], "made": [41, 90, 124], "full": [41, 53, 100, 104, 158, 168, 193], "partial": [41, 53, 168], "nerdlmetr": [41, 136], "report": [41, 208, 211, 212, 220], "review_annot": 41, "conll_path": [41, 207, 208, 211, 212], "ner_model_path": [41, 94, 165, 200], "review": 41, "compar": [41, 48, 50, 85, 203, 212], "conn_path": 41, "chunk_based_comparison_df": 41, "cuhunk": 41, "token_based_comparision_df": 41, "chunk_frequency_df": 41, "metrics_result": 41, "annotationmerg": 42, "classnam": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 123, 127, 129, 130, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201], "java_model": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 86, 90, 93, 94, 95, 96, 97, 98, 99, 104, 105, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 123, 127, 130, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201], "merg": [42, 57, 58, 89, 93, 112, 154, 169, 189], "inputtyp": [42, 115], "wordpiec": [42, 115], "sentence_embed": [42, 76, 80, 81, 113, 115, 146, 153, 180, 188], "categori": [42, 57, 58, 59, 60, 61, 63, 65, 78, 86, 107, 108, 110, 115, 149, 150, 152, 153, 154, 155, 170, 183, 184, 187, 188, 189, 190, 232], "sentiment": [42, 115, 153, 188], "named_ent": [42, 64, 93, 94, 95, 96, 98, 115, 164, 165, 167, 199, 200, 201, 217], "labeled_depend": [42, 53, 55, 115, 143, 144, 162, 177, 178, 196], "languag": [42, 43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 76, 77, 80, 81, 86, 90, 94, 98, 104, 107, 108, 110, 113, 114, 115, 118, 119, 120, 135, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 214, 215, 217, 219, 223], "empty_data": [42, 70, 74, 113], "createdatafram": [42, 43, 47, 49, 50, 52, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 90, 93, 94, 96, 98, 99, 100, 104, 107, 108, 110, 113, 114, 115, 119, 120, 137, 139, 140, 149, 152, 153, 158, 160, 164, 165, 167, 171, 173, 174, 183, 187, 188, 193, 195, 199, 200, 201], "todf": [42, 43, 47, 49, 50, 52, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 81, 90, 93, 94, 96, 98, 99, 100, 104, 107, 108, 109, 110, 113, 114, 115, 119, 120, 137, 139, 140, 149, 152, 153, 158, 160, 164, 165, 167, 171, 173, 174, 183, 187, 188, 193, 195, 199, 200, 201], "document1": 42, "document2": [42, 70], "setinputtyp": [42, 115], "all_doc": 42, "pipelinemodel": [42, 57, 58, 94, 153, 165, 188, 200, 202, 203, 211, 212, 230], "setstag": [42, 44, 47, 50, 51, 53, 55, 57, 58, 63, 64, 65, 70, 77, 78, 80, 81, 84, 86, 94, 98, 110, 114, 115, 140, 144, 152, 153, 154, 162, 164, 165, 167, 174, 178, 187, 188, 189, 196, 199, 200, 201], "lp": 42, "lightpipelin": [42, 74, 212, 221], "doc": [42, 113, 146, 180, 203, 207], "replic": 42, "23": [42, 49, 168], "inputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 123, 127, 129, 130, 144, 178], "outputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 86, 90, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 123, 127, 129, 130, 144, 178], "skiplpinputcolsvalid": [42, 53, 84, 115, 129, 130], "filter": [42, 48, 52, 54, 78, 85, 90, 96, 102, 109, 115, 117, 125, 208, 211, 212, 214, 217, 219], "algorithm": [43, 45, 50, 57, 58, 68, 123, 137, 154, 171, 189, 211], "absent": [43, 48, 137, 171], "hypothet": [43, 48, 137, 171], "condit": [43, 94, 137, 165, 171, 200, 232], "associated_with_other_person": [43, 137, 171], "etc": [43, 81, 105, 113, 137, 146, 171, 180], "pretrain": [43, 45, 50, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 76, 78, 80, 81, 86, 90, 93, 94, 95, 96, 97, 98, 104, 107, 108, 109, 110, 113, 115, 118, 119, 120, 135, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 169, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 219], "assertiondlmodel": [43, 48, 137, 171], "startcol": [43, 45, 77, 114, 137, 140, 171, 174], "endcol": [43, 45, 137, 171], "batchsiz": [43, 63, 65, 86, 94, 108, 137, 149, 152, 153, 164, 165, 171, 183, 187, 188, 199, 200], "optim": [43, 86, 94, 137, 165, 171, 200, 211], "learningr": [43, 86, 137, 171], "rate": [43, 86, 94, 137, 153, 165, 171, 188, 200, 217], "maxsentlen": [43, 137, 171], "graphfold": [43, 94, 124, 137, 165, 171, 200], "extern": [43, 90, 94, 96, 124, 137, 165, 171, 200], "hdf": [43, 86, 94, 107, 113, 137, 146, 153, 165, 171, 180, 188, 200, 219], "dbf": [43, 86, 94, 107, 113, 137, 146, 153, 165, 171, 180, 188, 200], "cloud": [43, 86, 94, 107, 113, 137, 146, 153, 165, 171, 180, 188, 200], "storag": [43, 86, 94, 107, 113, 137, 146, 153, 165, 171, 180, 188, 200], "s3": [43, 76, 86, 94, 107, 113, 137, 146, 153, 165, 171, 180, 188, 200, 214, 219], "graphfil": [43, 94, 124, 137, 165, 171, 200], "happen": [43, 94, 124, 137, 165, 171, 200], "configprotobyt": [43, 63, 64, 65, 94, 104, 117, 119, 120, 137, 152, 153, 158, 160, 164, 165, 171, 187, 188, 193, 195, 199, 200], "configproto": [43, 63, 64, 65, 94, 104, 117, 119, 120, 137, 152, 153, 158, 160, 164, 165, 171, 187, 188, 193, 195, 199, 200], "serial": [43, 63, 64, 65, 94, 104, 117, 119, 120, 137, 152, 153, 158, 160, 164, 165, 171, 187, 188, 193, 195, 199, 200, 226], "byte": [43, 63, 64, 65, 94, 104, 117, 119, 120, 137, 152, 153, 158, 160, 164, 165, 171, 187, 188, 193, 195, 199, 200], "config_proto": [43, 137, 171], "serializetostr": [43, 137, 171], "validationsplit": [43, 86, 94, 137, 153, 165, 171, 188, 200], "proport": [43, 94, 137, 153, 165, 171, 188, 200, 211, 212, 213], "against": [43, 50, 94, 137, 153, 165, 171, 188, 200, 203, 212], "testdataset": [43, 94, 137, 165, 171, 200], "statist": [43, 94, 137, 165, 171, 200], "dure": [43, 69, 72, 76, 88, 94, 108, 137, 139, 153, 165, 171, 173, 188, 200, 212, 213, 215], "includeconfid": [43, 94, 137, 165, 171, 200], "confid": [43, 52, 53, 55, 59, 60, 61, 86, 90, 94, 96, 98, 107, 110, 113, 137, 143, 144, 150, 155, 162, 165, 167, 171, 177, 178, 184, 190, 196, 200, 201, 208], "metadata": [43, 44, 49, 50, 52, 66, 69, 76, 81, 85, 90, 93, 94, 97, 98, 99, 107, 108, 109, 110, 115, 121, 123, 137, 149, 165, 167, 171, 183, 200, 201], "enableoutputlog": [43, 94, 137, 153, 165, 171, 188, 200], "outputlogspath": [43, 86, 94, 137, 153, 165, 171, 188, 200], "won": [43, 86, 94, 107, 137, 153, 165, 171, 188, 200], "level": [43, 50, 51, 52, 66, 90, 94, 137, 153, 165, 171, 188, 200, 217, 232], "scopewindow": [43, 137, 171], "window": [43, 89, 94, 117, 137, 165, 169, 171, 200], "express": [43, 48, 52, 68, 123, 124, 137, 139, 171, 173], "document_assembl": [43, 44, 45, 49, 57, 58, 95, 98, 99, 104, 119, 120, 137, 154, 158, 160, 167, 171, 189, 193, 195, 201, 221], "doc2chunk": [43, 70, 77, 99, 114, 140, 174], "setchunkcol": [43, 45, 77, 95, 114, 137, 140, 171, 174], "setstartcolbytokenindex": [43, 77], "setfailonmiss": [43, 77], "setlowercas": [43, 53, 77, 100], "wordembeddingsmodel": [43, 45, 50, 53, 55, 68, 70, 72, 74, 76, 80, 81, 90, 93, 94, 95, 96, 107, 108, 109, 110, 137, 139, 144, 149, 162, 165, 171, 173, 178, 183, 196, 200], "embeddings_clin": [43, 45, 50, 53, 55, 68, 70, 72, 74, 81, 90, 93, 95, 96, 107, 108, 109, 110, 137, 139, 144, 149, 162, 171, 173, 178, 183, 196], "en": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 74, 76, 78, 80, 81, 86, 90, 93, 94, 95, 96, 97, 98, 104, 107, 108, 109, 110, 113, 118, 119, 120, 135, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 215, 219, 223, 231], "setcasesensit": [43, 45, 57, 58, 63, 64, 65, 66, 78, 95, 108, 113, 115, 123, 125, 137, 146, 152, 154, 164, 171, 180, 187, 189, 199], "012": [43, 137, 171], "015": [43, 137, 171], "setscopewindow": [43, 137, 171], "assertionpipelin": [43, 45, 48, 137, 146, 171, 180], "srt": [43, 124], "setgraphfil": [43, 94, 124], "setconfigprotobyt": [43, 63, 64, 65, 94, 104, 117, 119], "conf": [43, 94], "contai": 43, "colnam": 43, "start_col": 43, "end_col": [43, 107], "float": [43, 50, 52, 53, 57, 58, 69, 76, 80, 81, 82, 84, 86, 90, 94, 96, 98, 107, 108, 113, 153, 188, 207, 208, 211, 212, 213, 218, 229], "maximum": [43, 53, 57, 58, 94, 102, 104, 109, 113, 117, 119, 120, 123, 124, 153, 154, 158, 160, 165, 188, 189, 193, 195, 200], "settestdataset": 43, "read_a": [43, 52, 66, 68, 90, 96], "reada": [43, 52, 66, 68, 90, 96], "waht": 43, "left": [43, 53, 107, 108, 109, 149, 183], "right": [43, 50, 53, 80, 107, 108, 109, 149, 183], "dl": [43, 124], "approach": [43, 50, 53, 55, 129, 137, 143, 144, 162, 171, 177, 178, 196], "targetnerlabel": [43, 45, 137, 171], "common": [43, 48, 52, 53, 55, 57, 58, 66, 68, 69, 72, 77, 80, 81, 84, 86, 90, 93, 94, 96, 99, 107, 108, 113, 114, 137, 139, 140, 144, 146, 149, 154, 162, 165, 169, 171, 173, 174, 178, 180, 183, 189, 196, 200], "fever": [43, 48, 137, 171], "sore": [43, 48, 137, 171], "throat": [43, 48, 137, 171], "stomach": [43, 48, 52, 137, 171], "pain": [43, 48, 52, 113, 137, 171], "she": [43, 123, 137, 171, 217], "maintain": [43, 137, 171], "epidur": [43, 48, 137, 171], "pca": [43, 48, 137, 171], "sentencedetector": [43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 66, 68, 72, 76, 78, 80, 81, 90, 93, 94, 95, 96, 98, 109, 110, 113, 115, 137, 139, 144, 146, 153, 162, 165, 171, 173, 178, 180, 188, 196, 200], "medicalnermodel": [43, 50, 53, 55, 68, 70, 72, 74, 81, 90, 93, 94, 95, 96, 107, 108, 109, 110, 137, 139, 144, 149, 162, 165, 171, 173, 178, 183, 196, 200], "ner_clin": [43, 109, 110, 137, 171], "nerconvert": [43, 48, 50, 68, 70, 72, 76, 80, 90, 93, 96, 107, 108, 109, 110, 137, 139, 149, 171, 173, 183], "ner_chunk": [43, 48, 50, 53, 55, 68, 70, 72, 74, 76, 80, 81, 89, 92, 93, 96, 105, 107, 108, 109, 110, 135, 137, 139, 144, 149, 162, 171, 173, 178, 183, 196, 211, 212, 230], "clinicalassert": [43, 48, 137, 171], "selectexpr": [43, 44, 47, 48, 50, 52, 53, 55, 66, 73, 76, 77, 78, 80, 81, 90, 93, 98, 99, 100, 107, 108, 109, 110, 114, 137, 140, 144, 149, 153, 167, 171, 174, 178, 183, 188, 201], "truncat": [43, 44, 47, 48, 50, 52, 53, 55, 63, 64, 65, 66, 68, 70, 72, 73, 77, 78, 80, 81, 98, 100, 104, 105, 107, 108, 109, 110, 114, 119, 120, 124, 137, 139, 140, 144, 149, 152, 153, 158, 160, 162, 164, 167, 171, 173, 174, 178, 183, 187, 188, 193, 195, 196, 199, 201], "entityassertioncasesensit": 43, "bytearrai": 43, "setentityassertioncasesensit": 43, "setentityassert": 43, "assertionent": 43, "entityassert": 43, "earlier": 43, "replacelabel": [43, 96], "getentityassert": 43, "setreplacelabel": [43, 96], "later": [43, 76], "getreplacelabel": 43, "assertion_jsl_aug": 43, "lang": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 76, 80, 81, 86, 90, 94, 97, 98, 104, 107, 108, 110, 113, 118, 119, 120, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 214], "remote_loc": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 86, 90, 94, 97, 98, 104, 107, 108, 110, 113, 118, 119, 120, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 214, 219], "download": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 86, 90, 94, 98, 104, 107, 108, 110, 113, 118, 119, 120, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 214, 219, 220], "load": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 76, 80, 81, 86, 90, 94, 98, 104, 108, 110, 113, 118, 119, 120, 139, 143, 144, 149, 150, 152, 153, 155, 158, 159, 160, 162, 164, 165, 167, 173, 177, 178, 183, 184, 187, 188, 190, 193, 194, 195, 196, 199, 200, 201, 203, 214, 217], "remot": [43, 45, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 76, 80, 81, 86, 90, 94, 98, 104, 107, 108, 110, 113, 118, 119, 120, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 155, 158, 159, 160, 164, 165, 167, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 214, 219], "resourc": [43, 45, 49, 50, 51, 57, 58, 59, 60, 61, 68, 76, 80, 81, 84, 86, 90, 94, 96, 104, 113, 115, 118, 119, 120, 153, 155, 158, 159, 160, 165, 188, 190, 193, 194, 195, 200, 214], "Will": [43, 45, 50, 57, 58, 59, 60, 61, 68, 76, 80, 81, 86, 90, 104, 113, 118, 119, 120, 155, 158, 159, 160, 190, 193, 194, 195, 200], "repositori": [43, 45, 50, 57, 58, 59, 60, 61, 68, 76, 80, 81, 86, 90, 104, 113, 118, 119, 120, 155, 158, 159, 160, 190, 193, 194, 195, 200], "assertionchunkconvert": 44, "some": [44, 68, 69, 72, 81, 94, 139, 165, 173, 200, 232], "issu": [44, 68, 95, 207, 208], "indic": [44, 50, 86, 90, 104], "robust": [44, 169, 205], "wai": [44, 50], "reliabl": 44, "chunktextcol": 44, "chunkbegincol": 44, "chunkendcol": 44, "outputtokenbegincol": 44, "outputtokenendcol": 44, "convert": [44, 47, 49, 68, 77, 96, 100, 114, 115, 139, 140, 173, 174, 207, 211, 212, 216], "setchunktextcol": 44, "setchunkbegincol": 44, "char_begin": 44, "setchunkendcol": 44, "char_end": 44, "setoutputtokenbegincol": 44, "token_begin": 44, "setoutputtokenendcol": 44, "token_end": 44, "minni": 44, "57": 44, "63": [44, 47, 90, 93, 96], "62": [44, 72, 74], "pcp": [44, 68, 73, 139, 173], "31": [44, 49, 109, 217], "34": [44, 47, 217], "33": 44, "inputcol": [44, 63, 65, 84, 123, 124, 134, 153, 188], "outputcol": [44, 84, 134, 230], "col": [44, 49, 52, 73, 76, 107, 113, 146, 180], "setparam": [44, 70, 77, 84, 114, 130], "assertionlogregapproach": 45, "regress": [45, 57, 58, 60, 63, 65, 152, 154, 187, 189], "assertionlogregmodel": [45, 137, 171], "maxit": [45, 57, 58, 154, 189], "regparam": 45, "enetparam": 45, "elast": 45, "beforeparam": 45, "context": [45, 50, 80, 89, 104, 117, 119, 120, 124, 158, 160, 169, 193, 195, 211, 212], "afterparam": 45, "externalfeatur": 45, "nercol": 45, "sentence_detector": [45, 49, 53, 55, 81, 95, 98, 137, 144, 162, 167, 171, 178, 196, 201, 221], "chunker": [45, 89, 95, 137, 169, 171], "Then": [45, 76, 94, 107, 113, 153, 165, 188, 200], "setreg": 45, "setbefor": 45, "setaft": 45, "13": [45, 68, 73, 99, 100, 139, 173, 217], "labelcol": [45, 57, 58, 113, 146, 154, 180, 189], "setmaxit": [45, 57, 58], "lamda": 45, "setenet": 45, "enet": 45, "setnercol": 45, "settargetnerlabel": 45, "logreg": [45, 57, 58, 154, 189], "logarithm": [45, 57, 58, 154, 189], "obtain": [45, 50, 74, 105, 110, 137, 150, 165, 171, 184, 200, 213, 232], "assertionpretrain": 45, "assertion_ml": 45, "assertiondl": [46, 89, 138, 142, 172, 176], "assertion_chunk_convert": [46, 89], "assertion_dl_reg": [46, 89], "chunk2token": 47, "chunkassembl": [47, 77, 114, 140, 174], "ngramgener": [47, 50], "ngram": [47, 53, 58, 102, 117, 154, 189], "setdelimit": 47, "setn": 47, "setenablecumul": 47, "ngram_token": 47, "year": [47, 50, 68, 69, 73, 80, 90, 93, 96, 99, 139, 168, 173, 232], "old": [47, 50, 68, 73, 90, 93, 94, 96, 107, 108, 139, 165, 168, 173, 200], "man": [47, 90, 93, 96], "hospit": [47, 90, 93, 96, 215], "a_63": 47, "old_man": 47, "14": [47, 68, 70, 73, 139, 173], "man_pres": 47, "18": [47, 68, 73, 113, 119, 120, 139, 160, 173, 195], "28": [47, 50, 168, 217], "presents_to": 47, "27": 47, "to_th": 47, "41": [47, 53, 55, 109, 143, 144, 162, 177, 178, 196], "the_hospit": 47, "42": [47, 52, 217], "hospital_": 47, "assertionfilter": 48, "come": [48, 50, 52, 88, 90, 94, 96, 113, 123, 146, 180], "black": [48, 52, 78, 85, 90, 96, 125, 209, 230, 231], "criteria": [48, 52, 54, 85, 90], "isin": [48, 52, 85, 90], "whitelist": [48, 52, 78, 90, 96, 125], "ignor": [48, 52, 63, 65, 69, 78, 90, 96, 102, 104, 113, 117, 119, 120, 125, 139, 152, 158, 160, 164, 173, 187, 193, 195, 199, 211], "blacklist": [48, 52, 69, 78, 90, 96, 125, 139, 173], "iob": [48, 90, 93, 94, 96, 125, 165, 200, 203, 211, 212, 217, 233], "prefix": [48, 66, 76, 90, 94, 96, 125, 165, 200, 233], "casesensit": [48, 52, 63, 65, 66, 78, 90, 123, 125, 152, 164, 187, 199], "definit": [48, 52, 78, 90, 98, 110, 125, 150, 167, 184, 201], "setcriteria": [48, 52, 85], "setwhitelist": [48, 52, 76, 78, 125], "chunkconvert": 49, "regexmatch": [49, 51, 66, 115], "test_data": [49, 115, 212, 217], "my": [49, 78, 98, 123, 153, 167, 188, 201], "rule": [49, 66, 68, 69, 94, 139, 173, 203], "ceremoni": 49, "regex_match": 49, "setexternalrul": [49, 51, 115], "src": [49, 51, 94, 115, 153, 165, 188, 200], "matcher": [49, 115], "txt": [49, 51, 68, 72, 74, 115, 139, 173, 211, 212], "delimit": [49, 90, 96, 117], "outdf": 49, "71": 49, "80": 49, "chunkkeyphraseextract": 50, "kei": [50, 53, 97, 98, 110, 115, 121, 150, 167, 169, 184, 201, 203, 207, 208, 213, 215, 226, 233], "phrase": [50, 95, 104, 158, 193], "bertsentenceembed": [50, 80, 81, 113, 115, 146, 180], "cosin": [50, 53, 82, 113, 146, 180], "represent": [50, 66, 80, 81, 96], "maxim": [50, 81, 107], "margin": [50, 209], "mmr": 50, "setdiverg": 50, "selectmostdiffer": 50, "other": [50, 53, 55, 63, 64, 65, 66, 68, 69, 70, 72, 81, 90, 94, 98, 107, 108, 109, 110, 113, 124, 137, 139, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 170, 171, 173, 177, 178, 180, 183, 184, 187, 188, 189, 199, 201, 211, 212, 215], "too": [50, 94, 124, 165, 200], "broader": 50, "thei": [50, 61, 81, 94, 117, 123, 124, 165, 200, 215], "belong": 50, "understand": 50, "variou": [50, 104, 158, 193, 232], "rank": 50, "gram": [50, 102, 117], "yakekeywordextractor": 50, "yake": 50, "textmatch": 50, "desir": [50, 53, 90, 109, 211], "latter": 50, "topn": [50, 76], "out": [50, 94, 100, 102, 113, 117, 153, 165, 188, 200, 221], "conjunct": 50, "diverg": 50, "aim": [50, 104, 158, 193], "goal": 50, "within": [50, 77, 81, 94, 114, 140, 174], "interv": 50, "higher": [50, 208, 232], "enforc": [50, 215], "ensur": 50, "sole": 50, "constraint": [50, 217], "documentlevelprocess": 50, "row": [50, 94, 123, 217], "rather": [50, 94, 104, 158, 193], "particular": [50, 69, 81, 110, 113, 146, 150, 180, 184, 232], "concatenatesent": 50, "averag": [50, 63, 65, 79, 80, 81], "droppunctu": 50, "punctuat": [50, 100, 211, 212], "ner_tagg": [50, 110], "ner_jsl_slim": 50, "ner_tag": [50, 107, 108, 109, 110, 149, 183], "ner_convert": [50, 53, 55, 70, 76, 81, 96, 110, 144, 162, 178, 196], "key_phrase_extractor": 50, "settopn": 50, "setdocumentlevelprocess": 50, "ner_chunk_key_phras": 50, "her": [50, 80, 98, 167, 201], "becom": [50, 80, 124], "last": [50, 80, 94, 104, 113, 165, 200, 212], "he": [50, 72, 80, 123], "complain": [50, 80], "swell": [50, 80], "hi": [50, 80, 98, 167, 201], "forearm": [50, 80], "explod": [50, 52, 53, 55, 66, 73, 76, 80, 81, 90, 93, 98, 100, 107, 108, 109, 110, 123, 144, 149, 153, 167, 178, 183, 188, 201, 203], "AS": [50, 53, 55, 80, 81, 98, 144, 167, 178, 201], "key_phras": 50, "documentsimilar": 50, "mmrscore": 50, "gestat": 50, "mellitu": 50, "7391447825527298": 50, "4366776288430703": 50, "7323921930094919": 50, "44348688715422274": 50, "13577881610104517": 50, "085800103824974": 50, "setselectmostdiffer": 50, "highest": [50, 86, 90, 102, 104, 107, 117, 119, 120, 158, 160, 193, 195], "setconcatenatesent": 50, "them": [50, 63, 64, 65, 80, 81, 82, 86, 94, 109, 113, 152, 164, 165, 187, 199, 200], "setdroppunctu": 50, "sbert_jsl_medium_uncas": 50, "chunksentencesplitt": 51, "treat": 51, "header": [51, 84, 153, 188, 209, 217], "associ": [51, 96, 109, 113, 232], "particularli": 51, "subtitl": 51, "paragraph": [51, 97], "groupbysent": 51, "assum": [51, 81, 213], "detector": [51, 211, 212, 221], "insertchunk": 51, "omit": [51, 113, 146, 180], "defaultent": 51, "introduct": 51, "title_regex": 51, "setgroupbysent": 51, "setinsertchunk": 51, "insert": 51, "setdefaultent": 51, "chunkfiltererapproach": 52, "chunkfilter": 52, "addition": [52, 66, 94, 123, 124, 165, 200], "accord": [52, 68, 70, 85, 90, 135, 139, 173, 211], "filtervalu": [52, 85, 90], "alwai": [52, 90], "what": [52, 69, 90, 98, 100, 105, 107, 113, 167, 201], "attribut": [52, 74, 90], "entitiesconfidenceresourc": [52, 90], "confidencethreshold": [52, 90, 230], "past": [52, 214], "histori": 52, "gastroenter": 52, "docassembl": 52, "postagg": [52, 107, 108, 149, 183], "perceptronmodel": [52, 81, 107, 108, 109, 110, 149, 183, 221], "setregexpars": [52, 95], "chunkerfilt": 52, "chunksfilterapproach": 52, "entitiesconfidenceresourceasjsonstr": 52, "setfilterent": 52, "filter_bi": 52, "setentitiesconfidenceresourc": [52, 90], "binari": [52, 90, 96, 110, 113, 150, 184], "setentitiesconfidenceresourceasjsonstr": 52, "entitiesconfid": 52, "17": [52, 90, 93, 217], "22": [52, 53, 55, 99, 143, 144, 162, 168, 177, 178, 196, 217], "36": 52, "53": 52, "81": [52, 109, 217], "110": [52, 90, 93], "now": 52, "care": [52, 109], "118": 52, "132": 52, "setentitiesconfid": 52, "entities_confid": 52, "chunkmapperfuzzymatchingparam": 53, "fuzzymatch": 53, "enabletokenfingerprintmatch": 53, "enablecharfingerprintmatch": 53, "enablefuzzymatch": 53, "maxtokenngramfingerprint": 53, "mintokenngramfingerprint": 53, "maxtokenngramdroppingtoken": 53, "maxtokenngramdroppingcharsratio": 53, "maxtokenngramdroppingoper": 53, "maxcharngramfingerprint": 53, "mincharngramfingerprint": 53, "fuzzymatchingdist": 53, "fuzzymatchingdistancethreshold": 53, "fuzzydistancescalingmod": 53, "setenabletokenfingerprintmatch": 53, "etfm": [53, 131], "fingerprint": 53, "driven": 53, "three": 53, "maxtokenngramdrop": 53, "setenablecharfingerprintmatch": 53, "ecfm": 53, "char": [53, 69, 94, 123, 139, 165, 173, 200], "setenablefuzzymatch": 53, "efm": 53, "fuzzi": 53, "setmaxtokenngramfingerprint": 53, "mxtnf": 53, "setmintokenngramfingerprint": 53, "mntnf": 53, "min": [53, 58, 154, 189, 209], "setmaxtokenngramdroppingtoken": 53, "etd": 53, "drop": [53, 221], "enabletokenngrammatch": 53, "whenev": 53, "matter": [53, 107], "high": [53, 124, 208], "sy": 53, "maxsiz": 53, "setmaxtokenngramdroppingcharsratio": 53, "amount": [53, 76, 208], "ratio": 53, "setmaxtokenngramdroppingoper": 53, "setmaxcharngramfingerprint": 53, "setmincharngramfingerprint": 53, "minimum": [53, 58, 69, 94, 139, 165, 173, 200, 207], "setfuzzymatchingdist": 53, "fmd": 53, "distanc": [53, 69, 76, 81, 107, 109, 113, 139, 146, 173, 180], "levenshtein": [53, 69, 76, 139, 173], "longest": 53, "jaccard": 53, "setfuzzymatchingdistancethreshold": 53, "fmdth": 53, "setfuzzydistancescalingmod": 53, "fdsm": 53, "mode": [53, 68, 69, 72, 86, 107, 123, 136, 137, 139, 171, 173, 215], "integ": [53, 69, 70, 94, 119, 120, 139, 160, 173, 195, 200, 207, 208, 215], "commonchunkmapperparam": 53, "allowmultitokenchunk": 53, "multivaluesrel": 53, "lowercas": [53, 55, 68, 77, 100, 114, 139, 140, 143, 144, 162, 173, 174, 177, 178, 196, 211, 212], "setallowmultitokenchunk": 53, "mc": 53, "skip": [53, 68, 69, 139, 173], "multitoken": 53, "setmultivaluesrel": 53, "send": 53, "setrel": [53, 55, 144, 162, 178, 196], "lc": 53, "chunkmapperapproach": [53, 143, 162, 177, 196], "mapper": [53, 55, 143, 144, 162, 177, 178, 196], "jsondictionari": [53, 55, 143, 144, 162, 177, 178, 196], "chunkmappermodel": [53, 143, 162, 177, 196], "label_depend": [53, 54, 55, 105, 112, 143, 144, 162, 177, 178, 196], "mappinmg": [53, 55, 143, 144, 162, 177, 178, 196], "go": [53, 55, 143, 144, 162, 177, 178, 196, 208], "decid": [53, 55, 69, 123, 143, 144, 162, 177, 178, 196], "ner_posology_larg": [53, 55, 81, 144, 162, 178, 196], "nerconverterintern": [53, 55, 74, 81, 96, 105, 144, 162, 178, 196, 217], "chunkermapperapproach": [53, 55, 144, 162, 178, 196], "setdictionari": [53, 55, 66, 144, 162, 178, 196], "home": [53, 55, 78, 144, 162, 178, 196], "mappings2": [53, 55, 144, 162, 178, 196], "action": [53, 55, 143, 144, 162, 177, 178, 196], "sampledata": [53, 55, 81, 144, 162, 178, 196], "warfarina": [53, 55, 143, 144, 162, 177, 178, 196], "lusa": [53, 55, 143, 144, 162, 177, 178, 196], "amlodipin": [53, 55, 143, 144, 162, 177, 178, 196], "mg": [53, 55, 81, 143, 144, 162, 177, 178, 196], "35": [53, 55, 109, 143, 144, 162, 177, 178, 196], "analges": [53, 55, 143, 144, 162, 177, 178, 196], "56995": [53, 55, 143, 144, 162, 177, 178, 196], "all_rel": [53, 55, 143, 144, 162, 177, 178, 196], "antipyret": [53, 55, 143, 144, 162, 177, 178, 196], "9989": [53, 55, 143, 144, 162, 177, 178, 196], "55": [53, 55, 143, 144, 162, 177, 178, 196], "56": [53, 55, 143, 144, 162, 177, 178, 196], "9123": [53, 55, 143, 144, 162, 177, 178, 196], "bow": [53, 55, 76, 144, 178], "drug_chunk_embed": [53, 55, 81, 144, 178], "drug_chunk": [53, 55, 81, 144, 178], "drug_embed": [53, 55, 81, 144, 178], "cach": [53, 55, 81, 84, 90, 104, 118, 119, 144, 146, 158, 159, 178, 180, 193, 194, 214, 219], "drug_action_treatment_mapp": [53, 55], "open": [53, 55, 63, 64, 65, 66, 77, 94, 96, 98, 107, 108, 110, 114, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 199, 201], "chunkmapperfilter": 54, "chunkmapp": [54, 56, 89, 142, 145, 176, 179], "successfulli": 54, "returncriteria": 54, "success": 54, "fail": [54, 69, 77, 84, 114, 140, 174], "chunkmapperfilterermodel": 54, "setreturncriteria": 54, "return_criteria": 54, "itself": [54, 90], "docmapperapproach": [55, 144, 178], "docmappermodel": [55, 144, 178], "assertion_filter": [56, 89], "chunk_convert": [56, 89], "chunk_key_phrase_extract": [56, 89], "chunk_sentence_splitt": [56, 89], "chunker_filter": [56, 89], "chunkmapper_filter": [56, 89], "docmapp": [56, 89, 142, 145, 176, 179], "documentlogregclassifierapproach": 57, "classifi": [57, 58, 78, 86, 107, 108, 149, 153, 154, 183, 188, 189, 203], "tol": [57, 58, 154, 189], "converg": [57, 58, 154, 189], "toler": [57, 58, 154, 189], "fitintercept": [57, 58, 154, 189], "intercept": [57, 58, 154, 189], "vectorizationmodelpath": [57, 58, 154, 189], "been": [57, 58, 68, 139, 154, 173, 189], "classificationmodelpath": [57, 58, 154, 189], "could": [57, 58, 66, 76, 153, 154, 188, 189], "like": [57, 58, 66, 69, 139, 153, 154, 173, 188, 189], "stopwords_clean": [57, 58, 154, 189], "stopwordsclean": [57, 58, 154, 189], "cleantoken": [57, 58, 154, 189], "stemmer": [57, 58, 154, 189], "stem": [57, 58, 107, 108, 109, 149, 154, 183, 189], "clf_model": [57, 58, 86, 154, 189], "settol": [57, 58], "dist": [57, 58, 113], "setfitintercept": [57, 58], "setvectorizationmodelpath": [57, 58], "setclassificationmodelpath": [57, 58], "setlabel": [57, 58], "documentlogregclassifiermodel": 57, "mergechunk": [57, 58, 154, 189], "vectorizationmodel": [57, 58, 154, 189], "classificationmodel": [57, 58, 154, 189], "setmergechunk": [57, 58], "setvectorizationmodel": [57, 58], "setclassificationmodel": [57, 58], "classifier_logreg_ad": 57, "documentmlclassifierparam": 58, "mintokenngram": [58, 154, 189], "maxtokenngram": [58, 154, 189], "documentmlclassifierapproach": [58, 154, 189], "classificationmodelclass": [58, 154, 189], "sparkml": [58, 154, 189], "svm": [58, 61, 154, 189], "setclassificationmodelclass": 58, "setmintokenngram": 58, "setmaxtokenngram": 58, "documentmlclassifiermodel": 58, "classifierml_ad": 58, "fewshotclassifierapproach": 59, "fewshotclassifi": 59, "setfit": [59, 155, 190], "tunstal": [59, 155, 190], "2022": [59, 70, 155, 168, 190, 217], "vari": [59, 60, 61, 155, 190], "fewshotclassifiermodel": 59, "genericlogregclassifierapproach": 60, "genericlogregclassifi": 60, "multinomi": 60, "logist": [60, 61], "featurevector": [60, 61], "genericlogregclassifiermodel": 60, "generic_logreg_classifier_ad": 60, "genericsvmclassifierapproach": 61, "svmclassifi": 61, "standard": [61, 68, 100, 121], "genericsvmclassifiermodel": 61, "generic_svm_classifier_ad": 61, "document_log_classifi": [62, 89], "document_ml_classifi": [62, 89], "few_shot_classifi": [62, 89], "generic_log_reg_classifi": [62, 89], "generic_svm_classifi": [62, 89], "medical_bert_for_sequence_classif": [62, 89], "medical_bert_for_token_classifi": [62, 89], "medical_distilbert_for_sequence_classif": [62, 89], "medicalbertforsequenceclassif": [63, 65, 78], "medicalbertfortokenclassifi": [63, 64], "head": [63, 64, 65, 94, 123, 152, 164, 165, 187, 199, 200], "pool": [63, 65, 152, 187], "companion": [63, 64, 65, 94, 136, 152, 153, 164, 165, 187, 188, 199, 200], "huggingfac": [63, 64, 65, 152, 164, 187, 199], "maxsentencelength": [63, 64, 65, 152, 164, 187, 199], "tokenclassifi": [63, 64, 152, 164, 187, 199], "felt": [63, 65, 152, 187], "drowsi": [63, 65, 152, 187], "had": [63, 65, 76, 123, 152, 187], "blur": [63, 65, 152, 187], "vision": [63, 65, 152, 187], "aspirin": [63, 65, 100, 152, 187], "coalescesent": [63, 65], "setmaxsentencelength": [63, 64, 65, 115], "getclass": [63, 64, 65, 94, 98, 107, 108, 110], "setcoalescesent": [63, 65], "probabl": [63, 65, 102, 104, 117, 119, 120, 158, 160, 193, 195, 208], "due": [63, 65], "limit": [63, 65, 69, 76, 107], "almost": [63, 65], "512": [63, 65, 123], "help": [63, 65, 69, 113, 123, 124, 139, 173, 215], "loadsavedmodel": [63, 64, 65, 94, 104, 108, 110, 118, 119, 120, 149, 150, 152, 158, 159, 160, 164, 165, 183, 184, 187, 193, 194, 195, 199, 200], "spark_sess": [63, 64, 65, 94, 104, 108, 110, 118, 119, 120, 149, 150, 152, 158, 159, 160, 164, 165, 183, 184, 187, 193, 194, 195, 199, 200], "loadsavedmodelopensourc": [63, 64, 65, 152, 164, 187, 199], "bertfortokenclassifierpath": [63, 64, 65, 152, 164, 187, 199], "tfmodelpath": [63, 64, 65, 152, 164, 187, 199], "bertfortokenclassifi": [63, 64, 65, 152, 164, 187, 199], "taht": [63, 64, 65, 152, 164, 187, 199], "bert_sequence_classifier_ad": 63, "bert_token_classifier_ner_bionlp": [64, 164, 199], "erba": [64, 164, 199], "ir": [64, 139, 164, 199], "myb": [64, 164, 199], "viru": [64, 164, 199], "erythroid": [64, 164, 199], "infect": [64, 164, 199], "bone": [64, 164, 199], "marrow": [64, 164, 199], "blastoderm": [64, 164, 199], "cultur": [64, 164, 199], "tissue_structur": [64, 164, 199], "medicaldistilbertforsequenceclassif": 65, "distilbert": 65, "sequenceclassifi": 65, "distilbertforsequenceclassif": 65, "destilbertfortokenclassifierpath": 65, "distilbert_sequence_classifier_ad": 65, "contextualparserapproach": 66, "setjsonpath": 66, "along": 66, "unifi": 66, "jsonpath": 66, "prefixandsuffixmatch": 66, "suffix": [66, 211], "hit": [66, 211, 212], "tsv": [66, 96], "optionalcontextrul": 66, "regardless": 66, "shortestcontextmatch": 66, "stop": [66, 78, 94, 96, 117, 119, 123, 165, 200, 214], "find": [66, 80, 105, 110, 113, 133], "completecontextmatch": 66, "exact": 66, "parser": [66, 217], "liver": 66, "metastas": 66, "pt1bn0m0": 66, "t5": 66, "primari": 66, "colon": 66, "contextualpars": [66, 90], "regex_token": [66, 221], "setprefixandsuffixmatch": 66, "setoptionalcontextrul": 66, "setshortestcontextmatch": 66, "setcompletecontextmatch": 66, "boundari": 66, "contextualparsermodel": 66, "mycontextualparsermodel": 66, "date_of_birth_pars": 66, "contextual_pars": [67, 89], "deidentificationmodel": [68, 69, 74, 139, 173], "obfusc": [68, 69, 70, 72, 73, 74, 139, 173, 215, 223], "mask": [68, 69, 135, 139, 173], "person": [68, 76, 96, 139, 173, 215], "These": [68, 110, 139, 150, 173, 184], "setregexpatternsdictionari": [68, 139, 173], "line": [68, 96, 139, 173, 217, 221], "util": [68, 110, 150, 169, 184, 205, 206, 210, 215], "secur": [68, 215], "securerandom": 68, "fake": [68, 69, 139, 173], "spark_nlp_jsl_seed_algorithm": 68, "chosen": [68, 94, 165, 200, 212], "impact": 68, "potenti": [68, 124], "about": [68, 124, 211], "rng": 68, "sha1prng": 68, "deidentificationparam": [68, 69, 139, 173], "regexpatternsdictionari": [68, 139, 173], "protect": [68, 139, 173], "obfuscatereffil": [68, 72, 139, 173, 215, 223], "reffileformat": [68, 72, 139, 173], "refsep": [68, 72, 139, 173], "sep": [68, 139, 173, 217], "reffil": [68, 72, 139, 173], "selectiveobfuscationmodespath": [68, 139, 173], "mask_same_length_char": [68, 139, 173], "asterisk": [68, 69, 139, 173], "minu": [68, 139, 173], "plu": [68, 139, 173], "bracket": [68, 69, 139, 173], "mask_entity_label": [68, 139, 173], "mask_fixed_length_char": [68, 139, 173], "fix": [68, 69, 139, 173, 207, 211, 213], "invok": [68, 139, 173], "setfixedmasklength": [68, 69, 139, 173], "intact": [68, 139, 173], "deidentifi": [68, 70, 73, 135, 139, 173, 223], "entitycasingmodespath": [68, 139, 173], "uppercas": [68, 139, 173, 211, 212], "upper": [68, 94, 107, 108, 109, 139, 149, 165, 173, 183, 200, 211], "capit": [68, 139, 173, 211, 212], "titlecas": [68, 139, 173], "setuseabbrevi": [68, 72, 139, 173], "clinical_sensitive_ent": [68, 72, 139, 173], "ner_deid_enrich": [68, 72, 139, 173], "ner_con": [68, 139, 173], "dei": [68, 73, 139, 173], "dic_regex_patterns_main_categori": [68, 139, 173], "setobfuscatereffil": [68, 72, 74, 139, 173], "obfuscate_fixed_ent": [68, 139, 173], "setreffileformat": [68, 72, 74, 139, 173], "setrefsep": [68, 72, 74, 139, 173], "setmod": [68, 69, 70, 139, 173], "setdateformat": [68, 69, 139, 173], "mm": [68, 84, 99, 139, 173, 215, 217, 219], "dd": [68, 84, 99, 139, 173, 215, 219], "yy": [68, 139, 173], "yyyi": [68, 84, 99, 139, 173, 215, 219], "setobfuscated": [68, 69, 70, 139, 173], "setdatetag": [68, 69, 70, 139, 173], "setdai": [68, 69, 139, 173], "setobfuscaterefsourc": [68, 69, 70, 72, 139, 173], "7194334": [68, 73, 139, 173], "93": [68, 73, 139, 173], "oliveira": [68, 73, 139, 173], "record": [68, 73, 139, 173, 215], "2079": [68, 73, 139, 173], "09": [68, 73, 139, 173], "01010101": [68, 73, 139, 173], "dr": [68, 72, 73, 74, 139, 173], "gregori": [68, 73, 139, 173], "hous": [68, 73, 139, 173], "regexpatternsdictionaryasjsonstr": 68, "combineregexpattern": 68, "setregexpatternsdictionaryasjsonstr": 68, "setcombineregexpattern": 68, "f": [68, 72, 84, 134, 168], "setselectiveobfuscationmod": 68, "setentitycasingmod": 68, "regexent": [68, 139, 173], "keep": [68, 86, 94, 113, 117, 123, 139, 146, 165, 173, 180, 200, 207, 212], "regexpatterndictionari": [68, 139, 173], "deidentify_larg": [68, 139, 173], "getregexent": 68, "deidentify_enriched_clin": 68, "deidentif": [69, 70, 71, 73, 89, 135, 141, 142, 175, 176, 215, 223], "anonim": [69, 139, 173], "obfuscated": [69, 139, 173], "dateformat": [69, 139, 173, 215], "unnormalizeddatemod": 69, "datetag": [69, 139, 173], "dai": [69, 70, 99, 139, 173, 215, 223], "displac": [69, 139, 173, 215], "60": [69, 139, 173, 215], "datetoyear": [69, 139, 173], "minyear": [69, 139, 173], "1929": 69, "pars": [69, 70, 139, 173, 217, 219, 226], "consistentobfusc": [69, 139, 173], "sameentitythreshold": [69, 139, 173], "consid": [69, 76, 81, 82, 97, 102, 104, 109, 113, 119, 120, 123, 139, 158, 160, 173, 193, 195, 233], "appear": [69, 80, 81, 105, 139, 173], "9": [69, 107, 113, 139, 173, 217], "obfuscaterefsourc": [69, 72, 139, 173, 215], "invalid": 69, "obfuscatorreffil": [69, 139, 173], "faker": [69, 70, 72, 135, 139, 173, 215, 223], "randomli": [69, 94, 139, 165, 173, 200, 211, 212, 215], "regexoverrid": [69, 139, 173], "priorit": [69, 90, 139, 173], "english": [69, 72, 139, 173, 211, 212, 215, 223], "german": [69, 72, 139, 173, 215, 223], "spanish": [69, 72, 139, 173, 215, 223], "fr": [69, 72, 139, 173, 215, 223], "french": [69, 72, 139, 173, 215, 223], "arab": [69, 72, 139, 173, 215, 223], "ro": [69, 72, 139, 173, 215, 223], "romanian": [69, 72, 139, 173, 215, 223], "With": [69, 72, 139, 173], "repli": [69, 72, 139, 173], "ignoreregex": [69, 139, 173], "israndomdatedisplac": [69, 139, 173], "mappingscolumn": [69, 139, 173], "returnentitymap": [69, 139, 173], "iban": [69, 139, 173, 215], "zip": [69, 139, 173, 215], "npi": [69, 139, 173, 215], "dln": [69, 139, 173, 215], "passport": [69, 139, 173, 215], "c_card": [69, 139, 173, 215], "dea": [69, 139, 173, 215], "ssn": [69, 139, 173, 215], "maskingpolici": [69, 139, 173], "polici": [69, 100, 139, 173], "same_length_char": [69, 139, 173], "compos": [69, 139, 173], "surround": [69, 80, 139, 173], "smith": [69, 105, 139, 173], "jo": [69, 139, 173], "fixed_length_char": [69, 139, 173], "samelengthformattedent": [69, 139, 173], "fax": [69, 139, 173, 215], "idnum": [69, 139, 173], "bioid": [69, 139, 173, 215], "medicalrecord": [69, 139, 173, 215], "vin": [69, 139, 173], "genderawar": [69, 72, 139, 173], "awar": [69, 72, 123, 139, 173, 212], "might": [69, 72, 94, 139, 165, 173, 200, 232], "decreas": [69, 72, 124, 139, 173], "agerangesbyhipaa": 69, "hipaa": 69, "health": [69, 78, 232], "insur": [69, 168], "portabl": 69, "account": [69, 80, 168, 215], "privaci": 69, "mandat": 69, "90": [69, 217], "younger": 69, "remain": [69, 72], "unchang": 69, "larger": [69, 96], "agerang": 69, "obfuscationstrategyonexcept": 69, "occur": [69, 94, 102, 117, 165, 200, 215], "four": 69, "throw": [69, 168], "fixedmasklength": [69, 139, 173], "zipcodetag": 69, "useshifdai": 69, "region": [69, 135, 231], "outputasdocu": 69, "setlanguag": [69, 70, 72], "getblacklist": 69, "anonym": 69, "setmaskingpolici": 69, "squar": [69, 139, 173], "total": [69, 139, 173, 207], "setzipcodetag": 69, "setdatetoyear": 69, "setminyear": 69, "setconsistentobfusc": 69, "setsameentitythreshold": 69, "setregexoverrid": 69, "setignoreregex": 69, "increas": [69, 107, 109, 117, 124], "setse": [69, 70, 72], "setisrandomdatedisplac": 69, "setmappingscolumn": [69, 73], "setreturnentitymap": 69, "setblacklist": [69, 125], "setuseshifdai": [69, 70], "setuseshiftdai": 69, "shift": [69, 70, 223], "getuseshiftdai": 69, "useshiftdai": 69, "setregion": 69, "especi": 69, "2023": [69, 70, 99, 168], "eu": 69, "european": 69, "union": 69, "usa": [69, 165, 200], "setunnormalizeddatemod": 69, "setagerang": 69, "preserv": [69, 96], "setoutputasdocu": 69, "join": [69, 127, 207, 211], "setsamelengthformattedent": 69, "plate": [69, 139, 173], "getsamelengthformattedent": 69, "setgenderawar": [69, 72], "setagerangesbyhipaa": 69, "setobfuscationstrategyonexcept": 69, "documenthashcod": 70, "purpos": [70, 86, 211], "hash": 70, "accordingli": 70, "patientidcolumn": 70, "dateshiftcolumn": 70, "newdateshift": 70, "rangedai": 70, "rang": [70, 94, 165, 200], "patientid": 70, "a001": 70, "a003": 70, "chri": 70, "brown": [70, 230, 231], "discharg": 70, "02": [70, 99], "04": [70, 99], "03": [70, 99, 109, 217], "moor": 70, "dateshift": [70, 135], "my_input_df": 70, "documenthash": [70, 135], "setdateshiftcolumn": 70, "clinical_n": [70, 74], "ner_deid_subentity_aug": 70, "de_identif": 70, "deid_text": 70, "pipeline_col": 70, "pipeline_col_model": 70, "ellend": 70, "manual": [70, 203], "errol": 70, "bang": 70, "ariel": 70, "null": [70, 217], "jean": 70, "cotton": 70, "setpatientidcolumn": 70, "predefin": [70, 81], "setnewdateshift": 70, "setrangedai": 70, "deidentication_param": [71, 89], "doccument_hashcod": [71, 89], "name_obfusc": [71, 89], "reidentif": [71, 89], "namechunkobfuscatorapproach": [72, 74], "namechunkobfusc": [72, 74], "doctor": [72, 215], "seper": [72, 211, 223, 226], "samelength": 72, "nameent": 72, "obfuscator_nam": 72, "replacer_nam": [72, 74], "obfuscated_nam": 72, "setusereplac": [72, 74], "davi": [72, 74], "admit": [72, 74, 105], "seen": [72, 74, 123], "attend": [72, 74], "physician": [72, 74], "lorand": [72, 74], "schedul": [72, 74], "emerg": [72, 74, 232], "assess": [72, 74, 232], "charlestin": 72, "loweri": 72, "setsamelength": 72, "mike": 72, "setnameent": 72, "pretraind": 72, "reidentifi": 73, "py": [73, 74, 97, 117, 118, 127, 129, 130, 157, 159, 192, 194], "frame": [73, 94, 165, 200, 217], "reideintif": 73, "protectedent": 73, "reid": 73, "redeideintif": 73, "datenorm": [74, 99], "usereplac": 74, "disabl": [74, 104, 158, 168, 193, 217], "ner_deid_generic_aug": 74, "ner_converter_nam": 74, "names_test": 74, "obfuscated_document_nam": 74, "nlppipelin": [74, 76], "model_chunck_obfusc": 74, "sample_text": 74, "mr": 74, "lmodel": 74, "re": [74, 89, 117, 169, 217], "print": [74, 133, 211, 214, 218, 229, 230, 233], "fitzpatrick": 74, "bowman": 74, "acosta": 74, "getusereplac": 74, "ner_disambigu": [75, 89], "nerdisambigu": 76, "interest": 76, "compani": [76, 215], "kb": 76, "ne": [76, 168], "mention": [76, 100], "surfac": 76, "instanti": [76, 94, 153, 165, 188, 200, 217], "embeddingtypeparam": 76, "numfirstchar": 76, "tokensearch": 76, "narrowwithapproximatematch": 76, "narrow": 76, "levenstein": 76, "levenshteindistancethresholdparam": 76, "nearmatchinggapparam": 76, "trim": [76, 123], "candid": 76, "len": 76, "nearmatchinggap": 76, "predictionslimit": 76, "s3knowledgebasenam": 76, "contest": 76, "donald": 76, "trump": 76, "who": [76, 105, 123], "defeat": 76, "christina": 76, "aguilera": 76, "sentenceembed": [76, 153, 188], "nerdlmodel": [76, 80, 94, 165, 200], "sets3knowledgebasenam": 76, "setnumfirstchar": 76, "wikipedia": 76, "curid": 76, "4848272": 76, "31698421": 76, "55907961": 76, "144171": 76, "6636454": 76, "setembeddingtyp": 76, "settokensearch": 76, "setnarrowwithapproximatematch": 76, "setlevenshteindistancethresholdparam": 76, "setnearmatchinggapparam": 76, "setpredictionlimit": 76, "nerdisambiguatormodel": 76, "disambiguator_p": 76, "doc2chunkintern": 77, "chunkcol": [77, 114, 140, 174], "stringtyp": [77, 99, 114, 140, 174], "arraytyp": [77, 114, 140, 174], "setisarrai": [77, 114, 140, 174], "startcolbytokenindex": [77, 114, 140, 174], "prepend": [77, 114, 123, 140, 174], "whitespac": [77, 114, 117, 123, 140, 174, 207, 211], "isarrai": [77, 114, 140, 174], "failonmiss": [77, 114, 140, 174], "job": [77, 114, 140, 174], "chunk2doc": [77, 114, 115, 140, 174], "advanc": [77, 114, 140, 174], "natur": [77, 110, 114, 140, 150, 174, 184], "annotatortyp": [77, 114, 140, 174], "miss": 77, "documentfiltererbyclassifi": 78, "pass": [78, 88, 96, 203, 207, 211], "medicalbfsc": 78, "bert_sequence_classifier_covid_senti": 78, "documentfilter": 78, "filtereddocu": 78, "posit": [78, 90, 94, 96, 107, 109, 119, 120, 160, 195, 200, 217, 221], "british": [78, 211, 212], "depart": 78, "uk": 78, "trip": 78, "australian": 78, "exchang": 78, "student": 78, "got": [78, 212], "cancel": 78, "coronaviru": 78, "wish": 78, "everyon": 78, "safe": 78, "pandem": [78, 119, 120, 160, 195], "181": 78, "233": 78, "averageembed": [79, 80], "embded": 79, "bertsentencechunkembed": [80, 82], "numer": [80, 84, 124, 212], "chunkweight": 80, "prerequisit": [80, 94, 165, 200], "medicalnerdlmodel": [80, 94, 165, 200], "sbluebert_base_uncased_mli": 80, "sentence_chunk_embed": 80, "31995273": 80, "04710883": 80, "28973156": 80, "1294758": 80, "12481072": 80, "027161136": 80, "24613449": 80, "0949309": 80, "1825444": 80, "2252143": 80, "45139068": 80, "12400375": 80, "0075617577": 80, "90806055": 80, "12871636": 80, "setchunkweight": 80, "sbiobert_base_cased_mli": [80, 81], "entitychunkembed": 81, "One": [81, 211, 220], "look": 81, "tri": [81, 84, 94], "criterion": [81, 94, 165, 200], "anoth": 81, "syntact": [81, 107, 109, 207], "relationship": [81, 110, 150, 184], "125": 81, "paracetamol": [81, 110], "metformin": 81, "target_ent": 81, "related_ent": 81, "notat": 81, "targetent": [81, 170], "insensit": 81, "entityweight": [81, 170], "3f": 81, "maxsyntacticdist": [81, 107, 109], "pos_clin": [81, 107, 108, 109, 110, 149, 183], "dependency_pars": [81, 109, 110], "dependencyparsermodel": [81, 107, 108, 109, 110, 149, 183], "dependency_conllu": [81, 107, 108, 109, 110, 149, 183], "setmaxsyntacticdist": [81, 107, 108, 109, 110, 149, 183], "settargetent": 81, "setentityweight": 81, "parient": 81, "coumadin": 81, "pill": 81, "sparkcontextfortest": 81, "267413": 81, "07614058": 81, "5620966": 81, "83838946": 81, "8911504": 81, "22319649": 81, "07094894": 81, "6885556": 81, "79176235": 81, "82672405": 81, "10939768": 81, "29242": 81, "3574444": 81, "3981813": 81, "79609615": 81, "weigh": 81, "related1": 81, "related2": 81, "extractivesummar": 82, "summarizaiton": 82, "lexrank": 82, "similaritythreshold": 82, "summarys": 82, "returnsingledocu": 82, "setsimilaritythreshold": 82, "setsummarys": 82, "summar": [82, 117], "setreturnsingledocu": 82, "compil": 82, "average_embed": [83, 89], "bert_sentence_embed": [83, 89], "entity_chunk_embed": [83, 89], "extractive_summar": [83, 89], "featuresassembl": [84, 86], "anyth": [84, 124], "cast": 84, "feature_vector": [84, 86, 227], "timestampformat": 84, "hh": 84, "ss": 84, "zz": 84, "test_jsl": 84, "relfeatur": 84, "withcolumn": 84, "array_column": 84, "words_in_ent1": [84, 217], "words_in_ent2": [84, 217], "features_asm1": 84, "words_between": [84, 217], "features_t": 84, "__data": 84, "filteringparam": 85, "setregex": 85, "setfiltervalu": 85, "labelcolumn": [86, 94, 124, 153, 165, 188, 200], "epochsn": 86, "proce": [86, 211], "dropou": 86, "lay": 86, "validaiton": 86, "fiximbal": 86, "whenther": 86, "balanc": 86, "trainig": 86, "featuresc": [86, 107], "minmax": [86, 107], "feature_1": 86, "feature_2": 86, "feature_n": 86, "graph_fil": [86, 107], "setmulticlass": [86, 107], "label_column": 86, "drouptup": 86, "validation_split": 86, "mode_fil": 86, "fix_imbal": 86, "feature_sc": [86, 107], "output_logs_path": 86, "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 86, "handleexceptionparam": 88, "handl": [88, 96, 124], "doexceptionhandl": [88, 94, 96], "setdoexceptionhandl": [88, 94, 96], "caus": [88, 96, 107, 232], "messag": [88, 96, 224], "deid": [89, 142, 151, 169, 176, 185], "disambigu": [89, 169, 227], "chunk_merg": [89, 91], "iob_tagg": [89, 92], "medical_n": [89, 92], "ner_converter_intern": [89, 92], "ner_template_rend": [89, 92], "zero_shot_n": [89, 92, 163, 166, 197, 198], "date_norm": [89, 101], "drug_norm": [89, 101], "qa": [89, 119, 120, 158, 160, 169, 193, 195], "beam_search_param": [89, 103], "medical_qa": [89, 103], "qa_ner_gener": [89, 103, 151, 161, 185, 191], "relation_extraction_dl": [89, 106, 147, 148, 181, 182], "relation_ner_chunk_filt": [89, 106], "zero_shot_relation_extract": [89, 106, 147, 148, 181, 182], "resolut": [89, 114, 142, 151, 169, 176, 185, 230], "resolver_merg": [89, 111], "sentence_entity_resolv": [89, 111, 142, 145, 176, 179], "seq2seq": [89, 169], "medical_encoder_decod": [89, 116], "medical_summar": [89, 116], "medical_text_gener": [89, 116], "text2sql": [89, 116], "splitter": [89, 169], "internal_document_splitt": [89, 122], "windowed_sent": [89, 126], "annotation_merg": [89, 169], "chunk2_token": [89, 169], "doc2_chunk_intern": [89, 169], "document_filterer_by_classifi": [89, 169], "feature_assembl": [89, 169], "filtering_param": [89, 169], "handle_exception_param": [89, 169], "resolution2_chunk": [89, 169], "router": [89, 169], "source_tracking_metadata_param": [89, 169], "tf_graph_build": [89, 169], "white_black_list_param": [89, 169], "mergecommonparam": 90, "mergeoverlap": 90, "setmergeoverlap": 90, "overlap": [90, 123], "mergeprioritizationparam": 90, "orderingfeatur": 90, "selectionstrategi": 90, "defaultconfid": 90, "chunkpreced": 90, "chunkprecedencevaluepriorit": 90, "setorderingfeatur": 90, "chunkbegin": 90, "chunklength": 90, "chunkconfid": 90, "setselectionstrategi": 90, "diverselong": 90, "setdefaultconfid": 90, "setchunkpreced": 90, "comma": [90, 94, 96, 165, 200], "drive": 90, "togeth": [90, 127], "setchunkprecedencevaluepriorit": 90, "mergeresourceparam": 90, "falsepositivesresourc": 90, "replacedictresourc": [90, 96], "setfalsepositivesresourc": 90, "setreplacedictresourc": [90, 96], "chunkmergeapproach": 90, "merger": 90, "certain": [90, 95], "decis": 90, "kept": 90, "preced": 90, "proccess": [90, 96, 105], "emb": [90, 93], "ner_jsl": [90, 93, 94, 96], "jsl_ner": [90, 96], "jsl_ner_chunk": 90, "ner_bionlp": 90, "bionlp_ner": 90, "bionlp_ner_chunk": 90, "merged_chunk": 90, "19": [90, 93, 119, 120, 160, 195, 217], "72": [90, 93], "98": [90, 93], "107": [90, 93], "cellul": [90, 93], "diagnosi": [90, 93], "119": [90, 93], "pneumonia": [90, 93], "chunkmergemodel": 90, "iobtagg": 93, "bioe": 93, "iobtaggermodel": 93, "setschem": 93, "bilstm": [94, 165, 200], "art": [94, 153, 165, 188, 200], "2003": [94, 165, 200], "bertembed": [94, 113, 146, 165, 180, 200], "minepoch": [94, 165, 200], "maxepoch": [94, 153, 165, 188, 200], "randomse": [94, 97, 117, 119, 120, 153, 160, 165, 188, 195, 200], "reproduc": [94, 119, 120, 160, 195, 200], "decai": [94, 124, 165, 200], "coeffici": [94, 153, 165, 188, 200], "005": [94, 153, 165, 188, 200], "adequ": [94, 165, 200], "blstn_": [94, 165, 200], "embedding_dim": [94, 165, 200], "exactli": [94, 165, 200, 211], "greater": [94, 113, 165, 200], "satisfi": [94, 165, 200], "ill": [94, 165, 200], "usecontrib": [94, 165, 200], "Not": [94, 165, 200], "slightli": [94, 165, 200], "choos": [94, 137, 153, 165, 171, 188, 200], "hold": [94, 107, 165, 200], "evaluationlogextend": [94, 137, 165, 171, 200], "parquet": [94, 165, 200], "includeallconfidencescor": [94, 165, 200], "slow": [94, 124, 165, 200], "down": [94, 124, 165, 200], "speed": 94, "stdout": [94, 153, 165, 188, 200], "enablememoryoptim": [94, 165, 200], "practic": [94, 165, 200], "slower": [94, 165, 200], "evei": [94, 165, 200], "bach": [94, 165, 200], "tagsmap": [94, 165, 200], "oldtag": [94, 165, 200], "newtag": [94, 165, 200], "vip": [94, 165, 200], "overrideexistingtag": 94, "earlystoppingpati": [94, 165, 200], "wait": [94, 165, 200], "earli": [94, 165, 200], "earlystoppingcriterion": [94, 165, 200], "soon": [94, 165, 200], "met": [94, 165, 200], "patienc": [94, 165, 200], "f1": [94, 165, 200, 213, 218, 229, 233], "socr": [94, 165, 200], "prioriti": [94, 121, 165, 200], "infin": [94, 165, 200], "pretrainedmodelpath": [94, 107, 113, 146, 165, 180, 200], "point": [94, 107, 113, 146, 165, 180, 200], "logprefix": [94, 165, 200], "append": [94, 110, 123, 150, 165, 184, 200], "usebestmodel": [94, 165, 200], "overrid": [94, 97, 107, 113, 146, 180], "sentencetokenindex": 94, "thu": [94, 165, 200, 203], "trainingdata": [94, 165, 200], "readdataset": [94, 165, 200, 217], "conll2003": [94, 165, 200], "eng": [94, 165, 200, 217], "randomvalidationsplitperepoch": 94, "setusecontrib": 94, "setlr": [94, 153, 188], "setpo": 94, "rage": [94, 165], "setincludeallconfidencescor": 94, "bad": [94, 153, 188], "lost": 94, "setusebestmodel": 94, "across": 94, "setlogprefix": 94, "setpretrainedmodelpath": [94, 107, 113], "setoverrideexistingtag": [94, 165, 200], "settagsmap": 94, "setearlystoppingcriterion": 94, "setearlystoppingpati": 94, "termin": [94, 104], "setrandomvalidationsplitperepoch": 94, "setsentencetokenindex": 94, "nerdlapproach": [94, 124, 165, 200, 208], "wordembed": [94, 165, 200], "glove_100d": [94, 165, 200], "inferencebatchs": [94, 165, 200], "labelcas": [94, 165, 200], "offici": [94, 165, 200], "ekeu": [94, 165, 200], "baghdad": [94, 165, 200], "trainingclassdistribut": 94, "setinferencebatchs": 94, "setlabelcas": 94, "gettrainingclassdistribut": 94, "nerchunk": [95, 107, 108, 149, 183], "neighbor": [95, 127], "dt": 95, "jj": 95, "ner_radiologi": 95, "imagingfind": 95, "bodypart": 95, "regexpars": 95, "commonnerconverterinternalparam": 96, "preserveposit": 96, "greedymod": 96, "contigu": 96, "ignorestopword": 96, "setallowlist": 96, "loc": [96, 233], "setdenylist": [96, 125], "setpreserveposit": 96, "preserve_posit": 96, "setgreedymod": 96, "greedy_mod": 96, "setthreshold": [96, 113, 146, 180], "setignorestopword": 96, "stopword": 96, "iob2": [96, 211, 212], "friendli": 96, "annotatorapproach": 96, "nerconverterinternalmodel": 96, "outsid": 96, "substitut": [96, 120], "replaced_ner_chunk": 96, "drug_brandnam": 96, "drug_frequ": 96, "drug_dosag": 96, "drug_strength": 96, "nertemplaterendermodel": 97, "scala": [97, 105, 117, 118, 127, 129, 130, 157, 159, 192, 194], "inherit": [97, 117, 118, 127, 130, 157, 159, 192, 194], "mix": [97, 117, 118, 127, 130, 157, 159, 192, 194], "ins": [97, 117, 118, 127, 130, 157, 159, 192, 194], "uid": [97, 117, 118, 127, 130, 157, 159, 192, 194, 202], "templat": [97, 104, 110, 119, 120, 150, 158, 160, 184, 193, 195], "entityscop": 97, "resampleent": 97, "combineent": 97, "permuteent": 97, "settempl": 97, "liststr": 97, "setentityscop": 97, "render": 97, "setresampleent": 97, "resampl": 97, "enough": 97, "setcombineent": 97, "setpermuteent": 97, "permut": 97, "even": 97, "zeroshotnermodel": [98, 167, 201], "shot": [98, 110, 150, 167, 184, 201], "robertaforquestionansw": [98, 167, 201], "entitydefinit": [98, 167, 201], "question": [98, 104, 105, 158, 167, 193, 201], "citi": [98, 115, 167, 201, 215], "town": [98, 167, 201], "predictionthreshold": [98, 107, 108, 110, 149, 150, 167, 183, 184, 201], "01f": [98, 167, 201], "ignoreent": [98, 167, 201], "setentitydefinit": [98, 167, 201], "clara": [98, 167, 201], "live": [98, 167, 201, 215], "york": [98, 167, 201], "hellen": [98, 167, 201], "pari": [98, 167, 201], "5328949": [98, 167, 201], "9360068": [98, 167, 201], "83294415": [98, 167, 201], "45366877": [98, 167, 201], "setpredictionthreshold": [98, 107, 108, 149, 183], "zero_shot_ner_roberta": 98, "els": 99, "anchordateyear": 99, "anchor": 99, "tomorrow": 99, "2021": [99, 109, 168], "anchordatemonth": 99, "month": 99, "januari": 99, "anchordatedai": 99, "08": [99, 168], "12mar2021": 99, "jan": 99, "3april": 99, "2020": [99, 168], "mondai": [99, 153, 188], "todai": 99, "week": 99, "original_d": 99, "date_chunk": 99, "setanchordateyear": 99, "2000": 99, "setanchordatemonth": 99, "setanchordatedai": 99, "normalized_d": 99, "outputdateformat": 99, "defaultreplacementdai": 99, "defaultreplacementmonth": 99, "defaultreplacementyear": 99, "setoutputdateformat": 99, "setdefaultreplacementdai": 99, "setdefaultreplacementmonth": 99, "06": 99, "setdefaultreplacementyear": 99, "drugnorm": 100, "apac": 100, "discuss": 100, "blog": 100, "post": [100, 120], "abbrevi": 100, "oral": 100, "sol": 100, "solut": 100, "million": [100, 119, 120, 123, 160, 195], "10000000": 100, "unt": 100, "sodium": 100, "chlorid": 100, "potassium": 100, "13bag": 100, "interferon": 100, "alfa": 100, "2b": 100, "injec": 100, "meq": 100, "document_norm": 100, "trainingpipelin": 100, "normalized_text": [100, 113, 146, 180], "bag": 100, "inject": 100, "setpolici": 100, "beamsearchparam": 102, "maxcontextlength": [102, 104, 119, 120, 158, 160, 193, 195], "dosampl": [102, 104, 117, 119, 120, 158, 160, 193, 195], "topk": [102, 104, 117, 119, 120, 158, 160, 193, 195], "ignoretokenid": [102, 104, 117, 119, 120, 158, 160, 193, 195], "maxnewtoken": [102, 104, 117, 119, 120, 158, 160, 193, 195], "norepeatngrams": [102, 104, 117, 119, 120, 158, 160, 193, 195], "setignoretokenid": [102, 117], "decod": [102, 104, 117, 119, 120, 158, 160, 193, 195], "setmaxcontextlength": 102, "setdosampl": [102, 117], "greedi": [102, 104, 117, 119, 120, 158, 160, 193, 195], "settopk": [102, 117], "vocabulari": [102, 104, 117, 119, 120, 158, 160, 193, 195], "setmaxnewtoken": [102, 104, 117, 119, 120, 158, 160, 193, 195], "setnorepeatngrams": [102, 117], "medicalquestionansw": [104, 158, 193], "gpt": [104, 119, 120, 158, 160, 193, 195], "answer": [104, 105, 119, 120, 123, 158, 160, 193, 195], "span": [104, 158, 193], "capabl": [104, 158, 193], "ye": [104, 158, 193], "questiontyp": [104, 158, 193], "card": [104, 158, 193, 215], "repeat": [104, 119, 120, 158, 160, 193, 195, 209], "prevent": [104, 119, 120, 124, 158, 160, 193, 195], "customprompt": [104, 119, 120, 158, 160, 193, 195], "prompt": [104, 119, 120, 158, 160, 193, 195], "usecach": [104, 117, 119, 158, 193], "spare": [104, 158, 193], "studi": [104, 158, 193], "failur": [104, 113, 158, 193], "breast": [104, 158, 193], "cancer": [104, 110, 158, 193], "chest": [104, 158, 193], "wall": [104, 158, 193], "irradi": [104, 158, 193], "mastectomi": [104, 158, 193], "multidocumentassembl": [104, 158, 193], "document_quest": [104, 158, 193], "document_context": [104, 158, 193], "med_qa": [104, 158, 193], "medical_qa_biogpt": [104, 158, 193], "setquestiontyp": [104, 158, 193], "modeltyp": [104, 119], "mlframeworktyp": [104, 117, 119], "setusecach": [104, 119], "setcustomprompt": [104, 119], "setquestionanswertermin": 104, "questiontermin": 104, "symbol": [104, 230], "setquestionprompt": 104, "questionprompt": 104, "setquestionskiplasttoken": 104, "questionskiplasttoken": 104, "getquestiontyp": 104, "loadmedicaltextgener": 104, "med_text_generator_path": 104, "medicaltextgener": [104, 119, 120, 160, 195], "flan_t5_base_jsl_qa": 104, "nerquestiongener": 105, "pronoun": 105, "questionpronoun": 105, "questionmark": 105, "questionanswer": 105, "why": 105, "strategytyp": 105, "entities1": 105, "entities2": 105, "qagener": 105, "setquestionmark": 105, "setquestionpronoun": 105, "setstrategytyp": 105, "setentities1": 105, "setentities2": 105, "admiss": 105, "zeroshotn": 105, "align": [105, 209, 211], "third": 105, "relationextractionmodel": [107, 108, 149, 183], "tensorflow_graph": 107, "relationdirectioncol": 107, "decript": 107, "fromentitybegincol": 107, "fromentityendcol": 107, "fromentitylabelcol": 107, "toentitybegincol": 107, "toentityendcol": 107, "toentitylabelcol": 107, "leftward": 107, "rightward": 107, "symmetr": 107, "embedd": [107, 108, 149, 183], "postag": [107, 108, 149, 183], "ner_events_clin": [107, 108, 149, 183], "depencypars": [107, 108, 149, 183], "relations_t": 107, "target_rel": 107, "05": [107, 168], "from_begin": 107, "from_end": 107, "from_label": 107, "to_begin": 107, "to_end": 107, "to_label": 107, "traindata": [107, 108, 149, 183], "customlabel": [107, 108, 170], "overrideexistinglabel": 107, "begin_col": 107, "label_col": [107, 136], "setcustomlabel": [107, 108], "setrelationdirectioncol": 107, "set\u043everrideexistinglabel": 107, "annotatormodel": 107, "relationpair": [107, 108, 109, 149, 183], "dash": [107, 109], "biomark": 107, "relativedai": 107, "relationpairscasesensit": [107, 109], "relationtypeperpair": 107, "problem": [107, 109, 110, 124, 150, 184, 217], "symtom": 107, "external_body_part_or_region": [107, 108, 109, 149, 183], "internal_organ_or_compon": [107, 108, 109, 149, 183], "re_model": [107, 108, 110, 149, 183], "re_bodypart_direct": 107, "setrelationpair": [107, 108, 109, 110, 149, 183], "mri": [107, 108, 109, 110, 149, 183], "demonstr": [107, 108, 109, 149, 183], "infarct": [107, 108, 109, 149, 183], "brain": [107, 108, 109, 149, 183], "cerebellum": [107, 108, 109, 149, 183], "basil": [107, 108, 109, 149, 183], "ganglia": [107, 108, 109, 149, 183], "chunk1": [107, 108, 149, 183, 217], "chunk2": [107, 108, 149, 183, 217], "far": [107, 109], "recal": [107, 218, 229, 233], "setrelationpairscasesensit": [107, 109], "setrelationtypeperpair": 107, "relationtypepair": 107, "getrelationtypeperpair": 107, "posology_r": 107, "posologyremodel": 107, "posologi": 107, "genericremodel": 107, "relationextractiondlmodel": [108, 109, 149, 183], "contrast": [108, 149, 183], "re_ner_chunk_filt": [108, 109, 110, 149, 183], "renerchunksfilt": [108, 109, 110, 149, 150, 183, 184], "re_ner_chunk": [108, 109, 110, 149, 183], "redl_bodypart_direction_biobert": [108, 149, 183], "redl_ade_biobert": 108, "realtionpair": 109, "advers": 109, "reaction": 109, "realat": 109, "further": 109, "ner_clinical_en": 109, "html": 109, "analyz": 109, "awai": 109, "doclevelrel": 109, "words_embedd": [109, 110], "pos_tagg": [109, 110], "clinical_ner_tagg": 109, "jsl_ner_wip_greedy_clin": 109, "trained_pipelin": 109, "cre": 109, "re_chunk": 109, "paired_to": 109, "59": 109, "setdoclevelrel": [109, 110], "zeroshotrelationextractionmodel": [110, 150, 184], "nli": [110, 150, 184], "statement": [110, 150, 184], "regard": [110, 150, 184], "relationalcategori": [110, 150, 170, 184], "hypothesi": [110, 150, 184], "cure": [110, 150, 184], "5f": [110, 150, 184], "multilabel": [110, 150, 184], "categor": [110, 150, 184, 232], "spark_sbert_zero_shot": 110, "setrelationalcategori": 110, "reveal": [110, 150, 184], "setmultilabel": 110, "allevi": 110, "headach": 110, "sick": 110, "9760039": [110, 150, 184], "98819494": [110, 150, 184], "9929625": [110, 150, 184], "negativerelationship": 110, "setnegativerelationship": 110, "serv": 110, "zero_shot_r": 110, "resolvermerg": 112, "enit": 112, "resolv": [112, 113, 146, 180], "sentenceresolverparam": 113, "famili": 113, "distancefunct": 113, "mover": 113, "wmd": 113, "euclidean": 113, "neighbour": 113, "knn": 113, "algorithmm": 113, "queri": 113, "tree": [113, 146, 180], "nearest": 113, "confidencefunct": 113, "invers": 113, "missasempti": 113, "unmatch": 113, "setdistancefunct": [113, 146, 180], "setneighbour": [113, 146, 180], "algorithmn": 113, "thre": 113, "setconfidencefunct": 113, "conf_funct": 113, "setmissasempti": 113, "sentenceentityresolverapproach": [113, 146, 180], "sentenceentityresolvermodel": [113, 146, 180], "standart": 113, "aux_label": 113, "auxiliari": [113, 146, 180], "better": [113, 124], "overrideexistingcod": [113, 146, 180], "unwant": 113, "dropcodeslist": [113, 146, 180], "flavour": 113, "normalizedcol": [113, 146, 180], "returncosinedist": [113, 146, 180], "aux_label_col": [113, 146, 180], "useauxlabel": [113, 146, 180], "conceptid": 113, "concept": 113, "snome": [113, 146, 180], "concept_nam": 113, "108367008": 113, "disloc": 113, "joint": 113, "3384011000036100": 113, "arthrotec": 113, "166717003": 113, "serum": 113, "creatinin": 113, "3877011000036101": 113, "lipitor": 113, "402234004": 113, "foot": 113, "eczema": 113, "36031001": 113, "burn": 113, "feet": 113, "76948002": 113, "42399005": 113, "renal": [113, 168], "sent_biobert_pubmed_base_cas": [113, 146, 180], "data_pipelin": 113, "data_processing_model": 113, "prepared_data": 113, "bertextractor": [113, 146, 180], "bert_embed": [113, 146, 180], "setnormalizedcol": [113, 146, 180], "snomed_cod": [113, 146, 180], "euclidian": [113, 146, 180], "setuseauxlabel": 113, "setauxlabelcol": 113, "snomedmodel": [113, 146, 180], "auxlabel": [113, 146, 180], "setextractcosinedist": 113, "setoverrideexistingcod": 113, "setdropcodeslist": 113, "leav": 113, "ontologi": [113, 146, 180], "curat": [113, 146, 180], "rxnorm": [113, 146, 180], "searchtre": [113, 146, 180], "structfeature_hadoopfix": 113, "encapsul": 113, "serializablekdtre": 113, "multidimension": 113, "approch": 113, "jon": 113, "loui": 113, "bentlei": 113, "1975": 113, "commun": [113, 168], "acm": 113, "sept": 113, "509": 113, "517": 113, "doi": 113, "1145": 113, "361002": 113, "361007": 113, "sbertresolve_icd10cm_slim_billable_hcc_m": 113, "icd10_cod": [113, 232], "icd10extractorpipelin": 113, "icd10model": 113, "setsearchtre": 113, "search_tre": 113, "usuali": 113, "kdtree": 113, "sbiobertresolve_icd10cm_augmented_billable_hcc": 113, "resolution2chunk": 114, "filterfieldsel": 115, "metadatafield": [115, 123], "rules2": 115, "setstrategi": 115, "match_al": 115, "doc_chunk": 115, "sent_small_bert_l2_128": 115, "router_name_embed": 115, "setmetadatafield": [115, 123], "setfilterfieldsel": 115, "names_embed": 115, "router_city_embed": 115, "cities_embed": 115, "router_nam": 115, "names_chunk": 115, "medicalencoderdecod": 117, "stopateo": [117, 119], "maxtextlength": [117, 119], "refinesummari": 117, "refinesummarytargetlength": 117, "refinechunks": 117, "refinemaxattempt": 117, "setrefinesummari": 117, "refin": 117, "cost": 117, "summari": 117, "setrefinesummarytargetlength": 117, "setrefinechunks": 117, "Be": 117, "llm": 117, "setrefinemaxattempt": 117, "summarytargetlength": 117, "setstopateo": [117, 119], "encount": [117, 119], "setmaxtextlength": [117, 119], "medicalsummar": [118, 120], "use_cach": [118, 159, 194], "facilit": [118, 159, 194], "summarizer_clinical_jsl_aug": 118, "popul": [119, 120, 160, 195], "covid": [119, 120, 160, 195], "document_prompt": [119, 120, 160, 195], "med_text_gener": [119, 120, 160, 195], "convid": [119, 120, 160, 195], "peopl": [119, 120, 160, 195], "worldwid": [119, 120, 160, 195], "setadditionaltoken": 119, "additionaltoken": 119, "getadditionaltoken": 119, "model_typ": [119, 120, 160, 195], "text_generator_biomedical_biogpt_bas": 119, "tablelimit": 120, "settablelimit": 120, "tabl": 120, "setschema": 120, "schema": [120, 217], "getschema": 120, "setpostprocessingsubstitut": 120, "getpostprocessingsubstitut": 120, "text2sql_mimicsql": 120, "sourcetrackingmetadataparam": 121, "includeoutputcolumn": 121, "outputcolumnkei": 121, "includestandardfield": 121, "standardfieldkei": 121, "allpossiblefieldstostandard": 121, "setincludeoutputcolumn": 121, "setoutputcolumnkei": 121, "setincludestandardfield": 121, "setstandardfieldkei": 121, "setallpossiblefieldstostandard": 121, "internaldocumentsplitt": 123, "small": 123, "setsplitmod": 123, "splitmod": 123, "recurs": 123, "subtext": 123, "perfect": 123, "reason": [123, 168], "observ": 123, "world": 123, "setsplitpattern": 123, "interpret": 123, "setpatternsareregex": 123, "setkeepsepar": 123, "settrimwhitespac": 123, "individu": 123, "setexplodesplit": 123, "chunksiz": 123, "applic": [123, 211, 212, 232], "chunkoverlap": 123, "splitpattern": 123, "trfv": 123, "patternsareregex": 123, "keepsepar": 123, "explodesplit": 123, "trimwhitespac": 123, "segment": [123, 168], "suppli": 123, "sentenceawar": 123, "maxlength": 123, "spit": 123, "customboundsstrategi": 123, "bound": [123, 230], "enablesentenceincr": 123, "brioni": 123, "lodg": 123, "serpentin": 123, "aven": 123, "19798": 123, "39395": 123, "19597": 123, "woman": 123, "think": 123, "39371": 123, "59242": 123, "19871": 123, "But": 123, "said": 123, "red": [123, 230], "men": 123, "59166": 123, "77833": 123, "18667": 123, "friend": 123, "enthusiast": 123, "musician": 123, "himself": 123, "capab": 123, "77835": 123, "97769": 123, "19934": 123, "And": 123, "am": [123, 153, 188], "convinc": 123, "97771": 123, "117248": 123, "19477": 123, "slate": 123, "colour": 123, "broad": 123, "brim": 123, "straw": 123, "hat": 123, "feather": 123, "117250": 123, "137242": 123, "19992": 123, "That": 123, "sound": 123, "littl": 123, "paradox": 123, "profoundli": 123, "singulari": 123, "137244": 123, "157171": 123, "19927": 123, "optionalinputannotatortyp": 123, "setsentenceawar": 123, "setmaxlength": 123, "setcustomboundsstrategi": 123, "No": [123, 217], "setenablesentenceincr": 123, "tfgraphbuildermodel": 124, "sinc": 124, "seri": [124, 208, 211, 212], "edg": 124, "biggest": 124, "backbon": 124, "program": 124, "graph_fold": 124, "re_graph_fold": 124, "setmodelnam": 124, "re_graph": 124, "sethiddenlay": 124, "sethiddenact": 124, "sethiddenactl2": 124, "sethiddenweightsl2": 124, "setbatchnorm": 124, "modelnam": 124, "hiddenunitsnumb": 124, "hiddenlay": 124, "maxsequencelength": 124, "hiddenact": 124, "hiddenactl2": 124, "hiddenweightsl2": 124, "batchnorm": 124, "islicens": 124, "userelationdirect": 124, "outputact": 124, "gethiddenact": 124, "l2": 124, "aka": 124, "techniqu": 124, "overfit": 124, "involv": 124, "encourag": 124, "gethiddenactl2": 124, "gethiddenweightsl2": 124, "stabil": 124, "getbatchnorm": 124, "setislicens": 124, "medicalneraprroach": 124, "getislicens": 124, "neuron": 124, "gethiddenlay": 124, "hiudden": 124, "setmaxsequencelength": 124, "low": 124, "lose": 124, "valuabl": 124, "On": 124, "hand": 124, "consum": 124, "excess": 124, "getmaxsequencelength": 124, "sethiddenunitsnumb": 124, "solv": 124, "gethiddenunitsnumb": 124, "setuserelationdirect": 124, "getuserelationdirect": 124, "settoutputact": 124, "getoutputact": 124, "getmodelnam": 124, "getlabelcolumn": 124, "getinputcol": 124, "getgraphfold": 124, "greaph": 124, "getgraphfil": 124, "whiteblacklistparam": 125, "windowedparam": 127, "windows": 127, "gluestr": 127, "setwindows": 127, "slide": 127, "setgluestr": 127, "windowedsentencemodel": 127, "annotatorapproachintern": 129, "estim": 129, "annotatormodelintern": 130, "annotatorpropertiesintern": 131, "compon": 131, "attach": 131, "setforceinputtypevalid": 131, "inputcolsvalid": 131, "annotator_approach_intern": [132, 169], "annotator_model_intern": [132, 169], "annotator_properties_intern": [132, 169], "verifi": 133, "findvers": 133, "privat": [133, 214], "showvers": 133, "customtransform": 134, "custom_pipelin": 135, "masking_polici": 135, "fixed_mask_length": 135, "obfuscate_d": 135, "obfuscate_ref_sourc": 135, "obfuscate_ref_file_path": 135, "age_group_obfusc": 135, "age_rang": 135, "shift_dai": [135, 223], "number_of_dai": 135, "documenthashcoder_col_nam": 135, "date_tag": 135, "unnormalized_d": 135, "unnormalized_mod": 135, "id_column_nam": 135, "date_shift_column_nam": 135, "multi_mode_file_path": 135, "domain": 135, "input_file_path": [135, 223], "output_file_path": [135, 223], "deid_with_custom_pipelin": 135, "pretrained_pipelin": 135, "deid_with_pretrained_pipelin": 135, "norvigspellevalu": 136, "test_fil": 136, "ground_truth_fil": 136, "computeaccuracyannot": 136, "train_fil": 136, "computeaccuracymodel": 136, "symspellevalu": 136, "nerdlevalu": 136, "tag_level": 136, "full_chunk": 136, "computemetricsfromdf": 136, "prediction_col": 136, "drop_o": 136, "case_sensit": [136, 217], "nercrfevalu": 136, "posevalu": 136, "olumn": [137, 171], "eval": [137, 169, 171], "finassertiondl_time_md": 137, "doesnt": [139, 173], "tha": [139, 173], "ouptut": [139, 173], "finner_deid": 139, "financedocumenthashcod": 140, "setidcolumn": [140, 174], "document_hashcod": [141, 142, 175, 176], "finmapper_edgar_companynam": 143, "snomedtrainingpipelin": [146, 180], "snomedtrainingmodel": [146, 180], "snomeddata": [146, 180], "thiu": 146, "finel_edgar_company_nam": 146, "finre_financial_smal": 149, "finre_zero_shot": 150, "chunk_classif": [151, 169, 185], "sequence_classif": [151, 169, 185], "finance_bert_for_sequence_classif": [151, 156], "finance_classifier_dl": [151, 156], "finance_document_ml_classifi": [151, 156], "finance_few_shot_classifi": [151, 156], "sequence_gener": [151, 169, 185], "finance_encoder_decod": [151, 161], "finance_qa": [151, 161], "finance_summar": [151, 161], "finance_text_gener": [151, 161], "token_classif": [151, 169, 185], "financebertforsequenceclassif": 152, "financebertfortokenclassif": [152, 164], "finclf_bert_banking77": 152, "financeclassifierdlapproach": 153, "classifierdl": [153, 188], "univers": [153, 188], "dnn": [153, 188], "classifierdlmodel": [153, 188], "multiclassifierdlapproach": [153, 188], "sentimentdlapproach": [153, 188], "item": [153, 188, 209, 221], "doubl": [153, 188], "universalsentenceencod": [153, 188], "movi": [153, 188], "wach": [153, 188], "ever": [153, 188], "opinion": [153, 188], "win": [153, 188], "award": [153, 188], "terribl": [153, 188], "realli": [153, 188], "trane": [153, 188], "smallcorpu": [153, 188], "useembed": [153, 188], "docclassifi": [153, 188], "classifierdlapproach": [153, 188], "5e": [153, 188], "financeclassifierdlmodel": [153, 154], "financeclassifierdl": 153, "classifierdl_use_trec6": [153, 188], "trec": [153, 188], "multiclassifierdlmodel": [153, 188], "sentimentdlmodel": [153, 188], "sarcasmdl": [153, 188], "classifierdl_use_sarcasm": [153, 188], "sarcasm": [153, 188], "m": [153, 168, 188, 215], "readi": [153, 188], "love": [153, 188], "wake": [153, 188], "arrays_zip": [153, 188], "finclf_sec_fil": 153, "financedocumentmlclassifierapproach": 154, "financedocumentmlclassifiermodel": [154, 189], "financefewshotclassifierapproach": 155, "financefewshotclassifi": 155, "financefewshotclassifiermodel": 155, "financeencoderdecod": 157, "financequestionansw": 158, "biogpt_pubmed_qa": [158, 193], "financesummar": 159, "finsum_flant5_finetuned_sec10k": 159, "financetextgener": 160, "fingen_flant5_finetuned_sec10k": 160, "financenerquestiongener": 162, "finance_bert_for_token_classifi": [163, 166], "finance_n": [163, 166], "financebertfortokenclassifi": 164, "finner_responsibility_report": 164, "financenerapproach": 165, "verif": [165, 200], "greather": [165, 200], "financenermodel": [165, 200], "teh": [165, 200], "finner_sec_10k_summari": 165, "finner_roberta_zeroshot": 167, "profil": 168, "code_arrai": 168, "sex": 168, "elig": 168, "cna": 168, "orec": 168, "medicaid": 168, "cm": 168, "hcc": [168, 232], "intens": 168, "adjust": [168, 232], "icd10": 168, "cfa": 168, "benefit": 168, "dual": 168, "cfd": 168, "nondual": 168, "cnd": 168, "cpa": 168, "cpd": 168, "INS": 168, "institut": 168, "enrolle": 168, "snpne": 168, "snp": 168, "entitl": 168, "survivor": 168, "diseas": [168, 232], "dib": 168, "esrd": 168, "profileesrdv21y19": 168, "di": 168, "21": [168, 217], "2019": 168, "gc": 168, "gi": 168, "dne": 168, "gne": 168, "profilev28": 168, "profilev28y24": 168, "2024": 168, "profilev24y19": 168, "24": 168, "profilev24y20": 168, "profilev24y21": 168, "profilev24y22": 168, "profilev24": 168, "profilev23y18": 168, "profilev23y19": 168, "profilev23": 168, "profilev22y17": 168, "profilev22y18": 168, "profilev22y19": 168, "profilev22y20": 168, "profilev22y21": 168, "profilev22y22": 168, "profilev22": 168, "profilerxhccv05y20": 168, "ce_nolowag": 168, "rxhcc": [168, 232], "illeg": 168, "profilerxhccv05y21": 168, "profilerxhccv05y22": 168, "profilerxhccv05y23": 168, "profilerxhccv08y22": 168, "profilerxhccv08y23": 168, "nlp_test": 169, "noisy_label": [169, 205], "alab_util": [169, 225], "conll_pars": [169, 225], "deidentification_util": [169, 225], "java_help": [169, 225], "licensed_annotator_typ": [169, 225], "log_pars": [169, 225], "ner_util": [169, 225], "ocr_nlp_processor": [169, 225], "ocr_util": [169, 225], "risk_adjustment_util": [169, 225], "training_log_parser_util": [169, 225], "alab": [169, 221], "custom_transform": 169, "deidentification_modul": 169, "modeltrac": 169, "structured_deidentif": 169, "text_to_documents_column": 169, "training_log_pars": 169, "updatemodel": 169, "transformer_seq_classif": 169, "version_regex": 169, "size_regex": 169, "apple_silicon": 169, "aarch64": 169, "public": [169, 214, 231], "m1": 169, "get_credenti": 169, "secretkei": 169, "keyid": 169, "pub_vers": 169, "library_set": 169, "legassertion_time_md": 171, "legner_deid": 173, "legaldocumenthashcod": 174, "legmapper_edgar_companynam": 177, "legel_edgar_company_nam": 180, "legre_contract_doc_parti": 183, "legre_zero_shot": 184, "legal_bert_for_sequence_classif": [185, 186], "legal_classifier_dl": [185, 186], "legal_document_ml_classifi": [185, 186], "legal_few_shot_classifi": [185, 186], "legal_encoder_decod": [185, 191], "legal_qa": [185, 191], "legal_summar": [185, 191], "legal_text_gener": [185, 191], "legalbertforsequenceclassif": 187, "legalbertfortokenclassif": [187, 199], "legclf_reddit_advic": 187, "legalclassifierdlapproach": 188, "legalclassifierdlmodel": [188, 189], "legalclassifierdl": 188, "legclf_argument_min": 188, "legaldocumentmlclassifierapproach": 189, "legaldocumentmlclassifiermodel": 189, "legalfewshotclassifierapproach": 190, "legalfewshotclassifi": 190, "legalfewshotclassifiermodel": 190, "legalencoderdecod": 192, "legalquestionansw": 193, "legalsummar": 194, "legsum_flant5_legal_aug": 194, "legaltextgener": 195, "leggen_flant5_finetun": 195, "legalnerquestiongener": 196, "legal_bert_for_token_classifi": [197, 198], "legal_n": [197, 198], "legalbertfortokenclassifi": 199, "legner_bert_gr": 199, "legalnerapproach": 200, "legalnermodel": 200, "legner_contract_doc_parties_lg": 200, "legner_roberta_zeroshot": 201, "adduidcol": 202, "timestamp": 202, "init_medical_gender_classifi": 203, "rulebasedclassifi": 203, "test_gender_bia": 203, "ner_pipelin": [203, 217, 230], "test_conl": 203, "classifier_pipelin": 203, "training_conl": 203, "log_path": [203, 208, 211, 212, 218, 229], "gender_bias_result": 203, "explode_sent": 203, "doc_amount": 203, "training_set_gender_distribut": 203, "test_set_gender_distribut": 203, "test_set_metr": 203, "bias_test": [204, 205], "noisy_label_fix": [205, 206], "noisy_label_test": [205, 206], "robustness_fix": [205, 210], "robustness_test": [205, 210], "conll_read": [207, 211], "conll_writ": 207, "chunk_tag": [207, 233], "save_path": 207, "docs_indx": 207, "sentences_list": 207, "tags_list": 207, "labels_list": 207, "track": 207, "written": 207, "update_with_model_predict": 207, "fix_df": 207, "test_label_error": [207, 208], "sent_indx": 207, "token_indx": 207, "apply_label_fix": 207, "label_fix": 207, "sent_index": 207, "add_flag_to_conl": 207, "flag_index": 207, "speech": 207, "interactivefix": 207, "result_df": 207, "default_strategi": 207, "page_s": 207, "ui": 207, "jupyt": 207, "notebook": 207, "find_label_error": 207, "displai": [207, 209], "create_grid": 207, "fill_grid": 207, "ipywidget": 207, "gridspeclayout": 207, "get_head": 207, "get_central_grid": 207, "get_foot": 207, "get_page_control_button": 207, "next_pag": 207, "prev_pag": 207, "adjust_page_s": 207, "num_sample_drop_down": 207, "get_page_numb": 207, "empty_grid": 207, "get_class": 207, "fix_label": 207, "apply_fix": 207, "fix_al": 207, "get_drop_down_titl": 207, "get_cell_el": 207, "css_class": 207, "get_sent": 207, "get_default_indx": 207, "indx": 207, "get_drop_down": 207, "get_title_html": 207, "calculate_label_error_scor": 208, "numpi": 208, "pred_prob": 208, "get_label_quality_scor": 208, "np": 208, "class": [208, 234], "get_unique_ent": 208, "training_pipelin": 208, "noisy_label_test_result": 208, "fold": 208, "setincludeconfidencescor": 208, "noisi": [208, 211, 212], "stylesheet": 209, "multilin": 209, "background": 209, "color": [209, 230, 231], "0098da": 209, "center": 209, "footer": 209, "ffffff": 209, "ignore_margin": 209, "row_odd": 209, "262626": 209, "row_even": 209, "eaeaeb": 209, "page_button": 209, "border": [209, 221], "cursor": 209, "pointer": 209, "overflow": 209, "outlin": [209, 230], "table_titl": 209, "font": 209, "2em": 209, "500": 209, "title_text": 209, "70px": 209, "inlin": 209, "flex": [209, 211, 212], "dropdown": 209, "1px": 209, "solid": 209, "radiu": 209, "4px": 209, "aeaeae": 209, "kind": [211, 212], "perturb": [211, 212], "create_datafram": 211, "pos_sync_tag": 211, "synthet": 211, "filter_by_entity_typ": 211, "ent_typ": 211, "get_sampl": 211, "sample_data": 211, "create_terminologi": [211, 212], "terminologi": [211, 212], "modify_capitalization_upp": [211, 212], "augment": [211, 213, 217], "modify_capitalization_low": [211, 212], "modify_capitalization_titl": [211, 212], "add_punctuation_to_data": 211, "strip_punctuation_from_data": 211, "strip": [211, 212, 221], "senctenc": 211, "add_typo_to_sent": [211, 212], "introduce_typo": [211, 212], "introduc": [211, 212], "typo": [211, 212], "swap_entities_with_terminologi": 211, "get_cohyponyms_wordnet": [211, 212], "co": [211, 212], "hyponym": [211, 212], "wordnet": [211, 212], "swap_with_cohyponym": [211, 212], "databas": [211, 212], "convert_acc": 211, "lang_dict": [211, 212], "convers": [211, 212], "add_context_to_data": 211, "starting_context": [211, 212], "ending_context": [211, 212], "add_contract": [211, 212], "augment_robust": 211, "add_punctu": [211, 212], "strip_punctu": [211, 212], "make_typo": 211, "american_to_british": [211, 212], "british_to_american": [211, 212], "add_context": [211, 212], "swap_ent": [211, 212], "swap_cohyponym": [211, 212], "optimized_inplac": 211, "random_st": 211, "return_spark": 211, "conll_save_path": 211, "print_info": 211, "ignore_warn": 211, "nois": [211, 212], "american": [211, 212], "inplac": 211, "distinctli": 211, "warn": 211, "test_and_augment_robust": 211, "pipeline_model": [211, 212, 217], "test_file_path": [211, 212], "conll_path_to_aug": 211, "metric_typ": [211, 212], "metrics_output_format": [211, 212], "robustness_test_result": [211, 212], "noise_prob": [211, 212, 213], "liner": 211, "assembl": [211, 212, 221], "strict": [211, 212], "special": [211, 212, 220], "test_set_languag": [211, 212], "list_of_str": 212, "keep_numeric_punctu": 212, "ie": 212, "40": 212, "000": 212, "modify_capit": 212, "swap_named_entities_from_terminologi": 212, "remove_punctuation_token": 212, "remove_context_token": 212, "starting_context_token": 212, "ending_context_token": 212, "remove_contraction_token": 212, "list_with_contract": 212, "list_without_contract": 212, "calculate_metr": 212, "filtered_df": 212, "noise_typ": 212, "noise_descript": 212, "test_set": 212, "total_amount": 212, "original_annotations_df": 212, "noisy_test_set": 212, "token_filter_funct": 212, "starting_context_token_list": 212, "ending_context_token_list": 212, "disrupt": 212, "conll_sentence_read": 212, "test_robust": 212, "sample_sentence_count": 212, "calculate_proport": 213, "f1_score": 213, "suggest_perturb": 213, "test_result": 213, "suggest": 213, "get_augmentation_proport": 213, "pull": 213, "printprogress": 214, "progress": 214, "bar": 214, "consol": 214, "internalresourcedownload": 214, "downlod": 214, "downloadmodel": 214, "reader": [214, 217], "j_dwn": 214, "internalspythonresourcedownload": 214, "showprivatemodel": 214, "showprivatepipelin": 214, "showuncategorizedresourc": 214, "uncategor": 214, "showavailableannot": 214, "returnprivatemodel": 214, "returnprivatepipelin": 214, "downloadmodeldirectli": 214, "unzip": 214, "cache_folder_path": 214, "copi": 214, "uri": 214, "tabular": 215, "structureddeidentif": 215, "columnsse": 215, "userandomdatedisplac": 215, "countri": 215, "street": 215, "internet": 215, "profess": 215, "opf": 215, "screen": 215, "protein": 215, "someth": 215, "someon": 215, "healthplan": 215, "social": 215, "ip": 215, "protocol": 215, "nation": 215, "credit": 215, "bank": 215, "administr": 215, "obfuscatecolumn": 215, "texttodocumentscolumn": 216, "todocumentscolumn": 216, "annotationtooljsonread": 217, "cleanup_mod": 217, "split_char": 217, "context_char": 217, "min_chars_tol": 217, "align_chars_tol": 217, "merge_overlap": 217, "sddlpath": 217, "generateassertiontrainset": 217, "generateconl": 217, "creation": 217, "229937784": 217, "fih": 217, "18001": 217, "04t13": 217, "aleksei": 217, "136": 217, "142": 217, "37": 217, "79": 217, "305038693": 217, "65001": 217, "03t08": 217, "844970557": 217, "rwh": 217, "21001": 217, "00": 217, "84": 217, "97": 217, "914783811": 217, "97001": 217, "02t12": 217, "07": 217, "91": 217, "733882247": 217, "84001": 217, "02t15": 217, "73": 217, "77": 217, "assertion_df": 217, "rdr": 217, "sentencecol": 217, "assertioncol": 217, "generateplainassertiontrainset": 217, "taskcolumn": 217, "tokencol": 217, "nerlabel": 217, "codiespread": 217, "codiesp": 217, "readdatasettaskx": 217, "textfold": 217, "cantemistread": 217, "cantemist": 217, "readdatasettaskn": 217, "synonymaugmentationuml": 217, "umls_path": 217, "code_col": 217, "description_col": 217, "synonym": 217, "uml": 217, "augmentcsv": 217, "corpus_csv_path": 217, "do_product": 217, "augmentation_mod": 217, "plain_text": 217, "synonym_sourc": 217, "regex_pars": 217, "euclidean_distance_threshold": 217, "cosine_distance_threshold": 217, "synonym_limit": 217, "casing_funct": 217, "augmentdatafram": 217, "corpus_df": 217, "redatasethelp": 217, "spark_df": 217, "preprocess": 217, "i2b2_clinical_rel_dataset": 217, "column_map": 217, "begin1": 217, "firstcharent1": 217, "end1": 217, "lastcharent1": 217, "begin2": 217, "firstcharent2": 217, "end2": 217, "lastcharent2": 217, "create_annotation_column": 217, "txt_file": 217, "sent_id": 217, "beth": 217, "partner": 217, "i2b2": 217, "2010": 217, "va": 217, "tem": 217, "44": 217, "respiratori": 217, "satur": 217, "49": 217, "75": 217, "lotion": 217, "crea": 217, "146": 217, "trnap": 217, "incis": 217, "conc": 217, "43": [217, 231], "ter": 217, "picc": 217, "54": 217, "68": 217, "58": 217, "light": 217, "headed": 217, "diaphoresi": 217, "92": 217, "82": 217, "electroca": 217, "61": 217, "inferior": 217, "38": 217, "st": 217, "depressio": 217, "239": 217, "196": 217, "176": 217, "145": 217, "train_data": 217, "ner_column_nam": 217, "printschema": 217, "root": 217, "nullabl": 217, "ner_log_pars": 218, "parse_logfil": 218, "avg": 218, "get_chart": [218, 229], "log_fil": [218, 229], "plot": [218, 229], "figur": [218, 229], "precis": [218, 229, 233], "loss_plot": [218, 229], "get_best_f1_scor": 218, "micro": 218, "macro": 218, "true_seq": [218, 229, 233], "pred_seq": [218, 229, 233], "overal": [218, 229, 233], "simpli": [218, 229, 233], "evaluate_conll_fil": [218, 229], "fileiter": [218, 229], "assertion_log_pars": 218, "updatecachemodel": 219, "cache_fold": 219, "refresh": 219, "overwrit": 219, "start_dat": 219, "end_dat": 219, "get_mt_sampl": 220, "medical_speci": 220, "transcrib": 220, "transcript": 220, "mtsampl": 220, "allergy_immunologi": 220, "autopsi": 220, "bariatr": 220, "cardiovascular_pulmonari": 220, "chiropract": 220, "consult_history_and_phi": 220, "cosmetic_plastic_surgeri": 220, "dentistri": 220, "dermatologi": 220, "diets_and_nutrit": 220, "discharge_summari": 220, "emergency_room_report": 220, "endocrinologi": 220, "ent_otolaryngologi": 220, "gastroenterologi": 220, "general_medicin": 220, "hematology_oncologi": 220, "hospice_palliative_car": 220, "im": 220, "lab_medicine_pathologi": 220, "letter": 220, "nephrologi": 220, "neurologi": 220, "neurosurgeri": 220, "obstetrics_gynecologi": 220, "office_not": 220, "ophthalmologi": 220, "orthoped": 220, "pain_manag": 220, "pediatrics_neonat": 220, "physical_medicine_rehab": 220, "podiatri": 220, "psychiatry_psychologi": 220, "radiologi": 220, "rheumatologi": 220, "sleep_medicin": 220, "soap_chart_progress_not": 220, "speech_languag": 220, "surgeri": 220, "urologi": 220, "scrap": 220, "nlp_token_pipelin": 221, "nlp_pos_pipelin": 221, "token_pipeline_initi": 221, "pos_pipeline_initi": 221, "sentencedetectordlmodel": 221, "regular_token": 221, "regextoken": 221, "empty_df": 221, "get_doc_assembl": 221, "get_sent_detector": 221, "get_regular_token": 221, "get_regex_token": 221, "get_po": 221, "get_empty_df": 221, "get_nlp_token_pipelin": 221, "get_sentence_pipelin": 221, "get_rel_df": 221, "get_ner_df": 221, "get_ner_sentence_bord": 221, "get_nlp_pos_pipelin": 221, "tagger": 221, "get_single_task_conl": 221, "pos_pipelin": 221, "token_pipelin": 221, "style": [221, 224, 230, 231], "get_token_df": 221, "_type_": 221, "read_conl": 221, "filepath": 221, "strip_json_ent": 221, "exported_json": 221, "structured_deidentifi": 223, "columns_dict": 223, "ref_sourc": 223, "columns_se": 223, "date_format": 223, "is_module_import": 224, "lib": 224, "raise_except": 224, "pip_nam": 224, "message_typ": 224, "instruct": 224, "parse_str_to_dict": 226, "dict_str": 226, "row_separ": 226, "key_value_separ": 226, "is_value_list": 226, "value_separ": 226, "deseri": 226, "internalannotatortyp": 227, "selector": 227, "aqua": [230, 231], "aquamarin": [230, 231], "blanchedalmond": [230, 231], "blue": [230, 231], "blueviolet": [230, 231], "burlywood": [230, 231], "ocr_entity_processor": 230, "file_path": 230, "bounding_box": 230, "save_fold": 230, "label_color": 230, "box_color": 230, "color_chart_path": 230, "color_chart": 230, "png": 230, "chunk_col": 230, "black_list": 230, "display_result": 230, "pageiteratorlevel": 230, "pagesegmod": 230, "pagesegmentationmod": 230, "sparse_text_osd": 230, "outline_color": [230, 231], "outline_width": [230, 231], "text_band": [230, 231], "text_typ": 230, "ocr": [230, 231], "paint": 230, "highlight": [230, 232], "colored_box": 230, "draw": 230, "band": 230, "box": 230, "around": 230, "rgb": 230, "chart": 230, "entitii": 230, "width": 230, "writ": 230, "label2color": 231, "label2rgb": 231, "colors_rgb": 231, "255": 231, "127": 231, "212": 231, "235": 231, "205": 231, "138": 231, "226": 231, "165": 231, "pretrained_model": 231, "image_handwritten_detector_gsa0803": 231, "get_handwritten_region": 231, "draw_boxes_on_image_handwritten_region": 231, "image_data": 231, "riskadjustmentutil": 232, "hierarch": 232, "10th": 232, "revis": 232, "hcc_from_icd": 232, "hcc_label": 232, "hcc_list": 232, "diff_between_hcc": 232, "before_hcc_list": 232, "after_hcc_list": 232, "evolv": 232, "cc": 232, "escal": 232, "aggregate_ent": 233, "split_tag": 233, "chunk_typ": 233, "is_chunk_end": 233, "prev_tag": 233, "contradict": 233, "is_chunk_start": 233, "calc_metr": 233, "tp": 233, "percent": 233, "fb1": 233, "decim": 233, "count_chunk": 233, "correct_chunk": 233, "counter": 233, "correctli": 233, "true_chunk": 233, "pred_chunk": 233, "correct_count": 233, "true_count": 233, "pred_count": 233, "get_result": 233, "prec": 233, "rec": 233, "overview": 234}, "objects": {"": [[169, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [89, 0, 0, "-", "annotator"], [169, 3, 1, "", "annotators"], [128, 0, 0, "-", "base"], [132, 0, 0, "-", "common"], [133, 0, 0, "-", "compatibility"], [134, 0, 0, "-", "custom_transformer"], [135, 0, 0, "-", "deidentification_module"], [136, 0, 0, "-", "eval"], [151, 0, 0, "-", "finance"], [168, 0, 0, "-", "functions"], [169, 6, 1, "", "get_credentials"], [170, 0, 0, "-", "internal"], [185, 0, 0, "-", "legal"], [169, 6, 1, "", "library_settings"], [202, 0, 0, "-", "modelTracer"], [205, 0, 0, "-", "nlp_test"], [214, 0, 0, "-", "pretrained"], [169, 6, 1, "", "pub_version"], [169, 3, 1, "", "size_regex"], [169, 6, 1, "", "start"], [215, 0, 0, "-", "structured_deidentification"], [216, 0, 0, "-", "text_to_documents_columns"], [217, 0, 0, "-", "training"], [218, 0, 0, "-", "training_log_parser"], [169, 3, 1, "", "transformer_seq_classification"], [219, 0, 0, "-", "updateModels"], [220, 0, 0, "-", "util"], [225, 0, 0, "-", "utils"], [169, 6, 1, "", "version"], [169, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "FewShotClassifierTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "LogRegClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "SVMClassifierTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_IAA_metrics"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "review_annotations"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [89, 3, 1, "", "assertion"], [46, 0, 0, "-", "assertion"], [47, 0, 0, "-", "chunk2_token"], [89, 3, 1, "", "chunker"], [56, 0, 0, "-", "chunker"], [89, 3, 1, "", "classification"], [62, 0, 0, "-", "classification"], [89, 3, 1, "", "context"], [67, 0, 0, "-", "context"], [89, 3, 1, "", "deid"], [71, 0, 0, "-", "deid"], [89, 3, 1, "", "disambiguation"], [75, 0, 0, "-", "disambiguation"], [77, 0, 0, "-", "doc2_chunk_internal"], [78, 0, 0, "-", "document_filterer_by_classifier"], [83, 0, 0, "-", "embeddings"], [84, 0, 0, "-", "feature_assembler"], [85, 0, 0, "-", "filtering_params"], [89, 3, 1, "", "generic_classifier"], [87, 0, 0, "-", "generic_classifier"], [88, 0, 0, "-", "handle_exception_params"], [89, 3, 1, "", "keyword"], [91, 0, 0, "-", "merge"], [92, 0, 0, "-", "ner"], [101, 0, 0, "-", "normalizer"], [103, 0, 0, "-", "qa"], [106, 0, 0, "-", "re"], [111, 0, 0, "-", "resolution"], [114, 0, 0, "-", "resolution2_chunk"], [115, 0, 0, "-", "router"], [116, 0, 0, "-", "seq2seq"], [121, 0, 0, "-", "source_tracking_metadata_params"], [122, 0, 0, "-", "splitter"], [124, 0, 0, "-", "tf_graph_builder"], [125, 0, 0, "-", "white_black_list_params"], [126, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputAnnotatorTypes"], [42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 4, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "setInputCols"], [42, 2, 1, "", "setInputType"], [42, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_chunk_converter"], [45, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputAnnotatorType"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "entityAssertionCaseSensitive"], [43, 2, 1, "", "getEntityAssertion"], [43, 2, 1, "", "getReplaceLabels"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 4, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setEntityAssertion"], [43, 2, 1, "", "setEntityAssertionCaseSensitive"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setReplaceLabels"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[44, 4, 1, "", "chunkBeginCol"], [44, 4, 1, "", "chunkEndCol"], [44, 4, 1, "", "chunkTextCol"], [44, 4, 1, "", "inputAnnotatorTypes"], [44, 4, 1, "", "inputCols"], [44, 4, 1, "", "name"], [44, 4, 1, "", "outputAnnotatorType"], [44, 4, 1, "", "outputCol"], [44, 4, 1, "", "outputTokenBeginCol"], [44, 4, 1, "", "outputTokenEndCol"], [44, 2, 1, "", "setChunkBeginCol"], [44, 2, 1, "", "setChunkEndCol"], [44, 2, 1, "", "setChunkTextCol"], [44, 2, 1, "", "setInputCols"], [44, 2, 1, "", "setOutputCol"], [44, 2, 1, "", "setOutputTokenBeginCol"], [44, 2, 1, "", "setOutputTokenEndCol"], [44, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, 1, 1, "", "AssertionLogRegApproach"], [45, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "eNetParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "label"], [45, 4, 1, "", "maxIter"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 4, 1, "", "regParam"], [45, 2, 1, "", "setAfter"], [45, 2, 1, "", "setBefore"], [45, 2, 1, "", "setEndCol"], [45, 2, 1, "", "setEnet"], [45, 2, 1, "", "setLabelCol"], [45, 2, 1, "", "setMaxIter"], [45, 2, 1, "", "setNerCol"], [45, 2, 1, "", "setReg"], [45, 2, 1, "", "setStartCol"], [45, 2, 1, "", "setTargetNerLabels"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "name"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunk2_token": [[47, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[47, 4, 1, "", "inputAnnotatorTypes"], [47, 4, 1, "", "name"], [47, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker": [[48, 0, 0, "-", "assertion_filterer"], [49, 0, 0, "-", "chunk_converter"], [50, 0, 0, "-", "chunk_key_phrase_extraction"], [51, 0, 0, "-", "chunk_sentence_splitter"], [52, 0, 0, "-", "chunker_filterer"], [53, 0, 0, "-", "chunkmapper"], [54, 0, 0, "-", "chunkmapper_filterer"], [55, 0, 0, "-", "docmapper"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[48, 4, 1, "", "inputAnnotatorTypes"], [48, 4, 1, "", "name"], [48, 4, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "setCriteria"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[49, 4, 1, "", "inputAnnotatorTypes"], [49, 4, 1, "", "name"], [49, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[50, 4, 1, "", "concatenateSentences"], [50, 4, 1, "", "divergence"], [50, 4, 1, "", "documentLevelProcessing"], [50, 4, 1, "", "dropPunctuation"], [50, 4, 1, "", "inputAnnotatorTypes"], [50, 4, 1, "", "name"], [50, 4, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "pretrained"], [50, 4, 1, "", "selectMostDifferent"], [50, 2, 1, "", "setConcatenateSentences"], [50, 2, 1, "", "setDivergence"], [50, 2, 1, "", "setDocumentLevelProcessing"], [50, 2, 1, "", "setDropPunctuation"], [50, 2, 1, "", "setSelectMostDifferent"], [50, 2, 1, "", "setTopN"], [50, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[51, 4, 1, "", "defaultEntity"], [51, 4, 1, "", "groupBySentences"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "insertChunk"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "setDefaultEntity"], [51, 2, 1, "", "setGroupBySentences"], [51, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, 1, 1, "", "ChunkFilterer"], [52, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[52, 4, 1, "", "entitiesConfidence"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "setEntitiesConfidence"], [52, 2, 1, "", "setFilterEntity"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[52, 4, 1, "", "entitiesConfidenceResource"], [52, 4, 1, "", "entitiesConfidenceResourceAsJsonString"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "setEntitiesConfidenceResource"], [52, 2, 1, "", "setEntitiesConfidenceResourceAsJsonString"], [52, 2, 1, "", "setFilterEntity"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, 1, 1, "", "ChunkMapperApproach"], [53, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [53, 1, 1, "", "ChunkMapperModel"], [53, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[53, 4, 1, "", "dictionary"], [53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "setDictionary"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[53, 4, 1, "", "enableCharFingerprintMatching"], [53, 4, 1, "", "enableFuzzyMatching"], [53, 4, 1, "", "enableTokenFingerprintMatching"], [53, 4, 1, "", "fuzzyDistanceScalingMode"], [53, 4, 1, "", "fuzzyMatchingDistanceThresholds"], [53, 4, 1, "", "fuzzyMatchingDistances"], [53, 4, 1, "", "maxCharNgramFingerprint"], [53, 4, 1, "", "maxTokenNgramDroppingCharsRatio"], [53, 4, 1, "", "maxTokenNgramDroppingOperator"], [53, 4, 1, "", "maxTokenNgramDroppingTokens"], [53, 4, 1, "", "maxTokenNgramFingerprint"], [53, 4, 1, "", "minCharNgramFingerprint"], [53, 4, 1, "", "minTokenNgramFingerprint"], [53, 2, 1, "", "setEnableCharFingerprintMatching"], [53, 2, 1, "", "setEnableFuzzyMatching"], [53, 2, 1, "", "setEnableTokenFingerprintMatching"], [53, 2, 1, "", "setFuzzyDistanceScalingMode"], [53, 2, 1, "", "setFuzzyMatchingDistanceThresholds"], [53, 2, 1, "", "setFuzzyMatchingDistances"], [53, 2, 1, "", "setMaxCharNgramFingerprint"], [53, 2, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [53, 2, 1, "", "setMaxTokenNgramDroppingOperator"], [53, 2, 1, "", "setMaxTokenNgramDroppingTokens"], [53, 2, 1, "", "setMaxTokenNgramFingerprint"], [53, 2, 1, "", "setMinCharNgramFingerprint"], [53, 2, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "pretrained"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[53, 4, 1, "", "allowMultiTokenChunk"], [53, 4, 1, "", "lowerCase"], [53, 4, 1, "", "multivaluesRelations"], [53, 4, 1, "", "rel"], [53, 4, 1, "", "rels"], [53, 2, 1, "", "setAllowMultiTokenChunk"], [53, 2, 1, "", "setLowerCase"], [53, 2, 1, "", "setMultivaluesRelations"], [53, 2, 1, "", "setRel"], [53, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 4, 1, "", "returnCriteria"], [54, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, 1, 1, "", "DocMapperApproach"], [55, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[55, 4, 1, "", "dictionary"], [55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification": [[57, 0, 0, "-", "document_log_classifier"], [58, 0, 0, "-", "document_ml_classifier"], [59, 0, 0, "-", "few_shot_classifier"], [60, 0, 0, "-", "generic_log_reg_classifier"], [61, 0, 0, "-", "generic_svm_classifier"], [63, 0, 0, "-", "medical_bert_for_sequence_classification"], [64, 0, 0, "-", "medical_bert_for_token_classifier"], [65, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, 1, 1, "", "DocumentLogRegClassifierApproach"], [57, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[57, 4, 1, "", "classificationModelPath"], [57, 4, 1, "", "fitIntercept"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labelCol"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "maxIter"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "setClassificationModelPath"], [57, 2, 1, "", "setFitIntercept"], [57, 2, 1, "", "setLabelColumn"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMaxIter"], [57, 2, 1, "", "setTol"], [57, 2, 1, "", "setVectorizationModelPath"], [57, 4, 1, "", "tol"], [57, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[57, 4, 1, "", "classificationModel"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "mergeChunks"], [57, 4, 1, "", "name"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setClassificationModel"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMergeChunks"], [57, 2, 1, "", "setVectorizationModel"], [57, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, 1, 1, "", "DocumentMLClassifierApproach"], [58, 1, 1, "", "DocumentMLClassifierModel"], [58, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[58, 4, 1, "", "classificationModelClass"], [58, 4, 1, "", "classificationModelPath"], [58, 4, 1, "", "fitIntercept"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labelCol"], [58, 4, 1, "", "maxIter"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "setClassificationModelClass"], [58, 2, 1, "", "setClassificationModelPath"], [58, 2, 1, "", "setFitIntercept"], [58, 2, 1, "", "setLabelCol"], [58, 2, 1, "", "setMaxIter"], [58, 2, 1, "", "setMaxTokenNgram"], [58, 2, 1, "", "setMinTokenNgram"], [58, 2, 1, "", "setTol"], [58, 2, 1, "", "setVectorizationModelPath"], [58, 4, 1, "", "tol"], [58, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[58, 4, 1, "", "classificationModel"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labels"], [58, 4, 1, "", "name"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setClassificationModel"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setVectorizationModel"], [58, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[58, 4, 1, "", "labels"], [58, 4, 1, "", "maxTokenNgram"], [58, 4, 1, "", "mergeChunks"], [58, 4, 1, "", "minTokenNgram"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[59, 1, 1, "", "FewShotClassifierApproach"], [59, 1, 1, "", "FewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[60, 1, 1, "", "GenericLogRegClassifierApproach"], [60, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[61, 1, 1, "", "GenericSVMClassifierApproach"], [61, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[61, 4, 1, "", "inputAnnotatorTypes"], [61, 4, 1, "", "name"], [61, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[61, 4, 1, "", "inputAnnotatorTypes"], [61, 4, 1, "", "name"], [61, 4, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[63, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[63, 4, 1, "", "coalesceSentences"], [63, 4, 1, "", "configProtoBytes"], [63, 2, 1, "", "getClasses"], [63, 4, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "loadSavedModelOpenSource"], [63, 4, 1, "", "maxSentenceLength"], [63, 4, 1, "", "name"], [63, 4, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setCoalesceSentences"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[64, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[64, 4, 1, "", "configProtoBytes"], [64, 2, 1, "", "getClasses"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "loadSavedModelOpenSource"], [64, 4, 1, "", "maxSentenceLength"], [64, 4, 1, "", "name"], [64, 4, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[65, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[65, 4, 1, "", "coalesceSentences"], [65, 4, 1, "", "configProtoBytes"], [65, 2, 1, "", "getClasses"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 2, 1, "", "loadSavedModel"], [65, 2, 1, "", "loadSavedModelOpenSource"], [65, 4, 1, "", "maxSentenceLength"], [65, 4, 1, "", "name"], [65, 4, 1, "", "outputAnnotatorType"], [65, 2, 1, "", "pretrained"], [65, 2, 1, "", "setCoalesceSentences"], [65, 2, 1, "", "setConfigProtoBytes"], [65, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[66, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[66, 1, 1, "", "ContextualParserApproach"], [66, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[66, 4, 1, "", "caseSensitive"], [66, 4, 1, "", "completeContextMatch"], [66, 4, 1, "", "dictionary"], [66, 4, 1, "", "inputAnnotatorTypes"], [66, 4, 1, "", "jsonPath"], [66, 4, 1, "", "optionalContextRules"], [66, 4, 1, "", "outputAnnotatorType"], [66, 4, 1, "", "prefixAndSuffixMatch"], [66, 2, 1, "", "setCaseSensitive"], [66, 2, 1, "", "setCompleteContextMatch"], [66, 2, 1, "", "setDictionary"], [66, 2, 1, "", "setJsonPath"], [66, 2, 1, "", "setOptionalContextRules"], [66, 2, 1, "", "setPrefixAndSuffixMatch"], [66, 2, 1, "", "setShortestContextMatch"], [66, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[66, 4, 1, "", "caseSensitive"], [66, 4, 1, "", "inputAnnotatorTypes"], [66, 4, 1, "", "name"], [66, 4, 1, "", "optionalContextRules"], [66, 4, 1, "", "outputAnnotatorType"], [66, 4, 1, "", "prefixAndSuffixMatch"], [66, 2, 1, "", "pretrained"], [66, 2, 1, "", "setCaseSensitive"], [66, 2, 1, "", "setOptionalContextRules"], [66, 2, 1, "", "setPrefixAndSuffixMatch"], [66, 2, 1, "", "setShortestContextMatch"], [66, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[68, 0, 0, "-", "deIdentification"], [69, 0, 0, "-", "deidentication_params"], [70, 0, 0, "-", "doccument_hashcoder"], [72, 0, 0, "-", "name_obfuscator"], [73, 0, 0, "-", "reIdentification"], [74, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[68, 1, 1, "", "DeIdentification"], [68, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[68, 4, 1, "", "combineRegexPatterns"], [68, 4, 1, "", "entityCasingModesPath"], [68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "obfuscateRefFile"], [68, 4, 1, "", "outputAnnotatorType"], [68, 4, 1, "", "refFileFormat"], [68, 4, 1, "", "refSep"], [68, 4, 1, "", "regexPatternsDictionary"], [68, 4, 1, "", "regexPatternsDictionaryAsJsonString"], [68, 4, 1, "", "selectiveObfuscationModesPath"], [68, 2, 1, "", "setCombineRegexPatterns"], [68, 2, 1, "", "setEntityCasingModes"], [68, 2, 1, "", "setObfuscateRefFile"], [68, 2, 1, "", "setRefFileFormat"], [68, 2, 1, "", "setRefSep"], [68, 2, 1, "", "setRegexPatternsDictionary"], [68, 2, 1, "", "setRegexPatternsDictionaryAsJsonString"], [68, 2, 1, "", "setSelectiveObfuscationModes"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[68, 2, 1, "", "getRegexEntities"], [68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "outputAnnotatorType"], [68, 2, 1, "", "pretrained"], [68, 4, 1, "", "regexEntities"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[69, 1, 1, "", "DeIdentificationParams"]], "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams": [[69, 4, 1, "", "ageRanges"], [69, 4, 1, "", "ageRangesByHipaa"], [69, 4, 1, "", "blackList"], [69, 4, 1, "", "consistentObfuscation"], [69, 4, 1, "", "dateFormats"], [69, 4, 1, "", "dateTag"], [69, 4, 1, "", "dateToYear"], [69, 4, 1, "", "days"], [69, 4, 1, "", "fixedMaskLength"], [69, 4, 1, "", "genderAwareness"], [69, 2, 1, "", "getBlackList"], [69, 2, 1, "", "getSameLengthFormattedEntities"], [69, 2, 1, "", "getUseShiftDays"], [69, 4, 1, "", "ignoreRegex"], [69, 4, 1, "", "isRandomDateDisplacement"], [69, 4, 1, "", "language"], [69, 4, 1, "", "mappingsColumn"], [69, 4, 1, "", "maskingPolicy"], [69, 4, 1, "", "minYear"], [69, 4, 1, "", "mode"], [69, 4, 1, "", "obfuscateDate"], [69, 4, 1, "", "obfuscateRefSource"], [69, 4, 1, "", "obfuscationStrategyOnException"], [69, 4, 1, "", "outputAsDocument"], [69, 4, 1, "", "regexOverride"], [69, 4, 1, "", "region"], [69, 4, 1, "", "returnEntityMappings"], [69, 4, 1, "", "sameEntityThreshold"], [69, 4, 1, "", "sameLengthFormattedEntities"], [69, 4, 1, "", "seed"], [69, 2, 1, "", "setAgeRanges"], [69, 2, 1, "", "setAgeRangesByHipaa"], [69, 2, 1, "", "setBlackList"], [69, 2, 1, "", "setConsistentObfuscation"], [69, 2, 1, "", "setDateFormats"], [69, 2, 1, "", "setDateTag"], [69, 2, 1, "", "setDateToYear"], [69, 2, 1, "", "setDays"], [69, 2, 1, "", "setFixedMaskLength"], [69, 2, 1, "", "setGenderAwareness"], [69, 2, 1, "", "setIgnoreRegex"], [69, 2, 1, "", "setIsRandomDateDisplacement"], [69, 2, 1, "", "setLanguage"], [69, 2, 1, "", "setMappingsColumn"], [69, 2, 1, "", "setMaskingPolicy"], [69, 2, 1, "", "setMinYear"], [69, 2, 1, "", "setMode"], [69, 2, 1, "", "setObfuscateDate"], [69, 2, 1, "", "setObfuscateRefSource"], [69, 2, 1, "", "setObfuscationStrategyOnException"], [69, 2, 1, "", "setOutputAsDocument"], [69, 2, 1, "", "setRegexOverride"], [69, 2, 1, "", "setRegion"], [69, 2, 1, "", "setReturnEntityMappings"], [69, 2, 1, "", "setSameEntityThreshold"], [69, 2, 1, "", "setSameLengthFormattedEntities"], [69, 2, 1, "", "setSeed"], [69, 2, 1, "", "setUnnormalizedDateMode"], [69, 2, 1, "", "setUseShifDays"], [69, 2, 1, "", "setUseShiftDays"], [69, 2, 1, "", "setZipCodeTag"], [69, 4, 1, "", "unnormalizedDateMode"], [69, 4, 1, "", "useShifDays"], [69, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[70, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[70, 4, 1, "", "dateShiftColumn"], [70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "name"], [70, 4, 1, "", "newDateShift"], [70, 4, 1, "", "outputAnnotatorType"], [70, 4, 1, "", "patientIdColumn"], [70, 4, 1, "", "rangeDays"], [70, 4, 1, "", "seed"], [70, 2, 1, "", "setDateShiftColumn"], [70, 2, 1, "", "setNewDateShift"], [70, 2, 1, "", "setParams"], [70, 2, 1, "", "setPatientIdColumn"], [70, 2, 1, "", "setRangeDays"], [70, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[72, 1, 1, "", "NameChunkObfuscator"], [72, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[72, 4, 1, "", "genderAwareness"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "language"], [72, 4, 1, "", "nameEntities"], [72, 4, 1, "", "obfuscateRefSource"], [72, 4, 1, "", "outputAnnotatorType"], [72, 4, 1, "", "sameLength"], [72, 4, 1, "", "seed"], [72, 2, 1, "", "setGenderAwareness"], [72, 2, 1, "", "setLanguage"], [72, 2, 1, "", "setNameEntities"], [72, 2, 1, "", "setObfuscateRefSource"], [72, 2, 1, "", "setSameLength"], [72, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[72, 4, 1, "", "genderAwareness"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "language"], [72, 4, 1, "", "nameEntities"], [72, 4, 1, "", "obfuscateRefFile"], [72, 4, 1, "", "obfuscateRefSource"], [72, 4, 1, "", "outputAnnotatorType"], [72, 4, 1, "", "refFileFormat"], [72, 4, 1, "", "refSep"], [72, 4, 1, "", "sameLength"], [72, 4, 1, "", "seed"], [72, 2, 1, "", "setGenderAwareness"], [72, 2, 1, "", "setLanguage"], [72, 2, 1, "", "setNameEntities"], [72, 2, 1, "", "setObfuscateRefFile"], [72, 2, 1, "", "setObfuscateRefSource"], [72, 2, 1, "", "setRefFileFormat"], [72, 2, 1, "", "setRefSep"], [72, 2, 1, "", "setSameLength"], [72, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[73, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[73, 4, 1, "", "inputAnnotatorTypes"], [73, 4, 1, "", "name"], [73, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.replacer": [[74, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[74, 2, 1, "", "getUseReplacement"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "name"], [74, 4, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "setUseReplacement"], [74, 4, 1, "", "useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[76, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[76, 1, 1, "", "NerDisambiguator"], [76, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[76, 4, 1, "", "embeddingTypeParam"], [76, 4, 1, "", "inputAnnotatorTypes"], [76, 4, 1, "", "levenshteinDistanceThresholdParam"], [76, 4, 1, "", "narrowWithApproximateMatching"], [76, 4, 1, "", "nearMatchingGapParam"], [76, 4, 1, "", "numFirstChars"], [76, 4, 1, "", "outputAnnotatorType"], [76, 4, 1, "", "predictionsLimit"], [76, 4, 1, "", "s3KnowledgeBaseName"], [76, 2, 1, "", "setEmbeddingType"], [76, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [76, 2, 1, "", "setNarrowWithApproximateMatching"], [76, 2, 1, "", "setNearMatchingGapParam"], [76, 2, 1, "", "setNumFirstChars"], [76, 2, 1, "", "setPredictionLimit"], [76, 2, 1, "", "setS3KnowledgeBaseName"], [76, 2, 1, "", "setTokenSearch"], [76, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[76, 4, 1, "", "embeddingTypeParam"], [76, 4, 1, "", "inputAnnotatorTypes"], [76, 4, 1, "", "levenshteinDistanceThresholdParam"], [76, 4, 1, "", "name"], [76, 4, 1, "", "narrowWithApproximateMatching"], [76, 4, 1, "", "nearMatchingGapParam"], [76, 4, 1, "", "numFirstChars"], [76, 4, 1, "", "outputAnnotatorType"], [76, 4, 1, "", "predictionsLimit"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setEmbeddingType"], [76, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [76, 2, 1, "", "setNarrowWithApproximateMatching"], [76, 2, 1, "", "setNearMatchingGapParam"], [76, 2, 1, "", "setNumFirstChars"], [76, 2, 1, "", "setPredictionLimit"], [76, 2, 1, "", "setTokenSearch"], [76, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[77, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[77, 4, 1, "", "chunkCol"], [77, 4, 1, "", "failOnMissing"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 4, 1, "", "isArray"], [77, 4, 1, "", "lowerCase"], [77, 4, 1, "", "name"], [77, 2, 1, "", "setChunkCol"], [77, 2, 1, "", "setFailOnMissing"], [77, 2, 1, "", "setIsArray"], [77, 2, 1, "", "setLowerCase"], [77, 2, 1, "", "setParams"], [77, 2, 1, "", "setStartCol"], [77, 2, 1, "", "setStartColByTokenIndex"], [77, 4, 1, "", "startCol"], [77, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[78, 1, 1, "", "DocumentFiltererByClassifier"]], "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier": [[78, 4, 1, "", "inputAnnotatorTypes"], [78, 4, 1, "", "name"], [78, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings": [[79, 0, 0, "-", "average_embeddings"], [80, 0, 0, "-", "bert_sentence_embeddings"], [81, 0, 0, "-", "entity_chunk_embeddings"], [82, 0, 0, "-", "extractive_summarization"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[79, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[79, 4, 1, "", "inputAnnotatorTypes"], [79, 4, 1, "", "name"], [79, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[80, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[80, 4, 1, "", "chunkWeight"], [80, 4, 1, "", "inputAnnotatorTypes"], [80, 2, 1, "", "load"], [80, 4, 1, "", "name"], [80, 4, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[81, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[81, 4, 1, "", "entityWeights"], [81, 4, 1, "", "inputAnnotatorTypes"], [81, 4, 1, "", "maxSyntacticDistance"], [81, 4, 1, "", "name"], [81, 4, 1, "", "outputAnnotatorType"], [81, 2, 1, "", "pretrained"], [81, 2, 1, "", "setEntityWeights"], [81, 2, 1, "", "setMaxSyntacticDistance"], [81, 2, 1, "", "setTargetEntities"], [81, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[82, 1, 1, "", "ExtractiveSummarization"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization": [[82, 4, 1, "", "inputAnnotatorTypes"], [82, 4, 1, "", "name"], [82, 4, 1, "", "outputAnnotatorType"], [82, 4, 1, "", "returnSingleDocument"], [82, 2, 1, "", "setReturnSingleDocument"], [82, 2, 1, "", "setSimilarityThreshold"], [82, 2, 1, "", "setSummarySize"], [82, 4, 1, "", "similarityThreshold"], [82, 4, 1, "", "summarySize"]], "sparknlp_jsl.annotator.feature_assembler": [[84, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[84, 4, 1, "", "inputAnnotatorTypes"], [84, 4, 1, "", "inputCols"], [84, 4, 1, "", "name"], [84, 4, 1, "", "outputAnnotatorType"], [84, 4, 1, "", "outputCol"], [84, 2, 1, "", "setInputCols"], [84, 2, 1, "", "setOutputCol"], [84, 2, 1, "", "setParams"], [84, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.filtering_params": [[85, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[85, 4, 1, "", "criteria"], [85, 4, 1, "", "filterValue"], [85, 4, 1, "", "regex"], [85, 2, 1, "", "setCriteria"], [85, 2, 1, "", "setFilterValue"], [85, 2, 1, "", "setRegex"]], "sparknlp_jsl.annotator.generic_classifier": [[86, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[86, 1, 1, "", "GenericClassifierApproach"], [86, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[86, 4, 1, "", "batchSize"], [86, 4, 1, "", "dropout"], [86, 4, 1, "", "epochsN"], [86, 4, 1, "", "featureScaling"], [86, 4, 1, "", "fixImbalance"], [86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "labelColumn"], [86, 4, 1, "", "learningRate"], [86, 4, 1, "", "modelFile"], [86, 4, 1, "", "multiClass"], [86, 4, 1, "", "outputAnnotatorType"], [86, 4, 1, "", "outputLogsPath"], [86, 2, 1, "", "setBatchSize"], [86, 2, 1, "", "setDropout"], [86, 2, 1, "", "setEpochsNumber"], [86, 2, 1, "", "setFeatureScaling"], [86, 2, 1, "", "setFixImbalance"], [86, 2, 1, "", "setLabelCol"], [86, 2, 1, "", "setLearningRate"], [86, 2, 1, "", "setModelFile"], [86, 2, 1, "", "setMultiClass"], [86, 2, 1, "", "setOutputLogsPath"], [86, 2, 1, "", "setValidationSplit"], [86, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[86, 4, 1, "", "classes"], [86, 4, 1, "", "featureScaling"], [86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "multiClass"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setFeatureScaling"], [86, 2, 1, "", "setMultiClass"]], "sparknlp_jsl.annotator.handle_exception_params": [[88, 1, 1, "", "HandleExceptionParams"]], "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams": [[88, 4, 1, "", "doExceptionHandling"], [88, 2, 1, "", "setDoExceptionHandling"]], "sparknlp_jsl.annotator.merge": [[90, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[90, 1, 1, "", "ChunkMergeApproach"], [90, 1, 1, "", "ChunkMergeModel"], [90, 1, 1, "", "MergeCommonParams"], [90, 1, 1, "", "MergePrioritizationParams"], [90, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[90, 4, 1, "", "inputAnnotatorTypes"], [90, 4, 1, "", "name"], [90, 4, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[90, 4, 1, "", "inputAnnotatorTypes"], [90, 4, 1, "", "name"], [90, 4, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[90, 4, 1, "", "mergeOverlapping"], [90, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[90, 4, 1, "", "chunkPrecedence"], [90, 4, 1, "", "chunkPrecedenceValuePrioritization"], [90, 4, 1, "", "defaultConfidence"], [90, 4, 1, "", "orderingFeatures"], [90, 4, 1, "", "selectionStrategy"], [90, 2, 1, "", "setChunkPrecedence"], [90, 2, 1, "", "setChunkPrecedenceValuePrioritization"], [90, 2, 1, "", "setDefaultConfidence"], [90, 2, 1, "", "setOrderingFeatures"], [90, 2, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[90, 4, 1, "", "entitiesConfidenceResource"], [90, 4, 1, "", "falsePositivesResource"], [90, 4, 1, "", "replaceDictResource"], [90, 2, 1, "", "setEntitiesConfidenceResource"], [90, 2, 1, "", "setFalsePositivesResource"], [90, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.ner": [[93, 0, 0, "-", "iob_tagger"], [94, 0, 0, "-", "medical_ner"], [95, 0, 0, "-", "ner_chunker"], [96, 0, 0, "-", "ner_converter_internal"], [97, 0, 0, "-", "ner_template_render"], [98, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[93, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[93, 4, 1, "", "inputAnnotatorTypes"], [93, 4, 1, "", "name"], [93, 4, 1, "", "outputAnnotatorType"], [93, 4, 1, "", "scheme"], [93, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[94, 1, 1, "", "MedicalNerApproach"], [94, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[94, 4, 1, "", "batchSize"], [94, 4, 1, "", "configProtoBytes"], [94, 4, 1, "", "dropout"], [94, 4, 1, "", "earlyStoppingCriterion"], [94, 4, 1, "", "earlyStoppingPatience"], [94, 4, 1, "", "enableMemoryOptimizer"], [94, 4, 1, "", "graphFile"], [94, 4, 1, "", "graphFolder"], [94, 4, 1, "", "includeAllConfidenceScores"], [94, 4, 1, "", "includeConfidence"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "logPrefix"], [94, 4, 1, "", "lr"], [94, 4, 1, "", "outputAnnotatorType"], [94, 4, 1, "", "overrideExistingTags"], [94, 4, 1, "", "po"], [94, 4, 1, "", "pretrainedModelPath"], [94, 4, 1, "", "randomValidationSplitPerEpoch"], [94, 4, 1, "", "sentenceTokenIndex"], [94, 2, 1, "", "setBatchSize"], [94, 2, 1, "", "setConfigProtoBytes"], [94, 2, 1, "", "setDoExceptionHandling"], [94, 2, 1, "", "setDropout"], [94, 2, 1, "", "setEarlyStoppingCriterion"], [94, 2, 1, "", "setEarlyStoppingPatience"], [94, 2, 1, "", "setEnableMemoryOptimizer"], [94, 2, 1, "", "setGraphFile"], [94, 2, 1, "", "setGraphFolder"], [94, 2, 1, "", "setIncludeAllConfidenceScores"], [94, 2, 1, "", "setIncludeConfidence"], [94, 2, 1, "", "setLogPrefix"], [94, 2, 1, "", "setLr"], [94, 2, 1, "", "setOverrideExistingTags"], [94, 2, 1, "", "setPo"], [94, 2, 1, "", "setPretrainedModelPath"], [94, 2, 1, "", "setRandomValidationSplitPerEpoch"], [94, 2, 1, "", "setSentenceTokenIndex"], [94, 2, 1, "", "setTagsMapping"], [94, 2, 1, "", "setUseBestModel"], [94, 2, 1, "", "setUseContrib"], [94, 2, 1, "", "setValidationSplit"], [94, 4, 1, "", "useBestModel"], [94, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[94, 4, 1, "", "classes"], [94, 4, 1, "", "configProtoBytes"], [94, 4, 1, "", "doExceptionHandling"], [94, 2, 1, "", "getClasses"], [94, 2, 1, "", "getTrainingClassDistribution"], [94, 4, 1, "", "includeAllConfidenceScores"], [94, 4, 1, "", "includeConfidence"], [94, 4, 1, "", "inferenceBatchSize"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "labelCasing"], [94, 2, 1, "", "loadSavedModel"], [94, 4, 1, "", "name"], [94, 4, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "pretrained"], [94, 4, 1, "", "sentenceTokenIndex"], [94, 2, 1, "", "setConfigProtoBytes"], [94, 2, 1, "", "setIncludeConfidence"], [94, 2, 1, "", "setInferenceBatchSize"], [94, 2, 1, "", "setLabelCasing"], [94, 2, 1, "", "setSentenceTokenIndex"], [94, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[95, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[95, 4, 1, "", "inputAnnotatorTypes"], [95, 4, 1, "", "name"], [95, 4, 1, "", "outputAnnotatorType"], [95, 4, 1, "", "regexParsers"], [95, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[96, 1, 1, "", "CommonNerConverterInternalParams"], [96, 1, 1, "", "NerConverterInternal"], [96, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[96, 4, 1, "", "doExceptionHandling"], [96, 4, 1, "", "greedyMode"], [96, 4, 1, "", "ignoreStopWords"], [96, 4, 1, "", "preservePosition"], [96, 2, 1, "", "setAllowList"], [96, 2, 1, "", "setDenyList"], [96, 2, 1, "", "setDoExceptionHandling"], [96, 2, 1, "", "setGreedyMode"], [96, 2, 1, "", "setIgnoreStopWords"], [96, 2, 1, "", "setPreservePosition"], [96, 2, 1, "", "setThreshold"], [96, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[96, 4, 1, "", "inputAnnotatorTypes"], [96, 4, 1, "", "name"], [96, 4, 1, "", "outputAnnotatorType"], [96, 4, 1, "", "replaceDictResource"], [96, 4, 1, "", "replaceLabels"], [96, 2, 1, "", "setReplaceDictResource"], [96, 2, 1, "", "setReplaceLabels"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[96, 4, 1, "", "inputAnnotatorTypes"], [96, 4, 1, "", "name"], [96, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[97, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[97, 4, 1, "", "combineEntities"], [97, 4, 1, "", "entityScopes"], [97, 4, 1, "", "inputAnnotatorTypes"], [97, 4, 1, "", "outputAnnotatorType"], [97, 4, 1, "", "permuteEntities"], [97, 2, 1, "", "pretrained"], [97, 4, 1, "", "randomSeed"], [97, 4, 1, "", "resampleEntities"], [97, 2, 1, "", "setCombineEntities"], [97, 2, 1, "", "setEntityScopes"], [97, 2, 1, "", "setPermuteEntities"], [97, 2, 1, "", "setRandomSeed"], [97, 2, 1, "", "setResampleEntities"], [97, 2, 1, "", "setTemplates"], [97, 4, 1, "", "templates"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[98, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[98, 2, 1, "", "getClasses"], [98, 4, 1, "", "ignoreEntities"], [98, 4, 1, "", "inputAnnotatorTypes"], [98, 2, 1, "", "load"], [98, 4, 1, "", "name"], [98, 4, 1, "", "outputAnnotatorType"], [98, 4, 1, "", "predictionThreshold"], [98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setEntityDefinitions"], [98, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[99, 0, 0, "-", "date_normalizer"], [100, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[99, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[99, 4, 1, "", "anchorDateDay"], [99, 4, 1, "", "anchorDateMonth"], [99, 4, 1, "", "anchorDateYear"], [99, 4, 1, "", "defaultReplacementDay"], [99, 4, 1, "", "defaultReplacementMonth"], [99, 4, 1, "", "defaultReplacementYear"], [99, 4, 1, "", "inputAnnotatorTypes"], [99, 4, 1, "", "name"], [99, 4, 1, "", "outputAnnotatorType"], [99, 4, 1, "", "outputDateFormat"], [99, 2, 1, "", "setAnchorDateDay"], [99, 2, 1, "", "setAnchorDateMonth"], [99, 2, 1, "", "setAnchorDateYear"], [99, 2, 1, "", "setDefaultReplacementDay"], [99, 2, 1, "", "setDefaultReplacementMonth"], [99, 2, 1, "", "setDefaultReplacementYear"], [99, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[100, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[100, 4, 1, "", "inputAnnotatorTypes"], [100, 4, 1, "", "lowercase"], [100, 4, 1, "", "outputAnnotatorType"], [100, 4, 1, "", "policy"], [100, 2, 1, "", "setLowercase"], [100, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[102, 0, 0, "-", "beam_search_params"], [104, 0, 0, "-", "medical_qa"], [105, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[102, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[102, 4, 1, "", "doSample"], [102, 4, 1, "", "ignoreTokenIds"], [102, 4, 1, "", "maxContextLength"], [102, 4, 1, "", "maxNewTokens"], [102, 4, 1, "", "noRepeatNgramSize"], [102, 2, 1, "", "setDoSample"], [102, 2, 1, "", "setIgnoreTokenIds"], [102, 2, 1, "", "setMaxContextLength"], [102, 2, 1, "", "setMaxNewTokens"], [102, 2, 1, "", "setNoRepeatNgramSize"], [102, 2, 1, "", "setRandomSeed"], [102, 2, 1, "", "setTopK"], [102, 4, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[104, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[104, 4, 1, "", "configProtoBytes"], [104, 4, 1, "", "customPrompt"], [104, 2, 1, "", "getQuestionTypes"], [104, 4, 1, "", "inputAnnotatorTypes"], [104, 2, 1, "", "loadMedicalTextGenerator"], [104, 2, 1, "", "loadSavedModel"], [104, 4, 1, "", "mlFrameworkType"], [104, 4, 1, "", "modelType"], [104, 4, 1, "", "name"], [104, 4, 1, "", "outputAnnotatorType"], [104, 2, 1, "", "pretrained"], [104, 4, 1, "", "questionType"], [104, 2, 1, "", "setConfigProtoBytes"], [104, 2, 1, "", "setCustomPrompt"], [104, 2, 1, "", "setQuestionAnswerTerminals"], [104, 2, 1, "", "setQuestionPrompts"], [104, 2, 1, "", "setQuestionSkipLastToken"], [104, 2, 1, "", "setQuestionType"], [104, 2, 1, "", "setUseCache"], [104, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[105, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[105, 4, 1, "", "entities1"], [105, 4, 1, "", "entities2"], [105, 4, 1, "", "inputAnnotatorTypes"], [105, 4, 1, "", "name"], [105, 4, 1, "", "outputAnnotatorType"], [105, 4, 1, "", "questionMark"], [105, 4, 1, "", "questionPronoun"], [105, 2, 1, "", "setEntities1"], [105, 2, 1, "", "setEntities2"], [105, 2, 1, "", "setQuestionMark"], [105, 2, 1, "", "setQuestionPronoun"], [105, 2, 1, "", "setStrategyType"], [105, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[107, 0, 0, "-", "relation_extraction"], [108, 0, 0, "-", "relation_extraction_dl"], [109, 0, 0, "-", "relation_ner_chunk_filter"], [110, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[107, 1, 1, "", "GenericREModel"], [107, 1, 1, "", "PosologyREModel"], [107, 1, 1, "", "RelationExtractionApproach"], [107, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[107, 4, 1, "", "customLabels"], [107, 4, 1, "", "fromEntityBeginCol"], [107, 4, 1, "", "fromEntityEndCol"], [107, 4, 1, "", "fromEntityLabelCol"], [107, 4, 1, "", "inputAnnotatorTypes"], [107, 4, 1, "", "maxSyntacticDistance"], [107, 4, 1, "", "name"], [107, 4, 1, "", "outputAnnotatorType"], [107, 4, 1, "", "overrideExistingLabels"], [107, 4, 1, "", "pretrainedModelPath"], [107, 4, 1, "", "relationDirectionCol"], [107, 2, 1, "", "setCustomLabels"], [107, 2, 1, "", "setFromEntity"], [107, 2, 1, "", "setMaxSyntacticDistance"], [107, 2, 1, "", "setPretrainedModelPath"], [107, 2, 1, "", "setRelationDirectionCol"], [107, 2, 1, "", "setToEntity"], [107, 2, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [107, 4, 1, "", "toEntityBeginCol"], [107, 4, 1, "", "toEntityEndCol"], [107, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[107, 4, 1, "", "classes"], [107, 4, 1, "", "customLabels"], [107, 4, 1, "", "featureScaling"], [107, 2, 1, "", "getClasses"], [107, 2, 1, "", "getRelationTypePerPair"], [107, 4, 1, "", "inputAnnotatorTypes"], [107, 4, 1, "", "maxSyntacticDistance"], [107, 4, 1, "", "multiClass"], [107, 4, 1, "", "name"], [107, 4, 1, "", "outputAnnotatorType"], [107, 4, 1, "", "predictionThreshold"], [107, 2, 1, "", "pretrained"], [107, 4, 1, "", "relationPairs"], [107, 4, 1, "", "relationPairsCaseSensitive"], [107, 2, 1, "", "setCustomLabels"], [107, 2, 1, "", "setFeatureScaling"], [107, 2, 1, "", "setMaxSyntacticDistance"], [107, 2, 1, "", "setMultiClass"], [107, 2, 1, "", "setPredictionThreshold"], [107, 2, 1, "", "setRelationPairs"], [107, 2, 1, "", "setRelationPairsCaseSensitive"], [107, 2, 1, "", "setRelationTypePerPair"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[108, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[108, 4, 1, "", "batchSize"], [108, 4, 1, "", "classes"], [108, 4, 1, "", "customLabels"], [108, 2, 1, "", "getClasses"], [108, 4, 1, "", "inputAnnotatorTypes"], [108, 2, 1, "", "loadSavedModel"], [108, 4, 1, "", "name"], [108, 4, 1, "", "outputAnnotatorType"], [108, 4, 1, "", "predictionThreshold"], [108, 2, 1, "", "pretrained"], [108, 2, 1, "", "setBatchSize"], [108, 2, 1, "", "setCaseSensitive"], [108, 2, 1, "", "setCustomLabels"], [108, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[109, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[109, 4, 1, "", "docLevelRelations"], [109, 4, 1, "", "inputAnnotatorTypes"], [109, 4, 1, "", "maxSyntacticDistance"], [109, 4, 1, "", "name"], [109, 4, 1, "", "outputAnnotatorType"], [109, 4, 1, "", "relationPairs"], [109, 4, 1, "", "relationPairsCaseSensitive"], [109, 2, 1, "", "setDocLevelRelations"], [109, 2, 1, "", "setMaxSyntacticDistance"], [109, 2, 1, "", "setRelationPairs"], [109, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[110, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[110, 2, 1, "", "getClasses"], [110, 4, 1, "", "inputAnnotatorTypes"], [110, 2, 1, "", "loadSavedModel"], [110, 4, 1, "", "multiLabel"], [110, 4, 1, "", "negativeRelationships"], [110, 4, 1, "", "outputAnnotatorType"], [110, 4, 1, "", "predictionThreshold"], [110, 2, 1, "", "pretrained"], [110, 2, 1, "", "setNegativeRelationships"], [110, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.resolution": [[112, 0, 0, "-", "resolver_merger"], [113, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[112, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[112, 4, 1, "", "inputAnnotatorTypes"], [112, 4, 1, "", "name"], [112, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[113, 1, 1, "", "SentenceEntityResolverApproach"], [113, 1, 1, "", "SentenceEntityResolverModel"], [113, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[113, 4, 1, "", "aux_label_col"], [113, 4, 1, "", "dropCodesList"], [113, 4, 1, "", "inputAnnotatorTypes"], [113, 4, 1, "", "labelCol"], [113, 4, 1, "", "normalizedCol"], [113, 4, 1, "", "outputAnnotatorType"], [113, 4, 1, "", "overrideExistingCodes"], [113, 4, 1, "", "pretrainedModelPath"], [113, 4, 1, "", "returnCosineDistances"], [113, 2, 1, "", "setAuxLabelCol"], [113, 2, 1, "", "setDropCodesList"], [113, 2, 1, "", "setExtractCosineDistances"], [113, 2, 1, "", "setLabelCol"], [113, 2, 1, "", "setNormalizedCol"], [113, 2, 1, "", "setOverrideExistingCodes"], [113, 2, 1, "", "setPretrainedModelPath"], [113, 2, 1, "", "setUseAuxLabel"], [113, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[113, 4, 1, "", "inputAnnotatorTypes"], [113, 4, 1, "", "name"], [113, 4, 1, "", "outputAnnotatorType"], [113, 2, 1, "", "pretrained"], [113, 4, 1, "", "returnCosineDistances"], [113, 4, 1, "", "searchTree"], [113, 2, 1, "", "setSearchTree"], [113, 2, 1, "", "setUseAuxLabel"], [113, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[113, 4, 1, "", "confidenceFunction"], [113, 4, 1, "", "distanceFunction"], [113, 4, 1, "", "inputAnnotatorTypes"], [113, 4, 1, "", "missAsEmpty"], [113, 4, 1, "", "neighbours"], [113, 2, 1, "", "setConfidenceFunction"], [113, 2, 1, "", "setDistanceFunction"], [113, 2, 1, "", "setMissAsEmpty"], [113, 2, 1, "", "setNeighbours"], [113, 2, 1, "", "setThreshold"], [113, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[114, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[114, 4, 1, "", "inputAnnotatorTypes"], [114, 4, 1, "", "name"], [114, 4, 1, "", "outputAnnotatorType"], [114, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.router": [[115, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[115, 4, 1, "", "filterFieldsElements"], [115, 4, 1, "", "inputAnnotatorTypes"], [115, 4, 1, "", "inputType"], [115, 4, 1, "", "metadataField"], [115, 4, 1, "", "name"], [115, 4, 1, "", "outputAnnotatorType"], [115, 2, 1, "", "setFilterFieldsElements"], [115, 2, 1, "", "setInputCols"], [115, 2, 1, "", "setInputType"], [115, 2, 1, "", "setMetadataField"], [115, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq": [[117, 0, 0, "-", "medical_encoder_decoder"], [118, 0, 0, "-", "medical_summarizer"], [119, 0, 0, "-", "medical_text_generator"], [120, 0, 0, "-", "text2sql"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[117, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[117, 4, 1, "", "configProtoBytes"], [117, 4, 1, "", "doSample"], [117, 4, 1, "", "ignoreTokenIds"], [117, 4, 1, "", "inputAnnotatorTypes"], [117, 4, 1, "", "maxNewTokens"], [117, 4, 1, "", "maxTextLength"], [117, 4, 1, "", "mlFrameworkType"], [117, 4, 1, "", "name"], [117, 4, 1, "", "noRepeatNgramSize"], [117, 4, 1, "", "outputAnnotatorType"], [117, 4, 1, "", "randomSeed"], [117, 4, 1, "", "refineChunkSize"], [117, 4, 1, "", "refineMaxAttempts"], [117, 4, 1, "", "refineSummary"], [117, 4, 1, "", "refineSummaryTargetLength"], [117, 2, 1, "", "setConfigProtoBytes"], [117, 2, 1, "", "setDoSample"], [117, 2, 1, "", "setIgnoreTokenIds"], [117, 2, 1, "", "setMaxNewTokens"], [117, 2, 1, "", "setMaxTextLength"], [117, 2, 1, "", "setNoRepeatNgramSize"], [117, 2, 1, "", "setRandomSeed"], [117, 2, 1, "", "setRefineChunkSize"], [117, 2, 1, "", "setRefineMaxAttempts"], [117, 2, 1, "", "setRefineSummary"], [117, 2, 1, "", "setRefineSummaryTargetLength"], [117, 2, 1, "", "setStopAtEos"], [117, 2, 1, "", "setTopK"], [117, 4, 1, "", "stopAtEos"], [117, 4, 1, "", "task"], [117, 4, 1, "", "topK"], [117, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[118, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[118, 2, 1, "", "loadSavedModel"], [118, 4, 1, "", "name"], [118, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[119, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[119, 4, 1, "", "configProtoBytes"], [119, 4, 1, "", "customPrompt"], [119, 2, 1, "", "getAdditionalTokens"], [119, 4, 1, "", "inputAnnotatorTypes"], [119, 2, 1, "", "loadSavedModel"], [119, 4, 1, "", "maxTextLength"], [119, 4, 1, "", "mlFrameworkType"], [119, 4, 1, "", "modelType"], [119, 4, 1, "", "name"], [119, 4, 1, "", "outputAnnotatorType"], [119, 2, 1, "", "pretrained"], [119, 2, 1, "", "setAdditionalTokens"], [119, 2, 1, "", "setConfigProtoBytes"], [119, 2, 1, "", "setCustomPrompt"], [119, 2, 1, "", "setMaxTextLength"], [119, 2, 1, "", "setStopAtEos"], [119, 2, 1, "", "setUseCache"], [119, 4, 1, "", "stopAtEos"], [119, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[120, 1, 1, "", "Text2SQL"]], "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL": [[120, 2, 1, "", "getPostProcessingSubstitutions"], [120, 2, 1, "", "getSchema"], [120, 2, 1, "", "loadSavedModel"], [120, 4, 1, "", "name"], [120, 2, 1, "", "pretrained"], [120, 2, 1, "", "setPostProcessingSubstitutions"], [120, 2, 1, "", "setSchema"], [120, 2, 1, "", "setTableLimit"], [120, 4, 1, "", "tableLimit"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[121, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[121, 4, 1, "", "allPossibleFieldsToStandardize"], [121, 4, 1, "", "includeOutputColumn"], [121, 4, 1, "", "includeStandardField"], [121, 4, 1, "", "outputColumnKey"], [121, 2, 1, "", "setAllPossibleFieldsToStandardize"], [121, 2, 1, "", "setIncludeOutputColumn"], [121, 2, 1, "", "setIncludeStandardField"], [121, 2, 1, "", "setOutputColumnKey"], [121, 2, 1, "", "setStandardFieldKey"], [121, 4, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[123, 0, 0, "-", "internal_document_splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[123, 1, 1, "", "InternalDocumentSplitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter": [[123, 4, 1, "", "caseSensitive"], [123, 4, 1, "", "customBoundsStrategy"], [123, 4, 1, "", "enableSentenceIncrement"], [123, 4, 1, "", "inputAnnotatorTypes"], [123, 4, 1, "", "maxLength"], [123, 4, 1, "", "metaDataFields"], [123, 4, 1, "", "name"], [123, 4, 1, "", "optionalInputAnnotatorTypes"], [123, 4, 1, "", "outputAnnotatorType"], [123, 4, 1, "", "sentenceAwareness"], [123, 2, 1, "", "setCaseSensitive"], [123, 2, 1, "", "setCustomBoundsStrategy"], [123, 2, 1, "", "setEnableSentenceIncrement"], [123, 2, 1, "", "setInputCols"], [123, 2, 1, "", "setMaxLength"], [123, 2, 1, "", "setMetaDataFields"], [123, 2, 1, "", "setSentenceAwareness"], [123, 2, 1, "", "setSplitMode"], [123, 4, 1, "", "splitMode"]], "sparknlp_jsl.annotator.tf_graph_builder": [[124, 1, 1, "", "TFGraphBuilder"], [124, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[124, 4, 1, "", "batchNorm"], [124, 2, 1, "", "getBatchNorm"], [124, 2, 1, "", "getGraphFile"], [124, 2, 1, "", "getGraphFolder"], [124, 2, 1, "", "getHiddenAct"], [124, 2, 1, "", "getHiddenActL2"], [124, 2, 1, "", "getHiddenLayers"], [124, 2, 1, "", "getHiddenUnitsNumber"], [124, 2, 1, "", "getHiddenWeightsL2"], [124, 2, 1, "", "getInputCols"], [124, 2, 1, "", "getIsLicensed"], [124, 2, 1, "", "getLabelColumn"], [124, 2, 1, "", "getMaxSequenceLength"], [124, 2, 1, "", "getModelName"], [124, 2, 1, "", "getOutputAct"], [124, 2, 1, "", "getUseRelationDirection"], [124, 4, 1, "", "graphFile"], [124, 4, 1, "", "graphFolder"], [124, 4, 1, "", "hiddenAct"], [124, 4, 1, "", "hiddenActL2"], [124, 4, 1, "", "hiddenLayers"], [124, 4, 1, "", "hiddenUnitsNumber"], [124, 4, 1, "", "hiddenWeightsL2"], [124, 4, 1, "", "inputCols"], [124, 4, 1, "", "isLicensed"], [124, 4, 1, "", "labelColumn"], [124, 4, 1, "", "maxSequenceLength"], [124, 4, 1, "", "modelName"], [124, 4, 1, "", "outputAct"], [124, 2, 1, "", "setBatchNorm"], [124, 2, 1, "", "setGraphFile"], [124, 2, 1, "", "setGraphFolder"], [124, 2, 1, "", "setHiddenAct"], [124, 2, 1, "", "setHiddenActL2"], [124, 2, 1, "", "setHiddenLayers"], [124, 2, 1, "", "setHiddenUnitsNumber"], [124, 2, 1, "", "setHiddenWeightsL2"], [124, 2, 1, "", "setInputCols"], [124, 2, 1, "", "setIsLicensed"], [124, 2, 1, "", "setLabelColumn"], [124, 2, 1, "", "setMaxSequenceLength"], [124, 2, 1, "", "setModelName"], [124, 2, 1, "", "setUseRelationDirection"], [124, 2, 1, "", "settOutputAct"], [124, 4, 1, "", "useRelationDirection"]], "sparknlp_jsl.annotator.white_black_list_params": [[125, 1, 1, "", "WhiteBlackListParams"]], "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams": [[125, 4, 1, "", "blackList"], [125, 4, 1, "", "caseSensitive"], [125, 2, 1, "", "setBlackList"], [125, 2, 1, "", "setCaseSensitive"], [125, 2, 1, "", "setDenyList"], [125, 2, 1, "", "setWhiteList"], [125, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.windowed": [[127, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[127, 1, 1, "", "WindowedParams"], [127, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[127, 4, 1, "", "glueString"], [127, 2, 1, "", "setGlueString"], [127, 2, 1, "", "setWindowSize"], [127, 4, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[127, 4, 1, "", "inputAnnotatorTypes"], [127, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.common": [[129, 0, 0, "-", "annotator_approach_internal"], [130, 0, 0, "-", "annotator_model_internal"], [131, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[129, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[129, 4, 1, "", "inputAnnotatorTypes"], [129, 4, 1, "", "outputAnnotatorType"], [129, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[130, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[130, 4, 1, "", "inputAnnotatorTypes"], [130, 4, 1, "", "outputAnnotatorType"], [130, 2, 1, "", "setParams"], [130, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[131, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[131, 2, 1, "", "inputColsValidation"], [131, 2, 1, "", "setForceInputTypeValidation"]], "sparknlp_jsl.compatibility": [[133, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[133, 2, 1, "", "findVersion"], [133, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[134, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[134, 4, 1, "", "f"], [134, 2, 1, "", "setInputCol"], [134, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.deidentification_module": [[135, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[135, 2, 1, "", "deid_with_custom_pipeline"], [135, 2, 1, "", "deid_with_pretrained_pipeline"], [135, 2, 1, "", "deidentify"]], "sparknlp_jsl.eval": [[136, 1, 1, "", "NerCrfEvaluation"], [136, 1, 1, "", "NerDLEvaluation"], [136, 1, 1, "", "NerDLMetrics"], [136, 1, 1, "", "NorvigSpellEvaluation"], [136, 1, 1, "", "POSEvaluation"], [136, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[136, 2, 1, "", "computeAccuracyAnnotator"], [136, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[136, 2, 1, "", "computeAccuracyAnnotator"], [136, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[136, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[136, 2, 1, "", "computeAccuracyAnnotator"], [136, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[136, 2, 1, "", "computeAccuracyAnnotator"], [136, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[136, 2, 1, "", "computeAccuracyAnnotator"], [136, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[142, 0, 0, "-", "chunk_classification"], [147, 0, 0, "-", "graph"], [156, 0, 0, "-", "sequence_classification"], [161, 0, 0, "-", "sequence_generation"], [163, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[138, 0, 0, "-", "assertion"], [141, 0, 0, "-", "deid"], [145, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[137, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[137, 1, 1, "", "AssertionDLApproach"], [137, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[137, 4, 1, "", "name"], [137, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[139, 0, 0, "-", "deIdentification"], [140, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[139, 1, 1, "", "DeIdentification"], [139, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[139, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[139, 4, 1, "", "name"], [139, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[140, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[140, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[143, 0, 0, "-", "chunkmapper"], [144, 0, 0, "-", "docmapper"], [146, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[143, 1, 1, "", "ChunkMapperApproach"], [143, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[143, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[143, 4, 1, "", "name"], [143, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[144, 1, 1, "", "DocMapperApproach"], [144, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[144, 4, 1, "", "dictionary"], [144, 4, 1, "", "inputAnnotatorTypes"], [144, 4, 1, "", "name"], [144, 4, 1, "", "outputAnnotatorType"], [144, 2, 1, "", "setDictionary"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[144, 4, 1, "", "inputAnnotatorTypes"], [144, 4, 1, "", "name"], [144, 4, 1, "", "outputAnnotatorType"], [144, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[146, 1, 1, "", "SentenceEntityResolverApproach"], [146, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[146, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[148, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[149, 0, 0, "-", "relation_extraction_dl"], [150, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[149, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[149, 2, 1, "", "loadSavedModel"], [149, 4, 1, "", "name"], [149, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[150, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[150, 2, 1, "", "loadSavedModel"], [150, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification": [[152, 0, 0, "-", "finance_bert_for_sequence_classification"], [153, 0, 0, "-", "finance_classifier_dl"], [154, 0, 0, "-", "finance_document_ml_classifier"], [155, 0, 0, "-", "finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[152, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[152, 2, 1, "", "loadSavedModel"], [152, 2, 1, "", "loadSavedModelOpenSource"], [152, 4, 1, "", "name"], [152, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[153, 1, 1, "", "FinanceClassifierDLApproach"], [153, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[153, 4, 1, "", "name"], [153, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[154, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [154, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[154, 4, 1, "", "name"], [154, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[155, 1, 1, "", "FinanceFewShotClassifierApproach"], [155, 1, 1, "", "FinanceFewShotClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach": [[155, 4, 1, "", "name"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel": [[155, 4, 1, "", "name"], [155, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation": [[157, 0, 0, "-", "finance_encoder_decoder"], [158, 0, 0, "-", "finance_qa"], [159, 0, 0, "-", "finance_summarizer"], [160, 0, 0, "-", "finance_text_generator"], [162, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[157, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[157, 4, 1, "", "name"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[158, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[158, 2, 1, "", "loadSavedModel"], [158, 4, 1, "", "name"], [158, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[159, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[159, 2, 1, "", "loadSavedModel"], [159, 4, 1, "", "name"], [159, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[160, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[160, 2, 1, "", "loadSavedModel"], [160, 4, 1, "", "name"], [160, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[162, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.token_classification": [[166, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[164, 0, 0, "-", "finance_bert_for_token_classifier"], [165, 0, 0, "-", "finance_ner"], [167, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[164, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[164, 2, 1, "", "loadSavedModel"], [164, 2, 1, "", "loadSavedModelOpenSource"], [164, 4, 1, "", "name"], [164, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[165, 1, 1, "", "FinanceNerApproach"], [165, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[165, 2, 1, "", "loadSavedModel"], [165, 4, 1, "", "name"], [165, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[167, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[167, 2, 1, "", "load"], [167, 4, 1, "", "name"], [167, 2, 1, "", "pretrained"]], "sparknlp_jsl.functions": [[168, 6, 1, "", "profile"], [168, 6, 1, "", "profileESRDV21Y19"], [168, 6, 1, "", "profileRxHCCV05Y20"], [168, 6, 1, "", "profileRxHCCV05Y21"], [168, 6, 1, "", "profileRxHCCV05Y22"], [168, 6, 1, "", "profileRxHCCV05Y23"], [168, 6, 1, "", "profileRxHCCV08Y22"], [168, 6, 1, "", "profileRxHCCV08Y23"], [168, 6, 1, "", "profileV22"], [168, 6, 1, "", "profileV22Y17"], [168, 6, 1, "", "profileV22Y18"], [168, 6, 1, "", "profileV22Y19"], [168, 6, 1, "", "profileV22Y20"], [168, 6, 1, "", "profileV22Y21"], [168, 6, 1, "", "profileV22Y22"], [168, 6, 1, "", "profileV23"], [168, 6, 1, "", "profileV23Y18"], [168, 6, 1, "", "profileV23Y19"], [168, 6, 1, "", "profileV24"], [168, 6, 1, "", "profileV24Y19"], [168, 6, 1, "", "profileV24Y20"], [168, 6, 1, "", "profileV24Y21"], [168, 6, 1, "", "profileV24Y22"], [168, 6, 1, "", "profileV28"], [168, 6, 1, "", "profileV28Y24"]], "sparknlp_jsl.internal": [[170, 6, 1, "", "CustomLabels"], [170, 6, 1, "", "EntityWeights"], [170, 6, 1, "", "RelationalCategories"], [170, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[176, 0, 0, "-", "chunk_classification"], [181, 0, 0, "-", "graph"], [186, 0, 0, "-", "sequence_classification"], [191, 0, 0, "-", "sequence_generation"], [197, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[172, 0, 0, "-", "assertion"], [175, 0, 0, "-", "deid"], [179, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[171, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[171, 1, 1, "", "AssertionDLApproach"], [171, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[171, 4, 1, "", "name"], [171, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[173, 0, 0, "-", "deIdentification"], [174, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[173, 1, 1, "", "DeIdentification"], [173, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[173, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[173, 4, 1, "", "name"], [173, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[174, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[174, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[177, 0, 0, "-", "chunkmapper"], [178, 0, 0, "-", "docmapper"], [180, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[177, 1, 1, "", "ChunkMapperApproach"], [177, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[177, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[177, 4, 1, "", "name"], [177, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[178, 1, 1, "", "DocMapperApproach"], [178, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[178, 4, 1, "", "dictionary"], [178, 4, 1, "", "inputAnnotatorTypes"], [178, 4, 1, "", "name"], [178, 4, 1, "", "outputAnnotatorType"], [178, 2, 1, "", "setDictionary"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[178, 4, 1, "", "inputAnnotatorTypes"], [178, 4, 1, "", "name"], [178, 4, 1, "", "outputAnnotatorType"], [178, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[180, 1, 1, "", "SentenceEntityResolverApproach"], [180, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[180, 4, 1, "", "name"], [180, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[182, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[183, 0, 0, "-", "relation_extraction_dl"], [184, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[183, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[183, 2, 1, "", "loadSavedModel"], [183, 4, 1, "", "name"], [183, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[184, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[184, 2, 1, "", "loadSavedModel"], [184, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification": [[187, 0, 0, "-", "legal_bert_for_sequence_classification"], [188, 0, 0, "-", "legal_classifier_dl"], [189, 0, 0, "-", "legal_document_ml_classifier"], [190, 0, 0, "-", "legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[187, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[187, 2, 1, "", "loadSavedModel"], [187, 2, 1, "", "loadSavedModelOpenSource"], [187, 4, 1, "", "name"], [187, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[188, 1, 1, "", "LegalClassifierDLApproach"], [188, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[188, 4, 1, "", "name"], [188, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[189, 1, 1, "", "LegalDocumentMLClassifierApproach"], [189, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[189, 4, 1, "", "name"], [189, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[190, 1, 1, "", "LegalFewShotClassifierApproach"], [190, 1, 1, "", "LegalFewShotClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach": [[190, 4, 1, "", "name"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel": [[190, 4, 1, "", "name"], [190, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation": [[192, 0, 0, "-", "legal_encoder_decoder"], [193, 0, 0, "-", "legal_qa"], [194, 0, 0, "-", "legal_summarizer"], [195, 0, 0, "-", "legal_text_generator"], [196, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[192, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[192, 4, 1, "", "name"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[193, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[193, 2, 1, "", "loadSavedModel"], [193, 4, 1, "", "name"], [193, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[194, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[194, 2, 1, "", "loadSavedModel"], [194, 4, 1, "", "name"], [194, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[195, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[195, 2, 1, "", "loadSavedModel"], [195, 4, 1, "", "name"], [195, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[196, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.token_classification": [[198, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[199, 0, 0, "-", "legal_bert_for_token_classifier"], [200, 0, 0, "-", "legal_ner"], [201, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[199, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[199, 2, 1, "", "loadSavedModel"], [199, 2, 1, "", "loadSavedModelOpenSource"], [199, 4, 1, "", "name"], [199, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[200, 1, 1, "", "LegalNerApproach"], [200, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[200, 2, 1, "", "loadSavedModel"], [200, 4, 1, "", "name"], [200, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[201, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[201, 2, 1, "", "load"], [201, 4, 1, "", "name"], [201, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[202, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[202, 2, 1, "", "addUidCols"]], "sparknlp_jsl.nlp_test": [[204, 0, 0, "-", "bias"], [206, 0, 0, "-", "noisy_labels"], [210, 0, 0, "-", "robustness"]], "sparknlp_jsl.nlp_test.bias": [[203, 0, 0, "-", "bias_testing"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[203, 1, 1, "", "RuleBasedClassifier"], [203, 6, 1, "", "init_medical_gender_classifier"], [203, 6, 1, "", "test_gender_bias"]], "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier": [[203, 2, 1, "", "transform"]], "sparknlp_jsl.nlp_test.noisy_labels": [[207, 0, 0, "-", "noisy_label_fixing"], [208, 0, 0, "-", "noisy_label_testing"], [209, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[207, 1, 1, "", "InteractiveFix"], [207, 6, 1, "", "add_flag_to_conll"], [207, 6, 1, "", "apply_label_fixes"], [207, 6, 1, "", "conll_reader"], [207, 6, 1, "", "conll_writer"], [207, 6, 1, "", "update_with_model_predictions"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix": [[207, 2, 1, "", "adjust_page_size"], [207, 2, 1, "", "apply_fixes"], [207, 2, 1, "", "create_grid"], [207, 2, 1, "", "display"], [207, 2, 1, "", "empty_grid"], [207, 2, 1, "", "fill_grid"], [207, 2, 1, "", "fix_all"], [207, 2, 1, "", "fix_label"], [207, 2, 1, "", "get_cell_element"], [207, 2, 1, "", "get_central_grid"], [207, 2, 1, "", "get_classes"], [207, 2, 1, "", "get_default_indx"], [207, 2, 1, "", "get_drop_down"], [207, 2, 1, "", "get_drop_down_title"], [207, 2, 1, "", "get_footer"], [207, 2, 1, "", "get_header"], [207, 2, 1, "", "get_page_control_buttons"], [207, 2, 1, "", "get_page_number"], [207, 2, 1, "", "get_sentence"], [207, 2, 1, "", "get_title_html"], [207, 2, 1, "", "next_page"], [207, 2, 1, "", "num_sample_drop_down"], [207, 2, 1, "", "prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[208, 6, 1, "", "calculate_label_error_score"], [208, 6, 1, "", "get_label_quality_scores"], [208, 6, 1, "", "get_unique_entities"], [208, 6, 1, "", "test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[209, 3, 1, "", "stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[211, 0, 0, "-", "robustness_fixing"], [212, 0, 0, "-", "robustness_testing"], [213, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[211, 6, 1, "", "add_context_to_data"], [211, 6, 1, "", "add_contractions"], [211, 6, 1, "", "add_punctuation_to_data"], [211, 6, 1, "", "add_typo_to_sentence"], [211, 6, 1, "", "augment_robustness"], [211, 6, 1, "", "conll_reader"], [211, 6, 1, "", "convert_accent"], [211, 6, 1, "", "create_dataframe"], [211, 6, 1, "", "create_terminology"], [211, 6, 1, "", "filter_by_entity_type"], [211, 6, 1, "", "get_cohyponyms_wordnet"], [211, 6, 1, "", "get_sample"], [211, 6, 1, "", "introduce_typos"], [211, 6, 1, "", "modify_capitalization_lower"], [211, 6, 1, "", "modify_capitalization_title"], [211, 6, 1, "", "modify_capitalization_upper"], [211, 6, 1, "", "strip_punctuation_from_data"], [211, 6, 1, "", "swap_entities_with_terminology"], [211, 6, 1, "", "swap_with_cohyponym"], [211, 6, 1, "", "test_and_augment_robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[212, 6, 1, "", "add_context"], [212, 6, 1, "", "add_contractions"], [212, 6, 1, "", "add_punctuation"], [212, 6, 1, "", "add_typo_to_sentence"], [212, 6, 1, "", "american_to_british"], [212, 6, 1, "", "british_to_american"], [212, 6, 1, "", "calculate_metrics"], [212, 6, 1, "", "conll_sentence_reader"], [212, 6, 1, "", "create_terminology"], [212, 6, 1, "", "get_cohyponyms_wordnet"], [212, 6, 1, "", "introduce_typos"], [212, 6, 1, "", "modify_capitalization"], [212, 6, 1, "", "remove_context_tokens"], [212, 6, 1, "", "remove_contraction_tokens"], [212, 6, 1, "", "remove_punctuation_tokens"], [212, 6, 1, "", "run_test"], [212, 6, 1, "", "strip_punctuation"], [212, 6, 1, "", "swap_named_entities_from_terminology"], [212, 6, 1, "", "swap_with_cohyponym"], [212, 6, 1, "", "test_robustness"]], "sparknlp_jsl.nlp_test.robustness.utils": [[213, 6, 1, "", "calculate_proportion"], [213, 6, 1, "", "get_augmentation_proportions"], [213, 6, 1, "", "suggest_perturbations"]], "sparknlp_jsl.pretrained": [[214, 1, 1, "", "InternalResourceDownloader"], [214, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[214, 2, 1, "", "downloadModel"], [214, 2, 1, "", "downloadModelDirectly"], [214, 2, 1, "", "returnPrivateModels"], [214, 2, 1, "", "returnPrivatePipelines"], [214, 2, 1, "", "showAvailableAnnotators"], [214, 2, 1, "", "showPrivateModels"], [214, 2, 1, "", "showPrivatePipelines"], [214, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[215, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[215, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[216, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[216, 2, 1, "", "toDocumentsColumns"]], "sparknlp_jsl.training": [[217, 1, 1, "", "AnnotationToolJsonReader"], [217, 1, 1, "", "CantemistReader"], [217, 1, 1, "", "CodiEspReader"], [217, 1, 1, "", "REDatasetHelper"], [217, 1, 1, "", "SynonymAugmentationUMLS"], [217, 3, 1, "", "tf_graph"], [217, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[217, 2, 1, "", "generateAssertionTrainSet"], [217, 2, 1, "", "generateConll"], [217, 2, 1, "", "generatePlainAssertionTrainSet"], [217, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[217, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[217, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.REDatasetHelper": [[217, 2, 1, "", "create_annotation_column"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[217, 2, 1, "", "augmentCsv"], [217, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.training_log_parser": [[218, 1, 1, "", "assertion_log_parser"], [218, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[218, 2, 1, "", "get_best_f1_scores"], [218, 2, 1, "", "get_charts"], [218, 2, 1, "", "loss_plot"], [218, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[218, 2, 1, "", "evaluate"], [218, 2, 1, "", "evaluate_conll_file"], [218, 2, 1, "", "get_best_f1_scores"], [218, 2, 1, "", "get_charts"], [218, 2, 1, "", "loss_plot"], [218, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.updateModels": [[219, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[219, 2, 1, "", "updateCacheModels"], [219, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[220, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[221, 0, 0, "-", "alab_utils"], [222, 0, 0, "-", "conll_parse"], [223, 0, 0, "-", "deidentification_utils"], [224, 0, 0, "-", "imports"], [226, 0, 0, "-", "java_helper"], [227, 0, 0, "-", "licensed_annotator_type"], [228, 0, 0, "-", "log_parse"], [229, 0, 0, "-", "ner_utils"], [230, 0, 0, "-", "ocr_nlp_processor"], [231, 0, 0, "-", "ocr_utils"], [232, 0, 0, "-", "risk_adjustment_utils"], [233, 0, 0, "-", "training_log_parser_utils"]], "sparknlp_jsl.utils.alab_utils": [[221, 3, 1, "", "document_assembler"], [221, 3, 1, "", "empty_df"], [221, 6, 1, "", "get_doc_assembler"], [221, 6, 1, "", "get_empty_df"], [221, 6, 1, "", "get_ner_df"], [221, 6, 1, "", "get_ner_sentence_borders"], [221, 6, 1, "", "get_nlp_pos_pipeline"], [221, 6, 1, "", "get_nlp_token_pipeline"], [221, 6, 1, "", "get_pos"], [221, 6, 1, "", "get_regex_tokenizer"], [221, 6, 1, "", "get_regular_tokenizer"], [221, 6, 1, "", "get_rel_df"], [221, 6, 1, "", "get_sent_detector"], [221, 6, 1, "", "get_sentence_pipeline"], [221, 6, 1, "", "get_single_task_conll"], [221, 6, 1, "", "get_token_df"], [221, 3, 1, "", "nlp_pos_pipeline"], [221, 3, 1, "", "nlp_token_pipeline"], [221, 3, 1, "", "pos"], [221, 3, 1, "", "pos_pipeline_initialized"], [221, 6, 1, "", "read_conll"], [221, 3, 1, "", "regex_tokenizer"], [221, 3, 1, "", "regular_tokenizer"], [221, 3, 1, "", "sentence_detector"], [221, 6, 1, "", "strip_json_entities"], [221, 3, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_utils": [[223, 6, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[224, 6, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.java_helper": [[226, 6, 1, "", "parse_str_to_dict"]], "sparknlp_jsl.utils.licensed_annotator_type": [[227, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[227, 4, 1, "", "ASSERTION"], [227, 4, 1, "", "DISAMBIGUATION"], [227, 4, 1, "", "FEATURE_VECTOR"], [227, 4, 1, "", "KEYWORD"], [227, 4, 1, "", "SELECTOR"], [227, 4, 1, "", "SQL"]], "sparknlp_jsl.utils.ner_utils": [[229, 6, 1, "", "evaluate"], [229, 6, 1, "", "evaluate_conll_file"], [229, 6, 1, "", "get_charts"], [229, 6, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[230, 3, 1, "", "colors"], [230, 6, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[231, 3, 1, "", "colors"], [231, 3, 1, "", "colors_rgb"], [231, 6, 1, "", "draw_boxes_on_image_handwritten_region"], [231, 6, 1, "", "get_handwritten_regions"], [231, 3, 1, "", "label2color"], [231, 3, 1, "", "label2rgb"], [231, 3, 1, "", "pretrained_model"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[232, 1, 1, "", "RiskAdjustmentUtil"]], "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil": [[232, 2, 1, "", "HCC_from_ICD"], [232, 2, 1, "", "HCC_labels"], [232, 2, 1, "", "diff_between_HCCs"]], "sparknlp_jsl.utils.training_log_parser_utils": [[233, 6, 1, "", "aggregate_entities"], [233, 6, 1, "", "calc_metrics"], [233, 6, 1, "", "count_chunks"], [233, 6, 1, "", "get_result"], [233, 6, 1, "", "is_chunk_end"], [233, 6, 1, "", "is_chunk_start"], [233, 6, 1, "", "split_tag"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 168, 170, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 162, 164, 165, 167, 171, 173, 174, 177, 178, 180, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 207, 214, 215, 216, 217, 218, 219, 227, 232], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 46, 56, 62, 67, 71, 75, 83, 87, 89, 91, 92, 101, 103, 106, 111, 116, 122, 126, 132, 138, 141, 145, 148, 156, 161, 166, 169, 172, 175, 179, 182, 186, 191, 198, 204, 206, 210, 225], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 86, 87], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 89, 142, 147, 151, 163, 169, 176, 181, 185, 197, 205], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 168, 169, 170, 203, 207, 208, 211, 212, 213, 214, 220, 221, 223, 224, 226, 229, 230, 231, 233], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 169, 217, 221, 230, 231], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 89, 169], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "annotation_merg": 42, "assert": [43, 44, 45, 46, 137, 138, 171, 172], "assertiondl": [43, 137, 171], "assertion_chunk_convert": 44, "assertion_dl_reg": 45, "chunk2_token": 47, "chunker": [48, 49, 50, 51, 52, 53, 54, 55, 56], "assertion_filter": 48, "chunk_convert": 49, "chunk_key_phrase_extract": 50, "chunk_sentence_splitt": 51, "chunker_filter": 52, "chunkmapp": [53, 143, 177], "chunkmapper_filter": 54, "docmapp": [55, 144, 178], "classif": [57, 58, 59, 60, 61, 62, 63, 64, 65], "document_log_classifi": 57, "document_ml_classifi": 58, "few_shot_classifi": 59, "generic_log_reg_classifi": 60, "generic_svm_classifi": 61, "medical_bert_for_sequence_classif": 63, "medical_bert_for_token_classifi": 64, "medical_distilbert_for_sequence_classif": 65, "context": [66, 67], "contextual_pars": 66, "deid": [68, 69, 70, 71, 72, 73, 74, 139, 140, 141, 173, 174, 175], "deidentif": [68, 139, 173], "paramet": [68, 88, 123, 124, 223], "deidentication_param": 69, "doccument_hashcod": 70, "name_obfusc": 72, "reidentif": 73, "replac": 74, "disambigu": [75, 76], "ner_disambigu": 76, "doc2_chunk_intern": 77, "document_filterer_by_classifi": 78, "embed": [79, 80, 81, 82, 83], "average_embed": 79, "bert_sentence_embed": 80, "entity_chunk_embed": 81, "extractive_summar": 82, "feature_assembl": 84, "filtering_param": 85, "handle_exception_param": 88, "merg": [90, 91], "chunk_merg": 90, "ner": [92, 93, 94, 95, 96, 97, 98, 164, 165, 166, 167, 198, 199, 200, 201], "iob_tagg": 93, "medical_n": 94, "ner_chunk": 95, "ner_converter_intern": 96, "ner_template_rend": 97, "zero_shot_n": [98, 167, 201], "normal": [99, 100, 101], "date_norm": 99, "drug_norm": 100, "qa": [102, 103, 104, 105], "beam_search_param": 102, "medical_qa": 104, "qa_ner_gener": [105, 162, 196], "re": [106, 107, 108, 109, 110], "relation_extract": [107, 148, 149, 150, 182, 183, 184], "relation_extraction_dl": [108, 149, 183], "relation_ner_chunk_filt": 109, "zero_shot_relation_extract": [110, 150, 184], "resolut": [111, 112, 113, 143, 144, 145, 146, 177, 178, 179, 180], "resolver_merg": 112, "sentence_entity_resolv": [113, 146, 180], "resolution2_chunk": 114, "router": 115, "seq2seq": [116, 117, 118, 119, 120], "medical_encoder_decod": 117, "medical_summar": 118, "medical_text_gener": 119, "text2sql": 120, "source_tracking_metadata_param": 121, "splitter": [122, 123], "internal_document_splitt": 123, "tf_graph_build": 124, "white_black_list_param": 125, "window": [126, 127], "windowed_sent": 127, "base": 128, "common": [129, 130, 131, 132], "annotator_approach_intern": 129, "annotator_model_intern": 130, "annotator_properties_intern": 131, "compat": 133, "custom_transform": 134, "deidentification_modul": 135, "eval": 136, "financ": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "chunk_classif": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "document_hashcod": [140, 174], "graph": [147, 148, 149, 150, 181, 182, 183, 184], "sequence_classif": [152, 153, 154, 155, 156, 186, 187, 188, 189, 190], "finance_bert_for_sequence_classif": 152, "finance_classifier_dl": 153, "finance_document_ml_classifi": 154, "finance_few_shot_classifi": 155, "sequence_gener": [157, 158, 159, 160, 161, 162, 191, 192, 193, 194, 195, 196], "finance_encoder_decod": 157, "finance_qa": 158, "finance_summar": 159, "finance_text_gener": 160, "token_classif": [163, 164, 165, 166, 167, 197, 198, 199, 200, 201], "finance_bert_for_token_classifi": 164, "finance_n": 165, "intern": 170, "legal": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "legal_bert_for_sequence_classif": 187, "legal_classifier_dl": 188, "legal_document_ml_classifi": 189, "legal_few_shot_classifi": 190, "legal_encoder_decod": 192, "legal_qa": 193, "legal_summar": 194, "legal_text_gener": 195, "legal_bert_for_token_classifi": 199, "legal_n": 200, "modeltrac": 202, "nlp_test": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "bia": [203, 204], "bias_test": 203, "noisy_label": [206, 207, 208, 209], "noisy_label_fix": 207, "noisy_label_test": 208, "util": [209, 213, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "robust": [210, 211, 212, 213], "robustness_fix": 211, "robustness_test": 212, "pretrain": 214, "structured_deidentif": 215, "text_to_documents_column": 216, "train": 217, "training_log_pars": 218, "updatemodel": 219, "alab_util": 221, "conll_pars": 222, "deidentification_util": 223, "return": 223, "import": 224, "java_help": 226, "licensed_annotator_typ": 227, "log_pars": 228, "ner_util": 229, "ocr_nlp_processor": 230, "ocr_util": 231, "risk_adjustment_util": 232, "training_log_parser_util": 233, "api": 234, "refer": 234}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [90, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [183, "module-contents"], [184, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [90, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [139, "classes"], [140, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [171, "classes"], [173, "classes"], [174, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [183, "classes"], [184, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [207, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [227, "classes"], [232, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [46, "submodules"], [56, "submodules"], [62, "submodules"], [67, "submodules"], [71, "submodules"], [75, "submodules"], [83, "submodules"], [87, "submodules"], [89, "submodules"], [91, "submodules"], [92, "submodules"], [101, "submodules"], [103, "submodules"], [106, "submodules"], [111, "submodules"], [116, "submodules"], [122, "submodules"], [126, "submodules"], [132, "submodules"], [138, "submodules"], [141, "submodules"], [145, "submodules"], [148, "submodules"], [156, "submodules"], [161, "submodules"], [166, "submodules"], [169, "submodules"], [172, "submodules"], [175, "submodules"], [179, "submodules"], [182, "submodules"], [186, "submodules"], [191, "submodules"], [198, "submodules"], [204, "submodules"], [206, "submodules"], [210, "submodules"], [225, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [89, "subpackages"], [142, "subpackages"], [147, "subpackages"], [151, "subpackages"], [163, "subpackages"], [169, "subpackages"], [176, "subpackages"], [181, "subpackages"], [185, "subpackages"], [197, "subpackages"], [205, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [203, "functions"], [207, "functions"], [208, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [220, "functions"], [221, "functions"], [223, "functions"], [224, "functions"], [226, "functions"], [229, "functions"], [230, "functions"], [231, "functions"], [233, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [169, "attributes"], [217, "attributes"], [221, "attributes"], [230, "attributes"], [231, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [89, "package-contents"], [169, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[59, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[61, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[62, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[64, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[65, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[66, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[67, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[68, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Parameters": [[68, "parameters"], [88, "parameters"], [123, "parameters"], [123, "id13"], [124, "parameters"], [124, "id1"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[69, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[70, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[71, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[72, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[73, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[74, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[75, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[76, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[77, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[78, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[79, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[80, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[81, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[82, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "sparknlp_jsl.annotator.embeddings": [[83, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.feature_assembler": [[84, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.filtering_params": [[85, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[86, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[87, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator.handle_exception_params": [[88, "module-sparknlp_jsl.annotator.handle_exception_params"]], "sparknlp_jsl.annotator": [[89, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[90, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[91, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[92, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[93, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[94, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[95, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[96, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[97, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[98, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[99, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[100, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[101, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[102, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[103, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[104, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[105, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[106, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[107, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[108, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[109, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[110, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[111, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[112, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[113, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[114, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[115, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[116, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[117, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[118, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[119, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[120, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[121, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.splitter": [[122, "module-sparknlp_jsl.annotator.splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[123, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "sparknlp_jsl.annotator.tf_graph_builder": [[124, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.white_black_list_params": [[125, "module-sparknlp_jsl.annotator.white_black_list_params"]], "sparknlp_jsl.annotator.windowed": [[126, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[127, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[128, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[129, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[130, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[131, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[132, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[133, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[134, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[135, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[136, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[137, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[138, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[139, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[140, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[141, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[142, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[143, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[144, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[145, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[146, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[147, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[148, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[149, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[150, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[151, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[152, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[153, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[154, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[155, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[156, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[157, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[158, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[159, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[160, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[161, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[162, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[163, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[164, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[165, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[166, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[167, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[168, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[169, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[170, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[171, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[172, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[173, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[174, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[175, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[176, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[177, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[178, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[179, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[180, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[181, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[182, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[183, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[184, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[185, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[186, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[187, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[188, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[189, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[190, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[191, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[192, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[193, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[194, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[195, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[196, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[197, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[198, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[199, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[200, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[201, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[202, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[203, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "sparknlp_jsl.nlp_test.bias": [[204, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[205, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[206, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[207, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[208, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[209, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "sparknlp_jsl.nlp_test.robustness": [[210, "module-sparknlp_jsl.nlp_test.robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[211, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[212, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "sparknlp_jsl.nlp_test.robustness.utils": [[213, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "sparknlp_jsl.pretrained": [[214, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[215, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[216, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[217, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[218, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.updateModels": [[219, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[220, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[221, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[222, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[223, "module-sparknlp_jsl.utils.deidentification_utils"]], "Parameters:": [[223, "parameters"]], "Returns:": [[223, "returns"]], "sparknlp_jsl.utils.imports": [[224, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[225, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.java_helper": [[226, "module-sparknlp_jsl.utils.java_helper"]], "sparknlp_jsl.utils.licensed_annotator_type": [[227, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[228, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[229, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[230, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[231, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[232, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "sparknlp_jsl.utils.training_log_parser_utils": [[233, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "API Reference": [[234, "api-reference"]], "Modules": [[234, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [46, "module-sparknlp_jsl.annotator.assertion"], [47, "module-sparknlp_jsl.annotator.chunk2_token"], [48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [55, "module-sparknlp_jsl.annotator.chunker.docmapper"], [56, "module-sparknlp_jsl.annotator.chunker"], [57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [59, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"], [60, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [61, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [62, "module-sparknlp_jsl.annotator.classification"], [63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [64, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [65, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [66, "module-sparknlp_jsl.annotator.context.contextual_parser"], [67, "module-sparknlp_jsl.annotator.context"], [68, "module-sparknlp_jsl.annotator.deid.deIdentification"], [69, "module-sparknlp_jsl.annotator.deid.deidentication_params"], [70, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [71, "module-sparknlp_jsl.annotator.deid"], [72, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [73, "module-sparknlp_jsl.annotator.deid.reIdentification"], [74, "module-sparknlp_jsl.annotator.deid.replacer"], [75, "module-sparknlp_jsl.annotator.disambiguation"], [76, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [77, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [78, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"], [79, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [80, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [81, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [82, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"], [83, "module-sparknlp_jsl.annotator.embeddings"], [84, "module-sparknlp_jsl.annotator.feature_assembler"], [85, "module-sparknlp_jsl.annotator.filtering_params"], [86, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [87, "module-sparknlp_jsl.annotator.generic_classifier"], [88, "module-sparknlp_jsl.annotator.handle_exception_params"], [89, "module-sparknlp_jsl.annotator"], [90, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [91, "module-sparknlp_jsl.annotator.merge"], [92, "module-sparknlp_jsl.annotator.ner"], [93, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [94, "module-sparknlp_jsl.annotator.ner.medical_ner"], [95, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [96, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [97, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [98, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [99, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [100, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [101, "module-sparknlp_jsl.annotator.normalizer"], [102, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [103, "module-sparknlp_jsl.annotator.qa"], [104, "module-sparknlp_jsl.annotator.qa.medical_qa"], [105, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [106, "module-sparknlp_jsl.annotator.re"], [107, "module-sparknlp_jsl.annotator.re.relation_extraction"], [108, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [109, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [110, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [111, "module-sparknlp_jsl.annotator.resolution"], [112, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [113, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [114, "module-sparknlp_jsl.annotator.resolution2_chunk"], [115, "module-sparknlp_jsl.annotator.router"], [116, "module-sparknlp_jsl.annotator.seq2seq"], [117, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [118, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [119, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [120, "module-sparknlp_jsl.annotator.seq2seq.text2sql"], [121, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [122, "module-sparknlp_jsl.annotator.splitter"], [123, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"], [124, "module-sparknlp_jsl.annotator.tf_graph_builder"], [125, "module-sparknlp_jsl.annotator.white_black_list_params"], [126, "module-sparknlp_jsl.annotator.windowed"], [127, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [128, "module-sparknlp_jsl.base"], [129, "module-sparknlp_jsl.common.annotator_approach_internal"], [130, "module-sparknlp_jsl.common.annotator_model_internal"], [131, "module-sparknlp_jsl.common.annotator_properties_internal"], [132, "module-sparknlp_jsl.common"], [133, "module-sparknlp_jsl.compatibility"], [134, "module-sparknlp_jsl.custom_transformer"], [135, "module-sparknlp_jsl.deidentification_module"], [136, "module-sparknlp_jsl.eval"], [137, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [138, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [139, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [140, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [141, "module-sparknlp_jsl.finance.chunk_classification.deid"], [142, "module-sparknlp_jsl.finance.chunk_classification"], [143, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [144, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [145, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [146, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [147, "module-sparknlp_jsl.finance.graph"], [148, "module-sparknlp_jsl.finance.graph.relation_extraction"], [149, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [150, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [151, "module-sparknlp_jsl.finance"], [152, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [153, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [154, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [155, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"], [156, "module-sparknlp_jsl.finance.sequence_classification"], [157, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [158, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [159, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [160, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [161, "module-sparknlp_jsl.finance.sequence_generation"], [162, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [163, "module-sparknlp_jsl.finance.token_classification"], [164, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [165, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [166, "module-sparknlp_jsl.finance.token_classification.ner"], [167, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [168, "module-sparknlp_jsl.functions"], [169, "module-sparknlp_jsl"], [170, "module-sparknlp_jsl.internal"], [171, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [172, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [173, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [174, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [175, "module-sparknlp_jsl.legal.chunk_classification.deid"], [176, "module-sparknlp_jsl.legal.chunk_classification"], [177, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [178, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [179, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [180, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [181, "module-sparknlp_jsl.legal.graph"], [182, "module-sparknlp_jsl.legal.graph.relation_extraction"], [183, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [184, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [185, "module-sparknlp_jsl.legal"], [186, "module-sparknlp_jsl.legal.sequence_classification"], [187, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [188, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [189, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [190, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"], [191, "module-sparknlp_jsl.legal.sequence_generation"], [192, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [193, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [194, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [195, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [196, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [197, "module-sparknlp_jsl.legal.token_classification"], [198, "module-sparknlp_jsl.legal.token_classification.ner"], [199, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [200, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [201, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [202, "module-sparknlp_jsl.modelTracer"], [203, "module-sparknlp_jsl.nlp_test.bias.bias_testing"], [204, "module-sparknlp_jsl.nlp_test.bias"], [205, "module-sparknlp_jsl.nlp_test"], [206, "module-sparknlp_jsl.nlp_test.noisy_labels"], [207, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"], [208, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"], [209, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"], [210, "module-sparknlp_jsl.nlp_test.robustness"], [211, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"], [212, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"], [213, "module-sparknlp_jsl.nlp_test.robustness.utils"], [214, "module-sparknlp_jsl.pretrained"], [215, "module-sparknlp_jsl.structured_deidentification"], [216, "module-sparknlp_jsl.text_to_documents_columns"], [217, "module-sparknlp_jsl.training"], [218, "module-sparknlp_jsl.training_log_parser"], [219, "module-sparknlp_jsl.updateModels"], [220, "module-sparknlp_jsl.util"], [221, "module-sparknlp_jsl.utils.alab_utils"], [222, "module-sparknlp_jsl.utils.conll_parse"], [223, "module-sparknlp_jsl.utils.deidentification_utils"], [224, "module-sparknlp_jsl.utils.imports"], [225, "module-sparknlp_jsl.utils"], [226, "module-sparknlp_jsl.utils.java_helper"], [227, "module-sparknlp_jsl.utils.licensed_annotator_type"], [228, "module-sparknlp_jsl.utils.log_parse"], [229, "module-sparknlp_jsl.utils.ner_utils"], [230, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [231, "module-sparknlp_jsl.utils.ocr_utils"], [232, "module-sparknlp_jsl.utils.risk_adjustment_utils"], [233, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "fewshotclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.FewShotClassifierTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "logregclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "svmclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "review_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputannotatortypes (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "outputannotatortype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "setinputcols() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "entityassertioncasesensitive (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "getentityassertion() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getEntityAssertion"]], "getreplacelabels() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getReplaceLabels"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [137, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [171, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputannotatortype (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [137, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [171, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setentityassertion() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertion"]], "setentityassertioncasesensitive() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setreplacelabels() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setReplaceLabels"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "inputannotatortypes (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "name (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "setchunkbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setoutputcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparams() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "inputannotatortypes (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "label (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "outputannotatortype (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "pretrained() (assertionlogregmodel static method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "inputannotatortypes (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "name (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "outputannotatortype (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "inputannotatortypes (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "name (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "outputannotatortype (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "setcriteria() (assertionfilterer method)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "inputannotatortypes (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "name (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "outputannotatortype (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "name (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "pretrained() (chunkkeyphraseextraction static method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "inputannotatortypes (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "insertchunk (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "outputannotatortype (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "setdefaultentity() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "entitiesconfidence (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.entitiesConfidence"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "entitiesconfidenceresourceasjsonstring (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResourceAsJsonString"]], "inputannotatortypes (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "name (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "outputannotatortype (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "setentitiesconfidence() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresourceasjsonstring() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResourceAsJsonString"]], "setfilterentity() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "inputannotatortypes (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "lowercase (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [143, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [177, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [143, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [177, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "outputannotatortype (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "pretrained() (chunkmappermodel static method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [143, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [177, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setlowercase() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setrel() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "name (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "outputannotatortype (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "returncriteria (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "dictionary (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "inputannotatortypes (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "name (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "outputannotatortype (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "pretrained() (docmappermodel static method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "setdictionary() (docmapperapproach method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "labelcol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (documentlogregclassifiermodel static method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "fitintercept (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "labelcol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "maxiter (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "pretrained() (documentmlclassifiermodel static method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setlabelcol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setmaxiter() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "settol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "fewshotclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach"]], "fewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel"]], "inputannotatortypes (fewshotclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputAnnotatorTypes"]], "name (fewshotclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.name"]], "name (fewshotclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.name"]], "outputannotatortype (fewshotclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputAnnotatorType"]], "pretrained() (fewshotclassifiermodel static method)": [[59, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[59, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "name (genericlogregclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (genericlogregclassifiermodel static method)": [[60, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "name (genericsvmclassifierapproach attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "pretrained() (genericsvmclassifiermodel static method)": [[61, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[61, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[62, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicalbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "pretrained() (medicalbertfortokenclassifier static method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[64, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[64, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[65, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[65, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "inputannotatortypes (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "jsonpath (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "name (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.name"]], "optionalcontextrules (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "outputannotatortype (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "pretrained() (contextualparsermodel static method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.pretrained"]], "setcasesensitive() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[66, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[66, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[67, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "combineregexpatterns (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.combineRegexPatterns"]], "entitycasingmodespath (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "getregexentities() (deidentificationmodel method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "inputannotatortypes (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "name (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [139, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [173, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [139, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [173, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatereffile (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "outputannotatortype (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "pretrained() (deidentificationmodel static method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [139, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [173, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexpatternsdictionary (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "regexpatternsdictionaryasjsonstring (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"]], "selectiveobfuscationmodespath (deidentification attribute)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "setcombineregexpatterns() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setCombineRegexPatterns"]], "setentitycasingmodes() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setobfuscatereffile() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setreffileformat() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexpatternsdictionary() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregexpatternsdictionaryasjsonstring() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"]], "setselectiveobfuscationmodes() (deidentification method)": [[68, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "sparknlp_jsl.annotator.deid.deidentification": [[68, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "deidentificationparams (class in sparknlp_jsl.annotator.deid.deidentication_params)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams"]], "ageranges (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRanges"]], "agerangesbyhipaa (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRangesByHipaa"]], "blacklist (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackList"]], "consistentobfuscation (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.consistentObfuscation"]], "dateformats (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateFormats"]], "datetag (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateTag"]], "datetoyear (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateToYear"]], "days (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.days"]], "fixedmasklength (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.fixedMaskLength"]], "genderawareness (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.genderAwareness"]], "getblacklist() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getBlackList"]], "getsamelengthformattedentities() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getSameLengthFormattedEntities"]], "getuseshiftdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getUseShiftDays"]], "ignoreregex (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ignoreRegex"]], "israndomdatedisplacement (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.isRandomDateDisplacement"]], "language (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.language"]], "mappingscolumn (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mappingsColumn"]], "maskingpolicy (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.maskingPolicy"]], "minyear (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.minYear"]], "mode (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mode"]], "obfuscatedate (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateDate"]], "obfuscaterefsource (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscationStrategyOnException"]], "outputasdocument (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.outputAsDocument"]], "regexoverride (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.regexOverride"]], "region (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.region"]], "returnentitymappings (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.returnEntityMappings"]], "sameentitythreshold (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameEntityThreshold"]], "samelengthformattedentities (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameLengthFormattedEntities"]], "seed (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.seed"]], "setageranges() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRanges"]], "setagerangesbyhipaa() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRangesByHipaa"]], "setblacklist() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackList"]], "setconsistentobfuscation() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setConsistentObfuscation"]], "setdateformats() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateFormats"]], "setdatetag() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateTag"]], "setdatetoyear() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateToYear"]], "setdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDays"]], "setfixedmasklength() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setFixedMaskLength"]], "setgenderawareness() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGenderAwareness"]], "setignoreregex() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIsRandomDateDisplacement"]], "setlanguage() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setLanguage"]], "setmappingscolumn() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMappingsColumn"]], "setmaskingpolicy() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMaskingPolicy"]], "setminyear() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMinYear"]], "setmode() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMode"]], "setobfuscatedate() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateDate"]], "setobfuscaterefsource() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateRefSource"]], "setobfuscationstrategyonexception() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setOutputAsDocument"]], "setregexoverride() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegexOverride"]], "setregion() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegion"]], "setreturnentitymappings() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setReturnEntityMappings"]], "setsameentitythreshold() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameLengthFormattedEntities"]], "setseed() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSeed"]], "setunnormalizeddatemode() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUnnormalizedDateMode"]], "setuseshifdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShifDays"]], "setuseshiftdays() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShiftDays"]], "setzipcodetag() (deidentificationparams method)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[69, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "unnormalizeddatemode (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.unnormalizedDateMode"]], "useshifdays (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.useShifDays"]], "zipcodetag (deidentificationparams attribute)": [[69, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "inputannotatortypes (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "name (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "outputannotatortype (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "patientidcolumn (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[70, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[70, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[71, "module-sparknlp_jsl.annotator.deid"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "genderawareness (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "inputannotatortypes (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "language (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "nameentities (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "outputannotatortype (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "seed (namechunkobfuscator attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "setgenderawareness() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setlanguage() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setnameentities() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[72, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[72, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "inputannotatortypes (reidentification attribute)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "name (reidentification attribute)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "outputannotatortype (reidentification attribute)": [[73, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.reidentification": [[73, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "getusereplacement() (replacer method)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "inputannotatortypes (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "name (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "outputannotatortype (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "setusereplacement() (replacer method)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "sparknlp_jsl.annotator.deid.replacer": [[74, "module-sparknlp_jsl.annotator.deid.replacer"]], "usereplacement (replacer attribute)": [[74, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[75, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "outputannotatortype (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "predictionslimit (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[76, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[76, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "inputannotatortypes (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "isarray (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[77, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[77, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "documentfiltererbyclassifier (class in sparknlp_jsl.annotator.document_filterer_by_classifier)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier"]], "inputannotatortypes (documentfiltererbyclassifier attribute)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputAnnotatorTypes"]], "name (documentfiltererbyclassifier attribute)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.name"]], "outputannotatortype (documentfiltererbyclassifier attribute)": [[78, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputAnnotatorType"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[78, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "inputannotatortypes (averageembeddings attribute)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "name (averageembeddings attribute)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "outputannotatortype (averageembeddings attribute)": [[79, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[79, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "load() (bertsentencechunkembeddings static method)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentencechunkembeddings static method)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[80, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[80, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "inputannotatortypes (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "outputannotatortype (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "pretrained() (entitychunkembeddings static method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[81, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[81, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "extractivesummarization (class in sparknlp_jsl.annotator.embeddings.extractive_summarization)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization"]], "inputannotatortypes (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputAnnotatorTypes"]], "name (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.name"]], "outputannotatortype (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputAnnotatorType"]], "returnsingledocument (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.returnSingleDocument"]], "setreturnsingledocument() (extractivesummarization method)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setReturnSingleDocument"]], "setsimilaritythreshold() (extractivesummarization method)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSimilarityThreshold"]], "setsummarysize() (extractivesummarization method)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSummarySize"]], "similaritythreshold (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.similarityThreshold"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[82, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "summarysize (extractivesummarization attribute)": [[82, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.summarySize"]], "sparknlp_jsl.annotator.embeddings": [[83, "module-sparknlp_jsl.annotator.embeddings"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "inputannotatortypes (featuresassembler attribute)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "outputannotatortype (featuresassembler attribute)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[84, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[84, "module-sparknlp_jsl.annotator.feature_assembler"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "criteria (filteringparams attribute)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "filtervalue (filteringparams attribute)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setcriteria() (filteringparams method)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setfiltervalue() (filteringparams method)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[85, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "sparknlp_jsl.annotator.filtering_params": [[85, "module-sparknlp_jsl.annotator.filtering_params"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "featurescaling (genericclassifiermodel attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "inputannotatortypes (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "labelcolumn (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputannotatortype (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputlogspath (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericclassifiermodel method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputlogspath() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[86, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[86, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[87, "module-sparknlp_jsl.annotator.generic_classifier"]], "handleexceptionparams (class in sparknlp_jsl.annotator.handle_exception_params)": [[88, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams"]], "doexceptionhandling (handleexceptionparams attribute)": [[88, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.doExceptionHandling"]], "setdoexceptionhandling() (handleexceptionparams method)": [[88, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.setDoExceptionHandling"]], "sparknlp_jsl.annotator.handle_exception_params": [[88, "module-sparknlp_jsl.annotator.handle_exception_params"]], "assertion (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.disambiguation"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.re"]], "resolution (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator": [[89, "module-sparknlp_jsl.annotator"]], "splitter (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.splitter"]], "windowed (in module sparknlp_jsl.annotator)": [[89, "sparknlp_jsl.annotator.windowed"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "chunkprecedence (mergeprioritizationparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "defaultconfidence (mergeprioritizationparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "inputannotatortypes (chunkmergeapproach attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "mergeoverlapping (mergecommonparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "orderingfeatures (mergeprioritizationparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "pretrained() (chunkmergemodel static method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "replacedictresource (mergeresourceparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "selectionstrategy (mergeprioritizationparams attribute)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "setchunkprecedence() (mergeprioritizationparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositivesresource() (mergeresourceparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setinputcols() (chunkmergeapproach method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setmergeoverlapping() (mergecommonparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (mergeprioritizationparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setreplacedictresource() (mergeresourceparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setselectionstrategy() (mergeprioritizationparams method)": [[90, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[90, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[91, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[92, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[93, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "inputannotatortypes (iobtagger attribute)": [[93, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "name (iobtagger attribute)": [[93, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "outputannotatortype (iobtagger attribute)": [[93, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "scheme (iobtagger attribute)": [[93, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[93, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[93, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "doexceptionhandling (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.doExceptionHandling"]], "dropout (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "getclasses() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "gettrainingclassdistribution() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "labelcasing (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "outputannotatortype (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "overrideexistingtags (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "sentencetokenindex (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "setbatchsize() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdoexceptionhandling() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDoExceptionHandling"]], "setdropout() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "settagsmapping() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[94, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "trainingclassdistribution (medicalnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[94, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[95, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "inputannotatortypes (nerchunker attribute)": [[95, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "name (nerchunker attribute)": [[95, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "outputannotatortype (nerchunker attribute)": [[95, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "regexparsers (nerchunker attribute)": [[95, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[95, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[95, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "doexceptionhandling (commonnerconverterinternalparams attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.doExceptionHandling"]], "greedymode (commonnerconverterinternalparams attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "inputannotatortypes (nerconverterinternal attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "name (nerconverterinternal attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "outputannotatortype (nerconverterinternal attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "preserveposition (commonnerconverterinternalparams attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "replacedictresource (nerconverterinternal attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setallowlist() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setdenylist() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setdoexceptionhandling() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDoExceptionHandling"]], "setgreedymode() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (commonnerconverterinternalparams method)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[96, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (commonnerconverterinternalparams attribute)": [[96, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "combineentities (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "entityscopes (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "permuteentities (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "resampleentities (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "setcombineentities() (nertemplaterendermodel method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setpermuteentities() (nertemplaterendermodel method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[97, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[97, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [167, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [201, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [167, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [201, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [167, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [201, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[98, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[98, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "defaultreplacementday (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "inputannotatortypes (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "name (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputannotatortype (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputdateformat (datenormalizer attribute)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setoutputdateformat() (datenormalizer method)": [[99, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[99, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "inputannotatortypes (drugnormalizer attribute)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "lowercase (drugnormalizer attribute)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "outputannotatortype (drugnormalizer attribute)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "policy (drugnormalizer attribute)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[100, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[100, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[101, "module-sparknlp_jsl.annotator.normalizer"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[102, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[102, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[103, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "configprotobytes (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "customprompt (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "getquestiontypes() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "inputannotatortypes (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "mlframeworktype (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.mlFrameworkType"]], "modeltype (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.modelType"]], "name (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "outputannotatortype (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "pretrained() (medicalquestionanswering static method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "setconfigprotobytes() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setusecache() (medicalquestionanswering method)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "sparknlp_jsl.annotator.qa.medical_qa": [[104, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "usecache (medicalquestionanswering attribute)": [[104, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "inputannotatortypes (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "name (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "outputannotatortype (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "questionmark (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[105, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[105, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[106, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "featurescaling (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.featureScaling"]], "fromentitybegincol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getrelationtypeperpair() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "inputannotatortypes (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "multiclass (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.multiClass"]], "name (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "outputannotatortype (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "overrideexistinglabels (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "relationdirectioncol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfeaturescaling() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFeatureScaling"]], "setfromentity() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setmulticlass() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMultiClass"]], "setpredictionthreshold() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractionmodel method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "settoentity() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "sparknlp_jsl.annotator.re.relation_extraction": [[107, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[107, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [149, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [183, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [149, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [183, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "outputannotatortype (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "predictionthreshold (relationextractiondlmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [149, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [183, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "setbatchsize() (relationextractiondlmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[108, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "inputannotatortypes (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "outputannotatortype (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "relationpairs (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[109, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[109, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "getclasses() (zeroshotrelationextractionmodel method)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [150, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [184, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [150, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [184, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[110, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[110, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[111, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[112, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "inputannotatortypes (resolvermerger attribute)": [[112, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "name (resolvermerger attribute)": [[112, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "outputannotatortype (resolvermerger attribute)": [[112, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[112, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "labelcol (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "searchtree (sentenceentityresolvermodel attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setsearchtree() (sentenceentityresolvermodel method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[113, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[113, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[114, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "inputannotatortypes (resolution2chunk attribute)": [[114, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "name (resolution2chunk attribute)": [[114, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "outputannotatortype (resolution2chunk attribute)": [[114, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "setparams() (resolution2chunk method)": [[114, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[114, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "router (class in sparknlp_jsl.annotator.router)": [[115, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputannotatortypes (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputtype (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.name"]], "outputannotatortype (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "setfilterfieldselements() (router method)": [[115, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputcols() (router method)": [[115, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[115, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[115, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "skiplpinputcolsvalidation (router attribute)": [[115, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[115, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[116, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "configprotobytes (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "dosample (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "ignoretokenids (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "maxnewtokens (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "mlframeworktype (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.mlFrameworkType"]], "name (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "outputannotatortype (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "randomseed (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "refinechunksize (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setignoretokenids() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setrandomseed() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[117, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "usecache (medicalencoderdecoder attribute)": [[117, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[118, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "loadsavedmodel() (medicalsummarizer static method)": [[118, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "name (medicalsummarizer attribute)": [[118, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "pretrained() (medicalsummarizer static method)": [[118, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[118, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "configprotobytes (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "customprompt (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.customPrompt"]], "getadditionaltokens() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getAdditionalTokens"]], "inputannotatortypes (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "loadsavedmodel() (medicaltextgenerator static method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxtextlength (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "mlframeworktype (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.mlFrameworkType"]], "modeltype (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "outputannotatortype (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "pretrained() (medicaltextgenerator static method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "setadditionaltokens() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setAdditionalTokens"]], "setconfigprotobytes() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCustomPrompt"]], "setmaxtextlength() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setstopateos() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "setusecache() (medicaltextgenerator method)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[119, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "usecache (medicaltextgenerator attribute)": [[119, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "text2sql (class in sparknlp_jsl.annotator.seq2seq.text2sql)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL"]], "getpostprocessingsubstitutions() (text2sql method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getPostProcessingSubstitutions"]], "getschema() (text2sql method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getSchema"]], "loadsavedmodel() (text2sql static method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.loadSavedModel"]], "name (text2sql attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.name"]], "pretrained() (text2sql static method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.pretrained"]], "setpostprocessingsubstitutions() (text2sql method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setPostProcessingSubstitutions"]], "setschema() (text2sql method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setSchema"]], "settablelimit() (text2sql method)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTableLimit"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[120, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "tablelimit (text2sql attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.tableLimit"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[121, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[121, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[122, "module-sparknlp_jsl.annotator.splitter"]], "internaldocumentsplitter (class in sparknlp_jsl.annotator.splitter.internal_document_splitter)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter"]], "casesensitive (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.caseSensitive"]], "customboundsstrategy (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.customBoundsStrategy"]], "enablesentenceincrement (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.enableSentenceIncrement"]], "inputannotatortypes (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputAnnotatorTypes"]], "maxlength (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.maxLength"]], "metadatafields (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.metaDataFields"]], "name (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.name"]], "optionalinputannotatortypes (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputAnnotatorType"]], "sentenceawareness (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.sentenceAwareness"]], "setcasesensitive() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCaseSensitive"]], "setcustomboundsstrategy() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCustomBoundsStrategy"]], "setenablesentenceincrement() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setEnableSentenceIncrement"]], "setinputcols() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setInputCols"]], "setmaxlength() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMaxLength"]], "setmetadatafields() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMetaDataFields"]], "setsentenceawareness() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSentenceAwareness"]], "setsplitmode() (internaldocumentsplitter method)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitMode"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[123, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "splitmode (internaldocumentsplitter attribute)": [[123, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitMode"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getoutputact() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getuserelationdirection() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "islicensed (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "labelcolumn (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "setbatchnorm() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[124, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[124, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "whiteblacklistparams (class in sparknlp_jsl.annotator.white_black_list_params)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams"]], "blacklist (whiteblacklistparams attribute)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.blackList"]], "casesensitive (whiteblacklistparams attribute)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.caseSensitive"]], "setblacklist() (whiteblacklistparams method)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setBlackList"]], "setcasesensitive() (whiteblacklistparams method)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setCaseSensitive"]], "setdenylist() (whiteblacklistparams method)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setDenyList"]], "setwhitelist() (whiteblacklistparams method)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setWhiteList"]], "sparknlp_jsl.annotator.white_black_list_params": [[125, "module-sparknlp_jsl.annotator.white_black_list_params"]], "whitelist (whiteblacklistparams attribute)": [[125, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.whiteList"]], "sparknlp_jsl.annotator.windowed": [[126, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "gluestring (windowedparams attribute)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "inputannotatortypes (windowedsentencemodel attribute)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "setgluestring() (windowedparams method)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setwindowsize() (windowedparams method)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[127, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "windowsize (windowedparams attribute)": [[127, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "sparknlp_jsl.base": [[128, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[129, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[129, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[129, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[129, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[129, "module-sparknlp_jsl.common.annotator_approach_internal"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[130, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "inputannotatortypes (annotatormodelinternal attribute)": [[130, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[130, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "setparams() (annotatormodelinternal method)": [[130, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[130, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[130, "module-sparknlp_jsl.common.annotator_model_internal"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[131, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[131, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[131, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[131, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[132, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[133, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[133, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[133, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[133, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[134, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[134, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[134, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[134, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[134, "module-sparknlp_jsl.custom_transformer"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[135, "sparknlp_jsl.deidentification_module.Deidentifier"]], "deid_with_custom_pipeline() (deidentifier method)": [[135, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[135, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[135, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "sparknlp_jsl.deidentification_module": [[135, "module-sparknlp_jsl.deidentification_module"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[136, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[136, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[136, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[136, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[136, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[136, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[136, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[136, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[136, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[136, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[136, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[136, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[136, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[136, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[136, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[136, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[136, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[136, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[137, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[137, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[137, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[138, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[139, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[139, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[139, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[140, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "setidcolumn() (financedocumenthashcoder method)": [[140, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[140, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[141, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[142, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[143, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[143, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[143, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[144, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[144, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[145, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[146, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[146, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[146, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[147, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[148, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[149, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[149, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[150, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[150, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[151, "module-sparknlp_jsl.finance"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[152, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[152, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[152, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[152, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[152, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[152, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[153, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[153, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[153, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[153, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[153, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[154, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[154, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "name (financedocumentmlclassifiermodel attribute)": [[154, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[154, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[154, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "financefewshotclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach"]], "financefewshotclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel"]], "name (financefewshotclassifierapproach attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.name"]], "name (financefewshotclassifiermodel attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.name"]], "pretrained() (financefewshotclassifiermodel static method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[155, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[156, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[157, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "name (financeencoderdecoder attribute)": [[157, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[157, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[158, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "loadsavedmodel() (financequestionanswering static method)": [[158, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "name (financequestionanswering attribute)": [[158, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "pretrained() (financequestionanswering static method)": [[158, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[158, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[159, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "loadsavedmodel() (financesummarizer static method)": [[159, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "name (financesummarizer attribute)": [[159, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "pretrained() (financesummarizer static method)": [[159, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[159, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "loadsavedmodel() (financetextgenerator static method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "name (financetextgenerator attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "pretrained() (financetextgenerator static method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[160, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[161, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[162, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[162, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[163, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[164, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[164, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[164, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[164, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[164, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[164, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[165, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[165, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[165, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[165, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[165, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[165, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[166, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[167, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[167, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profile"]], "profileesrdv21y19() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileESRDV21Y19"]], "profilerxhccv05y20() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileRxHCCV05Y20"]], "profilerxhccv05y21() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileRxHCCV05Y21"]], "profilerxhccv05y22() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileRxHCCV05Y22"]], "profilerxhccv05y23() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileRxHCCV05Y23"]], "profilerxhccv08y22() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileRxHCCV08Y22"]], "profilerxhccv08y23() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileRxHCCV08Y23"]], "profilev22() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV24"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV24Y22"]], "profilev28() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV28"]], "profilev28y24() (in module sparknlp_jsl.functions)": [[168, "sparknlp_jsl.functions.profileV28Y24"]], "sparknlp_jsl.functions": [[168, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[169, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[169, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[169, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[169, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[169, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[169, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[169, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[169, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[169, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[169, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[170, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[170, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[170, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[170, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[170, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[171, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[171, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[171, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[172, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[173, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[173, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[173, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[174, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "setidcolumn() (legaldocumenthashcoder method)": [[174, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[174, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[175, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[176, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[177, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[177, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[177, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[178, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[178, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[179, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[180, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[180, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[180, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[181, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[182, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[183, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[183, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[184, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[184, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[185, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[186, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[187, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[187, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[187, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[187, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[187, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[187, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[188, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[188, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[188, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[188, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[188, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[189, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[189, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "name (legaldocumentmlclassifiermodel attribute)": [[189, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[189, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[189, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "legalfewshotclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach"]], "legalfewshotclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel"]], "name (legalfewshotclassifierapproach attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.name"]], "name (legalfewshotclassifiermodel attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.name"]], "pretrained() (legalfewshotclassifiermodel static method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[190, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[191, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[192, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "name (legalencoderdecoder attribute)": [[192, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[192, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[193, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "loadsavedmodel() (legalquestionanswering static method)": [[193, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "name (legalquestionanswering attribute)": [[193, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "pretrained() (legalquestionanswering static method)": [[193, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[193, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[194, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "loadsavedmodel() (legalsummarizer static method)": [[194, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "name (legalsummarizer attribute)": [[194, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "pretrained() (legalsummarizer static method)": [[194, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[194, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "loadsavedmodel() (legaltextgenerator static method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "name (legaltextgenerator attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "pretrained() (legaltextgenerator static method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[195, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[196, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[196, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[197, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[198, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[199, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[199, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[199, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[199, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[199, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[199, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[200, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[200, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[200, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[200, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[200, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[200, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[201, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[201, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[202, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[202, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[202, "module-sparknlp_jsl.modelTracer"]], "rulebasedclassifier (class in sparknlp_jsl.nlp_test.bias.bias_testing)": [[203, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier"]], "init_medical_gender_classifier() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[203, "sparknlp_jsl.nlp_test.bias.bias_testing.init_medical_gender_classifier"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[203, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "test_gender_bias() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[203, "sparknlp_jsl.nlp_test.bias.bias_testing.test_gender_bias"]], "transform() (rulebasedclassifier method)": [[203, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier.transform"]], "sparknlp_jsl.nlp_test.bias": [[204, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[205, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[206, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "interactivefix (class in sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix"]], "add_flag_to_conll() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.add_flag_to_conll"]], "adjust_page_size() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.adjust_page_size"]], "apply_fixes() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.apply_fixes"]], "apply_label_fixes() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.apply_label_fixes"]], "conll_reader() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_reader"]], "conll_writer() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_writer"]], "create_grid() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.create_grid"]], "display() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.display"]], "empty_grid() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.empty_grid"]], "fill_grid() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fill_grid"]], "fix_all() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_all"]], "fix_label() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_label"]], "get_cell_element() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_cell_element"]], "get_central_grid() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_central_grid"]], "get_classes() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_classes"]], "get_default_indx() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_default_indx"]], "get_drop_down() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down"]], "get_drop_down_title() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down_title"]], "get_footer() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_footer"]], "get_header() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_header"]], "get_page_control_buttons() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_control_buttons"]], "get_page_number() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_number"]], "get_sentence() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_sentence"]], "get_title_html() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_title_html"]], "next_page() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.next_page"]], "num_sample_drop_down() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.num_sample_drop_down"]], "prev_page() (interactivefix method)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[207, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "update_with_model_predictions() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[207, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.update_with_model_predictions"]], "calculate_label_error_score() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[208, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.calculate_label_error_score"]], "get_label_quality_scores() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[208, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_label_quality_scores"]], "get_unique_entities() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[208, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_unique_entities"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[208, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "test_label_errors() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[208, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[209, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "stylesheet (in module sparknlp_jsl.nlp_test.noisy_labels.utils)": [[209, "sparknlp_jsl.nlp_test.noisy_labels.utils.stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[210, "module-sparknlp_jsl.nlp_test.robustness"]], "add_context_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_context_to_data"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_contractions"]], "add_punctuation_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_punctuation_to_data"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_typo_to_sentence"]], "augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.augment_robustness"]], "conll_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.conll_reader"]], "convert_accent() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.convert_accent"]], "create_dataframe() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_dataframe"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_terminology"]], "filter_by_entity_type() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.filter_by_entity_type"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_cohyponyms_wordnet"]], "get_sample() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_sample"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.introduce_typos"]], "modify_capitalization_lower() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_lower"]], "modify_capitalization_title() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_title"]], "modify_capitalization_upper() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_upper"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[211, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "strip_punctuation_from_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.strip_punctuation_from_data"]], "swap_entities_with_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_entities_with_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_with_cohyponym"]], "test_and_augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[211, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.test_and_augment_robustness"]], "add_context() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_context"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_contractions"]], "add_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_punctuation"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_typo_to_sentence"]], "american_to_british() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.american_to_british"]], "british_to_american() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.british_to_american"]], "calculate_metrics() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.calculate_metrics"]], "conll_sentence_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.conll_sentence_reader"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.create_terminology"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.get_cohyponyms_wordnet"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.introduce_typos"]], "modify_capitalization() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.modify_capitalization"]], "remove_context_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_context_tokens"]], "remove_contraction_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_contraction_tokens"]], "remove_punctuation_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_punctuation_tokens"]], "run_test() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.run_test"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[212, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "strip_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.strip_punctuation"]], "swap_named_entities_from_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_named_entities_from_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_with_cohyponym"]], "test_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[212, "sparknlp_jsl.nlp_test.robustness.robustness_testing.test_robustness"]], "calculate_proportion() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[213, "sparknlp_jsl.nlp_test.robustness.utils.calculate_proportion"]], "get_augmentation_proportions() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[213, "sparknlp_jsl.nlp_test.robustness.utils.get_augmentation_proportions"]], "sparknlp_jsl.nlp_test.robustness.utils": [[213, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "suggest_perturbations() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[213, "sparknlp_jsl.nlp_test.robustness.utils.suggest_perturbations"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "downloadmodeldirectly() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModelDirectly"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[214, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[214, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[214, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[215, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[215, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[215, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[216, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[216, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[216, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[217, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[217, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[217, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[217, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[217, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[217, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[217, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[217, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[217, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[217, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[217, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[218, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[218, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[218, "module-sparknlp_jsl.training_log_parser"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[219, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[219, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[219, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[219, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[220, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[220, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[221, "module-sparknlp_jsl.utils.alab_utils"]], "strip_json_entities() (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.strip_json_entities"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[221, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[222, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[223, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[223, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[224, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[224, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[225, "module-sparknlp_jsl.utils"]], "parse_str_to_dict() (in module sparknlp_jsl.utils.java_helper)": [[226, "sparknlp_jsl.utils.java_helper.parse_str_to_dict"]], "sparknlp_jsl.utils.java_helper": [[226, "module-sparknlp_jsl.utils.java_helper"]], "assertion (internalannotatortype attribute)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[227, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "sparknlp_jsl.utils.licensed_annotator_type": [[227, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[228, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[229, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[229, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[229, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[229, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[229, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[230, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[230, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[230, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "draw_boxes_on_image_handwritten_region() (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.draw_boxes_on_image_handwritten_region"]], "get_handwritten_regions() (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.get_handwritten_regions"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "pretrained_model (in module sparknlp_jsl.utils.ocr_utils)": [[231, "sparknlp_jsl.utils.ocr_utils.pretrained_model"]], "sparknlp_jsl.utils.ocr_utils": [[231, "module-sparknlp_jsl.utils.ocr_utils"]], "hcc_from_icd() (riskadjustmentutil static method)": [[232, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_from_ICD"]], "hcc_labels() (riskadjustmentutil static method)": [[232, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_labels"]], "riskadjustmentutil (class in sparknlp_jsl.utils.risk_adjustment_utils)": [[232, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil"]], "diff_between_hccs() (riskadjustmentutil static method)": [[232, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.diff_between_HCCs"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[232, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[233, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[233, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]]}})