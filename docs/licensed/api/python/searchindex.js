Search.setIndex({"docnames": ["autosummary/sparknlp_jsl", "getting_started/index", "index", "reference/autosummary/sparknlp_jsl", "reference/autosummary/sparknlp_jsl.annotator", "reference/autosummary/sparknlp_jsl.finance", "reference/autosummary/sparknlp_jsl.legal", "reference/autosummary/sparknlp_jsl.utils", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/contextual_assertion/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/fewshot_assertion_sentence_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/mapper2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_assertion_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/large_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/light_deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_ner/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index", "reference/autosummary/sparknlp_jsl/annotator/er/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/flattener/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/multi_chunk2_doc/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/rag/context_split_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/rag/index", "reference/autosummary/sparknlp_jsl/annotator/rag/vectordb_post_processor/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/regex/index", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/llm/index", "reference/autosummary/sparknlp_jsl/llm/llm_loader/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/pipeline_output_parser/index", "reference/autosummary/sparknlp_jsl/pipeline_tracer/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/transpiler/builder/index", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index", "reference/autosummary/sparknlp_jsl/transpiler/converter/index", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index", "reference/autosummary/sparknlp_jsl/transpiler/index", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/java_helper/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/autosummary/sparknlp_jsl/utils/visualner_annotations_parser/index", "reference/index"], "filenames": ["autosummary/sparknlp_jsl.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl.rst", "reference/autosummary/sparknlp_jsl.annotator.rst", "reference/autosummary/sparknlp_jsl.finance.rst", "reference/autosummary/sparknlp_jsl.legal.rst", "reference/autosummary/sparknlp_jsl.utils.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/contextual_assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/fewshot_assertion_sentence_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/mapper2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_assertion_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/large_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/light_deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/flattener/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/multi_chunk2_doc/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/context_split_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/vectordb_post_processor/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/llm/index.rst", "reference/autosummary/sparknlp_jsl/llm/llm_loader/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/pipeline_output_parser/index.rst", "reference/autosummary/sparknlp_jsl/pipeline_tracer/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/builder/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/converter/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/java_helper/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/visualner_annotations_parser/index.rst", "reference/index.rst"], "titles": ["sparknlp_jsl", "Getting Started", "Spark NLP Documentation", "sparknlp_jsl", "sparknlp_jsl.annotator", "sparknlp_jsl.finance", "sparknlp_jsl.legal", "sparknlp_jsl.utils", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.contextual_assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.mapper2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_assertion_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.large_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deidentication_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.light_deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.extractive_summarization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er.entity_ruler_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.flattener</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.handle_exception_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher.text_matcher_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.multi_chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag.context_split_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag.vectordb_post_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.text2sql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter.internal_document_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.white_black_list_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.llm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.llm.llm_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pipeline_output_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pipeline_tracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.class_names</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.externalSources</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.nlu_2_python</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.python_2_scala</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.source_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.uploader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.java_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.risk_adjustment_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.run_transpiled_code</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.visualner_annotations_parser</span></code>", "API Reference"], "terms": {"5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "9": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "function": [0, 3, 8, 10, 23, 25, 32, 33, 45, 62, 77, 99, 110, 111, 121, 123, 129, 130, 132, 157, 163, 164, 166, 190, 191, 192, 196, 220, 224], "get_credenti": [0, 3, 155], "spark": [0, 3, 8, 9, 10, 12, 14, 17, 19, 20, 22, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 61, 63, 64, 69, 70, 72, 74, 75, 77, 79, 80, 81, 85, 91, 92, 93, 94, 96, 99, 100, 101, 104, 105, 106, 109, 113, 119, 121, 122, 123, 125, 126, 135, 136, 138, 139, 141, 144, 145, 146, 150, 151, 153, 155, 157, 159, 160, 169, 170, 173, 174, 176, 179, 180, 181, 185, 186, 187, 189, 191, 193, 194, 195, 196, 198, 199, 200, 204, 206, 209, 211, 218, 223, 224], "get": [0, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192, 209], "john": [0, 3, 8, 43, 45, 46, 48, 59, 86, 89, 109, 155, 211], "snow": [0, 3, 8, 59, 155, 211], "lab": [0, 1, 3, 8, 155, 196, 209, 211], "credenti": [0, 3, 8, 155], "paramet": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 156, 157, 159, 160, 163, 164, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 204, 205, 206, 207, 208, 209, 211, 212, 217, 218, 220, 221, 222, 223], "sparksess": [0, 1, 3, 8, 20, 30, 35, 36, 37, 38, 55, 56, 59, 75, 79, 85, 92, 94, 104, 105, 106, 119, 135, 136, 138, 144, 145, 146, 150, 151, 153, 155, 169, 170, 173, 179, 180, 181, 185, 186, 187, 194, 195, 198, 200, 209, 211, 218, 223], "return": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 204, 205, 206, 209, 212, 214, 217, 218, 220, 221, 222, 223], "secretkei": [0, 3, 155], "keyid": [0, 3, 155], "token": [0, 3, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 27, 28, 29, 30, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 51, 52, 53, 55, 56, 59, 63, 69, 70, 72, 74, 75, 76, 77, 79, 83, 85, 91, 92, 93, 94, 99, 101, 103, 104, 105, 106, 109, 110, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 178, 179, 180, 181, 182, 185, 186, 187, 189, 196, 199, 209, 223], "type": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 204, 205, 206, 209, 211, 212, 217, 218, 220, 222, 223], "tupl": [0, 3, 8, 10, 11, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 78, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 155, 157, 159, 163, 164, 166, 174, 175, 176, 186, 204, 218, 222], "library_set": [0, 3, 155], "librari": [0, 1, 2, 3, 8, 36, 37, 38, 51, 119, 126, 138, 150, 155, 160, 173, 185, 198, 204], "set": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 196, 197, 204, 209, 211, 218, 220], "str": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 204, 205, 206, 207, 208, 209, 211, 212, 214, 217, 218, 220, 221, 222, 223], "pub_vers": [0, 3, 155], "public": [0, 3, 155, 193, 219], "version": [0, 1, 3, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 193, 207, 220], "nlp": [0, 3, 8, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 104, 105, 106, 109, 113, 126, 138, 139, 141, 144, 145, 146, 150, 151, 155, 160, 173, 174, 176, 179, 180, 181, 185, 186, 191, 193, 196, 199, 209, 211, 218, 224], "start": [0, 3, 10, 11, 12, 51, 70, 75, 91, 99, 123, 126, 132, 151, 155, 157, 160, 166, 186, 196, 207, 209, 211, 222], "secret": [0, 1, 3, 8, 155], "gpu": [0, 3, 155], "bool": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 193, 194, 196, 197, 198, 200, 204, 209, 211, 212, 214, 217, 218, 222], "fals": [0, 3, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 63, 64, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 99, 100, 101, 105, 106, 109, 110, 113, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 146, 148, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 181, 182, 185, 186, 187, 189, 191, 194, 196, 209, 211, 212, 214, 218, 222], "apple_silicon": [0, 3, 155], "aarch64": [0, 3, 155], "param": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 199, 209, 214, 218], "dict": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 194, 200, 204, 205, 206, 209, 211, 214, 220, 222, 223], "none": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 198, 200, 205, 206, 207, 208, 209, 211, 212, 218, 222], "default": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 115, 116, 117, 119, 120, 123, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192, 193, 194, 196, 200, 207, 209, 214, 217, 218, 222, 223], "licens": [0, 1, 3, 42, 45, 77, 125, 155, 159, 194], "The": [0, 1, 3, 9, 10, 11, 12, 13, 14, 18, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 46, 48, 50, 52, 53, 55, 56, 59, 61, 62, 63, 64, 69, 70, 72, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 99, 101, 103, 104, 105, 106, 109, 110, 111, 113, 117, 120, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 200, 204, 205, 206, 207, 211, 214, 220, 222], "would": [0, 3, 100, 109, 139, 155, 174], "result": [0, 3, 8, 10, 11, 14, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 85, 87, 91, 92, 93, 94, 96, 99, 100, 105, 106, 109, 113, 121, 123, 125, 126, 129, 130, 135, 136, 138, 139, 140, 141, 144, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 169, 170, 173, 174, 175, 176, 179, 181, 182, 185, 186, 187, 191, 197, 198, 200, 206, 211, 219], "equival": [0, 3, 155], "builder": [0, 1, 3, 110, 155, 202], "appnam": [0, 1, 3, 155], "master": [0, 1, 3, 155], "local": [0, 1, 3, 10, 20, 30, 35, 36, 37, 38, 41, 53, 55, 56, 64, 75, 79, 85, 91, 94, 99, 104, 105, 106, 123, 125, 132, 136, 138, 139, 144, 145, 146, 150, 151, 153, 155, 157, 159, 166, 170, 173, 174, 179, 180, 181, 185, 186, 187, 189], "config": [0, 1, 3, 39, 155], "driver": [0, 1, 3, 155, 194], "memori": [0, 1, 3, 36, 38, 59, 75, 85, 110, 138, 144, 150, 151, 155, 173, 179, 185, 186], "32g": [0, 3, 155], "serial": [0, 1, 3, 10, 20, 36, 37, 38, 55, 56, 59, 75, 79, 85, 94, 103, 104, 105, 106, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 155, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187, 199, 214], "org": [0, 1, 3, 50, 99, 155, 211], "apach": [0, 1, 3, 155], "kryoseri": [0, 1, 3, 155], "buffer": [0, 1, 3, 20, 55, 56, 155], "max": [0, 1, 3, 8, 10, 12, 23, 25, 29, 36, 37, 38, 79, 94, 103, 104, 105, 106, 123, 129, 130, 136, 138, 140, 143, 145, 146, 150, 153, 155, 157, 163, 164, 170, 173, 175, 178, 180, 181, 185, 187], "2000m": [0, 1, 3, 155], "maxresults": [0, 1, 3, 155], "file": [0, 3, 8, 10, 22, 30, 31, 32, 33, 39, 41, 42, 45, 46, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 121, 123, 125, 132, 139, 141, 151, 155, 157, 159, 166, 174, 176, 186, 194, 196, 197, 205, 206, 207, 209, 211, 217, 218, 223], "overwrit": [0, 3, 75, 139, 151, 155, 174, 186, 207], "true": [0, 3, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 110, 111, 113, 115, 116, 121, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 154, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 193, 194, 196, 197, 204, 209, 211, 212, 217, 218, 222], "extralisten": [0, 3, 155], "com": [0, 1, 3, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 101, 104, 105, 106, 109, 113, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 199, 208, 211], "johnsnowlab": [0, 1, 3, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 101, 104, 105, 106, 109, 113, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 199], "licenselifecyclemanag": [0, 3, 155], "jar": [0, 1, 3, 8, 155, 209, 218], "http": [0, 1, 3, 8, 50, 93, 99, 155], "pypi": [0, 1, 3, 155], "jsl": [0, 1, 3, 8, 23, 25, 129, 130, 148, 155, 163, 164, 182, 199, 209, 218], "releas": [0, 3, 155], "packag": [0, 1, 3], "nlp_2": [0, 1, 3, 155], "12": [0, 1, 3, 17, 43, 80, 155, 196, 211], "getorcr": [0, 1, 3, 155], "your": [0, 3, 8, 21, 53, 69, 75, 96, 110, 139, 151, 155, 174, 186, 194], "kei": [0, 3, 20, 23, 25, 41, 42, 77, 78, 79, 89, 94, 101, 107, 125, 129, 130, 136, 153, 155, 159, 163, 164, 170, 187, 191, 194, 204, 211, 214, 222], "whether": [0, 3, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 197, 198, 200, 204, 212, 214, 217], "us": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 156, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 196, 198, 200, 205, 209, 211, 218, 220, 223], "m1": [0, 3, 155], "healthcar": [1, 2, 8, 45, 78, 224], "i": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 194, 197, 198, 204, 207, 211, 212, 214, 217, 218, 220, 222, 223], "commerci": 1, "extens": [1, 55], "clinic": [1, 10, 12, 14, 20, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 52, 53, 55, 56, 63, 64, 70, 72, 74, 75, 76, 77, 79, 81, 85, 91, 92, 93, 94, 96, 99, 100, 104, 105, 106, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 148, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 182, 185, 187, 189, 191, 192, 193, 207], "biomed": 1, "text": [1, 8, 9, 10, 11, 12, 14, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 35, 36, 37, 38, 39, 41, 43, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 59, 63, 69, 70, 72, 74, 75, 76, 77, 78, 79, 81, 83, 85, 91, 92, 93, 94, 96, 99, 100, 101, 103, 104, 105, 106, 109, 113, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 178, 179, 180, 181, 182, 185, 186, 187, 191, 195, 196, 204, 209, 211, 218, 223], "mine": 1, "If": [1, 8, 10, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 50, 52, 53, 56, 59, 61, 62, 63, 64, 66, 69, 70, 72, 75, 77, 79, 80, 83, 85, 86, 89, 91, 92, 93, 94, 96, 99, 100, 103, 104, 105, 106, 109, 110, 111, 115, 119, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 191, 192, 194, 198, 204, 207, 211, 212, 214, 217, 222], "you": [1, 8, 9, 10, 21, 39, 41, 42, 45, 46, 53, 63, 75, 78, 79, 85, 91, 93, 99, 101, 109, 119, 123, 125, 144, 151, 153, 157, 159, 179, 186, 187, 192, 193, 194, 196, 211], "don": [1, 22, 86, 99, 132, 148, 166, 182], "t": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 196, 222], "have": [1, 8, 10, 13, 14, 20, 22, 23, 25, 27, 41, 45, 56, 70, 75, 78, 89, 91, 93, 96, 99, 110, 123, 125, 129, 130, 139, 148, 151, 157, 159, 163, 164, 174, 182, 186, 195, 211], "subscript": 1, "yet": [1, 14, 109], "can": [1, 8, 10, 11, 12, 13, 18, 20, 22, 30, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 50, 53, 56, 59, 61, 63, 64, 70, 72, 75, 77, 83, 85, 86, 89, 91, 93, 94, 96, 99, 103, 104, 105, 106, 109, 110, 123, 125, 132, 136, 138, 139, 143, 144, 145, 146, 150, 151, 154, 157, 159, 166, 170, 173, 174, 178, 179, 180, 181, 185, 186, 192, 193, 196, 207, 211, 212, 214], "ask": [1, 109], "free": [1, 14, 189], "trial": 1, "click": 1, "button": 1, "below": [1, 56], "try": [1, 28, 29, 30, 31, 32, 33, 64, 70, 80, 91, 99, 119, 132, 140, 141, 166, 175, 176], "www": [1, 208], "provid": [1, 8, 10, 21, 37, 39, 42, 45, 48, 59, 63, 69, 75, 76, 96, 99, 117, 123, 125, 139, 150, 151, 157, 159, 174, 185, 186, 191, 192, 194, 197, 198, 204, 206, 211, 220, 221], "specif": [1, 56, 72, 75, 93, 109, 110, 113, 151, 186, 204, 218, 220], "annot": [1, 8, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 156, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 191, 193, 195, 196, 199, 209, 211, 218, 223], "pipelin": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 218, 223], "model": [1, 2, 8, 10, 11, 12, 14, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 46, 48, 50, 52, 53, 55, 56, 59, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 85, 91, 92, 93, 94, 96, 99, 100, 103, 104, 105, 106, 110, 113, 115, 116, 119, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 199, 207, 219, 223], "embed": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 59, 61, 63, 64, 67, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 199], "entiti": [1, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 37, 39, 41, 42, 45, 46, 47, 48, 50, 52, 53, 56, 59, 62, 63, 69, 70, 72, 75, 76, 77, 78, 79, 80, 86, 91, 92, 93, 94, 96, 98, 99, 101, 111, 123, 125, 129, 130, 132, 135, 136, 148, 150, 151, 153, 156, 157, 159, 163, 164, 166, 169, 170, 182, 185, 186, 187, 191, 192, 194, 196, 209, 211, 218], "recognit": [1, 21, 37, 75, 79, 150, 151, 153, 185, 186, 187], "link": [1, 50], "normal": [1, 28, 29, 39, 67, 99, 110, 132, 139, 140, 154, 155, 166, 174, 175, 199], "assert": [1, 8, 18, 30, 63, 67, 128, 137, 155, 162, 171, 191, 192, 196, 197, 199, 209, 215], "statu": [1, 10, 11, 12, 123, 157, 191, 196, 220], "detect": [1, 11, 14, 218], "de": [1, 41, 42, 45, 46, 125, 159, 194], "identif": [1, 10, 12, 20, 45, 55, 56, 59, 75, 123, 139, 151, 157, 174, 186, 194], "relat": [1, 8, 23, 25, 27, 56, 91, 92, 93, 94, 110, 111, 129, 130, 135, 136, 148, 154, 156, 163, 164, 169, 170, 182, 191, 192, 196, 204, 209], "extract": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 205, 223], "spell": [1, 109, 122, 199], "check": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 207, 222], "correct": [1, 211], "resolv": [1, 14, 98, 99, 132, 166, 191], "rule": [1, 14, 19, 39, 41, 42, 59, 75, 96, 125, 159], "base": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 193, 196, 204, 207, 209, 215, 220, 221], "contextu": [1, 14], "parser": [1, 39, 191, 192, 196, 199], "gener": [1, 8, 20, 21, 30, 31, 32, 33, 41, 42, 43, 45, 64, 75, 78, 83, 85, 86, 91, 103, 104, 105, 106, 125, 126, 139, 141, 143, 144, 145, 146, 151, 159, 160, 174, 176, 178, 179, 180, 181, 186, 189, 191, 194, 196, 199, 200, 204, 209, 218], "summar": [1, 57, 103, 104, 143, 145, 178, 180, 191], "risk": [1, 154, 220], "adjust": [1, 72, 154, 220], "modul": [1, 2], "offer": [1, 220], "access": [1, 8], "sever": [1, 10, 18, 41, 42, 45, 46, 123, 125, 157, 159, 220], "transform": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 199, 204, 211], "bert": [1, 20, 35, 36, 37, 38, 55, 56, 75, 92, 94, 99, 101, 135, 136, 138, 150, 151, 169, 170, 173, 185, 186], "biobert": 1, "clinicalbert": 1, "glove": [1, 12], "med": 1, "icd": [1, 99, 132, 166, 220], "o": [1, 37, 46, 48, 74, 77, 150, 185, 194, 196, 222], "It": [1, 8, 14, 18, 22, 42, 43, 45, 53, 56, 59, 61, 62, 63, 64, 70, 75, 77, 87, 109, 110, 111, 125, 139, 151, 154, 159, 174, 186, 191, 192, 198, 204, 205, 211], "also": [1, 13, 27, 36, 37, 38, 41, 45, 50, 56, 59, 72, 75, 77, 91, 96, 99, 117, 125, 138, 139, 150, 151, 159, 173, 174, 185, 186, 191], "includ": [1, 8, 10, 13, 14, 18, 21, 22, 30, 41, 42, 52, 53, 59, 62, 63, 70, 72, 75, 77, 85, 93, 94, 99, 107, 110, 111, 123, 125, 132, 136, 144, 151, 154, 157, 159, 166, 170, 179, 186, 192, 198, 204, 205, 209], "over": [1, 41, 42, 53, 75, 109, 110, 117, 120, 125, 151, 159, 186, 191, 218, 220], "2000": [1, 80], "pre": [1, 8, 14, 20, 23, 25, 36, 37, 38, 39, 51, 55, 75, 79, 91, 92, 94, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 185, 186, 187, 223], "train": [1, 8, 10, 11, 12, 14, 18, 22, 23, 25, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 41, 46, 51, 55, 56, 59, 61, 64, 69, 70, 74, 75, 76, 77, 79, 80, 91, 92, 94, 96, 99, 100, 110, 113, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 182, 185, 186, 187, 199, 223], "recogn": [1, 56, 75, 77, 79, 91, 94, 136, 151, 153, 170, 186, 187], "follow": [1, 18, 21, 22, 39, 41, 42, 45, 46, 48, 53, 62, 70, 75, 77, 89, 96, 99, 109, 125, 151, 154, 159, 186, 191, 194, 196, 204, 205, 208], "mani": [1, 50, 56, 103, 104, 143, 145, 178, 180], "more": [1, 11, 13, 20, 36, 38, 41, 42, 45, 51, 53, 56, 77, 78, 125, 126, 138, 150, 159, 160, 173, 185, 189], "support": [1, 33, 41, 42, 45, 46, 75, 89, 125, 139, 151, 159, 174, 186], "sign": [1, 196, 199], "symptom": [1, 56, 63, 91], "treatment": [1, 53, 93, 94, 136, 170, 196], "procedur": 1, "test": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 196, 197, 212], "section": [1, 41, 78, 198, 204], "drug": [1, 56, 77, 81, 91, 93, 94, 136, 170, 194], "name": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 116, 117, 119, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 204, 207, 211, 212, 218, 220], "dosag": [1, 56, 77, 81, 91], "strength": [1, 56, 77, 91], "rout": [1, 91], "durat": [1, 91], "frequenc": [1, 77, 91, 189], "factor": [1, 154, 191], "smoke": 1, "obes": 1, "diabet": [1, 20, 53, 55, 72, 89, 113], "hypertens": [1, 30], "substanc": 1, "abus": 1, "anatomi": 1, "organ": [1, 37, 63, 87, 150, 185, 194], "subdivis": 1, "cell": [1, 37, 75, 150, 151, 185, 186, 194], "structur": [1, 94, 110, 136, 170, 194, 211], "tissu": 1, "gene": 1, "chemic": 1, "demograph": 1, "ag": [1, 41, 42, 45, 47, 48, 53, 63, 70, 74, 106, 125, 154, 159, 194, 220], "gender": [1, 41, 42, 45, 46, 63, 70, 74, 125, 159], "height": 1, "weight": [1, 8, 55, 56, 110, 156], "race": 1, "ethnic": 1, "marit": 1, "vital": [1, 196], "sensit": [1, 10, 13, 14, 18, 22, 39, 45, 52, 53, 55, 62, 70, 72, 77, 89, 91, 92, 93, 109, 110, 111, 123, 135, 157, 169, 204], "data": [1, 8, 10, 11, 14, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 50, 51, 52, 53, 55, 56, 59, 61, 63, 64, 66, 69, 70, 72, 74, 75, 77, 79, 80, 81, 85, 86, 91, 92, 93, 94, 96, 99, 100, 105, 106, 109, 110, 113, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 181, 182, 185, 186, 187, 194, 196, 204, 211, 223], "patient": [1, 10, 14, 22, 23, 25, 27, 39, 41, 42, 43, 45, 46, 48, 56, 85, 86, 123, 125, 126, 129, 130, 144, 148, 154, 157, 159, 160, 163, 164, 179, 182, 194, 220], "address": [1, 10, 12, 20, 28, 29, 30, 31, 32, 33, 35, 41, 50, 55, 56, 64, 69, 70, 76, 85, 96, 99, 104, 105, 106, 109, 141, 144, 145, 146, 176, 179, 180, 181, 186], "phone": [1, 42, 45, 125, 159, 194], "email": [1, 45, 194, 211], "date": [1, 9, 41, 42, 43, 45, 47, 80, 89, 96, 101, 121, 125, 126, 159, 160, 194, 207, 211], "identifi": [1, 14, 19, 20, 21, 45, 70, 93, 99, 101, 191, 194, 196, 220, 222], "For": [1, 8, 12, 18, 36, 37, 41, 42, 45, 51, 55, 56, 59, 69, 74, 75, 79, 81, 89, 91, 92, 93, 94, 96, 99, 109, 125, 126, 135, 136, 138, 139, 150, 151, 153, 159, 160, 169, 170, 173, 174, 185, 186, 187, 193], "inform": [1, 2, 10, 30, 31, 32, 33, 39, 41, 43, 45, 53, 63, 64, 70, 75, 77, 80, 81, 91, 99, 110, 123, 125, 132, 141, 151, 154, 157, 159, 166, 176, 186, 191, 192, 196, 220, 223], "visit": [1, 52, 91], "our": 1, "site": [1, 39], "built": [1, 139, 174, 198], "top": [1, 20, 36, 37, 38, 75, 89, 103, 104, 138, 143, 145, 150, 151, 173, 178, 180, 185, 186, 189, 196], "x": [1, 109], "need": [1, 12, 14, 39, 41, 42, 45, 55, 59, 75, 76, 86, 91, 96, 99, 125, 132, 139, 148, 151, 154, 159, 166, 174, 182, 186, 196], "java": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 193, 214], "8": [1, 36, 38, 53, 56, 75, 109, 138, 139, 150, 151, 173, 174, 185, 186, 189, 191, 196, 211], "11": [1, 12, 22, 41, 42, 45, 47, 80, 89, 125, 159, 196, 211], "7": [1, 45, 196], "10": [1, 11, 23, 25, 43, 81, 92, 99, 129, 130, 132, 148, 163, 164, 166, 182, 196, 211, 220], "recommend": [1, 50, 75, 151, 186], "basic": 1, "knowledg": [1, 50, 99], "framework": 1, "work": [1, 45, 75, 79, 110, 151, 153, 186, 187, 200, 211, 220], "environ": [1, 41, 212], "befor": [1, 12, 13, 14, 20, 72, 75, 103, 104, 109, 143, 145, 151, 154, 178, 180, 186, 189, 220], "pleas": [1, 8, 36, 37, 47, 69, 75, 91, 92, 96, 99, 135, 138, 139, 150, 151, 169, 173, 174, 185, 186, 193], "refer": [1, 2, 8, 10, 12, 20, 41, 42, 43, 46, 47, 51, 55, 56, 59, 75, 91, 99, 123, 125, 126, 139, 151, 157, 159, 160, 174, 186], "document": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 195, 196, 209, 211, 223], "first": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 196, 205], "let": [1, 89, 91, 99], "": [1, 8, 10, 12, 13, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 42, 45, 46, 48, 50, 53, 55, 59, 64, 69, 70, 75, 77, 83, 85, 89, 91, 96, 99, 103, 104, 105, 106, 107, 109, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 143, 144, 145, 146, 151, 154, 157, 159, 163, 164, 166, 174, 175, 176, 178, 179, 180, 181, 186, 189, 194, 211], "make": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192], "sure": [1, 8, 41, 42, 45, 125, 159, 192], "oracl": 1, "openjdk": 1, "0_292": 1, "pip": [1, 196], "extra": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "index": [1, 10, 11, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 78, 91, 96, 99, 109, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186, 191, 192, 209, 211], "url": [1, 8, 194], "code": [1, 8, 39, 41, 42, 43, 99, 110, 125, 132, 154, 159, 166, 191, 194, 196, 198, 200, 204, 205, 206, 218, 220, 221], "upgrad": [1, 220], "part": [1, 41, 42, 43, 45, 51, 125, 126, 159, 160, 189, 212], "split": [1, 21, 30, 31, 32, 33, 64, 75, 79, 87, 91, 109, 141, 151, 153, 176, 186, 187, 196, 209, 222], "e": [1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 194, 207, 222], "2": [1, 10, 12, 14, 17, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 52, 53, 55, 56, 59, 64, 69, 70, 75, 77, 81, 86, 89, 91, 96, 99, 109, 110, 115, 122, 123, 125, 129, 130, 132, 139, 140, 141, 148, 151, 154, 157, 159, 163, 164, 166, 174, 175, 176, 182, 186, 189, 193, 196, 211, 218], "onli": [1, 8, 13, 14, 20, 23, 25, 30, 31, 32, 33, 41, 42, 45, 46, 63, 64, 70, 75, 83, 85, 91, 93, 96, 103, 104, 105, 106, 109, 125, 129, 130, 141, 143, 144, 145, 146, 151, 154, 159, 163, 164, 176, 178, 179, 180, 181, 186, 189, 196], "avail": [1, 13, 20, 36, 37, 48, 56, 70, 75, 77, 85, 105, 106, 138, 139, 144, 146, 150, 151, 173, 174, 179, 181, 185, 186, 192, 193], "user": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 211], "valid": [1, 8, 10, 30, 31, 32, 33, 41, 42, 64, 75, 91, 93, 123, 125, 139, 141, 151, 157, 159, 174, 176, 186, 191, 207, 211], "did": [1, 109], "receiv": 1, "contact": [1, 42, 194], "u": [1, 41, 42, 45, 75, 121, 125, 151, 159, 186, 207], "href": [1, 189], "mailto": 1, "info": [1, 10, 30, 31, 32, 33, 64, 75, 91, 99, 123, 132, 141, 151, 157, 166, 176, 186], "thi": [1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 194, 196, 198, 211, 212, 214, 220, 222, 224], "simpl": [1, 59], "piec": [1, 21], "import": [1, 8, 10, 12, 14, 17, 18, 22, 23, 25, 27, 28, 29, 36, 37, 38, 39, 41, 43, 46, 51, 52, 53, 55, 56, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 80, 91, 92, 96, 100, 109, 113, 123, 125, 126, 129, 130, 132, 135, 138, 139, 140, 148, 150, 151, 155, 157, 159, 160, 163, 164, 166, 169, 173, 174, 175, 182, 185, 186, 191, 196, 198, 204, 211, 213], "sparknlp_jsl": 1, "Or": 1, "flexibl": 1, "pyspark": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 194, 195, 196, 209, 211, 218], "sql": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 194, 195, 196, 209, 211, 215, 218], "enterpris": 1, "16": [1, 17, 196, 211], "2g": 1, "version_publ": 1, "main": [2, 59], "page": [2, 12, 224], "workshop": [2, 8, 51, 75, 126, 139, 151, 160, 174, 186], "hub": [2, 12, 36, 37, 56, 75, 91, 92, 99, 138, 139, 150, 151, 173, 174, 185, 186, 193], "welcom": 2, "python": [2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 198, 200, 204, 205, 206, 214], "legal": [2, 14, 23, 25, 36, 37, 38, 39, 75, 79, 91, 92, 94, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 150, 151, 153, 155, 199], "financ": [2, 14, 23, 25, 36, 37, 38, 39, 75, 79, 91, 92, 94, 155, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 185, 187, 199], "contain": [2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 194, 196, 200, 204, 205, 206, 211, 222, 223], "how": [2, 18, 20, 23, 25, 30, 31, 32, 33, 36, 37, 38, 47, 50, 53, 59, 64, 69, 70, 75, 77, 86, 91, 96, 100, 103, 104, 109, 129, 130, 138, 139, 141, 143, 145, 148, 150, 151, 163, 164, 173, 174, 176, 178, 180, 182, 185, 186], "exampl": [2, 8, 9, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 36, 37, 38, 39, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 85, 86, 91, 92, 93, 94, 96, 99, 100, 101, 105, 106, 109, 110, 113, 123, 126, 129, 130, 132, 135, 136, 138, 139, 140, 144, 146, 148, 150, 151, 153, 157, 160, 163, 164, 166, 169, 170, 173, 174, 175, 179, 181, 182, 185, 186, 187, 191, 194, 196, 208], "requir": [2, 8, 10, 12, 20, 28, 29, 36, 38, 47, 51, 53, 55, 56, 75, 89, 99, 100, 126, 138, 140, 150, 151, 157, 160, 173, 175, 185, 186, 196, 198, 204, 212], "instal": [2, 8, 212], "session": [2, 8, 196, 198, 204, 209, 218, 223], "from": [2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 193, 196, 204, 205, 208, 209, 211, 223], "api": [2, 86], "manipul": 8, "an": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 194, 196, 198, 209, 218, 220, 224], "json": [8, 22, 23, 25, 39, 41, 59, 121, 125, 129, 130, 148, 159, 163, 164, 182, 196, 209, 211, 223], "export": [8, 196, 209], "appropri": [8, 11], "layout": 8, "ner": [8, 10, 12, 14, 20, 21, 22, 23, 25, 27, 30, 37, 41, 42, 43, 46, 48, 50, 53, 55, 56, 63, 67, 70, 72, 86, 93, 94, 122, 123, 125, 129, 130, 136, 137, 148, 149, 155, 157, 159, 163, 164, 170, 171, 182, 183, 191, 196, 199, 209, 218], "annotationlab": 8, "interfac": [8, 99], "tool": 8, "multi": [8, 23, 25, 30, 31, 32, 33, 36, 37, 38, 41, 45, 64, 91, 125, 129, 130, 138, 139, 141, 150, 159, 163, 164, 173, 174, 176, 185], "modal": 8, "allow": [8, 10, 20, 23, 25, 36, 38, 48, 52, 53, 63, 89, 91, 92, 101, 106, 109, 123, 129, 130, 135, 138, 150, 154, 157, 163, 164, 169, 173, 185, 192, 194, 207, 220], "team": 8, "effici": 8, "collabor": 8, "ml": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 199, 218], "automat": [8, 41, 42, 45, 86, 94, 125, 136, 159, 170], "those": [8, 20, 43, 53, 77, 93, 154], "programmat": 8, "through": [8, 39, 209], "conll": [8, 75, 151, 186, 196, 199, 209, 223], "format": [8, 10, 39, 41, 42, 45, 46, 59, 63, 69, 70, 74, 75, 77, 80, 89, 96, 123, 125, 139, 151, 157, 159, 174, 186, 194, 196, 207, 211, 218, 223], "csv": [8, 22, 39, 41, 46, 48, 59, 61, 70, 75, 77, 121, 125, 139, 151, 159, 174, 186, 196, 211], "excel": 8, "classif": [8, 64, 67, 94, 138, 139, 140, 150, 155, 173, 174, 175, 185, 191, 199, 220], "build": [8, 27, 110, 198, 200, 204], "preannot": 8, "save": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 196, 208, 218, 223], "upload": [8, 155, 202], "project": [8, 109], "interact": [8, 154, 194], "instanc": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 194, 195, 198], "up": [8, 79, 100, 110, 139, 153, 174, 187], "list": [8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 204, 207, 209, 211, 214, 217, 218, 220, 222, 223, 224], "all": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 116, 117, 119, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 204, 206, 207, 209, 211, 218, 224], "creat": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192, 196, 211], "new": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 196, 205, 207, 220, 222], "delet": [8, 220], "edit": [8, 23, 25, 129, 130, 163, 164], "configur": [8, 14, 41, 66, 113, 198, 204], "ani": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "exist": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 205, 207], "task": [8, 36, 37, 38, 94, 103, 104, 136, 138, 143, 145, 150, 170, 173, 178, 180, 185, 196, 209], "usag": [8, 59, 75, 77, 81, 85, 139, 144, 151, 174, 179, 186], "detail": [8, 81, 91, 154, 189, 192], "tutori": 8, "base_url": 8, "client_id": 8, "client_secret": 8, "cooki": 8, "http_success_cod": 8, "200": [8, 91, 109, 110, 218], "201": 8, "203": 8, "password": 8, "usernam": [8, 194], "create_project": 8, "project_nam": 8, "project_descript": 8, "project_sampl": 8, "project_instruct": 8, "descript": [8, 10, 20, 30, 31, 32, 33, 64, 75, 85, 91, 99, 123, 132, 141, 144, 151, 157, 166, 176, 179, 186, 196, 205, 220], "random": [8, 41, 42, 43, 45, 75, 78, 83, 85, 103, 104, 105, 106, 125, 126, 139, 143, 144, 145, 146, 151, 159, 160, 174, 178, 179, 180, 181, 186, 189, 194, 218], "sequenti": [8, 10, 12, 13, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "sampl": [8, 27, 43, 83, 85, 103, 104, 105, 106, 126, 143, 144, 145, 146, 160, 178, 179, 180, 181, 189, 208], "while": [8, 11, 41, 42, 75, 80, 99, 103, 104, 110, 125, 132, 139, 143, 145, 151, 159, 166, 174, 178, 180, 186], "show": [8, 10, 11, 14, 17, 18, 20, 21, 22, 23, 25, 27, 30, 35, 36, 37, 38, 39, 41, 43, 46, 47, 50, 51, 52, 53, 55, 56, 59, 63, 69, 70, 72, 74, 79, 80, 81, 85, 86, 91, 92, 93, 94, 96, 100, 105, 106, 109, 113, 123, 125, 126, 129, 130, 135, 136, 138, 139, 144, 146, 148, 150, 153, 157, 159, 160, 163, 164, 169, 170, 173, 174, 179, 181, 182, 185, 187, 193, 196, 199, 211, 218], "guidelin": 8, "delete_project": 8, "confirm": [8, 52], "boolean": [8, 21, 41, 42, 70, 78, 96, 110, 125, 159, 197], "input": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 204, 209, 211, 218, 223], "delete_task": 8, "task_id": [8, 196], "id": [8, 19, 42, 43, 45, 51, 59, 83, 85, 99, 103, 104, 105, 106, 121, 125, 126, 143, 144, 145, 146, 159, 160, 178, 179, 180, 181, 191, 194, 195, 196, 209, 223], "generate_preannot": 8, "all_result": 8, "document_column": 8, "ner_column": 8, "assertion_column": 8, "relations_column": 8, "user_nam": 8, "titles_list": 8, "id_offset": 8, "int": [8, 9, 10, 12, 14, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 50, 55, 56, 57, 59, 64, 69, 70, 75, 77, 78, 79, 80, 83, 85, 89, 91, 92, 93, 94, 96, 99, 101, 103, 104, 105, 106, 109, 110, 113, 115, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 191, 194, 196, 200, 208, 211, 218, 220, 222, 223], "directli": [8, 91, 192, 193], "object": [8, 24, 36, 37, 38, 75, 83, 91, 110, 122, 138, 139, 150, 151, 173, 174, 185, 186, 190, 192, 193, 207, 215, 220, 221], "light_pipelin": 8, "fullannot": [8, 9, 48, 191], "full_pipelin": 8, "df": [8, 80, 122, 190, 194, 195, 196], "collect": [8, 10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 61, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "output": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 209, 218, 223], "column": [8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 190, 191, 194, 195, 196, 209, 211], "documentassembl": [8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 51, 52, 53, 55, 56, 59, 63, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 91, 92, 93, 94, 96, 99, 100, 101, 105, 106, 109, 113, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 181, 182, 185, 186, 187, 199, 209], "stage": [8, 10, 12, 14, 18, 19, 22, 27, 39, 41, 46, 48, 50, 63, 70, 74, 76, 77, 80, 81, 85, 91, 92, 93, 99, 105, 106, 113, 123, 125, 132, 135, 144, 146, 154, 157, 159, 166, 169, 179, 181, 192], "chunk": [8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 39, 41, 42, 43, 45, 46, 50, 51, 53, 55, 56, 59, 62, 69, 70, 72, 74, 76, 77, 78, 80, 85, 86, 91, 92, 93, 94, 96, 99, 100, 101, 103, 104, 105, 106, 109, 123, 125, 126, 129, 130, 132, 135, 136, 140, 143, 144, 145, 146, 148, 157, 159, 160, 163, 164, 166, 169, 170, 175, 178, 179, 180, 181, 182, 191, 196, 197, 211, 217, 218, 222], "custom": [8, 10, 12, 39, 41, 45, 85, 91, 92, 99, 105, 106, 109, 120, 121, 125, 135, 144, 146, 156, 159, 169, 179, 181], "titl": [8, 21, 89, 196, 209], "when": [8, 10, 11, 13, 14, 21, 39, 41, 42, 45, 48, 53, 56, 63, 70, 75, 76, 77, 78, 80, 86, 87, 89, 91, 99, 103, 104, 105, 106, 109, 123, 125, 132, 143, 145, 146, 148, 151, 154, 157, 159, 166, 178, 180, 181, 182, 186, 193, 196, 212], "older": [8, 41, 42, 53, 125, 159], "ar": [8, 10, 13, 14, 18, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 42, 45, 46, 47, 48, 50, 52, 53, 55, 56, 59, 62, 63, 64, 66, 70, 72, 75, 77, 78, 79, 81, 83, 85, 87, 89, 91, 92, 93, 94, 99, 101, 103, 104, 105, 106, 109, 110, 111, 119, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 150, 151, 153, 154, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 191, 192, 194, 196, 207, 209, 211, 220, 222], "alreadi": [8, 28, 29, 75, 91, 99, 132, 140, 151, 166, 175, 186], "defin": [8, 12, 13, 14, 18, 21, 22, 27, 28, 29, 39, 48, 52, 53, 56, 62, 70, 72, 75, 77, 80, 93, 99, 110, 111, 140, 151, 175, 186, 191, 209], "offeset": 8, "avoid": [8, 11, 20, 189], "overrit": 8, "get_iaa_metr": 8, "conll_dir": 8, "annotator_nam": 8, "set_ref_annot": 8, "return_nerdlmetr": 8, "save_dir": [8, 218], "results_token_bas": 8, "iaa": 8, "metric": [8, 10, 75, 123, 151, 157, 186, 197, 217, 222], "path": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 196, 197, 205, 206, 207, 208, 209, 211, 217, 218, 223], "present": [8, 10, 11, 14, 17, 18, 30, 63, 70, 72, 74, 75, 77, 99, 113, 123, 132, 139, 151, 157, 166, 174, 186, 191, 220], "comparison": [8, 55], "made": [8, 70, 110, 191], "respect": [8, 220], "By": [8, 20, 56, 75, 93, 151, 186], "we": [8, 22, 23, 25, 28, 29, 30, 31, 32, 33, 41, 42, 50, 56, 64, 75, 86, 89, 91, 99, 125, 129, 130, 132, 139, 140, 141, 148, 159, 163, 164, 166, 174, 175, 176, 182], "full": [8, 23, 25, 81, 85, 129, 130, 144, 154, 163, 164, 179], "partial": [8, 23, 25, 129, 130, 154, 163, 164], "per": [8, 10, 12, 36, 38, 41, 42, 50, 64, 75, 77, 91, 94, 123, 125, 136, 138, 139, 151, 157, 159, 170, 173, 174, 186, 197, 217, 222], "datafram": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 194, 195, 196, 197, 209, 211], "nerdlmetr": [8, 122, 199], "evalu": [8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 197, 217], "method": [8, 20, 30, 31, 32, 33, 39, 41, 46, 64, 77, 91, 109, 110, 117, 120, 125, 132, 141, 159, 166, 176, 191, 192, 196, 206, 211, 220, 224], "report": [8, 14, 208], "get_all_project": 8, "visibl": [8, 41, 42, 45, 125, 159], "rtype": [8, 166, 209], "get_annot": 8, "output_nam": 8, "where": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 196, 207, 222, 223], "write": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 218, 223], "directori": [8, 193, 206, 223], "locat": [8, 14, 23, 25, 36, 37, 38, 39, 50, 59, 75, 77, 79, 91, 92, 94, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 185, 186, 187, 193, 194, 207], "get_assertion_data": 8, "input_json_path": [8, 209], "assertion_label": [8, 196, 209], "relevant_ner_label": 8, "ground_truth": [8, 99, 196, 209], "unannotated_label": 8, "regex_pattern": [8, 209], "unannotated_label_strategi": 8, "unannotated_label_strategy_dict": 8, "included_task_id": 8, "excluded_task_id": [8, 209], "excluded_task_titl": [8, 209], "seed": [8, 41, 42, 43, 45, 46, 75, 78, 83, 85, 103, 104, 105, 106, 125, 126, 139, 143, 144, 145, 146, 151, 159, 160, 174, 178, 179, 180, 181, 186, 189, 194], "panda": [8, 43, 209], "label": [8, 10, 11, 12, 13, 18, 21, 22, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 41, 42, 45, 52, 53, 59, 62, 64, 70, 72, 74, 75, 77, 79, 91, 92, 94, 98, 99, 110, 111, 122, 123, 125, 132, 135, 136, 138, 139, 140, 141, 150, 151, 153, 156, 157, 159, 166, 169, 170, 173, 174, 175, 176, 185, 186, 187, 191, 196, 197, 209, 218, 223], "relev": [8, 20, 196], "assign": [8, 59], "select": [8, 10, 11, 13, 18, 20, 21, 23, 25, 36, 37, 38, 41, 42, 43, 45, 46, 47, 56, 57, 63, 70, 79, 85, 86, 89, 91, 92, 99, 105, 106, 123, 125, 129, 130, 132, 135, 138, 144, 146, 148, 150, 153, 157, 159, 163, 164, 166, 169, 173, 179, 181, 182, 185, 187, 194, 209], "ground": [8, 99, 209], "truth": [8, 99, 209], "complet": [8, 209], "latest": [8, 209], "pattern": [8, 14, 41, 42, 59, 70, 76, 81, 85, 96, 109, 125, 144, 154, 159, 179, 209], "regex": [8, 9, 14, 18, 19, 22, 39, 41, 42, 45, 59, 62, 67, 70, 76, 77, 89, 101, 109, 125, 155, 159, 199, 209], "regular": [8, 12, 18, 22, 41, 70, 96, 109, 110, 125, 159, 209], "strategi": [8, 13, 41, 42, 70, 86, 96, 109, 125, 148, 159, 182], "control": [8, 10, 18, 75, 81, 123, 157], "number": [8, 10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 41, 42, 43, 45, 57, 59, 64, 70, 75, 83, 85, 86, 89, 91, 92, 93, 99, 103, 104, 105, 106, 110, 123, 125, 126, 129, 130, 132, 135, 139, 140, 141, 143, 144, 145, 146, 148, 151, 157, 159, 160, 163, 164, 166, 169, 174, 175, 176, 178, 179, 180, 181, 182, 186, 189, 194, 200, 208, 222], "occurr": [8, 75, 99, 151, 186], "unannot": 8, "option": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 193, 194, 196, 198, 200, 218, 222, 223], "count": [8, 75, 151, 186, 222], "fraction": 8, "absolut": 8, "dictionari": [8, 11, 12, 23, 25, 39, 45, 56, 70, 77, 79, 89, 91, 92, 94, 96, 101, 106, 129, 130, 135, 136, 148, 153, 154, 163, 164, 169, 170, 182, 187, 191, 192, 200, 204, 205, 206, 211, 223], "entity_label": [8, 41, 42, 45, 121, 125, 159], "sample_weight_or_count": 8, "should": [8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192, 193, 196, 198, 204, 207, 211], "between": [8, 10, 20, 21, 31, 32, 33, 41, 42, 45, 53, 55, 56, 57, 69, 72, 75, 76, 77, 81, 87, 89, 91, 92, 93, 94, 99, 109, 110, 123, 125, 135, 136, 139, 141, 151, 157, 159, 169, 170, 174, 176, 186, 194, 196, 214, 220, 222], "exclud": [8, 12, 14, 75, 99, 132, 151, 166, 186, 196, 209], "same": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 211], "everi": [8, 41, 75, 125, 151, 159, 186, 193], "time": [8, 27, 41, 42, 45, 46, 72, 75, 103, 104, 110, 125, 139, 143, 145, 151, 159, 174, 178, 180, 186, 200, 220], "execut": [8, 41, 42, 45, 46, 125, 159, 198, 204, 221], "pd": [8, 43, 209], "get_classification_data": 8, "get_conll_data": 8, "exported_conl": 8, "excluded_label": [8, 196, 209], "io": [8, 199, 218], "irrelev": [8, 209], "get_conll_data_from_visualn": 8, "visualn": [8, 223], "get_project_config": 8, "get_relation_extraction_data": 8, "negative_rel": 8, "relation_pair": 8, "negative_relation_strategi": 8, "negative_relation_strategy_dict": 8, "doc_wise_annot": [8, 209], "wa": [8, 10, 12, 14, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 43, 46, 48, 50, 56, 59, 64, 69, 70, 72, 75, 77, 86, 91, 96, 99, 109, 110, 113, 115, 123, 125, 129, 130, 132, 139, 140, 141, 148, 151, 154, 157, 159, 163, 164, 166, 174, 175, 176, 182, 186, 191, 200, 211], "were": [8, 14, 24, 75, 151, 186, 209, 220], "want": [8, 9, 10, 21, 23, 25, 39, 41, 42, 45, 50, 56, 59, 75, 78, 85, 86, 91, 93, 99, 101, 123, 125, 129, 130, 144, 148, 157, 159, 163, 164, 179, 182, 194], "discard": [8, 79, 153, 187], "rest": [8, 13, 18, 22, 27, 41, 42, 52, 53, 62, 70, 72, 77, 111, 125, 159], "plausibl": 8, "pair": [8, 13, 22, 56, 70, 77, 86, 91, 92, 93, 94, 135, 136, 148, 169, 170, 182, 204], "separ": [8, 13, 20, 41, 46, 70, 72, 75, 77, 87, 89, 91, 93, 96, 109, 121, 125, 151, 159, 186, 211, 214], "case": [8, 10, 11, 13, 14, 18, 20, 22, 23, 25, 35, 36, 37, 38, 39, 41, 45, 51, 52, 53, 55, 56, 59, 62, 69, 70, 72, 75, 77, 79, 86, 89, 91, 92, 93, 94, 99, 109, 111, 123, 125, 126, 129, 130, 132, 135, 136, 138, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 182, 185, 186, 187, 222], "one": [8, 9, 10, 12, 14, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 38, 39, 41, 42, 46, 48, 50, 54, 55, 56, 59, 64, 66, 69, 70, 72, 75, 77, 86, 89, 91, 92, 93, 94, 96, 99, 109, 110, 115, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 148, 151, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 182, 186, 194, 205, 207, 211], "direct": [8, 14, 91, 92, 93, 110, 135, 169, 191], "possibl": [8, 9, 10, 13, 18, 20, 22, 23, 24, 25, 29, 30, 31, 32, 33, 39, 41, 42, 56, 59, 62, 64, 70, 77, 81, 91, 93, 101, 107, 109, 110, 123, 125, 129, 130, 140, 141, 157, 159, 163, 164, 175, 176, 192], "neg": [8, 10, 14, 15, 85, 91, 94, 123, 136, 144, 157, 170, 179, 191, 222], "entity1": [8, 86, 91, 92, 93, 135, 169, 191], "entity2": [8, 86, 91, 92, 93, 135, 169, 191], "each": [8, 10, 12, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 55, 56, 59, 63, 64, 69, 70, 75, 77, 78, 85, 86, 91, 93, 94, 96, 99, 109, 110, 115, 123, 125, 129, 130, 132, 136, 139, 140, 141, 144, 148, 151, 157, 159, 163, 164, 166, 170, 174, 175, 176, 179, 182, 186, 191, 207, 209, 211, 218], "repres": [8, 20, 21, 22, 41, 42, 59, 69, 70, 99, 110, 125, 159, 191, 192, 218, 220], "wise": [8, 75, 151, 186, 209], "done": [8, 12, 75, 139, 151, 174, 186], "cross": 8, "sentenc": [8, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 31, 35, 36, 37, 38, 39, 41, 42, 46, 48, 50, 52, 53, 55, 56, 57, 59, 63, 69, 70, 72, 74, 75, 76, 77, 78, 79, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 113, 121, 123, 125, 129, 130, 132, 135, 136, 138, 139, 141, 143, 145, 146, 148, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 176, 178, 180, 181, 182, 185, 186, 187, 191, 196, 209], "review_annot": 8, "conll_path": 8, "ner_model_path": [8, 75, 151, 186], "review": [8, 122, 196], "predict": [8, 10, 28, 29, 30, 31, 32, 33, 50, 64, 75, 91, 123, 140, 141, 151, 157, 175, 176, 186, 189, 197, 217, 222], "tag": [8, 10, 22, 41, 42, 70, 74, 75, 76, 77, 91, 123, 125, 139, 151, 157, 159, 174, 186, 197, 199, 217, 222], "compar": [8, 18, 20, 22, 62, 70, 77], "origin": [8, 23, 25, 28, 29, 41, 42, 45, 46, 48, 77, 80, 99, 110, 125, 129, 130, 132, 140, 154, 159, 163, 164, 166, 175, 189, 191, 222], "chunk_based_comparison_df": 8, "token_based_comparision_df": 8, "chunk_frequency_df": 8, "metrics_result": 8, "set_credenti": 8, "annotationlab_url": 8, "connect": [8, 110], "client": 8, "ha": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 218], "set_project_config": 8, "classification_label": 8, "ner_label": [8, 14, 74, 191, 196], "relations_label": 8, "d": [8, 41, 42, 89, 96, 125, 159, 194], "multiclass": [8, 30, 31, 32, 33, 64, 91, 141, 176], "differ": [8, 20, 61, 70, 75, 91, 93, 110, 151, 154, 186, 196, 218, 220], "upload_preannot": 8, "upload_task": 8, "task_list": 8, "title_list": 8, "length": [8, 10, 12, 13, 35, 36, 37, 38, 41, 42, 45, 46, 50, 70, 79, 83, 85, 94, 103, 104, 105, 106, 109, 110, 123, 125, 136, 138, 143, 144, 145, 146, 150, 153, 157, 159, 170, 173, 178, 179, 180, 181, 185, 187], "equal": [8, 22, 55, 56, 70, 75, 89, 103, 104, 143, 145, 151, 178, 180, 186], "increment": [8, 109], "offset": [8, 10, 14, 15, 91, 123, 157], "batch": [8, 10, 20, 30, 31, 32, 33, 35, 36, 38, 55, 56, 64, 75, 79, 85, 91, 103, 104, 105, 106, 110, 123, 138, 139, 141, 143, 144, 145, 146, 150, 151, 153, 157, 173, 174, 176, 178, 179, 180, 181, 185, 186, 187], "annotationmerg": [9, 199], "classnam": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 199], "java_model": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 113, 116, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "common": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 105, 109, 113, 123, 125, 126, 129, 130, 132, 135, 140, 148, 151, 154, 155, 157, 159, 160, 163, 164, 166, 169, 175, 182, 186, 199], "annotatormodelintern": [9, 10, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 89, 92, 98, 99, 101, 103, 105, 109, 113, 116, 130, 164], "merg": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 67, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 198, 199], "multipl": [9, 45, 53, 56, 59, 94, 136, 170], "inputtyp": [9, 101], "valu": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 194, 199, 204, 207, 211, 214, 222], "wordpiec": [9, 101, 199], "word_embed": [9, 10, 12, 14, 27, 43, 48, 50, 53, 63, 75, 91, 101, 123, 139, 151, 157, 174, 186], "sentence_embed": [9, 31, 50, 55, 56, 99, 100, 101, 132, 139, 141, 166, 174, 176], "categori": [9, 28, 29, 31, 32, 33, 35, 36, 38, 52, 64, 91, 92, 94, 101, 135, 136, 138, 139, 140, 141, 156, 169, 170, 173, 174, 175, 176, 191, 220], "sentiment": [9, 101, 139, 174], "po": [9, 22, 75, 91, 101, 122, 151, 186, 199, 209], "named_ent": [9, 37, 74, 75, 76, 77, 79, 101, 139, 150, 151, 153, 174, 185, 186, 187, 196], "depend": [9, 24, 56, 59, 75, 79, 85, 91, 92, 93, 94, 98, 101, 110, 135, 136, 144, 151, 153, 169, 170, 179, 186, 187, 209], "labeled_depend": [9, 23, 25, 27, 101, 129, 130, 148, 163, 164, 182], "languag": [9, 10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 46, 50, 51, 55, 56, 59, 64, 69, 70, 75, 79, 85, 91, 92, 94, 96, 99, 101, 104, 105, 106, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 192, 193, 194, 196, 207, 211], "keyword": [9, 14, 20, 67, 101, 199, 215], "empty_data": [9, 43, 48, 99], "createdatafram": [9, 10, 14, 17, 19, 20, 22, 27, 30, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 51, 52, 53, 55, 56, 59, 63, 69, 70, 72, 74, 75, 77, 79, 80, 81, 85, 91, 92, 94, 96, 99, 100, 101, 105, 106, 113, 123, 125, 126, 135, 136, 138, 139, 144, 146, 150, 151, 153, 157, 159, 160, 169, 170, 173, 174, 179, 181, 185, 186, 187], "todf": [9, 10, 14, 17, 19, 20, 22, 27, 30, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 51, 52, 53, 55, 56, 59, 63, 69, 70, 72, 74, 75, 77, 79, 80, 81, 85, 91, 92, 93, 94, 96, 99, 100, 101, 105, 106, 109, 113, 123, 125, 126, 135, 136, 138, 139, 144, 146, 150, 151, 153, 157, 159, 160, 169, 170, 173, 174, 179, 181, 185, 186, 187], "document1": 9, "setinputcol": [9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 211], "setoutputcol": [9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 211], "document2": [9, 43], "setinputtyp": [9, 101], "all_doc": 9, "pipelinemodel": [9, 28, 29, 75, 139, 140, 151, 174, 175, 186, 190, 192, 199, 218], "setstag": [9, 11, 17, 20, 21, 23, 25, 28, 29, 30, 35, 36, 37, 38, 43, 51, 52, 53, 55, 56, 59, 61, 64, 69, 72, 75, 79, 94, 96, 100, 101, 109, 126, 129, 130, 136, 138, 139, 140, 148, 150, 151, 153, 160, 163, 164, 170, 173, 174, 175, 182, 185, 186, 187], "fit": [9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 50, 51, 52, 53, 55, 56, 59, 61, 63, 64, 69, 70, 72, 75, 76, 77, 79, 80, 81, 85, 86, 91, 92, 93, 94, 96, 99, 100, 105, 106, 109, 110, 113, 115, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 181, 182, 185, 186, 187, 218], "lp": 9, "lightpipelin": [9, 48, 199, 209], "doc": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "replic": 9, "23": [9, 19, 96, 154], "getter_attr": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "inputannotatortyp": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 192], "inputcol": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 192], "lazyannot": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "optionalinputannotatortyp": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "outputannotatortyp": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 192], "outputcol": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 192, 218], "skiplpinputcolsvalid": [9, 10, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 89, 91, 92, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 129, 130, 132, 135, 136, 138, 140, 141, 143, 144, 145, 146, 148, 150, 151, 157, 159, 163, 164, 166, 169, 170, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186], "uid": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 192], "clear": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "map": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 194, 196, 204, 214, 220], "been": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "explicitli": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "copi": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 193], "_type": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "parammap": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "jp": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "some": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 220], "implement": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "call": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "companion": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "compon": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "so": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "both": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192, 194, 205, 206], "wrapper": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 214], "javaparam": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "explainparam": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "explain": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "singl": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 209, 218], "its": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "suppli": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "string": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 195, 196, 199, 204, 207, 211, 214], "extractparammap": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "them": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192], "flat": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "latter": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "conflict": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "order": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "getinputcol": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "current": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 119, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 195, 212, 220, 222], "getlazyannot": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "lazili": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "recursivepipelin": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 199], "getordefault": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "rais": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 198, 212], "error": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 212], "neither": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "getoutputcol": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "getparam": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "paramnam": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "getparamvalu": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "hasdefault": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "hasparam": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "given": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 121, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 192, 204, 206, 207, 212, 220], "inputcolsvalid": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "isdefin": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "isset": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "classmethod": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "load": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 193, 196, 204, 205], "rl": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186], "read": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 196, 199], "shortcut": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "mlreader": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "setforceinputtypevalid": [9, 10, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 89, 91, 92, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 129, 130, 132, 135, 136, 138, 140, 141, 143, 144, 145, 146, 148, 150, 151, 157, 159, 163, 164, 166, 169, 170, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186], "etfm": [9, 10, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 52, 53, 54, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 89, 91, 92, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 129, 130, 132, 135, 136, 138, 140, 141, 143, 144, 145, 146, 148, 150, 151, 157, 159, 163, 164, 166, 169, 170, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186], "filter": [9, 13, 18, 22, 24, 27, 52, 53, 62, 70, 72, 77, 83, 85, 89, 91, 93, 101, 103, 104, 105, 106, 111, 143, 144, 145, 146, 178, 179, 180, 181, 193, 196, 207], "setlazyannot": [9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 117, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "setparamvalu": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "setparam": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "dataset": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 196, 199], "overrid": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 117, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189], "javamlwrit": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 113, 115, 116, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "mlwriter": [9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 113, 115, 116, 120, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187], "assertiondlapproach": [10, 110, 123, 157, 199], "annotatorapproachintern": [10, 12, 22, 23, 25, 28, 29, 39, 41, 46, 50, 59, 64, 69, 70, 75, 96, 99, 115, 130, 164], "hasengin": [10, 20, 36, 37, 38, 55, 56, 64, 75, 79, 85, 94, 99, 103, 105, 199], "handle_exception_param": [10, 14, 22, 23, 41, 55, 64, 67, 70, 91, 92, 99, 155], "handleexceptionparam": [10, 14, 18, 22, 23, 39, 41, 55, 64, 66, 70, 91, 92, 99], "algorithm": [10, 12, 20, 28, 29, 41, 109, 123, 140, 157, 175], "deep": [10, 30, 31, 32, 33, 64, 75, 79, 91, 99, 110, 123, 132, 139, 141, 151, 153, 157, 166, 174, 176, 186, 187], "learn": [10, 30, 31, 32, 33, 64, 75, 79, 91, 99, 110, 123, 132, 139, 141, 151, 153, 157, 166, 174, 176, 186, 187, 189], "absent": [10, 14, 18, 30, 63, 123, 157, 196], "hypothet": [10, 18, 123, 157], "condit": [10, 53, 75, 123, 151, 157, 186, 220], "associated_with_other_person": [10, 123, 157], "etc": [10, 14, 56, 86, 99, 123, 132, 148, 157, 166, 182], "term": [10, 28, 29, 41, 42, 45, 46, 110, 123, 125, 140, 154, 157, 159, 175, 191, 194], "end": [10, 11, 12, 13, 20, 41, 42, 45, 70, 74, 75, 86, 91, 103, 104, 105, 106, 109, 123, 125, 143, 145, 146, 148, 151, 154, 157, 159, 178, 180, 181, 182, 186, 189, 191, 196, 207, 209, 211, 222], "To": [10, 12, 18, 22, 36, 37, 38, 39, 47, 91, 96, 99, 138, 150, 173, 185, 196], "pretrain": [10, 12, 14, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 46, 48, 50, 52, 53, 55, 56, 59, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 85, 91, 92, 93, 94, 96, 99, 100, 101, 104, 105, 106, 121, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 148, 150, 151, 153, 155, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 189, 191, 199, 207], "assertiondlmodel": [10, 13, 18, 63, 123, 157, 199], "startcol": [10, 12, 51, 123, 126, 157, 160], "target": [10, 11, 12, 50, 51, 56, 64, 91, 92, 103, 104, 123, 126, 135, 143, 145, 156, 157, 160, 169, 178, 180, 189, 196], "endcol": [10, 12, 123, 157], "batchsiz": [10, 20, 30, 31, 32, 33, 35, 36, 38, 55, 56, 64, 75, 79, 85, 91, 92, 103, 104, 105, 106, 123, 135, 138, 139, 141, 143, 144, 145, 146, 150, 151, 153, 157, 169, 173, 174, 176, 178, 179, 180, 181, 185, 186, 187], "size": [10, 20, 30, 31, 32, 33, 35, 36, 38, 55, 56, 64, 75, 79, 83, 85, 91, 103, 104, 105, 106, 109, 110, 113, 123, 138, 139, 141, 143, 144, 145, 146, 150, 151, 153, 157, 173, 174, 176, 178, 179, 180, 181, 185, 186, 187], "optim": [10, 30, 31, 32, 33, 64, 75, 91, 123, 141, 151, 157, 176, 186], "process": [10, 13, 14, 18, 22, 23, 25, 30, 31, 32, 33, 36, 37, 38, 39, 41, 42, 51, 52, 53, 62, 63, 64, 66, 70, 72, 75, 77, 79, 85, 91, 92, 93, 94, 99, 103, 104, 105, 106, 109, 110, 111, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 141, 143, 144, 145, 146, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 176, 178, 179, 180, 181, 185, 186, 187, 196, 200, 204, 205, 206, 218, 223], "epoch": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186, 197, 217], "learningr": [10, 30, 31, 32, 33, 64, 91, 123, 141, 157, 176], "rate": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186, 189, 196], "dropout": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186], "layer": [10, 30, 31, 32, 33, 36, 37, 38, 64, 75, 91, 110, 123, 138, 141, 150, 151, 157, 173, 176, 185, 186], "maxsentlen": [10, 123, 157], "graphfold": [10, 75, 110, 123, 151, 157, 186], "folder": [10, 20, 30, 31, 32, 33, 35, 36, 37, 38, 55, 56, 64, 75, 79, 85, 91, 92, 94, 104, 105, 106, 110, 123, 135, 136, 138, 139, 141, 144, 145, 146, 150, 151, 153, 157, 169, 170, 173, 174, 176, 179, 180, 181, 185, 186, 187, 193, 207, 218], "extern": [10, 45, 69, 70, 75, 77, 96, 110, 123, 151, 157, 186, 204], "graph": [10, 75, 91, 110, 123, 137, 151, 155, 157, 171, 186, 197, 199], "distribut": [10, 64, 75, 91, 99, 119, 123, 132, 139, 151, 157, 166, 174, 186], "hdf": [10, 64, 75, 91, 99, 123, 132, 139, 151, 157, 166, 174, 186, 207], "dbf": [10, 64, 75, 91, 99, 123, 132, 139, 151, 157, 166, 174, 186], "cloud": [10, 64, 75, 91, 99, 123, 132, 139, 151, 157, 166, 174, 186], "storag": [10, 59, 64, 75, 91, 99, 123, 132, 139, 151, 157, 166, 174, 186], "s3": [10, 50, 64, 75, 91, 99, 123, 132, 139, 151, 157, 166, 174, 186, 193, 207], "graphfil": [10, 75, 110, 123, 151, 157, 186], "specifi": [10, 11, 13, 28, 29, 30, 31, 32, 33, 41, 42, 43, 45, 48, 53, 56, 63, 64, 70, 72, 74, 75, 77, 87, 91, 93, 94, 107, 109, 123, 125, 136, 139, 140, 141, 151, 157, 159, 170, 174, 175, 176, 186, 196, 198, 204, 205, 206, 207, 220], "search": [10, 14, 50, 75, 99, 123, 132, 151, 157, 166, 186, 199, 204], "happen": [10, 75, 110, 123, 151, 157, 186], "configprotobyt": [10, 20, 36, 37, 38, 55, 56, 75, 79, 85, 94, 103, 104, 105, 106, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187], "configproto": [10, 20, 36, 37, 38, 55, 56, 75, 79, 85, 94, 103, 104, 105, 106, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187], "tensorflow": [10, 20, 36, 37, 38, 55, 56, 64, 75, 79, 85, 91, 94, 103, 104, 105, 106, 110, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187, 199], "byte": [10, 20, 36, 37, 38, 55, 56, 75, 79, 85, 94, 103, 104, 105, 106, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187], "arrai": [10, 13, 20, 28, 29, 36, 37, 38, 41, 48, 51, 55, 56, 61, 63, 70, 75, 76, 77, 79, 85, 94, 103, 104, 105, 106, 107, 123, 125, 126, 136, 138, 139, 140, 143, 144, 145, 146, 150, 151, 153, 157, 159, 160, 170, 173, 174, 175, 178, 179, 180, 181, 185, 186, 187], "config_proto": [10, 123, 157], "serializetostr": [10, 123, 157], "validationsplit": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186], "proport": [10, 75, 123, 139, 151, 157, 174, 186], "mean": [10, 14, 20, 39, 55, 56, 75, 80, 151, 186], "against": [10, 20, 59, 69, 75, 123, 139, 151, 157, 174, 186], "testdataset": [10, 75, 123, 139, 151, 157, 174, 186], "calcul": [10, 14, 20, 75, 99, 123, 132, 139, 151, 154, 157, 166, 174, 186, 211, 220], "statist": [10, 75, 123, 139, 151, 157, 174, 186], "dure": [10, 41, 42, 45, 46, 50, 66, 72, 75, 92, 123, 125, 135, 139, 151, 157, 159, 169, 174, 186, 194], "includeconfid": [10, 75, 123, 151, 157, 186], "confid": [10, 13, 14, 22, 23, 25, 30, 31, 32, 33, 35, 39, 63, 64, 70, 75, 77, 79, 91, 94, 99, 123, 129, 130, 132, 136, 141, 148, 151, 153, 157, 163, 164, 166, 170, 176, 182, 186, 187, 191, 211], "score": [10, 20, 30, 31, 32, 33, 64, 75, 79, 91, 94, 123, 136, 141, 151, 153, 154, 157, 170, 176, 186, 187, 191, 197, 217, 222], "metadata": [10, 11, 14, 18, 19, 20, 22, 30, 35, 39, 41, 42, 45, 48, 50, 56, 62, 63, 69, 70, 74, 75, 77, 78, 79, 80, 89, 91, 92, 93, 94, 101, 107, 109, 123, 125, 135, 136, 151, 153, 157, 159, 169, 170, 186, 187, 189, 195, 211], "enableoutputlog": [10, 75, 123, 139, 151, 157, 174, 186], "log": [10, 12, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186, 197, 217], "outputlogspath": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186], "won": [10, 64, 75, 91, 123, 139, 151, 157, 174, 186], "store": [10, 64, 75, 93, 117, 123, 139, 151, 157, 174, 186], "disk": [10, 64, 75, 91, 123, 139, 151, 157, 174, 186], "verbos": [10, 75, 123, 139, 151, 157, 174, 186, 197, 217, 222], "level": [10, 20, 21, 22, 39, 59, 70, 75, 123, 139, 151, 157, 174, 186, 196, 220], "scopewindow": [10, 14, 15, 91, 123, 157], "scope": [10, 14, 15, 78, 91, 123, 157], "window": [10, 14, 15, 67, 75, 91, 103, 104, 123, 143, 145, 151, 155, 157, 178, 180, 186, 199], "express": [10, 14, 15, 18, 22, 41, 70, 96, 109, 110, 123, 125, 157, 159], "datasetinfo": [10, 30, 31, 32, 33, 64, 75, 91, 99, 123, 132, 141, 151, 157, 166, 176, 186], "about": [10, 30, 31, 32, 33, 41, 53, 64, 75, 91, 99, 110, 123, 132, 141, 151, 157, 166, 176, 186, 191, 192], "being": [10, 30, 31, 32, 33, 41, 42, 45, 64, 75, 91, 99, 101, 109, 110, 123, 125, 132, 139, 141, 151, 157, 159, 166, 174, 176, 186, 220], "sparknlp": [10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 27, 28, 29, 30, 35, 36, 37, 38, 39, 41, 43, 46, 51, 52, 53, 55, 56, 59, 61, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 85, 91, 92, 94, 96, 100, 109, 113, 115, 116, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 144, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 179, 182, 185, 186, 187, 191, 196, 199, 204, 205, 209, 211], "document_assembl": [10, 11, 12, 19, 28, 29, 30, 35, 76, 79, 80, 85, 105, 106, 123, 140, 144, 146, 153, 157, 175, 179, 181, 187, 209], "doc2chunk": [10, 43, 51, 80, 126, 160, 199], "setchunkcol": [10, 12, 51, 76, 123, 126, 157, 160], "setstartcol": [10, 12, 51, 123, 157], "setstartcolbytokenindex": [10, 51], "setfailonmiss": [10, 51], "setlowercas": [10, 23, 25, 51, 81, 129, 130, 163, 164], "wordembeddingsmodel": [10, 12, 14, 20, 23, 25, 27, 30, 41, 43, 46, 48, 50, 53, 55, 56, 63, 70, 72, 74, 75, 76, 77, 91, 92, 93, 94, 123, 125, 129, 130, 135, 136, 148, 151, 157, 159, 163, 164, 169, 170, 182, 186, 199], "embeddings_clin": [10, 12, 14, 20, 23, 25, 27, 30, 41, 43, 46, 48, 53, 56, 63, 70, 72, 74, 76, 77, 91, 92, 93, 94, 123, 125, 129, 130, 135, 136, 148, 157, 159, 163, 164, 169, 170, 182], "en": [10, 12, 14, 20, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 50, 52, 53, 55, 56, 59, 63, 64, 69, 70, 72, 74, 75, 76, 77, 78, 79, 85, 91, 92, 93, 94, 96, 99, 100, 104, 105, 106, 121, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 148, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 194, 207, 211, 219], "setcasesensit": [10, 12, 13, 14, 18, 20, 22, 28, 29, 30, 35, 36, 37, 38, 39, 52, 53, 55, 56, 59, 62, 69, 70, 72, 76, 77, 79, 89, 92, 94, 99, 100, 101, 109, 111, 123, 132, 135, 136, 138, 140, 150, 153, 157, 166, 169, 170, 173, 175, 185, 187], "setlabelcol": [10, 12, 29, 30, 31, 32, 33, 64, 91, 99, 123, 132, 140, 141, 157, 166, 175, 176], "setbatchs": [10, 20, 30, 31, 32, 33, 55, 56, 64, 75, 79, 85, 91, 92, 103, 104, 105, 106, 123, 135, 139, 141, 143, 144, 145, 146, 151, 153, 157, 169, 174, 176, 178, 179, 180, 181, 186, 187], "128": [10, 36, 37, 38, 94, 109, 123, 136, 138, 150, 157, 170, 173, 185], "setdropout": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186], "012": [10, 123, 157], "setlearningr": [10, 30, 31, 32, 33, 64, 91, 123, 141, 157, 176], "015": [10, 123, 157], "setepoch": [10, 123, 157], "setscopewindow": [10, 14, 15, 91, 123, 157], "setendcol": [10, 12, 123, 157], "setmaxsentlen": [10, 123, 157], "250": [10, 56, 123, 157], "assertionpipelin": [10, 12, 18, 123, 132, 157, 166], "assertion_model": 10, "doexceptionhandl": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 64, 66, 70, 75, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 151, 157, 159, 163, 164, 166, 169, 176, 186], "engin": [10, 30, 31, 32, 33, 64, 75, 79, 91, 99, 123, 132, 139, 141, 151, 153, 157, 166, 174, 176, 186, 187], "m": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 100, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 154, 157, 159, 163, 164, 166, 174, 175, 176, 186, 194], "fitmultipl": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "sequenc": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 38, 39, 41, 42, 43, 45, 46, 50, 59, 64, 69, 70, 75, 77, 79, 91, 94, 96, 99, 110, 115, 123, 125, 129, 130, 132, 136, 138, 139, 140, 141, 151, 153, 157, 159, 163, 164, 166, 170, 173, 174, 175, 176, 186, 187, 189, 217], "iter": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186, 209], "abc": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "A": [10, 12, 14, 17, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 46, 50, 53, 55, 56, 59, 64, 69, 70, 72, 74, 75, 76, 77, 79, 83, 85, 89, 91, 92, 94, 96, 99, 103, 104, 105, 106, 110, 113, 115, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 150, 151, 153, 154, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 191, 192, 193, 194, 196, 200, 205, 206, 211, 220, 222], "thread": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "safe": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 52, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "which": [10, 12, 13, 14, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 45, 46, 50, 55, 56, 59, 61, 63, 64, 66, 69, 70, 75, 77, 79, 80, 83, 85, 89, 91, 92, 93, 94, 96, 99, 103, 104, 105, 106, 109, 110, 115, 119, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 150, 151, 153, 154, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 189, 191, 211, 212, 220], "next": [10, 12, 14, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 66, 69, 70, 75, 77, 80, 89, 91, 92, 96, 99, 110, 115, 123, 125, 129, 130, 132, 135, 139, 140, 141, 151, 157, 159, 163, 164, 166, 169, 174, 175, 176, 186], "modeliter": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "mai": [10, 11, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 51, 53, 56, 59, 64, 69, 70, 75, 77, 89, 91, 93, 96, 99, 100, 110, 115, 123, 125, 126, 129, 130, 132, 139, 140, 141, 151, 154, 157, 159, 160, 163, 164, 166, 174, 175, 176, 186], "_fitmultipleiter": [10, 12, 22, 23, 25, 28, 29, 30, 31, 32, 33, 39, 41, 46, 50, 59, 64, 69, 70, 75, 77, 91, 96, 99, 110, 115, 123, 125, 129, 130, 132, 139, 140, 141, 151, 157, 159, 163, 164, 166, 174, 175, 176, 186], "getengin": [10, 30, 31, 32, 33, 64, 75, 79, 91, 99, 123, 132, 139, 141, 151, 153, 157, 166, 174, 176, 186, 187], "setconfigprotobyt": [10, 20, 36, 37, 38, 55, 56, 75, 79, 85, 94, 103, 104, 105, 106, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187], "conf": [10, 75, 123, 151, 157, 186], "contai": [10, 123, 157], "setdatasetinfo": [10, 30, 31, 32, 33, 64, 75, 91, 99, 123, 132, 141, 151, 157, 166, 176, 186], "setdoexceptionhandl": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 64, 66, 70, 75, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 151, 157, 159, 163, 164, 166, 169, 176, 186], "except": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 42, 64, 66, 70, 75, 77, 89, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 151, 154, 157, 159, 163, 164, 166, 169, 176, 186, 211, 212], "handl": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 48, 64, 66, 70, 77, 91, 92, 99, 110, 123, 125, 129, 130, 132, 135, 141, 157, 159, 163, 164, 166, 169, 176, 206], "caus": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 53, 64, 66, 70, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 157, 159, 163, 164, 166, 169, 176, 220], "pass": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 52, 53, 64, 66, 70, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 157, 159, 163, 164, 166, 169, 176], "emit": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 64, 66, 70, 75, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 151, 157, 159, 163, 164, 166, 169, 176, 186], "messag": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 64, 66, 70, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 157, 159, 163, 164, 166, 169, 176, 212], "continu": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 42, 64, 66, 70, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 154, 157, 159, 163, 164, 166, 169, 176, 189], "come": [10, 13, 14, 18, 20, 22, 23, 25, 27, 30, 31, 32, 33, 39, 41, 42, 64, 66, 70, 75, 77, 91, 92, 99, 109, 123, 125, 129, 130, 132, 135, 141, 151, 157, 159, 163, 164, 166, 169, 176, 186], "perform": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 42, 45, 46, 64, 66, 70, 75, 77, 85, 91, 92, 93, 99, 103, 104, 105, 106, 110, 123, 125, 129, 130, 132, 135, 141, 143, 144, 145, 146, 151, 157, 159, 163, 164, 166, 169, 176, 178, 179, 180, 181, 186, 197, 217, 222], "penalti": [10, 14, 22, 23, 25, 30, 31, 32, 33, 39, 41, 64, 66, 70, 75, 77, 91, 92, 99, 123, 125, 129, 130, 132, 135, 141, 151, 157, 159, 163, 164, 166, 169, 176, 186, 189], "float": [10, 13, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 41, 42, 50, 55, 56, 57, 61, 64, 70, 75, 77, 79, 89, 91, 92, 99, 123, 125, 129, 130, 132, 135, 139, 140, 141, 151, 153, 157, 159, 163, 164, 166, 169, 174, 175, 176, 186, 187, 191, 197, 217], "setenableoutputlog": [10, 75, 123, 139, 151, 157, 174, 186], "enabl": [10, 18, 22, 41, 45, 48, 75, 109, 110, 123, 125, 151, 157, 159, 186, 205], "srt": [10, 110, 123, 157], "end_col": [10, 91, 123, 157], "setgraphfil": [10, 75, 110, 123, 151, 157, 186], "setgraphfold": [10, 75, 110, 123, 151, 157, 186], "setincludeconfid": [10, 75, 123, 151, 157, 186], "waht": [10, 123, 157], "colnam": [10, 123, 157], "lr": [10, 75, 123, 139, 151, 157, 174, 186], "maximum": [10, 23, 25, 28, 29, 35, 75, 79, 83, 85, 89, 93, 99, 103, 104, 105, 106, 109, 110, 123, 129, 130, 139, 140, 143, 144, 145, 146, 151, 153, 157, 163, 164, 174, 175, 178, 179, 180, 181, 186, 187], "setoutputlogspath": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186], "left": [10, 14, 15, 23, 25, 91, 92, 93, 123, 129, 130, 135, 157, 163, 164, 169, 191], "right": [10, 14, 15, 20, 23, 25, 55, 91, 92, 93, 123, 129, 130, 135, 157, 163, 164, 169, 191], "must": [10, 11, 12, 14, 15, 20, 23, 25, 41, 42, 43, 51, 63, 69, 75, 86, 89, 91, 96, 100, 123, 125, 126, 129, 130, 139, 148, 151, 157, 159, 160, 163, 164, 174, 182, 186, 211], "non": [10, 14, 15, 56, 91, 123, 154, 157], "start_col": [10, 123, 157], "settestdataset": [10, 75, 123, 139, 151, 157, 174, 186], "read_a": [10, 22, 39, 41, 59, 69, 70, 75, 77, 96, 123, 125, 139, 151, 157, 159, 174, 186], "reada": [10, 22, 39, 41, 59, 69, 70, 75, 77, 96, 123, 125, 139, 151, 157, 159, 174, 186, 199], "setvalidationsplit": [10, 30, 31, 32, 33, 64, 75, 91, 123, 139, 141, 151, 157, 174, 176, 186], "setverbos": [10, 75, 123, 139, 151, 157, 174, 186], "dl": [10, 110, 199], "hasstorageref": [10, 12, 30, 75], "approach": [10, 20, 23, 25, 30, 35, 110, 115, 117, 120, 123, 129, 130, 136, 148, 157, 163, 164, 170, 182], "targetnerlabel": [10, 12, 123, 157], "mark": [10, 12, 20, 43, 86, 123, 148, 157, 182], "match": [10, 12, 13, 14, 20, 23, 25, 35, 36, 37, 38, 39, 41, 50, 51, 55, 56, 59, 69, 70, 76, 79, 89, 94, 96, 99, 109, 123, 125, 126, 129, 130, 132, 136, 138, 150, 153, 157, 159, 160, 163, 164, 166, 170, 173, 185, 187, 204], "fever": [10, 18, 123, 157], "sore": [10, 18, 123, 157], "throat": [10, 18, 123, 157], "stomach": [10, 18, 22, 123, 157], "pain": [10, 18, 22, 123, 157], "she": [10, 72, 109, 113, 123, 157, 196], "maintain": [10, 123, 157], "epidur": [10, 18, 123, 157], "pca": [10, 18, 123, 157], "sentencedetector": [10, 11, 12, 14, 17, 18, 19, 20, 22, 23, 25, 27, 30, 39, 41, 46, 50, 52, 53, 55, 56, 63, 70, 72, 74, 75, 76, 77, 79, 93, 94, 96, 99, 101, 113, 123, 125, 129, 130, 132, 136, 139, 148, 151, 153, 157, 159, 163, 164, 166, 170, 174, 182, 186, 187, 199], "nermodel": [10, 18, 74, 75, 77, 123, 151, 157, 186], "medicalnermodel": [10, 14, 20, 23, 25, 27, 30, 41, 43, 46, 48, 53, 56, 63, 70, 72, 74, 75, 76, 77, 91, 92, 93, 94, 123, 125, 129, 130, 135, 136, 148, 151, 157, 159, 163, 164, 169, 170, 182, 186, 199], "ner_clin": [10, 14, 93, 94, 123, 136, 157, 170], "nerconvert": [10, 14, 18, 20, 30, 41, 43, 46, 50, 55, 70, 74, 77, 91, 92, 93, 94, 123, 125, 135, 136, 157, 159, 169, 170, 199], "ner_chunk": [10, 14, 18, 20, 23, 25, 27, 30, 41, 43, 46, 48, 50, 53, 55, 56, 63, 67, 72, 73, 74, 77, 86, 91, 92, 93, 94, 100, 121, 123, 125, 129, 130, 135, 136, 148, 157, 159, 163, 164, 169, 170, 182, 218], "clinicalassert": [10, 18, 123, 157], "assertion_dl": [10, 123, 157], "assertionmodel": [10, 12, 18, 123, 132, 157, 166], "selectexpr": [10, 11, 17, 18, 20, 22, 23, 25, 27, 30, 35, 39, 47, 50, 51, 52, 53, 55, 56, 59, 69, 70, 72, 74, 79, 80, 81, 91, 92, 93, 94, 96, 100, 109, 123, 126, 129, 130, 135, 136, 139, 153, 157, 160, 163, 164, 169, 170, 174, 187, 211], "truncat": [10, 11, 14, 17, 18, 20, 22, 23, 25, 27, 36, 37, 38, 39, 41, 43, 46, 47, 51, 52, 53, 55, 56, 59, 63, 69, 72, 79, 81, 85, 86, 91, 92, 93, 94, 96, 100, 105, 106, 109, 110, 113, 123, 125, 126, 129, 130, 135, 136, 138, 139, 144, 146, 148, 150, 153, 157, 159, 160, 163, 164, 169, 170, 173, 174, 179, 181, 182, 185, 187, 191, 211], "entityassertioncasesensit": [10, 123, 157], "storageref": [10, 12, 20, 55, 56, 59, 75, 123, 139, 151, 157, 174, 186], "getentityassert": [10, 123, 157], "getreplacelabel": [10, 123, 157], "replac": [10, 39, 41, 42, 43, 44, 45, 46, 67, 70, 77, 81, 123, 125, 157, 159, 199, 205], "getstorageref": [10, 12, 20, 55, 56, 59, 75, 123, 139, 151, 157, 174, 186], "uniqu": [10, 12, 20, 50, 55, 56, 59, 75, 123, 139, 151, 157, 174, 186, 191], "static": [10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 50, 55, 56, 59, 64, 69, 70, 75, 78, 79, 85, 91, 92, 94, 96, 99, 104, 105, 106, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 192, 193, 207, 220, 221], "assertion_jsl_aug": [10, 63], "lang": [10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 50, 55, 56, 59, 64, 69, 70, 75, 78, 79, 85, 91, 92, 94, 96, 99, 104, 105, 106, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 189, 193], "remote_loc": [10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 50, 55, 56, 59, 64, 69, 70, 75, 78, 79, 85, 91, 92, 94, 96, 99, 104, 105, 106, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 189, 193, 207], "download": [10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 50, 55, 56, 64, 69, 70, 75, 79, 85, 91, 92, 94, 96, 99, 104, 105, 106, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 193, 207, 208], "remot": [10, 12, 14, 20, 23, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 50, 55, 56, 64, 69, 70, 75, 79, 85, 91, 92, 94, 96, 99, 104, 105, 106, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 141, 144, 145, 146, 150, 151, 153, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 193, 207], "resourc": [10, 12, 19, 20, 21, 28, 29, 30, 31, 32, 33, 35, 41, 50, 55, 56, 59, 61, 64, 69, 70, 75, 77, 85, 96, 99, 101, 104, 105, 106, 109, 139, 141, 144, 145, 146, 151, 174, 176, 179, 180, 181, 186, 193], "Will": [10, 12, 20, 28, 29, 30, 31, 32, 33, 35, 41, 50, 55, 56, 64, 69, 70, 85, 96, 99, 104, 105, 106, 141, 144, 145, 146, 176, 179, 180, 181, 186], "repositori": [10, 12, 20, 28, 29, 30, 31, 32, 33, 35, 41, 50, 55, 56, 64, 69, 70, 85, 96, 99, 104, 105, 106, 141, 144, 145, 146, 176, 179, 180, 181, 186], "otherwis": [10, 12, 14, 20, 28, 29, 30, 31, 32, 33, 35, 41, 42, 48, 50, 51, 55, 56, 61, 64, 69, 70, 75, 83, 85, 86, 91, 92, 96, 99, 103, 104, 105, 106, 125, 126, 135, 141, 143, 144, 145, 146, 148, 151, 159, 160, 169, 176, 178, 179, 180, 181, 182, 186, 197, 212, 217, 222], "restor": [10, 12, 20, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 41, 50, 55, 56, 64, 69, 70, 75, 79, 85, 94, 96, 99, 104, 105, 106, 110, 136, 138, 141, 144, 145, 146, 150, 151, 153, 170, 173, 176, 179, 180, 181, 185, 186, 187, 204], "b": [10, 14, 20, 36, 37, 38, 55, 56, 69, 74, 75, 76, 77, 79, 85, 94, 103, 104, 105, 106, 123, 136, 138, 139, 143, 144, 145, 146, 150, 151, 153, 157, 170, 173, 174, 178, 179, 180, 181, 185, 186, 187, 222], "bytearrai": [10, 123, 157], "setentityassert": [10, 123, 157], "assertionent": [10, 123, 157], "note": [10, 11, 41, 53, 59, 75, 79, 123, 139, 151, 153, 157, 174, 186, 187, 191, 192, 204, 211, 222], "entityassert": [10, 123, 157], "earlier": [10, 123, 157], "than": [10, 13, 20, 22, 41, 42, 45, 70, 75, 78, 85, 89, 91, 93, 99, 123, 125, 144, 151, 154, 157, 159, 179, 186, 189], "replacelabel": [10, 77, 123, 157], "setentityassertioncasesensit": [10, 63, 123, 157], "p": [10, 23, 25, 75, 77, 107, 110, 117, 120, 123, 129, 130, 139, 151, 157, 163, 164, 174, 186, 189, 222], "setreplacelabel": [10, 77, 123, 157], "later": [10, 50, 123, 157, 191], "setstorageref": [10, 12, 20, 55, 56, 59, 75, 123, 139, 151, 157, 174, 186], "assertionchunkconvert": [11, 199], "intern": [11, 15, 43, 51, 75, 77, 85, 99, 100, 105, 106, 117, 122, 132, 144, 146, 151, 155, 166, 179, 181, 186, 193, 194, 196, 220], "annotatortransform": [11, 15, 27, 43, 51, 63, 100], "In": [11, 20, 39, 43, 56, 59, 69, 75, 86, 92, 96, 110, 135, 139, 148, 151, 169, 174, 182, 186], "issu": [11, 41, 76], "indic": [11, 20, 30, 31, 32, 33, 35, 64, 70, 85, 91, 141, 144, 154, 176, 179, 198, 200, 204], "lead": [11, 110], "loss": [11, 75, 110, 151, 186, 197, 217], "begin": [11, 13, 21, 43, 51, 70, 74, 75, 77, 91, 93, 99, 109, 126, 132, 151, 160, 166, 186, 191, 196, 209, 211], "add": [11, 14, 72, 75, 77, 80, 81, 86, 87, 93, 109, 148, 151, 182, 186, 190, 194, 204], "robust": 11, "wai": [11, 20, 53, 59], "improv": [11, 75, 85, 94, 105, 106, 110, 136, 144, 146, 151, 170, 179, 181, 186], "reliabl": 11, "popul": [11, 105, 106, 146, 181], "alab": [11, 155, 209], "chunktextcol": 11, "chunkbegincol": 11, "chunkendcol": 11, "outputtokenbegincol": 11, "outputtokenendcol": 11, "metadatafield": [11, 101, 109], "field": [11, 18, 19, 22, 39, 48, 53, 59, 61, 62, 63, 69, 70, 77, 78, 80, 89, 101, 107, 109, 121, 192], "ad": [11, 21, 35, 75, 77, 91, 110, 151, 186, 198, 204, 220], "element": [11, 48, 87, 113, 214], "second": [11, 14, 19, 41, 42, 45, 48, 75, 86, 96, 125, 148, 151, 159, 182, 186, 191, 193, 205], "stringtyp": [11, 51, 80, 100, 126, 160], "convert": [11, 17, 19, 27, 41, 51, 63, 72, 77, 81, 87, 89, 100, 101, 125, 126, 155, 159, 160, 195, 202, 204, 211, 223], "setchunktextcol": 11, "setchunkbegincol": 11, "char_begin": 11, "setchunkendcol": 11, "char_end": 11, "setoutputtokenbegincol": 11, "token_begin": 11, "setoutputtokenendcol": 11, "token_end": 11, "minni": 11, "57": 11, "63": [11, 17, 70, 74, 77], "62": [11, 46, 48], "pcp": [11, 41, 47, 125, 159], "31": [11, 19, 93, 96, 196], "34": [11, 17, 196], "33": 11, "kwarg": [11, 15, 27, 43, 51, 63, 100, 126, 160], "col": [11, 19, 22, 39, 47, 50, 59, 91, 99, 132, 166], "setmetadatafield": [11, 101, 109], "assertionlogregapproach": [12, 199], "regress": [12, 28, 29, 32, 36, 38, 138, 140, 173, 175], "assertionlogregmodel": [12, 157, 199], "maxit": [12, 28, 29, 140, 175], "regparam": 12, "enetparam": 12, "elast": 12, "net": 12, "beforeparam": 12, "context": [12, 14, 20, 55, 67, 85, 103, 104, 105, 106, 110, 143, 144, 145, 146, 155, 178, 179, 180, 181, 189, 199], "afterparam": 12, "after": [12, 13, 14, 28, 29, 35, 36, 37, 38, 63, 72, 75, 80, 85, 89, 91, 113, 138, 140, 144, 150, 151, 173, 175, 179, 185, 186], "externalfeatur": 12, "addit": [12, 59, 75, 93, 99, 105, 106, 132, 139, 146, 151, 166, 174, 181, 186, 220], "featur": [12, 13, 30, 31, 32, 33, 61, 64, 70, 75, 91, 139, 141, 151, 174, 176, 186, 199], "nercol": 12, "either": [12, 13, 20, 41, 51, 59, 74, 86, 91, 96, 99, 100, 125, 126, 132, 139, 148, 159, 160, 166, 174, 182, 212], "sentence_detector": [12, 19, 23, 25, 30, 56, 76, 79, 123, 129, 130, 148, 153, 157, 163, 164, 182, 187, 209], "chunker": [12, 67, 76, 123, 129, 130, 155, 157, 163, 164, 199], "Then": [12, 50, 75, 91, 99, 139, 151, 174, 186], "setreg": 12, "01": [12, 41, 43, 47, 75, 80, 89, 96, 125, 151, 159, 186, 196], "setbefor": 12, "setaft": 12, "13": [12, 41, 42, 47, 80, 81, 125, 159, 191, 196], "setenet": 12, "enet": 12, "labelcol": [12, 28, 29, 99, 132, 140, 166, 175], "setmaxit": [12, 28, 29, 140, 175], "setnercol": 12, "n": [12, 20, 46, 50, 75, 83, 85, 103, 104, 105, 106, 109, 143, 144, 145, 146, 151, 178, 179, 180, 181, 186, 189, 208, 214], "lamda": 12, "settargetnerlabel": 12, "v": [12, 20, 55, 56, 75, 79, 85, 86, 103, 104, 105, 106, 139, 143, 144, 145, 146, 148, 151, 153, 174, 178, 179, 180, 181, 182, 186, 187, 197, 217], "logreg": [12, 28, 29, 140, 175, 199], "logarithm": [12, 28, 29, 140, 175], "instead": [12, 20, 36, 38, 55, 56, 75, 91, 94, 136, 138, 151, 170, 173, 186], "obtain": [12, 20, 48, 63, 86, 94, 136, 151, 157, 170, 186, 192, 220], "assertionpretrain": 12, "assertion_ml": 12, "assertionmerg": 13, "merger": [13, 70], "white_black_list_param": [13, 62, 67, 72, 155], "whiteblacklistparam": [13, 52, 53, 62, 72, 111], "varieti": 13, "like": [13, 14, 28, 29, 39, 41, 42, 45, 53, 89, 96, 125, 139, 140, 159, 174, 175, 189], "priorit": [13, 41, 42, 70, 89, 125, 159], "proper": 13, "see": [13, 18, 36, 37, 38, 47, 51, 59, 69, 72, 75, 77, 91, 92, 96, 99, 126, 135, 138, 139, 150, 151, 160, 169, 173, 174, 185, 186, 189, 193, 218], "mergeoverlap": [13, 69, 70, 96], "overlap": [13, 69, 70, 96, 109], "applyfilterbeforemerg": 13, "appli": [13, 23, 25, 41, 42, 59, 72, 75, 86, 89, 109, 122, 125, 129, 130, 139, 148, 151, 154, 159, 163, 164, 174, 182, 186, 189, 191, 196, 206], "blacklist": [13, 18, 22, 41, 42, 52, 53, 62, 70, 72, 77, 111, 125, 159], "ignor": [13, 18, 20, 22, 35, 36, 37, 38, 41, 42, 52, 53, 55, 56, 59, 62, 70, 72, 77, 79, 83, 85, 89, 94, 99, 103, 104, 105, 106, 111, 125, 132, 136, 138, 143, 144, 145, 146, 150, 153, 159, 166, 170, 173, 178, 179, 180, 181, 185, 187, 189], "whitelist": [13, 18, 22, 52, 53, 62, 70, 72, 77, 111], "do": [13, 18, 22, 39, 41, 42, 52, 53, 62, 70, 72, 75, 77, 78, 111, 125, 151, 159, 186], "iob": [13, 18, 22, 52, 53, 62, 70, 72, 74, 75, 77, 111, 151, 186, 196, 222], "prefix": [13, 14, 18, 22, 39, 48, 50, 52, 53, 62, 70, 72, 75, 77, 111, 151, 186, 189, 222], "casesensit": [13, 14, 18, 20, 22, 35, 36, 37, 38, 39, 52, 53, 55, 56, 59, 62, 69, 70, 72, 77, 79, 89, 94, 99, 109, 111, 132, 136, 138, 150, 153, 166, 170, 173, 185, 187], "determin": [13, 18, 20, 21, 22, 48, 52, 53, 57, 62, 70, 72, 77, 91, 93, 94, 109, 110, 111, 136, 170, 191], "definit": [13, 18, 22, 52, 53, 59, 62, 70, 72, 77, 79, 94, 111, 136, 153, 170, 187], "white": [13, 18, 22, 43, 52, 53, 62, 70, 72, 77, 111], "black": [13, 18, 22, 52, 53, 62, 70, 72, 77, 111, 218, 219], "assertionsconfid": 13, "confidencethreshold": [13, 22, 70, 218], "lower": [13, 22, 23, 25, 41, 42, 51, 70, 75, 125, 126, 129, 130, 151, 159, 160, 163, 164, 186], "threshold": [13, 22, 23, 25, 41, 42, 50, 56, 70, 77, 79, 89, 91, 92, 99, 125, 129, 130, 132, 135, 153, 159, 163, 164, 166, 169, 187, 197, 217], "orderingfeatur": [13, 70], "sourc": [13, 14, 23, 25, 36, 37, 38, 39, 41, 42, 45, 46, 51, 70, 75, 77, 79, 91, 92, 94, 96, 107, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 185, 187, 191, 192, 196, 204], "selectionstrategi": [13, 70], "divers": [13, 89], "diverselong": [13, 70], "defaultconfid": [13, 70], "doe": [13, 30, 45, 70, 75, 151, 186, 207], "assertionsourcepreced": 13, "util": [13, 41, 94, 110, 120, 136, 155, 170, 192, 194, 199], "comma": [13, 70, 75, 77, 89, 151, 186], "drive": [13, 70], "sortbybegin": 13, "sort": [13, 89], "setapplyfilterbeforemerg": 13, "setassertionsourcepreced": 13, "setassertionsconfid": 13, "setblacklist": [13, 18, 22, 41, 42, 52, 53, 62, 70, 72, 77, 111, 125, 159], "setdefaultconfid": [13, 70], "setdenylist": [13, 18, 22, 52, 53, 62, 70, 72, 77, 111], "setmergeoverlap": [13, 69, 70, 96], "setorderingfeatur": [13, 70], "setselectionstrategi": [13, 70], "setsortbybegin": 13, "setwhitelist": [13, 18, 22, 30, 50, 52, 53, 62, 70, 72, 77, 111], "contextualassert": 14, "analysi": [14, 93, 139, 174], "cue": 14, "within": [14, 20, 51, 56, 75, 100, 126, 151, 160, 186, 192], "negat": 14, "uncertainti": 14, "suffix": [14, 39, 48, 72, 189], "prefixandsuffixmatch": [14, 39], "hit": [14, 39, 89], "prefixkeyword": 14, "suffixkeyword": 14, "exceptionkeyword": 14, "prefixregexpattern": 14, "suffixregexpattern": 14, "exceptionregexpattern": 14, "includechunktoscop": 14, "scopewindowdelimit": 14, "delimit": [14, 19, 48, 59, 69, 70, 77, 87, 96, 103, 104, 143, 145, 178, 180], "limit": [14, 36, 38, 41, 42, 45, 50, 79, 91, 94, 125, 136, 138, 153, 159, 170, 173, 187], "confidencecalculationdirect": 14, "accept": [14, 139, 174], "clinical_n": [14, 27, 43, 48, 63, 72], "ner_convert": [14, 20, 23, 25, 27, 30, 43, 50, 53, 56, 63, 72, 77, 94, 129, 130, 136, 148, 163, 164, 170, 182], "No": [14, 109, 196], "kidnei": 14, "injuri": 14, "abnorm": 14, "rash": 14, "ulcer": 14, "might": [14, 41, 42, 45, 46, 59, 75, 125, 151, 159, 186, 220], "liver": [14, 39], "diseas": [14, 30, 53, 154, 220], "setprefixkeyword": 14, "setsuffixkeyword": 14, "unlik": [14, 85, 144, 179], "setprefixregexpattern": 14, "without": [14, 27, 41, 42, 45, 53, 63, 99, 110, 125, 159, 192, 198, 221], "deni": [14, 27], "never": 14, "setsuffixregexpattern": 14, "absenc": 14, "out": [14, 20, 75, 81, 83, 85, 89, 99, 103, 104, 105, 106, 132, 139, 143, 144, 145, 146, 151, 166, 174, 178, 179, 180, 181, 186, 209], "setexceptionkeyword": 14, "setexceptionregexpattern": 14, "clearli": 14, "addprefixkeyword": 14, "addsuffixkeyword": 14, "setprefixandsuffixmatch": [14, 39], "setassert": 14, "flatten": [14, 67, 113, 155], "setexplodeselectedfield": [14, 63], "assertion_result": [14, 63, 191], "problem": [14, 91, 93, 94, 110, 136, 170, 196], "contextual_assertion_abs": 14, "open": [14, 23, 25, 36, 37, 38, 39, 51, 75, 77, 79, 91, 92, 94, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 185, 187], "other": [14, 20, 23, 25, 36, 37, 38, 39, 41, 42, 43, 45, 46, 53, 56, 70, 75, 79, 89, 91, 92, 93, 94, 99, 110, 123, 125, 129, 130, 132, 135, 136, 138, 139, 140, 150, 151, 153, 156, 157, 159, 163, 164, 166, 169, 170, 173, 174, 175, 185, 187, 194], "setconfidencecalculationdirect": 14, "distanc": [14, 23, 25, 41, 42, 50, 56, 89, 91, 93, 99, 125, 129, 130, 132, 159, 163, 164, 166, 191], "found": [14, 39, 51, 56, 126, 160, 204, 205], "side": 14, "minimum": [14, 23, 25, 29, 41, 42, 75, 125, 129, 130, 140, 151, 159, 163, 164, 175, 186], "necessarili": 14, "certain": [14, 70, 76], "extend": [14, 51, 75, 126, 139, 151, 160, 174, 186, 196], "alwai": [14, 22, 70], "empti": [14, 30, 31, 32, 33, 51, 56, 64, 70, 75, 86, 91, 99, 126, 132, 141, 148, 151, 160, 166, 176, 182, 186, 189, 196], "setincludechunktoscop": 14, "look": [14, 56], "nor": 14, "lack": 14, "unremark": 14, "declin": [14, 27], "two": [14, 20, 22, 24, 41, 42, 45, 48, 52, 54, 70, 72, 77, 86, 113, 125, 159, 205, 220], "integ": [14, 23, 25, 41, 42, 43, 45, 75, 105, 106, 125, 129, 130, 146, 159, 163, 164, 181, 186, 194, 211], "whole": [14, 20, 59], "setscopewindowdelimit": 14, "demonstr": [14, 91, 92, 93, 135, 169], "appear": [14, 41, 42, 55, 56, 86, 125, 148, 159, 182], "had": [14, 35, 36, 38, 50, 72, 109, 113, 138, 173, 191], "develop": [14, 53], "associ": [14, 21, 59, 72, 77, 93, 96, 99, 220], "fewshotassertionsentenceconvert": 15, "assertiondl": [16, 67, 124, 128, 158, 162], "assertion_chunk_convert": [16, 67], "assertion_dl_reg": [16, 67], "assertion_merg": [16, 67], "contextual_assert": [16, 67], "fewshot_assertion_sentence_convert": [16, 67], "chunk2token": [17, 199], "chunkassembl": [17, 51, 126, 160], "ngramgener": [17, 20, 199], "ngram": [17, 23, 25, 29, 83, 85, 103, 104, 105, 106, 129, 130, 140, 143, 144, 145, 146, 163, 164, 175, 178, 179, 180, 181], "setdelimit": [17, 69, 96], "_": [17, 47, 48, 75, 151, 186], "setn": 17, "setenablecumul": 17, "ngram_token": 17, "year": [17, 20, 41, 42, 47, 55, 70, 72, 74, 77, 80, 113, 125, 154, 159, 191, 220], "old": [17, 20, 41, 47, 70, 72, 74, 75, 77, 91, 92, 113, 125, 135, 151, 154, 159, 169, 186, 205], "man": [17, 70, 74, 77], "hospit": [17, 45, 70, 74, 77, 194], "a_63": 17, "old_man": 17, "14": [17, 41, 43, 47, 125, 159], "25": [17, 41, 47, 86, 99, 125, 132, 159, 166, 196], "man_pres": 17, "18": [17, 41, 47, 99, 105, 106, 125, 146, 159, 181, 196], "28": [17, 20, 72, 113, 154, 196], "presents_to": 17, "27": [17, 69], "32": [17, 39, 101], "to_th": 17, "30": [17, 43, 80, 85, 105, 106, 139, 144, 146, 174, 179, 181, 196], "41": [17, 23, 25, 93, 129, 130, 148, 163, 164, 182], "the_hospit": 17, "42": [17, 22, 196], "hospital_": 17, "6": [17, 53, 69, 93, 100, 139, 174, 196], "assertionfilter": [18, 199], "filtering_param": [18, 22, 67, 70, 77, 155], "filteringparam": [18, 22, 62, 70, 77, 199], "via": [18, 22], "criteria": [18, 22, 24, 62, 70, 77, 89], "isin": [18, 22, 62, 70, 77], "step": [18, 75, 139, 151, 174, 186, 204], "setcriteria": [18, 22, 62, 70, 77], "filtervalu": [18, 22, 62, 70, 77], "setfiltervalu": [18, 22, 62, 70, 77], "accord": [18, 22, 41, 42, 43, 45, 62, 70, 77, 121, 125, 154, 159], "setregex": [18, 22, 62, 70, 77], "chunkconvert": [19, 199], "regexmatch": [19, 21, 39, 96, 101, 199], "test_data": [19, 75, 101, 139, 151, 174, 186, 196], "my": [19, 52, 79, 96, 109, 139, 153, 174, 187, 211], "ceremoni": [19, 96], "regex_match": [19, 67, 95], "setexternalrul": [19, 21, 96, 101], "src": [19, 21, 69, 75, 96, 101, 139, 151, 174, 186], "matcher": [19, 67, 96, 101, 155], "txt": [19, 21, 41, 46, 48, 69, 96, 101, 109, 125, 159], "outdf": 19, "71": [19, 96], "80": [19, 96, 109], "chunkkeyphraseextract": [20, 199], "bert_sentence_embed": [20, 58, 67], "bertsentenceembed": [20, 55, 56, 99, 100, 101, 132, 166, 199], "phrase": [20, 69, 76, 85, 144, 179], "most": [20, 53, 56, 75, 109, 151, 154, 186], "describ": 20, "cosin": [20, 23, 25, 57, 99, 129, 130, 132, 163, 164, 166], "similar": [20, 41, 42, 57, 125, 159, 199, 222], "represent": [20, 39, 55, 56, 77], "correspond": [20, 31, 32, 33, 41, 42, 45, 50, 55, 63, 125, 141, 159, 176, 220], "maxim": [20, 56, 91], "margin": 20, "mmr": 20, "setdiverg": 20, "selectmostdiffer": 20, "too": [20, 75, 110, 151, 186], "broader": 20, "thei": [20, 33, 53, 56, 63, 75, 103, 104, 109, 110, 143, 145, 151, 178, 180, 186, 194], "belong": 20, "brief": 20, "understand": 20, "consist": [20, 41, 42, 45, 46, 56, 94, 96, 125, 136, 159, 170, 191, 194], "variou": [20, 85, 144, 179, 192, 204, 220], "rank": 20, "gram": [20, 83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "yakekeywordextractor": 20, "yake": [20, 199], "textmatch": [20, 199], "desir": [20, 23, 25, 45, 63, 70, 93, 129, 130, 163, 164], "oper": [20, 63, 89, 110], "topn": [20, 50], "conjunct": 20, "diverg": 20, "aim": [20, 85, 144, 179], "achiev": [20, 75, 151, 186], "goal": 20, "interv": 20, "higher": [20, 220], "enforc": [20, 194], "ensur": [20, 87, 211], "sole": 20, "constraint": [20, 196], "measur": [20, 109, 154, 220], "documentlevelprocess": 20, "flag": [20, 30, 31, 32, 33, 35, 64, 85, 91, 141, 144, 176, 179, 198, 200, 204], "row": [20, 75, 109, 151, 186, 194, 196], "rather": [20, 75, 85, 144, 151, 179, 186], "particular": [20, 41, 42, 45, 56, 94, 99, 125, 132, 136, 159, 166, 170, 220], "concatenatesent": 20, "concaten": [20, 87, 205], "comput": [20, 55, 56, 75, 103, 104, 110, 143, 145, 151, 178, 180, 186, 222], "averag": [20, 36, 38, 54, 55, 56, 89, 94, 136, 138, 170, 173], "vector": [20, 28, 29, 33, 54, 56, 61, 64, 140, 175], "droppunctu": 20, "remov": [20, 22, 41, 63, 70, 81, 93, 204, 220], "punctuat": [20, 81], "affect": [20, 63, 105, 106, 146, 181], "ner_tagg": [20, 94, 136, 170], "ner_jsl_slim": 20, "ner_tag": [20, 91, 92, 93, 94, 135, 136, 169, 170], "key_phrase_extractor": 20, "settopn": 20, "setdocumentlevelprocess": 20, "ner_chunk_key_phras": 20, "her": [20, 55, 72, 79, 153, 187], "becom": [20, 53, 55, 110], "last": [20, 55, 75, 85, 99, 132, 144, 151, 166, 179, 186, 189], "he": [20, 46, 55, 63, 109, 191], "complain": [20, 55], "swell": [20, 55], "hi": [20, 55, 79, 153, 187], "forearm": [20, 55], "explod": [20, 22, 23, 25, 35, 39, 47, 50, 53, 55, 56, 59, 63, 69, 70, 74, 79, 81, 87, 91, 92, 93, 94, 96, 109, 129, 130, 135, 136, 139, 153, 163, 164, 169, 170, 174, 187], "AS": [20, 23, 25, 55, 56, 79, 129, 130, 153, 163, 164, 187], "key_phras": 20, "documentsimilar": 20, "mmrscore": 20, "gestat": [20, 72, 113], "mellitu": [20, 72, 113], "7391447825527298": 20, "4366776288430703": 20, "7323921930094919": 20, "44348688715422274": 20, "13577881610104517": 20, "085800103824974": 20, "dimens": [20, 55, 56, 75, 99, 132, 151, 166, 186], "islong": [20, 55, 56], "getbatchs": [20, 55, 56, 79, 85, 103, 104, 105, 106, 143, 144, 145, 146, 153, 178, 179, 180, 181, 187], "getcasesensit": [20, 35, 36, 37, 38, 55, 56, 59, 69, 79, 94, 99, 132, 136, 138, 150, 153, 166, 170, 173, 185, 187], "getdimens": [20, 55, 56, 99, 132, 166], "loadsavedmodel": [20, 30, 35, 36, 37, 38, 55, 56, 75, 79, 85, 92, 94, 104, 105, 106, 135, 136, 138, 144, 145, 146, 150, 151, 153, 169, 170, 173, 179, 180, 181, 185, 186, 187], "spark_sess": [20, 30, 35, 36, 37, 38, 55, 56, 75, 79, 85, 92, 94, 104, 105, 106, 135, 136, 138, 144, 145, 146, 150, 151, 153, 169, 170, 173, 179, 180, 181, 185, 186, 187], "use_openvino": [20, 55, 56], "openvino": [20, 55, 56], "backend": [20, 55, 56], "sbert_jsl_medium_uncas": 20, "setconcatenatesent": 20, "setdimens": [20, 55, 56, 99, 132, 166], "setdroppunctu": 20, "setislong": [20, 55, 56], "long": [20, 23, 25, 55, 56, 79, 85, 129, 130, 144, 153, 154, 163, 164, 179, 187, 196], "setselectmostdiffer": 20, "highest": [20, 30, 31, 32, 33, 64, 70, 83, 85, 91, 103, 104, 105, 106, 141, 143, 144, 145, 146, 176, 178, 179, 180, 181], "chunksentencesplitt": [21, 199], "treat": 21, "header": [21, 61, 139, 174, 196], "subsequ": [21, 23, 25, 72, 129, 130, 163, 164], "particularli": [21, 63, 205], "subtitl": 21, "paragraph": [21, 78], "groupbysent": 21, "group": [21, 41, 42, 45, 76, 86, 125, 148, 154, 159, 182], "assum": [21, 56, 75, 139, 151, 174, 186], "detector": [21, 209], "insertchunk": 21, "omit": [21, 99, 132, 166], "defaultent": 21, "introduct": 21, "title_regex": 21, "setdefaultent": 21, "setgroupbysent": 21, "properti": [21, 41, 42, 45, 117, 125, 159], "setinsertchunk": 21, "insert": [21, 53, 87], "chunkfilter": [22, 199], "addition": [22, 39, 45, 72, 75, 109, 110, 151, 186, 192, 211], "what": [22, 41, 42, 70, 79, 81, 86, 91, 99, 125, 132, 148, 153, 159, 166, 182, 187], "entitiesconfid": [22, 70], "past": [22, 193], "histori": [22, 72, 113], "gastroenter": 22, "howev": [22, 53, 75, 151, 186], "docassembl": 22, "postagg": [22, 91, 92, 135, 169], "perceptronmodel": [22, 56, 91, 92, 93, 94, 135, 136, 169, 170, 199, 209], "setregexpars": [22, 76], "nn": [22, 76], "chunkerfilt": 22, "17": [22, 70, 74, 196], "22": [22, 23, 25, 80, 129, 130, 148, 154, 163, 164, 182, 196], "36": 22, "53": [22, 69], "64": [22, 70, 74, 75, 139, 151, 174, 186, 189, 196], "70": [22, 75, 186, 218], "81": [22, 93, 196], "110": [22, 70, 74], "now": 22, "care": [22, 93], "118": 22, "132": 22, "setentitiesconfid": [22, 70], "entities_confid": [22, 70], "setfilterent": 22, "filter_bi": 22, "attribut": [22, 70], "chunkfiltererapproach": [22, 199], "entitiesconfidenceresourc": [22, 70], "entitiesconfidenceresourceasjsonstr": 22, "chunksfilterapproach": 22, "setentitiesconfidenceresourc": [22, 70], "binari": [22, 70, 77, 94, 99, 136, 170], "setentitiesconfidenceresourceasjsonstr": 22, "chunkmapperapproach": [23, 129, 148, 163, 182, 199], "commonchunkmapperparam": [23, 25, 130, 164], "chunkmapperfuzzymatchingparam": [23, 25, 130, 164, 199], "mapper": [23, 25, 129, 130, 148, 163, 164, 182], "jsondictionari": [23, 25, 129, 130, 148, 163, 164, 182], "chunkmappermodel": [23, 27, 129, 148, 163, 182, 199], "label_depend": [23, 24, 25, 86, 98, 129, 130, 148, 163, 164, 182], "mappinmg": [23, 25, 129, 130, 148, 163, 164, 182], "rel": [23, 25, 55, 56, 80, 110, 129, 130, 148, 163, 164, 182, 196], "go": [23, 25, 129, 130, 148, 163, 164, 182], "lowercas": [23, 25, 41, 51, 81, 125, 126, 129, 130, 148, 159, 160, 163, 164, 182], "decid": [23, 25, 41, 42, 45, 109, 125, 129, 130, 148, 159, 163, 164, 182], "ner_model": [23, 25, 50, 56, 129, 130, 148, 163, 164, 182], "ner_posology_larg": [23, 25, 56, 129, 130, 148, 163, 164, 182], "nerconverterintern": [23, 25, 27, 48, 53, 56, 63, 72, 77, 86, 129, 130, 148, 163, 164, 182, 196, 199], "chunkermapperapproach": [23, 25, 129, 130, 148, 163, 164, 182], "setdictionari": [23, 25, 39, 129, 130, 148, 163, 164, 182], "home": [23, 25, 52, 53, 109, 129, 130, 148, 163, 164, 182], "mappings2": [23, 25, 129, 130, 148, 163, 164, 182], "setrel": [23, 25, 27, 129, 130, 148, 163, 164, 182], "action": [23, 25, 27, 48, 129, 130, 148, 163, 164, 182], "sampledata": [23, 25, 56, 129, 130, 148, 163, 164, 182], "warfarina": [23, 25, 129, 130, 148, 163, 164, 182], "lusa": [23, 25, 129, 130, 148, 163, 164, 182], "amlodipin": [23, 25, 129, 130, 148, 163, 164, 182], "mg": [23, 25, 56, 129, 130, 148, 163, 164, 182, 191], "35": [23, 25, 93, 129, 130, 148, 163, 164, 182], "analges": [23, 25, 129, 130, 148, 163, 164, 182], "56995": [23, 25, 129, 130, 148, 163, 164, 182], "all_rel": [23, 25, 129, 130, 148, 163, 164, 182], "antipyret": [23, 25, 129, 130, 148, 163, 164, 182], "50": [23, 25, 39, 64, 129, 130, 148, 151, 163, 164, 182], "9989": [23, 25, 129, 130, 148, 163, 164, 182], "55": [23, 25, 129, 130, 148, 163, 164, 182], "56": [23, 25, 129, 130, 148, 163, 164, 182], "9123": [23, 25, 129, 130, 148, 163, 164, 182], "allowmultitokenchunk": [23, 25, 129, 130, 163, 164], "enablecharfingerprintmatch": [23, 25, 129, 130, 163, 164], "enablefuzzymatch": [23, 25, 129, 130, 163, 164], "enabletokenfingerprintmatch": [23, 25, 129, 130, 163, 164], "fuzzydistancescalingmod": [23, 25, 129, 130, 163, 164], "fuzzymatchingdistancethreshold": [23, 25, 129, 130, 163, 164], "fuzzymatchingdist": [23, 25, 129, 130, 163, 164], "maxcharngramfingerprint": [23, 25, 129, 130, 163, 164], "maxtokenngramdroppingcharsratio": [23, 25, 129, 130, 163, 164], "maxtokenngramdroppingoper": [23, 25, 129, 130, 163, 164], "maxtokenngramdroppingtoken": [23, 25, 129, 130, 163, 164], "maxtokenngramfingerprint": [23, 25, 129, 130, 163, 164], "mincharngramfingerprint": [23, 25, 129, 130, 163, 164], "mintokenngramfingerprint": [23, 25, 129, 130, 163, 164], "multivaluesrel": [23, 25, 129, 130, 163, 164], "setallowmultitokenchunk": [23, 25, 129, 130, 163, 164], "mc": [23, 25, 129, 130, 163, 164], "skip": [23, 25, 41, 42, 45, 48, 125, 129, 130, 159, 163, 164], "multitoken": [23, 25, 129, 130, 163, 164], "bow": [23, 25, 50, 129, 130, 163, 164], "word": [23, 25, 41, 42, 50, 59, 74, 77, 79, 81, 83, 85, 99, 100, 103, 104, 105, 106, 110, 125, 129, 130, 132, 139, 143, 144, 145, 146, 153, 159, 163, 164, 166, 174, 178, 179, 180, 181, 187, 222], "setenablecharfingerprintmatch": [23, 25, 129, 130, 163, 164], "ecfm": [23, 25, 129, 130, 163, 164], "char": [23, 25, 41, 42, 45, 75, 109, 125, 129, 130, 151, 159, 163, 164, 186], "fingerprint": [23, 25, 129, 130, 163, 164], "setenablefuzzymatch": [23, 25, 129, 130, 163, 164], "efm": [23, 25, 129, 130, 163, 164], "fuzzi": [23, 25, 129, 130, 163, 164], "setenabletokenfingerprintmatch": [23, 25, 129, 130, 163, 164], "driven": [23, 25, 129, 130, 163, 164], "three": [23, 25, 48, 72, 129, 130, 154, 163, 164], "maxtokenngramdrop": [23, 25, 129, 130, 163, 164], "setfuzzydistancescalingmod": [23, 25, 129, 130, 163, 164], "fdsm": [23, 25, 129, 130, 163, 164], "scale": [23, 25, 30, 31, 32, 33, 64, 91, 129, 130, 141, 163, 164, 176], "mode": [23, 25, 30, 31, 32, 33, 41, 42, 45, 46, 64, 75, 89, 91, 109, 122, 123, 125, 129, 130, 139, 141, 151, 157, 159, 163, 164, 174, 176, 186, 194], "short": [23, 25, 85, 129, 130, 144, 163, 164, 179], "setfuzzymatchingdistancethreshold": [23, 25, 129, 130, 163, 164], "fmdth": [23, 25, 129, 130, 163, 164], "setfuzzymatchingdist": [23, 25, 129, 130, 163, 164], "fmd": [23, 25, 129, 130, 163, 164], "levenshtein": [23, 25, 41, 42, 50, 125, 129, 130, 159, 163, 164], "longest": [23, 25, 129, 130, 163, 164], "jaccard": [23, 25, 129, 130, 163, 164], "lc": [23, 25, 129, 130, 163, 164], "setmaxcharngramfingerprint": [23, 25, 129, 130, 163, 164], "setmaxtokenngramdroppingcharsratio": [23, 25, 129, 130, 163, 164], "etd": [23, 25, 129, 130, 163, 164], "amount": [23, 25, 50, 129, 130, 163, 164, 189], "drop": [23, 25, 129, 130, 163, 164, 209], "ratio": [23, 25, 129, 130, 163, 164], "enabletokenngrammatch": [23, 25, 129, 130, 163, 164], "whenev": [23, 25, 129, 130, 163, 164], "matter": [23, 25, 91, 129, 130, 163, 164], "final": [23, 25, 63, 87, 109, 129, 130, 163, 164, 204], "setmaxtokenngramdroppingoper": [23, 25, 129, 130, 163, 164], "setmaxtokenngramdroppingtoken": [23, 25, 129, 130, 163, 164], "veri": [23, 25, 41, 42, 75, 109, 125, 129, 130, 151, 159, 163, 164, 186], "high": [23, 25, 110, 129, 130, 163, 164], "g": [23, 25, 35, 36, 37, 38, 56, 75, 79, 85, 86, 93, 99, 106, 129, 130, 132, 138, 144, 148, 150, 151, 153, 157, 163, 164, 166, 173, 179, 182, 185, 186, 187, 189, 222], "sy": [23, 25, 129, 130, 163, 164], "maxsiz": [23, 25, 129, 130, 163, 164], "setmaxtokenngramfingerprint": [23, 25, 129, 130, 163, 164], "mxtnf": [23, 25, 129, 130, 163, 164], "setmincharngramfingerprint": [23, 25, 129, 130, 163, 164], "setmintokenngramfingerprint": [23, 25, 129, 130, 163, 164], "mntnf": [23, 25, 129, 130, 163, 164], "min": [23, 25, 29, 129, 130, 140, 163, 164, 175, 189], "setmultivaluesrel": [23, 25, 129, 130, 163, 164], "send": [23, 25, 129, 130, 163, 164], "r": [23, 25, 129, 130, 163, 164, 196], "share": [23, 56, 120], "fuzzymatch": 23, "drug_chunk_embed": [23, 25, 56, 129, 130, 163, 164], "drug_chunk": [23, 25, 56, 129, 130, 163, 164], "slice": [23, 25, 55, 56, 129, 130, 163, 164], "drug_embed": [23, 25, 56, 129, 130, 163, 164], "drug_action_treatment_mapp": [23, 25, 27], "chunkmapperfilter": [24, 199], "chunkmapp": [24, 25, 26, 27, 67, 128, 130, 131, 162, 164, 165], "successfulli": [24, 200], "returncriteria": 24, "success": 24, "fail": [24, 41, 42, 45, 51, 61, 125, 126, 159, 160, 200], "chunkmapperfilterermodel": 24, "setreturncriteria": 24, "return_criteria": 24, "itself": [24, 70], "self": [24, 53, 61], "docmapperapproach": [25, 130, 164, 199], "docmappermodel": [25, 130, 164, 199], "cach": [25, 56, 61, 70, 85, 104, 105, 106, 129, 130, 132, 144, 145, 146, 163, 164, 166, 179, 180, 181, 193, 207], "assertion_filter": [26, 67], "chunk_convert": [26, 67], "chunk_key_phrase_extract": [26, 67], "chunk_sentence_splitt": [26, 67], "chunker_filter": [26, 67], "chunkmapper_filter": [26, 67], "docmapp": [26, 67, 128, 131, 162, 165], "mapper2_chunk": [26, 67], "mapper2chunk": 27, "annotatorproperti": [27, 43, 51, 100, 117], "compat": [27, 36, 37, 38, 75, 138, 150, 151, 155, 173, 185, 186, 192, 199, 211], "bed": 27, "azithromycin": 27, "difficulti": 27, "nausea": 27, "zofran": 27, "intermitt": 27, "sweat": 27, "ner_jsl": [27, 30, 53, 63, 70, 74, 75, 77], "setfilternonevalu": 27, "annotatortyp": [27, 51, 100, 126, 160, 199], "bactericid": 27, "antiemet": 27, "filternonevalu": 27, "documentlogregclassifierapproach": [28, 199], "classifi": [28, 29, 30, 32, 35, 52, 64, 91, 92, 135, 139, 140, 150, 169, 174, 175, 199], "genericclassifiermodel": [28, 29, 30, 32, 33, 64, 91, 140, 175, 199], "tol": [28, 29, 140, 175], "converg": [28, 29, 140, 175], "toler": [28, 29, 140, 175], "fitintercept": [28, 29, 140, 175], "intercept": [28, 29, 140, 175], "form": [28, 29, 41, 42, 50, 56, 59, 69, 75, 81, 86, 91, 93, 96, 125, 139, 140, 151, 159, 174, 175, 186], "vectorizationmodelpath": [28, 29, 140, 175], "classificationmodelpath": [28, 29, 140, 175], "could": [28, 29, 39, 50, 75, 96, 100, 139, 140, 151, 174, 175, 186], "stopwords_clean": [28, 29, 140, 175], "stopwordsclean": [28, 29, 140, 175, 199], "cleantoken": [28, 29, 140, 175], "stemmer": [28, 29, 140, 175, 199], "stem": [28, 29, 91, 92, 93, 135, 140, 169, 175], "gen_clf": [28, 29, 64, 140, 175], "setlabelcolumn": [28, 64, 75, 91, 110, 139, 140, 151, 174, 175, 186], "clf_model": [28, 29, 64, 140, 175], "setclassificationmodelpath": [28, 29, 140, 175], "setfitintercept": [28, 29, 140, 175], "setlabel": [28, 29, 140, 175], "k": [28, 29, 99, 103, 104, 132, 140, 143, 145, 166, 175, 178, 180, 189, 191], "settol": [28, 29, 140, 175], "dist": [28, 29, 99, 132, 140, 166, 175], "setvectorizationmodelpath": [28, 29, 140, 175], "documentlogregclassifiermodel": [28, 199], "mergechunk": [28, 29, 140, 175], "vectorizationmodel": [28, 29, 140, 175], "classificationmodel": [28, 29, 140, 175], "classifier_logreg_ad": 28, "setclassificationmodel": [28, 29, 140, 175], "setmergechunk": [28, 29, 140, 175], "setvectorizationmodel": [28, 29, 140, 175], "documentmlclassifierapproach": [29, 140, 175, 199], "documentmlclassifierparam": [29, 199], "classificationmodelclass": [29, 140, 175], "sparkml": [29, 140, 175], "svm": [29, 33, 140, 175], "maxtokenngram": [29, 140, 175], "mintokenngram": [29, 140, 175], "setclassificationmodelclass": [29, 140, 175], "setmaxtokenngram": [29, 140, 175], "setmintokenngram": [29, 140, 175], "documentmlclassifiermodel": [29, 140, 175, 199], "classifierml_ad": 29, "fewshotassertionclassifierapproach": 30, "generic_classifi": [30, 32, 33, 67, 91, 155, 199], "genericclassifierapproach": [30, 32, 33, 64, 91, 199], "purpos": [30, 43, 64], "few": [30, 35], "shot": [30, 35, 79, 94, 136, 153, 170, 187], "epochsn": [30, 31, 32, 33, 64, 91, 141, 176], "featuresc": [30, 31, 32, 33, 64, 91, 141, 176], "fiximbal": [30, 31, 32, 33, 64, 91, 141, 176], "labelcolumn": [30, 31, 32, 33, 64, 75, 91, 110, 139, 141, 151, 174, 176, 186], "modelfil": [30, 31, 32, 33, 64, 91, 141, 176], "drouptup": [30, 31, 32, 33, 64, 91, 141, 176], "setepochsnumb": [30, 31, 32, 33, 64, 91, 141, 176], "setfeaturesc": [30, 31, 32, 33, 64, 91, 141, 176], "feature_sc": [30, 31, 32, 33, 64, 91, 141, 176], "zscore": [30, 31, 32, 33, 64, 91, 141, 176], "minmax": [30, 31, 32, 33, 64, 91, 141, 176], "setfiximbal": [30, 31, 32, 33, 64, 91, 141, 176], "fix_imbal": [30, 31, 32, 33, 64, 91, 141, 176], "whenther": [30, 31, 32, 33, 64, 91, 141, 176], "balanc": [30, 31, 32, 33, 64, 91, 141, 176], "trainig": [30, 31, 32, 33, 64, 91, 141, 176], "label_column": [30, 31, 32, 33, 64, 91, 141, 176], "learning_r": [30, 31, 32, 33, 64, 91, 141, 176], "setmodelfil": [30, 31, 32, 33, 64, 91, 141, 176], "mode_fil": [30, 31, 32, 33, 64, 91, 141, 176], "setmulticlass": [30, 31, 32, 33, 64, 91, 141, 176], "output_logs_path": [30, 31, 32, 33, 64, 91, 141, 176], "validation_split": [30, 31, 32, 33, 64, 91, 141, 176], "validaiton": [30, 31, 32, 33, 64, 91, 141, 176], "much": [30, 31, 32, 33, 64, 91, 100, 139, 141, 174, 176], "fewshotassertionclassifiermodel": 30, "run": [30, 35, 110, 191, 200], "larg": [30, 35, 36, 38, 75, 103, 104, 109, 138, 143, 145, 150, 151, 173, 178, 180, 185, 186], "llm": [30, 35, 103, 104, 143, 145, 155, 178, 180], "setfit": [30, 31, 35, 141, 176], "disease_syndrome_disord": [30, 53], "chronic": [30, 53, 154], "obstruct": 30, "pulmonari": 30, "arterioven": 30, "malform": 30, "has_differentiable_head": [30, 35], "differenti": [30, 35], "largefewshotclassifiermodel": [30, 35], "assertion_fewshotclassifi": 30, "fewshotclassifierapproach": [31, 141, 176, 199], "generic_log_reg_classifi": [31, 34, 67], "genericlogregclassifierapproach": [31, 32, 199], "fewshotclassifi": 31, "tunstal": [31, 141, 176], "et": [31, 141, 176], "al": [31, 141, 176], "2022": [31, 43, 89, 141, 154, 176, 196], "vari": [31, 32, 33, 141, 154, 176], "fewshotclassifiermodel": [31, 141, 176, 199], "genericlogregclassifiermodel": [31, 32, 199], "multinomi": 32, "logist": [32, 33], "genericlogregclassifi": 32, "deriv": [32, 33], "genericclassifi": [32, 33, 110], "neural": [32, 75, 110, 151, 186], "network": [32, 75, 110, 151, 186], "featurevector": [32, 33], "feature_vectir": [32, 33], "generic_logreg_classifier_ad": 32, "genericsvmclassifierapproach": [33, 199], "svmclassifi": 33, "machin": [33, 109, 110], "standard": [33, 41, 77, 81, 107], "genericsvmclassifiermodel": [33, 199], "generic_svm_classifier_ad": 33, "document_log_classifi": [34, 67], "document_ml_classifi": [34, 67], "few_shot_assertion_classifi": [34, 67], "few_shot_classifi": [34, 67], "generic_svm_classifi": [34, 67], "large_few_shot_classifi": [34, 67], "medical_bert_for_sequence_classif": [34, 67, 94, 138, 173], "medical_bert_for_token_classifi": [34, 67, 150, 185], "medical_distilbert_for_sequence_classif": [34, 67], "hascasesensitiveproperti": [35, 36, 37, 38, 85, 99, 103, 105, 199], "hasbatchedannot": [35, 36, 37, 38, 75, 85, 103, 105, 199], "hasmaxsentencelengthlimit": 35, "senstivi": 35, "maxsentencelength": [35, 36, 37, 38, 79, 94, 136, 138, 150, 153, 170, 173, 185, 187], "felt": [35, 36, 38, 138, 173], "bit": [35, 36, 38, 138, 173], "drowsi": [35, 36, 38, 138, 173], "blur": [35, 36, 38, 138, 173], "vision": [35, 36, 38, 138, 173], "take": [35, 36, 38, 42, 45, 48, 55, 61, 64, 69, 86, 103, 104, 109, 117, 125, 138, 143, 145, 159, 173, 178, 180, 211], "aspirin": [35, 36, 38, 81, 138, 173], "9672883": 35, "hasdifferentiablehead": 35, "modelarchitectur": 35, "getclass": [35, 36, 37, 38, 75, 79, 91, 92, 94, 135, 136, 138, 150, 151, 153, 169, 170, 173, 185, 186, 187], "model_architectur": 35, "architectur": [35, 75, 151, 186], "underli": [35, 53], "mpnet": [35, 199], "large_fewshot_classifier_ad": 35, "medicalbertforsequenceclassif": [36, 38, 52, 94, 136, 138, 170, 173, 199], "medicalbertfortokenclassifi": [36, 37, 150, 185, 199], "head": [36, 37, 38, 75, 109, 138, 150, 151, 173, 185, 186], "linear": [36, 37, 38, 110, 138, 150, 173, 185], "pool": [36, 38, 138, 173], "huggingfac": [36, 37, 38, 138, 150, 173, 185], "faster": [36, 38, 110, 138, 150, 173, 185], "tokenclassifi": [36, 37, 138, 150, 173, 185], "coalescesent": [36, 38, 79, 94, 136, 138, 153, 170, 173, 187], "loadsavedmodelopensourc": [36, 37, 38, 94, 136, 138, 150, 170, 173, 185], "bertfortokenclassifierpath": [36, 37, 38, 94, 136, 138, 150, 170, 173, 185], "tfmodelpath": [36, 37, 38, 94, 136, 138, 150, 170, 173, 185], "bertfortokenclassifi": [36, 37, 38, 94, 136, 138, 150, 170, 173, 185], "taht": [36, 37, 38, 94, 136, 138, 150, 170, 173, 185], "tf": [36, 37, 38, 94, 110, 136, 138, 150, 170, 173, 185], "bert_sequence_classifier_ad": 36, "setcoalescesent": [36, 38, 94, 136, 138, 170, 173], "probabl": [36, 38, 83, 85, 94, 103, 104, 105, 106, 136, 138, 143, 144, 145, 146, 170, 173, 178, 179, 180, 181, 189], "due": [36, 38, 94, 136, 138, 170, 173], "almost": [36, 38, 94, 136, 138, 170, 173], "512": [36, 38, 79, 94, 109, 136, 138, 153, 170, 173, 187], "help": [36, 38, 41, 42, 45, 94, 99, 109, 110, 125, 136, 138, 159, 170, 173, 194], "feed": [36, 38, 75, 94, 136, 138, 170, 173], "entir": [36, 38, 75, 94, 136, 138, 151, 170, 173, 186], "setmaxsentencelength": [36, 37, 38, 79, 94, 101, 136, 138, 150, 153, 170, 173, 185, 187], "hidden": [37, 110, 150, 185], "state": [37, 75, 85, 105, 106, 139, 144, 146, 150, 151, 174, 179, 181, 185, 186, 194, 196, 220], "bert_token_classifier_ner_bionlp": [37, 150, 185], "erba": [37, 150, 185], "ir": [37, 125, 150, 185], "myb": [37, 150, 185], "viru": [37, 53, 150, 185], "construct": [37, 150, 185], "erythroid": [37, 150, 185], "infect": [37, 53, 113, 150, 185], "bone": [37, 150, 185], "marrow": [37, 150, 185], "blastoderm": [37, 150, 185], "cultur": [37, 150, 185], "tissue_structur": [37, 150, 185], "medicaldistilbertforsequenceclassif": [38, 199], "distilbert": 38, "sequenceclassifi": 38, "distilbertforsequenceclassif": [38, 199], "destilbertfortokenclassifierpath": 38, "distilbert_sequence_classifier_ad": 38, "contextualparserapproach": [39, 199], "setjsonpath": 39, "along": [39, 41, 42, 125, 159], "unifi": 39, "jsonpath": 39, "tsv": [39, 77], "optionalcontextrul": 39, "regardless": [39, 69], "shortestcontextmatch": 39, "stop": [39, 52, 75, 77, 103, 104, 105, 106, 109, 143, 145, 146, 151, 178, 180, 181, 186, 189, 193], "find": [39, 55, 59, 86, 91, 93, 94, 99, 119, 136, 170, 204], "completecontextmatch": 39, "exact": [39, 59, 69], "metastas": 39, "pt1bn0m0": 39, "t5": 39, "primari": 39, "colon": 39, "contextualpars": [39, 70], "regex_token": [39, 209], "39": 39, "00": [39, 196], "49": [39, 196], "148": 39, "156": 39, "ct4bcn2m1": 39, "189": 39, "194": 39, "n3m1": 39, "316": 39, "323": 39, "setcompletecontextmatch": 39, "boundari": 39, "setoptionalcontextrul": 39, "setshortestcontextmatch": 39, "contextualparsermodel": [39, 199], "mycontextualparsermodel": 39, "date_of_birth_pars": 39, "contextual_pars": [40, 67], "deidentication_param": [41, 44, 67], "deidentificationparam": [41, 42, 125, 159], "deidentificationmodel": [41, 42, 48, 125, 159, 199], "obfusc": [41, 42, 43, 45, 46, 47, 48, 125, 159, 191, 194], "mask": [41, 42, 45, 53, 121, 125, 159, 191, 211], "person": [41, 50, 53, 59, 77, 125, 154, 159, 194, 211], "These": [41, 53, 63, 94, 125, 136, 159, 170], "setregexpatternsdictionari": [41, 125, 159], "line": [41, 59, 69, 77, 125, 159, 191, 196, 204, 209, 223], "secur": [41, 194], "securerandom": 41, "fake": [41, 42, 125, 159], "system": [41, 89, 194], "variabl": [41, 85, 105, 106, 144, 146, 154, 179, 181], "spark_nlp_jsl_seed_algorithm": 41, "chosen": [41, 75, 151, 186], "impact": 41, "potenti": [41, 110], "block": [41, 70], "rng": [41, 189], "sha1prng": 41, "regexpatternsdictionari": [41, 125, 159], "protect": [41, 53, 70, 125, 159], "obfuscatereffil": [41, 46, 125, 159, 194, 211], "reffileformat": [41, 46, 125, 159], "refsep": [41, 46, 125, 159], "sep": [41, 125, 159, 196], "charact": [41, 46, 50, 59, 77, 96, 109, 125, 159, 191], "reffil": [41, 46, 125, 159], "selectiveobfuscationmodespath": [41, 125, 159], "mask_same_length_char": [41, 45, 125, 159], "asterisk": [41, 42, 45, 125, 159], "minu": [41, 42, 45, 125, 159, 211], "plu": [41, 42, 45, 125, 159], "bracket": [41, 42, 45, 125, 159], "mask_entity_label": [41, 45, 125, 159], "mask_fixed_length_char": [41, 45, 125, 159], "fix": [41, 42, 45, 125, 159], "invok": [41, 45, 125, 159], "setfixedmasklength": [41, 42, 45, 125, 159], "intact": [41, 42, 45, 125, 159], "deidentifi": [41, 43, 45, 47, 121, 125, 159, 191, 211], "entitycasingmodespath": [41, 125, 159], "uppercas": [41, 125, 159], "upper": [41, 42, 75, 91, 92, 93, 125, 135, 151, 159, 169, 186], "capit": [41, 125, 159], "titlecas": [41, 125, 159], "setuseabbrevi": [41, 46, 125, 159], "clinical_sensitive_ent": [41, 46, 125, 159], "ner_deid_enrich": [41, 46, 125, 159], "ner_con": [41, 125, 159], "dei": [41, 47, 125, 159], "dic_regex_patterns_main_categori": [41, 125, 159], "setobfuscatereffil": [41, 46, 48, 125, 159], "obfuscate_fixed_ent": [41, 125, 159], "setreffileformat": [41, 46, 48, 125, 159], "setrefsep": [41, 46, 48, 125, 159], "setmod": [41, 42, 43, 45, 125, 159, 211], "setdateformat": [41, 42, 45, 125, 159], "mm": [41, 61, 80, 125, 159, 194, 196, 207], "dd": [41, 61, 80, 89, 96, 125, 159, 194, 207], "yy": [41, 125, 159], "yyyi": [41, 61, 80, 89, 125, 159, 194, 207], "setobfuscated": [41, 42, 43, 45, 125, 159], "setdatetag": [41, 42, 43, 125, 159], "setdai": [41, 42, 45, 125, 159], "setobfuscaterefsourc": [41, 42, 43, 45, 46, 125, 159], "7194334": [41, 47, 125, 159], "93": [41, 47, 125, 159], "oliveira": [41, 47, 125, 159], "record": [41, 47, 125, 159, 194], "2079": [41, 47, 125, 159], "09": [41, 47, 125, 159], "01010101": [41, 47, 125, 159], "dr": [41, 46, 47, 48, 125, 159], "gregori": [41, 47, 125, 159], "hous": [41, 47, 125, 159], "agerang": [41, 42, 45, 125, 159], "agerangesbyhipaa": [41, 42, 125, 159], "blacklistent": [41, 42, 125, 159], "combineregexpattern": [41, 125, 159], "consistentobfusc": [41, 42, 125, 159], "dateformat": [41, 42, 45, 89, 125, 159, 194], "datetag": [41, 42, 125, 159], "datetoyear": [41, 42, 125, 159], "dai": [41, 42, 43, 45, 80, 125, 126, 159, 160, 194], "fixedmasklength": [41, 42, 45, 125, 159], "genderawar": [41, 42, 45, 46, 125, 159], "ignoreregex": [41, 42, 125, 159], "israndomdatedisplac": [41, 42, 125, 159], "keepyear": [41, 42, 125, 159], "mappingscolumn": [41, 42, 125, 159], "maskingpolici": [41, 42, 45, 125, 159], "metadatamaskingpolici": [41, 42, 125, 159], "minyear": [41, 42, 125, 159], "obfuscatebyagegroup": [41, 42, 125, 159], "obfuscated": [41, 42, 45, 125, 159], "obfuscaterefsourc": [41, 42, 45, 46, 125, 159, 194], "obfuscationstrategyonexcept": [41, 42, 125, 159], "outputasdocu": [41, 42, 53, 125, 159], "regexoverrid": [41, 42, 125, 159], "regexpatternsdictionaryasjsonstr": [41, 125, 159], "region": [41, 42, 45, 121, 125, 159, 219], "returnentitymap": [41, 42, 125, 159], "sameentitythreshold": [41, 42, 125, 159], "samelengthformattedent": [41, 42, 45, 125, 159], "unnormalizeddatemod": [41, 42, 45, 125, 159], "useshifdai": [41, 42, 125, 159], "zipcodetag": [41, 42, 125, 159], "getblacklist": [41, 42, 125, 159], "getsamelengthformattedent": [41, 42, 125, 159], "getuseshiftdai": [41, 42, 125, 159], "useshiftdai": [41, 42, 45, 125, 159], "setagegroup": [41, 42, 125, 159], "activ": [41, 42, 45, 91, 92, 110, 125, 135, 159, 169, 223], "agegroup": [41, 42, 125, 159], "fulli": [41, 42, 125, 159], "bound": [41, 42, 109, 125, 159, 218, 223], "english": [41, 42, 45, 46, 125, 159, 194, 211], "babi": [41, 42, 125, 159], "toddler": [41, 42, 125, 159], "child": [41, 42, 125, 159], "teenag": [41, 42, 125, 159], "20": [41, 42, 43, 64, 80, 89, 109, 125, 139, 159, 174], "adult": [41, 42, 125, 159], "65": [41, 42, 125, 154, 159, 196], "senior": [41, 42, 125, 159], "100": [41, 42, 64, 85, 105, 106, 125, 139, 144, 146, 159, 174, 179, 181, 222], "setagerang": [41, 42, 45, 125, 159], "preserv": [41, 42, 45, 77, 125, 159], "setagerangesbyhipaa": [41, 42, 125, 159], "hipaa": [41, 42, 125, 159], "health": [41, 42, 52, 125, 159, 220], "insur": [41, 42, 125, 154, 159], "portabl": [41, 42, 125, 159], "account": [41, 42, 55, 125, 159, 194], "act": [41, 42, 87, 125, 139, 159, 174], "privaci": [41, 42, 125, 159], "mandat": [41, 42, 125, 159], "90": [41, 42, 125, 159, 196], "younger": [41, 42, 125, 154, 159], "remain": [41, 42, 46, 125, 159], "unchang": [41, 42, 125, 159], "larger": [41, 42, 53, 77, 125, 159], "iban": [41, 42, 125, 159, 194], "zip": [41, 42, 45, 125, 159, 194], "npi": [41, 42, 125, 159, 194], "dln": [41, 42, 45, 125, 159, 194], "passport": [41, 42, 125, 159, 194], "c_card": [41, 42, 125, 159, 194], "dea": [41, 42, 125, 159, 194], "ssn": [41, 42, 45, 125, 159, 194], "ip": [41, 42, 125, 159, 194], "setblacklistent": [41, 42, 125, 159], "setcombineregexpattern": [41, 125, 159], "combin": [41, 53, 55, 77, 78, 86, 87, 113, 125, 148, 154, 159, 182], "setconsistentobfusc": [41, 42, 125, 159], "displac": [41, 42, 45, 125, 159, 194], "pars": [41, 42, 43, 45, 59, 89, 125, 159, 191, 196, 207, 214], "setdatetoyear": [41, 42, 125, 159], "setentitycasingmod": [41, 125, 159], "fixed_length_char": [41, 42, 45, 125, 159], "polici": [41, 42, 45, 81, 125, 159], "setgenderawar": [41, 42, 45, 46, 125, 159], "l": [41, 42, 46, 125, 159, 196], "awar": [41, 42, 45, 46, 109, 125, 159], "effect": [41, 42, 45, 46, 103, 104, 125, 143, 145, 159, 178, 180], "decreas": [41, 42, 45, 46, 109, 110, 125, 159], "setignoreregex": [41, 42, 125, 159], "increas": [41, 42, 91, 93, 103, 104, 110, 125, 143, 145, 159, 178, 180], "accuraci": [41, 42, 75, 110, 125, 151, 159, 186, 211], "setisrandomdatedisplac": [41, 42, 125, 159], "setkeepyear": [41, 42, 125, 159], "keep": [41, 42, 64, 75, 99, 103, 104, 109, 125, 132, 143, 145, 151, 159, 166, 178, 180, 186, 189], "modifi": [41, 42, 63, 70, 74, 77, 125, 159], "month": [41, 42, 72, 80, 125, 159], "setlanguag": [41, 42, 43, 45, 46, 125, 159], "faker": [41, 42, 43, 45, 46, 121, 125, 159, 194, 211], "german": [41, 42, 45, 46, 125, 159, 194], "spanish": [41, 42, 45, 46, 125, 159, 194], "fr": [41, 42, 45, 46, 125, 159, 194], "french": [41, 42, 45, 46, 125, 159, 194], "arab": [41, 42, 45, 46, 125, 159, 194], "ro": [41, 42, 45, 46, 125, 159, 194], "romanian": [41, 42, 45, 46, 125, 159, 194], "setmappingscolumn": [41, 42, 47, 125, 159], "setmaskingpolici": [41, 42, 45, 125, 159], "same_length_char": [41, 42, 45, 125, 159], "compos": [41, 42, 45, 125, 159], "surround": [41, 42, 45, 55, 125, 159], "squar": [41, 42, 45, 125, 159], "total": [41, 42, 45, 125, 159], "smith": [41, 42, 45, 86, 125, 159], "less": [41, 42, 45, 75, 125, 151, 159, 186], "jo": [41, 42, 45, 125, 159], "setmetadatamaskingpolici": [41, 42, 125, 159], "asterix": [41, 42, 125, 159], "just": [41, 42, 52, 75, 125, 151, 159, 186], "setminyear": [41, 42, 125, 159], "1929": [41, 42, 125, 159], "anonym": [41, 42, 45, 125, 159, 204], "setobfuscatebyagegroup": [41, 42, 125, 159], "rang": [41, 42, 43, 53, 75, 125, 126, 151, 159, 160, 186, 189], "f": [41, 46, 61, 120, 125, 154, 159], "setobfuscationstrategyonexcept": [41, 42, 125, 159], "occur": [41, 42, 75, 83, 85, 103, 104, 105, 106, 125, 143, 144, 145, 146, 151, 159, 178, 179, 180, 181, 186, 194], "four": [41, 42, 125, 159], "throw": [41, 42, 89, 125, 154, 159], "setoutputasdocu": [41, 42, 125, 159], "join": [41, 42, 53, 87, 113, 125, 159], "c": [41, 46, 125, 159, 203], "setregexoverrid": [41, 42, 125, 159], "setregexpatternsdictionaryasjsonstr": [41, 125, 159], "setregion": [41, 42, 45, 125, 159], "With": [41, 42, 45, 46, 125, 159], "especi": [41, 42, 45, 125, 159, 194], "2023": [41, 42, 43, 45, 80, 125, 154, 159], "eu": [41, 42, 45, 125, 159], "european": [41, 42, 45, 125, 159], "union": [41, 42, 45, 125, 159], "usa": [41, 42, 45, 125, 151, 159, 186], "setreturnentitymap": [41, 42, 125, 159], "setsameentitythreshold": [41, 42, 125, 159], "consid": [41, 42, 50, 56, 57, 78, 79, 83, 85, 91, 93, 99, 105, 106, 109, 125, 132, 144, 146, 153, 159, 166, 179, 181, 187, 189, 222], "setsamelengthformattedent": [41, 42, 45, 125, 159], "ones": [41, 42, 45, 46, 48, 75, 85, 125, 144, 151, 159, 179, 186], "setse": [41, 42, 43, 45, 46, 125, 126, 159, 160, 189], "repli": [41, 42, 45, 46, 125, 159], "setselectiveobfuscationmod": [41, 45, 125, 159], "setunnormalizeddatemod": [41, 42, 45, 125, 159], "setuseshifdai": [41, 42, 43, 125, 159], "setuseshiftdai": [41, 42, 45, 125, 159], "shift": [41, 42, 43, 45, 125, 126, 159, 160], "setzipcodetag": [41, 42, 125, 159], "regexent": [41, 125, 159], "regexpatterndictionari": [41, 125, 159], "deidentify_larg": [41, 125, 159], "getregexent": [41, 125, 159], "deidentify_enriched_clin": 41, "deidentif": [42, 43, 44, 45, 47, 67, 121, 127, 128, 161, 162, 191, 194, 199, 211], "anonim": [42, 45, 125, 159], "60": [42, 45, 125, 159, 191, 194], "invalid": [42, 45], "obfuscatorreffil": [42, 125, 159], "randomli": [42, 45, 75, 125, 151, 159, 186, 194], "fax": [42, 45, 125, 159, 194], "idnum": [42, 45, 125, 159], "bioid": [42, 45, 125, 159, 194], "medicalrecord": [42, 45, 125, 159, 194], "vin": [42, 45, 125, 159], "plate": [42, 45, 125, 159], "documenthashcod": [43, 126, 160, 199], "hash": [43, 126, 160], "accordingli": 43, "patientidcolumn": [43, 126, 160], "dateshiftcolumn": [43, 126, 160], "newdateshift": [43, 126, 160], "rangedai": [43, 126, 160], "patientid": 43, "a001": 43, "a003": 43, "chri": 43, "brown": [43, 218, 219], "discharg": 43, "02": [43, 80], "04": [43, 80], "15": [43, 70, 74, 80, 211], "03": [43, 80, 93, 196], "moor": 43, "dateshift": [43, 121, 211], "my_input_df": 43, "documenthash": [43, 121], "setdateshiftcolumn": [43, 126, 160], "ner_deid_subentity_aug": 43, "de_identif": 43, "deid_text": 43, "pipeline_col": 43, "pipeline_col_model": 43, "ellend": 43, "manual": 43, "errol": 43, "bang": 43, "ariel": 43, "null": [43, 196], "jean": 43, "cotton": 43, "predefin": [43, 56, 69, 96, 126, 160], "setnewdateshift": [43, 126, 160], "setpatientidcolumn": [43, 126, 160], "setrangedai": [43, 126, 160], "doccument_hashcod": [44, 67], "light_deidentif": [44, 67, 211], "name_obfusc": [44, 67], "reidentif": [44, 67, 199], "lightdeidentif": [45, 211], "light": [45, 196], "design": 45, "doctor": [45, 46, 194], "million": [45, 81, 105, 106, 109, 146, 181], "setcustomfak": 45, "And": [45, 53, 72, 109], "dateent": 45, "dob": 45, "dod": 45, "selectiveobfuscationmod": 45, "customfak": 45, "jane": 45, "citi": [45, 79, 101, 153, 187, 194], "york": [45, 79, 153, 187], "lo": 45, "angel": 45, "school": 45, "oxford": 45, "harvard": 45, "setdateent": 45, "namechunkobfusc": [46, 48, 199], "pretraind": 46, "seper": [46, 214], "samelength": 46, "nameent": 46, "setnameent": 46, "setsamelength": 46, "mike": 46, "namechunkobfuscatorapproach": [46, 48, 199], "obfuscator_nam": 46, "replacer_nam": [46, 48], "obfuscated_nam": 46, "setusereplac": [46, 48], "davi": [46, 48], "y": [46, 48], "admit": [46, 48, 86], "seen": [46, 48, 109], "attend": [46, 48], "physician": [46, 48], "lorand": [46, 48], "schedul": [46, 48], "emerg": [46, 48, 220], "assess": [46, 48, 220], "charlestin": 46, "loweri": 46, "reidentifi": 47, "py": [47, 48, 189], "frame": [47, 75, 151, 186, 196], "reideintif": 47, "protectedent": 47, "reid": 47, "redeideintif": 47, "datenorm": [48, 80, 199], "usereplac": 48, "disabl": [48, 85, 144, 154, 179, 189, 196], "nonevaluesto": 48, "encount": [48, 103, 104, 105, 106, 143, 145, 146, 178, 180, 181], "placehold": 48, "place_hold": 48, "placeholderdelimit": 48, "wrap": [48, 189], "ner_deid_generic_aug": 48, "ner_converter_nam": 48, "names_test": 48, "obfuscated_document_nam": 48, "nlppipelin": [48, 50, 63], "model_chunck_obfusc": 48, "sample_text": 48, "mr": 48, "lmodel": 48, "re": [48, 67, 103, 104, 136, 143, 145, 155, 170, 178, 180, 196, 199], "print": [48, 119, 191, 192, 193, 197, 217, 218, 222], "fitzpatrick": 48, "bowman": 48, "acosta": 48, "getusereplac": 48, "setnonevaluesto": 48, "retain": 48, "target_text": 48, "unrecogn": 48, "illegalargumentexcept": [48, 192], "thrown": 48, "setplacehold": 48, "setplaceholderdelimit": 48, "ner_disambigu": [49, 67], "nerdisambigu": [50, 199], "interest": 50, "compani": [50, 194], "kb": 50, "ne": [50, 154], "mention": [50, 81], "surfac": 50, "instanti": [50, 59, 69, 75, 91, 96, 139, 151, 174, 186, 196], "embeddingtypeparam": 50, "numfirstchar": 50, "initi": [50, 75, 91, 151, 186, 189, 191, 196], "tokensearch": 50, "narrowwithapproximatematch": 50, "narrow": 50, "levenstein": 50, "levenshteindistancethresholdparam": 50, "nearmatchinggapparam": 50, "put": [50, 100, 139, 174], "trim": [50, 109], "candid": [50, 99, 132, 166], "len": 50, "nearmatchinggap": 50, "predictionslimit": 50, "s3knowledgebasenam": 50, "contest": 50, "donald": 50, "trump": 50, "who": [50, 86, 109, 148, 182], "defeat": 50, "christina": 50, "aguilera": 50, "sentenceembed": [50, 139, 174, 199], "nerdlmodel": [50, 55, 75, 151, 186, 199], "sets3knowledgebasenam": 50, "setnumfirstchar": 50, "wikipedia": 50, "curid": 50, "4848272": 50, "31698421": 50, "55907961": 50, "144171": 50, "6636454": 50, "setembeddingtyp": 50, "setlevenshteindistancethresholdparam": 50, "setnarrowwithapproximatematch": 50, "setnearmatchinggapparam": 50, "setpredictionlimit": 50, "settokensearch": 50, "nerdisambiguatormodel": [50, 199], "disambiguator_p": 50, "doc2chunkintern": [51, 199], "chunkcol": [51, 100, 126, 160], "arraytyp": [51, 100, 126, 160], "setisarrai": [51, 100, 126, 160], "startcolbytokenindex": [51, 126, 160], "prepend": [51, 109, 126, 160], "whitespac": [51, 103, 104, 109, 126, 143, 145, 160, 178, 180], "isarrai": [51, 126, 160], "failonmiss": [51, 126, 160], "job": [51, 126, 160], "advanc": [51, 126, 160], "natur": [51, 94, 126, 136, 160, 170], "chunk2doc": [51, 101, 126, 160, 199], "miss": [51, 154, 191], "documentfiltererbyclassifi": 52, "medicalbfsc": 52, "bert_sequence_classifier_covid_senti": 52, "documentfilter": 52, "filtereddocu": 52, "posit": [52, 70, 75, 77, 91, 93, 105, 106, 146, 181, 186, 191, 196, 209, 222], "british": 52, "depart": 52, "uk": 52, "trip": 52, "australian": 52, "exchang": 52, "student": 52, "got": 52, "cancel": 52, "becaus": [52, 154, 189, 196], "coronaviru": [52, 53], "wish": 52, "everyon": 52, "pandem": [52, 105, 106, 146, 181], "181": 52, "233": 52, "documentfiltererbyn": 53, "prioriti": [53, 75, 77, 107, 109, 151, 186], "joinstr": [53, 87], "sentencedetectordlmodel": [53, 72, 199, 209], "sentence_detector_dl_healthcar": [53, 72], "covid": [53, 105, 106, 146, 181], "19": [53, 70, 74, 105, 106, 146, 181, 196], "infecti": 53, "sar": 53, "cov": 53, "peopl": [53, 105, 106, 146, 181], "experi": 53, "mild": 53, "moder": 53, "respiratori": [53, 113, 196], "ill": [53, 75, 151, 186], "recov": 53, "special": [53, 208], "serious": 53, "medic": [53, 99, 110, 194, 208, 220], "attent": 53, "cardiovascular": 53, "cancer": [53, 85, 94, 136, 144, 170, 179, 191], "seriou": 53, "anyon": 53, "sick": [53, 94, 136, 170], "die": 53, "best": [53, 75, 139, 151, 174, 186, 197], "prevent": [53, 85, 105, 106, 110, 144, 146, 179, 181], "slow": [53, 75, 110, 151, 186], "down": [53, 75, 110, 151, 186], "transmiss": 53, "well": [53, 56, 81, 109, 154, 197, 217, 222], "spread": 53, "yourself": 53, "stai": 53, "least": [53, 89, 189], "metr": 53, "apart": 53, "wear": 53, "properli": [53, 87], "wash": 53, "hand": [53, 110], "alcohol": 53, "rub": 53, "frequent": 53, "vaccin": 53, "turn": [53, 85, 144, 179], "guidanc": 53, "mouth": 53, "nose": 53, "small": [53, 109], "liquid": 53, "particl": 53, "cough": 53, "sneez": 53, "speak": 53, "sing": 53, "breath": 53, "droplet": 53, "smaller": [53, 110], "aerosol": 53, "practic": [53, 75, 151, 186], "etiquett": 53, "flex": 53, "elbow": 53, "isol": 53, "until": [53, 189], "feel": 53, "unwel": 53, "86": 53, "87": [53, 211], "223": 53, "295": 53, "473": 53, "669": 53, "854": 53, "916": 53, "1050": 53, "averageembed": [54, 55, 199], "embded": 54, "bertsentencechunkembed": [55, 57, 199], "numer": [55, 61, 110], "chunkweight": 55, "prerequisit": [55, 75, 151, 186], "nertagg": [55, 75, 91, 92, 135, 151, 169, 186], "medicalnerdlmodel": [55, 75, 151, 186], "sbluebert_base_uncased_mli": 55, "sentence_chunk_embed": 55, "31995273": 55, "04710883": 55, "28973156": 55, "1294758": 55, "12481072": 55, "027161136": 55, "24613449": 55, "0949309": 55, "1825444": 55, "2252143": 55, "45139068": 55, "12400375": 55, "0075617577": 55, "90806055": 55, "12871636": 55, "sbiobert_base_cased_mli": [55, 56, 100], "setchunkweight": 55, "entitychunkembed": [56, 199], "One": [56, 208], "tri": [56, 61, 75, 89, 151, 186, 192], "criterion": [56, 75, 91, 93, 151, 186], "anoth": [56, 79, 153, 187], "syntact": [56, 91, 93], "relationship": [56, 91, 94, 136, 170, 192], "125": 56, "paracetamol": [56, 94, 136, 170], "metformin": [56, 72], "target_ent": 56, "related_ent": 56, "notat": 56, "subclass": [56, 110, 117, 120, 189], "targetent": [56, 156, 199], "insensit": 56, "entityweight": [56, 156, 199], "3f": 56, "maxsyntacticdist": [56, 91, 93], "pos_tag": [56, 91, 93, 94, 110, 136, 170], "pos_clin": [56, 91, 92, 93, 94, 135, 136, 169, 170], "dependency_pars": [56, 93, 94, 136, 170], "dependencyparsermodel": [56, 91, 92, 93, 94, 135, 136, 169, 170, 199], "dependency_conllu": [56, 91, 92, 93, 94, 135, 136, 169, 170], "setmaxsyntacticdist": [56, 91, 92, 93, 94, 135, 136, 169, 170], "settargetent": 56, "setentityweight": 56, "parient": 56, "coumadin": 56, "pill": 56, "sparkcontextfortest": 56, "267413": 56, "07614058": 56, "5620966": 56, "83838946": 56, "8911504": 56, "22319649": 56, "07094894": 56, "6885556": 56, "79176235": 56, "82672405": 56, "10939768": 56, "29242": 56, "3574444": 56, "3981813": 56, "79609615": 56, "weigh": 56, "related1": 56, "related2": 56, "extractivesummar": [57, 199], "summarizaiton": 57, "lexrank": 57, "returnsingledocu": 57, "similaritythreshold": 57, "summarys": 57, "setreturnsingledocu": 57, "compil": [57, 198, 221], "setsimilaritythreshold": 57, "minim": [57, 79, 91, 92, 94, 135, 136, 153, 169, 170, 187], "setsummarys": 57, "average_embed": [58, 67], "entity_chunk_embed": [58, 67], "extractive_summar": [58, 67], "entityrulerintern": 59, "entityrulerinternalapproach": 59, "hasstorag": 59, "There": [59, 154], "jsonl": 59, "setpatternsresourc": 59, "w": [59, 96, 199], "winterfel": 59, "j": 59, "jon": [59, 99], "stark": 59, "eddard": 59, "patternsresourc": 59, "usestorag": 59, "rocksdb": 59, "entityrul": 59, "lord": 59, "29": 59, "38": [59, 196], "alphabet": 59, "enableinmemorystorag": 59, "includestorag": 59, "sentencematch": 59, "storagepath": 59, "getenableinmemorystorag": 59, "getincludestorag": 59, "getstoragepath": 59, "setalphabetresourc": 59, "plain": 59, "setenableinmemorystorag": 59, "lookup": 59, "setincludestorag": 59, "interpret": [59, 63, 109], "setsentencematch": 59, "setstoragepath": 59, "setusestorag": 59, "entityrulerinternalmodel": 59, "hasstoragemodel": [59, 99], "databas": 59, "entity_pattern": 59, "loadstorag": 59, "storage_ref": 59, "savestorag": 59, "entity_ruler_intern": [60, 67], "featuresassembl": [61, 64, 199], "anyth": [61, 110], "cast": [61, 89], "feature_vector": [61, 64, 215], "timestampformat": 61, "hh": 61, "ss": 61, "zz": 61, "test_jsl": 61, "relfeatur": 61, "withcolumn": 61, "array_column": 61, "words_in_ent1": [61, 196], "words_in_ent2": [61, 196], "features_asm1": 61, "words_between": [61, 196], "features_t": 61, "__data": 61, "easier": 63, "produc": [63, 70, 77], "analyz": [63, 93], "cleanannot": 63, "explodeselectedfield": 63, "flattenexplodedcolumn": 63, "orderbycolumn": 63, "orderdescend": 63, "descend": [63, 89], "pretrainedpipelin": [63, 191, 192, 199], "elderli": 63, "gentleman": 63, "acut": [63, 72], "distress": 63, "clinical_assert": 63, "finish": [63, 199], "setorderbycolumn": 63, "assertion_metadata_confid": 63, "explainresult": 63, "finished_ner_chunk_explod": 63, "ner_chunk_result": [63, 191], "ner_chunk_metadata_ent": 63, "someoneels": 63, "9885": 63, "9976": 63, "9994": 63, "keeporiginalcolumn": 63, "setcleanannot": 63, "choos": [63, 75, 123, 139, 151, 157, 174, 186], "alia": 63, "setflattenexplodedcolumn": 63, "comprehens": 63, "view": 63, "setkeeporiginalcolumn": 63, "kept": [63, 70], "setorderdescend": 63, "proce": 64, "dropou": 64, "lay": 64, "features_asm": 64, "feature_1": 64, "feature_2": 64, "feature_n": 64, "graph_fil": [64, 91], "pb": [64, 75, 91, 110, 151, 186], "001": [64, 75, 91, 151, 186], "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 64, "deid": [67, 128, 137, 155, 162, 171, 199], "disambigu": [67, 155, 199, 215], "er": [67, 155, 191, 199], "text_matcher_intern": [67, 68], "chunk_merg": [67, 71], "iob_tagg": [67, 73], "medical_n": [67, 73, 151, 186], "ner_converter_intern": [67, 73], "ner_template_rend": [67, 73], "zero_shot_n": [67, 73, 149, 152, 183, 184], "date_norm": [67, 82], "drug_norm": [67, 82], "qa": [67, 105, 106, 144, 146, 155, 179, 181, 199], "beam_search_param": [67, 84, 85, 105], "medical_qa": [67, 84], "qa_ner_gener": [67, 84, 137, 147, 171, 177], "rag": [67, 155], "context_split_assembl": [67, 88], "vectordb_post_processor": [67, 88], "relation_extract": [67, 90, 110, 133, 137, 167, 171, 199], "relation_extraction_dl": [67, 90, 133, 134, 167, 168], "relation_ner_chunk_filt": [67, 90], "zero_shot_relation_extract": [67, 90, 133, 134, 167, 168], "resolut": [67, 89, 100, 128, 137, 155, 162, 171, 191, 199, 218], "resolver_merg": [67, 97], "sentence_entity_resolv": [67, 97, 128, 131, 162, 165], "seq2seq": [67, 155, 199], "medical_encoder_decod": [67, 102, 104], "medical_summar": [67, 102], "medical_text_gener": [67, 102, 106], "text2sql": [67, 102, 199], "splitter": [67, 155], "internal_document_splitt": [67, 108], "windowed_sent": [67, 112], "annotation_merg": [67, 155], "chunk2_token": [67, 155], "doc2_chunk_intern": [67, 155], "document_filterer_by_classifi": [67, 155], "document_filterer_by_n": [67, 155], "feature_assembl": [67, 155], "multi_chunk2_doc": [67, 155], "resolution2_chunk": [67, 155], "router": [67, 155, 199], "source_tracking_metadata_param": [67, 77, 155], "tf_graph_build": [67, 155], "textmatcherintern": 69, "setent": [69, 75, 151, 186], "externalresourc": [69, 199], "entityvalu": 69, "buildfromtoken": 69, "dolor": 69, "magna": 69, "aliqua": 69, "entity_name_1": 69, "lorem": 69, "ipsum": 69, "sit": 69, "laborum": 69, "hello": [69, 189], "entityextractor": 69, "extractor": 69, "24": [69, 154], "48": 69, "59": [69, 93], "setbuildfromtoken": 69, "setentityvalu": 69, "textmatcherinternalmodel": 69, "own": [69, 75, 96, 139, 151, 174, 186, 194], "searchtri": 69, "getdelimit": 69, "chunkmergeapproach": [70, 199], "mergecommonparam": [70, 96, 199], "mergeprioritizationparam": [70, 199], "mergeresourceparam": [70, 199], "decis": 70, "longer": [70, 110], "chang": [70, 77, 110, 122, 196, 212, 220], "setreplacedictresourc": [70, 77], "falsepositivesresourc": 70, "replacedictresourc": [70, 77], "chunkpreced": 70, "preced": 70, "proccess": [70, 77, 86, 148, 182], "emb": [70, 74], "jsl_ner": [70, 77], "jsl_ner_chunk": 70, "ner_bionlp": 70, "bionlp_ner": 70, "bionlp_ner_chunk": 70, "merged_chunk": [70, 191], "72": [70, 74], "recurr": [70, 74, 75, 151, 186], "98": [70, 74, 211], "107": [70, 74], "cellul": [70, 74], "diagnosi": [70, 74], "119": [70, 74], "pneumonia": [70, 74], "chunkprecedencevaluepriorit": 70, "setchunkpreced": 70, "togeth": [70, 89, 113], "setchunkprecedencevaluepriorit": 70, "chunkconfid": 70, "setfalsepositivesresourc": 70, "chunkbegin": 70, "chunklength": 70, "chunkmergemodel": [70, 199], "mergefeatureparam": [70, 199], "falseposit": 70, "third": [70, 86, 148, 182], "replacedict": 70, "getreplacedict": 70, "setfalseposit": 70, "wow": 70, "beauti": 70, "thing": 70, "setreplacedict": 70, "multichunk2doc": 72, "creation": [72, 196], "place": 72, "ner_clinical_large_langtest": 72, "new_docu": 72, "setprefix": 72, "setsepar": 72, "setsuffix": 72, "femal": [72, 113, 154], "diagnos": [72, 113], "eight": [72, 113], "prior": [72, 113], "t2dm": 72, "episod": 72, "htg": [72, 113], "induc": 72, "pancreat": 72, "hepat": 72, "week": [72, 80, 113], "polyuria": 72, "poor": 72, "appetit": 72, "vomit": 72, "glipizid": 72, "dapagliflozin": 72, "atorvastatin": 72, "gemfibrozil": 72, "six": [72, 191], "physic": 72, "examin": [72, 113], "signific": 72, "dry": 72, "oral": [72, 81], "mucosa": 72, "significantli": 72, "abdomin": 72, "benign": [72, 113], "tender": 72, "guard": 72, "rigid": [72, 113], "iobtagg": [74, 199], "scheme": [74, 196], "bioe": 74, "iobtaggermodel": 74, "setschem": 74, "medicalnerapproach": [75, 110, 151, 186, 199], "nerapproach": [75, 199], "evaluation_dl_param": 75, "evaluationdlparam": [75, 199], "cnn": [75, 151, 186], "bilstm": [75, 151, 186], "crf": [75, 151, 186, 199], "art": [75, 139, 151, 174, 186], "2003": [75, 151, 186], "bertembed": [75, 99, 132, 151, 166, 186, 199], "thu": [75, 151, 186], "minepoch": [75, 151, 186], "maxepoch": [75, 139, 151, 174, 186], "randomse": [75, 78, 103, 104, 105, 106, 139, 143, 145, 146, 151, 174, 178, 180, 181, 186], "reproduc": [75, 105, 106, 146, 181, 186], "decai": [75, 110, 151, 186], "coeffici": [75, 139, 151, 154, 174, 186], "updat": [75, 186, 191, 205, 206, 207, 209, 220], "005": [75, 139, 151, 174, 186], "adequ": [75, 151, 186], "blstn_": [75, 151, 186], "ntag": [75, 151, 186], "embedding_dim": [75, 151, 186], "lstm_size": [75, 151, 186], "nchar": [75, 151, 186], "exactli": [75, 151, 186], "greater": [75, 89, 99, 151, 186, 189], "satisfi": [75, 151, 186], "usecontrib": [75, 151, 186], "contrib": [75, 151, 186], "lstm": [75, 151, 186], "Not": [75, 151, 186], "slightli": [75, 151, 186], "off": [75, 123, 139, 151, 157, 174, 186], "hold": [75, 91, 151, 186], "evaluationlogextend": [75, 123, 139, 151, 157, 174, 186], "parquet": [75, 139, 151, 174, 186], "includeallconfidencescor": [75, 151, 186], "infer": [75, 94, 110, 136, 151, 170, 186], "speed": 75, "stdout": [75, 139, 151, 174, 186], "enablememoryoptim": [75, 151, 186], "retriev": [75, 151, 186, 191, 192, 220], "slower": [75, 151, 186], "evei": [75, 151, 186], "bach": [75, 151, 186], "onc": [75, 83, 85, 92, 103, 104, 105, 106, 135, 143, 144, 145, 146, 169, 178, 179, 180, 181], "tagsmap": [75, 151, 186], "oldtag": [75, 151, 186], "newtag": [75, 151, 186], "vip": [75, 151, 186], "overrideexistingtag": [75, 151, 186], "earlystoppingpati": [75, 151, 186], "wait": [75, 151, 186], "earli": [75, 151, 186], "earlystoppingcriterion": [75, 151, 186], "soon": [75, 151, 186], "met": [75, 151, 186], "patienc": [75, 151, 186], "f1": [75, 151, 186, 197, 217, 222], "socr": [75, 151, 186], "infin": [75, 151, 186, 189], "pretrainedmodelpath": [75, 91, 99, 132, 151, 166, 186], "point": [75, 91, 99, 132, 151, 166, 186], "logprefix": [75, 151, 186], "append": [75, 94, 109, 136, 151, 170, 186], "usebestmodel": [75, 151, 186], "sentencetokenindex": [75, 151, 186], "setmaxepoch": [75, 139, 151, 174, 186], "setrandomse": [75, 78, 83, 85, 103, 104, 105, 106, 139, 143, 144, 145, 146, 151, 174, 178, 179, 180, 181, 186], "trainingdata": [75, 151, 186], "readdataset": [75, 151, 186, 196], "conll2003": [75, 151, 186], "eng": [75, 151, 186, 196], "randomvalidationsplitperepoch": [75, 151, 186], "uc": [75, 151, 186], "getlabelcolumn": [75, 110, 151, 186], "usual": [75, 77, 94, 99, 136, 151, 170, 186], "bad": [75, 139, 151, 174, 186], "lost": [75, 89, 151, 186], "setearlystoppingcriterion": [75, 151, 186], "setearlystoppingpati": [75, 151, 186], "termin": [75, 85, 144, 151, 179, 186], "setenablememoryoptim": [75, 151, 186], "setevaluationlogextend": [75, 139, 151, 174, 186], "displai": [75, 139, 151, 174, 186], "setincludeallconfidencescor": [75, 151, 186], "setlogprefix": [75, 151, 186], "setlr": [75, 139, 151, 174, 186], "setminepoch": [75, 151, 186], "setoverrideexistingtag": [75, 151, 186], "setpo": [75, 151, 186], "real": [75, 151, 186], "rage": [75, 151, 186], "setpretrainedmodelpath": [75, 91, 99, 132, 151, 166, 186], "shuffl": [75, 139, 151, 174, 186], "setrandomvalidationsplitperepoch": [75, 151, 186], "setsentencetokenindex": [75, 151, 186], "settagsmap": [75, 151, 186], "preprocessingpipelin": [75, 139, 151, 174, 186], "randomsplit": [75, 139, 151, 174, 186], "setusebestmodel": [75, 151, 186], "across": [75, 151, 186], "setusecontrib": [75, 151, 186], "nerdlapproach": [75, 110, 151, 186, 199], "ner_dl": [75, 151, 186, 211], "wordembed": [75, 151, 186, 199], "glove_100d": [75, 151, 186], "inferencebatchs": [75, 151, 186], "labelcas": [75, 151, 186], "offici": [75, 151, 186], "ekeu": [75, 151, 186], "baghdad": [75, 151, 186], "trainingclassdistribut": [75, 151, 186], "gettrainingclassdistribut": [75, 151, 186], "setinferencebatchs": [75, 151, 186], "setlabelcas": [75, 151, 186], "nerchunk": [76, 91, 92, 135, 169, 199], "known": [76, 154], "neighbor": [76, 113], "dt": 76, "jj": 76, "ner_radiologi": 76, "imagingfind": 76, "bodypart": 76, "regexpars": 76, "commonnerconverterinternalparam": 77, "preserveposit": 77, "greedymod": 77, "contigu": 77, "ignorestopword": 77, "setallowlist": 77, "loc": [77, 222], "setgreedymod": 77, "greedy_mod": 77, "setignorestopword": 77, "stopword": 77, "setpreserveposit": 77, "preserve_posit": 77, "setthreshold": [77, 99, 132, 166], "annotatorapproach": [77, 115, 199], "sourcetrackingmetadataparam": [77, 107, 199], "iob2": 77, "friendli": 77, "nerconverterinternalmodel": [77, 199], "insid": [77, 139, 174], "outsid": 77, "allpossiblefieldstostandard": [77, 107], "includeoutputcolumn": [77, 107], "includestandardfield": [77, 107], "outputcolumnkei": [77, 107], "standardfieldkei": [77, 107], "setallpossiblefieldstostandard": [77, 107], "setincludeoutputcolumn": [77, 107], "setincludestandardfield": [77, 107], "setoutputcolumnkei": [77, 107], "substitut": [77, 106], "replaced_ner_chunk": 77, "drug_brandnam": 77, "drug_frequ": 77, "drug_dosag": 77, "drug_strength": 77, "setstandardfieldkei": [77, 107], "nertemplaterendermodel": [78, 199], "combineent": 78, "entityscop": 78, "permuteent": 78, "resampleent": 78, "templat": [78, 85, 94, 105, 106, 136, 144, 146, 170, 179, 181, 189], "setcombineent": 78, "enough": 78, "fill": [78, 189], "setentityscop": 78, "render": 78, "liststr": 78, "setpermuteent": 78, "permut": 78, "even": 78, "resampl": 78, "setresampleent": 78, "settempl": 78, "zeroshotnermodel": [79, 153, 187, 199], "classifier_dl": [79, 139, 174], "robertaforquestionansw": [79, 153, 187, 199], "zero": [79, 89, 94, 136, 153, 170, 187], "entitydefinit": [79, 153, 187], "question": [79, 85, 86, 144, 148, 153, 179, 182, 187], "town": [79, 153, 187], "predictionthreshold": [79, 91, 92, 94, 135, 136, 153, 169, 170, 187], "encod": [79, 91, 92, 94, 110, 135, 136, 139, 153, 169, 170, 174, 187, 191], "01f": [79, 153, 187], "ignoreent": [79, 153, 187], "setentitydefinit": [79, 153, 187], "clara": [79, 153, 187], "live": [79, 153, 187, 194], "hellen": [79, 153, 187], "pari": [79, 153, 187], "5328949": [79, 153, 187], "9360068": [79, 153, 187], "83294415": [79, 153, 187], "45366877": [79, 153, 187], "max_length_limit": [79, 153, 187], "getmaxsentencelength": [79, 153, 187], "zero_shot_ner_roberta": 79, "setpredictionthreshold": [79, 91, 92, 135, 153, 169, 187], "expect": [80, 87, 196], "els": 80, "anchordateyear": 80, "anchor": 80, "tomorrow": 80, "2021": [80, 93, 154], "anchordatemonth": 80, "januari": 80, "anchordatedai": 80, "08": [80, 154], "2018": [80, 154], "12mar2021": 80, "jan": 80, "1999": 80, "3april": 80, "2020": [80, 154], "mondai": [80, 100, 139, 174], "todai": 80, "original_d": 80, "date_chunk": 80, "setanchordateyear": 80, "setanchordatemonth": 80, "setanchordatedai": 80, "normalized_d": 80, "defaultreplacementdai": 80, "defaultreplacementmonth": 80, "defaultreplacementyear": 80, "outputdateformat": 80, "setdefaultreplacementdai": 80, "setdefaultreplacementmonth": 80, "06": 80, "setdefaultreplacementyear": 80, "setoutputdateformat": 80, "drugnorm": [81, 199], "apac": 81, "discuss": 81, "blog": 81, "post": [81, 106, 154], "abbrevi": 81, "sol": 81, "solut": 81, "unit": [81, 91, 92, 110, 135, 169], "10000000": 81, "unt": 81, "sodium": 81, "chlorid": 81, "potassium": 81, "13bag": 81, "interferon": 81, "alfa": 81, "2b": 81, "injec": 81, "meq": 81, "document_norm": 81, "trainingpipelin": 81, "normalized_text": [81, 99, 132, 166], "bag": 81, "inject": 81, "setpolici": 81, "beamsearchparam": [83, 85, 105], "dosampl": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "ignoretokenid": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "maxcontextlength": [83, 85, 105, 106, 144, 146, 179, 181], "maxnewtoken": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "norepeatngrams": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "topk": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181, 189], "setdosampl": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "greedi": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "decod": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "setignoretokenid": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "setmaxcontextlength": [83, 85, 105, 106, 144, 146, 179, 181], "setmaxnewtoken": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "setnorepeatngrams": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "settopk": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181, 189], "vocabulari": [83, 85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "medicalquestionansw": [85, 144, 179, 199], "gpt": [85, 105, 106, 144, 146, 179, 181], "answer": [85, 86, 105, 106, 109, 144, 146, 179, 181], "span": [85, 144, 179], "capabl": [85, 144, 179], "ye": [85, 144, 179], "questiontyp": [85, 144, 179], "card": [85, 144, 179, 194], "repeat": [85, 105, 106, 144, 146, 179, 181, 189], "loop": [85, 105, 106, 144, 146, 179, 181], "customprompt": [85, 105, 106, 144, 146, 179, 181], "prompt": [85, 105, 106, 144, 146, 179, 181, 189], "usecach": [85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "spare": [85, 144, 179], "studi": [85, 144, 179], "failur": [85, 144, 179], "node": [85, 110, 144, 179, 191], "breast": [85, 144, 179, 191], "chest": [85, 144, 179], "wall": [85, 144, 179], "irradi": [85, 144, 179], "mastectomi": [85, 144, 179, 191], "multidocumentassembl": [85, 144, 179, 199], "document_quest": [85, 144, 179], "document_context": [85, 144, 179], "med_qa": [85, 144, 179], "medical_qa_biogpt": [85, 144, 179], "setquestiontyp": [85, 144, 179], "mlframeworktyp": [85, 103, 104, 105, 106, 143, 144, 145, 146, 178, 179, 180, 181], "modeltyp": [85, 105, 106, 144, 146, 179, 181, 199], "getquestiontyp": [85, 144, 179], "loadmedicaltextgener": [85, 144, 179], "med_text_generator_path": [85, 144, 179], "medicaltextgener": [85, 105, 106, 144, 146, 179, 181, 199], "flan_t5_base_jsl_qa": 85, "setcustomprompt": [85, 105, 106, 144, 146, 179, 181], "setquestionanswertermin": [85, 144, 179], "questiontermin": [85, 144, 179], "symbol": [85, 144, 179, 218], "setquestionprompt": [85, 144, 179], "questionprompt": [85, 144, 179], "setquestionskiplasttoken": [85, 144, 179], "questionskiplasttoken": [85, 144, 179], "setusecach": [85, 105, 106, 144, 146, 179, 181], "nerquestiongener": [86, 148, 182, 199], "scala": [86, 189, 198, 200, 204, 205, 206, 221], "pronoun": [86, 148, 182], "questionpronoun": [86, 148, 182], "questionmark": [86, 148, 182], "questionanswer": 86, "why": [86, 148, 182], "strategytyp": [86, 148, 182], "entities1": [86, 148, 182], "entities2": [86, 148, 182], "qagener": 86, "setquestionmark": [86, 148, 182], "setquestionpronoun": [86, 148, 182], "setstrategytyp": [86, 148, 182], "setentities1": [86, 148, 182], "setentities2": [86, 148, 182], "admiss": 86, "zeroshotn": 86, "align": [86, 148, 182], "contextsplitassembl": 87, "assembl": [87, 209], "vector_similarity_rank": [87, 89, 215], "explodesplit": [87, 109], "setexplodesplit": [87, 109], "setjoinstr": 87, "vectordbpostprocessor": 89, "vectordbmodel": 89, "filterbi": 89, "diversity_by_threshold": 89, "metadatacriteria": 89, "diversitythreshold": 89, "sortbi": 89, "ascend": 89, "lost_in_the_middl": 89, "middl": 89, "ranker": 89, "sai": 89, "diversitybythreshold": 89, "maxtopkafterfilt": 89, "allowzerocontentafterfilt": 89, "setallowzerocontentafterfilt": 89, "setdiversitythreshold": 89, "setfilterbi": 89, "setmaxtopkafterfilt": 89, "setmetadatacriteria": 89, "fieldtyp": [89, 192], "not_equ": 89, "greater_than": 89, "greater_than_or_equ": 89, "less_than": 89, "less_than_or_equ": 89, "not_contain": 89, "matchmod": 89, "matchvalu": 89, "converterfallback": 89, "fallback": 89, "not_filt": 89, "publish_d": 89, "mmm": 89, "5470": 89, "immun": 89, "setmetadatacriteriaasstr": 89, "setsortbi": 89, "genericremodel": [91, 199], "relationextractionmodel": [91, 92, 135, 169, 199], "intend": 91, "setrelationpair": [91, 92, 93, 94, 135, 136, 169, 170], "customlabel": [91, 92, 135, 156, 169, 199], "directionsensit": [91, 93], "filterbytokendist": [91, 93], "relationpair": [91, 92, 93, 135, 169], "relationpairscasesensit": [91, 92, 93, 135, 169], "getrelationtypeperpair": [91, 92, 135, 169], "posology_r": 91, "setcustomlabel": [91, 92, 135, 169], "setdirectionsensit": [91, 93], "setfilterbytokendist": [91, 93], "fewer": [91, 93], "far": [91, 93], "recal": [91, 197, 217, 222], "dash": [91, 93], "setrelationpairscasesensit": [91, 92, 93, 135, 169], "setrelationtypeperpair": [91, 92, 135, 169], "relationtypepair": [91, 92, 135, 169], "posologyremodel": [91, 199], "posologi": 91, "entitit": 91, "reason": [91, 109, 154], "relationextractionapproach": [91, 110, 196, 199], "tfgraphbuild": [91, 110], "tf_graph": [91, 110, 196], "tensorflow_graph": 91, "relationdirectioncol": 91, "decript": 91, "fromentitybegincol": 91, "fromentityendcol": 91, "fromentitylabelcol": 91, "toentitybegincol": 91, "toentityendcol": 91, "toentitylabelcol": 91, "leftward": 91, "argument": [91, 154], "rightward": 91, "doesn": 91, "symmetr": [91, 199], "embedd": [91, 92, 135, 169], "postag": [91, 92, 135, 169], "ner_events_clin": [91, 92, 135, 169], "depencypars": [91, 92, 135, 169], "train_ner_chunk": [91, 110, 196], "relations_t": 91, "target_rel": 91, "300": [91, 110], "05": [91, 154], "setfroment": 91, "from_begin": 91, "from_end": 91, "from_label": 91, "settoent": 91, "to_begin": 91, "to_end": 91, "to_label": 91, "traindata": [91, 92, 135, 169], "overrideexistinglabel": 91, "begin_col": 91, "label_col": [91, 122], "setrelationdirectioncol": 91, "set\u043everrideexistinglabel": 91, "annotatormodel": [91, 93, 96, 116, 199], "biomark": 91, "relativedai": 91, "relationtypeperpair": 91, "symtom": 91, "external_body_part_or_region": [91, 92, 93, 135, 169], "internal_organ_or_compon": [91, 92, 93, 135, 169], "re_model": [91, 92, 94, 135, 136, 169, 170], "re_bodypart_direct": 91, "mri": [91, 92, 93, 94, 135, 136, 169, 170], "infarct": [91, 92, 93, 135, 169], "brain": [91, 92, 93, 135, 169], "cerebellum": [91, 92, 93, 135, 169], "basil": [91, 92, 93, 135, 169], "ganglia": [91, 92, 93, 135, 169], "chunk1": [91, 92, 135, 169, 191, 196], "chunk2": [91, 92, 135, 169, 191, 196], "relationextractiondlmodel": [92, 93, 135, 169, 199], "contrast": [92, 135, 169], "re_ner_chunk_filt": [92, 93, 94, 135, 136, 169, 170], "renerchunksfilt": [92, 93, 94, 135, 136, 169, 170, 199], "re_ner_chunk": [92, 93, 94, 135, 136, 169, 170], "redl_bodypart_direction_biobert": [92, 135, 169], "redl_ade_biobert": 92, "realtionpair": 93, "advers": 93, "reaction": 93, "realat": 93, "further": 93, "ner_clinical_en": 93, "html": 93, "awai": 93, "doclevelrel": 93, "words_embedd": [93, 94, 136, 170], "pos_tagg": [93, 94, 136, 170], "clinical_ner_tagg": 93, "jsl_ner_wip_greedy_clin": 93, "trained_pipelin": 93, "cre": 93, "re_chunk": 93, "paired_to": 93, "setdoclevelrel": [93, 94, 136, 170], "zeroshotrelationextractionmodel": [94, 136, 170, 199], "nli": [94, 136, 170], "statement": [94, 136, 170], "regard": [94, 136, 170], "relationalcategori": [94, 136, 156, 170, 199], "hypothesi": [94, 136, 170], "cure": [94, 136, 170], "5f": [94, 136, 170], "multilabel": [94, 136, 170], "categor": [94, 136, 170, 220], "tmp": [94, 136, 170], "spark_sbert_zero_shot": [94, 136, 170], "setrelationalcategori": [94, 136, 170], "reveal": [94, 136, 170], "setmultilabel": [94, 136, 170], "allevi": [94, 136, 170], "headach": [94, 136, 170], "9760039": [94, 136, 170], "98819494": [94, 136, 170], "9929625": [94, 136, 170], "negativerelationship": [94, 136, 170], "zero_shot_r": 94, "setnegativerelationship": [94, 136, 170], "serv": [94, 136, 170], "regexmatcherintern": 96, "choic": 96, "1970": 96, "setrul": 96, "match_first": 96, "match_al": [96, 101], "match_complet": 96, "externalrul": 96, "setstrategi": [96, 101], "short_dat": 96, "regexmatcherinternalmodel": 96, "deid_regex": 96, "resolvermerg": [98, 199], "enit": 98, "sentenceentityresolverapproach": [99, 132, 166, 199], "sentenceresolverparam": [99, 199], "sentenceentityresolvermodel": [99, 100, 132, 166, 199], "standart": 99, "aux_label": 99, "auxiliari": [99, 132, 166], "better": [99, 110], "overrideexistingcod": [99, 132, 166], "unwant": 99, "dropcodeslist": [99, 132, 166], "flavour": 99, "normalizedcol": [99, 132, 166], "returncosinedist": [99, 132, 166], "aux_label_col": [99, 132, 166], "useauxlabel": [99, 132, 166], "conceptid": 99, "concept": 99, "snome": [99, 132, 166], "concept_nam": 99, "108367008": 99, "disloc": 99, "joint": 99, "3384011000036100": 99, "arthrotec": 99, "166717003": 99, "serum": 99, "creatinin": 99, "3877011000036101": 99, "lipitor": 99, "402234004": 99, "foot": 99, "eczema": 99, "sent_biobert_pubmed_base_cas": [99, 132, 166], "data_pipelin": 99, "data_processing_model": 99, "prepared_data": 99, "bertextractor": [99, 132, 166], "setneighbour": [99, 132, 166], "1000": [99, 132, 166], "bert_embed": [99, 132, 166], "setnormalizedcol": [99, 132, 166], "snomed_cod": [99, 132, 166], "setdistancefunct": [99, 132, 166], "euclidian": [99, 132, 166], "setuseauxlabel": [99, 132, 166], "setauxlabelcol": [99, 132, 166], "snomedmodel": [99, 132, 166], "confidencefunct": [99, 132, 166], "distancefunct": [99, 132, 166], "missasempti": [99, 132, 166], "neighbour": [99, 132, 166], "returnresolvedtextembed": [99, 132, 166], "setconfidencefunct": [99, 132, 166], "conf_funct": [99, 132, 166], "invers": [99, 132, 166], "softmax": [99, 110, 132, 166], "mover": [99, 132, 166], "wmd": [99, 132, 166], "euclidean": [99, 132, 166], "setdropcodeslist": [99, 132, 166], "leav": [99, 132, 166], "setextractcosinedist": [99, 132, 166], "setmissasempti": [99, 132, 166], "unmatch": [99, 132, 166], "knn": [99, 132, 166], "algorithmn": [99, 132, 166], "queri": [99, 132, 166], "setoverrideexistingcod": [99, 132, 166], "setreturnresolvedtextembed": [99, 132, 166], "thre": [99, 132, 166], "auxlabel": [99, 132, 166], "hasembeddingsproperti": [99, 199], "ontologi": [99, 132, 166], "curat": [99, 132, 166], "rxnorm": [99, 132, 166], "searchtre": [99, 132, 166], "structfeature_hadoopfix": [99, 199], "encapsul": [99, 132, 166], "serializablekdtre": [99, 132, 166], "tree": [99, 132, 166], "nearest": 99, "multidimension": 99, "approch": 99, "loui": 99, "bentlei": 99, "1975": 99, "commun": [99, 154], "acm": 99, "sept": 99, "509": 99, "517": 99, "doi": 99, "1145": 99, "361002": 99, "361007": 99, "sbertresolve_icd10cm_slim_billable_hcc_m": 99, "icd10_cod": [99, 191, 220], "icd10extractorpipelin": 99, "icd10model": 99, "sbiobertresolve_icd10cm_augmented_billable_hcc": 99, "setsearchtre": [99, 132, 166], "search_tre": [99, 132, 166], "usuali": [99, 132, 166], "kdtree": [99, 132, 166], "famili": 99, "algorithmm": 99, "resolution2chunk": [100, 199], "sbert_embedd": 100, "rxnorm_resolv": 100, "sbiobertresolve_rxnorm_aug": 100, "rxnorm_cod": 100, "readi": [100, 139, 174, 204, 211], "love": [100, 139, 174], "wake": [100, 139, 174], "am": [100, 109, 139, 174, 211], "resolver2chunk": 100, "219400": 100, "13369": 100, "filterfieldsel": 101, "rules2": 101, "doc_chunk": 101, "sent_small_bert_l2_128": 101, "router_name_embed": 101, "setfilterfieldsel": 101, "names_embed": 101, "router_city_embed": 101, "cities_embed": 101, "router_nam": 101, "names_chunk": 101, "medicalencoderdecod": [103, 104, 143, 178, 199], "maxtextlength": [103, 104, 105, 106, 143, 145, 146, 178, 180, 181], "refinechunks": [103, 104, 143, 145, 178, 180], "refinemaxattempt": [103, 104, 143, 145, 178, 180], "refinesummari": [103, 104, 143, 145, 178, 180], "refinesummarytargetlength": [103, 104, 143, 145, 178, 180], "stopateo": [103, 104, 105, 106, 143, 145, 146, 178, 180, 181], "setmaxtextlength": [103, 104, 105, 106, 143, 145, 146, 178, 180, 181], "setrefinechunks": [103, 104, 143, 145, 178, 180], "refin": [103, 104, 143, 145, 178, 180], "Be": [103, 104, 143, 145, 178, 180], "setrefinemaxattempt": [103, 104, 143, 145, 178, 180], "abov": [103, 104, 143, 145, 178, 180, 222], "summarytargetlength": [103, 104, 143, 145, 178, 180], "setrefinesummari": [103, 104, 143, 145, 178, 180], "cost": [103, 104, 143, 145, 178, 180], "summari": [103, 104, 143, 145, 178, 180, 191], "setrefinesummarytargetlength": [103, 104, 143, 145, 178, 180], "setstopateo": [103, 104, 105, 106, 143, 145, 146, 178, 180, 181], "medicalsummar": [104, 106, 145, 180, 199], "use_cach": [104, 145, 180], "facilit": [104, 145, 180], "summarizer_clinical_jsl_aug": 104, "document_prompt": [105, 106, 146, 181], "med_text_gener": [105, 106, 146, 181], "convid": [105, 106, 146, 181], "worldwid": [105, 106, 146, 181], "getadditionaltoken": [105, 106, 146, 181], "model_typ": [105, 106, 146, 181], "text_generator_biomedical_biogpt_bas": 105, "setadditionaltoken": [105, 106, 146, 181], "additionaltoken": [105, 106, 146, 181], "tablelimit": 106, "getpostprocessingsubstitut": 106, "getschema": 106, "schema": [106, 192, 196, 199], "text2sql_mimicsql": 106, "setpostprocessingsubstitut": 106, "setschema": 106, "tabl": 106, "settablelimit": 106, "internaldocumentsplitt": 109, "documentcharactertextsplitt": [109, 199], "setsplitmod": 109, "splitmod": 109, "recurs": [109, 199], "subtext": 109, "perfect": 109, "observ": 109, "world": 109, "setsplitpattern": 109, "setpatternsareregex": 109, "setkeepsepar": 109, "settrimwhitespac": 109, "individu": 109, "chunksiz": 109, "applic": [109, 220], "chunkoverlap": 109, "splitpattern": 109, "trfv": 109, "patternsareregex": 109, "keepsepar": 109, "trimwhitespac": 109, "segment": [109, 154], "sentenceawar": 109, "maxlength": 109, "spit": 109, "customboundsstrategi": 109, "enablesentenceincr": 109, "textdf": 109, "sherlockholm": 109, "wholetext": 109, "textsplitt": 109, "setchunks": 109, "20000": 109, "setchunkoverlap": 109, "gutenberg": 109, "adventur": 109, "sherlock": 109, "holm": 109, "arthur": 109, "conan": 109, "doyl": 109, "19994": 109, "mademoisel": 109, "brioni": 109, "lodg": 109, "serpentin": 109, "aven": 109, "19798": 109, "39395": 109, "19597": 109, "woman": 109, "think": 109, "39371": 109, "59242": 109, "19871": 109, "But": 109, "said": 109, "red": [109, 218], "men": 109, "59166": 109, "77833": 109, "18667": 109, "friend": 109, "enthusiast": 109, "musician": 109, "himself": 109, "capab": 109, "77835": 109, "97769": 109, "19934": 109, "convinc": 109, "li": 109, "97771": 109, "117248": 109, "19477": 109, "slate": 109, "colour": 109, "broad": 109, "brim": 109, "straw": 109, "hat": 109, "feather": 109, "117250": 109, "137242": 109, "19992": 109, "That": 109, "sound": 109, "littl": 109, "paradox": 109, "profoundli": 109, "singulari": 109, "137244": 109, "157171": 109, "19927": 109, "setcustomboundsstrategi": 109, "setenablesentenceincr": 109, "setmaxlength": 109, "setsentenceawar": 109, "estim": 110, "defaultparamswrit": [110, 120], "defaultparamsread": [110, 120], "tensor": 110, "flow": 110, "sinc": 110, "seri": [110, 113], "edg": 110, "biggest": 110, "idea": 110, "backbon": 110, "program": 110, "graph_fold": 110, "re_graph_fold": 110, "setmodelnam": 110, "re_graph": 110, "sethiddenlay": 110, "sethiddenact": 110, "relu": 110, "sethiddenactl2": 110, "sethiddenweightsl2": 110, "setbatchnorm": 110, "batchnorm": 110, "hiddenact": 110, "hiddenactl2": 110, "hiddenlay": 110, "hiddenunitsnumb": 110, "hiddenweightsl2": 110, "islicens": 110, "maxsequencelength": 110, "modelnam": 110, "outputact": 110, "userelationdirect": 110, "shallow": [110, 117, 120], "suffici": [110, 117, 120], "getbatchnorm": 110, "getgraphfil": 110, "getgraphfold": 110, "gethiddenact": 110, "gethiddenactl2": 110, "l2": 110, "gethiddenlay": 110, "hiudden": 110, "gethiddenunitsnumb": 110, "gethiddenweightsl2": 110, "getislicens": 110, "medicalneraprroach": 110, "getmaxsequencelength": 110, "getmodelnam": 110, "getoutputact": 110, "getuserelationdirect": 110, "techniqu": 110, "stabil": 110, "greaph": 110, "auto": 110, "sigmoid": 110, "tanh": 110, "aka": 110, "overfit": 110, "involv": 110, "encourag": 110, "complex": 110, "neuron": 110, "sethiddenunitsnumb": 110, "solv": 110, "setislicens": 110, "setmaxsequencelength": 110, "low": [110, 154], "lose": 110, "valuabl": 110, "On": 110, "consum": 110, "excess": 110, "setuserelationdirect": 110, "settoutputact": 110, "tfgraphbuildermodel": 110, "windowedparam": 113, "gluestr": 113, "windows": 113, "setgluestr": 113, "setwindows": 113, "slide": 113, "windowedsentencemodel": [113, 199], "windowedsent": 113, "five": [113, 154], "tract": 113, "annotator_properties_intern": [115, 116, 118, 155], "annotatorpropertiesintern": [115, 116, 117], "attach": 117, "annotator_approach_intern": [118, 155], "annotator_model_intern": [118, 155], "verifi": 119, "findvers": 119, "privat": [119, 193], "showvers": 119, "customtransform": 120, "hasinputcol": 120, "hasoutputcol": 120, "helper": [120, 194, 207], "custom_pipelin": 121, "masking_polici": 121, "fixed_mask_length": 121, "obfuscate_d": 121, "obfuscate_ref_sourc": 121, "obfuscate_ref_file_path": 121, "age_group_obfusc": 121, "age_rang": 121, "shift_dai": [121, 211], "number_of_dai": 121, "documenthashcoder_col_nam": 121, "date_tag": 121, "unnormalized_d": 121, "unnormalized_mod": 121, "id_column_nam": 121, "date_shift_column_nam": 121, "multi_mode_file_path": 121, "domain": 121, "input_file_path": [121, 211], "output_file_path": [121, 211], "deid_with_custom_pipelin": 121, "pretrained_pipelin": 121, "deid_with_pretrained_pipelin": 121, "nercrfevalu": [122, 199], "test_fil": 122, "tag_level": 122, "extendedjavawrapp": [122, 196], "java_obj": [122, 196], "sc": [122, 196], "computeaccuracyannot": 122, "train_fil": 122, "computeaccuracymodel": 122, "getdatafram": [122, 196], "jdf": [122, 196], "new_java_arrai": [122, 196], "pylist": [122, 196], "java_class": [122, 196], "todo": [122, 196], "inspir": [122, 196], "new_java_array_integ": [122, 196], "new_java_array_str": [122, 196], "new_java_obj": [122, 196], "arg": [122, 191, 196], "spark_vers": [122, 196], "nerdlevalu": [122, 199], "full_chunk": 122, "computemetricsfromdf": 122, "prediction_col": 122, "drop_o": 122, "case_sensit": [122, 196], "norvigspellevalu": [122, 199], "ground_truth_fil": 122, "posevalu": [122, 199], "symspellevalu": [122, 199], "olumn": [123, 157], "eval": [123, 155, 157, 199], "finassertiondl_time_md": 123, "doesnt": [125, 159], "tha": [125, 159], "ouptut": [125, 159], "cfn": 125, "finner_deid": 125, "financedocumenthashcod": [126, 199], "setidcolumn": [126, 160], "document_hashcod": [127, 128, 161, 162], "finmapper_edgar_companynam": 129, "snomedtrainingpipelin": [132, 166], "snomedtrainingmodel": [132, 166], "snomeddata": [132, 166], "finel_edgar_company_nam": 132, "finre_financial_smal": 135, "finre_zero_shot": 136, "chunk_classif": [137, 155, 171, 199], "sequence_classif": [137, 155, 171, 199], "finance_bert_for_sequence_classif": [137, 142], "finance_classifier_dl": [137, 142], "finance_document_ml_classifi": [137, 142], "finance_few_shot_classifi": [137, 142], "sequence_gener": [137, 155, 171, 199], "finance_encoder_decod": [137, 147], "finance_qa": [137, 147], "finance_summar": [137, 147], "finance_text_gener": [137, 147], "token_classif": [137, 155, 171, 199], "financebertforsequenceclassif": [138, 199], "financebertfortokenclassif": [138, 150, 199], "finclf_bert_banking77": 138, "financeclassifierdlapproach": [139, 199], "classifierdlapproach": [139, 174, 199], "classifierdl": [139, 174], "univers": [139, 174], "dnn": [139, 174], "classifierdlmodel": [139, 174, 199], "item": [139, 174, 209], "doubl": [139, 174], "universalsentenceencod": [139, 174, 199], "movi": [139, 174], "wach": [139, 174], "ever": [139, 174], "opinion": [139, 174], "win": [139, 174], "award": [139, 174], "terribl": [139, 174], "realli": [139, 174], "trane": [139, 174], "smallcorpu": [139, 174], "useembed": [139, 174], "docclassifi": [139, 174], "5e": [139, 174], "multiclassifierdlapproach": [139, 174, 199], "sentimentdlapproach": [139, 174, 199], "financeclassifierdlmodel": [139, 140, 199], "financeclassifierdl": 139, "classifierdl_use_trec6": [139, 174], "trec": [139, 174], "sarcasmdl": [139, 174], "classifierdl_use_sarcasm": [139, 174], "sarcasm": [139, 174], "arrays_zip": [139, 174], "multiclassifierdlmodel": [139, 174, 199], "sentimentdlmodel": [139, 174, 199], "finclf_sec_fil": 139, "financedocumentmlclassifierapproach": [140, 199], "financedocumentmlclassifiermodel": [140, 175, 199], "financefewshotclassifierapproach": [141, 199], "financefewshotclassifi": 141, "financefewshotclassifiermodel": [141, 199], "financeencoderdecod": [143, 199], "financequestionansw": [144, 199], "biogpt_pubmed_qa": [144, 179], "financesummar": [145, 199], "finsum_flant5_finetuned_sec10k": 145, "financetextgener": [146, 199], "fingen_flant5_finetuned_sec10k": 146, "financenerquestiongener": [148, 199], "finance_bert_for_token_classifi": [149, 152], "finance_n": [149, 152], "financebertfortokenclassifi": 150, "finner_responsibility_report": 150, "financenerapproach": [151, 199], "verif": [151, 186], "greather": [151, 186], "financenermodel": [151, 186, 199], "teh": [151, 186], "finner_sec_10k_summari": 151, "finner_roberta_zeroshot": 153, "profil": 154, "code_arrai": 154, "sex": 154, "elig": 154, "cna": 154, "orec": 154, "medicaid": 154, "cm": 154, "hcc": [154, 220], "illeg": 154, "icd10": 154, "male": 154, "cfa": 154, "benefit": 154, "dual": 154, "cfd": 154, "nondual": 154, "cnd": 154, "cpa": 154, "cpd": 154, "INS": 154, "institut": 154, "enrolle": 154, "snpne": 154, "snp": 154, "plan": 154, "entitl": 154, "survivor": 154, "renal": 154, "dib": 154, "esrd": 154, "risk_scor": 154, "risk_score_ag": 154, "risk_score_adj": 154, "intens": 154, "risk_score_age_adj": 154, "hcc_lst": 154, "hcc_map": 154, "hierarchi": 154, "profileesrdv21y19": 154, "di": 154, "21": [154, 196, 211], "2019": 154, "dialysi": 154, "gc": 154, "graft": 154, "gi": 154, "dne": 154, "gne": 154, "profilerxhccv05y20": 154, "ce_nolowag": 154, "rxhcc": [154, 220], "incom": 154, "ce_nolownoag": 154, "ce_lowag": 154, "ce_lownoag": 154, "ce_lti": 154, "ne_nolo": 154, "ne_lo": 154, "ne_lti": 154, "beneficiari": 154, "medicar": 154, "payment": 154, "status": 154, "transplant": 154, "situat": 154, "rxhcc_lst": 154, "rxhcc_map": 154, "profilerxhccv05y21": 154, "profilerxhccv05y22": 154, "profilerxhccv05y23": 154, "profilerxhccv08y22": 154, "profilerxhccv08y23": 154, "profilev22": 154, "profilev22y17": 154, "2017": 154, "profilev22y18": 154, "profilev22y19": 154, "profilev22y20": 154, "profilev22y21": 154, "profilev22y22": 154, "profilev23": 154, "profilev23y18": 154, "profilev23y19": 154, "profilev24": 154, "profilev24y19": 154, "profilev24y20": 154, "profilev24y21": 154, "profilev24y22": 154, "profilev28": 154, "profilev28y24": 154, "2024": 154, "llm_loader": [155, 188], "transpil": 155, "externalsourc": [155, 202], "class_nam": [155, 202], "nlu_2_python": [155, 202], "python_2_scala": [155, 202], "source_load": [155, 202], "alab_util": [155, 213], "conll_pars": [155, 213], "deidentification_util": [155, 213], "java_help": [155, 213], "licensed_annotator_typ": [155, 213], "log_pars": [155, 213], "ner_util": [155, 213], "ocr_nlp_processor": [155, 213], "ocr_util": [155, 213], "risk_adjustment_util": [155, 213], "run_transpiled_cod": [155, 213], "training_log_parser_util": [155, 213], "visualner_annotations_pars": [155, 213], "custom_transform": 155, "deidentification_modul": 155, "modeltrac": [155, 199], "pipeline_output_pars": 155, "pipeline_trac": 155, "structured_deidentif": 155, "text_to_documents_column": 155, "training_log_pars": 155, "updatemodel": [155, 199], "load_license_valid": 155, "size_regex": 155, "transformer_seq_classif": 155, "version_regex": 155, "legassertion_time_md": 157, "legner_deid": 159, "legaldocumenthashcod": [160, 199], "legmapper_edgar_companynam": 163, "legel_edgar_company_nam": 166, "legre_contract_doc_parti": 169, "legre_zero_shot": 170, "legal_bert_for_sequence_classif": [171, 172], "legal_classifier_dl": [171, 172], "legal_document_ml_classifi": [171, 172], "legal_few_shot_classifi": [171, 172], "legal_encoder_decod": [171, 177], "legal_qa": [171, 177], "legal_summar": [171, 177], "legal_text_gener": [171, 177], "legalbertforsequenceclassif": [173, 199], "legalbertfortokenclassif": [173, 185, 199], "legclf_reddit_advic": 173, "legalclassifierdlapproach": [174, 199], "legalclassifierdlmodel": [174, 175, 199], "legalclassifierdl": 174, "legclf_argument_min": 174, "legaldocumentmlclassifierapproach": [175, 199], "legaldocumentmlclassifiermodel": [175, 199], "legalfewshotclassifierapproach": [176, 199], "legalfewshotclassifi": 176, "legalfewshotclassifiermodel": [176, 199], "legalencoderdecod": [178, 199], "legalquestionansw": [179, 199], "legalsummar": [180, 199], "legsum_flant5_legal_aug": 180, "legaltextgener": [181, 199], "leggen_flant5_finetun": 181, "legalnerquestiongener": [182, 199], "legal_bert_for_token_classifi": [183, 184], "legal_n": [183, 184], "classit": 185, "legalbertfortokenclassifi": 185, "legner_bert_gr": 185, "legalnerapproach": [186, 199], "legalnermodel": [186, 199], "legner_contract_doc_parties_lg": 186, "legner_roberta_zeroshot": 187, "llmloader": 189, "javamodel": 189, "inherit": 189, "mix": 189, "ins": 189, "gguf": 189, "encodemodel": 189, "model_path": 189, "output_model_path": 189, "getmetadata": 189, "getmetadataentri": 189, "setcacheprompt": 189, "cacheprompt": 189, "rememb": 189, "reprocess": 189, "setdynamictemperatureexpon": 189, "dynatempexpon": 189, "dynam": 189, "temperatur": 189, "expon": 189, "setdynamictemperaturerang": 189, "dynatemprang": 189, "setfrequencypenalti": 189, "frequencypenalti": 189, "repetit": 189, "alpha": 189, "setgrammar": 189, "grammar": 189, "bnf": 189, "constrain": 189, "dir": 189, "setignoreeo": 189, "ignoreeo": 189, "stream": 189, "impli": 189, "logit": [189, 199], "bia": 189, "inf": 189, "setinputprefix": 189, "inputprefix": 189, "infil": 189, "setinputsuffix": 189, "inputsuffix": 189, "setminkeep": 189, "minkeep": 189, "sampler": 189, "setminp": 189, "minp": 189, "setmirostateta": 189, "mirostateta": 189, "mirostat": 189, "eta": 189, "setmirostattau": 189, "mirostattau": 189, "entropi": 189, "tau": 189, "setnkeep": 189, "nkeep": 189, "setnpredict": 189, "npredict": 189, "setnprob": 189, "nprob": 189, "setpenalizenl": 189, "penalizenl": 189, "penal": 189, "newlin": 189, "setpenaltyprompt": 189, "penaltyprompt": 189, "alic": 189, "ggerganov": 189, "llama": 189, "cpp": 189, "3727": 189, "pull": 189, "request": 189, "setpresencepenalti": 189, "presencepenalti": 189, "presenc": 189, "setrepeatlastn": 189, "repeatlastn": 189, "ctx_size": 189, "setrepeatpenalti": 189, "repeatpenalti": 189, "lt": 189, "setstopstr": 189, "stopstr": 189, "upon": 189, "settemperatur": 189, "settfsz": 189, "tfsz": 189, "tail": 189, "z": 189, "40": 189, "settopp": 189, "topp": 189, "settypicalp": 189, "typicalp": 189, "typic": 189, "setusechattempl": 189, "usechattempl": 189, "chat": 189, "adduidcol": 190, "timestamp": 190, "pipelineoutputpars": [191, 192], "columns_map": 191, "immunohistochemistri": 191, "thyroid": 191, "transcript": [191, 208], "napsin": 191, "pr": 191, "her2": 191, "previous": 191, "undergon": 191, "axillari": 191, "lymph": 191, "dissect": 191, "twenti": 191, "ago": 191, "tumor": 191, "postop": 191, "radiotherapi": 191, "administ": 191, "residu": 191, "recur": 191, "lung": 191, "metastasi": 191, "underw": 191, "regimen": 191, "adriamycin": 191, "m2": 191, "cyclophosphamid": 191, "600": 191, "cours": 191, "therapi": 191, "oncology_pipelin": 191, "oncology_biomarker_pipelin": 191, "column_map": [191, 196], "document_identifi": 191, "xyz_123": 191, "document_text": 191, "assertion_chunk": 191, "pipeline_pars": 191, "parsed_result": 191, "check_column_mapping_dict": 191, "ner_chunk_column_nam": 191, "resolver_column_nam": 191, "assertion_column_nam": 191, "keyerror": 191, "check_unique_id": 191, "ner_chunk_begin": 191, "ner_chunk_end": 191, "get_assert": 191, "chunk_id": 191, "assertion_confid": 191, "assertion_sourc": 191, "get_classif": 191, "sentence_id": 191, "get_deidentif": 191, "get_docu": 191, "get_ent": 191, "ner_sourc": [191, 211], "ner_confid": 191, "entity_result": 191, "get_rel": 191, "return_relation_ent": 191, "envolv": 191, "chunk1_id": 191, "entity1_begin": 191, "entity1_end": 191, "chunk2_id": 191, "entity2_begin": 191, "entity2_end": 191, "get_resolut": 191, "terminologi": 191, "vocab": 191, "vocablari": 191, "teminologi": 191, "term_cod": 191, "all_k_cod": 191, "all_k_resolut": 191, "all_k_aux_label": 191, "aux": 191, "all_k_dist": 191, "get_summari": 191, "get_unique_id": 191, "base64": 191, "uuid3": 191, "uuid": 191, "document_id": 191, "update_columns_map": 191, "pipelinestag": 192, "pipelinetrac": 192, "trace": 192, "insight": 192, "createparserdictionari": 192, "getparserdictdirectli": 192, "listavailablemodel": 192, "getpipelinestag": 192, "getpossibleassert": 192, "getpossibleent": 192, "getpossiblerel": 192, "printpipelineschema": 192, "showavailablemodel": 192, "stagefield": 192, "internalresourcedownload": [193, 199], "downlod": 193, "downloadmodel": 193, "reader": [193, 196], "j_dwn": 193, "internalspythonresourcedownload": [193, 199], "downloadmodeldirectli": 193, "unzip": 193, "cache_folder_path": 193, "uri": 193, "returnprivatemodel": 193, "returnprivatepipelin": 193, "showavailableannot": 193, "showprivatemodel": 193, "showprivatepipelin": 193, "showuncategorizedresourc": 193, "uncategor": 193, "printprogress": 193, "progress": 193, "bar": 193, "consol": 193, "tabular": 194, "structureddeidentif": [194, 199], "columnsse": 194, "userandomdatedisplac": 194, "idcolumn": [194, 211], "countri": 194, "street": 194, "internet": 194, "profess": 194, "opf": 194, "screen": 194, "protein": 194, "someth": 194, "someon": 194, "healthplan": 194, "devic": 194, "social": 194, "protocol": 194, "nation": 194, "credit": 194, "bank": 194, "administr": 194, "obfuscatecolumn": 194, "texttodocumentscolumn": 195, "todocumentscolumn": 195, "todocumentscolumnswithid": 195, "id_column": [195, 211], "annotationtooljsonread": [196, 199], "pipeline_model": 196, "cleanup_mod": 196, "split_char": 196, "context_char": 196, "min_chars_tol": 196, "align_chars_tol": 196, "merge_overlap": 196, "sddlpath": 196, "generateassertiontrainset": 196, "generateconl": 196, "aspres": 196, "rdr": 196, "completion_id": 196, "completion_d": 196, "completion_us": 196, "tool_chunk": 196, "229937784": 196, "fih": 196, "18001": 196, "04t13": 196, "aleksei": 196, "136": 196, "142": 196, "37": [196, 211], "79": 196, "305038693": 196, "65001": 196, "03t08": 196, "844970557": 196, "rwh": 196, "21001": 196, "84": 196, "97": 196, "914783811": 196, "97001": 196, "02t12": 196, "07": 196, "91": [196, 211], "733882247": 196, "84001": 196, "02t15": 196, "73": 196, "77": 196, "assertion_df": 196, "sentencecol": 196, "assertioncol": 196, "taskcolumn": 196, "tokencol": 196, "nerlabel": 196, "generateplainassertiontrainset": 196, "cantemistread": 196, "cantemist": 196, "readdatasettaskn": 196, "textfold": 196, "codiespread": 196, "codiesp": 196, "readdatasettaskx": 196, "redatasethelp": 196, "spark_df": 196, "preprocess": 196, "i2b2_clinical_rel_dataset": 196, "begin1": 196, "firstcharent1": 196, "end1": 196, "lastcharent1": 196, "begin2": 196, "firstcharent2": 196, "end2": 196, "lastcharent2": 196, "label1": 196, "label2": 196, "create_annotation_column": 196, "txt_file": 196, "sent_id": 196, "beth": 196, "partner": 196, "i2b2": 196, "2010": 196, "va": 196, "tem": 196, "44": 196, "satur": 196, "75": 196, "lotion": 196, "crea": 196, "146": 196, "trnap": 196, "incis": 196, "conc": 196, "43": [196, 219], "ter": 196, "picc": 196, "54": 196, "68": 196, "58": 196, "headed": 196, "diaphoresi": 196, "92": 196, "82": 196, "electroca": 196, "61": 196, "inferior": 196, "st": 196, "depressio": 196, "239": 196, "196": 196, "176": 196, "145": 196, "train_data": 196, "annotation_schema": 196, "ner_column_nam": 196, "printschema": 196, "root": 196, "nullabl": 196, "synonymaugmentationuml": [196, 199], "umls_path": 196, "code_col": 196, "description_col": 196, "augment": 196, "synonym": 196, "uml": 196, "augmentcsv": 196, "corpus_csv_path": 196, "ner_pipelin": [196, 218], "do_product": 196, "augmentation_mod": 196, "plain_text": 196, "synonym_sourc": 196, "regex_pars": 196, "euclidean_distance_threshold": 196, "cosine_distance_threshold": 196, "synonym_limit": 196, "casing_funct": 196, "augmentdatafram": 196, "corpus_df": 196, "tf_graph_1x": 196, "assertion_log_pars": 197, "get_best_f1_scor": 197, "log_path": [197, 217], "micro": 197, "macro": 197, "get_chart": [197, 217], "log_fil": [197, 217], "plot": [197, 217], "figur": [197, 217], "precis": [197, 217, 222], "loss_plot": [197, 217], "parse_logfil": 197, "avg": 197, "ner_log_pars": 197, "true_seq": [197, 217, 222], "pred_seq": [197, 217, 222], "overal": [197, 217, 222], "simpli": [197, 217, 222], "evaluate_conll_fil": [197, 217], "fileiter": [197, 217], "script": [198, 204, 205, 206], "prepar": [198, 204], "manag": 198, "necessari": 198, "build_python_cod": 198, "py_cod": [198, 200, 204], "subprocess": 198, "build_scala_cod": [198, 221], "scala_cod": [198, 204, 221], "runtranspiledcod": [198, 221], "class": [198, 204, 224], "compile_scala_cod": [198, 221], "prepare_python_cod": 198, "import_sect": [198, 204], "typeerror": 198, "internal_class": [199, 205], "multilin": 199, "internals3resourcedownload": 199, "medicaltensorflowbertclassif": 199, "assertiondatasetencod": 199, "tensorflowbiogpt": 199, "medicaltensorflowdistilbertclassif": 199, "medicalnerdatasetencod": 199, "medicaltensorflowclassif": 199, "medicalencoderdecodermodel": 199, "taskread": 199, "annotationtooljsonschema": 199, "simpledisambiguationpipelin": 199, "cosinemetricsbreezeimpl": 199, "linalg": 199, "categorytodomainmap": 199, "switchablesentenceembed": 199, "storagedisambiguatorhelp": 199, "storagelocatordisambigu": 199, "disambiguatormodelparam": 199, "disambiguationdatatyp": 199, "datatyp": 199, "contextmappingsschema": 199, "linalgalias": 199, "predictionlog": 199, "logic": 199, "bowpoolingextractor": 199, "impl": 199, "sentenceembeddingsextractor": 199, "poolinglogicnd4": 199, "switchableembeddingsextractor": 199, "embeddingsextractor": 199, "poolinglog": 199, "annotationlog": 199, "kvknowledgeextractor": 199, "matchregex": 199, "readablepretrainedcontextualpars": 199, "matchedtoken": 199, "matchexcept": 199, "nertagsencodingintern": 199, "nertaggedintern": 199, "biogpttoken": 199, "assertionannot": 199, "genericclassifierdataencod": 199, "gptgenerationparam": 199, "negexdatasetread": 199, "stringfunct": 199, "jtreeread": 199, "jtreewrit": 199, "resolverparam": 199, "datehelp": 199, "deidmodelparam": 199, "obfuscatorannotatorapproach": 199, "obfuscatorparam": 199, "datechunkobfusc": 199, "texttodocumentcolumn": 199, "namechunkobfuscatorparam": 199, "obfuscatorannotatormodel": 199, "deidapproachparam": 199, "bertreconfig": 199, "relationinst": 199, "refeaturegener": 199, "relationencod": 199, "redataencod": 199, "tagsmetr": 199, "loggingdata": 199, "goldtoken": 199, "evalentityresolv": 199, "evaluationmetr": 199, "internalss3resourcedownload": 199, "threadsafedownload": 199, "riskadjustmentutil": [199, 220], "opensource_class": [199, 205], "jsonbuild": 199, "configload": 199, "conllgener": 199, "ziparchiveutil": 199, "longmapaccumul": 199, "mapaccumul": 199, "jsonpars": 199, "loadexternalmodel": 199, "debertaclassif": 199, "ai": 199, "visionencoderdecod": 199, "xlnetclassif": 199, "vitclassifi": 199, "xlmroberta": 199, "xlmrobertaclassif": 199, "prepareembed": 199, "generationconfig": 199, "beamhypothes": 199, "beamsearchscor": 199, "beamscor": 199, "logitprocessorlist": 199, "logitwarp": 199, "topklogitwarp": 199, "temperaturelogitwarp": 199, "topplogitwarp": 199, "minlengthlogitprocessor": 199, "logitprocess": 199, "forcedtokenlogitprocessor": 199, "logitprocessor": 199, "repetitionpenaltylogitprocessor": 199, "norepeatngramslogitprocessor": 199, "suppresslogitprocessor": 199, "bartclassif": 199, "openaiembed": 199, "albertclassif": 199, "camembert": 199, "zeroshotnerclassif": 199, "bertclassif": 199, "wav2vec2": 199, "spanbertcoref": 199, "openaicomplet": 199, "camembertclassif": 199, "textembeddingrespons": 199, "completionrespons": 199, "robertaclassif": 199, "convnextclassifi": 199, "instructor": 199, "distilbertclassif": 199, "tapa": 199, "bart": 199, "sentencedetectordl": 199, "classifierdatasetencod": 199, "chunkbyt": 199, "tensorflowsenti": 199, "loadsentencepiec": 199, "sentencepiec": 199, "sentencepieceencod": 199, "sentencepiecewrapp": 199, "sentencegroup": 199, "nerdatasetencod": 199, "tensorflown": 199, "tensorflowserializemodel": 199, "modelsignaturemanag": 199, "modelsignatureconst": 199, "datasetencod": 199, "sparsearrai": 199, "linearchaincrfmodel": 199, "datasetmetadata": 199, "datasetread": 199, "linearchaincrf": 199, "vectormath": 199, "crfdataset": 199, "hasenablecachingproperti": 199, "tableassembl": 199, "hasrecursivetransform": 199, "haspretrain": 199, "camembertembed": 199, "doc2vecapproach": 199, "word2vecapproach": 199, "wordembeddingsread": 199, "elmoembed": 199, "e5embed": 199, "robertasentenceembed": 199, "xlmrobertasentenceembed": 199, "distilbertembed": 199, "wordembeddingsload": 199, "debertaembed": 199, "xlmrobertaembed": 199, "readsfrombyt": 199, "mpnetembed": 199, "robertaembed": 199, "albertembed": 199, "instructorembed": 199, "wordembeddingswrit": 199, "chunkembed": 199, "longformerembed": 199, "xlnetembed": 199, "doc2vecmodel": 199, "word2vecmodel": 199, "tokenassembl": 199, "hassimpleannot": 199, "imageassembl": 199, "hascandidatelabelsproperti": 199, "sparknlpconfigkei": 199, "matchstrategi": 199, "cloudstoragetyp": 199, "outputhelp": 199, "resourcehelp": 199, "graphbuild": 199, "rulefactori": 199, "regexrul": 199, "lfucach": 199, "finisherutil": 199, "lrumap": 199, "hasinputannotationcol": 199, "pubtat": 199, "conllucol": 199, "conllu": 199, "conll2003nerread": 199, "spacytoannot": 199, "conllhelp": 199, "serializedexternalresourc": 199, "multidatematch": 199, "regextoken": [199, 209], "textmatchermodel": 199, "tmedgesreadwrit": 199, "btm": 199, "bigtextmatchermodel": 199, "trienod": 199, "tmnodesread": 199, "bigtextmatch": 199, "tmedgesread": 199, "tmnodeswrit": 199, "tmvocabreadwrit": 199, "tmvocabread": 199, "datematchertransl": 199, "sentencedetectorparam": 199, "sbd": 199, "pragmaticsentenceextractor": 199, "pragmat": 199, "pragmaticmethod": 199, "pragmaticdictionari": 199, "pragmaticcontentformatt": 199, "rulesymbol": 199, "pragmaticsymbol": 199, "viveknsentimentmodel": 199, "sda": 199, "vivekn": 199, "viveknsentimentutil": 199, "viveknsentimentapproach": 199, "sentimentdetectormodel": 199, "pragmaticscor": 199, "sentimentdetector": 199, "nertagsencod": 199, "nerdlmodelpythonread": 199, "loadscontrib": 199, "featuregener": 199, "nercrfapproach": 199, "nercrfmodel": 199, "dictionaryfeatur": 199, "neroverwrit": 199, "languagedetectordl": 199, "ld": 199, "sentencedetectordlencod": 199, "sentence_detector_dl": 199, "sentencedetectordlapproach": 199, "documentnorm": 199, "symmetricdeleteapproach": 199, "symmetricdeleteparam": 199, "symmetricdeletemodel": 199, "contextspellcheckerapproach": 199, "contextspellcheckermodel": 199, "weightedlevenshtein": 199, "serializableclass": 199, "specialtokenspars": 199, "hastransducerfeatur": 199, "norvigsweetingmodel": 199, "norvig": 199, "norvigsweetingparam": 199, "norvigsweetingapproach": 199, "whispertokendecod": 199, "bpe": 199, "bpespecialtoken": 199, "xlmtoken": 199, "bpetoken": 199, "barttoken": 199, "gpt2token": 199, "robertatoken": 199, "wordpieceencod": 199, "basictoken": 199, "mosespunctnorm": 199, "mosestoken": 199, "mose": 199, "tapasencod": 199, "datematch": 199, "documentsimilarityrankermodel": 199, "documentsimilarityrankerapproach": 199, "chunktoken": 199, "tagdictionari": 199, "dep": 199, "dependencyparserapproach": 199, "tagger": [199, 209, 217], "perceptron": 199, "greedytransitionapproach": 199, "greedytransit": 199, "dependencymak": 199, "trainfil": 199, "typdep": 199, "typeddependencyparsermodel": 199, "typeddependencyparserapproach": 199, "chunktokenizermodel": 199, "annotatorparam": 199, "writableannotatorcompon": 199, "externalresourceparam": 199, "serializedannotatorcompon": 199, "graphextract": 199, "xlmrobertafortokenclassif": 199, "bertfortokenclassif": 199, "robertaforzeroshotclassif": 199, "xlnetforsequenceclassif": 199, "robertaforsequenceclassif": 199, "classifierencod": 199, "bertforquestionansw": 199, "tapasforquestionansw": 199, "camembertforsequenceclassif": 199, "robertafortokenclassif": 199, "debertaforsequenceclassif": 199, "distilbertforzeroshotclassif": 199, "camembertforquestionansw": 199, "debertafortokenclassif": 199, "xlnetfortokenclassif": 199, "classifiermetr": 199, "albertforquestionansw": 199, "debertaforquestionansw": 199, "bertforzeroshotclassif": 199, "bertforsequenceclassif": 199, "distilbertforquestionansw": 199, "camembertfortokenclassif": 199, "bartforzeroshotclassif": 199, "xlmrobertaforsequenceclassif": 199, "longformerforsequenceclassif": 199, "distilbertfortokenclassif": 199, "xlmrobertaforzeroshotclassif": 199, "albertforsequenceclassif": 199, "xlmrobertaforquestionansw": 199, "longformerfortokenclassif": 199, "longformerforquestionansw": 199, "albertfortokenclassif": 199, "datasethelp": 199, "taggedsent": 199, "wordpiecetoken": 199, "dependencypars": 199, "embeddingswithsent": 199, "indexedtoken": 199, "tokenizedwithsent": 199, "tabledata": 199, "tokenpars": 199, "conllsent": 199, "tokenizedsent": 199, "sentencewithembed": 199, "labeleddepend": 199, "recursivetokenizermodel": 199, "whisperforctc": 199, "audio": 199, "hubertforctc": 199, "wav2vec2forctc": 199, "whisperpreprocessor": 199, "feature_extractor": 199, "preprocessorattribut": 199, "audioutil": 199, "preprocessor": 199, "perceptronapproachdistribut": 199, "averagedperceptron": 199, "perceptronpredictionutil": 199, "perceptrontrainingutil": 199, "perceptronapproach": 199, "accumul": 199, "perceptronutil": 199, "tokenizermodel": 199, "mariantransform": 199, "gpt2transform": 199, "barttransform": 199, "t5transform": 199, "date2chunk": 199, "regexmatchermodel": 199, "recursivetoken": 199, "lemmat": 199, "lemmatizermodel": 199, "normalizermodel": 199, "convnextforimageclassif": 199, "cv": 199, "imageioutil": 199, "imageschemautil": 199, "imageresizeutil": 199, "hasrescalefactor": 199, "vitforimageclassif": 199, "visionencoderdecoderforimagecapt": 199, "swinforimageclassif": 199, "datematcherutil": 199, "yakeparam": 199, "yakekeywordextract": 199, "regexpatternsread": 199, "patternsread": 199, "ahocorasickautomaton": 199, "entityrulermodel": 199, "regexpatternsreadwrit": 199, "entitypattern": 199, "patternsreadwrit": 199, "entityrulerfeatur": 199, "entityrulerutil": 199, "entityrulerapproach": 199, "pretrainedannot": 199, "token2chunk": 199, "wordsegmenterapproach": 199, "wordsegmentermodel": 199, "tagstyp": 199, "spanbertcorefmodel": 199, "coref": 199, "rawannot": 199, "embeddingsfinish": 199, "hasimagefeatureproperti": 199, "audioassembl": 199, "canbelazi": 199, "paramsandfeatureswrit": 199, "annotationimag": 199, "hasmultipleinputannotationcol": 199, "hasgeneratorproperti": 199, "hasrecursivefit": 199, "hasbatchedannotateaudio": 199, "hasaudiofeatureproperti": 199, "graphfinish": 199, "hasprotectedparam": 199, "hasbatchedannotateimag": 199, "hasfeatur": 199, "hasoutputannotatortyp": 199, "annotationaudio": 199, "iannot": 199, "paramsandfeaturesread": 199, "hasoutputannotationcol": 199, "hasclassifieractivationproperti": 199, "documentsimilarityrankerfinish": 199, "resourcedownload": 199, "repositorymetadata": 199, "resourcemetadata": 199, "s3resourcedownload": 199, "run_convert": 200, "build_py_cod": 200, "build_sc_cod": 200, "convers": [200, 204], "python_code_fail": [200, 206], "scala_gener": [200, 206], "generated_code_work": [200, 206], "generated_code_fail": [200, 206], "bucket": 203, "convert_nlu_component_to_python": 203, "is_component_fin": 203, "is_component_leg": 203, "is_component_med": 203, "is_component_ocr": 203, "is_component_open_sourc": 203, "is_component_pretrain": 203, "nlu_component_to_spark_nlp_cod": 203, "starts_with_fin": 203, "starts_with_leg": 203, "starts_with_med": 203, "to_python": 203, "pipeline_to_convert": 203, "medical_annotators_set": 203, "open_source_annotator_set_fin": 203, "focus": 204, "adapt": 204, "anonymize_script": 204, "break_line_after_backslash": 204, "convert_class_nam": 204, "convert_python_dict_to_scala_script": 204, "find_key_valu": 204, "get_data_dict": 204, "get_import_sect": 204, "data_dict": 204, "prepare_scala_cod": 204, "is_spark_initi": 204, "remove_blank_lin": 204, "blank": 204, "clean": 204, "restore_sensitive_valu": 204, "anonymized_script": 204, "sensitive_valu": 204, "run_transpil": 204, "markdown": [205, 206], "get_python_code_from_md": 205, "md_file_path": [205, 206], "get_scala_code_from_md": 205, "load_file_as_dict": 205, "file_path1": 205, "file_path2": 205, "process_python_cod": 205, "python_cod": 205, "update_md_fil": 205, "file_path": [205, 211, 218], "update_md_file_for_working_scala_cod": 205, "replacement_str": 205, "git": 206, "apply_method_to_all_md_fil": 206, "directory_path": 206, "upload_scala_code_in_git": 206, "upload_scala_code_in_md_fil": 206, "md_file": 206, "results_list": 206, "scala_code_work": 206, "updatecachemodel": 207, "cache_fold": 207, "refresh": 207, "model_nam": 207, "start_dat": 207, "end_dat": 207, "get_mt_sampl": 208, "medical_speci": 208, "transcrib": 208, "mtsampl": 208, "allergy_immunologi": 208, "autopsi": 208, "bariatr": 208, "cardiovascular_pulmonari": 208, "chiropract": 208, "consult_history_and_phi": 208, "cosmetic_plastic_surgeri": 208, "dentistri": 208, "dermatologi": 208, "diets_and_nutrit": 208, "discharge_summari": 208, "emergency_room_report": 208, "endocrinologi": 208, "ent_otolaryngologi": 208, "gastroenterologi": 208, "general_medicin": 208, "hematology_oncologi": 208, "hospice_palliative_car": 208, "im": 208, "lab_medicine_pathologi": 208, "letter": 208, "nephrologi": 208, "neurologi": 208, "neurosurgeri": 208, "obstetrics_gynecologi": 208, "office_not": 208, "ophthalmologi": 208, "orthoped": 208, "pain_manag": 208, "pediatrics_neonat": 208, "physical_medicine_rehab": 208, "podiatri": 208, "psychiatry_psychologi": 208, "radiologi": 208, "rheumatologi": 208, "sleep_medicin": 208, "soap_chart_progress_not": 208, "speech_languag": 208, "surgeri": 208, "urologi": 208, "scrap": 208, "get_doc_assembl": 209, "get_empty_df": 209, "get_ner_df": 209, "get_ner_sentence_bord": 209, "border": 209, "get_nlp_pos_pipelin": 209, "get_nlp_token_pipelin": 209, "get_po": 209, "get_regex_token": 209, "get_regular_token": 209, "get_rel_df": 209, "get_sent_detector": 209, "get_sentence_pipelin": 209, "get_single_task_conl": 209, "pos_pipelin": 209, "token_pipelin": 209, "style": [209, 212, 218, 219], "enumer": 209, "get_token_df": 209, "_type_": 209, "read_conl": 209, "filepath": 209, "strip_json_ent": 209, "exported_json": 209, "strip": 209, "empty_df": 209, "nlp_pos_pipelin": 209, "nlp_token_pipelin": 209, "pos_pipeline_initi": 209, "regular_token": 209, "token_pipeline_initi": 209, "dict_to_annotation_convert": 211, "document_col_nam": 211, "chunk_col_nam": 211, "adjust_end": 211, "respons": 211, "actual": 211, "abl": 211, "therefor": 211, "document_metadata": 211, "reserv": 211, "list_of_dict": 211, "georg": 211, "born": 211, "1995": 211, "pleasur": 211, "llm_output": 211, "46": 211, "83": 211, "96": 211, "doc_id": [211, 223], "file1": 211, "bush": 211, "nativ": 211, "reach": 211, "me": 211, "76": 211, "file2": 211, "result_df": 211, "structured_deidentifi": 211, "columns_dict": 211, "ref_sourc": 211, "columns_se": 211, "date_format": 211, "is_module_import": 212, "lib": 212, "raise_except": 212, "pip_nam": 212, "message_typ": 212, "cannot": 212, "instruct": 212, "parse_str_to_dict": 214, "dict_str": 214, "row_separ": 214, "key_value_separ": 214, "is_value_list": 214, "value_separ": 214, "deseri": 214, "internalannotatortyp": 215, "selector": 215, "ocr_entity_processor": 218, "bounding_box": 218, "save_fold": 218, "label_color": 218, "box_color": 218, "color_chart_path": 218, "color_chart": 218, "png": 218, "chunk_col": 218, "black_list": 218, "display_result": 218, "pageiteratorlevel": 218, "pagesegmod": 218, "pagesegmentationmod": 218, "sparse_text_osd": 218, "outline_color": [218, 219], "outline_width": [218, 219], "text_band": [218, 219], "text_typ": 218, "pdf": [218, 223], "ocr": [218, 219], "paint": 218, "highlight": [218, 220], "colored_box": 218, "draw": 218, "band": 218, "color": [218, 219], "box": [218, 223], "around": 218, "rgb": 218, "chart": 218, "outlin": 218, "entitii": 218, "width": 218, "writ": 218, "aqua": [218, 219], "aquamarin": [218, 219], "blanchedalmond": [218, 219], "blue": [218, 219], "blueviolet": [218, 219], "burlywood": [218, 219], "draw_boxes_on_image_handwritten_region": 219, "image_data": 219, "get_handwritten_region": 219, "colors_rgb": 219, "255": 219, "127": 219, "212": 219, "235": 219, "205": 219, "138": 219, "226": 219, "165": 219, "label2color": 219, "label2rgb": 219, "pretrained_model": 219, "image_handwritten_detector_gsa0803": 219, "hierarch": 220, "10th": 220, "revis": 220, "hcc_from_icd": 220, "hcc_label": 220, "hcc_list": 220, "diff_between_hcc": 220, "before_hcc_list": 220, "after_hcc_list": 220, "evolv": 220, "cc": 220, "escal": 220, "aggregate_ent": 222, "calc_metr": 222, "tp": 222, "percent": 222, "fb1": 222, "decim": 222, "count_chunk": 222, "correct_chunk": 222, "true_chunk": 222, "pred_chunk": 222, "correct_count": 222, "true_count": 222, "pred_count": 222, "counter": 222, "correctli": 222, "get_result": 222, "prec": 222, "rec": 222, "is_chunk_end": 222, "prev_tag": 222, "previou": 222, "contradict": 222, "is_chunk_start": 222, "split_tag": 222, "chunk_tag": 222, "chunk_typ": 222, "convert_to_conl": 223, "get_token": 223, "hocr": 223, "pdfs_to_visualner_to_conl": 223, "pdf_dir": 223, "pdf_visual_pipeline_model": 223, "output_fil": 223, "text_ner_dataset": 223, "visualner_annotations_to_conl": 223, "visual_json_input_fil": 223, "conll_output_fil": 223, "write_conl": 223, "conll_lin": 223, "filenam": 223, "overview": 224}, "objects": {"": [[155, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[8, 0, 0, "-", "alab"], [67, 0, 0, "-", "annotator"], [155, 4, 1, "", "annotators"], [114, 0, 0, "-", "base"], [118, 0, 0, "-", "common"], [119, 0, 0, "-", "compatibility"], [120, 0, 0, "-", "custom_transformer"], [121, 0, 0, "-", "deidentification_module"], [122, 0, 0, "-", "eval"], [137, 0, 0, "-", "finance"], [154, 0, 0, "-", "functions"], [155, 5, 1, "", "get_credentials"], [156, 0, 0, "-", "internal"], [171, 0, 0, "-", "legal"], [155, 5, 1, "", "library_settings"], [188, 0, 0, "-", "llm"], [155, 5, 1, "", "load_license_validator"], [190, 0, 0, "-", "modelTracer"], [191, 0, 0, "-", "pipeline_output_parser"], [192, 0, 0, "-", "pipeline_tracer"], [193, 0, 0, "-", "pretrained"], [155, 5, 1, "", "pub_version"], [155, 4, 1, "", "size_regex"], [155, 5, 1, "", "start"], [194, 0, 0, "-", "structured_deidentification"], [195, 0, 0, "-", "text_to_documents_columns"], [196, 0, 0, "-", "training"], [197, 0, 0, "-", "training_log_parser"], [155, 4, 1, "", "transformer_seq_classification"], [202, 0, 0, "-", "transpiler"], [207, 0, 0, "-", "updateModels"], [208, 0, 0, "-", "util"], [213, 0, 0, "-", "utils"], [155, 5, 1, "", "version"], [155, 4, 1, "", "version_regex"]], "sparknlp_jsl.alab": [[8, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[8, 2, 1, "", "base_url"], [8, 2, 1, "", "client_id"], [8, 2, 1, "", "client_secret"], [8, 2, 1, "", "cookies"], [8, 3, 1, "", "create_project"], [8, 3, 1, "", "delete_project"], [8, 3, 1, "", "delete_tasks"], [8, 3, 1, "", "generate_preannotations"], [8, 3, 1, "", "get_IAA_metrics"], [8, 3, 1, "", "get_all_projects"], [8, 3, 1, "", "get_annotations"], [8, 3, 1, "", "get_assertion_data"], [8, 3, 1, "", "get_classification_data"], [8, 3, 1, "", "get_conll_data"], [8, 3, 1, "", "get_conll_data_from_visualner"], [8, 3, 1, "", "get_project_config"], [8, 3, 1, "", "get_relation_extraction_data"], [8, 2, 1, "", "http_success_codes"], [8, 2, 1, "", "password"], [8, 3, 1, "", "review_annotations"], [8, 3, 1, "", "set_credentials"], [8, 3, 1, "", "set_project_config"], [8, 3, 1, "", "upload_preannotations"], [8, 3, 1, "", "upload_tasks"], [8, 2, 1, "", "username"]], "sparknlp_jsl.annotator": [[9, 0, 0, "-", "annotation_merger"], [67, 4, 1, "", "assertion"], [16, 0, 0, "-", "assertion"], [17, 0, 0, "-", "chunk2_token"], [67, 4, 1, "", "chunker"], [26, 0, 0, "-", "chunker"], [67, 4, 1, "", "classification"], [34, 0, 0, "-", "classification"], [67, 4, 1, "", "context"], [40, 0, 0, "-", "context"], [67, 4, 1, "", "deid"], [44, 0, 0, "-", "deid"], [67, 4, 1, "", "disambiguation"], [49, 0, 0, "-", "disambiguation"], [51, 0, 0, "-", "doc2_chunk_internal"], [52, 0, 0, "-", "document_filterer_by_classifier"], [53, 0, 0, "-", "document_filterer_by_ner"], [67, 4, 1, "", "embeddings"], [58, 0, 0, "-", "embeddings"], [60, 0, 0, "-", "er"], [61, 0, 0, "-", "feature_assembler"], [62, 0, 0, "-", "filtering_params"], [63, 0, 0, "-", "flattener"], [67, 4, 1, "", "generic_classifier"], [65, 0, 0, "-", "generic_classifier"], [66, 0, 0, "-", "handle_exception_params"], [67, 4, 1, "", "keyword"], [68, 0, 0, "-", "matcher"], [71, 0, 0, "-", "merge"], [72, 0, 0, "-", "multi_chunk2_doc"], [73, 0, 0, "-", "ner"], [82, 0, 0, "-", "normalizer"], [84, 0, 0, "-", "qa"], [88, 0, 0, "-", "rag"], [90, 0, 0, "-", "re"], [95, 0, 0, "-", "regex"], [97, 0, 0, "-", "resolution"], [100, 0, 0, "-", "resolution2_chunk"], [101, 0, 0, "-", "router"], [102, 0, 0, "-", "seq2seq"], [107, 0, 0, "-", "source_tracking_metadata_params"], [108, 0, 0, "-", "splitter"], [110, 0, 0, "-", "tf_graph_builder"], [111, 0, 0, "-", "white_black_list_params"], [112, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_merger": [[9, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[9, 3, 1, "", "clear"], [9, 3, 1, "", "copy"], [9, 3, 1, "", "explainParam"], [9, 3, 1, "", "explainParams"], [9, 3, 1, "", "extractParamMap"], [9, 3, 1, "", "getInputCols"], [9, 3, 1, "", "getLazyAnnotator"], [9, 3, 1, "", "getOrDefault"], [9, 3, 1, "", "getOutputCol"], [9, 3, 1, "", "getParam"], [9, 3, 1, "", "getParamValue"], [9, 2, 1, "", "getter_attrs"], [9, 3, 1, "", "hasDefault"], [9, 3, 1, "", "hasParam"], [9, 2, 1, "", "inputAnnotatorTypes"], [9, 2, 1, "", "inputCols"], [9, 3, 1, "", "inputColsValidation"], [9, 2, 1, "", "inputType"], [9, 3, 1, "", "isDefined"], [9, 3, 1, "", "isSet"], [9, 2, 1, "", "lazyAnnotator"], [9, 3, 1, "", "load"], [9, 2, 1, "", "name"], [9, 2, 1, "", "optionalInputAnnotatorTypes"], [9, 2, 1, "", "outputAnnotatorType"], [9, 2, 1, "", "outputCol"], [9, 3, 1, "", "read"], [9, 3, 1, "", "save"], [9, 3, 1, "", "set"], [9, 3, 1, "", "setForceInputTypeValidation"], [9, 3, 1, "", "setInputCols"], [9, 3, 1, "", "setInputType"], [9, 3, 1, "", "setLazyAnnotator"], [9, 3, 1, "", "setOutputCol"], [9, 3, 1, "", "setParamValue"], [9, 3, 1, "", "setParams"], [9, 2, 1, "", "skipLPInputColsValidation"], [9, 3, 1, "", "transform"], [9, 2, 1, "", "uid"], [9, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion": [[10, 0, 0, "-", "assertionDL"], [11, 0, 0, "-", "assertion_chunk_converter"], [12, 0, 0, "-", "assertion_dl_reg"], [13, 0, 0, "-", "assertion_merger"], [14, 0, 0, "-", "contextual_assertion"], [15, 0, 0, "-", "fewshot_assertion_sentence_converter"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[10, 1, 1, "", "AssertionDLApproach"], [10, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[10, 2, 1, "", "batchSize"], [10, 3, 1, "", "clear"], [10, 2, 1, "", "configProtoBytes"], [10, 3, 1, "", "copy"], [10, 2, 1, "", "datasetInfo"], [10, 2, 1, "", "doExceptionHandling"], [10, 2, 1, "", "dropout"], [10, 2, 1, "", "enableOutputLogs"], [10, 2, 1, "", "endCol"], [10, 2, 1, "", "engine"], [10, 2, 1, "", "epochs"], [10, 3, 1, "", "explainParam"], [10, 3, 1, "", "explainParams"], [10, 3, 1, "", "extractParamMap"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "fitMultiple"], [10, 3, 1, "", "getEngine"], [10, 3, 1, "", "getInputCols"], [10, 3, 1, "", "getLazyAnnotator"], [10, 3, 1, "", "getOrDefault"], [10, 3, 1, "", "getOutputCol"], [10, 3, 1, "", "getParam"], [10, 3, 1, "", "getParamValue"], [10, 2, 1, "", "getter_attrs"], [10, 2, 1, "", "graphFile"], [10, 2, 1, "", "graphFolder"], [10, 3, 1, "", "hasDefault"], [10, 3, 1, "", "hasParam"], [10, 2, 1, "", "includeConfidence"], [10, 2, 1, "", "inputAnnotatorTypes"], [10, 2, 1, "", "inputCols"], [10, 3, 1, "", "inputColsValidation"], [10, 3, 1, "", "isDefined"], [10, 3, 1, "", "isSet"], [10, 2, 1, "", "label"], [10, 2, 1, "", "lazyAnnotator"], [10, 2, 1, "", "learningRate"], [10, 3, 1, "", "load"], [10, 2, 1, "", "maxSentLen"], [10, 2, 1, "", "optionalInputAnnotatorTypes"], [10, 2, 1, "", "outputAnnotatorType"], [10, 2, 1, "", "outputCol"], [10, 2, 1, "", "outputLogsPath"], [10, 3, 1, "", "read"], [10, 3, 1, "", "save"], [10, 2, 1, "", "scopeWindow"], [10, 3, 1, "", "set"], [10, 3, 1, "", "setBatchSize"], [10, 3, 1, "", "setConfigProtoBytes"], [10, 3, 1, "", "setDatasetInfo"], [10, 3, 1, "", "setDoExceptionHandling"], [10, 3, 1, "", "setDropout"], [10, 3, 1, "", "setEnableOutputLogs"], [10, 3, 1, "", "setEndCol"], [10, 3, 1, "", "setEpochs"], [10, 3, 1, "", "setForceInputTypeValidation"], [10, 3, 1, "", "setGraphFile"], [10, 3, 1, "", "setGraphFolder"], [10, 3, 1, "", "setIncludeConfidence"], [10, 3, 1, "", "setInputCols"], [10, 3, 1, "", "setLabelCol"], [10, 3, 1, "", "setLazyAnnotator"], [10, 3, 1, "", "setLearningRate"], [10, 3, 1, "", "setMaxSentLen"], [10, 3, 1, "", "setOutputCol"], [10, 3, 1, "", "setOutputLogsPath"], [10, 3, 1, "", "setParamValue"], [10, 3, 1, "", "setScopeWindow"], [10, 3, 1, "", "setStartCol"], [10, 3, 1, "", "setTestDataset"], [10, 3, 1, "", "setValidationSplit"], [10, 3, 1, "", "setVerbose"], [10, 2, 1, "", "skipLPInputColsValidation"], [10, 2, 1, "", "startCol"], [10, 2, 1, "", "testDataset"], [10, 2, 1, "", "uid"], [10, 2, 1, "", "validationSplit"], [10, 2, 1, "", "verbose"], [10, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[10, 2, 1, "", "classes"], [10, 3, 1, "", "clear"], [10, 2, 1, "", "configProtoBytes"], [10, 3, 1, "", "copy"], [10, 2, 1, "", "datasetInfo"], [10, 2, 1, "", "entityAssertionCaseSensitive"], [10, 3, 1, "", "explainParam"], [10, 3, 1, "", "explainParams"], [10, 3, 1, "", "extractParamMap"], [10, 3, 1, "", "getEntityAssertion"], [10, 3, 1, "", "getInputCols"], [10, 3, 1, "", "getLazyAnnotator"], [10, 3, 1, "", "getOrDefault"], [10, 3, 1, "", "getOutputCol"], [10, 3, 1, "", "getParam"], [10, 3, 1, "", "getParamValue"], [10, 3, 1, "", "getReplaceLabels"], [10, 3, 1, "", "getStorageRef"], [10, 2, 1, "", "getter_attrs"], [10, 3, 1, "", "hasDefault"], [10, 3, 1, "", "hasParam"], [10, 2, 1, "", "includeConfidence"], [10, 2, 1, "", "inputAnnotatorTypes"], [10, 2, 1, "", "inputCols"], [10, 3, 1, "", "inputColsValidation"], [10, 3, 1, "", "isDefined"], [10, 3, 1, "", "isSet"], [10, 2, 1, "", "lazyAnnotator"], [10, 3, 1, "", "load"], [10, 2, 1, "", "maxSentLen"], [10, 2, 1, "", "name"], [10, 2, 1, "", "optionalInputAnnotatorTypes"], [10, 2, 1, "", "outputAnnotatorType"], [10, 2, 1, "", "outputCol"], [10, 3, 1, "", "pretrained"], [10, 3, 1, "", "read"], [10, 3, 1, "", "save"], [10, 2, 1, "", "scopeWindow"], [10, 3, 1, "", "set"], [10, 3, 1, "", "setConfigProtoBytes"], [10, 3, 1, "", "setDatasetInfo"], [10, 3, 1, "", "setEntityAssertion"], [10, 3, 1, "", "setEntityAssertionCaseSensitive"], [10, 3, 1, "", "setForceInputTypeValidation"], [10, 3, 1, "", "setIncludeConfidence"], [10, 3, 1, "", "setInputCols"], [10, 3, 1, "", "setLazyAnnotator"], [10, 3, 1, "", "setOutputCol"], [10, 3, 1, "", "setParamValue"], [10, 3, 1, "", "setParams"], [10, 3, 1, "", "setReplaceLabels"], [10, 3, 1, "", "setScopeWindow"], [10, 3, 1, "", "setStorageRef"], [10, 2, 1, "", "skipLPInputColsValidation"], [10, 2, 1, "", "storageRef"], [10, 2, 1, "", "targetNerLabels"], [10, 3, 1, "", "transform"], [10, 2, 1, "", "uid"], [10, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[11, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[11, 2, 1, "", "chunkBeginCol"], [11, 2, 1, "", "chunkEndCol"], [11, 2, 1, "", "chunkTextCol"], [11, 3, 1, "", "clear"], [11, 3, 1, "", "copy"], [11, 3, 1, "", "explainParam"], [11, 3, 1, "", "explainParams"], [11, 3, 1, "", "extractParamMap"], [11, 3, 1, "", "getOrDefault"], [11, 3, 1, "", "getParam"], [11, 3, 1, "", "getParamValue"], [11, 2, 1, "", "getter_attrs"], [11, 3, 1, "", "hasDefault"], [11, 3, 1, "", "hasParam"], [11, 2, 1, "", "inputAnnotatorTypes"], [11, 2, 1, "", "inputCols"], [11, 3, 1, "", "isDefined"], [11, 3, 1, "", "isSet"], [11, 2, 1, "", "kwargs"], [11, 3, 1, "", "load"], [11, 2, 1, "", "name"], [11, 2, 1, "", "outputAnnotatorType"], [11, 2, 1, "", "outputCol"], [11, 2, 1, "", "outputTokenBeginCol"], [11, 2, 1, "", "outputTokenEndCol"], [11, 3, 1, "", "read"], [11, 3, 1, "", "save"], [11, 3, 1, "", "set"], [11, 3, 1, "", "setChunkBeginCol"], [11, 3, 1, "", "setChunkEndCol"], [11, 3, 1, "", "setChunkTextCol"], [11, 3, 1, "", "setInputCols"], [11, 3, 1, "", "setMetadataFields"], [11, 3, 1, "", "setOutputCol"], [11, 3, 1, "", "setOutputTokenBeginCol"], [11, 3, 1, "", "setOutputTokenEndCol"], [11, 3, 1, "", "setParamValue"], [11, 3, 1, "", "setParams"], [11, 3, 1, "", "transform"], [11, 2, 1, "", "uid"], [11, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[12, 1, 1, "", "AssertionLogRegApproach"], [12, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[12, 2, 1, "", "afterParam"], [12, 2, 1, "", "beforeParam"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "copy"], [12, 2, 1, "", "eNetParam"], [12, 2, 1, "", "endCol"], [12, 3, 1, "", "explainParam"], [12, 3, 1, "", "explainParams"], [12, 3, 1, "", "extractParamMap"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "fitMultiple"], [12, 3, 1, "", "getInputCols"], [12, 3, 1, "", "getLazyAnnotator"], [12, 3, 1, "", "getOrDefault"], [12, 3, 1, "", "getOutputCol"], [12, 3, 1, "", "getParam"], [12, 3, 1, "", "getParamValue"], [12, 2, 1, "", "getter_attrs"], [12, 3, 1, "", "hasDefault"], [12, 3, 1, "", "hasParam"], [12, 2, 1, "", "inputAnnotatorTypes"], [12, 2, 1, "", "inputCols"], [12, 3, 1, "", "inputColsValidation"], [12, 3, 1, "", "isDefined"], [12, 3, 1, "", "isSet"], [12, 2, 1, "", "label"], [12, 2, 1, "", "lazyAnnotator"], [12, 3, 1, "", "load"], [12, 2, 1, "", "maxIter"], [12, 2, 1, "", "nerCol"], [12, 2, 1, "", "optionalInputAnnotatorTypes"], [12, 2, 1, "", "outputAnnotatorType"], [12, 2, 1, "", "outputCol"], [12, 3, 1, "", "read"], [12, 2, 1, "", "regParam"], [12, 3, 1, "", "save"], [12, 3, 1, "", "set"], [12, 3, 1, "", "setAfter"], [12, 3, 1, "", "setBefore"], [12, 3, 1, "", "setEndCol"], [12, 3, 1, "", "setEnet"], [12, 3, 1, "", "setForceInputTypeValidation"], [12, 3, 1, "", "setInputCols"], [12, 3, 1, "", "setLabelCol"], [12, 3, 1, "", "setLazyAnnotator"], [12, 3, 1, "", "setMaxIter"], [12, 3, 1, "", "setNerCol"], [12, 3, 1, "", "setOutputCol"], [12, 3, 1, "", "setParamValue"], [12, 3, 1, "", "setReg"], [12, 3, 1, "", "setStartCol"], [12, 3, 1, "", "setTargetNerLabels"], [12, 2, 1, "", "skipLPInputColsValidation"], [12, 2, 1, "", "startCol"], [12, 2, 1, "", "targetNerLabels"], [12, 2, 1, "", "uid"], [12, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[12, 2, 1, "", "afterParam"], [12, 2, 1, "", "beforeParam"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "copy"], [12, 2, 1, "", "endCol"], [12, 3, 1, "", "explainParam"], [12, 3, 1, "", "explainParams"], [12, 3, 1, "", "extractParamMap"], [12, 3, 1, "", "getInputCols"], [12, 3, 1, "", "getLazyAnnotator"], [12, 3, 1, "", "getOrDefault"], [12, 3, 1, "", "getOutputCol"], [12, 3, 1, "", "getParam"], [12, 3, 1, "", "getParamValue"], [12, 3, 1, "", "getStorageRef"], [12, 2, 1, "", "getter_attrs"], [12, 3, 1, "", "hasDefault"], [12, 3, 1, "", "hasParam"], [12, 2, 1, "", "inputAnnotatorTypes"], [12, 2, 1, "", "inputCols"], [12, 3, 1, "", "inputColsValidation"], [12, 3, 1, "", "isDefined"], [12, 3, 1, "", "isSet"], [12, 2, 1, "", "lazyAnnotator"], [12, 3, 1, "", "load"], [12, 2, 1, "", "name"], [12, 2, 1, "", "nerCol"], [12, 2, 1, "", "optionalInputAnnotatorTypes"], [12, 2, 1, "", "outputAnnotatorType"], [12, 2, 1, "", "outputCol"], [12, 3, 1, "", "pretrained"], [12, 3, 1, "", "read"], [12, 3, 1, "", "save"], [12, 3, 1, "", "set"], [12, 3, 1, "", "setForceInputTypeValidation"], [12, 3, 1, "", "setInputCols"], [12, 3, 1, "", "setLazyAnnotator"], [12, 3, 1, "", "setOutputCol"], [12, 3, 1, "", "setParamValue"], [12, 3, 1, "", "setParams"], [12, 3, 1, "", "setStorageRef"], [12, 2, 1, "", "skipLPInputColsValidation"], [12, 2, 1, "", "startCol"], [12, 2, 1, "", "storageRef"], [12, 2, 1, "", "targetNerLabels"], [12, 3, 1, "", "transform"], [12, 2, 1, "", "uid"], [12, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[13, 1, 1, "", "AssertionMerger"]], "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger": [[13, 2, 1, "", "applyFilterBeforeMerge"], [13, 2, 1, "", "assertionSourcePrecedence"], [13, 2, 1, "", "blackList"], [13, 2, 1, "", "caseSensitive"], [13, 3, 1, "", "clear"], [13, 3, 1, "", "copy"], [13, 2, 1, "", "defaultConfidence"], [13, 3, 1, "", "explainParam"], [13, 3, 1, "", "explainParams"], [13, 3, 1, "", "extractParamMap"], [13, 3, 1, "", "getInputCols"], [13, 3, 1, "", "getLazyAnnotator"], [13, 3, 1, "", "getOrDefault"], [13, 3, 1, "", "getOutputCol"], [13, 3, 1, "", "getParam"], [13, 3, 1, "", "getParamValue"], [13, 2, 1, "", "getter_attrs"], [13, 3, 1, "", "hasDefault"], [13, 3, 1, "", "hasParam"], [13, 2, 1, "", "inputAnnotatorTypes"], [13, 2, 1, "", "inputCols"], [13, 3, 1, "", "inputColsValidation"], [13, 3, 1, "", "isDefined"], [13, 3, 1, "", "isSet"], [13, 2, 1, "", "lazyAnnotator"], [13, 3, 1, "", "load"], [13, 2, 1, "", "mergeOverlapping"], [13, 2, 1, "", "name"], [13, 2, 1, "", "optionalInputAnnotatorTypes"], [13, 2, 1, "", "orderingFeatures"], [13, 2, 1, "", "outputAnnotatorType"], [13, 2, 1, "", "outputCol"], [13, 3, 1, "", "read"], [13, 3, 1, "", "save"], [13, 2, 1, "", "selectionStrategy"], [13, 3, 1, "", "set"], [13, 3, 1, "", "setApplyFilterBeforeMerge"], [13, 3, 1, "", "setAssertionSourcePrecedence"], [13, 3, 1, "", "setAssertionsConfidence"], [13, 3, 1, "", "setBlackList"], [13, 3, 1, "", "setCaseSensitive"], [13, 3, 1, "", "setDefaultConfidence"], [13, 3, 1, "", "setDenyList"], [13, 3, 1, "", "setForceInputTypeValidation"], [13, 3, 1, "", "setInputCols"], [13, 3, 1, "", "setLazyAnnotator"], [13, 3, 1, "", "setMergeOverlapping"], [13, 3, 1, "", "setOrderingFeatures"], [13, 3, 1, "", "setOutputCol"], [13, 3, 1, "", "setParamValue"], [13, 3, 1, "", "setParams"], [13, 3, 1, "", "setSelectionStrategy"], [13, 3, 1, "", "setSortByBegin"], [13, 3, 1, "", "setWhiteList"], [13, 2, 1, "", "skipLPInputColsValidation"], [13, 2, 1, "", "sortByBegin"], [13, 3, 1, "", "transform"], [13, 2, 1, "", "uid"], [13, 2, 1, "", "whiteList"], [13, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[14, 1, 1, "", "ContextualAssertion"]], "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion": [[14, 3, 1, "", "addPrefixKeywords"], [14, 3, 1, "", "addSuffixKeywords"], [14, 2, 1, "", "assertion"], [14, 2, 1, "", "caseSensitive"], [14, 3, 1, "", "clear"], [14, 2, 1, "", "confidenceCalculationDirection"], [14, 3, 1, "", "copy"], [14, 2, 1, "", "doExceptionHandling"], [14, 3, 1, "", "explainParam"], [14, 3, 1, "", "explainParams"], [14, 3, 1, "", "extractParamMap"], [14, 3, 1, "", "getInputCols"], [14, 3, 1, "", "getLazyAnnotator"], [14, 3, 1, "", "getOrDefault"], [14, 3, 1, "", "getOutputCol"], [14, 3, 1, "", "getParam"], [14, 3, 1, "", "getParamValue"], [14, 2, 1, "", "getter_attrs"], [14, 3, 1, "", "hasDefault"], [14, 3, 1, "", "hasParam"], [14, 2, 1, "", "includeChunkToScope"], [14, 2, 1, "", "inputAnnotatorTypes"], [14, 2, 1, "", "inputCols"], [14, 3, 1, "", "inputColsValidation"], [14, 3, 1, "", "isDefined"], [14, 3, 1, "", "isSet"], [14, 2, 1, "", "lazyAnnotator"], [14, 3, 1, "", "load"], [14, 2, 1, "", "name"], [14, 2, 1, "", "optionalInputAnnotatorTypes"], [14, 2, 1, "", "outputAnnotatorType"], [14, 2, 1, "", "outputCol"], [14, 2, 1, "", "prefixAndSuffixMatch"], [14, 3, 1, "", "pretrained"], [14, 3, 1, "", "read"], [14, 3, 1, "", "save"], [14, 2, 1, "", "scopeWindow"], [14, 2, 1, "", "scopeWindowDelimiters"], [14, 3, 1, "", "set"], [14, 3, 1, "", "setAssertion"], [14, 3, 1, "", "setCaseSensitive"], [14, 3, 1, "", "setConfidenceCalculationDirection"], [14, 3, 1, "", "setDoExceptionHandling"], [14, 3, 1, "", "setExceptionKeywords"], [14, 3, 1, "", "setExceptionRegexPatterns"], [14, 3, 1, "", "setForceInputTypeValidation"], [14, 3, 1, "", "setIncludeChunkToScope"], [14, 3, 1, "", "setInputCols"], [14, 3, 1, "", "setLazyAnnotator"], [14, 3, 1, "", "setOutputCol"], [14, 3, 1, "", "setParamValue"], [14, 3, 1, "", "setParams"], [14, 3, 1, "", "setPrefixAndSuffixMatch"], [14, 3, 1, "", "setPrefixKeywords"], [14, 3, 1, "", "setPrefixRegexPatterns"], [14, 3, 1, "", "setScopeWindow"], [14, 3, 1, "", "setScopeWindowDelimiters"], [14, 3, 1, "", "setSuffixKeywords"], [14, 3, 1, "", "setSuffixRegexPatterns"], [14, 2, 1, "", "skipLPInputColsValidation"], [14, 3, 1, "", "transform"], [14, 2, 1, "", "uid"], [14, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[15, 1, 1, "", "FewShotAssertionSentenceConverter"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter": [[15, 3, 1, "", "clear"], [15, 3, 1, "", "copy"], [15, 3, 1, "", "explainParam"], [15, 3, 1, "", "explainParams"], [15, 3, 1, "", "extractParamMap"], [15, 3, 1, "", "getOrDefault"], [15, 3, 1, "", "getParam"], [15, 3, 1, "", "getParamValue"], [15, 2, 1, "", "getter_attrs"], [15, 3, 1, "", "hasDefault"], [15, 3, 1, "", "hasParam"], [15, 2, 1, "", "inputAnnotatorTypes"], [15, 2, 1, "", "inputCols"], [15, 3, 1, "", "isDefined"], [15, 3, 1, "", "isSet"], [15, 2, 1, "", "kwargs"], [15, 3, 1, "", "load"], [15, 2, 1, "", "name"], [15, 2, 1, "", "outputAnnotatorType"], [15, 2, 1, "", "outputCol"], [15, 3, 1, "", "read"], [15, 3, 1, "", "save"], [15, 2, 1, "", "scopeWindow"], [15, 3, 1, "", "set"], [15, 3, 1, "", "setParamValue"], [15, 3, 1, "", "setParams"], [15, 3, 1, "", "setScopeWindow"], [15, 3, 1, "", "transform"], [15, 2, 1, "", "uid"], [15, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunk2_token": [[17, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[17, 3, 1, "", "clear"], [17, 3, 1, "", "copy"], [17, 3, 1, "", "explainParam"], [17, 3, 1, "", "explainParams"], [17, 3, 1, "", "extractParamMap"], [17, 3, 1, "", "getInputCols"], [17, 3, 1, "", "getLazyAnnotator"], [17, 3, 1, "", "getOrDefault"], [17, 3, 1, "", "getOutputCol"], [17, 3, 1, "", "getParam"], [17, 3, 1, "", "getParamValue"], [17, 2, 1, "", "getter_attrs"], [17, 3, 1, "", "hasDefault"], [17, 3, 1, "", "hasParam"], [17, 2, 1, "", "inputAnnotatorTypes"], [17, 2, 1, "", "inputCols"], [17, 3, 1, "", "inputColsValidation"], [17, 3, 1, "", "isDefined"], [17, 3, 1, "", "isSet"], [17, 2, 1, "", "lazyAnnotator"], [17, 3, 1, "", "load"], [17, 2, 1, "", "name"], [17, 2, 1, "", "optionalInputAnnotatorTypes"], [17, 2, 1, "", "outputAnnotatorType"], [17, 2, 1, "", "outputCol"], [17, 3, 1, "", "read"], [17, 3, 1, "", "save"], [17, 3, 1, "", "set"], [17, 3, 1, "", "setForceInputTypeValidation"], [17, 3, 1, "", "setInputCols"], [17, 3, 1, "", "setLazyAnnotator"], [17, 3, 1, "", "setOutputCol"], [17, 3, 1, "", "setParamValue"], [17, 3, 1, "", "setParams"], [17, 2, 1, "", "skipLPInputColsValidation"], [17, 3, 1, "", "transform"], [17, 2, 1, "", "uid"], [17, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker": [[18, 0, 0, "-", "assertion_filterer"], [19, 0, 0, "-", "chunk_converter"], [20, 0, 0, "-", "chunk_key_phrase_extraction"], [21, 0, 0, "-", "chunk_sentence_splitter"], [22, 0, 0, "-", "chunker_filterer"], [23, 0, 0, "-", "chunkmapper"], [24, 0, 0, "-", "chunkmapper_filterer"], [25, 0, 0, "-", "docmapper"], [27, 0, 0, "-", "mapper2_chunk"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[18, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[18, 2, 1, "", "blackList"], [18, 2, 1, "", "caseSensitive"], [18, 3, 1, "", "clear"], [18, 3, 1, "", "copy"], [18, 2, 1, "", "criteria"], [18, 3, 1, "", "explainParam"], [18, 3, 1, "", "explainParams"], [18, 3, 1, "", "extractParamMap"], [18, 2, 1, "", "filterValue"], [18, 3, 1, "", "getInputCols"], [18, 3, 1, "", "getLazyAnnotator"], [18, 3, 1, "", "getOrDefault"], [18, 3, 1, "", "getOutputCol"], [18, 3, 1, "", "getParam"], [18, 3, 1, "", "getParamValue"], [18, 2, 1, "", "getter_attrs"], [18, 3, 1, "", "hasDefault"], [18, 3, 1, "", "hasParam"], [18, 2, 1, "", "inputAnnotatorTypes"], [18, 2, 1, "", "inputCols"], [18, 3, 1, "", "inputColsValidation"], [18, 3, 1, "", "isDefined"], [18, 3, 1, "", "isSet"], [18, 2, 1, "", "lazyAnnotator"], [18, 3, 1, "", "load"], [18, 2, 1, "", "name"], [18, 2, 1, "", "optionalInputAnnotatorTypes"], [18, 2, 1, "", "outputAnnotatorType"], [18, 2, 1, "", "outputCol"], [18, 3, 1, "", "read"], [18, 2, 1, "", "regex"], [18, 3, 1, "", "save"], [18, 3, 1, "", "set"], [18, 3, 1, "", "setBlackList"], [18, 3, 1, "", "setCaseSensitive"], [18, 3, 1, "", "setCriteria"], [18, 3, 1, "", "setDenyList"], [18, 3, 1, "", "setFilterValue"], [18, 3, 1, "", "setForceInputTypeValidation"], [18, 3, 1, "", "setInputCols"], [18, 3, 1, "", "setLazyAnnotator"], [18, 3, 1, "", "setOutputCol"], [18, 3, 1, "", "setParamValue"], [18, 3, 1, "", "setParams"], [18, 3, 1, "", "setRegex"], [18, 3, 1, "", "setWhiteList"], [18, 2, 1, "", "skipLPInputColsValidation"], [18, 3, 1, "", "transform"], [18, 2, 1, "", "uid"], [18, 2, 1, "", "whiteList"], [18, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[19, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[19, 3, 1, "", "clear"], [19, 3, 1, "", "copy"], [19, 3, 1, "", "explainParam"], [19, 3, 1, "", "explainParams"], [19, 3, 1, "", "extractParamMap"], [19, 3, 1, "", "getInputCols"], [19, 3, 1, "", "getLazyAnnotator"], [19, 3, 1, "", "getOrDefault"], [19, 3, 1, "", "getOutputCol"], [19, 3, 1, "", "getParam"], [19, 3, 1, "", "getParamValue"], [19, 2, 1, "", "getter_attrs"], [19, 3, 1, "", "hasDefault"], [19, 3, 1, "", "hasParam"], [19, 2, 1, "", "inputAnnotatorTypes"], [19, 2, 1, "", "inputCols"], [19, 3, 1, "", "inputColsValidation"], [19, 3, 1, "", "isDefined"], [19, 3, 1, "", "isSet"], [19, 2, 1, "", "lazyAnnotator"], [19, 3, 1, "", "load"], [19, 2, 1, "", "name"], [19, 2, 1, "", "optionalInputAnnotatorTypes"], [19, 2, 1, "", "outputAnnotatorType"], [19, 2, 1, "", "outputCol"], [19, 3, 1, "", "read"], [19, 3, 1, "", "save"], [19, 3, 1, "", "set"], [19, 3, 1, "", "setForceInputTypeValidation"], [19, 3, 1, "", "setInputCols"], [19, 3, 1, "", "setLazyAnnotator"], [19, 3, 1, "", "setOutputCol"], [19, 3, 1, "", "setParamValue"], [19, 3, 1, "", "setParams"], [19, 2, 1, "", "skipLPInputColsValidation"], [19, 3, 1, "", "transform"], [19, 2, 1, "", "uid"], [19, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[20, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[20, 2, 1, "", "batchSize"], [20, 2, 1, "", "caseSensitive"], [20, 3, 1, "", "clear"], [20, 2, 1, "", "concatenateSentences"], [20, 2, 1, "", "configProtoBytes"], [20, 3, 1, "", "copy"], [20, 2, 1, "", "dimension"], [20, 2, 1, "", "divergence"], [20, 2, 1, "", "documentLevelProcessing"], [20, 2, 1, "", "dropPunctuation"], [20, 3, 1, "", "explainParam"], [20, 3, 1, "", "explainParams"], [20, 3, 1, "", "extractParamMap"], [20, 3, 1, "", "getBatchSize"], [20, 3, 1, "", "getCaseSensitive"], [20, 3, 1, "", "getDimension"], [20, 3, 1, "", "getInputCols"], [20, 3, 1, "", "getLazyAnnotator"], [20, 3, 1, "", "getOrDefault"], [20, 3, 1, "", "getOutputCol"], [20, 3, 1, "", "getParam"], [20, 3, 1, "", "getParamValue"], [20, 3, 1, "", "getStorageRef"], [20, 2, 1, "", "getter_attrs"], [20, 3, 1, "", "hasDefault"], [20, 3, 1, "", "hasParam"], [20, 2, 1, "", "inputAnnotatorTypes"], [20, 2, 1, "", "inputCols"], [20, 3, 1, "", "inputColsValidation"], [20, 3, 1, "", "isDefined"], [20, 2, 1, "", "isLong"], [20, 3, 1, "", "isSet"], [20, 2, 1, "", "lazyAnnotator"], [20, 3, 1, "", "load"], [20, 3, 1, "", "loadSavedModel"], [20, 2, 1, "", "name"], [20, 2, 1, "", "optionalInputAnnotatorTypes"], [20, 2, 1, "", "outputAnnotatorType"], [20, 2, 1, "", "outputCol"], [20, 3, 1, "", "pretrained"], [20, 3, 1, "", "read"], [20, 3, 1, "", "save"], [20, 2, 1, "", "selectMostDifferent"], [20, 3, 1, "", "set"], [20, 3, 1, "", "setBatchSize"], [20, 3, 1, "", "setCaseSensitive"], [20, 3, 1, "", "setConcatenateSentences"], [20, 3, 1, "", "setConfigProtoBytes"], [20, 3, 1, "", "setDimension"], [20, 3, 1, "", "setDivergence"], [20, 3, 1, "", "setDocumentLevelProcessing"], [20, 3, 1, "", "setDropPunctuation"], [20, 3, 1, "", "setInputCols"], [20, 3, 1, "", "setIsLong"], [20, 3, 1, "", "setLazyAnnotator"], [20, 3, 1, "", "setOutputCol"], [20, 3, 1, "", "setParamValue"], [20, 3, 1, "", "setParams"], [20, 3, 1, "", "setSelectMostDifferent"], [20, 3, 1, "", "setStorageRef"], [20, 3, 1, "", "setTopN"], [20, 2, 1, "", "storageRef"], [20, 2, 1, "", "topN"], [20, 3, 1, "", "transform"], [20, 2, 1, "", "uid"], [20, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[21, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[21, 3, 1, "", "clear"], [21, 3, 1, "", "copy"], [21, 2, 1, "", "defaultEntity"], [21, 3, 1, "", "explainParam"], [21, 3, 1, "", "explainParams"], [21, 3, 1, "", "extractParamMap"], [21, 3, 1, "", "getInputCols"], [21, 3, 1, "", "getLazyAnnotator"], [21, 3, 1, "", "getOrDefault"], [21, 3, 1, "", "getOutputCol"], [21, 3, 1, "", "getParam"], [21, 3, 1, "", "getParamValue"], [21, 2, 1, "", "getter_attrs"], [21, 2, 1, "", "groupBySentences"], [21, 3, 1, "", "hasDefault"], [21, 3, 1, "", "hasParam"], [21, 2, 1, "", "inputAnnotatorTypes"], [21, 2, 1, "", "inputCols"], [21, 3, 1, "", "inputColsValidation"], [21, 2, 1, "", "insertChunk"], [21, 3, 1, "", "isDefined"], [21, 3, 1, "", "isSet"], [21, 2, 1, "", "lazyAnnotator"], [21, 3, 1, "", "load"], [21, 2, 1, "", "name"], [21, 2, 1, "", "optionalInputAnnotatorTypes"], [21, 2, 1, "", "outputAnnotatorType"], [21, 2, 1, "", "outputCol"], [21, 3, 1, "", "read"], [21, 3, 1, "", "save"], [21, 3, 1, "", "set"], [21, 3, 1, "", "setDefaultEntity"], [21, 3, 1, "", "setForceInputTypeValidation"], [21, 3, 1, "", "setGroupBySentences"], [21, 3, 1, "", "setInputCols"], [21, 3, 1, "", "setInsertChunk"], [21, 3, 1, "", "setLazyAnnotator"], [21, 3, 1, "", "setOutputCol"], [21, 3, 1, "", "setParamValue"], [21, 3, 1, "", "setParams"], [21, 2, 1, "", "skipLPInputColsValidation"], [21, 3, 1, "", "transform"], [21, 2, 1, "", "uid"], [21, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[22, 1, 1, "", "ChunkFilterer"], [22, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[22, 2, 1, "", "blackList"], [22, 2, 1, "", "caseSensitive"], [22, 3, 1, "", "clear"], [22, 3, 1, "", "copy"], [22, 2, 1, "", "criteria"], [22, 2, 1, "", "entitiesConfidence"], [22, 3, 1, "", "explainParam"], [22, 3, 1, "", "explainParams"], [22, 3, 1, "", "extractParamMap"], [22, 2, 1, "", "filterValue"], [22, 3, 1, "", "getInputCols"], [22, 3, 1, "", "getLazyAnnotator"], [22, 3, 1, "", "getOrDefault"], [22, 3, 1, "", "getOutputCol"], [22, 3, 1, "", "getParam"], [22, 3, 1, "", "getParamValue"], [22, 2, 1, "", "getter_attrs"], [22, 3, 1, "", "hasDefault"], [22, 3, 1, "", "hasParam"], [22, 2, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "inputCols"], [22, 3, 1, "", "inputColsValidation"], [22, 3, 1, "", "isDefined"], [22, 3, 1, "", "isSet"], [22, 2, 1, "", "lazyAnnotator"], [22, 3, 1, "", "load"], [22, 2, 1, "", "name"], [22, 2, 1, "", "optionalInputAnnotatorTypes"], [22, 2, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "outputCol"], [22, 3, 1, "", "read"], [22, 2, 1, "", "regex"], [22, 3, 1, "", "save"], [22, 3, 1, "", "set"], [22, 3, 1, "", "setBlackList"], [22, 3, 1, "", "setCaseSensitive"], [22, 3, 1, "", "setCriteria"], [22, 3, 1, "", "setDenyList"], [22, 3, 1, "", "setEntitiesConfidence"], [22, 3, 1, "", "setFilterEntity"], [22, 3, 1, "", "setFilterValue"], [22, 3, 1, "", "setForceInputTypeValidation"], [22, 3, 1, "", "setInputCols"], [22, 3, 1, "", "setLazyAnnotator"], [22, 3, 1, "", "setOutputCol"], [22, 3, 1, "", "setParamValue"], [22, 3, 1, "", "setParams"], [22, 3, 1, "", "setRegex"], [22, 3, 1, "", "setWhiteList"], [22, 2, 1, "", "skipLPInputColsValidation"], [22, 3, 1, "", "transform"], [22, 2, 1, "", "uid"], [22, 2, 1, "", "whiteList"], [22, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[22, 2, 1, "", "blackList"], [22, 2, 1, "", "caseSensitive"], [22, 3, 1, "", "clear"], [22, 3, 1, "", "copy"], [22, 2, 1, "", "criteria"], [22, 2, 1, "", "doExceptionHandling"], [22, 2, 1, "", "entitiesConfidenceResource"], [22, 2, 1, "", "entitiesConfidenceResourceAsJsonString"], [22, 3, 1, "", "explainParam"], [22, 3, 1, "", "explainParams"], [22, 3, 1, "", "extractParamMap"], [22, 2, 1, "", "filterValue"], [22, 3, 1, "", "fit"], [22, 3, 1, "", "fitMultiple"], [22, 3, 1, "", "getInputCols"], [22, 3, 1, "", "getLazyAnnotator"], [22, 3, 1, "", "getOrDefault"], [22, 3, 1, "", "getOutputCol"], [22, 3, 1, "", "getParam"], [22, 3, 1, "", "getParamValue"], [22, 2, 1, "", "getter_attrs"], [22, 3, 1, "", "hasDefault"], [22, 3, 1, "", "hasParam"], [22, 2, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "inputCols"], [22, 3, 1, "", "inputColsValidation"], [22, 3, 1, "", "isDefined"], [22, 3, 1, "", "isSet"], [22, 2, 1, "", "lazyAnnotator"], [22, 3, 1, "", "load"], [22, 2, 1, "", "name"], [22, 2, 1, "", "optionalInputAnnotatorTypes"], [22, 2, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "outputCol"], [22, 3, 1, "", "read"], [22, 2, 1, "", "regex"], [22, 3, 1, "", "save"], [22, 3, 1, "", "set"], [22, 3, 1, "", "setBlackList"], [22, 3, 1, "", "setCaseSensitive"], [22, 3, 1, "", "setCriteria"], [22, 3, 1, "", "setDenyList"], [22, 3, 1, "", "setDoExceptionHandling"], [22, 3, 1, "", "setEntitiesConfidenceResource"], [22, 3, 1, "", "setEntitiesConfidenceResourceAsJsonString"], [22, 3, 1, "", "setFilterEntity"], [22, 3, 1, "", "setFilterValue"], [22, 3, 1, "", "setForceInputTypeValidation"], [22, 3, 1, "", "setInputCols"], [22, 3, 1, "", "setLazyAnnotator"], [22, 3, 1, "", "setOutputCol"], [22, 3, 1, "", "setParamValue"], [22, 3, 1, "", "setRegex"], [22, 3, 1, "", "setWhiteList"], [22, 2, 1, "", "skipLPInputColsValidation"], [22, 2, 1, "", "uid"], [22, 2, 1, "", "whiteList"], [22, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[23, 1, 1, "", "ChunkMapperApproach"], [23, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [23, 1, 1, "", "ChunkMapperModel"], [23, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[23, 2, 1, "", "allowMultiTokenChunk"], [23, 3, 1, "", "clear"], [23, 3, 1, "", "copy"], [23, 2, 1, "", "dictionary"], [23, 2, 1, "", "doExceptionHandling"], [23, 2, 1, "", "enableCharFingerprintMatching"], [23, 2, 1, "", "enableFuzzyMatching"], [23, 2, 1, "", "enableTokenFingerprintMatching"], [23, 3, 1, "", "explainParam"], [23, 3, 1, "", "explainParams"], [23, 3, 1, "", "extractParamMap"], [23, 3, 1, "", "fit"], [23, 3, 1, "", "fitMultiple"], [23, 2, 1, "", "fuzzyDistanceScalingMode"], [23, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [23, 2, 1, "", "fuzzyMatchingDistances"], [23, 3, 1, "", "getInputCols"], [23, 3, 1, "", "getLazyAnnotator"], [23, 3, 1, "", "getOrDefault"], [23, 3, 1, "", "getOutputCol"], [23, 3, 1, "", "getParam"], [23, 3, 1, "", "getParamValue"], [23, 2, 1, "", "getter_attrs"], [23, 3, 1, "", "hasDefault"], [23, 3, 1, "", "hasParam"], [23, 2, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "inputCols"], [23, 3, 1, "", "inputColsValidation"], [23, 3, 1, "", "isDefined"], [23, 3, 1, "", "isSet"], [23, 2, 1, "", "lazyAnnotator"], [23, 3, 1, "", "load"], [23, 2, 1, "", "lowerCase"], [23, 2, 1, "", "maxCharNgramFingerprint"], [23, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [23, 2, 1, "", "maxTokenNgramDroppingOperator"], [23, 2, 1, "", "maxTokenNgramDroppingTokens"], [23, 2, 1, "", "maxTokenNgramFingerprint"], [23, 2, 1, "", "minCharNgramFingerprint"], [23, 2, 1, "", "minTokenNgramFingerprint"], [23, 2, 1, "", "multivaluesRelations"], [23, 2, 1, "", "name"], [23, 2, 1, "", "optionalInputAnnotatorTypes"], [23, 2, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "outputCol"], [23, 3, 1, "", "read"], [23, 2, 1, "", "rel"], [23, 2, 1, "", "rels"], [23, 3, 1, "", "save"], [23, 3, 1, "", "set"], [23, 3, 1, "", "setAllowMultiTokenChunk"], [23, 3, 1, "", "setDictionary"], [23, 3, 1, "", "setDoExceptionHandling"], [23, 3, 1, "", "setEnableCharFingerprintMatching"], [23, 3, 1, "", "setEnableFuzzyMatching"], [23, 3, 1, "", "setEnableTokenFingerprintMatching"], [23, 3, 1, "", "setForceInputTypeValidation"], [23, 3, 1, "", "setFuzzyDistanceScalingMode"], [23, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [23, 3, 1, "", "setFuzzyMatchingDistances"], [23, 3, 1, "", "setInputCols"], [23, 3, 1, "", "setLazyAnnotator"], [23, 3, 1, "", "setLowerCase"], [23, 3, 1, "", "setMaxCharNgramFingerprint"], [23, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [23, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [23, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [23, 3, 1, "", "setMaxTokenNgramFingerprint"], [23, 3, 1, "", "setMinCharNgramFingerprint"], [23, 3, 1, "", "setMinTokenNgramFingerprint"], [23, 3, 1, "", "setMultivaluesRelations"], [23, 3, 1, "", "setOutputCol"], [23, 3, 1, "", "setParamValue"], [23, 3, 1, "", "setRel"], [23, 3, 1, "", "setRels"], [23, 2, 1, "", "skipLPInputColsValidation"], [23, 2, 1, "", "uid"], [23, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[23, 2, 1, "", "enableCharFingerprintMatching"], [23, 2, 1, "", "enableFuzzyMatching"], [23, 2, 1, "", "enableTokenFingerprintMatching"], [23, 2, 1, "", "fuzzyDistanceScalingMode"], [23, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [23, 2, 1, "", "fuzzyMatchingDistances"], [23, 2, 1, "", "maxCharNgramFingerprint"], [23, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [23, 2, 1, "", "maxTokenNgramDroppingOperator"], [23, 2, 1, "", "maxTokenNgramDroppingTokens"], [23, 2, 1, "", "maxTokenNgramFingerprint"], [23, 2, 1, "", "minCharNgramFingerprint"], [23, 2, 1, "", "minTokenNgramFingerprint"], [23, 3, 1, "", "setEnableCharFingerprintMatching"], [23, 3, 1, "", "setEnableFuzzyMatching"], [23, 3, 1, "", "setEnableTokenFingerprintMatching"], [23, 3, 1, "", "setFuzzyDistanceScalingMode"], [23, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [23, 3, 1, "", "setFuzzyMatchingDistances"], [23, 3, 1, "", "setMaxCharNgramFingerprint"], [23, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [23, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [23, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [23, 3, 1, "", "setMaxTokenNgramFingerprint"], [23, 3, 1, "", "setMinCharNgramFingerprint"], [23, 3, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[23, 2, 1, "", "allowMultiTokenChunk"], [23, 3, 1, "", "clear"], [23, 3, 1, "", "copy"], [23, 2, 1, "", "doExceptionHandling"], [23, 3, 1, "", "explainParam"], [23, 3, 1, "", "explainParams"], [23, 3, 1, "", "extractParamMap"], [23, 3, 1, "", "getInputCols"], [23, 3, 1, "", "getLazyAnnotator"], [23, 3, 1, "", "getOrDefault"], [23, 3, 1, "", "getOutputCol"], [23, 3, 1, "", "getParam"], [23, 3, 1, "", "getParamValue"], [23, 2, 1, "", "getter_attrs"], [23, 3, 1, "", "hasDefault"], [23, 3, 1, "", "hasParam"], [23, 2, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "inputCols"], [23, 3, 1, "", "inputColsValidation"], [23, 3, 1, "", "isDefined"], [23, 3, 1, "", "isSet"], [23, 2, 1, "", "lazyAnnotator"], [23, 3, 1, "", "load"], [23, 2, 1, "", "lowerCase"], [23, 2, 1, "", "multivaluesRelations"], [23, 2, 1, "", "name"], [23, 2, 1, "", "optionalInputAnnotatorTypes"], [23, 2, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "outputCol"], [23, 3, 1, "", "pretrained"], [23, 3, 1, "", "read"], [23, 2, 1, "", "rel"], [23, 2, 1, "", "rels"], [23, 3, 1, "", "save"], [23, 3, 1, "", "set"], [23, 3, 1, "", "setAllowMultiTokenChunk"], [23, 3, 1, "", "setDoExceptionHandling"], [23, 3, 1, "", "setForceInputTypeValidation"], [23, 3, 1, "", "setInputCols"], [23, 3, 1, "", "setLazyAnnotator"], [23, 3, 1, "", "setLowerCase"], [23, 3, 1, "", "setMultivaluesRelations"], [23, 3, 1, "", "setOutputCol"], [23, 3, 1, "", "setParamValue"], [23, 3, 1, "", "setParams"], [23, 3, 1, "", "setRel"], [23, 3, 1, "", "setRels"], [23, 2, 1, "", "skipLPInputColsValidation"], [23, 3, 1, "", "transform"], [23, 2, 1, "", "uid"], [23, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[23, 2, 1, "", "allowMultiTokenChunk"], [23, 2, 1, "", "doExceptionHandling"], [23, 2, 1, "", "lowerCase"], [23, 2, 1, "", "multivaluesRelations"], [23, 2, 1, "", "rel"], [23, 2, 1, "", "rels"], [23, 3, 1, "", "setAllowMultiTokenChunk"], [23, 3, 1, "", "setDoExceptionHandling"], [23, 3, 1, "", "setLowerCase"], [23, 3, 1, "", "setMultivaluesRelations"], [23, 3, 1, "", "setRel"], [23, 3, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[24, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[24, 3, 1, "", "clear"], [24, 3, 1, "", "copy"], [24, 3, 1, "", "explainParam"], [24, 3, 1, "", "explainParams"], [24, 3, 1, "", "extractParamMap"], [24, 3, 1, "", "getInputCols"], [24, 3, 1, "", "getLazyAnnotator"], [24, 3, 1, "", "getOrDefault"], [24, 3, 1, "", "getOutputCol"], [24, 3, 1, "", "getParam"], [24, 3, 1, "", "getParamValue"], [24, 2, 1, "", "getter_attrs"], [24, 3, 1, "", "hasDefault"], [24, 3, 1, "", "hasParam"], [24, 2, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "inputCols"], [24, 3, 1, "", "inputColsValidation"], [24, 3, 1, "", "isDefined"], [24, 3, 1, "", "isSet"], [24, 2, 1, "", "lazyAnnotator"], [24, 3, 1, "", "load"], [24, 2, 1, "", "name"], [24, 2, 1, "", "optionalInputAnnotatorTypes"], [24, 2, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "outputCol"], [24, 3, 1, "", "read"], [24, 2, 1, "", "returnCriteria"], [24, 3, 1, "", "save"], [24, 3, 1, "", "set"], [24, 3, 1, "", "setForceInputTypeValidation"], [24, 3, 1, "", "setInputCols"], [24, 3, 1, "", "setLazyAnnotator"], [24, 3, 1, "", "setOutputCol"], [24, 3, 1, "", "setParamValue"], [24, 3, 1, "", "setParams"], [24, 3, 1, "", "setReturnCriteria"], [24, 2, 1, "", "skipLPInputColsValidation"], [24, 3, 1, "", "transform"], [24, 2, 1, "", "uid"], [24, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.docmapper": [[25, 1, 1, "", "DocMapperApproach"], [25, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[25, 2, 1, "", "allowMultiTokenChunk"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "copy"], [25, 2, 1, "", "dictionary"], [25, 2, 1, "", "doExceptionHandling"], [25, 2, 1, "", "enableCharFingerprintMatching"], [25, 2, 1, "", "enableFuzzyMatching"], [25, 2, 1, "", "enableTokenFingerprintMatching"], [25, 3, 1, "", "explainParam"], [25, 3, 1, "", "explainParams"], [25, 3, 1, "", "extractParamMap"], [25, 3, 1, "", "fit"], [25, 3, 1, "", "fitMultiple"], [25, 2, 1, "", "fuzzyDistanceScalingMode"], [25, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [25, 2, 1, "", "fuzzyMatchingDistances"], [25, 3, 1, "", "getInputCols"], [25, 3, 1, "", "getLazyAnnotator"], [25, 3, 1, "", "getOrDefault"], [25, 3, 1, "", "getOutputCol"], [25, 3, 1, "", "getParam"], [25, 3, 1, "", "getParamValue"], [25, 2, 1, "", "getter_attrs"], [25, 3, 1, "", "hasDefault"], [25, 3, 1, "", "hasParam"], [25, 2, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "inputCols"], [25, 3, 1, "", "inputColsValidation"], [25, 3, 1, "", "isDefined"], [25, 3, 1, "", "isSet"], [25, 2, 1, "", "lazyAnnotator"], [25, 3, 1, "", "load"], [25, 2, 1, "", "lowerCase"], [25, 2, 1, "", "maxCharNgramFingerprint"], [25, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [25, 2, 1, "", "maxTokenNgramDroppingOperator"], [25, 2, 1, "", "maxTokenNgramDroppingTokens"], [25, 2, 1, "", "maxTokenNgramFingerprint"], [25, 2, 1, "", "minCharNgramFingerprint"], [25, 2, 1, "", "minTokenNgramFingerprint"], [25, 2, 1, "", "multivaluesRelations"], [25, 2, 1, "", "name"], [25, 2, 1, "", "optionalInputAnnotatorTypes"], [25, 2, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "outputCol"], [25, 3, 1, "", "read"], [25, 2, 1, "", "rel"], [25, 2, 1, "", "rels"], [25, 3, 1, "", "save"], [25, 3, 1, "", "set"], [25, 3, 1, "", "setAllowMultiTokenChunk"], [25, 3, 1, "", "setDictionary"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setEnableCharFingerprintMatching"], [25, 3, 1, "", "setEnableFuzzyMatching"], [25, 3, 1, "", "setEnableTokenFingerprintMatching"], [25, 3, 1, "", "setForceInputTypeValidation"], [25, 3, 1, "", "setFuzzyDistanceScalingMode"], [25, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [25, 3, 1, "", "setFuzzyMatchingDistances"], [25, 3, 1, "", "setInputCols"], [25, 3, 1, "", "setLazyAnnotator"], [25, 3, 1, "", "setLowerCase"], [25, 3, 1, "", "setMaxCharNgramFingerprint"], [25, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [25, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [25, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [25, 3, 1, "", "setMaxTokenNgramFingerprint"], [25, 3, 1, "", "setMinCharNgramFingerprint"], [25, 3, 1, "", "setMinTokenNgramFingerprint"], [25, 3, 1, "", "setMultivaluesRelations"], [25, 3, 1, "", "setOutputCol"], [25, 3, 1, "", "setParamValue"], [25, 3, 1, "", "setRel"], [25, 3, 1, "", "setRels"], [25, 2, 1, "", "skipLPInputColsValidation"], [25, 2, 1, "", "uid"], [25, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[25, 2, 1, "", "allowMultiTokenChunk"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "copy"], [25, 2, 1, "", "doExceptionHandling"], [25, 3, 1, "", "explainParam"], [25, 3, 1, "", "explainParams"], [25, 3, 1, "", "extractParamMap"], [25, 3, 1, "", "getInputCols"], [25, 3, 1, "", "getLazyAnnotator"], [25, 3, 1, "", "getOrDefault"], [25, 3, 1, "", "getOutputCol"], [25, 3, 1, "", "getParam"], [25, 3, 1, "", "getParamValue"], [25, 2, 1, "", "getter_attrs"], [25, 3, 1, "", "hasDefault"], [25, 3, 1, "", "hasParam"], [25, 2, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "inputCols"], [25, 3, 1, "", "inputColsValidation"], [25, 3, 1, "", "isDefined"], [25, 3, 1, "", "isSet"], [25, 2, 1, "", "lazyAnnotator"], [25, 3, 1, "", "load"], [25, 2, 1, "", "lowerCase"], [25, 2, 1, "", "multivaluesRelations"], [25, 2, 1, "", "name"], [25, 2, 1, "", "optionalInputAnnotatorTypes"], [25, 2, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "outputCol"], [25, 3, 1, "", "pretrained"], [25, 3, 1, "", "read"], [25, 2, 1, "", "rel"], [25, 2, 1, "", "rels"], [25, 3, 1, "", "save"], [25, 3, 1, "", "set"], [25, 3, 1, "", "setAllowMultiTokenChunk"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setForceInputTypeValidation"], [25, 3, 1, "", "setInputCols"], [25, 3, 1, "", "setLazyAnnotator"], [25, 3, 1, "", "setLowerCase"], [25, 3, 1, "", "setMultivaluesRelations"], [25, 3, 1, "", "setOutputCol"], [25, 3, 1, "", "setParamValue"], [25, 3, 1, "", "setParams"], [25, 3, 1, "", "setRel"], [25, 3, 1, "", "setRels"], [25, 2, 1, "", "skipLPInputColsValidation"], [25, 3, 1, "", "transform"], [25, 2, 1, "", "uid"], [25, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[27, 1, 1, "", "Mapper2Chunk"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk": [[27, 3, 1, "", "clear"], [27, 3, 1, "", "copy"], [27, 3, 1, "", "explainParam"], [27, 3, 1, "", "explainParams"], [27, 3, 1, "", "extractParamMap"], [27, 2, 1, "", "filterNoneValues"], [27, 3, 1, "", "getOrDefault"], [27, 3, 1, "", "getParam"], [27, 3, 1, "", "getParamValue"], [27, 2, 1, "", "getter_attrs"], [27, 3, 1, "", "hasDefault"], [27, 3, 1, "", "hasParam"], [27, 2, 1, "", "inputAnnotatorTypes"], [27, 3, 1, "", "isDefined"], [27, 3, 1, "", "isSet"], [27, 2, 1, "", "kwargs"], [27, 3, 1, "", "load"], [27, 2, 1, "", "name"], [27, 2, 1, "", "outputAnnotatorType"], [27, 3, 1, "", "read"], [27, 3, 1, "", "save"], [27, 3, 1, "", "set"], [27, 3, 1, "", "setFilterNoneValues"], [27, 3, 1, "", "setParamValue"], [27, 3, 1, "", "setParams"], [27, 3, 1, "", "transform"], [27, 2, 1, "", "uid"], [27, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification": [[28, 0, 0, "-", "document_log_classifier"], [29, 0, 0, "-", "document_ml_classifier"], [30, 0, 0, "-", "few_shot_assertion_classifier"], [31, 0, 0, "-", "few_shot_classifier"], [32, 0, 0, "-", "generic_log_reg_classifier"], [33, 0, 0, "-", "generic_svm_classifier"], [35, 0, 0, "-", "large_few_shot_classifier"], [36, 0, 0, "-", "medical_bert_for_sequence_classification"], [37, 0, 0, "-", "medical_bert_for_token_classifier"], [38, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[28, 1, 1, "", "DocumentLogRegClassifierApproach"], [28, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[28, 2, 1, "", "classificationModelPath"], [28, 3, 1, "", "clear"], [28, 3, 1, "", "copy"], [28, 3, 1, "", "explainParam"], [28, 3, 1, "", "explainParams"], [28, 3, 1, "", "extractParamMap"], [28, 3, 1, "", "fit"], [28, 2, 1, "", "fitIntercept"], [28, 3, 1, "", "fitMultiple"], [28, 3, 1, "", "getInputCols"], [28, 3, 1, "", "getLazyAnnotator"], [28, 3, 1, "", "getOrDefault"], [28, 3, 1, "", "getOutputCol"], [28, 3, 1, "", "getParam"], [28, 3, 1, "", "getParamValue"], [28, 2, 1, "", "getter_attrs"], [28, 3, 1, "", "hasDefault"], [28, 3, 1, "", "hasParam"], [28, 2, 1, "", "inputAnnotatorTypes"], [28, 2, 1, "", "inputCols"], [28, 3, 1, "", "inputColsValidation"], [28, 3, 1, "", "isDefined"], [28, 3, 1, "", "isSet"], [28, 2, 1, "", "labelCol"], [28, 2, 1, "", "labels"], [28, 2, 1, "", "lazyAnnotator"], [28, 3, 1, "", "load"], [28, 2, 1, "", "maxIter"], [28, 2, 1, "", "optionalInputAnnotatorTypes"], [28, 2, 1, "", "outputAnnotatorType"], [28, 2, 1, "", "outputCol"], [28, 3, 1, "", "read"], [28, 3, 1, "", "save"], [28, 3, 1, "", "set"], [28, 3, 1, "", "setClassificationModelPath"], [28, 3, 1, "", "setFitIntercept"], [28, 3, 1, "", "setForceInputTypeValidation"], [28, 3, 1, "", "setInputCols"], [28, 3, 1, "", "setLabelColumn"], [28, 3, 1, "", "setLabels"], [28, 3, 1, "", "setLazyAnnotator"], [28, 3, 1, "", "setMaxIter"], [28, 3, 1, "", "setOutputCol"], [28, 3, 1, "", "setParamValue"], [28, 3, 1, "", "setTol"], [28, 3, 1, "", "setVectorizationModelPath"], [28, 2, 1, "", "skipLPInputColsValidation"], [28, 2, 1, "", "tol"], [28, 2, 1, "", "uid"], [28, 2, 1, "", "vectorizationModelPath"], [28, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[28, 2, 1, "", "classificationModel"], [28, 3, 1, "", "clear"], [28, 3, 1, "", "copy"], [28, 3, 1, "", "explainParam"], [28, 3, 1, "", "explainParams"], [28, 3, 1, "", "extractParamMap"], [28, 3, 1, "", "getInputCols"], [28, 3, 1, "", "getLazyAnnotator"], [28, 3, 1, "", "getOrDefault"], [28, 3, 1, "", "getOutputCol"], [28, 3, 1, "", "getParam"], [28, 3, 1, "", "getParamValue"], [28, 2, 1, "", "getter_attrs"], [28, 3, 1, "", "hasDefault"], [28, 3, 1, "", "hasParam"], [28, 2, 1, "", "inputAnnotatorTypes"], [28, 2, 1, "", "inputCols"], [28, 3, 1, "", "inputColsValidation"], [28, 3, 1, "", "isDefined"], [28, 3, 1, "", "isSet"], [28, 2, 1, "", "labels"], [28, 2, 1, "", "lazyAnnotator"], [28, 3, 1, "", "load"], [28, 2, 1, "", "mergeChunks"], [28, 2, 1, "", "name"], [28, 2, 1, "", "optionalInputAnnotatorTypes"], [28, 2, 1, "", "outputAnnotatorType"], [28, 2, 1, "", "outputCol"], [28, 3, 1, "", "pretrained"], [28, 3, 1, "", "read"], [28, 3, 1, "", "save"], [28, 3, 1, "", "set"], [28, 3, 1, "", "setClassificationModel"], [28, 3, 1, "", "setForceInputTypeValidation"], [28, 3, 1, "", "setInputCols"], [28, 3, 1, "", "setLabels"], [28, 3, 1, "", "setLazyAnnotator"], [28, 3, 1, "", "setMergeChunks"], [28, 3, 1, "", "setOutputCol"], [28, 3, 1, "", "setParamValue"], [28, 3, 1, "", "setParams"], [28, 3, 1, "", "setVectorizationModel"], [28, 2, 1, "", "skipLPInputColsValidation"], [28, 3, 1, "", "transform"], [28, 2, 1, "", "uid"], [28, 2, 1, "", "vectorizationModel"], [28, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[29, 1, 1, "", "DocumentMLClassifierApproach"], [29, 1, 1, "", "DocumentMLClassifierModel"], [29, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[29, 2, 1, "", "classificationModelClass"], [29, 2, 1, "", "classificationModelPath"], [29, 3, 1, "", "clear"], [29, 3, 1, "", "copy"], [29, 3, 1, "", "explainParam"], [29, 3, 1, "", "explainParams"], [29, 3, 1, "", "extractParamMap"], [29, 3, 1, "", "fit"], [29, 2, 1, "", "fitIntercept"], [29, 3, 1, "", "fitMultiple"], [29, 3, 1, "", "getInputCols"], [29, 3, 1, "", "getLazyAnnotator"], [29, 3, 1, "", "getOrDefault"], [29, 3, 1, "", "getOutputCol"], [29, 3, 1, "", "getParam"], [29, 3, 1, "", "getParamValue"], [29, 2, 1, "", "getter_attrs"], [29, 3, 1, "", "hasDefault"], [29, 3, 1, "", "hasParam"], [29, 2, 1, "", "inputAnnotatorTypes"], [29, 2, 1, "", "inputCols"], [29, 3, 1, "", "inputColsValidation"], [29, 3, 1, "", "isDefined"], [29, 3, 1, "", "isSet"], [29, 2, 1, "", "labelCol"], [29, 2, 1, "", "labels"], [29, 2, 1, "", "lazyAnnotator"], [29, 3, 1, "", "load"], [29, 2, 1, "", "maxIter"], [29, 2, 1, "", "maxTokenNgram"], [29, 2, 1, "", "mergeChunks"], [29, 2, 1, "", "minTokenNgram"], [29, 2, 1, "", "optionalInputAnnotatorTypes"], [29, 2, 1, "", "outputAnnotatorType"], [29, 2, 1, "", "outputCol"], [29, 3, 1, "", "read"], [29, 3, 1, "", "save"], [29, 3, 1, "", "set"], [29, 3, 1, "", "setClassificationModelClass"], [29, 3, 1, "", "setClassificationModelPath"], [29, 3, 1, "", "setFitIntercept"], [29, 3, 1, "", "setForceInputTypeValidation"], [29, 3, 1, "", "setInputCols"], [29, 3, 1, "", "setLabelCol"], [29, 3, 1, "", "setLabels"], [29, 3, 1, "", "setLazyAnnotator"], [29, 3, 1, "", "setMaxIter"], [29, 3, 1, "", "setMaxTokenNgram"], [29, 3, 1, "", "setMergeChunks"], [29, 3, 1, "", "setMinTokenNgram"], [29, 3, 1, "", "setOutputCol"], [29, 3, 1, "", "setParamValue"], [29, 3, 1, "", "setTol"], [29, 3, 1, "", "setVectorizationModelPath"], [29, 2, 1, "", "skipLPInputColsValidation"], [29, 2, 1, "", "tol"], [29, 2, 1, "", "uid"], [29, 2, 1, "", "vectorizationModelPath"], [29, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[29, 2, 1, "", "classificationModel"], [29, 3, 1, "", "clear"], [29, 3, 1, "", "copy"], [29, 3, 1, "", "explainParam"], [29, 3, 1, "", "explainParams"], [29, 3, 1, "", "extractParamMap"], [29, 3, 1, "", "getInputCols"], [29, 3, 1, "", "getLazyAnnotator"], [29, 3, 1, "", "getOrDefault"], [29, 3, 1, "", "getOutputCol"], [29, 3, 1, "", "getParam"], [29, 3, 1, "", "getParamValue"], [29, 2, 1, "", "getter_attrs"], [29, 3, 1, "", "hasDefault"], [29, 3, 1, "", "hasParam"], [29, 2, 1, "", "inputAnnotatorTypes"], [29, 2, 1, "", "inputCols"], [29, 3, 1, "", "inputColsValidation"], [29, 3, 1, "", "isDefined"], [29, 3, 1, "", "isSet"], [29, 2, 1, "", "labels"], [29, 2, 1, "", "lazyAnnotator"], [29, 3, 1, "", "load"], [29, 2, 1, "", "maxTokenNgram"], [29, 2, 1, "", "mergeChunks"], [29, 2, 1, "", "minTokenNgram"], [29, 2, 1, "", "name"], [29, 2, 1, "", "optionalInputAnnotatorTypes"], [29, 2, 1, "", "outputAnnotatorType"], [29, 2, 1, "", "outputCol"], [29, 3, 1, "", "pretrained"], [29, 3, 1, "", "read"], [29, 3, 1, "", "save"], [29, 3, 1, "", "set"], [29, 3, 1, "", "setClassificationModel"], [29, 3, 1, "", "setForceInputTypeValidation"], [29, 3, 1, "", "setInputCols"], [29, 3, 1, "", "setLabels"], [29, 3, 1, "", "setLazyAnnotator"], [29, 3, 1, "", "setMergeChunks"], [29, 3, 1, "", "setOutputCol"], [29, 3, 1, "", "setParamValue"], [29, 3, 1, "", "setParams"], [29, 3, 1, "", "setVectorizationModel"], [29, 2, 1, "", "skipLPInputColsValidation"], [29, 3, 1, "", "transform"], [29, 2, 1, "", "uid"], [29, 2, 1, "", "vectorizationModel"], [29, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[29, 2, 1, "", "labels"], [29, 2, 1, "", "maxTokenNgram"], [29, 2, 1, "", "mergeChunks"], [29, 2, 1, "", "minTokenNgram"], [29, 3, 1, "", "setLabels"], [29, 3, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[30, 1, 1, "", "FewShotAssertionClassifierApproach"], [30, 1, 1, "", "FewShotAssertionClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach": [[30, 2, 1, "", "batchSize"], [30, 3, 1, "", "clear"], [30, 3, 1, "", "copy"], [30, 2, 1, "", "datasetInfo"], [30, 2, 1, "", "doExceptionHandling"], [30, 2, 1, "", "dropout"], [30, 2, 1, "", "engine"], [30, 2, 1, "", "epochsN"], [30, 3, 1, "", "explainParam"], [30, 3, 1, "", "explainParams"], [30, 3, 1, "", "extractParamMap"], [30, 2, 1, "", "featureScaling"], [30, 3, 1, "", "fit"], [30, 3, 1, "", "fitMultiple"], [30, 2, 1, "", "fixImbalance"], [30, 3, 1, "", "getEngine"], [30, 3, 1, "", "getInputCols"], [30, 3, 1, "", "getLazyAnnotator"], [30, 3, 1, "", "getOrDefault"], [30, 3, 1, "", "getOutputCol"], [30, 3, 1, "", "getParam"], [30, 3, 1, "", "getParamValue"], [30, 2, 1, "", "getter_attrs"], [30, 3, 1, "", "hasDefault"], [30, 3, 1, "", "hasParam"], [30, 2, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "inputCols"], [30, 3, 1, "", "inputColsValidation"], [30, 3, 1, "", "isDefined"], [30, 3, 1, "", "isSet"], [30, 2, 1, "", "labelColumn"], [30, 2, 1, "", "lazyAnnotator"], [30, 2, 1, "", "learningRate"], [30, 3, 1, "", "load"], [30, 2, 1, "", "modelFile"], [30, 2, 1, "", "multiClass"], [30, 2, 1, "", "name"], [30, 2, 1, "", "optionalInputAnnotatorTypes"], [30, 2, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "outputCol"], [30, 2, 1, "", "outputLogsPath"], [30, 3, 1, "", "read"], [30, 3, 1, "", "save"], [30, 3, 1, "", "set"], [30, 3, 1, "", "setBatchSize"], [30, 3, 1, "", "setDatasetInfo"], [30, 3, 1, "", "setDoExceptionHandling"], [30, 3, 1, "", "setDropout"], [30, 3, 1, "", "setEpochsNumber"], [30, 3, 1, "", "setFeatureScaling"], [30, 3, 1, "", "setFixImbalance"], [30, 3, 1, "", "setForceInputTypeValidation"], [30, 3, 1, "", "setInputCols"], [30, 3, 1, "", "setLabelCol"], [30, 3, 1, "", "setLazyAnnotator"], [30, 3, 1, "", "setLearningRate"], [30, 3, 1, "", "setModelFile"], [30, 3, 1, "", "setMultiClass"], [30, 3, 1, "", "setOutputCol"], [30, 3, 1, "", "setOutputLogsPath"], [30, 3, 1, "", "setParamValue"], [30, 3, 1, "", "setValidationSplit"], [30, 2, 1, "", "skipLPInputColsValidation"], [30, 2, 1, "", "uid"], [30, 2, 1, "", "validationSplit"], [30, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel": [[30, 2, 1, "", "classes"], [30, 3, 1, "", "clear"], [30, 3, 1, "", "copy"], [30, 2, 1, "", "datasetInfo"], [30, 2, 1, "", "doExceptionHandling"], [30, 3, 1, "", "explainParam"], [30, 3, 1, "", "explainParams"], [30, 3, 1, "", "extractParamMap"], [30, 2, 1, "", "featureScaling"], [30, 3, 1, "", "getInputCols"], [30, 3, 1, "", "getLazyAnnotator"], [30, 3, 1, "", "getOrDefault"], [30, 3, 1, "", "getOutputCol"], [30, 3, 1, "", "getParam"], [30, 3, 1, "", "getParamValue"], [30, 2, 1, "", "getter_attrs"], [30, 3, 1, "", "hasDefault"], [30, 3, 1, "", "hasParam"], [30, 2, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "inputCols"], [30, 3, 1, "", "inputColsValidation"], [30, 3, 1, "", "isDefined"], [30, 3, 1, "", "isSet"], [30, 2, 1, "", "lazyAnnotator"], [30, 3, 1, "", "load"], [30, 3, 1, "", "loadSavedModel"], [30, 2, 1, "", "multiClass"], [30, 2, 1, "", "name"], [30, 2, 1, "", "optionalInputAnnotatorTypes"], [30, 2, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "outputCol"], [30, 3, 1, "", "pretrained"], [30, 3, 1, "", "read"], [30, 3, 1, "", "save"], [30, 3, 1, "", "set"], [30, 3, 1, "", "setDatasetInfo"], [30, 3, 1, "", "setDoExceptionHandling"], [30, 3, 1, "", "setFeatureScaling"], [30, 3, 1, "", "setForceInputTypeValidation"], [30, 3, 1, "", "setInputCols"], [30, 3, 1, "", "setLazyAnnotator"], [30, 3, 1, "", "setMultiClass"], [30, 3, 1, "", "setOutputCol"], [30, 3, 1, "", "setParamValue"], [30, 3, 1, "", "setParams"], [30, 2, 1, "", "skipLPInputColsValidation"], [30, 3, 1, "", "transform"], [30, 2, 1, "", "uid"], [30, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[31, 1, 1, "", "FewShotClassifierApproach"], [31, 1, 1, "", "FewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach": [[31, 2, 1, "", "batchSize"], [31, 3, 1, "", "clear"], [31, 3, 1, "", "copy"], [31, 2, 1, "", "datasetInfo"], [31, 2, 1, "", "doExceptionHandling"], [31, 2, 1, "", "dropout"], [31, 2, 1, "", "engine"], [31, 2, 1, "", "epochsN"], [31, 3, 1, "", "explainParam"], [31, 3, 1, "", "explainParams"], [31, 3, 1, "", "extractParamMap"], [31, 2, 1, "", "featureScaling"], [31, 3, 1, "", "fit"], [31, 3, 1, "", "fitMultiple"], [31, 2, 1, "", "fixImbalance"], [31, 3, 1, "", "getEngine"], [31, 3, 1, "", "getInputCols"], [31, 3, 1, "", "getLazyAnnotator"], [31, 3, 1, "", "getOrDefault"], [31, 3, 1, "", "getOutputCol"], [31, 3, 1, "", "getParam"], [31, 3, 1, "", "getParamValue"], [31, 2, 1, "", "getter_attrs"], [31, 3, 1, "", "hasDefault"], [31, 3, 1, "", "hasParam"], [31, 2, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "inputCols"], [31, 3, 1, "", "inputColsValidation"], [31, 3, 1, "", "isDefined"], [31, 3, 1, "", "isSet"], [31, 2, 1, "", "labelColumn"], [31, 2, 1, "", "lazyAnnotator"], [31, 2, 1, "", "learningRate"], [31, 3, 1, "", "load"], [31, 2, 1, "", "modelFile"], [31, 2, 1, "", "multiClass"], [31, 2, 1, "", "name"], [31, 2, 1, "", "optionalInputAnnotatorTypes"], [31, 2, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "outputCol"], [31, 2, 1, "", "outputLogsPath"], [31, 3, 1, "", "read"], [31, 3, 1, "", "save"], [31, 3, 1, "", "set"], [31, 3, 1, "", "setBatchSize"], [31, 3, 1, "", "setDatasetInfo"], [31, 3, 1, "", "setDoExceptionHandling"], [31, 3, 1, "", "setDropout"], [31, 3, 1, "", "setEpochsNumber"], [31, 3, 1, "", "setFeatureScaling"], [31, 3, 1, "", "setFixImbalance"], [31, 3, 1, "", "setForceInputTypeValidation"], [31, 3, 1, "", "setInputCols"], [31, 3, 1, "", "setLabelCol"], [31, 3, 1, "", "setLazyAnnotator"], [31, 3, 1, "", "setLearningRate"], [31, 3, 1, "", "setModelFile"], [31, 3, 1, "", "setMultiClass"], [31, 3, 1, "", "setOutputCol"], [31, 3, 1, "", "setOutputLogsPath"], [31, 3, 1, "", "setParamValue"], [31, 3, 1, "", "setValidationSplit"], [31, 2, 1, "", "skipLPInputColsValidation"], [31, 2, 1, "", "uid"], [31, 2, 1, "", "validationSplit"], [31, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel": [[31, 2, 1, "", "classes"], [31, 3, 1, "", "clear"], [31, 3, 1, "", "copy"], [31, 2, 1, "", "datasetInfo"], [31, 2, 1, "", "doExceptionHandling"], [31, 3, 1, "", "explainParam"], [31, 3, 1, "", "explainParams"], [31, 3, 1, "", "extractParamMap"], [31, 2, 1, "", "featureScaling"], [31, 3, 1, "", "getInputCols"], [31, 3, 1, "", "getLazyAnnotator"], [31, 3, 1, "", "getOrDefault"], [31, 3, 1, "", "getOutputCol"], [31, 3, 1, "", "getParam"], [31, 3, 1, "", "getParamValue"], [31, 2, 1, "", "getter_attrs"], [31, 3, 1, "", "hasDefault"], [31, 3, 1, "", "hasParam"], [31, 2, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "inputCols"], [31, 3, 1, "", "inputColsValidation"], [31, 3, 1, "", "isDefined"], [31, 3, 1, "", "isSet"], [31, 2, 1, "", "lazyAnnotator"], [31, 3, 1, "", "load"], [31, 2, 1, "", "multiClass"], [31, 2, 1, "", "name"], [31, 2, 1, "", "optionalInputAnnotatorTypes"], [31, 2, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "outputCol"], [31, 3, 1, "", "pretrained"], [31, 3, 1, "", "read"], [31, 3, 1, "", "save"], [31, 3, 1, "", "set"], [31, 3, 1, "", "setDatasetInfo"], [31, 3, 1, "", "setDoExceptionHandling"], [31, 3, 1, "", "setFeatureScaling"], [31, 3, 1, "", "setForceInputTypeValidation"], [31, 3, 1, "", "setInputCols"], [31, 3, 1, "", "setLazyAnnotator"], [31, 3, 1, "", "setMultiClass"], [31, 3, 1, "", "setOutputCol"], [31, 3, 1, "", "setParamValue"], [31, 3, 1, "", "setParams"], [31, 2, 1, "", "skipLPInputColsValidation"], [31, 3, 1, "", "transform"], [31, 2, 1, "", "uid"], [31, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[32, 1, 1, "", "GenericLogRegClassifierApproach"], [32, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[32, 2, 1, "", "batchSize"], [32, 3, 1, "", "clear"], [32, 3, 1, "", "copy"], [32, 2, 1, "", "datasetInfo"], [32, 2, 1, "", "doExceptionHandling"], [32, 2, 1, "", "dropout"], [32, 2, 1, "", "engine"], [32, 2, 1, "", "epochsN"], [32, 3, 1, "", "explainParam"], [32, 3, 1, "", "explainParams"], [32, 3, 1, "", "extractParamMap"], [32, 2, 1, "", "featureScaling"], [32, 3, 1, "", "fit"], [32, 3, 1, "", "fitMultiple"], [32, 2, 1, "", "fixImbalance"], [32, 3, 1, "", "getEngine"], [32, 3, 1, "", "getInputCols"], [32, 3, 1, "", "getLazyAnnotator"], [32, 3, 1, "", "getOrDefault"], [32, 3, 1, "", "getOutputCol"], [32, 3, 1, "", "getParam"], [32, 3, 1, "", "getParamValue"], [32, 2, 1, "", "getter_attrs"], [32, 3, 1, "", "hasDefault"], [32, 3, 1, "", "hasParam"], [32, 2, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "inputCols"], [32, 3, 1, "", "inputColsValidation"], [32, 3, 1, "", "isDefined"], [32, 3, 1, "", "isSet"], [32, 2, 1, "", "labelColumn"], [32, 2, 1, "", "lazyAnnotator"], [32, 2, 1, "", "learningRate"], [32, 3, 1, "", "load"], [32, 2, 1, "", "modelFile"], [32, 2, 1, "", "multiClass"], [32, 2, 1, "", "name"], [32, 2, 1, "", "optionalInputAnnotatorTypes"], [32, 2, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "outputCol"], [32, 2, 1, "", "outputLogsPath"], [32, 3, 1, "", "read"], [32, 3, 1, "", "save"], [32, 3, 1, "", "set"], [32, 3, 1, "", "setBatchSize"], [32, 3, 1, "", "setDatasetInfo"], [32, 3, 1, "", "setDoExceptionHandling"], [32, 3, 1, "", "setDropout"], [32, 3, 1, "", "setEpochsNumber"], [32, 3, 1, "", "setFeatureScaling"], [32, 3, 1, "", "setFixImbalance"], [32, 3, 1, "", "setForceInputTypeValidation"], [32, 3, 1, "", "setInputCols"], [32, 3, 1, "", "setLabelCol"], [32, 3, 1, "", "setLazyAnnotator"], [32, 3, 1, "", "setLearningRate"], [32, 3, 1, "", "setModelFile"], [32, 3, 1, "", "setMultiClass"], [32, 3, 1, "", "setOutputCol"], [32, 3, 1, "", "setOutputLogsPath"], [32, 3, 1, "", "setParamValue"], [32, 3, 1, "", "setValidationSplit"], [32, 2, 1, "", "skipLPInputColsValidation"], [32, 2, 1, "", "uid"], [32, 2, 1, "", "validationSplit"], [32, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[32, 2, 1, "", "classes"], [32, 3, 1, "", "clear"], [32, 3, 1, "", "copy"], [32, 2, 1, "", "datasetInfo"], [32, 2, 1, "", "doExceptionHandling"], [32, 3, 1, "", "explainParam"], [32, 3, 1, "", "explainParams"], [32, 3, 1, "", "extractParamMap"], [32, 2, 1, "", "featureScaling"], [32, 3, 1, "", "getInputCols"], [32, 3, 1, "", "getLazyAnnotator"], [32, 3, 1, "", "getOrDefault"], [32, 3, 1, "", "getOutputCol"], [32, 3, 1, "", "getParam"], [32, 3, 1, "", "getParamValue"], [32, 2, 1, "", "getter_attrs"], [32, 3, 1, "", "hasDefault"], [32, 3, 1, "", "hasParam"], [32, 2, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "inputCols"], [32, 3, 1, "", "inputColsValidation"], [32, 3, 1, "", "isDefined"], [32, 3, 1, "", "isSet"], [32, 2, 1, "", "lazyAnnotator"], [32, 3, 1, "", "load"], [32, 2, 1, "", "multiClass"], [32, 2, 1, "", "name"], [32, 2, 1, "", "optionalInputAnnotatorTypes"], [32, 2, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "outputCol"], [32, 3, 1, "", "pretrained"], [32, 3, 1, "", "read"], [32, 3, 1, "", "save"], [32, 3, 1, "", "set"], [32, 3, 1, "", "setDatasetInfo"], [32, 3, 1, "", "setDoExceptionHandling"], [32, 3, 1, "", "setFeatureScaling"], [32, 3, 1, "", "setForceInputTypeValidation"], [32, 3, 1, "", "setInputCols"], [32, 3, 1, "", "setLazyAnnotator"], [32, 3, 1, "", "setMultiClass"], [32, 3, 1, "", "setOutputCol"], [32, 3, 1, "", "setParamValue"], [32, 3, 1, "", "setParams"], [32, 2, 1, "", "skipLPInputColsValidation"], [32, 3, 1, "", "transform"], [32, 2, 1, "", "uid"], [32, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[33, 1, 1, "", "GenericSVMClassifierApproach"], [33, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[33, 2, 1, "", "batchSize"], [33, 3, 1, "", "clear"], [33, 3, 1, "", "copy"], [33, 2, 1, "", "datasetInfo"], [33, 2, 1, "", "doExceptionHandling"], [33, 2, 1, "", "dropout"], [33, 2, 1, "", "engine"], [33, 2, 1, "", "epochsN"], [33, 3, 1, "", "explainParam"], [33, 3, 1, "", "explainParams"], [33, 3, 1, "", "extractParamMap"], [33, 2, 1, "", "featureScaling"], [33, 3, 1, "", "fit"], [33, 3, 1, "", "fitMultiple"], [33, 2, 1, "", "fixImbalance"], [33, 3, 1, "", "getEngine"], [33, 3, 1, "", "getInputCols"], [33, 3, 1, "", "getLazyAnnotator"], [33, 3, 1, "", "getOrDefault"], [33, 3, 1, "", "getOutputCol"], [33, 3, 1, "", "getParam"], [33, 3, 1, "", "getParamValue"], [33, 2, 1, "", "getter_attrs"], [33, 3, 1, "", "hasDefault"], [33, 3, 1, "", "hasParam"], [33, 2, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "inputCols"], [33, 3, 1, "", "inputColsValidation"], [33, 3, 1, "", "isDefined"], [33, 3, 1, "", "isSet"], [33, 2, 1, "", "labelColumn"], [33, 2, 1, "", "lazyAnnotator"], [33, 2, 1, "", "learningRate"], [33, 3, 1, "", "load"], [33, 2, 1, "", "modelFile"], [33, 2, 1, "", "multiClass"], [33, 2, 1, "", "name"], [33, 2, 1, "", "optionalInputAnnotatorTypes"], [33, 2, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "outputCol"], [33, 2, 1, "", "outputLogsPath"], [33, 3, 1, "", "read"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set"], [33, 3, 1, "", "setBatchSize"], [33, 3, 1, "", "setDatasetInfo"], [33, 3, 1, "", "setDoExceptionHandling"], [33, 3, 1, "", "setDropout"], [33, 3, 1, "", "setEpochsNumber"], [33, 3, 1, "", "setFeatureScaling"], [33, 3, 1, "", "setFixImbalance"], [33, 3, 1, "", "setForceInputTypeValidation"], [33, 3, 1, "", "setInputCols"], [33, 3, 1, "", "setLabelCol"], [33, 3, 1, "", "setLazyAnnotator"], [33, 3, 1, "", "setLearningRate"], [33, 3, 1, "", "setModelFile"], [33, 3, 1, "", "setMultiClass"], [33, 3, 1, "", "setOutputCol"], [33, 3, 1, "", "setOutputLogsPath"], [33, 3, 1, "", "setParamValue"], [33, 3, 1, "", "setValidationSplit"], [33, 2, 1, "", "skipLPInputColsValidation"], [33, 2, 1, "", "uid"], [33, 2, 1, "", "validationSplit"], [33, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[33, 2, 1, "", "classes"], [33, 3, 1, "", "clear"], [33, 3, 1, "", "copy"], [33, 2, 1, "", "datasetInfo"], [33, 2, 1, "", "doExceptionHandling"], [33, 3, 1, "", "explainParam"], [33, 3, 1, "", "explainParams"], [33, 3, 1, "", "extractParamMap"], [33, 2, 1, "", "featureScaling"], [33, 3, 1, "", "getInputCols"], [33, 3, 1, "", "getLazyAnnotator"], [33, 3, 1, "", "getOrDefault"], [33, 3, 1, "", "getOutputCol"], [33, 3, 1, "", "getParam"], [33, 3, 1, "", "getParamValue"], [33, 2, 1, "", "getter_attrs"], [33, 3, 1, "", "hasDefault"], [33, 3, 1, "", "hasParam"], [33, 2, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "inputCols"], [33, 3, 1, "", "inputColsValidation"], [33, 3, 1, "", "isDefined"], [33, 3, 1, "", "isSet"], [33, 2, 1, "", "lazyAnnotator"], [33, 3, 1, "", "load"], [33, 2, 1, "", "multiClass"], [33, 2, 1, "", "name"], [33, 2, 1, "", "optionalInputAnnotatorTypes"], [33, 2, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "outputCol"], [33, 3, 1, "", "pretrained"], [33, 3, 1, "", "read"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set"], [33, 3, 1, "", "setDatasetInfo"], [33, 3, 1, "", "setDoExceptionHandling"], [33, 3, 1, "", "setFeatureScaling"], [33, 3, 1, "", "setForceInputTypeValidation"], [33, 3, 1, "", "setInputCols"], [33, 3, 1, "", "setLazyAnnotator"], [33, 3, 1, "", "setMultiClass"], [33, 3, 1, "", "setOutputCol"], [33, 3, 1, "", "setParamValue"], [33, 3, 1, "", "setParams"], [33, 2, 1, "", "skipLPInputColsValidation"], [33, 3, 1, "", "transform"], [33, 2, 1, "", "uid"], [33, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[35, 1, 1, "", "LargeFewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel": [[35, 2, 1, "", "caseSensitive"], [35, 3, 1, "", "clear"], [35, 3, 1, "", "copy"], [35, 3, 1, "", "explainParam"], [35, 3, 1, "", "explainParams"], [35, 3, 1, "", "extractParamMap"], [35, 3, 1, "", "getCaseSensitive"], [35, 3, 1, "", "getClasses"], [35, 3, 1, "", "getInputCols"], [35, 3, 1, "", "getLazyAnnotator"], [35, 3, 1, "", "getOrDefault"], [35, 3, 1, "", "getOutputCol"], [35, 3, 1, "", "getParam"], [35, 3, 1, "", "getParamValue"], [35, 2, 1, "", "getter_attrs"], [35, 3, 1, "", "hasDefault"], [35, 2, 1, "", "hasDifferentiableHead"], [35, 3, 1, "", "hasParam"], [35, 2, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "inputCols"], [35, 3, 1, "", "inputColsValidation"], [35, 3, 1, "", "isDefined"], [35, 3, 1, "", "isSet"], [35, 2, 1, "", "lazyAnnotator"], [35, 3, 1, "", "load"], [35, 3, 1, "", "loadSavedModel"], [35, 2, 1, "", "modelArchitecture"], [35, 2, 1, "", "name"], [35, 2, 1, "", "optionalInputAnnotatorTypes"], [35, 2, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "outputCol"], [35, 3, 1, "", "pretrained"], [35, 3, 1, "", "read"], [35, 3, 1, "", "save"], [35, 3, 1, "", "set"], [35, 3, 1, "", "setCaseSensitive"], [35, 3, 1, "", "setForceInputTypeValidation"], [35, 3, 1, "", "setInputCols"], [35, 3, 1, "", "setLazyAnnotator"], [35, 3, 1, "", "setOutputCol"], [35, 3, 1, "", "setParamValue"], [35, 3, 1, "", "setParams"], [35, 2, 1, "", "skipLPInputColsValidation"], [35, 3, 1, "", "transform"], [35, 2, 1, "", "uid"], [35, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[36, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[36, 2, 1, "", "caseSensitive"], [36, 3, 1, "", "clear"], [36, 2, 1, "", "coalesceSentences"], [36, 2, 1, "", "configProtoBytes"], [36, 3, 1, "", "copy"], [36, 3, 1, "", "explainParam"], [36, 3, 1, "", "explainParams"], [36, 3, 1, "", "extractParamMap"], [36, 3, 1, "", "getCaseSensitive"], [36, 3, 1, "", "getClasses"], [36, 3, 1, "", "getInputCols"], [36, 3, 1, "", "getLazyAnnotator"], [36, 3, 1, "", "getOrDefault"], [36, 3, 1, "", "getOutputCol"], [36, 3, 1, "", "getParam"], [36, 3, 1, "", "getParamValue"], [36, 2, 1, "", "getter_attrs"], [36, 3, 1, "", "hasDefault"], [36, 3, 1, "", "hasParam"], [36, 2, 1, "", "inputAnnotatorTypes"], [36, 2, 1, "", "inputCols"], [36, 3, 1, "", "inputColsValidation"], [36, 3, 1, "", "isDefined"], [36, 3, 1, "", "isSet"], [36, 2, 1, "", "lazyAnnotator"], [36, 3, 1, "", "load"], [36, 3, 1, "", "loadSavedModel"], [36, 3, 1, "", "loadSavedModelOpenSource"], [36, 2, 1, "", "maxSentenceLength"], [36, 2, 1, "", "name"], [36, 2, 1, "", "optionalInputAnnotatorTypes"], [36, 2, 1, "", "outputAnnotatorType"], [36, 2, 1, "", "outputCol"], [36, 3, 1, "", "pretrained"], [36, 3, 1, "", "read"], [36, 3, 1, "", "save"], [36, 3, 1, "", "set"], [36, 3, 1, "", "setCaseSensitive"], [36, 3, 1, "", "setCoalesceSentences"], [36, 3, 1, "", "setConfigProtoBytes"], [36, 3, 1, "", "setForceInputTypeValidation"], [36, 3, 1, "", "setInputCols"], [36, 3, 1, "", "setLazyAnnotator"], [36, 3, 1, "", "setMaxSentenceLength"], [36, 3, 1, "", "setOutputCol"], [36, 3, 1, "", "setParamValue"], [36, 3, 1, "", "setParams"], [36, 2, 1, "", "skipLPInputColsValidation"], [36, 3, 1, "", "transform"], [36, 2, 1, "", "uid"], [36, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[37, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[37, 2, 1, "", "caseSensitive"], [37, 3, 1, "", "clear"], [37, 2, 1, "", "configProtoBytes"], [37, 3, 1, "", "copy"], [37, 3, 1, "", "explainParam"], [37, 3, 1, "", "explainParams"], [37, 3, 1, "", "extractParamMap"], [37, 3, 1, "", "getCaseSensitive"], [37, 3, 1, "", "getClasses"], [37, 3, 1, "", "getInputCols"], [37, 3, 1, "", "getLazyAnnotator"], [37, 3, 1, "", "getOrDefault"], [37, 3, 1, "", "getOutputCol"], [37, 3, 1, "", "getParam"], [37, 3, 1, "", "getParamValue"], [37, 2, 1, "", "getter_attrs"], [37, 3, 1, "", "hasDefault"], [37, 3, 1, "", "hasParam"], [37, 2, 1, "", "inputAnnotatorTypes"], [37, 2, 1, "", "inputCols"], [37, 3, 1, "", "inputColsValidation"], [37, 3, 1, "", "isDefined"], [37, 3, 1, "", "isSet"], [37, 2, 1, "", "lazyAnnotator"], [37, 3, 1, "", "load"], [37, 3, 1, "", "loadSavedModel"], [37, 3, 1, "", "loadSavedModelOpenSource"], [37, 2, 1, "", "maxSentenceLength"], [37, 2, 1, "", "name"], [37, 2, 1, "", "optionalInputAnnotatorTypes"], [37, 2, 1, "", "outputAnnotatorType"], [37, 2, 1, "", "outputCol"], [37, 3, 1, "", "pretrained"], [37, 3, 1, "", "read"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set"], [37, 3, 1, "", "setCaseSensitive"], [37, 3, 1, "", "setConfigProtoBytes"], [37, 3, 1, "", "setForceInputTypeValidation"], [37, 3, 1, "", "setInputCols"], [37, 3, 1, "", "setLazyAnnotator"], [37, 3, 1, "", "setMaxSentenceLength"], [37, 3, 1, "", "setOutputCol"], [37, 3, 1, "", "setParamValue"], [37, 3, 1, "", "setParams"], [37, 2, 1, "", "skipLPInputColsValidation"], [37, 3, 1, "", "transform"], [37, 2, 1, "", "uid"], [37, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[38, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[38, 2, 1, "", "caseSensitive"], [38, 3, 1, "", "clear"], [38, 2, 1, "", "coalesceSentences"], [38, 2, 1, "", "configProtoBytes"], [38, 3, 1, "", "copy"], [38, 3, 1, "", "explainParam"], [38, 3, 1, "", "explainParams"], [38, 3, 1, "", "extractParamMap"], [38, 3, 1, "", "getCaseSensitive"], [38, 3, 1, "", "getClasses"], [38, 3, 1, "", "getInputCols"], [38, 3, 1, "", "getLazyAnnotator"], [38, 3, 1, "", "getOrDefault"], [38, 3, 1, "", "getOutputCol"], [38, 3, 1, "", "getParam"], [38, 3, 1, "", "getParamValue"], [38, 2, 1, "", "getter_attrs"], [38, 3, 1, "", "hasDefault"], [38, 3, 1, "", "hasParam"], [38, 2, 1, "", "inputAnnotatorTypes"], [38, 2, 1, "", "inputCols"], [38, 3, 1, "", "inputColsValidation"], [38, 3, 1, "", "isDefined"], [38, 3, 1, "", "isSet"], [38, 2, 1, "", "lazyAnnotator"], [38, 3, 1, "", "load"], [38, 3, 1, "", "loadSavedModel"], [38, 3, 1, "", "loadSavedModelOpenSource"], [38, 2, 1, "", "maxSentenceLength"], [38, 2, 1, "", "name"], [38, 2, 1, "", "optionalInputAnnotatorTypes"], [38, 2, 1, "", "outputAnnotatorType"], [38, 2, 1, "", "outputCol"], [38, 3, 1, "", "pretrained"], [38, 3, 1, "", "read"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set"], [38, 3, 1, "", "setCaseSensitive"], [38, 3, 1, "", "setCoalesceSentences"], [38, 3, 1, "", "setConfigProtoBytes"], [38, 3, 1, "", "setForceInputTypeValidation"], [38, 3, 1, "", "setInputCols"], [38, 3, 1, "", "setLazyAnnotator"], [38, 3, 1, "", "setMaxSentenceLength"], [38, 3, 1, "", "setOutputCol"], [38, 3, 1, "", "setParamValue"], [38, 3, 1, "", "setParams"], [38, 2, 1, "", "skipLPInputColsValidation"], [38, 3, 1, "", "transform"], [38, 2, 1, "", "uid"], [38, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context": [[39, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[39, 1, 1, "", "ContextualParserApproach"], [39, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[39, 2, 1, "", "caseSensitive"], [39, 3, 1, "", "clear"], [39, 2, 1, "", "completeContextMatch"], [39, 3, 1, "", "copy"], [39, 2, 1, "", "dictionary"], [39, 2, 1, "", "doExceptionHandling"], [39, 3, 1, "", "explainParam"], [39, 3, 1, "", "explainParams"], [39, 3, 1, "", "extractParamMap"], [39, 3, 1, "", "fit"], [39, 3, 1, "", "fitMultiple"], [39, 3, 1, "", "getInputCols"], [39, 3, 1, "", "getLazyAnnotator"], [39, 3, 1, "", "getOrDefault"], [39, 3, 1, "", "getOutputCol"], [39, 3, 1, "", "getParam"], [39, 3, 1, "", "getParamValue"], [39, 2, 1, "", "getter_attrs"], [39, 3, 1, "", "hasDefault"], [39, 3, 1, "", "hasParam"], [39, 2, 1, "", "inputAnnotatorTypes"], [39, 2, 1, "", "inputCols"], [39, 3, 1, "", "inputColsValidation"], [39, 3, 1, "", "isDefined"], [39, 3, 1, "", "isSet"], [39, 2, 1, "", "jsonPath"], [39, 2, 1, "", "lazyAnnotator"], [39, 3, 1, "", "load"], [39, 2, 1, "", "optionalContextRules"], [39, 2, 1, "", "optionalInputAnnotatorTypes"], [39, 2, 1, "", "outputAnnotatorType"], [39, 2, 1, "", "outputCol"], [39, 2, 1, "", "prefixAndSuffixMatch"], [39, 3, 1, "", "read"], [39, 3, 1, "", "save"], [39, 3, 1, "", "set"], [39, 3, 1, "", "setCaseSensitive"], [39, 3, 1, "", "setCompleteContextMatch"], [39, 3, 1, "", "setDictionary"], [39, 3, 1, "", "setDoExceptionHandling"], [39, 3, 1, "", "setForceInputTypeValidation"], [39, 3, 1, "", "setInputCols"], [39, 3, 1, "", "setJsonPath"], [39, 3, 1, "", "setLazyAnnotator"], [39, 3, 1, "", "setOptionalContextRules"], [39, 3, 1, "", "setOutputCol"], [39, 3, 1, "", "setParamValue"], [39, 3, 1, "", "setPrefixAndSuffixMatch"], [39, 3, 1, "", "setShortestContextMatch"], [39, 2, 1, "", "shortestContextMatch"], [39, 2, 1, "", "skipLPInputColsValidation"], [39, 2, 1, "", "uid"], [39, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[39, 2, 1, "", "caseSensitive"], [39, 3, 1, "", "clear"], [39, 3, 1, "", "copy"], [39, 2, 1, "", "doExceptionHandling"], [39, 3, 1, "", "explainParam"], [39, 3, 1, "", "explainParams"], [39, 3, 1, "", "extractParamMap"], [39, 3, 1, "", "getInputCols"], [39, 3, 1, "", "getLazyAnnotator"], [39, 3, 1, "", "getOrDefault"], [39, 3, 1, "", "getOutputCol"], [39, 3, 1, "", "getParam"], [39, 3, 1, "", "getParamValue"], [39, 2, 1, "", "getter_attrs"], [39, 3, 1, "", "hasDefault"], [39, 3, 1, "", "hasParam"], [39, 2, 1, "", "inputAnnotatorTypes"], [39, 2, 1, "", "inputCols"], [39, 3, 1, "", "inputColsValidation"], [39, 3, 1, "", "isDefined"], [39, 3, 1, "", "isSet"], [39, 2, 1, "", "lazyAnnotator"], [39, 3, 1, "", "load"], [39, 2, 1, "", "name"], [39, 2, 1, "", "optionalContextRules"], [39, 2, 1, "", "optionalInputAnnotatorTypes"], [39, 2, 1, "", "outputAnnotatorType"], [39, 2, 1, "", "outputCol"], [39, 2, 1, "", "prefixAndSuffixMatch"], [39, 3, 1, "", "pretrained"], [39, 3, 1, "", "read"], [39, 3, 1, "", "save"], [39, 3, 1, "", "set"], [39, 3, 1, "", "setCaseSensitive"], [39, 3, 1, "", "setDoExceptionHandling"], [39, 3, 1, "", "setForceInputTypeValidation"], [39, 3, 1, "", "setInputCols"], [39, 3, 1, "", "setLazyAnnotator"], [39, 3, 1, "", "setOptionalContextRules"], [39, 3, 1, "", "setOutputCol"], [39, 3, 1, "", "setParamValue"], [39, 3, 1, "", "setParams"], [39, 3, 1, "", "setPrefixAndSuffixMatch"], [39, 3, 1, "", "setShortestContextMatch"], [39, 2, 1, "", "shortestContextMatch"], [39, 2, 1, "", "skipLPInputColsValidation"], [39, 3, 1, "", "transform"], [39, 2, 1, "", "uid"], [39, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid": [[41, 0, 0, "-", "deIdentification"], [42, 0, 0, "-", "deidentication_params"], [43, 0, 0, "-", "doccument_hashcoder"], [45, 0, 0, "-", "light_deIdentification"], [46, 0, 0, "-", "name_obfuscator"], [47, 0, 0, "-", "reIdentification"], [48, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[41, 1, 1, "", "DeIdentification"], [41, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[41, 2, 1, "", "ageRanges"], [41, 2, 1, "", "ageRangesByHipaa"], [41, 2, 1, "", "blackList"], [41, 2, 1, "", "blackListEntities"], [41, 3, 1, "", "clear"], [41, 2, 1, "", "combineRegexPatterns"], [41, 2, 1, "", "consistentObfuscation"], [41, 3, 1, "", "copy"], [41, 2, 1, "", "dateFormats"], [41, 2, 1, "", "dateTag"], [41, 2, 1, "", "dateToYear"], [41, 2, 1, "", "days"], [41, 2, 1, "", "doExceptionHandling"], [41, 2, 1, "", "entityCasingModesPath"], [41, 3, 1, "", "explainParam"], [41, 3, 1, "", "explainParams"], [41, 3, 1, "", "extractParamMap"], [41, 3, 1, "", "fit"], [41, 3, 1, "", "fitMultiple"], [41, 2, 1, "", "fixedMaskLength"], [41, 2, 1, "", "genderAwareness"], [41, 3, 1, "", "getBlackList"], [41, 3, 1, "", "getInputCols"], [41, 3, 1, "", "getLazyAnnotator"], [41, 3, 1, "", "getOrDefault"], [41, 3, 1, "", "getOutputCol"], [41, 3, 1, "", "getParam"], [41, 3, 1, "", "getParamValue"], [41, 3, 1, "", "getSameLengthFormattedEntities"], [41, 3, 1, "", "getUseShiftDays"], [41, 2, 1, "", "getter_attrs"], [41, 3, 1, "", "hasDefault"], [41, 3, 1, "", "hasParam"], [41, 2, 1, "", "ignoreRegex"], [41, 2, 1, "", "inputAnnotatorTypes"], [41, 2, 1, "", "inputCols"], [41, 3, 1, "", "inputColsValidation"], [41, 3, 1, "", "isDefined"], [41, 2, 1, "", "isRandomDateDisplacement"], [41, 3, 1, "", "isSet"], [41, 2, 1, "", "keepYear"], [41, 2, 1, "", "language"], [41, 2, 1, "", "lazyAnnotator"], [41, 3, 1, "", "load"], [41, 2, 1, "", "mappingsColumn"], [41, 2, 1, "", "maskingPolicy"], [41, 2, 1, "", "metadataMaskingPolicy"], [41, 2, 1, "", "minYear"], [41, 2, 1, "", "mode"], [41, 2, 1, "", "name"], [41, 2, 1, "", "obfuscateByAgeGroups"], [41, 2, 1, "", "obfuscateDate"], [41, 2, 1, "", "obfuscateRefFile"], [41, 2, 1, "", "obfuscateRefSource"], [41, 2, 1, "", "obfuscationStrategyOnException"], [41, 2, 1, "", "optionalInputAnnotatorTypes"], [41, 2, 1, "", "outputAnnotatorType"], [41, 2, 1, "", "outputAsDocument"], [41, 2, 1, "", "outputCol"], [41, 3, 1, "", "read"], [41, 2, 1, "", "refFileFormat"], [41, 2, 1, "", "refSep"], [41, 2, 1, "", "regexOverride"], [41, 2, 1, "", "regexPatternsDictionary"], [41, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [41, 2, 1, "", "region"], [41, 2, 1, "", "returnEntityMappings"], [41, 2, 1, "", "sameEntityThreshold"], [41, 2, 1, "", "sameLengthFormattedEntities"], [41, 3, 1, "", "save"], [41, 2, 1, "", "seed"], [41, 2, 1, "", "selectiveObfuscationModesPath"], [41, 3, 1, "", "set"], [41, 3, 1, "", "setAgeGroups"], [41, 3, 1, "", "setAgeRanges"], [41, 3, 1, "", "setAgeRangesByHipaa"], [41, 3, 1, "", "setBlackList"], [41, 3, 1, "", "setBlackListEntities"], [41, 3, 1, "", "setCombineRegexPatterns"], [41, 3, 1, "", "setConsistentObfuscation"], [41, 3, 1, "", "setDateFormats"], [41, 3, 1, "", "setDateTag"], [41, 3, 1, "", "setDateToYear"], [41, 3, 1, "", "setDays"], [41, 3, 1, "", "setDoExceptionHandling"], [41, 3, 1, "", "setEntityCasingModes"], [41, 3, 1, "", "setFixedMaskLength"], [41, 3, 1, "", "setForceInputTypeValidation"], [41, 3, 1, "", "setGenderAwareness"], [41, 3, 1, "", "setIgnoreRegex"], [41, 3, 1, "", "setInputCols"], [41, 3, 1, "", "setIsRandomDateDisplacement"], [41, 3, 1, "", "setKeepYear"], [41, 3, 1, "", "setLanguage"], [41, 3, 1, "", "setLazyAnnotator"], [41, 3, 1, "", "setMappingsColumn"], [41, 3, 1, "", "setMaskingPolicy"], [41, 3, 1, "", "setMetadataMaskingPolicy"], [41, 3, 1, "", "setMinYear"], [41, 3, 1, "", "setMode"], [41, 3, 1, "", "setObfuscateByAgeGroups"], [41, 3, 1, "", "setObfuscateDate"], [41, 3, 1, "", "setObfuscateRefFile"], [41, 3, 1, "", "setObfuscateRefSource"], [41, 3, 1, "", "setObfuscationStrategyOnException"], [41, 3, 1, "", "setOutputAsDocument"], [41, 3, 1, "", "setOutputCol"], [41, 3, 1, "", "setParamValue"], [41, 3, 1, "", "setRefFileFormat"], [41, 3, 1, "", "setRefSep"], [41, 3, 1, "", "setRegexOverride"], [41, 3, 1, "", "setRegexPatternsDictionary"], [41, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [41, 3, 1, "", "setRegion"], [41, 3, 1, "", "setReturnEntityMappings"], [41, 3, 1, "", "setSameEntityThreshold"], [41, 3, 1, "", "setSameLengthFormattedEntities"], [41, 3, 1, "", "setSeed"], [41, 3, 1, "", "setSelectiveObfuscationModes"], [41, 3, 1, "", "setUnnormalizedDateMode"], [41, 3, 1, "", "setUseShifDays"], [41, 3, 1, "", "setUseShiftDays"], [41, 3, 1, "", "setZipCodeTag"], [41, 2, 1, "", "skipLPInputColsValidation"], [41, 2, 1, "", "uid"], [41, 2, 1, "", "unnormalizedDateMode"], [41, 2, 1, "", "useShifDays"], [41, 3, 1, "", "write"], [41, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[41, 2, 1, "", "ageRanges"], [41, 2, 1, "", "ageRangesByHipaa"], [41, 2, 1, "", "blackList"], [41, 2, 1, "", "blackListEntities"], [41, 3, 1, "", "clear"], [41, 2, 1, "", "consistentObfuscation"], [41, 3, 1, "", "copy"], [41, 2, 1, "", "dateFormats"], [41, 2, 1, "", "dateTag"], [41, 2, 1, "", "dateToYear"], [41, 2, 1, "", "days"], [41, 2, 1, "", "doExceptionHandling"], [41, 3, 1, "", "explainParam"], [41, 3, 1, "", "explainParams"], [41, 3, 1, "", "extractParamMap"], [41, 2, 1, "", "fixedMaskLength"], [41, 2, 1, "", "genderAwareness"], [41, 3, 1, "", "getBlackList"], [41, 3, 1, "", "getInputCols"], [41, 3, 1, "", "getLazyAnnotator"], [41, 3, 1, "", "getOrDefault"], [41, 3, 1, "", "getOutputCol"], [41, 3, 1, "", "getParam"], [41, 3, 1, "", "getParamValue"], [41, 3, 1, "", "getRegexEntities"], [41, 3, 1, "", "getSameLengthFormattedEntities"], [41, 3, 1, "", "getUseShiftDays"], [41, 2, 1, "", "getter_attrs"], [41, 3, 1, "", "hasDefault"], [41, 3, 1, "", "hasParam"], [41, 2, 1, "", "ignoreRegex"], [41, 2, 1, "", "inputAnnotatorTypes"], [41, 2, 1, "", "inputCols"], [41, 3, 1, "", "inputColsValidation"], [41, 3, 1, "", "isDefined"], [41, 2, 1, "", "isRandomDateDisplacement"], [41, 3, 1, "", "isSet"], [41, 2, 1, "", "keepYear"], [41, 2, 1, "", "language"], [41, 2, 1, "", "lazyAnnotator"], [41, 3, 1, "", "load"], [41, 2, 1, "", "mappingsColumn"], [41, 2, 1, "", "maskingPolicy"], [41, 2, 1, "", "metadataMaskingPolicy"], [41, 2, 1, "", "minYear"], [41, 2, 1, "", "mode"], [41, 2, 1, "", "name"], [41, 2, 1, "", "obfuscateByAgeGroups"], [41, 2, 1, "", "obfuscateDate"], [41, 2, 1, "", "obfuscateRefSource"], [41, 2, 1, "", "obfuscationStrategyOnException"], [41, 2, 1, "", "optionalInputAnnotatorTypes"], [41, 2, 1, "", "outputAnnotatorType"], [41, 2, 1, "", "outputAsDocument"], [41, 2, 1, "", "outputCol"], [41, 3, 1, "", "pretrained"], [41, 3, 1, "", "read"], [41, 2, 1, "", "regexEntities"], [41, 2, 1, "", "regexOverride"], [41, 2, 1, "", "region"], [41, 2, 1, "", "returnEntityMappings"], [41, 2, 1, "", "sameEntityThreshold"], [41, 2, 1, "", "sameLengthFormattedEntities"], [41, 3, 1, "", "save"], [41, 2, 1, "", "seed"], [41, 3, 1, "", "set"], [41, 3, 1, "", "setAgeGroups"], [41, 3, 1, "", "setAgeRanges"], [41, 3, 1, "", "setAgeRangesByHipaa"], [41, 3, 1, "", "setBlackList"], [41, 3, 1, "", "setBlackListEntities"], [41, 3, 1, "", "setConsistentObfuscation"], [41, 3, 1, "", "setDateFormats"], [41, 3, 1, "", "setDateTag"], [41, 3, 1, "", "setDateToYear"], [41, 3, 1, "", "setDays"], [41, 3, 1, "", "setDoExceptionHandling"], [41, 3, 1, "", "setFixedMaskLength"], [41, 3, 1, "", "setForceInputTypeValidation"], [41, 3, 1, "", "setGenderAwareness"], [41, 3, 1, "", "setIgnoreRegex"], [41, 3, 1, "", "setInputCols"], [41, 3, 1, "", "setIsRandomDateDisplacement"], [41, 3, 1, "", "setKeepYear"], [41, 3, 1, "", "setLanguage"], [41, 3, 1, "", "setLazyAnnotator"], [41, 3, 1, "", "setMappingsColumn"], [41, 3, 1, "", "setMaskingPolicy"], [41, 3, 1, "", "setMetadataMaskingPolicy"], [41, 3, 1, "", "setMinYear"], [41, 3, 1, "", "setMode"], [41, 3, 1, "", "setObfuscateByAgeGroups"], [41, 3, 1, "", "setObfuscateDate"], [41, 3, 1, "", "setObfuscateRefSource"], [41, 3, 1, "", "setObfuscationStrategyOnException"], [41, 3, 1, "", "setOutputAsDocument"], [41, 3, 1, "", "setOutputCol"], [41, 3, 1, "", "setParamValue"], [41, 3, 1, "", "setParams"], [41, 3, 1, "", "setRegexOverride"], [41, 3, 1, "", "setRegion"], [41, 3, 1, "", "setReturnEntityMappings"], [41, 3, 1, "", "setSameEntityThreshold"], [41, 3, 1, "", "setSameLengthFormattedEntities"], [41, 3, 1, "", "setSeed"], [41, 3, 1, "", "setUnnormalizedDateMode"], [41, 3, 1, "", "setUseShifDays"], [41, 3, 1, "", "setUseShiftDays"], [41, 3, 1, "", "setZipCodeTag"], [41, 2, 1, "", "skipLPInputColsValidation"], [41, 3, 1, "", "transform"], [41, 2, 1, "", "uid"], [41, 2, 1, "", "unnormalizedDateMode"], [41, 2, 1, "", "useShifDays"], [41, 3, 1, "", "write"], [41, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[42, 1, 1, "", "DeIdentificationParams"]], "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams": [[42, 2, 1, "", "ageRanges"], [42, 2, 1, "", "ageRangesByHipaa"], [42, 2, 1, "", "blackList"], [42, 2, 1, "", "blackListEntities"], [42, 2, 1, "", "consistentObfuscation"], [42, 2, 1, "", "dateFormats"], [42, 2, 1, "", "dateTag"], [42, 2, 1, "", "dateToYear"], [42, 2, 1, "", "days"], [42, 2, 1, "", "fixedMaskLength"], [42, 2, 1, "", "genderAwareness"], [42, 3, 1, "", "getBlackList"], [42, 3, 1, "", "getSameLengthFormattedEntities"], [42, 3, 1, "", "getUseShiftDays"], [42, 2, 1, "", "ignoreRegex"], [42, 2, 1, "", "isRandomDateDisplacement"], [42, 2, 1, "", "keepYear"], [42, 2, 1, "", "language"], [42, 2, 1, "", "mappingsColumn"], [42, 2, 1, "", "maskingPolicy"], [42, 2, 1, "", "metadataMaskingPolicy"], [42, 2, 1, "", "minYear"], [42, 2, 1, "", "mode"], [42, 2, 1, "", "obfuscateByAgeGroups"], [42, 2, 1, "", "obfuscateDate"], [42, 2, 1, "", "obfuscateRefSource"], [42, 2, 1, "", "obfuscationStrategyOnException"], [42, 2, 1, "", "outputAsDocument"], [42, 2, 1, "", "regexOverride"], [42, 2, 1, "", "region"], [42, 2, 1, "", "returnEntityMappings"], [42, 2, 1, "", "sameEntityThreshold"], [42, 2, 1, "", "sameLengthFormattedEntities"], [42, 2, 1, "", "seed"], [42, 3, 1, "", "setAgeGroups"], [42, 3, 1, "", "setAgeRanges"], [42, 3, 1, "", "setAgeRangesByHipaa"], [42, 3, 1, "", "setBlackList"], [42, 3, 1, "", "setBlackListEntities"], [42, 3, 1, "", "setConsistentObfuscation"], [42, 3, 1, "", "setDateFormats"], [42, 3, 1, "", "setDateTag"], [42, 3, 1, "", "setDateToYear"], [42, 3, 1, "", "setDays"], [42, 3, 1, "", "setFixedMaskLength"], [42, 3, 1, "", "setGenderAwareness"], [42, 3, 1, "", "setIgnoreRegex"], [42, 3, 1, "", "setIsRandomDateDisplacement"], [42, 3, 1, "", "setKeepYear"], [42, 3, 1, "", "setLanguage"], [42, 3, 1, "", "setMappingsColumn"], [42, 3, 1, "", "setMaskingPolicy"], [42, 3, 1, "", "setMetadataMaskingPolicy"], [42, 3, 1, "", "setMinYear"], [42, 3, 1, "", "setMode"], [42, 3, 1, "", "setObfuscateByAgeGroups"], [42, 3, 1, "", "setObfuscateDate"], [42, 3, 1, "", "setObfuscateRefSource"], [42, 3, 1, "", "setObfuscationStrategyOnException"], [42, 3, 1, "", "setOutputAsDocument"], [42, 3, 1, "", "setRegexOverride"], [42, 3, 1, "", "setRegion"], [42, 3, 1, "", "setReturnEntityMappings"], [42, 3, 1, "", "setSameEntityThreshold"], [42, 3, 1, "", "setSameLengthFormattedEntities"], [42, 3, 1, "", "setSeed"], [42, 3, 1, "", "setUnnormalizedDateMode"], [42, 3, 1, "", "setUseShifDays"], [42, 3, 1, "", "setUseShiftDays"], [42, 3, 1, "", "setZipCodeTag"], [42, 2, 1, "", "unnormalizedDateMode"], [42, 2, 1, "", "useShifDays"], [42, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[43, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[43, 3, 1, "", "clear"], [43, 3, 1, "", "copy"], [43, 2, 1, "", "dateShiftColumn"], [43, 3, 1, "", "explainParam"], [43, 3, 1, "", "explainParams"], [43, 3, 1, "", "extractParamMap"], [43, 3, 1, "", "getInputCols"], [43, 3, 1, "", "getLazyAnnotator"], [43, 3, 1, "", "getOrDefault"], [43, 3, 1, "", "getOutputCol"], [43, 3, 1, "", "getParam"], [43, 3, 1, "", "getParamValue"], [43, 2, 1, "", "getter_attrs"], [43, 3, 1, "", "hasDefault"], [43, 3, 1, "", "hasParam"], [43, 2, 1, "", "inputAnnotatorTypes"], [43, 2, 1, "", "inputCols"], [43, 3, 1, "", "inputColsValidation"], [43, 3, 1, "", "isDefined"], [43, 3, 1, "", "isSet"], [43, 2, 1, "", "kwargs"], [43, 2, 1, "", "lazyAnnotator"], [43, 3, 1, "", "load"], [43, 2, 1, "", "name"], [43, 2, 1, "", "newDateShift"], [43, 2, 1, "", "optionalInputAnnotatorTypes"], [43, 2, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "outputCol"], [43, 2, 1, "", "patientIdColumn"], [43, 2, 1, "", "rangeDays"], [43, 3, 1, "", "read"], [43, 3, 1, "", "save"], [43, 2, 1, "", "seed"], [43, 3, 1, "", "set"], [43, 3, 1, "", "setDateShiftColumn"], [43, 3, 1, "", "setInputCols"], [43, 3, 1, "", "setLazyAnnotator"], [43, 3, 1, "", "setNewDateShift"], [43, 3, 1, "", "setOutputCol"], [43, 3, 1, "", "setParamValue"], [43, 3, 1, "", "setParams"], [43, 3, 1, "", "setPatientIdColumn"], [43, 3, 1, "", "setRangeDays"], [43, 3, 1, "", "setSeed"], [43, 3, 1, "", "transform"], [43, 2, 1, "", "uid"], [43, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.light_deIdentification": [[45, 1, 1, "", "LightDeIdentification"]], "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification": [[45, 2, 1, "", "ageRanges"], [45, 3, 1, "", "clear"], [45, 3, 1, "", "copy"], [45, 2, 1, "", "dateEntities"], [45, 2, 1, "", "dateFormats"], [45, 2, 1, "", "days"], [45, 3, 1, "", "explainParam"], [45, 3, 1, "", "explainParams"], [45, 3, 1, "", "extractParamMap"], [45, 2, 1, "", "fixedMaskLength"], [45, 2, 1, "", "genderAwareness"], [45, 3, 1, "", "getInputCols"], [45, 3, 1, "", "getLazyAnnotator"], [45, 3, 1, "", "getOrDefault"], [45, 3, 1, "", "getOutputCol"], [45, 3, 1, "", "getParam"], [45, 3, 1, "", "getParamValue"], [45, 2, 1, "", "getter_attrs"], [45, 3, 1, "", "hasDefault"], [45, 3, 1, "", "hasParam"], [45, 2, 1, "", "inputAnnotatorTypes"], [45, 2, 1, "", "inputCols"], [45, 3, 1, "", "inputColsValidation"], [45, 3, 1, "", "isDefined"], [45, 3, 1, "", "isSet"], [45, 2, 1, "", "language"], [45, 2, 1, "", "lazyAnnotator"], [45, 3, 1, "", "load"], [45, 2, 1, "", "maskingPolicy"], [45, 2, 1, "", "mode"], [45, 2, 1, "", "name"], [45, 2, 1, "", "obfuscateDate"], [45, 2, 1, "", "obfuscateRefSource"], [45, 2, 1, "", "optionalInputAnnotatorTypes"], [45, 2, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "outputCol"], [45, 3, 1, "", "read"], [45, 2, 1, "", "region"], [45, 2, 1, "", "sameLengthFormattedEntities"], [45, 3, 1, "", "save"], [45, 2, 1, "", "seed"], [45, 3, 1, "", "set"], [45, 3, 1, "", "setAgeRanges"], [45, 3, 1, "", "setCustomFakers"], [45, 3, 1, "", "setDateEntities"], [45, 3, 1, "", "setDateFormats"], [45, 3, 1, "", "setDays"], [45, 3, 1, "", "setFixedMaskLength"], [45, 3, 1, "", "setForceInputTypeValidation"], [45, 3, 1, "", "setGenderAwareness"], [45, 3, 1, "", "setInputCols"], [45, 3, 1, "", "setLanguage"], [45, 3, 1, "", "setLazyAnnotator"], [45, 3, 1, "", "setMaskingPolicy"], [45, 3, 1, "", "setMode"], [45, 3, 1, "", "setObfuscateDate"], [45, 3, 1, "", "setObfuscateRefSource"], [45, 3, 1, "", "setOutputCol"], [45, 3, 1, "", "setParamValue"], [45, 3, 1, "", "setParams"], [45, 3, 1, "", "setRegion"], [45, 3, 1, "", "setSameLengthFormattedEntities"], [45, 3, 1, "", "setSeed"], [45, 3, 1, "", "setSelectiveObfuscationModes"], [45, 3, 1, "", "setUnnormalizedDateMode"], [45, 3, 1, "", "setUseShiftDays"], [45, 2, 1, "", "skipLPInputColsValidation"], [45, 3, 1, "", "transform"], [45, 2, 1, "", "uid"], [45, 2, 1, "", "unnormalizedDateMode"], [45, 2, 1, "", "useShiftDays"], [45, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[46, 1, 1, "", "NameChunkObfuscator"], [46, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[46, 3, 1, "", "clear"], [46, 3, 1, "", "copy"], [46, 3, 1, "", "explainParam"], [46, 3, 1, "", "explainParams"], [46, 3, 1, "", "extractParamMap"], [46, 2, 1, "", "genderAwareness"], [46, 3, 1, "", "getInputCols"], [46, 3, 1, "", "getLazyAnnotator"], [46, 3, 1, "", "getOrDefault"], [46, 3, 1, "", "getOutputCol"], [46, 3, 1, "", "getParam"], [46, 3, 1, "", "getParamValue"], [46, 2, 1, "", "getter_attrs"], [46, 3, 1, "", "hasDefault"], [46, 3, 1, "", "hasParam"], [46, 2, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "inputCols"], [46, 3, 1, "", "inputColsValidation"], [46, 3, 1, "", "isDefined"], [46, 3, 1, "", "isSet"], [46, 2, 1, "", "language"], [46, 2, 1, "", "lazyAnnotator"], [46, 3, 1, "", "load"], [46, 2, 1, "", "nameEntities"], [46, 2, 1, "", "obfuscateRefSource"], [46, 2, 1, "", "optionalInputAnnotatorTypes"], [46, 2, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "outputCol"], [46, 3, 1, "", "read"], [46, 2, 1, "", "sameLength"], [46, 3, 1, "", "save"], [46, 2, 1, "", "seed"], [46, 3, 1, "", "set"], [46, 3, 1, "", "setForceInputTypeValidation"], [46, 3, 1, "", "setGenderAwareness"], [46, 3, 1, "", "setInputCols"], [46, 3, 1, "", "setLanguage"], [46, 3, 1, "", "setLazyAnnotator"], [46, 3, 1, "", "setNameEntities"], [46, 3, 1, "", "setObfuscateRefSource"], [46, 3, 1, "", "setOutputCol"], [46, 3, 1, "", "setParamValue"], [46, 3, 1, "", "setParams"], [46, 3, 1, "", "setSameLength"], [46, 3, 1, "", "setSeed"], [46, 2, 1, "", "skipLPInputColsValidation"], [46, 3, 1, "", "transform"], [46, 2, 1, "", "uid"], [46, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[46, 3, 1, "", "clear"], [46, 3, 1, "", "copy"], [46, 3, 1, "", "explainParam"], [46, 3, 1, "", "explainParams"], [46, 3, 1, "", "extractParamMap"], [46, 3, 1, "", "fit"], [46, 3, 1, "", "fitMultiple"], [46, 2, 1, "", "genderAwareness"], [46, 3, 1, "", "getInputCols"], [46, 3, 1, "", "getLazyAnnotator"], [46, 3, 1, "", "getOrDefault"], [46, 3, 1, "", "getOutputCol"], [46, 3, 1, "", "getParam"], [46, 3, 1, "", "getParamValue"], [46, 2, 1, "", "getter_attrs"], [46, 3, 1, "", "hasDefault"], [46, 3, 1, "", "hasParam"], [46, 2, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "inputCols"], [46, 3, 1, "", "inputColsValidation"], [46, 3, 1, "", "isDefined"], [46, 3, 1, "", "isSet"], [46, 2, 1, "", "language"], [46, 2, 1, "", "lazyAnnotator"], [46, 3, 1, "", "load"], [46, 2, 1, "", "nameEntities"], [46, 2, 1, "", "obfuscateRefFile"], [46, 2, 1, "", "obfuscateRefSource"], [46, 2, 1, "", "optionalInputAnnotatorTypes"], [46, 2, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "outputCol"], [46, 3, 1, "", "read"], [46, 2, 1, "", "refFileFormat"], [46, 2, 1, "", "refSep"], [46, 2, 1, "", "sameLength"], [46, 3, 1, "", "save"], [46, 2, 1, "", "seed"], [46, 3, 1, "", "set"], [46, 3, 1, "", "setForceInputTypeValidation"], [46, 3, 1, "", "setGenderAwareness"], [46, 3, 1, "", "setInputCols"], [46, 3, 1, "", "setLanguage"], [46, 3, 1, "", "setLazyAnnotator"], [46, 3, 1, "", "setNameEntities"], [46, 3, 1, "", "setObfuscateRefFile"], [46, 3, 1, "", "setObfuscateRefSource"], [46, 3, 1, "", "setOutputCol"], [46, 3, 1, "", "setParamValue"], [46, 3, 1, "", "setRefFileFormat"], [46, 3, 1, "", "setRefSep"], [46, 3, 1, "", "setSameLength"], [46, 3, 1, "", "setSeed"], [46, 2, 1, "", "skipLPInputColsValidation"], [46, 2, 1, "", "uid"], [46, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.reIdentification": [[47, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[47, 3, 1, "", "clear"], [47, 3, 1, "", "copy"], [47, 3, 1, "", "explainParam"], [47, 3, 1, "", "explainParams"], [47, 3, 1, "", "extractParamMap"], [47, 3, 1, "", "getInputCols"], [47, 3, 1, "", "getLazyAnnotator"], [47, 3, 1, "", "getOrDefault"], [47, 3, 1, "", "getOutputCol"], [47, 3, 1, "", "getParam"], [47, 3, 1, "", "getParamValue"], [47, 2, 1, "", "getter_attrs"], [47, 3, 1, "", "hasDefault"], [47, 3, 1, "", "hasParam"], [47, 2, 1, "", "inputAnnotatorTypes"], [47, 2, 1, "", "inputCols"], [47, 3, 1, "", "inputColsValidation"], [47, 3, 1, "", "isDefined"], [47, 3, 1, "", "isSet"], [47, 2, 1, "", "lazyAnnotator"], [47, 3, 1, "", "load"], [47, 2, 1, "", "name"], [47, 2, 1, "", "optionalInputAnnotatorTypes"], [47, 2, 1, "", "outputAnnotatorType"], [47, 2, 1, "", "outputCol"], [47, 3, 1, "", "read"], [47, 3, 1, "", "save"], [47, 3, 1, "", "set"], [47, 3, 1, "", "setForceInputTypeValidation"], [47, 3, 1, "", "setInputCols"], [47, 3, 1, "", "setLazyAnnotator"], [47, 3, 1, "", "setOutputCol"], [47, 3, 1, "", "setParamValue"], [47, 3, 1, "", "setParams"], [47, 2, 1, "", "skipLPInputColsValidation"], [47, 3, 1, "", "transform"], [47, 2, 1, "", "uid"], [47, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.replacer": [[48, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[48, 3, 1, "", "clear"], [48, 3, 1, "", "copy"], [48, 3, 1, "", "explainParam"], [48, 3, 1, "", "explainParams"], [48, 3, 1, "", "extractParamMap"], [48, 3, 1, "", "getInputCols"], [48, 3, 1, "", "getLazyAnnotator"], [48, 3, 1, "", "getOrDefault"], [48, 3, 1, "", "getOutputCol"], [48, 3, 1, "", "getParam"], [48, 3, 1, "", "getParamValue"], [48, 3, 1, "", "getUseReplacement"], [48, 2, 1, "", "getter_attrs"], [48, 3, 1, "", "hasDefault"], [48, 3, 1, "", "hasParam"], [48, 2, 1, "", "inputAnnotatorTypes"], [48, 2, 1, "", "inputCols"], [48, 3, 1, "", "inputColsValidation"], [48, 3, 1, "", "isDefined"], [48, 3, 1, "", "isSet"], [48, 2, 1, "", "lazyAnnotator"], [48, 3, 1, "", "load"], [48, 2, 1, "", "name"], [48, 2, 1, "id0", "noneValuesTo"], [48, 2, 1, "", "optionalInputAnnotatorTypes"], [48, 2, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "outputCol"], [48, 2, 1, "id1", "placeHolder"], [48, 2, 1, "id2", "placeHolderDelimiters"], [48, 3, 1, "", "read"], [48, 3, 1, "", "save"], [48, 3, 1, "", "set"], [48, 3, 1, "", "setForceInputTypeValidation"], [48, 3, 1, "", "setInputCols"], [48, 3, 1, "", "setLazyAnnotator"], [48, 3, 1, "", "setNoneValuesTo"], [48, 3, 1, "", "setOutputCol"], [48, 3, 1, "", "setParamValue"], [48, 3, 1, "", "setParams"], [48, 3, 1, "", "setPlaceHolder"], [48, 3, 1, "", "setPlaceHolderDelimiters"], [48, 3, 1, "", "setUseReplacement"], [48, 2, 1, "", "skipLPInputColsValidation"], [48, 3, 1, "", "transform"], [48, 2, 1, "", "uid"], [48, 2, 1, "id3", "useReplacement"], [48, 3, 1, "", "write"]], "sparknlp_jsl.annotator.disambiguation": [[50, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[50, 1, 1, "", "NerDisambiguator"], [50, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[50, 3, 1, "", "clear"], [50, 3, 1, "", "copy"], [50, 2, 1, "", "embeddingTypeParam"], [50, 3, 1, "", "explainParam"], [50, 3, 1, "", "explainParams"], [50, 3, 1, "", "extractParamMap"], [50, 3, 1, "", "fit"], [50, 3, 1, "", "fitMultiple"], [50, 3, 1, "", "getInputCols"], [50, 3, 1, "", "getLazyAnnotator"], [50, 3, 1, "", "getOrDefault"], [50, 3, 1, "", "getOutputCol"], [50, 3, 1, "", "getParam"], [50, 3, 1, "", "getParamValue"], [50, 2, 1, "", "getter_attrs"], [50, 3, 1, "", "hasDefault"], [50, 3, 1, "", "hasParam"], [50, 2, 1, "", "inputAnnotatorTypes"], [50, 2, 1, "", "inputCols"], [50, 3, 1, "", "inputColsValidation"], [50, 3, 1, "", "isDefined"], [50, 3, 1, "", "isSet"], [50, 2, 1, "", "lazyAnnotator"], [50, 2, 1, "", "levenshteinDistanceThresholdParam"], [50, 3, 1, "", "load"], [50, 2, 1, "", "narrowWithApproximateMatching"], [50, 2, 1, "", "nearMatchingGapParam"], [50, 2, 1, "", "numFirstChars"], [50, 2, 1, "", "optionalInputAnnotatorTypes"], [50, 2, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "outputCol"], [50, 2, 1, "", "predictionsLimit"], [50, 3, 1, "", "read"], [50, 2, 1, "", "s3KnowledgeBaseName"], [50, 3, 1, "", "save"], [50, 3, 1, "", "set"], [50, 3, 1, "", "setEmbeddingType"], [50, 3, 1, "", "setForceInputTypeValidation"], [50, 3, 1, "", "setInputCols"], [50, 3, 1, "", "setLazyAnnotator"], [50, 3, 1, "", "setLevenshteinDistanceThresholdParam"], [50, 3, 1, "", "setNarrowWithApproximateMatching"], [50, 3, 1, "", "setNearMatchingGapParam"], [50, 3, 1, "", "setNumFirstChars"], [50, 3, 1, "", "setOutputCol"], [50, 3, 1, "", "setParamValue"], [50, 3, 1, "", "setPredictionLimit"], [50, 3, 1, "", "setS3KnowledgeBaseName"], [50, 3, 1, "", "setTokenSearch"], [50, 2, 1, "", "skipLPInputColsValidation"], [50, 2, 1, "", "tokenSearch"], [50, 2, 1, "", "uid"], [50, 3, 1, "", "write"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[50, 3, 1, "", "clear"], [50, 3, 1, "", "copy"], [50, 2, 1, "", "embeddingTypeParam"], [50, 3, 1, "", "explainParam"], [50, 3, 1, "", "explainParams"], [50, 3, 1, "", "extractParamMap"], [50, 3, 1, "", "getInputCols"], [50, 3, 1, "", "getLazyAnnotator"], [50, 3, 1, "", "getOrDefault"], [50, 3, 1, "", "getOutputCol"], [50, 3, 1, "", "getParam"], [50, 3, 1, "", "getParamValue"], [50, 2, 1, "", "getter_attrs"], [50, 3, 1, "", "hasDefault"], [50, 3, 1, "", "hasParam"], [50, 2, 1, "", "inputAnnotatorTypes"], [50, 2, 1, "", "inputCols"], [50, 3, 1, "", "inputColsValidation"], [50, 3, 1, "", "isDefined"], [50, 3, 1, "", "isSet"], [50, 2, 1, "", "lazyAnnotator"], [50, 2, 1, "", "levenshteinDistanceThresholdParam"], [50, 3, 1, "", "load"], [50, 2, 1, "", "name"], [50, 2, 1, "", "narrowWithApproximateMatching"], [50, 2, 1, "", "nearMatchingGapParam"], [50, 2, 1, "", "numFirstChars"], [50, 2, 1, "", "optionalInputAnnotatorTypes"], [50, 2, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "outputCol"], [50, 2, 1, "", "predictionsLimit"], [50, 3, 1, "", "pretrained"], [50, 3, 1, "", "read"], [50, 3, 1, "", "save"], [50, 3, 1, "", "set"], [50, 3, 1, "", "setEmbeddingType"], [50, 3, 1, "", "setForceInputTypeValidation"], [50, 3, 1, "", "setInputCols"], [50, 3, 1, "", "setLazyAnnotator"], [50, 3, 1, "", "setLevenshteinDistanceThresholdParam"], [50, 3, 1, "", "setNarrowWithApproximateMatching"], [50, 3, 1, "", "setNearMatchingGapParam"], [50, 3, 1, "", "setNumFirstChars"], [50, 3, 1, "", "setOutputCol"], [50, 3, 1, "", "setParamValue"], [50, 3, 1, "", "setParams"], [50, 3, 1, "", "setPredictionLimit"], [50, 3, 1, "", "setTokenSearch"], [50, 2, 1, "", "skipLPInputColsValidation"], [50, 2, 1, "", "tokenSearch"], [50, 3, 1, "", "transform"], [50, 2, 1, "", "uid"], [50, 3, 1, "", "write"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[51, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[51, 2, 1, "", "chunkCol"], [51, 3, 1, "", "clear"], [51, 3, 1, "", "copy"], [51, 3, 1, "", "explainParam"], [51, 3, 1, "", "explainParams"], [51, 3, 1, "", "extractParamMap"], [51, 2, 1, "", "failOnMissing"], [51, 3, 1, "", "getInputCols"], [51, 3, 1, "", "getLazyAnnotator"], [51, 3, 1, "", "getOrDefault"], [51, 3, 1, "", "getOutputCol"], [51, 3, 1, "", "getParam"], [51, 3, 1, "", "getParamValue"], [51, 2, 1, "", "getter_attrs"], [51, 3, 1, "", "hasDefault"], [51, 3, 1, "", "hasParam"], [51, 2, 1, "", "inputAnnotatorTypes"], [51, 2, 1, "", "inputCols"], [51, 3, 1, "", "inputColsValidation"], [51, 2, 1, "", "isArray"], [51, 3, 1, "", "isDefined"], [51, 3, 1, "", "isSet"], [51, 2, 1, "", "kwargs"], [51, 2, 1, "", "lazyAnnotator"], [51, 3, 1, "", "load"], [51, 2, 1, "", "lowerCase"], [51, 2, 1, "", "name"], [51, 2, 1, "", "optionalInputAnnotatorTypes"], [51, 2, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "outputCol"], [51, 3, 1, "", "read"], [51, 3, 1, "", "save"], [51, 3, 1, "", "set"], [51, 3, 1, "", "setChunkCol"], [51, 3, 1, "", "setFailOnMissing"], [51, 3, 1, "", "setInputCols"], [51, 3, 1, "", "setIsArray"], [51, 3, 1, "", "setLazyAnnotator"], [51, 3, 1, "", "setLowerCase"], [51, 3, 1, "", "setOutputCol"], [51, 3, 1, "", "setParamValue"], [51, 3, 1, "", "setParams"], [51, 3, 1, "", "setStartCol"], [51, 3, 1, "", "setStartColByTokenIndex"], [51, 2, 1, "", "startCol"], [51, 2, 1, "", "startColByTokenIndex"], [51, 3, 1, "", "transform"], [51, 2, 1, "", "uid"], [51, 3, 1, "", "write"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[52, 1, 1, "", "DocumentFiltererByClassifier"]], "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier": [[52, 2, 1, "", "blackList"], [52, 2, 1, "", "caseSensitive"], [52, 3, 1, "", "clear"], [52, 3, 1, "", "copy"], [52, 3, 1, "", "explainParam"], [52, 3, 1, "", "explainParams"], [52, 3, 1, "", "extractParamMap"], [52, 3, 1, "", "getInputCols"], [52, 3, 1, "", "getLazyAnnotator"], [52, 3, 1, "", "getOrDefault"], [52, 3, 1, "", "getOutputCol"], [52, 3, 1, "", "getParam"], [52, 3, 1, "", "getParamValue"], [52, 2, 1, "", "getter_attrs"], [52, 3, 1, "", "hasDefault"], [52, 3, 1, "", "hasParam"], [52, 2, 1, "", "inputAnnotatorTypes"], [52, 2, 1, "", "inputCols"], [52, 3, 1, "", "inputColsValidation"], [52, 3, 1, "", "isDefined"], [52, 3, 1, "", "isSet"], [52, 2, 1, "", "lazyAnnotator"], [52, 3, 1, "", "load"], [52, 2, 1, "", "name"], [52, 2, 1, "", "optionalInputAnnotatorTypes"], [52, 2, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "outputCol"], [52, 3, 1, "", "read"], [52, 3, 1, "", "save"], [52, 3, 1, "", "set"], [52, 3, 1, "", "setBlackList"], [52, 3, 1, "", "setCaseSensitive"], [52, 3, 1, "", "setDenyList"], [52, 3, 1, "", "setForceInputTypeValidation"], [52, 3, 1, "", "setInputCols"], [52, 3, 1, "", "setLazyAnnotator"], [52, 3, 1, "", "setOutputCol"], [52, 3, 1, "", "setParamValue"], [52, 3, 1, "", "setParams"], [52, 3, 1, "", "setWhiteList"], [52, 2, 1, "", "skipLPInputColsValidation"], [52, 3, 1, "", "transform"], [52, 2, 1, "", "uid"], [52, 2, 1, "", "whiteList"], [52, 3, 1, "", "write"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[53, 1, 1, "", "DocumentFiltererByNER"]], "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER": [[53, 2, 1, "", "blackList"], [53, 2, 1, "", "caseSensitive"], [53, 3, 1, "", "clear"], [53, 3, 1, "", "copy"], [53, 3, 1, "", "explainParam"], [53, 3, 1, "", "explainParams"], [53, 3, 1, "", "extractParamMap"], [53, 3, 1, "", "getInputCols"], [53, 3, 1, "", "getLazyAnnotator"], [53, 3, 1, "", "getOrDefault"], [53, 3, 1, "", "getOutputCol"], [53, 3, 1, "", "getParam"], [53, 3, 1, "", "getParamValue"], [53, 2, 1, "", "getter_attrs"], [53, 3, 1, "", "hasDefault"], [53, 3, 1, "", "hasParam"], [53, 2, 1, "", "inputAnnotatorTypes"], [53, 2, 1, "", "inputCols"], [53, 3, 1, "", "inputColsValidation"], [53, 3, 1, "", "isDefined"], [53, 3, 1, "", "isSet"], [53, 2, 1, "", "joinString"], [53, 2, 1, "", "lazyAnnotator"], [53, 3, 1, "", "load"], [53, 2, 1, "", "name"], [53, 2, 1, "", "optionalInputAnnotatorTypes"], [53, 2, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "outputAsDocument"], [53, 2, 1, "", "outputCol"], [53, 3, 1, "", "read"], [53, 3, 1, "", "save"], [53, 3, 1, "", "set"], [53, 3, 1, "", "setBlackList"], [53, 3, 1, "", "setCaseSensitive"], [53, 3, 1, "", "setDenyList"], [53, 3, 1, "", "setForceInputTypeValidation"], [53, 3, 1, "", "setInputCols"], [53, 3, 1, "", "setLazyAnnotator"], [53, 3, 1, "", "setOutputCol"], [53, 3, 1, "", "setParamValue"], [53, 3, 1, "", "setParams"], [53, 3, 1, "", "setWhiteList"], [53, 2, 1, "", "skipLPInputColsValidation"], [53, 3, 1, "", "transform"], [53, 2, 1, "", "uid"], [53, 2, 1, "", "whiteList"], [53, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings": [[54, 0, 0, "-", "average_embeddings"], [55, 0, 0, "-", "bert_sentence_embeddings"], [56, 0, 0, "-", "entity_chunk_embeddings"], [57, 0, 0, "-", "extractive_summarization"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[54, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[54, 3, 1, "", "clear"], [54, 3, 1, "", "copy"], [54, 3, 1, "", "explainParam"], [54, 3, 1, "", "explainParams"], [54, 3, 1, "", "extractParamMap"], [54, 3, 1, "", "getInputCols"], [54, 3, 1, "", "getLazyAnnotator"], [54, 3, 1, "", "getOrDefault"], [54, 3, 1, "", "getOutputCol"], [54, 3, 1, "", "getParam"], [54, 3, 1, "", "getParamValue"], [54, 2, 1, "", "getter_attrs"], [54, 3, 1, "", "hasDefault"], [54, 3, 1, "", "hasParam"], [54, 2, 1, "", "inputAnnotatorTypes"], [54, 2, 1, "", "inputCols"], [54, 3, 1, "", "inputColsValidation"], [54, 3, 1, "", "isDefined"], [54, 3, 1, "", "isSet"], [54, 2, 1, "", "lazyAnnotator"], [54, 3, 1, "", "load"], [54, 2, 1, "", "name"], [54, 2, 1, "", "optionalInputAnnotatorTypes"], [54, 2, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "outputCol"], [54, 3, 1, "", "read"], [54, 3, 1, "", "save"], [54, 3, 1, "", "set"], [54, 3, 1, "", "setForceInputTypeValidation"], [54, 3, 1, "", "setInputCols"], [54, 3, 1, "", "setLazyAnnotator"], [54, 3, 1, "", "setOutputCol"], [54, 3, 1, "", "setParamValue"], [54, 3, 1, "", "setParams"], [54, 2, 1, "", "skipLPInputColsValidation"], [54, 3, 1, "", "transform"], [54, 2, 1, "", "uid"], [54, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[55, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[55, 2, 1, "", "batchSize"], [55, 2, 1, "", "caseSensitive"], [55, 2, 1, "", "chunkWeight"], [55, 3, 1, "", "clear"], [55, 2, 1, "", "configProtoBytes"], [55, 3, 1, "", "copy"], [55, 2, 1, "", "dimension"], [55, 3, 1, "", "explainParam"], [55, 3, 1, "", "explainParams"], [55, 3, 1, "", "extractParamMap"], [55, 3, 1, "", "getBatchSize"], [55, 3, 1, "", "getCaseSensitive"], [55, 3, 1, "", "getDimension"], [55, 3, 1, "", "getInputCols"], [55, 3, 1, "", "getLazyAnnotator"], [55, 3, 1, "", "getOrDefault"], [55, 3, 1, "", "getOutputCol"], [55, 3, 1, "", "getParam"], [55, 3, 1, "", "getParamValue"], [55, 3, 1, "", "getStorageRef"], [55, 2, 1, "", "getter_attrs"], [55, 3, 1, "", "hasDefault"], [55, 3, 1, "", "hasParam"], [55, 2, 1, "", "inputAnnotatorTypes"], [55, 2, 1, "", "inputCols"], [55, 3, 1, "", "inputColsValidation"], [55, 3, 1, "", "isDefined"], [55, 2, 1, "", "isLong"], [55, 3, 1, "", "isSet"], [55, 2, 1, "", "lazyAnnotator"], [55, 3, 1, "", "load"], [55, 3, 1, "", "loadSavedModel"], [55, 2, 1, "", "name"], [55, 2, 1, "", "optionalInputAnnotatorTypes"], [55, 2, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "outputCol"], [55, 3, 1, "", "pretrained"], [55, 3, 1, "", "read"], [55, 3, 1, "", "save"], [55, 3, 1, "", "set"], [55, 3, 1, "", "setBatchSize"], [55, 3, 1, "", "setCaseSensitive"], [55, 3, 1, "", "setChunkWeight"], [55, 3, 1, "", "setConfigProtoBytes"], [55, 3, 1, "", "setDimension"], [55, 3, 1, "", "setInputCols"], [55, 3, 1, "", "setIsLong"], [55, 3, 1, "", "setLazyAnnotator"], [55, 3, 1, "", "setOutputCol"], [55, 3, 1, "", "setParamValue"], [55, 3, 1, "", "setParams"], [55, 3, 1, "", "setStorageRef"], [55, 2, 1, "", "storageRef"], [55, 3, 1, "", "transform"], [55, 2, 1, "", "uid"], [55, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[56, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[56, 2, 1, "", "batchSize"], [56, 2, 1, "", "caseSensitive"], [56, 3, 1, "", "clear"], [56, 2, 1, "", "configProtoBytes"], [56, 3, 1, "", "copy"], [56, 2, 1, "", "dimension"], [56, 2, 1, "", "entityWeights"], [56, 3, 1, "", "explainParam"], [56, 3, 1, "", "explainParams"], [56, 3, 1, "", "extractParamMap"], [56, 3, 1, "", "getBatchSize"], [56, 3, 1, "", "getCaseSensitive"], [56, 3, 1, "", "getDimension"], [56, 3, 1, "", "getInputCols"], [56, 3, 1, "", "getLazyAnnotator"], [56, 3, 1, "", "getOrDefault"], [56, 3, 1, "", "getOutputCol"], [56, 3, 1, "", "getParam"], [56, 3, 1, "", "getParamValue"], [56, 3, 1, "", "getStorageRef"], [56, 2, 1, "", "getter_attrs"], [56, 3, 1, "", "hasDefault"], [56, 3, 1, "", "hasParam"], [56, 2, 1, "", "inputAnnotatorTypes"], [56, 2, 1, "", "inputCols"], [56, 3, 1, "", "inputColsValidation"], [56, 3, 1, "", "isDefined"], [56, 2, 1, "", "isLong"], [56, 3, 1, "", "isSet"], [56, 2, 1, "", "lazyAnnotator"], [56, 3, 1, "", "load"], [56, 3, 1, "", "loadSavedModel"], [56, 2, 1, "", "maxSyntacticDistance"], [56, 2, 1, "", "name"], [56, 2, 1, "", "optionalInputAnnotatorTypes"], [56, 2, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "outputCol"], [56, 3, 1, "", "pretrained"], [56, 3, 1, "", "read"], [56, 3, 1, "", "save"], [56, 3, 1, "", "set"], [56, 3, 1, "", "setBatchSize"], [56, 3, 1, "", "setCaseSensitive"], [56, 3, 1, "", "setConfigProtoBytes"], [56, 3, 1, "", "setDimension"], [56, 3, 1, "", "setEntityWeights"], [56, 3, 1, "", "setInputCols"], [56, 3, 1, "", "setIsLong"], [56, 3, 1, "", "setLazyAnnotator"], [56, 3, 1, "", "setMaxSyntacticDistance"], [56, 3, 1, "", "setOutputCol"], [56, 3, 1, "", "setParamValue"], [56, 3, 1, "", "setParams"], [56, 3, 1, "", "setStorageRef"], [56, 3, 1, "", "setTargetEntities"], [56, 2, 1, "", "storageRef"], [56, 2, 1, "", "targetEntities"], [56, 3, 1, "", "transform"], [56, 2, 1, "", "uid"], [56, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[57, 1, 1, "", "ExtractiveSummarization"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization": [[57, 3, 1, "", "clear"], [57, 3, 1, "", "copy"], [57, 3, 1, "", "explainParam"], [57, 3, 1, "", "explainParams"], [57, 3, 1, "", "extractParamMap"], [57, 3, 1, "", "getInputCols"], [57, 3, 1, "", "getLazyAnnotator"], [57, 3, 1, "", "getOrDefault"], [57, 3, 1, "", "getOutputCol"], [57, 3, 1, "", "getParam"], [57, 3, 1, "", "getParamValue"], [57, 2, 1, "", "getter_attrs"], [57, 3, 1, "", "hasDefault"], [57, 3, 1, "", "hasParam"], [57, 2, 1, "", "inputAnnotatorTypes"], [57, 2, 1, "", "inputCols"], [57, 3, 1, "", "inputColsValidation"], [57, 3, 1, "", "isDefined"], [57, 3, 1, "", "isSet"], [57, 2, 1, "", "lazyAnnotator"], [57, 3, 1, "", "load"], [57, 2, 1, "", "name"], [57, 2, 1, "", "optionalInputAnnotatorTypes"], [57, 2, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "outputCol"], [57, 3, 1, "", "read"], [57, 2, 1, "", "returnSingleDocument"], [57, 3, 1, "", "save"], [57, 3, 1, "", "set"], [57, 3, 1, "", "setForceInputTypeValidation"], [57, 3, 1, "", "setInputCols"], [57, 3, 1, "", "setLazyAnnotator"], [57, 3, 1, "", "setOutputCol"], [57, 3, 1, "", "setParamValue"], [57, 3, 1, "", "setParams"], [57, 3, 1, "", "setReturnSingleDocument"], [57, 3, 1, "", "setSimilarityThreshold"], [57, 3, 1, "", "setSummarySize"], [57, 2, 1, "", "similarityThreshold"], [57, 2, 1, "", "skipLPInputColsValidation"], [57, 2, 1, "", "summarySize"], [57, 3, 1, "", "transform"], [57, 2, 1, "", "uid"], [57, 3, 1, "", "write"]], "sparknlp_jsl.annotator.er": [[59, 0, 0, "-", "entity_ruler_internal"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[59, 1, 1, "", "EntityRulerInternalApproach"], [59, 1, 1, "", "EntityRulerInternalModel"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach": [[59, 2, 1, "", "alphabet"], [59, 2, 1, "", "caseSensitive"], [59, 3, 1, "", "clear"], [59, 3, 1, "", "copy"], [59, 2, 1, "", "enableInMemoryStorage"], [59, 3, 1, "", "explainParam"], [59, 3, 1, "", "explainParams"], [59, 3, 1, "", "extractParamMap"], [59, 3, 1, "", "fit"], [59, 3, 1, "", "fitMultiple"], [59, 3, 1, "", "getCaseSensitive"], [59, 3, 1, "", "getEnableInMemoryStorage"], [59, 3, 1, "", "getIncludeStorage"], [59, 3, 1, "", "getInputCols"], [59, 3, 1, "", "getLazyAnnotator"], [59, 3, 1, "", "getOrDefault"], [59, 3, 1, "", "getOutputCol"], [59, 3, 1, "", "getParam"], [59, 3, 1, "", "getParamValue"], [59, 3, 1, "", "getStoragePath"], [59, 3, 1, "", "getStorageRef"], [59, 2, 1, "", "getter_attrs"], [59, 3, 1, "", "hasDefault"], [59, 3, 1, "", "hasParam"], [59, 2, 1, "", "includeStorage"], [59, 2, 1, "", "inputAnnotatorTypes"], [59, 2, 1, "", "inputCols"], [59, 3, 1, "", "inputColsValidation"], [59, 3, 1, "", "isDefined"], [59, 3, 1, "", "isSet"], [59, 2, 1, "", "lazyAnnotator"], [59, 3, 1, "", "load"], [59, 2, 1, "", "name"], [59, 2, 1, "", "optionalInputAnnotatorTypes"], [59, 2, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "outputCol"], [59, 2, 1, "", "patternsResource"], [59, 3, 1, "", "read"], [59, 3, 1, "", "save"], [59, 2, 1, "", "sentenceMatch"], [59, 3, 1, "", "set"], [59, 3, 1, "", "setAlphabetResource"], [59, 3, 1, "", "setCaseSensitive"], [59, 3, 1, "", "setEnableInMemoryStorage"], [59, 3, 1, "", "setForceInputTypeValidation"], [59, 3, 1, "", "setIncludeStorage"], [59, 3, 1, "", "setInputCols"], [59, 3, 1, "", "setLazyAnnotator"], [59, 3, 1, "", "setOutputCol"], [59, 3, 1, "", "setParamValue"], [59, 3, 1, "", "setPatternsResource"], [59, 3, 1, "", "setSentenceMatch"], [59, 3, 1, "", "setStoragePath"], [59, 3, 1, "", "setStorageRef"], [59, 3, 1, "", "setUseStorage"], [59, 2, 1, "", "skipLPInputColsValidation"], [59, 2, 1, "", "storagePath"], [59, 2, 1, "", "storageRef"], [59, 2, 1, "", "uid"], [59, 2, 1, "", "useStorage"], [59, 3, 1, "", "write"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel": [[59, 2, 1, "", "caseSensitive"], [59, 3, 1, "", "clear"], [59, 3, 1, "", "copy"], [59, 2, 1, "", "database"], [59, 3, 1, "", "explainParam"], [59, 3, 1, "", "explainParams"], [59, 3, 1, "", "extractParamMap"], [59, 3, 1, "", "getCaseSensitive"], [59, 3, 1, "", "getInputCols"], [59, 3, 1, "", "getLazyAnnotator"], [59, 3, 1, "", "getOrDefault"], [59, 3, 1, "", "getOutputCol"], [59, 3, 1, "", "getParam"], [59, 3, 1, "", "getParamValue"], [59, 3, 1, "", "getStorageRef"], [59, 2, 1, "", "getter_attrs"], [59, 3, 1, "", "hasDefault"], [59, 3, 1, "", "hasParam"], [59, 2, 1, "", "inputAnnotatorTypes"], [59, 2, 1, "", "inputCols"], [59, 3, 1, "", "inputColsValidation"], [59, 3, 1, "", "isDefined"], [59, 3, 1, "", "isSet"], [59, 2, 1, "", "lazyAnnotator"], [59, 3, 1, "", "load"], [59, 3, 1, "", "loadStorage"], [59, 3, 1, "", "loadStorages"], [59, 2, 1, "", "name"], [59, 2, 1, "", "optionalInputAnnotatorTypes"], [59, 2, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "outputCol"], [59, 3, 1, "", "pretrained"], [59, 3, 1, "", "read"], [59, 3, 1, "", "save"], [59, 3, 1, "", "saveStorage"], [59, 3, 1, "", "set"], [59, 3, 1, "", "setCaseSensitive"], [59, 3, 1, "", "setForceInputTypeValidation"], [59, 3, 1, "", "setInputCols"], [59, 3, 1, "", "setLazyAnnotator"], [59, 3, 1, "", "setOutputCol"], [59, 3, 1, "", "setParamValue"], [59, 3, 1, "", "setParams"], [59, 3, 1, "", "setStorageRef"], [59, 2, 1, "", "skipLPInputColsValidation"], [59, 2, 1, "", "storageRef"], [59, 3, 1, "", "transform"], [59, 2, 1, "", "uid"], [59, 3, 1, "", "write"]], "sparknlp_jsl.annotator.feature_assembler": [[61, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[61, 3, 1, "", "clear"], [61, 3, 1, "", "copy"], [61, 3, 1, "", "explainParam"], [61, 3, 1, "", "explainParams"], [61, 3, 1, "", "extractParamMap"], [61, 3, 1, "", "getInputCols"], [61, 3, 1, "", "getLazyAnnotator"], [61, 3, 1, "", "getOrDefault"], [61, 3, 1, "", "getOutputCol"], [61, 3, 1, "", "getParam"], [61, 3, 1, "", "getParamValue"], [61, 2, 1, "", "getter_attrs"], [61, 3, 1, "", "hasDefault"], [61, 3, 1, "", "hasParam"], [61, 2, 1, "", "inputAnnotatorTypes"], [61, 2, 1, "", "inputCols"], [61, 3, 1, "", "inputColsValidation"], [61, 3, 1, "", "isDefined"], [61, 3, 1, "", "isSet"], [61, 2, 1, "", "lazyAnnotator"], [61, 3, 1, "", "load"], [61, 2, 1, "", "name"], [61, 2, 1, "", "optionalInputAnnotatorTypes"], [61, 2, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "outputCol"], [61, 3, 1, "", "read"], [61, 3, 1, "", "save"], [61, 3, 1, "", "set"], [61, 3, 1, "", "setForceInputTypeValidation"], [61, 3, 1, "", "setInputCols"], [61, 3, 1, "", "setLazyAnnotator"], [61, 3, 1, "", "setOutputCol"], [61, 3, 1, "", "setParamValue"], [61, 3, 1, "", "setParams"], [61, 2, 1, "", "skipLPInputColsValidation"], [61, 3, 1, "", "transform"], [61, 2, 1, "", "uid"], [61, 3, 1, "", "write"]], "sparknlp_jsl.annotator.filtering_params": [[62, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[62, 2, 1, "", "blackList"], [62, 2, 1, "", "caseSensitive"], [62, 2, 1, "", "criteria"], [62, 2, 1, "", "filterValue"], [62, 2, 1, "", "regex"], [62, 3, 1, "", "setBlackList"], [62, 3, 1, "", "setCaseSensitive"], [62, 3, 1, "", "setCriteria"], [62, 3, 1, "", "setDenyList"], [62, 3, 1, "", "setFilterValue"], [62, 3, 1, "", "setRegex"], [62, 3, 1, "", "setWhiteList"], [62, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.flattener": [[63, 1, 1, "", "Flattener"]], "sparknlp_jsl.annotator.flattener.Flattener": [[63, 2, 1, "", "cleanAnnotations"], [63, 3, 1, "", "clear"], [63, 3, 1, "", "copy"], [63, 3, 1, "", "explainParam"], [63, 3, 1, "", "explainParams"], [63, 3, 1, "", "extractParamMap"], [63, 2, 1, "", "flattenExplodedColumns"], [63, 3, 1, "", "getInputCols"], [63, 3, 1, "", "getOrDefault"], [63, 3, 1, "", "getParam"], [63, 3, 1, "", "getParamValue"], [63, 2, 1, "", "getter_attrs"], [63, 3, 1, "", "hasDefault"], [63, 3, 1, "", "hasParam"], [63, 2, 1, "", "inputCols"], [63, 3, 1, "", "isDefined"], [63, 3, 1, "", "isSet"], [63, 2, 1, "", "keepOriginalColumns"], [63, 2, 1, "", "kwargs"], [63, 3, 1, "", "load"], [63, 2, 1, "", "name"], [63, 2, 1, "", "orderByColumn"], [63, 2, 1, "", "orderDescending"], [63, 2, 1, "", "outputAnnotatorType"], [63, 3, 1, "", "read"], [63, 3, 1, "", "save"], [63, 3, 1, "", "set"], [63, 3, 1, "", "setCleanAnnotations"], [63, 3, 1, "", "setExplodeSelectedFields"], [63, 3, 1, "", "setFlattenExplodedColumns"], [63, 3, 1, "", "setInputCols"], [63, 3, 1, "", "setKeepOriginalColumns"], [63, 3, 1, "", "setOrderByColumn"], [63, 3, 1, "", "setOrderDescending"], [63, 3, 1, "", "setParamValue"], [63, 3, 1, "", "setParams"], [63, 3, 1, "", "transform"], [63, 2, 1, "", "uid"], [63, 3, 1, "", "write"]], "sparknlp_jsl.annotator.generic_classifier": [[64, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[64, 1, 1, "", "GenericClassifierApproach"], [64, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[64, 2, 1, "", "batchSize"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "copy"], [64, 2, 1, "", "datasetInfo"], [64, 2, 1, "", "doExceptionHandling"], [64, 2, 1, "", "dropout"], [64, 2, 1, "", "engine"], [64, 2, 1, "", "epochsN"], [64, 3, 1, "", "explainParam"], [64, 3, 1, "", "explainParams"], [64, 3, 1, "", "extractParamMap"], [64, 2, 1, "", "featureScaling"], [64, 3, 1, "", "fit"], [64, 3, 1, "", "fitMultiple"], [64, 2, 1, "", "fixImbalance"], [64, 3, 1, "", "getEngine"], [64, 3, 1, "", "getInputCols"], [64, 3, 1, "", "getLazyAnnotator"], [64, 3, 1, "", "getOrDefault"], [64, 3, 1, "", "getOutputCol"], [64, 3, 1, "", "getParam"], [64, 3, 1, "", "getParamValue"], [64, 2, 1, "", "getter_attrs"], [64, 3, 1, "", "hasDefault"], [64, 3, 1, "", "hasParam"], [64, 2, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "inputCols"], [64, 3, 1, "", "inputColsValidation"], [64, 3, 1, "", "isDefined"], [64, 3, 1, "", "isSet"], [64, 2, 1, "", "labelColumn"], [64, 2, 1, "", "lazyAnnotator"], [64, 2, 1, "", "learningRate"], [64, 3, 1, "", "load"], [64, 2, 1, "", "modelFile"], [64, 2, 1, "", "multiClass"], [64, 2, 1, "", "optionalInputAnnotatorTypes"], [64, 2, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "outputCol"], [64, 2, 1, "", "outputLogsPath"], [64, 3, 1, "", "read"], [64, 3, 1, "", "save"], [64, 3, 1, "", "set"], [64, 3, 1, "", "setBatchSize"], [64, 3, 1, "", "setDatasetInfo"], [64, 3, 1, "", "setDoExceptionHandling"], [64, 3, 1, "", "setDropout"], [64, 3, 1, "", "setEpochsNumber"], [64, 3, 1, "", "setFeatureScaling"], [64, 3, 1, "", "setFixImbalance"], [64, 3, 1, "", "setForceInputTypeValidation"], [64, 3, 1, "", "setInputCols"], [64, 3, 1, "", "setLabelCol"], [64, 3, 1, "", "setLazyAnnotator"], [64, 3, 1, "", "setLearningRate"], [64, 3, 1, "", "setModelFile"], [64, 3, 1, "", "setMultiClass"], [64, 3, 1, "", "setOutputCol"], [64, 3, 1, "", "setOutputLogsPath"], [64, 3, 1, "", "setParamValue"], [64, 3, 1, "", "setValidationSplit"], [64, 2, 1, "", "skipLPInputColsValidation"], [64, 2, 1, "", "uid"], [64, 2, 1, "", "validationSplit"], [64, 3, 1, "", "write"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[64, 2, 1, "", "classes"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "copy"], [64, 2, 1, "", "datasetInfo"], [64, 2, 1, "", "doExceptionHandling"], [64, 3, 1, "", "explainParam"], [64, 3, 1, "", "explainParams"], [64, 3, 1, "", "extractParamMap"], [64, 2, 1, "", "featureScaling"], [64, 3, 1, "", "getInputCols"], [64, 3, 1, "", "getLazyAnnotator"], [64, 3, 1, "", "getOrDefault"], [64, 3, 1, "", "getOutputCol"], [64, 3, 1, "", "getParam"], [64, 3, 1, "", "getParamValue"], [64, 2, 1, "", "getter_attrs"], [64, 3, 1, "", "hasDefault"], [64, 3, 1, "", "hasParam"], [64, 2, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "inputCols"], [64, 3, 1, "", "inputColsValidation"], [64, 3, 1, "", "isDefined"], [64, 3, 1, "", "isSet"], [64, 2, 1, "", "lazyAnnotator"], [64, 3, 1, "", "load"], [64, 2, 1, "", "multiClass"], [64, 2, 1, "", "name"], [64, 2, 1, "", "optionalInputAnnotatorTypes"], [64, 2, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "outputCol"], [64, 3, 1, "", "pretrained"], [64, 3, 1, "", "read"], [64, 3, 1, "", "save"], [64, 3, 1, "", "set"], [64, 3, 1, "", "setDatasetInfo"], [64, 3, 1, "", "setDoExceptionHandling"], [64, 3, 1, "", "setFeatureScaling"], [64, 3, 1, "", "setForceInputTypeValidation"], [64, 3, 1, "", "setInputCols"], [64, 3, 1, "", "setLazyAnnotator"], [64, 3, 1, "", "setMultiClass"], [64, 3, 1, "", "setOutputCol"], [64, 3, 1, "", "setParamValue"], [64, 3, 1, "", "setParams"], [64, 2, 1, "", "skipLPInputColsValidation"], [64, 3, 1, "", "transform"], [64, 2, 1, "", "uid"], [64, 3, 1, "", "write"]], "sparknlp_jsl.annotator.handle_exception_params": [[66, 1, 1, "", "HandleExceptionParams"]], "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams": [[66, 2, 1, "", "doExceptionHandling"], [66, 3, 1, "", "setDoExceptionHandling"]], "sparknlp_jsl.annotator.matcher": [[69, 0, 0, "-", "text_matcher_internal"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[69, 1, 1, "", "TextMatcherInternal"], [69, 1, 1, "", "TextMatcherInternalModel"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal": [[69, 2, 1, "", "buildFromTokens"], [69, 2, 1, "", "caseSensitive"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "copy"], [69, 2, 1, "", "delimiter"], [69, 2, 1, "", "entities"], [69, 2, 1, "", "entityValue"], [69, 3, 1, "", "explainParam"], [69, 3, 1, "", "explainParams"], [69, 3, 1, "", "extractParamMap"], [69, 3, 1, "", "fit"], [69, 3, 1, "", "fitMultiple"], [69, 3, 1, "", "getInputCols"], [69, 3, 1, "", "getLazyAnnotator"], [69, 3, 1, "", "getOrDefault"], [69, 3, 1, "", "getOutputCol"], [69, 3, 1, "", "getParam"], [69, 3, 1, "", "getParamValue"], [69, 2, 1, "", "getter_attrs"], [69, 3, 1, "", "hasDefault"], [69, 3, 1, "", "hasParam"], [69, 2, 1, "", "inputAnnotatorTypes"], [69, 2, 1, "", "inputCols"], [69, 3, 1, "", "inputColsValidation"], [69, 3, 1, "", "isDefined"], [69, 3, 1, "", "isSet"], [69, 2, 1, "", "lazyAnnotator"], [69, 3, 1, "", "load"], [69, 2, 1, "", "mergeOverlapping"], [69, 2, 1, "", "optionalInputAnnotatorTypes"], [69, 2, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "outputCol"], [69, 3, 1, "", "read"], [69, 3, 1, "", "save"], [69, 3, 1, "", "set"], [69, 3, 1, "", "setBuildFromTokens"], [69, 3, 1, "", "setCaseSensitive"], [69, 3, 1, "", "setDelimiter"], [69, 3, 1, "", "setEntities"], [69, 3, 1, "", "setEntityValue"], [69, 3, 1, "", "setForceInputTypeValidation"], [69, 3, 1, "", "setInputCols"], [69, 3, 1, "", "setLazyAnnotator"], [69, 3, 1, "", "setMergeOverlapping"], [69, 3, 1, "", "setOutputCol"], [69, 3, 1, "", "setParamValue"], [69, 2, 1, "", "skipLPInputColsValidation"], [69, 2, 1, "", "uid"], [69, 3, 1, "", "write"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel": [[69, 2, 1, "", "buildFromTokens"], [69, 2, 1, "", "caseSensitive"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "copy"], [69, 2, 1, "", "delimiter"], [69, 2, 1, "", "entityValue"], [69, 3, 1, "", "explainParam"], [69, 3, 1, "", "explainParams"], [69, 3, 1, "", "extractParamMap"], [69, 3, 1, "", "getCaseSensitive"], [69, 3, 1, "", "getDelimiter"], [69, 3, 1, "", "getInputCols"], [69, 3, 1, "", "getLazyAnnotator"], [69, 3, 1, "", "getOrDefault"], [69, 3, 1, "", "getOutputCol"], [69, 3, 1, "", "getParam"], [69, 3, 1, "", "getParamValue"], [69, 2, 1, "", "getter_attrs"], [69, 3, 1, "", "hasDefault"], [69, 3, 1, "", "hasParam"], [69, 2, 1, "", "inputAnnotatorTypes"], [69, 2, 1, "", "inputCols"], [69, 3, 1, "", "inputColsValidation"], [69, 3, 1, "", "isDefined"], [69, 3, 1, "", "isSet"], [69, 2, 1, "", "lazyAnnotator"], [69, 3, 1, "", "load"], [69, 2, 1, "", "mergeOverlapping"], [69, 2, 1, "", "name"], [69, 2, 1, "", "optionalInputAnnotatorTypes"], [69, 2, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "outputCol"], [69, 3, 1, "", "pretrained"], [69, 3, 1, "", "read"], [69, 3, 1, "", "save"], [69, 2, 1, "", "searchTrie"], [69, 3, 1, "", "set"], [69, 3, 1, "", "setBuildFromTokens"], [69, 3, 1, "", "setDelimiter"], [69, 3, 1, "", "setEntityValue"], [69, 3, 1, "", "setForceInputTypeValidation"], [69, 3, 1, "", "setInputCols"], [69, 3, 1, "", "setLazyAnnotator"], [69, 3, 1, "", "setMergeOverlapping"], [69, 3, 1, "", "setOutputCol"], [69, 3, 1, "", "setParamValue"], [69, 3, 1, "", "setParams"], [69, 2, 1, "", "skipLPInputColsValidation"], [69, 3, 1, "", "transform"], [69, 2, 1, "", "uid"], [69, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge": [[70, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[70, 1, 1, "", "ChunkMergeApproach"], [70, 1, 1, "", "ChunkMergeModel"], [70, 1, 1, "", "MergeCommonParams"], [70, 1, 1, "", "MergeFeatureParams"], [70, 1, 1, "", "MergePrioritizationParams"], [70, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[70, 2, 1, "", "blackList"], [70, 2, 1, "", "caseSensitive"], [70, 2, 1, "", "chunkPrecedence"], [70, 2, 1, "", "chunkPrecedenceValuePrioritization"], [70, 3, 1, "", "clear"], [70, 3, 1, "", "copy"], [70, 2, 1, "", "criteria"], [70, 2, 1, "", "defaultConfidence"], [70, 2, 1, "", "doExceptionHandling"], [70, 2, 1, "", "entitiesConfidenceResource"], [70, 3, 1, "", "explainParam"], [70, 3, 1, "", "explainParams"], [70, 3, 1, "", "extractParamMap"], [70, 2, 1, "", "falsePositivesResource"], [70, 2, 1, "", "filterValue"], [70, 3, 1, "", "fit"], [70, 3, 1, "", "fitMultiple"], [70, 3, 1, "", "getInputCols"], [70, 3, 1, "", "getLazyAnnotator"], [70, 3, 1, "", "getOrDefault"], [70, 3, 1, "", "getOutputCol"], [70, 3, 1, "", "getParam"], [70, 3, 1, "", "getParamValue"], [70, 2, 1, "", "getter_attrs"], [70, 3, 1, "", "hasDefault"], [70, 3, 1, "", "hasParam"], [70, 2, 1, "", "inputAnnotatorTypes"], [70, 2, 1, "", "inputCols"], [70, 3, 1, "", "inputColsValidation"], [70, 3, 1, "", "isDefined"], [70, 3, 1, "", "isSet"], [70, 2, 1, "", "lazyAnnotator"], [70, 3, 1, "", "load"], [70, 2, 1, "", "mergeOverlapping"], [70, 2, 1, "", "name"], [70, 2, 1, "", "optionalInputAnnotatorTypes"], [70, 2, 1, "", "orderingFeatures"], [70, 2, 1, "", "outputAnnotatorType"], [70, 2, 1, "", "outputCol"], [70, 3, 1, "", "read"], [70, 2, 1, "", "regex"], [70, 2, 1, "", "replaceDictResource"], [70, 3, 1, "", "save"], [70, 2, 1, "", "selectionStrategy"], [70, 3, 1, "", "set"], [70, 3, 1, "", "setBlackList"], [70, 3, 1, "", "setCaseSensitive"], [70, 3, 1, "", "setChunkPrecedence"], [70, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [70, 3, 1, "", "setCriteria"], [70, 3, 1, "", "setDefaultConfidence"], [70, 3, 1, "", "setDenyList"], [70, 3, 1, "", "setDoExceptionHandling"], [70, 3, 1, "", "setEntitiesConfidence"], [70, 3, 1, "", "setEntitiesConfidenceResource"], [70, 3, 1, "", "setFalsePositivesResource"], [70, 3, 1, "", "setFilterValue"], [70, 3, 1, "", "setForceInputTypeValidation"], [70, 3, 1, "", "setInputCols"], [70, 3, 1, "", "setLazyAnnotator"], [70, 3, 1, "", "setMergeOverlapping"], [70, 3, 1, "", "setOrderingFeatures"], [70, 3, 1, "", "setOutputCol"], [70, 3, 1, "", "setParamValue"], [70, 3, 1, "", "setRegex"], [70, 3, 1, "", "setReplaceDictResource"], [70, 3, 1, "", "setSelectionStrategy"], [70, 3, 1, "", "setWhiteList"], [70, 2, 1, "", "skipLPInputColsValidation"], [70, 2, 1, "", "uid"], [70, 2, 1, "", "whiteList"], [70, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[70, 2, 1, "", "blackList"], [70, 2, 1, "", "caseSensitive"], [70, 2, 1, "", "chunkPrecedence"], [70, 2, 1, "", "chunkPrecedenceValuePrioritization"], [70, 3, 1, "", "clear"], [70, 3, 1, "", "copy"], [70, 2, 1, "", "criteria"], [70, 2, 1, "", "defaultConfidence"], [70, 3, 1, "", "explainParam"], [70, 3, 1, "", "explainParams"], [70, 3, 1, "", "extractParamMap"], [70, 2, 1, "", "filterValue"], [70, 3, 1, "", "getInputCols"], [70, 3, 1, "", "getLazyAnnotator"], [70, 3, 1, "", "getOrDefault"], [70, 3, 1, "", "getOutputCol"], [70, 3, 1, "", "getParam"], [70, 3, 1, "", "getParamValue"], [70, 2, 1, "", "getter_attrs"], [70, 3, 1, "", "hasDefault"], [70, 3, 1, "", "hasParam"], [70, 2, 1, "", "inputAnnotatorTypes"], [70, 2, 1, "", "inputCols"], [70, 3, 1, "", "inputColsValidation"], [70, 3, 1, "", "isDefined"], [70, 3, 1, "", "isSet"], [70, 2, 1, "", "lazyAnnotator"], [70, 3, 1, "", "load"], [70, 2, 1, "", "mergeOverlapping"], [70, 2, 1, "", "name"], [70, 2, 1, "", "optionalInputAnnotatorTypes"], [70, 2, 1, "", "orderingFeatures"], [70, 2, 1, "", "outputAnnotatorType"], [70, 2, 1, "", "outputCol"], [70, 3, 1, "", "pretrained"], [70, 3, 1, "", "read"], [70, 2, 1, "", "regex"], [70, 3, 1, "", "save"], [70, 2, 1, "", "selectionStrategy"], [70, 3, 1, "", "set"], [70, 3, 1, "", "setBlackList"], [70, 3, 1, "", "setCaseSensitive"], [70, 3, 1, "", "setChunkPrecedence"], [70, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [70, 3, 1, "", "setCriteria"], [70, 3, 1, "", "setDefaultConfidence"], [70, 3, 1, "", "setDenyList"], [70, 3, 1, "", "setFilterValue"], [70, 3, 1, "", "setForceInputTypeValidation"], [70, 3, 1, "", "setInputCols"], [70, 3, 1, "", "setLazyAnnotator"], [70, 3, 1, "", "setMergeOverlapping"], [70, 3, 1, "", "setOrderingFeatures"], [70, 3, 1, "", "setOutputCol"], [70, 3, 1, "", "setParamValue"], [70, 3, 1, "", "setParams"], [70, 3, 1, "", "setRegex"], [70, 3, 1, "", "setSelectionStrategy"], [70, 3, 1, "", "setWhiteList"], [70, 2, 1, "", "skipLPInputColsValidation"], [70, 3, 1, "", "transform"], [70, 2, 1, "", "uid"], [70, 2, 1, "", "whiteList"], [70, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[70, 2, 1, "", "mergeOverlapping"], [70, 3, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams": [[70, 3, 1, "", "getReplaceDict"], [70, 3, 1, "", "setFalsePositives"], [70, 3, 1, "", "setReplaceDict"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[70, 2, 1, "", "chunkPrecedence"], [70, 2, 1, "", "chunkPrecedenceValuePrioritization"], [70, 2, 1, "", "defaultConfidence"], [70, 2, 1, "", "orderingFeatures"], [70, 2, 1, "", "selectionStrategy"], [70, 3, 1, "", "setChunkPrecedence"], [70, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [70, 3, 1, "", "setDefaultConfidence"], [70, 3, 1, "", "setOrderingFeatures"], [70, 3, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[70, 2, 1, "", "entitiesConfidenceResource"], [70, 2, 1, "", "falsePositivesResource"], [70, 2, 1, "", "replaceDictResource"], [70, 3, 1, "", "setEntitiesConfidenceResource"], [70, 3, 1, "", "setFalsePositivesResource"], [70, 3, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[72, 1, 1, "", "MultiChunk2Doc"]], "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc": [[72, 2, 1, "", "blackList"], [72, 2, 1, "", "caseSensitive"], [72, 3, 1, "", "clear"], [72, 3, 1, "", "copy"], [72, 3, 1, "", "explainParam"], [72, 3, 1, "", "explainParams"], [72, 3, 1, "", "extractParamMap"], [72, 3, 1, "", "getInputCols"], [72, 3, 1, "", "getLazyAnnotator"], [72, 3, 1, "", "getOrDefault"], [72, 3, 1, "", "getOutputCol"], [72, 3, 1, "", "getParam"], [72, 3, 1, "", "getParamValue"], [72, 2, 1, "", "getter_attrs"], [72, 3, 1, "", "hasDefault"], [72, 3, 1, "", "hasParam"], [72, 2, 1, "", "inputAnnotatorTypes"], [72, 2, 1, "", "inputCols"], [72, 3, 1, "", "inputColsValidation"], [72, 3, 1, "", "isDefined"], [72, 3, 1, "", "isSet"], [72, 2, 1, "", "lazyAnnotator"], [72, 3, 1, "", "load"], [72, 2, 1, "", "name"], [72, 2, 1, "", "optionalInputAnnotatorTypes"], [72, 2, 1, "", "outputAnnotatorType"], [72, 2, 1, "", "outputCol"], [72, 2, 1, "", "prefix"], [72, 3, 1, "", "read"], [72, 3, 1, "", "save"], [72, 2, 1, "", "separator"], [72, 3, 1, "", "set"], [72, 3, 1, "", "setBlackList"], [72, 3, 1, "", "setCaseSensitive"], [72, 3, 1, "", "setDenyList"], [72, 3, 1, "", "setForceInputTypeValidation"], [72, 3, 1, "", "setInputCols"], [72, 3, 1, "", "setLazyAnnotator"], [72, 3, 1, "", "setOutputCol"], [72, 3, 1, "", "setParamValue"], [72, 3, 1, "", "setParams"], [72, 3, 1, "", "setPrefix"], [72, 3, 1, "", "setSeparator"], [72, 3, 1, "", "setSuffix"], [72, 3, 1, "", "setWhiteList"], [72, 2, 1, "", "skipLPInputColsValidation"], [72, 2, 1, "", "suffix"], [72, 3, 1, "", "transform"], [72, 2, 1, "", "uid"], [72, 2, 1, "", "whiteList"], [72, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner": [[74, 0, 0, "-", "iob_tagger"], [75, 0, 0, "-", "medical_ner"], [76, 0, 0, "-", "ner_chunker"], [77, 0, 0, "-", "ner_converter_internal"], [78, 0, 0, "-", "ner_template_render"], [79, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[74, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[74, 3, 1, "", "clear"], [74, 3, 1, "", "copy"], [74, 3, 1, "", "explainParam"], [74, 3, 1, "", "explainParams"], [74, 3, 1, "", "extractParamMap"], [74, 3, 1, "", "getInputCols"], [74, 3, 1, "", "getLazyAnnotator"], [74, 3, 1, "", "getOrDefault"], [74, 3, 1, "", "getOutputCol"], [74, 3, 1, "", "getParam"], [74, 3, 1, "", "getParamValue"], [74, 2, 1, "", "getter_attrs"], [74, 3, 1, "", "hasDefault"], [74, 3, 1, "", "hasParam"], [74, 2, 1, "", "inputAnnotatorTypes"], [74, 2, 1, "", "inputCols"], [74, 3, 1, "", "inputColsValidation"], [74, 3, 1, "", "isDefined"], [74, 3, 1, "", "isSet"], [74, 2, 1, "", "lazyAnnotator"], [74, 3, 1, "", "load"], [74, 2, 1, "", "name"], [74, 2, 1, "", "optionalInputAnnotatorTypes"], [74, 2, 1, "", "outputAnnotatorType"], [74, 2, 1, "", "outputCol"], [74, 3, 1, "", "read"], [74, 3, 1, "", "save"], [74, 2, 1, "", "scheme"], [74, 3, 1, "", "set"], [74, 3, 1, "", "setForceInputTypeValidation"], [74, 3, 1, "", "setInputCols"], [74, 3, 1, "", "setLazyAnnotator"], [74, 3, 1, "", "setOutputCol"], [74, 3, 1, "", "setParamValue"], [74, 3, 1, "", "setParams"], [74, 3, 1, "", "setScheme"], [74, 2, 1, "", "skipLPInputColsValidation"], [74, 3, 1, "", "transform"], [74, 2, 1, "", "uid"], [74, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.medical_ner": [[75, 1, 1, "", "MedicalNerApproach"], [75, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[75, 2, 1, "", "batchSize"], [75, 3, 1, "", "clear"], [75, 2, 1, "", "configProtoBytes"], [75, 3, 1, "", "copy"], [75, 2, 1, "", "datasetInfo"], [75, 2, 1, "", "dropout"], [75, 2, 1, "", "earlyStoppingCriterion"], [75, 2, 1, "", "earlyStoppingPatience"], [75, 2, 1, "", "enableMemoryOptimizer"], [75, 2, 1, "", "enableOutputLogs"], [75, 2, 1, "", "engine"], [75, 2, 1, "", "entities"], [75, 2, 1, "", "evaluationLogExtended"], [75, 3, 1, "", "explainParam"], [75, 3, 1, "", "explainParams"], [75, 3, 1, "", "extractParamMap"], [75, 3, 1, "", "fit"], [75, 3, 1, "", "fitMultiple"], [75, 3, 1, "", "getEngine"], [75, 3, 1, "", "getInputCols"], [75, 3, 1, "", "getLabelColumn"], [75, 3, 1, "", "getLazyAnnotator"], [75, 3, 1, "", "getOrDefault"], [75, 3, 1, "", "getOutputCol"], [75, 3, 1, "", "getParam"], [75, 3, 1, "", "getParamValue"], [75, 2, 1, "", "getter_attrs"], [75, 2, 1, "", "graphFile"], [75, 2, 1, "", "graphFolder"], [75, 3, 1, "", "hasDefault"], [75, 3, 1, "", "hasParam"], [75, 2, 1, "", "includeAllConfidenceScores"], [75, 2, 1, "", "includeConfidence"], [75, 2, 1, "", "inputAnnotatorTypes"], [75, 2, 1, "", "inputCols"], [75, 3, 1, "", "inputColsValidation"], [75, 3, 1, "", "isDefined"], [75, 3, 1, "", "isSet"], [75, 2, 1, "", "labelColumn"], [75, 2, 1, "", "lazyAnnotator"], [75, 3, 1, "", "load"], [75, 2, 1, "", "logPrefix"], [75, 2, 1, "", "lr"], [75, 2, 1, "", "maxEpochs"], [75, 2, 1, "", "minEpochs"], [75, 2, 1, "", "optionalInputAnnotatorTypes"], [75, 2, 1, "", "outputAnnotatorType"], [75, 2, 1, "", "outputCol"], [75, 2, 1, "", "outputLogsPath"], [75, 2, 1, "", "overrideExistingTags"], [75, 2, 1, "", "po"], [75, 2, 1, "", "pretrainedModelPath"], [75, 2, 1, "", "randomSeed"], [75, 2, 1, "", "randomValidationSplitPerEpoch"], [75, 3, 1, "", "read"], [75, 3, 1, "", "save"], [75, 2, 1, "", "sentenceTokenIndex"], [75, 3, 1, "", "set"], [75, 3, 1, "", "setBatchSize"], [75, 3, 1, "", "setConfigProtoBytes"], [75, 3, 1, "", "setDatasetInfo"], [75, 3, 1, "", "setDoExceptionHandling"], [75, 3, 1, "", "setDropout"], [75, 3, 1, "", "setEarlyStoppingCriterion"], [75, 3, 1, "", "setEarlyStoppingPatience"], [75, 3, 1, "", "setEnableMemoryOptimizer"], [75, 3, 1, "", "setEnableOutputLogs"], [75, 3, 1, "", "setEntities"], [75, 3, 1, "", "setEvaluationLogExtended"], [75, 3, 1, "", "setForceInputTypeValidation"], [75, 3, 1, "", "setGraphFile"], [75, 3, 1, "", "setGraphFolder"], [75, 3, 1, "", "setIncludeAllConfidenceScores"], [75, 3, 1, "", "setIncludeConfidence"], [75, 3, 1, "", "setInputCols"], [75, 3, 1, "", "setLabelColumn"], [75, 3, 1, "", "setLazyAnnotator"], [75, 3, 1, "", "setLogPrefix"], [75, 3, 1, "", "setLr"], [75, 3, 1, "", "setMaxEpochs"], [75, 3, 1, "", "setMinEpochs"], [75, 3, 1, "", "setOutputCol"], [75, 3, 1, "", "setOutputLogsPath"], [75, 3, 1, "", "setOverrideExistingTags"], [75, 3, 1, "", "setParamValue"], [75, 3, 1, "", "setPo"], [75, 3, 1, "", "setPretrainedModelPath"], [75, 3, 1, "", "setRandomSeed"], [75, 3, 1, "", "setRandomValidationSplitPerEpoch"], [75, 3, 1, "", "setSentenceTokenIndex"], [75, 3, 1, "", "setTagsMapping"], [75, 3, 1, "", "setTestDataset"], [75, 3, 1, "", "setUseBestModel"], [75, 3, 1, "", "setUseContrib"], [75, 3, 1, "", "setValidationSplit"], [75, 3, 1, "", "setVerbose"], [75, 2, 1, "", "skipLPInputColsValidation"], [75, 2, 1, "", "testDataset"], [75, 2, 1, "", "uc"], [75, 2, 1, "", "uid"], [75, 2, 1, "", "useBestModel"], [75, 2, 1, "", "useContrib"], [75, 2, 1, "", "validationSplit"], [75, 2, 1, "", "verbose"], [75, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[75, 2, 1, "", "classes"], [75, 3, 1, "", "clear"], [75, 2, 1, "", "configProtoBytes"], [75, 3, 1, "", "copy"], [75, 2, 1, "", "datasetInfo"], [75, 2, 1, "", "doExceptionHandling"], [75, 3, 1, "", "explainParam"], [75, 3, 1, "", "explainParams"], [75, 3, 1, "", "extractParamMap"], [75, 3, 1, "", "getClasses"], [75, 3, 1, "", "getInputCols"], [75, 3, 1, "", "getLazyAnnotator"], [75, 3, 1, "", "getOrDefault"], [75, 3, 1, "", "getOutputCol"], [75, 3, 1, "", "getParam"], [75, 3, 1, "", "getParamValue"], [75, 3, 1, "", "getStorageRef"], [75, 3, 1, "", "getTrainingClassDistribution"], [75, 2, 1, "", "getter_attrs"], [75, 3, 1, "", "hasDefault"], [75, 3, 1, "", "hasParam"], [75, 2, 1, "", "includeAllConfidenceScores"], [75, 2, 1, "", "includeConfidence"], [75, 2, 1, "", "inferenceBatchSize"], [75, 2, 1, "", "inputAnnotatorTypes"], [75, 2, 1, "", "inputCols"], [75, 3, 1, "", "inputColsValidation"], [75, 3, 1, "", "isDefined"], [75, 3, 1, "", "isSet"], [75, 2, 1, "", "labelCasing"], [75, 2, 1, "", "lazyAnnotator"], [75, 3, 1, "", "load"], [75, 3, 1, "", "loadSavedModel"], [75, 2, 1, "", "name"], [75, 2, 1, "", "optionalInputAnnotatorTypes"], [75, 2, 1, "", "outputAnnotatorType"], [75, 2, 1, "", "outputCol"], [75, 3, 1, "", "pretrained"], [75, 3, 1, "", "read"], [75, 3, 1, "", "save"], [75, 2, 1, "", "sentenceTokenIndex"], [75, 3, 1, "", "set"], [75, 3, 1, "", "setConfigProtoBytes"], [75, 3, 1, "", "setDatasetInfo"], [75, 3, 1, "", "setForceInputTypeValidation"], [75, 3, 1, "", "setIncludeConfidence"], [75, 3, 1, "", "setInferenceBatchSize"], [75, 3, 1, "", "setInputCols"], [75, 3, 1, "", "setLabelCasing"], [75, 3, 1, "", "setLazyAnnotator"], [75, 3, 1, "", "setOutputCol"], [75, 3, 1, "", "setParamValue"], [75, 3, 1, "", "setParams"], [75, 3, 1, "", "setSentenceTokenIndex"], [75, 3, 1, "", "setStorageRef"], [75, 2, 1, "", "skipLPInputColsValidation"], [75, 2, 1, "", "storageRef"], [75, 2, 1, "", "trainingClassDistribution"], [75, 3, 1, "", "transform"], [75, 2, 1, "", "uid"], [75, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[76, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[76, 3, 1, "", "clear"], [76, 3, 1, "", "copy"], [76, 3, 1, "", "explainParam"], [76, 3, 1, "", "explainParams"], [76, 3, 1, "", "extractParamMap"], [76, 3, 1, "", "getInputCols"], [76, 3, 1, "", "getLazyAnnotator"], [76, 3, 1, "", "getOrDefault"], [76, 3, 1, "", "getOutputCol"], [76, 3, 1, "", "getParam"], [76, 3, 1, "", "getParamValue"], [76, 2, 1, "", "getter_attrs"], [76, 3, 1, "", "hasDefault"], [76, 3, 1, "", "hasParam"], [76, 2, 1, "", "inputAnnotatorTypes"], [76, 2, 1, "", "inputCols"], [76, 3, 1, "", "inputColsValidation"], [76, 3, 1, "", "isDefined"], [76, 3, 1, "", "isSet"], [76, 2, 1, "", "lazyAnnotator"], [76, 3, 1, "", "load"], [76, 2, 1, "", "name"], [76, 2, 1, "", "optionalInputAnnotatorTypes"], [76, 2, 1, "", "outputAnnotatorType"], [76, 2, 1, "", "outputCol"], [76, 3, 1, "", "read"], [76, 2, 1, "", "regexParsers"], [76, 3, 1, "", "save"], [76, 3, 1, "", "set"], [76, 3, 1, "", "setForceInputTypeValidation"], [76, 3, 1, "", "setInputCols"], [76, 3, 1, "", "setLazyAnnotator"], [76, 3, 1, "", "setOutputCol"], [76, 3, 1, "", "setParamValue"], [76, 3, 1, "", "setParams"], [76, 3, 1, "", "setRegexParsers"], [76, 2, 1, "", "skipLPInputColsValidation"], [76, 3, 1, "", "transform"], [76, 2, 1, "", "uid"], [76, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[77, 1, 1, "", "CommonNerConverterInternalParams"], [77, 1, 1, "", "NerConverterInternal"], [77, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[77, 2, 1, "", "blackList"], [77, 2, 1, "", "caseSensitive"], [77, 2, 1, "", "criteria"], [77, 2, 1, "", "doExceptionHandling"], [77, 2, 1, "", "filterValue"], [77, 2, 1, "", "greedyMode"], [77, 2, 1, "", "ignoreStopWords"], [77, 2, 1, "", "preservePosition"], [77, 2, 1, "", "regex"], [77, 3, 1, "", "setAllowList"], [77, 3, 1, "", "setBlackList"], [77, 3, 1, "", "setCaseSensitive"], [77, 3, 1, "", "setCriteria"], [77, 3, 1, "", "setDenyList"], [77, 3, 1, "", "setDoExceptionHandling"], [77, 3, 1, "", "setFilterValue"], [77, 3, 1, "", "setGreedyMode"], [77, 3, 1, "", "setIgnoreStopWords"], [77, 3, 1, "", "setPreservePosition"], [77, 3, 1, "", "setRegex"], [77, 3, 1, "", "setThreshold"], [77, 3, 1, "", "setWhiteList"], [77, 2, 1, "", "threshold"], [77, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[77, 2, 1, "", "allPossibleFieldsToStandardize"], [77, 2, 1, "", "blackList"], [77, 2, 1, "", "caseSensitive"], [77, 3, 1, "", "clear"], [77, 3, 1, "", "copy"], [77, 2, 1, "", "criteria"], [77, 2, 1, "", "doExceptionHandling"], [77, 3, 1, "", "explainParam"], [77, 3, 1, "", "explainParams"], [77, 3, 1, "", "extractParamMap"], [77, 2, 1, "", "filterValue"], [77, 3, 1, "", "fit"], [77, 3, 1, "", "fitMultiple"], [77, 3, 1, "", "getInputCols"], [77, 3, 1, "", "getLazyAnnotator"], [77, 3, 1, "", "getOrDefault"], [77, 3, 1, "", "getOutputCol"], [77, 3, 1, "", "getParam"], [77, 3, 1, "", "getParamValue"], [77, 2, 1, "", "getter_attrs"], [77, 2, 1, "", "greedyMode"], [77, 3, 1, "", "hasDefault"], [77, 3, 1, "", "hasParam"], [77, 2, 1, "", "ignoreStopWords"], [77, 2, 1, "", "includeOutputColumn"], [77, 2, 1, "", "includeStandardField"], [77, 2, 1, "", "inputAnnotatorTypes"], [77, 2, 1, "", "inputCols"], [77, 3, 1, "", "inputColsValidation"], [77, 3, 1, "", "isDefined"], [77, 3, 1, "", "isSet"], [77, 2, 1, "", "lazyAnnotator"], [77, 3, 1, "", "load"], [77, 2, 1, "", "name"], [77, 2, 1, "", "optionalInputAnnotatorTypes"], [77, 2, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "outputCol"], [77, 2, 1, "", "outputColumnKey"], [77, 2, 1, "", "preservePosition"], [77, 3, 1, "", "read"], [77, 2, 1, "", "regex"], [77, 2, 1, "", "replaceDictResource"], [77, 2, 1, "", "replaceLabels"], [77, 3, 1, "", "save"], [77, 3, 1, "", "set"], [77, 3, 1, "", "setAllPossibleFieldsToStandardize"], [77, 3, 1, "", "setAllowList"], [77, 3, 1, "", "setBlackList"], [77, 3, 1, "", "setCaseSensitive"], [77, 3, 1, "", "setCriteria"], [77, 3, 1, "", "setDenyList"], [77, 3, 1, "", "setDoExceptionHandling"], [77, 3, 1, "", "setFilterValue"], [77, 3, 1, "", "setGreedyMode"], [77, 3, 1, "", "setIgnoreStopWords"], [77, 3, 1, "", "setIncludeOutputColumn"], [77, 3, 1, "", "setIncludeStandardField"], [77, 3, 1, "", "setInputCols"], [77, 3, 1, "", "setLazyAnnotator"], [77, 3, 1, "", "setOutputCol"], [77, 3, 1, "", "setOutputColumnKey"], [77, 3, 1, "", "setParamValue"], [77, 3, 1, "", "setPreservePosition"], [77, 3, 1, "", "setRegex"], [77, 3, 1, "", "setReplaceDictResource"], [77, 3, 1, "", "setReplaceLabels"], [77, 3, 1, "", "setStandardFieldKey"], [77, 3, 1, "", "setThreshold"], [77, 3, 1, "", "setWhiteList"], [77, 2, 1, "", "standardFieldKey"], [77, 2, 1, "", "threshold"], [77, 2, 1, "", "uid"], [77, 2, 1, "", "whiteList"], [77, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[77, 2, 1, "", "blackList"], [77, 2, 1, "", "caseSensitive"], [77, 3, 1, "", "clear"], [77, 3, 1, "", "copy"], [77, 2, 1, "", "criteria"], [77, 2, 1, "", "doExceptionHandling"], [77, 3, 1, "", "explainParam"], [77, 3, 1, "", "explainParams"], [77, 3, 1, "", "extractParamMap"], [77, 2, 1, "", "filterValue"], [77, 3, 1, "", "getInputCols"], [77, 3, 1, "", "getLazyAnnotator"], [77, 3, 1, "", "getOrDefault"], [77, 3, 1, "", "getOutputCol"], [77, 3, 1, "", "getParam"], [77, 3, 1, "", "getParamValue"], [77, 2, 1, "", "getter_attrs"], [77, 2, 1, "", "greedyMode"], [77, 3, 1, "", "hasDefault"], [77, 3, 1, "", "hasParam"], [77, 2, 1, "", "ignoreStopWords"], [77, 2, 1, "", "inputAnnotatorTypes"], [77, 2, 1, "", "inputCols"], [77, 3, 1, "", "inputColsValidation"], [77, 3, 1, "", "isDefined"], [77, 3, 1, "", "isSet"], [77, 2, 1, "", "lazyAnnotator"], [77, 3, 1, "", "load"], [77, 2, 1, "", "name"], [77, 2, 1, "", "optionalInputAnnotatorTypes"], [77, 2, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "outputCol"], [77, 2, 1, "", "preservePosition"], [77, 3, 1, "", "read"], [77, 2, 1, "", "regex"], [77, 3, 1, "", "save"], [77, 3, 1, "", "set"], [77, 3, 1, "", "setAllowList"], [77, 3, 1, "", "setBlackList"], [77, 3, 1, "", "setCaseSensitive"], [77, 3, 1, "", "setCriteria"], [77, 3, 1, "", "setDenyList"], [77, 3, 1, "", "setDoExceptionHandling"], [77, 3, 1, "", "setFilterValue"], [77, 3, 1, "", "setForceInputTypeValidation"], [77, 3, 1, "", "setGreedyMode"], [77, 3, 1, "", "setIgnoreStopWords"], [77, 3, 1, "", "setInputCols"], [77, 3, 1, "", "setLazyAnnotator"], [77, 3, 1, "", "setOutputCol"], [77, 3, 1, "", "setParamValue"], [77, 3, 1, "", "setParams"], [77, 3, 1, "", "setPreservePosition"], [77, 3, 1, "", "setRegex"], [77, 3, 1, "", "setThreshold"], [77, 3, 1, "", "setWhiteList"], [77, 2, 1, "", "skipLPInputColsValidation"], [77, 2, 1, "", "threshold"], [77, 3, 1, "", "transform"], [77, 2, 1, "", "uid"], [77, 2, 1, "", "whiteList"], [77, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[78, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[78, 3, 1, "", "clear"], [78, 2, 1, "", "combineEntities"], [78, 3, 1, "", "copy"], [78, 2, 1, "", "entityScopes"], [78, 3, 1, "", "explainParam"], [78, 3, 1, "", "explainParams"], [78, 3, 1, "", "extractParamMap"], [78, 3, 1, "", "getInputCols"], [78, 3, 1, "", "getLazyAnnotator"], [78, 3, 1, "", "getOrDefault"], [78, 3, 1, "", "getOutputCol"], [78, 3, 1, "", "getParam"], [78, 3, 1, "", "getParamValue"], [78, 2, 1, "", "getter_attrs"], [78, 3, 1, "", "hasDefault"], [78, 3, 1, "", "hasParam"], [78, 2, 1, "", "inputAnnotatorTypes"], [78, 2, 1, "", "inputCols"], [78, 3, 1, "", "inputColsValidation"], [78, 3, 1, "", "isDefined"], [78, 3, 1, "", "isSet"], [78, 2, 1, "", "lazyAnnotator"], [78, 3, 1, "", "load"], [78, 2, 1, "", "optionalInputAnnotatorTypes"], [78, 2, 1, "", "outputAnnotatorType"], [78, 2, 1, "", "outputCol"], [78, 2, 1, "", "permuteEntities"], [78, 3, 1, "", "pretrained"], [78, 2, 1, "", "randomSeed"], [78, 3, 1, "", "read"], [78, 2, 1, "", "resampleEntities"], [78, 3, 1, "", "save"], [78, 3, 1, "", "set"], [78, 3, 1, "", "setCombineEntities"], [78, 3, 1, "", "setEntityScopes"], [78, 3, 1, "", "setForceInputTypeValidation"], [78, 3, 1, "", "setInputCols"], [78, 3, 1, "", "setLazyAnnotator"], [78, 3, 1, "", "setOutputCol"], [78, 3, 1, "", "setParamValue"], [78, 3, 1, "", "setParams"], [78, 3, 1, "", "setPermuteEntities"], [78, 3, 1, "", "setRandomSeed"], [78, 3, 1, "", "setResampleEntities"], [78, 3, 1, "", "setTemplates"], [78, 2, 1, "", "skipLPInputColsValidation"], [78, 2, 1, "", "templates"], [78, 3, 1, "", "transform"], [78, 2, 1, "", "uid"], [78, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[79, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[79, 2, 1, "", "batchSize"], [79, 2, 1, "", "caseSensitive"], [79, 3, 1, "", "clear"], [79, 2, 1, "", "coalesceSentences"], [79, 2, 1, "", "configProtoBytes"], [79, 3, 1, "", "copy"], [79, 2, 1, "", "engine"], [79, 3, 1, "", "explainParam"], [79, 3, 1, "", "explainParams"], [79, 3, 1, "", "extractParamMap"], [79, 3, 1, "", "getBatchSize"], [79, 3, 1, "", "getCaseSensitive"], [79, 3, 1, "", "getClasses"], [79, 3, 1, "", "getEngine"], [79, 3, 1, "", "getInputCols"], [79, 3, 1, "", "getLazyAnnotator"], [79, 3, 1, "", "getMaxSentenceLength"], [79, 3, 1, "", "getOrDefault"], [79, 3, 1, "", "getOutputCol"], [79, 3, 1, "", "getParam"], [79, 3, 1, "", "getParamValue"], [79, 2, 1, "", "getter_attrs"], [79, 3, 1, "", "hasDefault"], [79, 3, 1, "", "hasParam"], [79, 2, 1, "", "ignoreEntities"], [79, 2, 1, "", "inputAnnotatorTypes"], [79, 2, 1, "", "inputCols"], [79, 3, 1, "", "inputColsValidation"], [79, 3, 1, "", "isDefined"], [79, 3, 1, "", "isSet"], [79, 2, 1, "", "lazyAnnotator"], [79, 3, 1, "", "load"], [79, 3, 1, "", "loadSavedModel"], [79, 2, 1, "", "maxSentenceLength"], [79, 2, 1, "", "max_length_limit"], [79, 2, 1, "", "name"], [79, 2, 1, "", "optionalInputAnnotatorTypes"], [79, 2, 1, "", "outputAnnotatorType"], [79, 2, 1, "", "outputCol"], [79, 2, 1, "", "predictionThreshold"], [79, 3, 1, "", "pretrained"], [79, 3, 1, "", "read"], [79, 3, 1, "", "save"], [79, 3, 1, "", "set"], [79, 3, 1, "", "setBatchSize"], [79, 3, 1, "", "setCaseSensitive"], [79, 3, 1, "", "setConfigProtoBytes"], [79, 3, 1, "", "setEntityDefinitions"], [79, 3, 1, "", "setInputCols"], [79, 3, 1, "", "setLazyAnnotator"], [79, 3, 1, "", "setMaxSentenceLength"], [79, 3, 1, "", "setOutputCol"], [79, 3, 1, "", "setParamValue"], [79, 3, 1, "", "setParams"], [79, 3, 1, "", "setPredictionThreshold"], [79, 3, 1, "", "transform"], [79, 2, 1, "", "uid"], [79, 3, 1, "", "write"]], "sparknlp_jsl.annotator.normalizer": [[80, 0, 0, "-", "date_normalizer"], [81, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[80, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[80, 2, 1, "", "anchorDateDay"], [80, 2, 1, "", "anchorDateMonth"], [80, 2, 1, "", "anchorDateYear"], [80, 3, 1, "", "clear"], [80, 3, 1, "", "copy"], [80, 2, 1, "", "defaultReplacementDay"], [80, 2, 1, "", "defaultReplacementMonth"], [80, 2, 1, "", "defaultReplacementYear"], [80, 3, 1, "", "explainParam"], [80, 3, 1, "", "explainParams"], [80, 3, 1, "", "extractParamMap"], [80, 3, 1, "", "getInputCols"], [80, 3, 1, "", "getLazyAnnotator"], [80, 3, 1, "", "getOrDefault"], [80, 3, 1, "", "getOutputCol"], [80, 3, 1, "", "getParam"], [80, 3, 1, "", "getParamValue"], [80, 2, 1, "", "getter_attrs"], [80, 3, 1, "", "hasDefault"], [80, 3, 1, "", "hasParam"], [80, 2, 1, "", "inputAnnotatorTypes"], [80, 2, 1, "", "inputCols"], [80, 3, 1, "", "inputColsValidation"], [80, 3, 1, "", "isDefined"], [80, 3, 1, "", "isSet"], [80, 2, 1, "", "lazyAnnotator"], [80, 3, 1, "", "load"], [80, 2, 1, "", "name"], [80, 2, 1, "", "optionalInputAnnotatorTypes"], [80, 2, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "outputCol"], [80, 2, 1, "", "outputDateFormat"], [80, 3, 1, "", "read"], [80, 3, 1, "", "save"], [80, 3, 1, "", "set"], [80, 3, 1, "", "setAnchorDateDay"], [80, 3, 1, "", "setAnchorDateMonth"], [80, 3, 1, "", "setAnchorDateYear"], [80, 3, 1, "", "setDefaultReplacementDay"], [80, 3, 1, "", "setDefaultReplacementMonth"], [80, 3, 1, "", "setDefaultReplacementYear"], [80, 3, 1, "", "setForceInputTypeValidation"], [80, 3, 1, "", "setInputCols"], [80, 3, 1, "", "setLazyAnnotator"], [80, 3, 1, "", "setOutputCol"], [80, 3, 1, "", "setOutputDateformat"], [80, 3, 1, "", "setParamValue"], [80, 3, 1, "", "setParams"], [80, 2, 1, "", "skipLPInputColsValidation"], [80, 3, 1, "", "transform"], [80, 2, 1, "", "uid"], [80, 3, 1, "", "write"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[81, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[81, 3, 1, "", "clear"], [81, 3, 1, "", "copy"], [81, 3, 1, "", "explainParam"], [81, 3, 1, "", "explainParams"], [81, 3, 1, "", "extractParamMap"], [81, 3, 1, "", "getInputCols"], [81, 3, 1, "", "getLazyAnnotator"], [81, 3, 1, "", "getOrDefault"], [81, 3, 1, "", "getOutputCol"], [81, 3, 1, "", "getParam"], [81, 3, 1, "", "getParamValue"], [81, 2, 1, "", "getter_attrs"], [81, 3, 1, "", "hasDefault"], [81, 3, 1, "", "hasParam"], [81, 2, 1, "", "inputAnnotatorTypes"], [81, 2, 1, "", "inputCols"], [81, 3, 1, "", "inputColsValidation"], [81, 3, 1, "", "isDefined"], [81, 3, 1, "", "isSet"], [81, 2, 1, "", "lazyAnnotator"], [81, 3, 1, "", "load"], [81, 2, 1, "", "lowercase"], [81, 2, 1, "", "optionalInputAnnotatorTypes"], [81, 2, 1, "", "outputAnnotatorType"], [81, 2, 1, "", "outputCol"], [81, 2, 1, "", "policy"], [81, 3, 1, "", "read"], [81, 3, 1, "", "save"], [81, 3, 1, "", "set"], [81, 3, 1, "", "setForceInputTypeValidation"], [81, 3, 1, "", "setInputCols"], [81, 3, 1, "", "setLazyAnnotator"], [81, 3, 1, "", "setLowercase"], [81, 3, 1, "", "setOutputCol"], [81, 3, 1, "", "setParamValue"], [81, 3, 1, "", "setParams"], [81, 3, 1, "", "setPolicy"], [81, 2, 1, "", "skipLPInputColsValidation"], [81, 3, 1, "", "transform"], [81, 2, 1, "", "uid"], [81, 3, 1, "", "write"]], "sparknlp_jsl.annotator.qa": [[83, 0, 0, "-", "beam_search_params"], [85, 0, 0, "-", "medical_qa"], [86, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[83, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[83, 2, 1, "", "doSample"], [83, 2, 1, "", "ignoreTokenIds"], [83, 2, 1, "", "maxContextLength"], [83, 2, 1, "", "maxNewTokens"], [83, 2, 1, "", "noRepeatNgramSize"], [83, 3, 1, "", "setDoSample"], [83, 3, 1, "", "setIgnoreTokenIds"], [83, 3, 1, "", "setMaxContextLength"], [83, 3, 1, "", "setMaxNewTokens"], [83, 3, 1, "", "setNoRepeatNgramSize"], [83, 3, 1, "", "setRandomSeed"], [83, 3, 1, "", "setTopK"], [83, 2, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[85, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[85, 2, 1, "", "batchSize"], [85, 3, 1, "", "clear"], [85, 2, 1, "", "configProtoBytes"], [85, 3, 1, "", "copy"], [85, 2, 1, "", "customPrompt"], [85, 2, 1, "", "doSample"], [85, 3, 1, "", "explainParam"], [85, 3, 1, "", "explainParams"], [85, 3, 1, "", "extractParamMap"], [85, 3, 1, "", "getBatchSize"], [85, 3, 1, "", "getInputCols"], [85, 3, 1, "", "getLazyAnnotator"], [85, 3, 1, "", "getOrDefault"], [85, 3, 1, "", "getOutputCol"], [85, 3, 1, "", "getParam"], [85, 3, 1, "", "getParamValue"], [85, 3, 1, "", "getQuestionTypes"], [85, 2, 1, "", "getter_attrs"], [85, 3, 1, "", "hasDefault"], [85, 3, 1, "", "hasParam"], [85, 2, 1, "", "ignoreTokenIds"], [85, 2, 1, "", "inputAnnotatorTypes"], [85, 2, 1, "", "inputCols"], [85, 3, 1, "", "inputColsValidation"], [85, 3, 1, "", "isDefined"], [85, 3, 1, "", "isSet"], [85, 2, 1, "", "lazyAnnotator"], [85, 3, 1, "", "load"], [85, 3, 1, "", "loadMedicalTextGenerator"], [85, 3, 1, "", "loadSavedModel"], [85, 2, 1, "", "maxContextLength"], [85, 2, 1, "", "maxNewTokens"], [85, 2, 1, "", "mlFrameworkType"], [85, 2, 1, "", "modelType"], [85, 2, 1, "", "name"], [85, 2, 1, "", "noRepeatNgramSize"], [85, 2, 1, "", "optionalInputAnnotatorTypes"], [85, 2, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "outputCol"], [85, 3, 1, "", "pretrained"], [85, 2, 1, "", "questionType"], [85, 3, 1, "", "read"], [85, 3, 1, "", "save"], [85, 3, 1, "", "set"], [85, 3, 1, "", "setBatchSize"], [85, 3, 1, "", "setConfigProtoBytes"], [85, 3, 1, "", "setCustomPrompt"], [85, 3, 1, "", "setDoSample"], [85, 3, 1, "", "setForceInputTypeValidation"], [85, 3, 1, "", "setIgnoreTokenIds"], [85, 3, 1, "", "setInputCols"], [85, 3, 1, "", "setLazyAnnotator"], [85, 3, 1, "", "setMaxContextLength"], [85, 3, 1, "", "setMaxNewTokens"], [85, 3, 1, "", "setNoRepeatNgramSize"], [85, 3, 1, "", "setOutputCol"], [85, 3, 1, "", "setParamValue"], [85, 3, 1, "", "setParams"], [85, 3, 1, "", "setQuestionAnswerTerminals"], [85, 3, 1, "", "setQuestionPrompts"], [85, 3, 1, "", "setQuestionSkipLastToken"], [85, 3, 1, "", "setQuestionType"], [85, 3, 1, "", "setRandomSeed"], [85, 3, 1, "", "setTopK"], [85, 3, 1, "", "setUseCache"], [85, 2, 1, "", "skipLPInputColsValidation"], [85, 2, 1, "", "topK"], [85, 3, 1, "", "transform"], [85, 2, 1, "", "uid"], [85, 2, 1, "", "useCache"], [85, 3, 1, "", "write"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[86, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[86, 3, 1, "", "clear"], [86, 3, 1, "", "copy"], [86, 2, 1, "", "entities1"], [86, 2, 1, "", "entities2"], [86, 3, 1, "", "explainParam"], [86, 3, 1, "", "explainParams"], [86, 3, 1, "", "extractParamMap"], [86, 3, 1, "", "getInputCols"], [86, 3, 1, "", "getLazyAnnotator"], [86, 3, 1, "", "getOrDefault"], [86, 3, 1, "", "getOutputCol"], [86, 3, 1, "", "getParam"], [86, 3, 1, "", "getParamValue"], [86, 2, 1, "", "getter_attrs"], [86, 3, 1, "", "hasDefault"], [86, 3, 1, "", "hasParam"], [86, 2, 1, "", "inputAnnotatorTypes"], [86, 2, 1, "", "inputCols"], [86, 3, 1, "", "inputColsValidation"], [86, 3, 1, "", "isDefined"], [86, 3, 1, "", "isSet"], [86, 2, 1, "", "lazyAnnotator"], [86, 3, 1, "", "load"], [86, 2, 1, "", "name"], [86, 2, 1, "", "optionalInputAnnotatorTypes"], [86, 2, 1, "", "outputAnnotatorType"], [86, 2, 1, "", "outputCol"], [86, 2, 1, "", "questionMark"], [86, 2, 1, "", "questionPronoun"], [86, 3, 1, "", "read"], [86, 3, 1, "", "save"], [86, 3, 1, "", "set"], [86, 3, 1, "", "setEntities1"], [86, 3, 1, "", "setEntities2"], [86, 3, 1, "", "setForceInputTypeValidation"], [86, 3, 1, "", "setInputCols"], [86, 3, 1, "", "setLazyAnnotator"], [86, 3, 1, "", "setOutputCol"], [86, 3, 1, "", "setParamValue"], [86, 3, 1, "", "setParams"], [86, 3, 1, "", "setQuestionMark"], [86, 3, 1, "", "setQuestionPronoun"], [86, 3, 1, "", "setStrategyType"], [86, 2, 1, "", "skipLPInputColsValidation"], [86, 2, 1, "", "strategyType"], [86, 3, 1, "", "transform"], [86, 2, 1, "", "uid"], [86, 3, 1, "", "write"]], "sparknlp_jsl.annotator.rag": [[87, 0, 0, "-", "context_split_assembler"], [89, 0, 0, "-", "vectordb_post_processor"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[87, 1, 1, "", "ContextSplitAssembler"]], "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler": [[87, 3, 1, "", "clear"], [87, 3, 1, "", "copy"], [87, 3, 1, "", "explainParam"], [87, 3, 1, "", "explainParams"], [87, 2, 1, "", "explodeSplits"], [87, 3, 1, "", "extractParamMap"], [87, 3, 1, "", "getInputCols"], [87, 3, 1, "", "getLazyAnnotator"], [87, 3, 1, "", "getOrDefault"], [87, 3, 1, "", "getOutputCol"], [87, 3, 1, "", "getParam"], [87, 3, 1, "", "getParamValue"], [87, 2, 1, "", "getter_attrs"], [87, 3, 1, "", "hasDefault"], [87, 3, 1, "", "hasParam"], [87, 2, 1, "", "inputAnnotatorTypes"], [87, 2, 1, "", "inputCols"], [87, 3, 1, "", "inputColsValidation"], [87, 3, 1, "", "isDefined"], [87, 3, 1, "", "isSet"], [87, 2, 1, "", "joinString"], [87, 2, 1, "", "lazyAnnotator"], [87, 3, 1, "", "load"], [87, 2, 1, "", "name"], [87, 2, 1, "", "optionalInputAnnotatorTypes"], [87, 2, 1, "", "outputAnnotatorType"], [87, 2, 1, "", "outputCol"], [87, 3, 1, "", "read"], [87, 3, 1, "", "save"], [87, 3, 1, "", "set"], [87, 3, 1, "", "setExplodeSplits"], [87, 3, 1, "", "setForceInputTypeValidation"], [87, 3, 1, "", "setInputCols"], [87, 3, 1, "", "setJoinString"], [87, 3, 1, "", "setLazyAnnotator"], [87, 3, 1, "", "setOutputCol"], [87, 3, 1, "", "setParamValue"], [87, 3, 1, "", "setParams"], [87, 2, 1, "", "skipLPInputColsValidation"], [87, 3, 1, "", "transform"], [87, 2, 1, "", "uid"], [87, 3, 1, "", "write"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[89, 1, 1, "", "VectorDBPostProcessor"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor": [[89, 2, 1, "", "allowZeroContentAfterFiltering"], [89, 2, 1, "", "caseSensitive"], [89, 3, 1, "", "clear"], [89, 3, 1, "", "copy"], [89, 2, 1, "", "diversityThreshold"], [89, 3, 1, "", "explainParam"], [89, 3, 1, "", "explainParams"], [89, 3, 1, "", "extractParamMap"], [89, 2, 1, "", "filterBy"], [89, 3, 1, "", "getInputCols"], [89, 3, 1, "", "getLazyAnnotator"], [89, 3, 1, "", "getOrDefault"], [89, 3, 1, "", "getOutputCol"], [89, 3, 1, "", "getParam"], [89, 3, 1, "", "getParamValue"], [89, 2, 1, "", "getter_attrs"], [89, 3, 1, "", "hasDefault"], [89, 3, 1, "", "hasParam"], [89, 2, 1, "", "inputAnnotatorTypes"], [89, 2, 1, "", "inputCols"], [89, 3, 1, "", "inputColsValidation"], [89, 3, 1, "", "isDefined"], [89, 3, 1, "", "isSet"], [89, 2, 1, "", "lazyAnnotator"], [89, 3, 1, "", "load"], [89, 2, 1, "", "maxTopKAfterFiltering"], [89, 2, 1, "", "name"], [89, 2, 1, "", "optionalInputAnnotatorTypes"], [89, 2, 1, "", "outputAnnotatorType"], [89, 2, 1, "", "outputCol"], [89, 3, 1, "", "read"], [89, 3, 1, "", "save"], [89, 3, 1, "", "set"], [89, 3, 1, "", "setAllowZeroContentAfterFiltering"], [89, 3, 1, "", "setCaseSensitive"], [89, 3, 1, "", "setDiversityThreshold"], [89, 3, 1, "", "setFilterBy"], [89, 3, 1, "", "setForceInputTypeValidation"], [89, 3, 1, "", "setInputCols"], [89, 3, 1, "", "setLazyAnnotator"], [89, 3, 1, "", "setMaxTopKAfterFiltering"], [89, 3, 1, "", "setMetadataCriteria"], [89, 3, 1, "", "setMetadataCriteriaAsStr"], [89, 3, 1, "", "setOutputCol"], [89, 3, 1, "", "setParamValue"], [89, 3, 1, "", "setParams"], [89, 3, 1, "", "setSortBy"], [89, 2, 1, "", "skipLPInputColsValidation"], [89, 2, 1, "", "sortBy"], [89, 3, 1, "", "transform"], [89, 2, 1, "", "uid"], [89, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re": [[91, 0, 0, "-", "relation_extraction"], [92, 0, 0, "-", "relation_extraction_dl"], [93, 0, 0, "-", "relation_ner_chunk_filter"], [94, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[91, 1, 1, "", "GenericREModel"], [91, 1, 1, "", "PosologyREModel"], [91, 1, 1, "", "RelationExtractionApproach"], [91, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel": [[91, 2, 1, "", "classes"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "copy"], [91, 2, 1, "", "customLabels"], [91, 2, 1, "", "datasetInfo"], [91, 2, 1, "", "directionSensitive"], [91, 2, 1, "", "doExceptionHandling"], [91, 3, 1, "", "explainParam"], [91, 3, 1, "", "explainParams"], [91, 3, 1, "", "extractParamMap"], [91, 2, 1, "", "featureScaling"], [91, 2, 1, "", "filterByTokenDistance"], [91, 3, 1, "", "getClasses"], [91, 3, 1, "", "getInputCols"], [91, 3, 1, "", "getLazyAnnotator"], [91, 3, 1, "", "getOrDefault"], [91, 3, 1, "", "getOutputCol"], [91, 3, 1, "", "getParam"], [91, 3, 1, "", "getParamValue"], [91, 3, 1, "", "getRelationTypePerPair"], [91, 2, 1, "", "getter_attrs"], [91, 3, 1, "", "hasDefault"], [91, 3, 1, "", "hasParam"], [91, 2, 1, "", "inputAnnotatorTypes"], [91, 2, 1, "", "inputCols"], [91, 3, 1, "", "inputColsValidation"], [91, 3, 1, "", "isDefined"], [91, 3, 1, "", "isSet"], [91, 2, 1, "", "lazyAnnotator"], [91, 3, 1, "", "load"], [91, 2, 1, "", "maxSyntacticDistance"], [91, 2, 1, "", "multiClass"], [91, 2, 1, "", "name"], [91, 2, 1, "", "optionalInputAnnotatorTypes"], [91, 2, 1, "", "outputAnnotatorType"], [91, 2, 1, "", "outputCol"], [91, 2, 1, "", "predictionThreshold"], [91, 3, 1, "", "pretrained"], [91, 3, 1, "", "read"], [91, 2, 1, "", "relationPairs"], [91, 2, 1, "", "relationPairsCaseSensitive"], [91, 3, 1, "", "save"], [91, 2, 1, "", "scopeWindow"], [91, 3, 1, "", "set"], [91, 3, 1, "", "setCustomLabels"], [91, 3, 1, "", "setDatasetInfo"], [91, 3, 1, "", "setDirectionSensitive"], [91, 3, 1, "", "setDoExceptionHandling"], [91, 3, 1, "", "setFeatureScaling"], [91, 3, 1, "", "setFilterByTokenDistance"], [91, 3, 1, "", "setForceInputTypeValidation"], [91, 3, 1, "", "setInputCols"], [91, 3, 1, "", "setLazyAnnotator"], [91, 3, 1, "", "setMaxSyntacticDistance"], [91, 3, 1, "", "setMultiClass"], [91, 3, 1, "", "setOutputCol"], [91, 3, 1, "", "setParamValue"], [91, 3, 1, "", "setParams"], [91, 3, 1, "", "setPredictionThreshold"], [91, 3, 1, "", "setRelationPairs"], [91, 3, 1, "", "setRelationPairsCaseSensitive"], [91, 3, 1, "", "setRelationTypePerPair"], [91, 3, 1, "", "setScopeWindow"], [91, 2, 1, "", "skipLPInputColsValidation"], [91, 3, 1, "", "transform"], [91, 2, 1, "", "uid"], [91, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel": [[91, 2, 1, "", "classes"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "copy"], [91, 2, 1, "", "customLabels"], [91, 2, 1, "", "datasetInfo"], [91, 2, 1, "", "directionSensitive"], [91, 2, 1, "", "doExceptionHandling"], [91, 3, 1, "", "explainParam"], [91, 3, 1, "", "explainParams"], [91, 3, 1, "", "extractParamMap"], [91, 2, 1, "", "featureScaling"], [91, 2, 1, "", "filterByTokenDistance"], [91, 3, 1, "", "getClasses"], [91, 3, 1, "", "getInputCols"], [91, 3, 1, "", "getLazyAnnotator"], [91, 3, 1, "", "getOrDefault"], [91, 3, 1, "", "getOutputCol"], [91, 3, 1, "", "getParam"], [91, 3, 1, "", "getParamValue"], [91, 3, 1, "", "getRelationTypePerPair"], [91, 2, 1, "", "getter_attrs"], [91, 3, 1, "", "hasDefault"], [91, 3, 1, "", "hasParam"], [91, 2, 1, "", "inputAnnotatorTypes"], [91, 2, 1, "", "inputCols"], [91, 3, 1, "", "inputColsValidation"], [91, 3, 1, "", "isDefined"], [91, 3, 1, "", "isSet"], [91, 2, 1, "", "lazyAnnotator"], [91, 3, 1, "", "load"], [91, 2, 1, "", "maxSyntacticDistance"], [91, 2, 1, "", "multiClass"], [91, 2, 1, "", "name"], [91, 2, 1, "", "optionalInputAnnotatorTypes"], [91, 2, 1, "", "outputAnnotatorType"], [91, 2, 1, "", "outputCol"], [91, 2, 1, "", "predictionThreshold"], [91, 3, 1, "", "pretrained"], [91, 3, 1, "", "read"], [91, 2, 1, "", "relationPairs"], [91, 2, 1, "", "relationPairsCaseSensitive"], [91, 3, 1, "", "save"], [91, 2, 1, "", "scopeWindow"], [91, 3, 1, "", "set"], [91, 3, 1, "", "setCustomLabels"], [91, 3, 1, "", "setDatasetInfo"], [91, 3, 1, "", "setDirectionSensitive"], [91, 3, 1, "", "setDoExceptionHandling"], [91, 3, 1, "", "setFeatureScaling"], [91, 3, 1, "", "setFilterByTokenDistance"], [91, 3, 1, "", "setForceInputTypeValidation"], [91, 3, 1, "", "setInputCols"], [91, 3, 1, "", "setLazyAnnotator"], [91, 3, 1, "", "setMaxSyntacticDistance"], [91, 3, 1, "", "setMultiClass"], [91, 3, 1, "", "setOutputCol"], [91, 3, 1, "", "setParamValue"], [91, 3, 1, "", "setParams"], [91, 3, 1, "", "setPredictionThreshold"], [91, 3, 1, "", "setRelationPairs"], [91, 3, 1, "", "setRelationPairsCaseSensitive"], [91, 3, 1, "", "setRelationTypePerPair"], [91, 3, 1, "", "setScopeWindow"], [91, 2, 1, "", "skipLPInputColsValidation"], [91, 3, 1, "", "transform"], [91, 2, 1, "", "uid"], [91, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[91, 2, 1, "", "batchSize"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "copy"], [91, 2, 1, "", "customLabels"], [91, 2, 1, "", "datasetInfo"], [91, 2, 1, "", "directionSensitive"], [91, 2, 1, "", "doExceptionHandling"], [91, 2, 1, "", "dropout"], [91, 2, 1, "", "engine"], [91, 2, 1, "", "epochsN"], [91, 3, 1, "", "explainParam"], [91, 3, 1, "", "explainParams"], [91, 3, 1, "", "extractParamMap"], [91, 2, 1, "", "featureScaling"], [91, 2, 1, "", "filterByTokenDistance"], [91, 3, 1, "", "fit"], [91, 3, 1, "", "fitMultiple"], [91, 2, 1, "", "fixImbalance"], [91, 2, 1, "", "fromEntityBeginCol"], [91, 2, 1, "", "fromEntityEndCol"], [91, 2, 1, "", "fromEntityLabelCol"], [91, 3, 1, "", "getEngine"], [91, 3, 1, "", "getInputCols"], [91, 3, 1, "", "getLazyAnnotator"], [91, 3, 1, "", "getOrDefault"], [91, 3, 1, "", "getOutputCol"], [91, 3, 1, "", "getParam"], [91, 3, 1, "", "getParamValue"], [91, 2, 1, "", "getter_attrs"], [91, 3, 1, "", "hasDefault"], [91, 3, 1, "", "hasParam"], [91, 2, 1, "", "inputAnnotatorTypes"], [91, 2, 1, "", "inputCols"], [91, 3, 1, "", "inputColsValidation"], [91, 3, 1, "", "isDefined"], [91, 3, 1, "", "isSet"], [91, 2, 1, "", "labelColumn"], [91, 2, 1, "", "lazyAnnotator"], [91, 2, 1, "", "learningRate"], [91, 3, 1, "", "load"], [91, 2, 1, "", "maxSyntacticDistance"], [91, 2, 1, "", "modelFile"], [91, 2, 1, "", "multiClass"], [91, 2, 1, "", "name"], [91, 2, 1, "", "optionalInputAnnotatorTypes"], [91, 2, 1, "", "outputAnnotatorType"], [91, 2, 1, "", "outputCol"], [91, 2, 1, "", "outputLogsPath"], [91, 2, 1, "", "overrideExistingLabels"], [91, 2, 1, "", "pretrainedModelPath"], [91, 3, 1, "", "read"], [91, 2, 1, "", "relationDirectionCol"], [91, 3, 1, "", "save"], [91, 2, 1, "", "scopeWindow"], [91, 3, 1, "", "set"], [91, 3, 1, "", "setBatchSize"], [91, 3, 1, "", "setCustomLabels"], [91, 3, 1, "", "setDatasetInfo"], [91, 3, 1, "", "setDirectionSensitive"], [91, 3, 1, "", "setDoExceptionHandling"], [91, 3, 1, "", "setDropout"], [91, 3, 1, "", "setEpochsNumber"], [91, 3, 1, "", "setFeatureScaling"], [91, 3, 1, "", "setFilterByTokenDistance"], [91, 3, 1, "", "setFixImbalance"], [91, 3, 1, "", "setForceInputTypeValidation"], [91, 3, 1, "", "setFromEntity"], [91, 3, 1, "", "setInputCols"], [91, 3, 1, "", "setLabelCol"], [91, 3, 1, "", "setLazyAnnotator"], [91, 3, 1, "", "setLearningRate"], [91, 3, 1, "", "setMaxSyntacticDistance"], [91, 3, 1, "", "setModelFile"], [91, 3, 1, "", "setMultiClass"], [91, 3, 1, "", "setOutputCol"], [91, 3, 1, "", "setOutputLogsPath"], [91, 3, 1, "", "setParamValue"], [91, 3, 1, "", "setPretrainedModelPath"], [91, 3, 1, "", "setRelationDirectionCol"], [91, 3, 1, "", "setScopeWindow"], [91, 3, 1, "", "setToEntity"], [91, 3, 1, "", "setValidationSplit"], [91, 3, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [91, 2, 1, "", "skipLPInputColsValidation"], [91, 2, 1, "", "toEntityBeginCol"], [91, 2, 1, "", "toEntityEndCol"], [91, 2, 1, "", "toEntityLabelCol"], [91, 2, 1, "", "uid"], [91, 2, 1, "", "validationSplit"], [91, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[91, 2, 1, "", "classes"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "copy"], [91, 2, 1, "", "customLabels"], [91, 2, 1, "", "datasetInfo"], [91, 2, 1, "", "directionSensitive"], [91, 2, 1, "", "doExceptionHandling"], [91, 3, 1, "", "explainParam"], [91, 3, 1, "", "explainParams"], [91, 3, 1, "", "extractParamMap"], [91, 2, 1, "", "featureScaling"], [91, 2, 1, "", "filterByTokenDistance"], [91, 3, 1, "", "getClasses"], [91, 3, 1, "", "getInputCols"], [91, 3, 1, "", "getLazyAnnotator"], [91, 3, 1, "", "getOrDefault"], [91, 3, 1, "", "getOutputCol"], [91, 3, 1, "", "getParam"], [91, 3, 1, "", "getParamValue"], [91, 3, 1, "", "getRelationTypePerPair"], [91, 2, 1, "", "getter_attrs"], [91, 3, 1, "", "hasDefault"], [91, 3, 1, "", "hasParam"], [91, 2, 1, "", "inputAnnotatorTypes"], [91, 2, 1, "", "inputCols"], [91, 3, 1, "", "inputColsValidation"], [91, 3, 1, "", "isDefined"], [91, 3, 1, "", "isSet"], [91, 2, 1, "", "lazyAnnotator"], [91, 3, 1, "", "load"], [91, 2, 1, "", "maxSyntacticDistance"], [91, 2, 1, "", "multiClass"], [91, 2, 1, "", "name"], [91, 2, 1, "", "optionalInputAnnotatorTypes"], [91, 2, 1, "", "outputAnnotatorType"], [91, 2, 1, "", "outputCol"], [91, 2, 1, "", "predictionThreshold"], [91, 3, 1, "", "pretrained"], [91, 3, 1, "", "read"], [91, 2, 1, "", "relationPairs"], [91, 2, 1, "", "relationPairsCaseSensitive"], [91, 3, 1, "", "save"], [91, 2, 1, "", "scopeWindow"], [91, 3, 1, "", "set"], [91, 3, 1, "", "setCustomLabels"], [91, 3, 1, "", "setDatasetInfo"], [91, 3, 1, "", "setDirectionSensitive"], [91, 3, 1, "", "setDoExceptionHandling"], [91, 3, 1, "", "setFeatureScaling"], [91, 3, 1, "", "setFilterByTokenDistance"], [91, 3, 1, "", "setForceInputTypeValidation"], [91, 3, 1, "", "setInputCols"], [91, 3, 1, "", "setLazyAnnotator"], [91, 3, 1, "", "setMaxSyntacticDistance"], [91, 3, 1, "", "setMultiClass"], [91, 3, 1, "", "setOutputCol"], [91, 3, 1, "", "setParamValue"], [91, 3, 1, "", "setParams"], [91, 3, 1, "", "setPredictionThreshold"], [91, 3, 1, "", "setRelationPairs"], [91, 3, 1, "", "setRelationPairsCaseSensitive"], [91, 3, 1, "", "setRelationTypePerPair"], [91, 3, 1, "", "setScopeWindow"], [91, 2, 1, "", "skipLPInputColsValidation"], [91, 3, 1, "", "transform"], [91, 2, 1, "", "uid"], [91, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[92, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[92, 2, 1, "", "batchSize"], [92, 2, 1, "", "classes"], [92, 3, 1, "", "clear"], [92, 3, 1, "", "copy"], [92, 2, 1, "", "customLabels"], [92, 2, 1, "", "doExceptionHandling"], [92, 3, 1, "", "explainParam"], [92, 3, 1, "", "explainParams"], [92, 3, 1, "", "extractParamMap"], [92, 3, 1, "", "getClasses"], [92, 3, 1, "", "getInputCols"], [92, 3, 1, "", "getLazyAnnotator"], [92, 3, 1, "", "getOrDefault"], [92, 3, 1, "", "getOutputCol"], [92, 3, 1, "", "getParam"], [92, 3, 1, "", "getParamValue"], [92, 3, 1, "", "getRelationTypePerPair"], [92, 2, 1, "", "getter_attrs"], [92, 3, 1, "", "hasDefault"], [92, 3, 1, "", "hasParam"], [92, 2, 1, "", "inputAnnotatorTypes"], [92, 2, 1, "", "inputCols"], [92, 3, 1, "", "inputColsValidation"], [92, 3, 1, "", "isDefined"], [92, 3, 1, "", "isSet"], [92, 2, 1, "", "lazyAnnotator"], [92, 3, 1, "", "load"], [92, 3, 1, "", "loadSavedModel"], [92, 2, 1, "", "name"], [92, 2, 1, "", "optionalInputAnnotatorTypes"], [92, 2, 1, "", "outputAnnotatorType"], [92, 2, 1, "", "outputCol"], [92, 2, 1, "", "predictionThreshold"], [92, 3, 1, "", "pretrained"], [92, 3, 1, "", "read"], [92, 2, 1, "", "relationPairsCaseSensitive"], [92, 3, 1, "", "save"], [92, 3, 1, "", "set"], [92, 3, 1, "", "setBatchSize"], [92, 3, 1, "", "setCaseSensitive"], [92, 3, 1, "", "setCustomLabels"], [92, 3, 1, "", "setDoExceptionHandling"], [92, 3, 1, "", "setForceInputTypeValidation"], [92, 3, 1, "", "setInputCols"], [92, 3, 1, "", "setLazyAnnotator"], [92, 3, 1, "", "setOutputCol"], [92, 3, 1, "", "setParamValue"], [92, 3, 1, "", "setParams"], [92, 3, 1, "", "setPredictionThreshold"], [92, 3, 1, "", "setRelationPairsCaseSensitive"], [92, 3, 1, "", "setRelationTypePerPair"], [92, 2, 1, "", "skipLPInputColsValidation"], [92, 3, 1, "", "transform"], [92, 2, 1, "", "uid"], [92, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[93, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[93, 3, 1, "", "clear"], [93, 3, 1, "", "copy"], [93, 2, 1, "", "directionSensitive"], [93, 2, 1, "", "docLevelRelations"], [93, 3, 1, "", "explainParam"], [93, 3, 1, "", "explainParams"], [93, 3, 1, "", "extractParamMap"], [93, 2, 1, "", "filterByTokenDistance"], [93, 3, 1, "", "getInputCols"], [93, 3, 1, "", "getLazyAnnotator"], [93, 3, 1, "", "getOrDefault"], [93, 3, 1, "", "getOutputCol"], [93, 3, 1, "", "getParam"], [93, 3, 1, "", "getParamValue"], [93, 2, 1, "", "getter_attrs"], [93, 3, 1, "", "hasDefault"], [93, 3, 1, "", "hasParam"], [93, 2, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "inputCols"], [93, 3, 1, "", "inputColsValidation"], [93, 3, 1, "", "isDefined"], [93, 3, 1, "", "isSet"], [93, 2, 1, "", "lazyAnnotator"], [93, 3, 1, "", "load"], [93, 2, 1, "", "maxSyntacticDistance"], [93, 2, 1, "", "name"], [93, 2, 1, "", "optionalInputAnnotatorTypes"], [93, 2, 1, "", "outputAnnotatorType"], [93, 2, 1, "", "outputCol"], [93, 3, 1, "", "read"], [93, 2, 1, "", "relationPairs"], [93, 2, 1, "", "relationPairsCaseSensitive"], [93, 3, 1, "", "save"], [93, 3, 1, "", "set"], [93, 3, 1, "", "setDirectionSensitive"], [93, 3, 1, "", "setDocLevelRelations"], [93, 3, 1, "", "setFilterByTokenDistance"], [93, 3, 1, "", "setInputCols"], [93, 3, 1, "", "setLazyAnnotator"], [93, 3, 1, "", "setMaxSyntacticDistance"], [93, 3, 1, "", "setOutputCol"], [93, 3, 1, "", "setParamValue"], [93, 3, 1, "", "setParams"], [93, 3, 1, "", "setRelationPairs"], [93, 3, 1, "", "setRelationPairsCaseSensitive"], [93, 3, 1, "", "transform"], [93, 2, 1, "", "uid"], [93, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[94, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[94, 2, 1, "", "caseSensitive"], [94, 3, 1, "", "clear"], [94, 2, 1, "", "coalesceSentences"], [94, 2, 1, "", "configProtoBytes"], [94, 3, 1, "", "copy"], [94, 3, 1, "", "explainParam"], [94, 3, 1, "", "explainParams"], [94, 3, 1, "", "extractParamMap"], [94, 3, 1, "", "getCaseSensitive"], [94, 3, 1, "", "getClasses"], [94, 3, 1, "", "getInputCols"], [94, 3, 1, "", "getLazyAnnotator"], [94, 3, 1, "", "getOrDefault"], [94, 3, 1, "", "getOutputCol"], [94, 3, 1, "", "getParam"], [94, 3, 1, "", "getParamValue"], [94, 2, 1, "", "getter_attrs"], [94, 3, 1, "", "hasDefault"], [94, 3, 1, "", "hasParam"], [94, 2, 1, "", "inputAnnotatorTypes"], [94, 2, 1, "", "inputCols"], [94, 3, 1, "", "inputColsValidation"], [94, 3, 1, "", "isDefined"], [94, 3, 1, "", "isSet"], [94, 2, 1, "", "lazyAnnotator"], [94, 3, 1, "", "load"], [94, 3, 1, "", "loadSavedModel"], [94, 3, 1, "", "loadSavedModelOpenSource"], [94, 2, 1, "", "maxSentenceLength"], [94, 2, 1, "", "multiLabel"], [94, 2, 1, "", "name"], [94, 2, 1, "", "negativeRelationships"], [94, 2, 1, "", "optionalInputAnnotatorTypes"], [94, 2, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "outputCol"], [94, 2, 1, "", "predictionThreshold"], [94, 3, 1, "", "pretrained"], [94, 3, 1, "", "read"], [94, 3, 1, "", "save"], [94, 3, 1, "", "set"], [94, 3, 1, "", "setCaseSensitive"], [94, 3, 1, "", "setCoalesceSentences"], [94, 3, 1, "", "setConfigProtoBytes"], [94, 3, 1, "", "setForceInputTypeValidation"], [94, 3, 1, "", "setInputCols"], [94, 3, 1, "", "setLazyAnnotator"], [94, 3, 1, "", "setMaxSentenceLength"], [94, 3, 1, "", "setNegativeRelationships"], [94, 3, 1, "", "setOutputCol"], [94, 3, 1, "", "setParamValue"], [94, 3, 1, "", "setParams"], [94, 3, 1, "", "setRelationalCategories"], [94, 2, 1, "", "skipLPInputColsValidation"], [94, 3, 1, "", "transform"], [94, 2, 1, "", "uid"], [94, 3, 1, "", "write"]], "sparknlp_jsl.annotator.regex": [[96, 0, 0, "-", "regex_matcher"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[96, 1, 1, "", "RegexMatcherInternal"], [96, 1, 1, "", "RegexMatcherInternalModel"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal": [[96, 3, 1, "", "clear"], [96, 3, 1, "", "copy"], [96, 2, 1, "", "delimiter"], [96, 3, 1, "", "explainParam"], [96, 3, 1, "", "explainParams"], [96, 2, 1, "", "externalRules"], [96, 3, 1, "", "extractParamMap"], [96, 3, 1, "", "fit"], [96, 3, 1, "", "fitMultiple"], [96, 3, 1, "", "getInputCols"], [96, 3, 1, "", "getLazyAnnotator"], [96, 3, 1, "", "getOrDefault"], [96, 3, 1, "", "getOutputCol"], [96, 3, 1, "", "getParam"], [96, 3, 1, "", "getParamValue"], [96, 2, 1, "", "getter_attrs"], [96, 3, 1, "", "hasDefault"], [96, 3, 1, "", "hasParam"], [96, 2, 1, "", "inputAnnotatorTypes"], [96, 2, 1, "", "inputCols"], [96, 3, 1, "", "inputColsValidation"], [96, 3, 1, "", "isDefined"], [96, 3, 1, "", "isSet"], [96, 2, 1, "", "lazyAnnotator"], [96, 3, 1, "", "load"], [96, 2, 1, "", "mergeOverlapping"], [96, 2, 1, "", "optionalInputAnnotatorTypes"], [96, 2, 1, "", "outputAnnotatorType"], [96, 2, 1, "", "outputCol"], [96, 3, 1, "", "read"], [96, 2, 1, "", "rules"], [96, 3, 1, "", "save"], [96, 3, 1, "", "set"], [96, 3, 1, "", "setDelimiter"], [96, 3, 1, "", "setExternalRules"], [96, 3, 1, "", "setForceInputTypeValidation"], [96, 3, 1, "", "setInputCols"], [96, 3, 1, "", "setLazyAnnotator"], [96, 3, 1, "", "setMergeOverlapping"], [96, 3, 1, "", "setOutputCol"], [96, 3, 1, "", "setParamValue"], [96, 3, 1, "", "setRules"], [96, 3, 1, "", "setStrategy"], [96, 2, 1, "", "skipLPInputColsValidation"], [96, 2, 1, "", "strategy"], [96, 2, 1, "", "uid"], [96, 3, 1, "", "write"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel": [[96, 3, 1, "", "clear"], [96, 3, 1, "", "copy"], [96, 3, 1, "", "explainParam"], [96, 3, 1, "", "explainParams"], [96, 3, 1, "", "extractParamMap"], [96, 3, 1, "", "getInputCols"], [96, 3, 1, "", "getLazyAnnotator"], [96, 3, 1, "", "getOrDefault"], [96, 3, 1, "", "getOutputCol"], [96, 3, 1, "", "getParam"], [96, 3, 1, "", "getParamValue"], [96, 2, 1, "", "getter_attrs"], [96, 3, 1, "", "hasDefault"], [96, 3, 1, "", "hasParam"], [96, 2, 1, "", "inputAnnotatorTypes"], [96, 2, 1, "", "inputCols"], [96, 3, 1, "", "inputColsValidation"], [96, 3, 1, "", "isDefined"], [96, 3, 1, "", "isSet"], [96, 2, 1, "", "lazyAnnotator"], [96, 3, 1, "", "load"], [96, 2, 1, "", "mergeOverlapping"], [96, 2, 1, "", "name"], [96, 2, 1, "", "optionalInputAnnotatorTypes"], [96, 2, 1, "", "outputAnnotatorType"], [96, 2, 1, "", "outputCol"], [96, 3, 1, "", "pretrained"], [96, 3, 1, "", "read"], [96, 3, 1, "", "save"], [96, 3, 1, "", "set"], [96, 3, 1, "", "setInputCols"], [96, 3, 1, "", "setLazyAnnotator"], [96, 3, 1, "", "setMergeOverlapping"], [96, 3, 1, "", "setOutputCol"], [96, 3, 1, "", "setParamValue"], [96, 3, 1, "", "setParams"], [96, 3, 1, "", "transform"], [96, 2, 1, "", "uid"], [96, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution": [[98, 0, 0, "-", "resolver_merger"], [99, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[98, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[98, 3, 1, "", "clear"], [98, 3, 1, "", "copy"], [98, 3, 1, "", "explainParam"], [98, 3, 1, "", "explainParams"], [98, 3, 1, "", "extractParamMap"], [98, 3, 1, "", "getInputCols"], [98, 3, 1, "", "getLazyAnnotator"], [98, 3, 1, "", "getOrDefault"], [98, 3, 1, "", "getOutputCol"], [98, 3, 1, "", "getParam"], [98, 3, 1, "", "getParamValue"], [98, 2, 1, "", "getter_attrs"], [98, 3, 1, "", "hasDefault"], [98, 3, 1, "", "hasParam"], [98, 2, 1, "", "inputAnnotatorTypes"], [98, 2, 1, "", "inputCols"], [98, 3, 1, "", "inputColsValidation"], [98, 3, 1, "", "isDefined"], [98, 3, 1, "", "isSet"], [98, 2, 1, "", "lazyAnnotator"], [98, 3, 1, "", "load"], [98, 2, 1, "", "name"], [98, 2, 1, "", "optionalInputAnnotatorTypes"], [98, 2, 1, "", "outputAnnotatorType"], [98, 2, 1, "", "outputCol"], [98, 3, 1, "", "read"], [98, 3, 1, "", "save"], [98, 3, 1, "", "set"], [98, 3, 1, "", "setForceInputTypeValidation"], [98, 3, 1, "", "setInputCols"], [98, 3, 1, "", "setLazyAnnotator"], [98, 3, 1, "", "setOutputCol"], [98, 3, 1, "", "setParamValue"], [98, 3, 1, "", "setParams"], [98, 2, 1, "", "skipLPInputColsValidation"], [98, 3, 1, "", "transform"], [98, 2, 1, "", "uid"], [98, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[99, 1, 1, "", "SentenceEntityResolverApproach"], [99, 1, 1, "", "SentenceEntityResolverModel"], [99, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[99, 2, 1, "", "aux_label_col"], [99, 2, 1, "", "caseSensitive"], [99, 3, 1, "", "clear"], [99, 2, 1, "", "confidenceFunction"], [99, 3, 1, "", "copy"], [99, 2, 1, "", "datasetInfo"], [99, 2, 1, "", "distanceFunction"], [99, 2, 1, "", "doExceptionHandling"], [99, 2, 1, "", "dropCodesList"], [99, 2, 1, "", "engine"], [99, 3, 1, "", "explainParam"], [99, 3, 1, "", "explainParams"], [99, 3, 1, "", "extractParamMap"], [99, 3, 1, "", "fit"], [99, 3, 1, "", "fitMultiple"], [99, 3, 1, "", "getCaseSensitive"], [99, 3, 1, "", "getEngine"], [99, 3, 1, "", "getInputCols"], [99, 3, 1, "", "getLazyAnnotator"], [99, 3, 1, "", "getOrDefault"], [99, 3, 1, "", "getOutputCol"], [99, 3, 1, "", "getParam"], [99, 3, 1, "", "getParamValue"], [99, 2, 1, "", "getter_attrs"], [99, 3, 1, "", "hasDefault"], [99, 3, 1, "", "hasParam"], [99, 2, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "inputCols"], [99, 3, 1, "", "inputColsValidation"], [99, 3, 1, "", "isDefined"], [99, 3, 1, "", "isSet"], [99, 2, 1, "", "labelCol"], [99, 2, 1, "", "lazyAnnotator"], [99, 3, 1, "", "load"], [99, 2, 1, "", "missAsEmpty"], [99, 2, 1, "", "neighbours"], [99, 2, 1, "", "normalizedCol"], [99, 2, 1, "", "optionalInputAnnotatorTypes"], [99, 2, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "outputCol"], [99, 2, 1, "", "overrideExistingCodes"], [99, 2, 1, "", "pretrainedModelPath"], [99, 3, 1, "", "read"], [99, 2, 1, "", "returnCosineDistances"], [99, 2, 1, "", "returnResolvedTextEmbeddings"], [99, 3, 1, "", "save"], [99, 3, 1, "", "set"], [99, 3, 1, "", "setAuxLabelCol"], [99, 3, 1, "", "setCaseSensitive"], [99, 3, 1, "", "setConfidenceFunction"], [99, 3, 1, "", "setDatasetInfo"], [99, 3, 1, "", "setDistanceFunction"], [99, 3, 1, "", "setDoExceptionHandling"], [99, 3, 1, "", "setDropCodesList"], [99, 3, 1, "", "setExtractCosineDistances"], [99, 3, 1, "", "setForceInputTypeValidation"], [99, 3, 1, "", "setInputCols"], [99, 3, 1, "", "setLabelCol"], [99, 3, 1, "", "setLazyAnnotator"], [99, 3, 1, "", "setMissAsEmpty"], [99, 3, 1, "", "setNeighbours"], [99, 3, 1, "", "setNormalizedCol"], [99, 3, 1, "", "setOutputCol"], [99, 3, 1, "", "setOverrideExistingCodes"], [99, 3, 1, "", "setParamValue"], [99, 3, 1, "", "setPretrainedModelPath"], [99, 3, 1, "", "setReturnResolvedTextEmbeddings"], [99, 3, 1, "", "setThreshold"], [99, 3, 1, "", "setUseAuxLabel"], [99, 2, 1, "", "skipLPInputColsValidation"], [99, 2, 1, "", "threshold"], [99, 2, 1, "", "uid"], [99, 2, 1, "", "useAuxLabel"], [99, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[99, 3, 1, "", "clear"], [99, 3, 1, "", "copy"], [99, 2, 1, "", "dimension"], [99, 3, 1, "", "explainParam"], [99, 3, 1, "", "explainParams"], [99, 3, 1, "", "extractParamMap"], [99, 3, 1, "", "getDimension"], [99, 3, 1, "", "getInputCols"], [99, 3, 1, "", "getLazyAnnotator"], [99, 3, 1, "", "getOrDefault"], [99, 3, 1, "", "getOutputCol"], [99, 3, 1, "", "getParam"], [99, 3, 1, "", "getParamValue"], [99, 2, 1, "", "getter_attrs"], [99, 3, 1, "", "hasDefault"], [99, 3, 1, "", "hasParam"], [99, 2, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "inputCols"], [99, 3, 1, "", "inputColsValidation"], [99, 3, 1, "", "isDefined"], [99, 3, 1, "", "isSet"], [99, 2, 1, "", "lazyAnnotator"], [99, 3, 1, "", "load"], [99, 2, 1, "", "name"], [99, 2, 1, "", "optionalInputAnnotatorTypes"], [99, 2, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "outputCol"], [99, 3, 1, "", "pretrained"], [99, 3, 1, "", "read"], [99, 2, 1, "", "returnCosineDistances"], [99, 3, 1, "", "save"], [99, 2, 1, "", "searchTree"], [99, 3, 1, "", "set"], [99, 3, 1, "", "setDimension"], [99, 3, 1, "", "setForceInputTypeValidation"], [99, 3, 1, "", "setInputCols"], [99, 3, 1, "", "setLazyAnnotator"], [99, 3, 1, "", "setOutputCol"], [99, 3, 1, "", "setParamValue"], [99, 3, 1, "", "setParams"], [99, 3, 1, "", "setSearchTree"], [99, 3, 1, "", "setUseAuxLabel"], [99, 2, 1, "", "skipLPInputColsValidation"], [99, 3, 1, "", "transform"], [99, 2, 1, "", "uid"], [99, 2, 1, "", "useAuxLabel"], [99, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[99, 2, 1, "", "caseSensitive"], [99, 2, 1, "", "confidenceFunction"], [99, 2, 1, "", "datasetInfo"], [99, 2, 1, "", "distanceFunction"], [99, 2, 1, "", "doExceptionHandling"], [99, 3, 1, "", "getCaseSensitive"], [99, 2, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "missAsEmpty"], [99, 2, 1, "", "neighbours"], [99, 2, 1, "", "returnResolvedTextEmbeddings"], [99, 3, 1, "", "setCaseSensitive"], [99, 3, 1, "", "setConfidenceFunction"], [99, 3, 1, "", "setDatasetInfo"], [99, 3, 1, "", "setDistanceFunction"], [99, 3, 1, "", "setDoExceptionHandling"], [99, 3, 1, "", "setMissAsEmpty"], [99, 3, 1, "", "setNeighbours"], [99, 3, 1, "", "setReturnResolvedTextEmbeddings"], [99, 3, 1, "", "setThreshold"], [99, 2, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[100, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[100, 3, 1, "", "clear"], [100, 3, 1, "", "copy"], [100, 3, 1, "", "explainParam"], [100, 3, 1, "", "explainParams"], [100, 3, 1, "", "extractParamMap"], [100, 3, 1, "", "getInputCols"], [100, 3, 1, "", "getLazyAnnotator"], [100, 3, 1, "", "getOrDefault"], [100, 3, 1, "", "getOutputCol"], [100, 3, 1, "", "getParam"], [100, 3, 1, "", "getParamValue"], [100, 2, 1, "", "getter_attrs"], [100, 3, 1, "", "hasDefault"], [100, 3, 1, "", "hasParam"], [100, 2, 1, "", "inputAnnotatorTypes"], [100, 2, 1, "", "inputCols"], [100, 3, 1, "", "inputColsValidation"], [100, 3, 1, "", "isDefined"], [100, 3, 1, "", "isSet"], [100, 2, 1, "", "kwargs"], [100, 2, 1, "", "lazyAnnotator"], [100, 3, 1, "", "load"], [100, 2, 1, "", "name"], [100, 2, 1, "", "optionalInputAnnotatorTypes"], [100, 2, 1, "", "outputAnnotatorType"], [100, 2, 1, "", "outputCol"], [100, 3, 1, "", "read"], [100, 3, 1, "", "save"], [100, 3, 1, "", "set"], [100, 3, 1, "", "setInputCols"], [100, 3, 1, "", "setLazyAnnotator"], [100, 3, 1, "", "setOutputCol"], [100, 3, 1, "", "setParamValue"], [100, 3, 1, "", "setParams"], [100, 3, 1, "", "transform"], [100, 2, 1, "", "uid"], [100, 3, 1, "", "write"]], "sparknlp_jsl.annotator.router": [[101, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[101, 3, 1, "", "clear"], [101, 3, 1, "", "copy"], [101, 3, 1, "", "explainParam"], [101, 3, 1, "", "explainParams"], [101, 3, 1, "", "extractParamMap"], [101, 2, 1, "", "filterFieldsElements"], [101, 3, 1, "", "getInputCols"], [101, 3, 1, "", "getLazyAnnotator"], [101, 3, 1, "", "getOrDefault"], [101, 3, 1, "", "getOutputCol"], [101, 3, 1, "", "getParam"], [101, 3, 1, "", "getParamValue"], [101, 2, 1, "", "getter_attrs"], [101, 3, 1, "", "hasDefault"], [101, 3, 1, "", "hasParam"], [101, 2, 1, "", "inputAnnotatorTypes"], [101, 2, 1, "", "inputCols"], [101, 3, 1, "", "inputColsValidation"], [101, 2, 1, "", "inputType"], [101, 3, 1, "", "isDefined"], [101, 3, 1, "", "isSet"], [101, 2, 1, "", "lazyAnnotator"], [101, 3, 1, "", "load"], [101, 2, 1, "", "metadataField"], [101, 2, 1, "", "name"], [101, 2, 1, "", "optionalInputAnnotatorTypes"], [101, 2, 1, "", "outputAnnotatorType"], [101, 2, 1, "", "outputCol"], [101, 3, 1, "", "read"], [101, 3, 1, "", "save"], [101, 3, 1, "", "set"], [101, 3, 1, "", "setFilterFieldsElements"], [101, 3, 1, "", "setForceInputTypeValidation"], [101, 3, 1, "", "setInputCols"], [101, 3, 1, "", "setInputType"], [101, 3, 1, "", "setLazyAnnotator"], [101, 3, 1, "", "setMetadataField"], [101, 3, 1, "", "setOutputCol"], [101, 3, 1, "", "setParamValue"], [101, 3, 1, "", "setParams"], [101, 2, 1, "", "skipLPInputColsValidation"], [101, 3, 1, "", "transform"], [101, 2, 1, "", "uid"], [101, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq": [[103, 0, 0, "-", "medical_encoder_decoder"], [104, 0, 0, "-", "medical_summarizer"], [105, 0, 0, "-", "medical_text_generator"], [106, 0, 0, "-", "text2sql"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[103, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[103, 2, 1, "", "batchSize"], [103, 3, 1, "", "clear"], [103, 2, 1, "", "configProtoBytes"], [103, 3, 1, "", "copy"], [103, 2, 1, "", "doSample"], [103, 3, 1, "", "explainParam"], [103, 3, 1, "", "explainParams"], [103, 3, 1, "", "extractParamMap"], [103, 3, 1, "", "getBatchSize"], [103, 3, 1, "", "getInputCols"], [103, 3, 1, "", "getLazyAnnotator"], [103, 3, 1, "", "getOrDefault"], [103, 3, 1, "", "getOutputCol"], [103, 3, 1, "", "getParam"], [103, 3, 1, "", "getParamValue"], [103, 2, 1, "", "getter_attrs"], [103, 3, 1, "", "hasDefault"], [103, 3, 1, "", "hasParam"], [103, 2, 1, "", "ignoreTokenIds"], [103, 2, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "inputCols"], [103, 3, 1, "", "inputColsValidation"], [103, 3, 1, "", "isDefined"], [103, 3, 1, "", "isSet"], [103, 2, 1, "", "lazyAnnotator"], [103, 3, 1, "", "load"], [103, 2, 1, "", "maxNewTokens"], [103, 2, 1, "", "maxTextLength"], [103, 2, 1, "", "mlFrameworkType"], [103, 2, 1, "", "name"], [103, 2, 1, "", "noRepeatNgramSize"], [103, 2, 1, "", "optionalInputAnnotatorTypes"], [103, 2, 1, "", "outputAnnotatorType"], [103, 2, 1, "", "outputCol"], [103, 2, 1, "", "randomSeed"], [103, 3, 1, "", "read"], [103, 2, 1, "", "refineChunkSize"], [103, 2, 1, "", "refineMaxAttempts"], [103, 2, 1, "", "refineSummary"], [103, 2, 1, "", "refineSummaryTargetLength"], [103, 3, 1, "", "save"], [103, 3, 1, "", "set"], [103, 3, 1, "", "setBatchSize"], [103, 3, 1, "", "setConfigProtoBytes"], [103, 3, 1, "", "setDoSample"], [103, 3, 1, "", "setForceInputTypeValidation"], [103, 3, 1, "", "setIgnoreTokenIds"], [103, 3, 1, "", "setInputCols"], [103, 3, 1, "", "setLazyAnnotator"], [103, 3, 1, "", "setMaxNewTokens"], [103, 3, 1, "", "setMaxTextLength"], [103, 3, 1, "", "setNoRepeatNgramSize"], [103, 3, 1, "", "setOutputCol"], [103, 3, 1, "", "setParamValue"], [103, 3, 1, "", "setParams"], [103, 3, 1, "", "setRandomSeed"], [103, 3, 1, "", "setRefineChunkSize"], [103, 3, 1, "", "setRefineMaxAttempts"], [103, 3, 1, "", "setRefineSummary"], [103, 3, 1, "", "setRefineSummaryTargetLength"], [103, 3, 1, "", "setStopAtEos"], [103, 3, 1, "", "setTopK"], [103, 2, 1, "", "skipLPInputColsValidation"], [103, 2, 1, "", "stopAtEos"], [103, 2, 1, "", "task"], [103, 2, 1, "", "topK"], [103, 3, 1, "", "transform"], [103, 2, 1, "", "uid"], [103, 2, 1, "", "useCache"], [103, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[104, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[104, 2, 1, "", "batchSize"], [104, 3, 1, "", "clear"], [104, 2, 1, "", "configProtoBytes"], [104, 3, 1, "", "copy"], [104, 2, 1, "", "doSample"], [104, 3, 1, "", "explainParam"], [104, 3, 1, "", "explainParams"], [104, 3, 1, "", "extractParamMap"], [104, 3, 1, "", "getBatchSize"], [104, 3, 1, "", "getInputCols"], [104, 3, 1, "", "getLazyAnnotator"], [104, 3, 1, "", "getOrDefault"], [104, 3, 1, "", "getOutputCol"], [104, 3, 1, "", "getParam"], [104, 3, 1, "", "getParamValue"], [104, 2, 1, "", "getter_attrs"], [104, 3, 1, "", "hasDefault"], [104, 3, 1, "", "hasParam"], [104, 2, 1, "", "ignoreTokenIds"], [104, 2, 1, "", "inputAnnotatorTypes"], [104, 2, 1, "", "inputCols"], [104, 3, 1, "", "inputColsValidation"], [104, 3, 1, "", "isDefined"], [104, 3, 1, "", "isSet"], [104, 2, 1, "", "lazyAnnotator"], [104, 3, 1, "", "load"], [104, 3, 1, "", "loadSavedModel"], [104, 2, 1, "", "maxNewTokens"], [104, 2, 1, "", "maxTextLength"], [104, 2, 1, "", "mlFrameworkType"], [104, 2, 1, "", "name"], [104, 2, 1, "", "noRepeatNgramSize"], [104, 2, 1, "", "optionalInputAnnotatorTypes"], [104, 2, 1, "", "outputAnnotatorType"], [104, 2, 1, "", "outputCol"], [104, 3, 1, "", "pretrained"], [104, 2, 1, "", "randomSeed"], [104, 3, 1, "", "read"], [104, 2, 1, "", "refineChunkSize"], [104, 2, 1, "", "refineMaxAttempts"], [104, 2, 1, "", "refineSummary"], [104, 2, 1, "", "refineSummaryTargetLength"], [104, 3, 1, "", "save"], [104, 3, 1, "", "set"], [104, 3, 1, "", "setBatchSize"], [104, 3, 1, "", "setConfigProtoBytes"], [104, 3, 1, "", "setDoSample"], [104, 3, 1, "", "setForceInputTypeValidation"], [104, 3, 1, "", "setIgnoreTokenIds"], [104, 3, 1, "", "setInputCols"], [104, 3, 1, "", "setLazyAnnotator"], [104, 3, 1, "", "setMaxNewTokens"], [104, 3, 1, "", "setMaxTextLength"], [104, 3, 1, "", "setNoRepeatNgramSize"], [104, 3, 1, "", "setOutputCol"], [104, 3, 1, "", "setParamValue"], [104, 3, 1, "", "setParams"], [104, 3, 1, "", "setRandomSeed"], [104, 3, 1, "", "setRefineChunkSize"], [104, 3, 1, "", "setRefineMaxAttempts"], [104, 3, 1, "", "setRefineSummary"], [104, 3, 1, "", "setRefineSummaryTargetLength"], [104, 3, 1, "", "setStopAtEos"], [104, 3, 1, "", "setTopK"], [104, 2, 1, "", "skipLPInputColsValidation"], [104, 2, 1, "", "stopAtEos"], [104, 2, 1, "", "task"], [104, 2, 1, "", "topK"], [104, 3, 1, "", "transform"], [104, 2, 1, "", "uid"], [104, 2, 1, "", "useCache"], [104, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[105, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[105, 2, 1, "", "batchSize"], [105, 3, 1, "", "clear"], [105, 2, 1, "", "configProtoBytes"], [105, 3, 1, "", "copy"], [105, 2, 1, "", "customPrompt"], [105, 2, 1, "", "doSample"], [105, 3, 1, "", "explainParam"], [105, 3, 1, "", "explainParams"], [105, 3, 1, "", "extractParamMap"], [105, 3, 1, "", "getAdditionalTokens"], [105, 3, 1, "", "getBatchSize"], [105, 3, 1, "", "getInputCols"], [105, 3, 1, "", "getLazyAnnotator"], [105, 3, 1, "", "getOrDefault"], [105, 3, 1, "", "getOutputCol"], [105, 3, 1, "", "getParam"], [105, 3, 1, "", "getParamValue"], [105, 2, 1, "", "getter_attrs"], [105, 3, 1, "", "hasDefault"], [105, 3, 1, "", "hasParam"], [105, 2, 1, "", "ignoreTokenIds"], [105, 2, 1, "", "inputAnnotatorTypes"], [105, 2, 1, "", "inputCols"], [105, 3, 1, "", "inputColsValidation"], [105, 3, 1, "", "isDefined"], [105, 3, 1, "", "isSet"], [105, 2, 1, "", "lazyAnnotator"], [105, 3, 1, "", "load"], [105, 3, 1, "", "loadSavedModel"], [105, 2, 1, "", "maxContextLength"], [105, 2, 1, "", "maxNewTokens"], [105, 2, 1, "", "maxTextLength"], [105, 2, 1, "", "mlFrameworkType"], [105, 2, 1, "", "modelType"], [105, 2, 1, "", "name"], [105, 2, 1, "", "noRepeatNgramSize"], [105, 2, 1, "", "optionalInputAnnotatorTypes"], [105, 2, 1, "", "outputAnnotatorType"], [105, 2, 1, "", "outputCol"], [105, 3, 1, "", "pretrained"], [105, 3, 1, "", "read"], [105, 3, 1, "", "save"], [105, 3, 1, "", "set"], [105, 3, 1, "", "setAdditionalTokens"], [105, 3, 1, "", "setBatchSize"], [105, 3, 1, "", "setConfigProtoBytes"], [105, 3, 1, "", "setCustomPrompt"], [105, 3, 1, "", "setDoSample"], [105, 3, 1, "", "setForceInputTypeValidation"], [105, 3, 1, "", "setIgnoreTokenIds"], [105, 3, 1, "", "setInputCols"], [105, 3, 1, "", "setLazyAnnotator"], [105, 3, 1, "", "setMaxContextLength"], [105, 3, 1, "", "setMaxNewTokens"], [105, 3, 1, "", "setMaxTextLength"], [105, 3, 1, "", "setNoRepeatNgramSize"], [105, 3, 1, "", "setOutputCol"], [105, 3, 1, "", "setParamValue"], [105, 3, 1, "", "setParams"], [105, 3, 1, "", "setRandomSeed"], [105, 3, 1, "", "setStopAtEos"], [105, 3, 1, "", "setTopK"], [105, 3, 1, "", "setUseCache"], [105, 2, 1, "", "skipLPInputColsValidation"], [105, 2, 1, "", "stopAtEos"], [105, 2, 1, "", "topK"], [105, 3, 1, "", "transform"], [105, 2, 1, "", "uid"], [105, 2, 1, "", "useCache"], [105, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[106, 1, 1, "", "Text2SQL"]], "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL": [[106, 2, 1, "", "batchSize"], [106, 3, 1, "", "clear"], [106, 2, 1, "", "configProtoBytes"], [106, 3, 1, "", "copy"], [106, 2, 1, "", "customPrompt"], [106, 2, 1, "", "doSample"], [106, 3, 1, "", "explainParam"], [106, 3, 1, "", "explainParams"], [106, 3, 1, "", "extractParamMap"], [106, 3, 1, "", "getAdditionalTokens"], [106, 3, 1, "", "getBatchSize"], [106, 3, 1, "", "getInputCols"], [106, 3, 1, "", "getLazyAnnotator"], [106, 3, 1, "", "getOrDefault"], [106, 3, 1, "", "getOutputCol"], [106, 3, 1, "", "getParam"], [106, 3, 1, "", "getParamValue"], [106, 3, 1, "", "getPostProcessingSubstitutions"], [106, 3, 1, "", "getSchema"], [106, 2, 1, "", "getter_attrs"], [106, 3, 1, "", "hasDefault"], [106, 3, 1, "", "hasParam"], [106, 2, 1, "", "ignoreTokenIds"], [106, 2, 1, "", "inputAnnotatorTypes"], [106, 2, 1, "", "inputCols"], [106, 3, 1, "", "inputColsValidation"], [106, 3, 1, "", "isDefined"], [106, 3, 1, "", "isSet"], [106, 2, 1, "", "lazyAnnotator"], [106, 3, 1, "", "load"], [106, 3, 1, "", "loadSavedModel"], [106, 2, 1, "", "maxContextLength"], [106, 2, 1, "", "maxNewTokens"], [106, 2, 1, "", "maxTextLength"], [106, 2, 1, "", "mlFrameworkType"], [106, 2, 1, "", "modelType"], [106, 2, 1, "", "name"], [106, 2, 1, "", "noRepeatNgramSize"], [106, 2, 1, "", "optionalInputAnnotatorTypes"], [106, 2, 1, "", "outputAnnotatorType"], [106, 2, 1, "", "outputCol"], [106, 3, 1, "", "pretrained"], [106, 3, 1, "", "read"], [106, 3, 1, "", "save"], [106, 3, 1, "", "set"], [106, 3, 1, "", "setAdditionalTokens"], [106, 3, 1, "", "setBatchSize"], [106, 3, 1, "", "setConfigProtoBytes"], [106, 3, 1, "", "setCustomPrompt"], [106, 3, 1, "", "setDoSample"], [106, 3, 1, "", "setForceInputTypeValidation"], [106, 3, 1, "", "setIgnoreTokenIds"], [106, 3, 1, "", "setInputCols"], [106, 3, 1, "", "setLazyAnnotator"], [106, 3, 1, "", "setMaxContextLength"], [106, 3, 1, "", "setMaxNewTokens"], [106, 3, 1, "", "setMaxTextLength"], [106, 3, 1, "", "setNoRepeatNgramSize"], [106, 3, 1, "", "setOutputCol"], [106, 3, 1, "", "setParamValue"], [106, 3, 1, "", "setParams"], [106, 3, 1, "", "setPostProcessingSubstitutions"], [106, 3, 1, "", "setRandomSeed"], [106, 3, 1, "", "setSchema"], [106, 3, 1, "", "setStopAtEos"], [106, 3, 1, "", "setTableLimit"], [106, 3, 1, "", "setTopK"], [106, 3, 1, "", "setUseCache"], [106, 2, 1, "", "skipLPInputColsValidation"], [106, 2, 1, "", "stopAtEos"], [106, 2, 1, "", "tableLimit"], [106, 2, 1, "", "topK"], [106, 3, 1, "", "transform"], [106, 2, 1, "", "uid"], [106, 2, 1, "", "useCache"], [106, 3, 1, "", "write"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[107, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[107, 2, 1, "", "allPossibleFieldsToStandardize"], [107, 2, 1, "", "includeOutputColumn"], [107, 2, 1, "", "includeStandardField"], [107, 2, 1, "", "outputColumnKey"], [107, 3, 1, "", "setAllPossibleFieldsToStandardize"], [107, 3, 1, "", "setIncludeOutputColumn"], [107, 3, 1, "", "setIncludeStandardField"], [107, 3, 1, "", "setOutputColumnKey"], [107, 3, 1, "", "setStandardFieldKey"], [107, 2, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[109, 0, 0, "-", "internal_document_splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[109, 1, 1, "", "InternalDocumentSplitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter": [[109, 2, 1, "", "caseSensitive"], [109, 2, 1, "", "chunkOverlap"], [109, 2, 1, "", "chunkSize"], [109, 3, 1, "", "clear"], [109, 3, 1, "", "copy"], [109, 2, 1, "", "customBoundsStrategy"], [109, 2, 1, "", "enableSentenceIncrement"], [109, 3, 1, "", "explainParam"], [109, 3, 1, "", "explainParams"], [109, 2, 1, "", "explodeSplits"], [109, 3, 1, "", "extractParamMap"], [109, 3, 1, "", "getInputCols"], [109, 3, 1, "", "getLazyAnnotator"], [109, 3, 1, "", "getOrDefault"], [109, 3, 1, "", "getOutputCol"], [109, 3, 1, "", "getParam"], [109, 3, 1, "", "getParamValue"], [109, 2, 1, "", "getter_attrs"], [109, 3, 1, "", "hasDefault"], [109, 3, 1, "", "hasParam"], [109, 2, 1, "", "inputAnnotatorTypes"], [109, 2, 1, "", "inputCols"], [109, 3, 1, "", "inputColsValidation"], [109, 3, 1, "", "isDefined"], [109, 3, 1, "", "isSet"], [109, 2, 1, "", "keepSeparators"], [109, 2, 1, "", "lazyAnnotator"], [109, 3, 1, "", "load"], [109, 2, 1, "", "maxLength"], [109, 2, 1, "", "metaDataFields"], [109, 2, 1, "", "name"], [109, 2, 1, "", "optionalInputAnnotatorTypes"], [109, 2, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "outputCol"], [109, 2, 1, "", "patternsAreRegex"], [109, 3, 1, "", "read"], [109, 3, 1, "", "save"], [109, 2, 1, "", "sentenceAwareness"], [109, 3, 1, "", "set"], [109, 3, 1, "", "setCaseSensitive"], [109, 3, 1, "", "setChunkOverlap"], [109, 3, 1, "", "setChunkSize"], [109, 3, 1, "", "setCustomBoundsStrategy"], [109, 3, 1, "", "setEnableSentenceIncrement"], [109, 3, 1, "", "setExplodeSplits"], [109, 3, 1, "", "setForceInputTypeValidation"], [109, 3, 1, "", "setInputCols"], [109, 3, 1, "", "setKeepSeparators"], [109, 3, 1, "", "setLazyAnnotator"], [109, 3, 1, "", "setMaxLength"], [109, 3, 1, "", "setMetaDataFields"], [109, 3, 1, "", "setOutputCol"], [109, 3, 1, "", "setParamValue"], [109, 3, 1, "", "setParams"], [109, 3, 1, "", "setPatternsAreRegex"], [109, 3, 1, "", "setSentenceAwareness"], [109, 3, 1, "", "setSplitMode"], [109, 3, 1, "", "setSplitPatterns"], [109, 3, 1, "", "setTrimWhitespace"], [109, 2, 1, "", "skipLPInputColsValidation"], [109, 2, 1, "", "splitMode"], [109, 2, 1, "", "splitPatterns"], [109, 3, 1, "", "transform"], [109, 2, 1, "", "trimWhitespace"], [109, 2, 1, "", "uid"], [109, 3, 1, "", "write"]], "sparknlp_jsl.annotator.tf_graph_builder": [[110, 1, 1, "", "TFGraphBuilder"], [110, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[110, 2, 1, "", "batchNorm"], [110, 3, 1, "", "clear"], [110, 3, 1, "", "copy"], [110, 3, 1, "", "explainParam"], [110, 3, 1, "", "explainParams"], [110, 3, 1, "", "extractParamMap"], [110, 3, 1, "", "fit"], [110, 3, 1, "", "fitMultiple"], [110, 3, 1, "", "getBatchNorm"], [110, 3, 1, "", "getGraphFile"], [110, 3, 1, "", "getGraphFolder"], [110, 3, 1, "", "getHiddenAct"], [110, 3, 1, "", "getHiddenActL2"], [110, 3, 1, "", "getHiddenLayers"], [110, 3, 1, "", "getHiddenUnitsNumber"], [110, 3, 1, "", "getHiddenWeightsL2"], [110, 3, 1, "", "getInputCols"], [110, 3, 1, "", "getIsLicensed"], [110, 3, 1, "", "getLabelColumn"], [110, 3, 1, "", "getMaxSequenceLength"], [110, 3, 1, "", "getModelName"], [110, 3, 1, "", "getOrDefault"], [110, 3, 1, "", "getOutputAct"], [110, 3, 1, "", "getParam"], [110, 3, 1, "", "getUseRelationDirection"], [110, 2, 1, "", "graphFile"], [110, 2, 1, "", "graphFolder"], [110, 3, 1, "", "hasDefault"], [110, 3, 1, "", "hasParam"], [110, 2, 1, "", "hiddenAct"], [110, 2, 1, "", "hiddenActL2"], [110, 2, 1, "", "hiddenLayers"], [110, 2, 1, "", "hiddenUnitsNumber"], [110, 2, 1, "", "hiddenWeightsL2"], [110, 2, 1, "", "inputCols"], [110, 3, 1, "", "isDefined"], [110, 2, 1, "", "isLicensed"], [110, 3, 1, "", "isSet"], [110, 2, 1, "", "labelColumn"], [110, 3, 1, "", "load"], [110, 2, 1, "", "maxSequenceLength"], [110, 2, 1, "", "modelName"], [110, 2, 1, "", "outputAct"], [110, 3, 1, "", "read"], [110, 3, 1, "", "save"], [110, 3, 1, "", "set"], [110, 3, 1, "", "setBatchNorm"], [110, 3, 1, "", "setGraphFile"], [110, 3, 1, "", "setGraphFolder"], [110, 3, 1, "", "setHiddenAct"], [110, 3, 1, "", "setHiddenActL2"], [110, 3, 1, "", "setHiddenLayers"], [110, 3, 1, "", "setHiddenUnitsNumber"], [110, 3, 1, "", "setHiddenWeightsL2"], [110, 3, 1, "", "setInputCols"], [110, 3, 1, "", "setIsLicensed"], [110, 3, 1, "", "setLabelColumn"], [110, 3, 1, "", "setMaxSequenceLength"], [110, 3, 1, "", "setModelName"], [110, 3, 1, "", "setUseRelationDirection"], [110, 3, 1, "", "settOutputAct"], [110, 2, 1, "", "uid"], [110, 2, 1, "", "useRelationDirection"], [110, 3, 1, "", "write"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel": [[110, 3, 1, "", "clear"], [110, 3, 1, "", "copy"], [110, 3, 1, "", "explainParam"], [110, 3, 1, "", "explainParams"], [110, 3, 1, "", "extractParamMap"], [110, 3, 1, "", "getOrDefault"], [110, 3, 1, "", "getParam"], [110, 3, 1, "", "hasDefault"], [110, 3, 1, "", "hasParam"], [110, 3, 1, "", "isDefined"], [110, 3, 1, "", "isSet"], [110, 3, 1, "", "load"], [110, 3, 1, "", "read"], [110, 3, 1, "", "save"], [110, 3, 1, "", "set"], [110, 3, 1, "", "transform"], [110, 2, 1, "", "uid"], [110, 3, 1, "", "write"]], "sparknlp_jsl.annotator.white_black_list_params": [[111, 1, 1, "", "WhiteBlackListParams"]], "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams": [[111, 2, 1, "", "blackList"], [111, 2, 1, "", "caseSensitive"], [111, 3, 1, "", "setBlackList"], [111, 3, 1, "", "setCaseSensitive"], [111, 3, 1, "", "setDenyList"], [111, 3, 1, "", "setWhiteList"], [111, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.windowed": [[113, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[113, 1, 1, "", "WindowedParams"], [113, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[113, 2, 1, "", "glueString"], [113, 3, 1, "", "setGlueString"], [113, 3, 1, "", "setWindowSize"], [113, 2, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[113, 3, 1, "", "clear"], [113, 3, 1, "", "copy"], [113, 3, 1, "", "explainParam"], [113, 3, 1, "", "explainParams"], [113, 3, 1, "", "extractParamMap"], [113, 3, 1, "", "getInputCols"], [113, 3, 1, "", "getLazyAnnotator"], [113, 3, 1, "", "getOrDefault"], [113, 3, 1, "", "getOutputCol"], [113, 3, 1, "", "getParam"], [113, 3, 1, "", "getParamValue"], [113, 2, 1, "", "getter_attrs"], [113, 2, 1, "", "glueString"], [113, 3, 1, "", "hasDefault"], [113, 3, 1, "", "hasParam"], [113, 2, 1, "", "inputAnnotatorTypes"], [113, 2, 1, "", "inputCols"], [113, 3, 1, "", "inputColsValidation"], [113, 3, 1, "", "isDefined"], [113, 3, 1, "", "isSet"], [113, 2, 1, "", "lazyAnnotator"], [113, 3, 1, "", "load"], [113, 2, 1, "", "optionalInputAnnotatorTypes"], [113, 2, 1, "", "outputAnnotatorType"], [113, 2, 1, "", "outputCol"], [113, 3, 1, "", "read"], [113, 3, 1, "", "save"], [113, 3, 1, "", "set"], [113, 3, 1, "", "setForceInputTypeValidation"], [113, 3, 1, "", "setGlueString"], [113, 3, 1, "", "setInputCols"], [113, 3, 1, "", "setLazyAnnotator"], [113, 3, 1, "", "setOutputCol"], [113, 3, 1, "", "setParamValue"], [113, 3, 1, "", "setParams"], [113, 3, 1, "", "setWindowSize"], [113, 2, 1, "", "skipLPInputColsValidation"], [113, 3, 1, "", "transform"], [113, 2, 1, "", "uid"], [113, 2, 1, "", "windowSize"], [113, 3, 1, "", "write"]], "sparknlp_jsl.common": [[115, 0, 0, "-", "annotator_approach_internal"], [116, 0, 0, "-", "annotator_model_internal"], [117, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[115, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[115, 3, 1, "", "clear"], [115, 3, 1, "", "copy"], [115, 3, 1, "", "explainParam"], [115, 3, 1, "", "explainParams"], [115, 3, 1, "", "extractParamMap"], [115, 3, 1, "", "fit"], [115, 3, 1, "", "fitMultiple"], [115, 3, 1, "", "getInputCols"], [115, 3, 1, "", "getLazyAnnotator"], [115, 3, 1, "", "getOrDefault"], [115, 3, 1, "", "getOutputCol"], [115, 3, 1, "", "getParam"], [115, 3, 1, "", "getParamValue"], [115, 2, 1, "", "getter_attrs"], [115, 3, 1, "", "hasDefault"], [115, 3, 1, "", "hasParam"], [115, 2, 1, "", "inputAnnotatorTypes"], [115, 2, 1, "", "inputCols"], [115, 3, 1, "", "inputColsValidation"], [115, 3, 1, "", "isDefined"], [115, 3, 1, "", "isSet"], [115, 2, 1, "", "lazyAnnotator"], [115, 3, 1, "", "load"], [115, 2, 1, "", "optionalInputAnnotatorTypes"], [115, 2, 1, "", "outputAnnotatorType"], [115, 2, 1, "", "outputCol"], [115, 3, 1, "", "read"], [115, 3, 1, "", "save"], [115, 3, 1, "", "set"], [115, 3, 1, "", "setForceInputTypeValidation"], [115, 3, 1, "", "setInputCols"], [115, 3, 1, "", "setLazyAnnotator"], [115, 3, 1, "", "setOutputCol"], [115, 3, 1, "", "setParamValue"], [115, 2, 1, "", "skipLPInputColsValidation"], [115, 2, 1, "", "uid"], [115, 3, 1, "", "write"]], "sparknlp_jsl.common.annotator_model_internal": [[116, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[116, 3, 1, "", "clear"], [116, 3, 1, "", "copy"], [116, 3, 1, "", "explainParam"], [116, 3, 1, "", "explainParams"], [116, 3, 1, "", "extractParamMap"], [116, 3, 1, "", "getInputCols"], [116, 3, 1, "", "getLazyAnnotator"], [116, 3, 1, "", "getOrDefault"], [116, 3, 1, "", "getOutputCol"], [116, 3, 1, "", "getParam"], [116, 3, 1, "", "getParamValue"], [116, 2, 1, "", "getter_attrs"], [116, 3, 1, "", "hasDefault"], [116, 3, 1, "", "hasParam"], [116, 2, 1, "", "inputAnnotatorTypes"], [116, 2, 1, "", "inputCols"], [116, 3, 1, "", "inputColsValidation"], [116, 3, 1, "", "isDefined"], [116, 3, 1, "", "isSet"], [116, 2, 1, "", "lazyAnnotator"], [116, 3, 1, "", "load"], [116, 2, 1, "", "optionalInputAnnotatorTypes"], [116, 2, 1, "", "outputAnnotatorType"], [116, 2, 1, "", "outputCol"], [116, 3, 1, "", "read"], [116, 3, 1, "", "save"], [116, 3, 1, "", "set"], [116, 3, 1, "", "setForceInputTypeValidation"], [116, 3, 1, "", "setInputCols"], [116, 3, 1, "", "setLazyAnnotator"], [116, 3, 1, "", "setOutputCol"], [116, 3, 1, "", "setParamValue"], [116, 3, 1, "", "setParams"], [116, 2, 1, "", "skipLPInputColsValidation"], [116, 3, 1, "", "transform"], [116, 2, 1, "", "uid"], [116, 3, 1, "", "write"]], "sparknlp_jsl.common.annotator_properties_internal": [[117, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[117, 3, 1, "", "clear"], [117, 3, 1, "", "copy"], [117, 3, 1, "", "explainParam"], [117, 3, 1, "", "explainParams"], [117, 3, 1, "", "extractParamMap"], [117, 3, 1, "", "getInputCols"], [117, 3, 1, "", "getLazyAnnotator"], [117, 3, 1, "", "getOrDefault"], [117, 3, 1, "", "getOutputCol"], [117, 3, 1, "", "getParam"], [117, 3, 1, "", "hasDefault"], [117, 3, 1, "", "hasParam"], [117, 2, 1, "", "inputAnnotatorTypes"], [117, 2, 1, "", "inputCols"], [117, 3, 1, "", "inputColsValidation"], [117, 3, 1, "", "isDefined"], [117, 3, 1, "", "isSet"], [117, 2, 1, "", "lazyAnnotator"], [117, 2, 1, "", "optionalInputAnnotatorTypes"], [117, 2, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "outputCol"], [117, 3, 1, "", "set"], [117, 3, 1, "", "setForceInputTypeValidation"], [117, 3, 1, "", "setInputCols"], [117, 3, 1, "", "setLazyAnnotator"], [117, 3, 1, "", "setOutputCol"], [117, 2, 1, "", "uid"]], "sparknlp_jsl.compatibility": [[119, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[119, 3, 1, "", "findVersion"], [119, 2, 1, "", "instance"], [119, 3, 1, "", "showVersion"], [119, 2, 1, "", "spark"]], "sparknlp_jsl.custom_transformer": [[120, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[120, 3, 1, "", "clear"], [120, 3, 1, "", "copy"], [120, 3, 1, "", "explainParam"], [120, 3, 1, "", "explainParams"], [120, 3, 1, "", "extractParamMap"], [120, 2, 1, "", "f"], [120, 3, 1, "", "getInputCol"], [120, 3, 1, "", "getOrDefault"], [120, 3, 1, "", "getOutputCol"], [120, 3, 1, "", "getParam"], [120, 3, 1, "", "hasDefault"], [120, 3, 1, "", "hasParam"], [120, 2, 1, "", "inputCol"], [120, 3, 1, "", "isDefined"], [120, 3, 1, "", "isSet"], [120, 3, 1, "", "load"], [120, 2, 1, "", "outputCol"], [120, 3, 1, "", "read"], [120, 3, 1, "", "save"], [120, 3, 1, "", "set"], [120, 3, 1, "", "setInputCol"], [120, 3, 1, "", "setOutputCol"], [120, 3, 1, "", "transform"], [120, 2, 1, "", "uid"], [120, 3, 1, "", "write"]], "sparknlp_jsl.deidentification_module": [[121, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[121, 2, 1, "", "age_group_obfuscation"], [121, 2, 1, "", "age_ranges"], [121, 2, 1, "", "custom_pipeline"], [121, 2, 1, "", "date_shift_column_name"], [121, 2, 1, "", "date_tag"], [121, 3, 1, "", "deid_with_custom_pipeline"], [121, 3, 1, "", "deid_with_pretrained_pipeline"], [121, 3, 1, "", "deidentify"], [121, 2, 1, "", "document"], [121, 2, 1, "", "documenthashcoder_col_name"], [121, 2, 1, "", "domain"], [121, 2, 1, "", "fields"], [121, 2, 1, "", "fixed_mask_length"], [121, 2, 1, "", "id_column_name"], [121, 2, 1, "", "input_file_path"], [121, 2, 1, "", "language"], [121, 2, 1, "", "masking_policy"], [121, 2, 1, "", "multi_mode_file_path"], [121, 2, 1, "", "ner_chunk"], [121, 2, 1, "", "number_of_days"], [121, 2, 1, "", "obfuscate_date"], [121, 2, 1, "", "obfuscate_ref_file_path"], [121, 2, 1, "", "obfuscate_ref_source"], [121, 2, 1, "", "output_file_path"], [121, 2, 1, "", "region"], [121, 2, 1, "", "sentence"], [121, 2, 1, "", "separator"], [121, 2, 1, "", "shift_days"], [121, 2, 1, "", "spark"], [121, 2, 1, "", "token"], [121, 2, 1, "", "unnormalized_date"], [121, 2, 1, "", "unnormalized_mode"]], "sparknlp_jsl.eval": [[122, 1, 1, "", "NerCrfEvaluation"], [122, 1, 1, "", "NerDLEvaluation"], [122, 1, 1, "", "NerDLMetrics"], [122, 1, 1, "", "NorvigSpellEvaluation"], [122, 1, 1, "", "POSEvaluation"], [122, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[122, 3, 1, "", "apply"], [122, 3, 1, "", "computeAccuracyAnnotator"], [122, 3, 1, "", "computeAccuracyModel"], [122, 3, 1, "", "getDataFrame"], [122, 2, 1, "", "java_obj"], [122, 3, 1, "", "new_java_array"], [122, 3, 1, "", "new_java_array_integer"], [122, 3, 1, "", "new_java_array_string"], [122, 3, 1, "", "new_java_obj"], [122, 2, 1, "", "sc"], [122, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NerDLEvaluation": [[122, 3, 1, "", "apply"], [122, 3, 1, "", "computeAccuracyAnnotator"], [122, 3, 1, "", "computeAccuracyModel"], [122, 3, 1, "", "getDataFrame"], [122, 2, 1, "", "java_obj"], [122, 3, 1, "", "new_java_array"], [122, 3, 1, "", "new_java_array_integer"], [122, 3, 1, "", "new_java_array_string"], [122, 3, 1, "", "new_java_obj"], [122, 2, 1, "", "sc"], [122, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NerDLMetrics": [[122, 3, 1, "", "apply"], [122, 3, 1, "", "computeMetricsFromDF"], [122, 3, 1, "", "getDataFrame"], [122, 2, 1, "", "java_obj"], [122, 3, 1, "", "new_java_array"], [122, 3, 1, "", "new_java_array_integer"], [122, 3, 1, "", "new_java_array_string"], [122, 3, 1, "", "new_java_obj"], [122, 2, 1, "", "sc"], [122, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[122, 3, 1, "", "apply"], [122, 3, 1, "", "computeAccuracyAnnotator"], [122, 3, 1, "", "computeAccuracyModel"], [122, 3, 1, "", "getDataFrame"], [122, 2, 1, "", "java_obj"], [122, 3, 1, "", "new_java_array"], [122, 3, 1, "", "new_java_array_integer"], [122, 3, 1, "", "new_java_array_string"], [122, 3, 1, "", "new_java_obj"], [122, 2, 1, "", "sc"], [122, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.POSEvaluation": [[122, 3, 1, "", "apply"], [122, 3, 1, "", "computeAccuracyAnnotator"], [122, 3, 1, "", "computeAccuracyModel"], [122, 3, 1, "", "getDataFrame"], [122, 2, 1, "", "java_obj"], [122, 3, 1, "", "new_java_array"], [122, 3, 1, "", "new_java_array_integer"], [122, 3, 1, "", "new_java_array_string"], [122, 3, 1, "", "new_java_obj"], [122, 2, 1, "", "sc"], [122, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[122, 3, 1, "", "apply"], [122, 3, 1, "", "computeAccuracyAnnotator"], [122, 3, 1, "", "computeAccuracyModel"], [122, 3, 1, "", "getDataFrame"], [122, 2, 1, "", "java_obj"], [122, 3, 1, "", "new_java_array"], [122, 3, 1, "", "new_java_array_integer"], [122, 3, 1, "", "new_java_array_string"], [122, 3, 1, "", "new_java_obj"], [122, 2, 1, "", "sc"], [122, 3, 1, "", "spark_version"]], "sparknlp_jsl.finance": [[128, 0, 0, "-", "chunk_classification"], [133, 0, 0, "-", "graph"], [142, 0, 0, "-", "sequence_classification"], [147, 0, 0, "-", "sequence_generation"], [149, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[124, 0, 0, "-", "assertion"], [127, 0, 0, "-", "deid"], [131, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[123, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[123, 1, 1, "", "AssertionDLApproach"], [123, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach": [[123, 2, 1, "", "batchSize"], [123, 3, 1, "", "clear"], [123, 2, 1, "", "configProtoBytes"], [123, 3, 1, "", "copy"], [123, 2, 1, "", "datasetInfo"], [123, 2, 1, "", "doExceptionHandling"], [123, 2, 1, "", "dropout"], [123, 2, 1, "", "enableOutputLogs"], [123, 2, 1, "", "endCol"], [123, 2, 1, "", "engine"], [123, 2, 1, "", "epochs"], [123, 3, 1, "", "explainParam"], [123, 3, 1, "", "explainParams"], [123, 3, 1, "", "extractParamMap"], [123, 3, 1, "", "fit"], [123, 3, 1, "", "fitMultiple"], [123, 3, 1, "", "getEngine"], [123, 3, 1, "", "getInputCols"], [123, 3, 1, "", "getLazyAnnotator"], [123, 3, 1, "", "getOrDefault"], [123, 3, 1, "", "getOutputCol"], [123, 3, 1, "", "getParam"], [123, 3, 1, "", "getParamValue"], [123, 2, 1, "", "getter_attrs"], [123, 2, 1, "", "graphFile"], [123, 2, 1, "", "graphFolder"], [123, 3, 1, "", "hasDefault"], [123, 3, 1, "", "hasParam"], [123, 2, 1, "", "includeConfidence"], [123, 2, 1, "", "inputAnnotatorTypes"], [123, 2, 1, "", "inputCols"], [123, 3, 1, "", "inputColsValidation"], [123, 3, 1, "", "isDefined"], [123, 3, 1, "", "isSet"], [123, 2, 1, "", "label"], [123, 2, 1, "", "lazyAnnotator"], [123, 2, 1, "", "learningRate"], [123, 3, 1, "", "load"], [123, 2, 1, "", "maxSentLen"], [123, 2, 1, "", "optionalInputAnnotatorTypes"], [123, 2, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "outputCol"], [123, 2, 1, "", "outputLogsPath"], [123, 3, 1, "", "read"], [123, 3, 1, "", "save"], [123, 2, 1, "", "scopeWindow"], [123, 3, 1, "", "set"], [123, 3, 1, "", "setBatchSize"], [123, 3, 1, "", "setConfigProtoBytes"], [123, 3, 1, "", "setDatasetInfo"], [123, 3, 1, "", "setDoExceptionHandling"], [123, 3, 1, "", "setDropout"], [123, 3, 1, "", "setEnableOutputLogs"], [123, 3, 1, "", "setEndCol"], [123, 3, 1, "", "setEpochs"], [123, 3, 1, "", "setForceInputTypeValidation"], [123, 3, 1, "", "setGraphFile"], [123, 3, 1, "", "setGraphFolder"], [123, 3, 1, "", "setIncludeConfidence"], [123, 3, 1, "", "setInputCols"], [123, 3, 1, "", "setLabelCol"], [123, 3, 1, "", "setLazyAnnotator"], [123, 3, 1, "", "setLearningRate"], [123, 3, 1, "", "setMaxSentLen"], [123, 3, 1, "", "setOutputCol"], [123, 3, 1, "", "setOutputLogsPath"], [123, 3, 1, "", "setParamValue"], [123, 3, 1, "", "setScopeWindow"], [123, 3, 1, "", "setStartCol"], [123, 3, 1, "", "setTestDataset"], [123, 3, 1, "", "setValidationSplit"], [123, 3, 1, "", "setVerbose"], [123, 2, 1, "", "skipLPInputColsValidation"], [123, 2, 1, "", "startCol"], [123, 2, 1, "", "testDataset"], [123, 2, 1, "", "uid"], [123, 2, 1, "", "validationSplit"], [123, 2, 1, "", "verbose"], [123, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[123, 2, 1, "", "classes"], [123, 3, 1, "", "clear"], [123, 2, 1, "", "configProtoBytes"], [123, 3, 1, "", "copy"], [123, 2, 1, "", "datasetInfo"], [123, 2, 1, "", "entityAssertionCaseSensitive"], [123, 3, 1, "", "explainParam"], [123, 3, 1, "", "explainParams"], [123, 3, 1, "", "extractParamMap"], [123, 3, 1, "", "getEntityAssertion"], [123, 3, 1, "", "getInputCols"], [123, 3, 1, "", "getLazyAnnotator"], [123, 3, 1, "", "getOrDefault"], [123, 3, 1, "", "getOutputCol"], [123, 3, 1, "", "getParam"], [123, 3, 1, "", "getParamValue"], [123, 3, 1, "", "getReplaceLabels"], [123, 3, 1, "", "getStorageRef"], [123, 2, 1, "", "getter_attrs"], [123, 3, 1, "", "hasDefault"], [123, 3, 1, "", "hasParam"], [123, 2, 1, "", "includeConfidence"], [123, 2, 1, "", "inputAnnotatorTypes"], [123, 2, 1, "", "inputCols"], [123, 3, 1, "", "inputColsValidation"], [123, 3, 1, "", "isDefined"], [123, 3, 1, "", "isSet"], [123, 2, 1, "", "lazyAnnotator"], [123, 3, 1, "", "load"], [123, 2, 1, "", "maxSentLen"], [123, 2, 1, "", "name"], [123, 2, 1, "", "optionalInputAnnotatorTypes"], [123, 2, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "outputCol"], [123, 3, 1, "", "pretrained"], [123, 3, 1, "", "read"], [123, 3, 1, "", "save"], [123, 2, 1, "", "scopeWindow"], [123, 3, 1, "", "set"], [123, 3, 1, "", "setConfigProtoBytes"], [123, 3, 1, "", "setDatasetInfo"], [123, 3, 1, "", "setEntityAssertion"], [123, 3, 1, "", "setEntityAssertionCaseSensitive"], [123, 3, 1, "", "setForceInputTypeValidation"], [123, 3, 1, "", "setIncludeConfidence"], [123, 3, 1, "", "setInputCols"], [123, 3, 1, "", "setLazyAnnotator"], [123, 3, 1, "", "setOutputCol"], [123, 3, 1, "", "setParamValue"], [123, 3, 1, "", "setParams"], [123, 3, 1, "", "setReplaceLabels"], [123, 3, 1, "", "setScopeWindow"], [123, 3, 1, "", "setStorageRef"], [123, 2, 1, "", "skipLPInputColsValidation"], [123, 2, 1, "", "storageRef"], [123, 2, 1, "", "targetNerLabels"], [123, 3, 1, "", "transform"], [123, 2, 1, "", "uid"], [123, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.deid": [[125, 0, 0, "-", "deIdentification"], [126, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[125, 1, 1, "", "DeIdentification"], [125, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[125, 2, 1, "", "ageRanges"], [125, 2, 1, "", "ageRangesByHipaa"], [125, 2, 1, "", "blackList"], [125, 2, 1, "", "blackListEntities"], [125, 3, 1, "", "clear"], [125, 2, 1, "", "combineRegexPatterns"], [125, 2, 1, "", "consistentObfuscation"], [125, 3, 1, "", "copy"], [125, 2, 1, "", "dateFormats"], [125, 2, 1, "", "dateTag"], [125, 2, 1, "", "dateToYear"], [125, 2, 1, "", "days"], [125, 2, 1, "", "doExceptionHandling"], [125, 2, 1, "", "entityCasingModesPath"], [125, 3, 1, "", "explainParam"], [125, 3, 1, "", "explainParams"], [125, 3, 1, "", "extractParamMap"], [125, 3, 1, "", "fit"], [125, 3, 1, "", "fitMultiple"], [125, 2, 1, "", "fixedMaskLength"], [125, 2, 1, "", "genderAwareness"], [125, 3, 1, "", "getBlackList"], [125, 3, 1, "", "getInputCols"], [125, 3, 1, "", "getLazyAnnotator"], [125, 3, 1, "", "getOrDefault"], [125, 3, 1, "", "getOutputCol"], [125, 3, 1, "", "getParam"], [125, 3, 1, "", "getParamValue"], [125, 3, 1, "", "getSameLengthFormattedEntities"], [125, 3, 1, "", "getUseShiftDays"], [125, 2, 1, "", "getter_attrs"], [125, 3, 1, "", "hasDefault"], [125, 3, 1, "", "hasParam"], [125, 2, 1, "", "ignoreRegex"], [125, 2, 1, "", "inputAnnotatorTypes"], [125, 2, 1, "", "inputCols"], [125, 3, 1, "", "inputColsValidation"], [125, 3, 1, "", "isDefined"], [125, 2, 1, "", "isRandomDateDisplacement"], [125, 3, 1, "", "isSet"], [125, 2, 1, "", "keepYear"], [125, 2, 1, "", "language"], [125, 2, 1, "", "lazyAnnotator"], [125, 3, 1, "", "load"], [125, 2, 1, "", "mappingsColumn"], [125, 2, 1, "", "maskingPolicy"], [125, 2, 1, "", "metadataMaskingPolicy"], [125, 2, 1, "", "minYear"], [125, 2, 1, "", "mode"], [125, 2, 1, "", "name"], [125, 2, 1, "", "obfuscateByAgeGroups"], [125, 2, 1, "", "obfuscateDate"], [125, 2, 1, "", "obfuscateRefFile"], [125, 2, 1, "", "obfuscateRefSource"], [125, 2, 1, "", "obfuscationStrategyOnException"], [125, 2, 1, "", "optionalInputAnnotatorTypes"], [125, 2, 1, "", "outputAnnotatorType"], [125, 2, 1, "", "outputAsDocument"], [125, 2, 1, "", "outputCol"], [125, 3, 1, "", "read"], [125, 2, 1, "", "refFileFormat"], [125, 2, 1, "", "refSep"], [125, 2, 1, "", "regexOverride"], [125, 2, 1, "", "regexPatternsDictionary"], [125, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [125, 2, 1, "", "region"], [125, 2, 1, "", "returnEntityMappings"], [125, 2, 1, "", "sameEntityThreshold"], [125, 2, 1, "", "sameLengthFormattedEntities"], [125, 3, 1, "", "save"], [125, 2, 1, "", "seed"], [125, 2, 1, "", "selectiveObfuscationModesPath"], [125, 3, 1, "", "set"], [125, 3, 1, "", "setAgeGroups"], [125, 3, 1, "", "setAgeRanges"], [125, 3, 1, "", "setAgeRangesByHipaa"], [125, 3, 1, "", "setBlackList"], [125, 3, 1, "", "setBlackListEntities"], [125, 3, 1, "", "setCombineRegexPatterns"], [125, 3, 1, "", "setConsistentObfuscation"], [125, 3, 1, "", "setDateFormats"], [125, 3, 1, "", "setDateTag"], [125, 3, 1, "", "setDateToYear"], [125, 3, 1, "", "setDays"], [125, 3, 1, "", "setDoExceptionHandling"], [125, 3, 1, "", "setEntityCasingModes"], [125, 3, 1, "", "setFixedMaskLength"], [125, 3, 1, "", "setForceInputTypeValidation"], [125, 3, 1, "", "setGenderAwareness"], [125, 3, 1, "", "setIgnoreRegex"], [125, 3, 1, "", "setInputCols"], [125, 3, 1, "", "setIsRandomDateDisplacement"], [125, 3, 1, "", "setKeepYear"], [125, 3, 1, "", "setLanguage"], [125, 3, 1, "", "setLazyAnnotator"], [125, 3, 1, "", "setMappingsColumn"], [125, 3, 1, "", "setMaskingPolicy"], [125, 3, 1, "", "setMetadataMaskingPolicy"], [125, 3, 1, "", "setMinYear"], [125, 3, 1, "", "setMode"], [125, 3, 1, "", "setObfuscateByAgeGroups"], [125, 3, 1, "", "setObfuscateDate"], [125, 3, 1, "", "setObfuscateRefFile"], [125, 3, 1, "", "setObfuscateRefSource"], [125, 3, 1, "", "setObfuscationStrategyOnException"], [125, 3, 1, "", "setOutputAsDocument"], [125, 3, 1, "", "setOutputCol"], [125, 3, 1, "", "setParamValue"], [125, 3, 1, "", "setRefFileFormat"], [125, 3, 1, "", "setRefSep"], [125, 3, 1, "", "setRegexOverride"], [125, 3, 1, "", "setRegexPatternsDictionary"], [125, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [125, 3, 1, "", "setRegion"], [125, 3, 1, "", "setReturnEntityMappings"], [125, 3, 1, "", "setSameEntityThreshold"], [125, 3, 1, "", "setSameLengthFormattedEntities"], [125, 3, 1, "", "setSeed"], [125, 3, 1, "", "setSelectiveObfuscationModes"], [125, 3, 1, "", "setUnnormalizedDateMode"], [125, 3, 1, "", "setUseShifDays"], [125, 3, 1, "", "setUseShiftDays"], [125, 3, 1, "", "setZipCodeTag"], [125, 2, 1, "", "skipLPInputColsValidation"], [125, 2, 1, "", "uid"], [125, 2, 1, "", "unnormalizedDateMode"], [125, 2, 1, "", "useShifDays"], [125, 3, 1, "", "write"], [125, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[125, 2, 1, "", "ageRanges"], [125, 2, 1, "", "ageRangesByHipaa"], [125, 2, 1, "", "blackList"], [125, 2, 1, "", "blackListEntities"], [125, 3, 1, "", "clear"], [125, 2, 1, "", "consistentObfuscation"], [125, 3, 1, "", "copy"], [125, 2, 1, "", "dateFormats"], [125, 2, 1, "", "dateTag"], [125, 2, 1, "", "dateToYear"], [125, 2, 1, "", "days"], [125, 2, 1, "", "doExceptionHandling"], [125, 3, 1, "", "explainParam"], [125, 3, 1, "", "explainParams"], [125, 3, 1, "", "extractParamMap"], [125, 2, 1, "", "fixedMaskLength"], [125, 2, 1, "", "genderAwareness"], [125, 3, 1, "", "getBlackList"], [125, 3, 1, "", "getInputCols"], [125, 3, 1, "", "getLazyAnnotator"], [125, 3, 1, "", "getOrDefault"], [125, 3, 1, "", "getOutputCol"], [125, 3, 1, "", "getParam"], [125, 3, 1, "", "getParamValue"], [125, 3, 1, "", "getRegexEntities"], [125, 3, 1, "", "getSameLengthFormattedEntities"], [125, 3, 1, "", "getUseShiftDays"], [125, 2, 1, "", "getter_attrs"], [125, 3, 1, "", "hasDefault"], [125, 3, 1, "", "hasParam"], [125, 2, 1, "", "ignoreRegex"], [125, 2, 1, "", "inputAnnotatorTypes"], [125, 2, 1, "", "inputCols"], [125, 3, 1, "", "inputColsValidation"], [125, 3, 1, "", "isDefined"], [125, 2, 1, "", "isRandomDateDisplacement"], [125, 3, 1, "", "isSet"], [125, 2, 1, "", "keepYear"], [125, 2, 1, "", "language"], [125, 2, 1, "", "lazyAnnotator"], [125, 3, 1, "", "load"], [125, 2, 1, "", "mappingsColumn"], [125, 2, 1, "", "maskingPolicy"], [125, 2, 1, "", "metadataMaskingPolicy"], [125, 2, 1, "", "minYear"], [125, 2, 1, "", "mode"], [125, 2, 1, "", "name"], [125, 2, 1, "", "obfuscateByAgeGroups"], [125, 2, 1, "", "obfuscateDate"], [125, 2, 1, "", "obfuscateRefSource"], [125, 2, 1, "", "obfuscationStrategyOnException"], [125, 2, 1, "", "optionalInputAnnotatorTypes"], [125, 2, 1, "", "outputAnnotatorType"], [125, 2, 1, "", "outputAsDocument"], [125, 2, 1, "", "outputCol"], [125, 3, 1, "", "pretrained"], [125, 3, 1, "", "read"], [125, 2, 1, "", "regexEntities"], [125, 2, 1, "", "regexOverride"], [125, 2, 1, "", "region"], [125, 2, 1, "", "returnEntityMappings"], [125, 2, 1, "", "sameEntityThreshold"], [125, 2, 1, "", "sameLengthFormattedEntities"], [125, 3, 1, "", "save"], [125, 2, 1, "", "seed"], [125, 3, 1, "", "set"], [125, 3, 1, "", "setAgeGroups"], [125, 3, 1, "", "setAgeRanges"], [125, 3, 1, "", "setAgeRangesByHipaa"], [125, 3, 1, "", "setBlackList"], [125, 3, 1, "", "setBlackListEntities"], [125, 3, 1, "", "setConsistentObfuscation"], [125, 3, 1, "", "setDateFormats"], [125, 3, 1, "", "setDateTag"], [125, 3, 1, "", "setDateToYear"], [125, 3, 1, "", "setDays"], [125, 3, 1, "", "setDoExceptionHandling"], [125, 3, 1, "", "setFixedMaskLength"], [125, 3, 1, "", "setForceInputTypeValidation"], [125, 3, 1, "", "setGenderAwareness"], [125, 3, 1, "", "setIgnoreRegex"], [125, 3, 1, "", "setInputCols"], [125, 3, 1, "", "setIsRandomDateDisplacement"], [125, 3, 1, "", "setKeepYear"], [125, 3, 1, "", "setLanguage"], [125, 3, 1, "", "setLazyAnnotator"], [125, 3, 1, "", "setMappingsColumn"], [125, 3, 1, "", "setMaskingPolicy"], [125, 3, 1, "", "setMetadataMaskingPolicy"], [125, 3, 1, "", "setMinYear"], [125, 3, 1, "", "setMode"], [125, 3, 1, "", "setObfuscateByAgeGroups"], [125, 3, 1, "", "setObfuscateDate"], [125, 3, 1, "", "setObfuscateRefSource"], [125, 3, 1, "", "setObfuscationStrategyOnException"], [125, 3, 1, "", "setOutputAsDocument"], [125, 3, 1, "", "setOutputCol"], [125, 3, 1, "", "setParamValue"], [125, 3, 1, "", "setParams"], [125, 3, 1, "", "setRegexOverride"], [125, 3, 1, "", "setRegion"], [125, 3, 1, "", "setReturnEntityMappings"], [125, 3, 1, "", "setSameEntityThreshold"], [125, 3, 1, "", "setSameLengthFormattedEntities"], [125, 3, 1, "", "setSeed"], [125, 3, 1, "", "setUnnormalizedDateMode"], [125, 3, 1, "", "setUseShifDays"], [125, 3, 1, "", "setUseShiftDays"], [125, 3, 1, "", "setZipCodeTag"], [125, 2, 1, "", "skipLPInputColsValidation"], [125, 3, 1, "", "transform"], [125, 2, 1, "", "uid"], [125, 2, 1, "", "unnormalizedDateMode"], [125, 2, 1, "", "useShifDays"], [125, 3, 1, "", "write"], [125, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[126, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[126, 3, 1, "", "clear"], [126, 3, 1, "", "copy"], [126, 2, 1, "", "dateShiftColumn"], [126, 3, 1, "", "explainParam"], [126, 3, 1, "", "explainParams"], [126, 3, 1, "", "extractParamMap"], [126, 3, 1, "", "getInputCols"], [126, 3, 1, "", "getLazyAnnotator"], [126, 3, 1, "", "getOrDefault"], [126, 3, 1, "", "getOutputCol"], [126, 3, 1, "", "getParam"], [126, 3, 1, "", "getParamValue"], [126, 2, 1, "", "getter_attrs"], [126, 3, 1, "", "hasDefault"], [126, 3, 1, "", "hasParam"], [126, 2, 1, "", "inputAnnotatorTypes"], [126, 2, 1, "", "inputCols"], [126, 3, 1, "", "inputColsValidation"], [126, 3, 1, "", "isDefined"], [126, 3, 1, "", "isSet"], [126, 2, 1, "", "kwargs"], [126, 2, 1, "", "lazyAnnotator"], [126, 3, 1, "", "load"], [126, 2, 1, "", "name"], [126, 2, 1, "", "newDateShift"], [126, 2, 1, "", "optionalInputAnnotatorTypes"], [126, 2, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "outputCol"], [126, 2, 1, "", "patientIdColumn"], [126, 2, 1, "", "rangeDays"], [126, 3, 1, "", "read"], [126, 3, 1, "", "save"], [126, 2, 1, "", "seed"], [126, 3, 1, "", "set"], [126, 3, 1, "", "setDateShiftColumn"], [126, 3, 1, "", "setIdColumn"], [126, 3, 1, "", "setInputCols"], [126, 3, 1, "", "setLazyAnnotator"], [126, 3, 1, "", "setNewDateShift"], [126, 3, 1, "", "setOutputCol"], [126, 3, 1, "", "setParamValue"], [126, 3, 1, "", "setParams"], [126, 3, 1, "", "setPatientIdColumn"], [126, 3, 1, "", "setRangeDays"], [126, 3, 1, "", "setSeed"], [126, 3, 1, "", "transform"], [126, 2, 1, "", "uid"], [126, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[129, 0, 0, "-", "chunkmapper"], [130, 0, 0, "-", "docmapper"], [132, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[129, 1, 1, "", "ChunkMapperApproach"], [129, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[129, 2, 1, "", "allowMultiTokenChunk"], [129, 3, 1, "", "clear"], [129, 3, 1, "", "copy"], [129, 2, 1, "", "dictionary"], [129, 2, 1, "", "doExceptionHandling"], [129, 2, 1, "", "enableCharFingerprintMatching"], [129, 2, 1, "", "enableFuzzyMatching"], [129, 2, 1, "", "enableTokenFingerprintMatching"], [129, 3, 1, "", "explainParam"], [129, 3, 1, "", "explainParams"], [129, 3, 1, "", "extractParamMap"], [129, 3, 1, "", "fit"], [129, 3, 1, "", "fitMultiple"], [129, 2, 1, "", "fuzzyDistanceScalingMode"], [129, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [129, 2, 1, "", "fuzzyMatchingDistances"], [129, 3, 1, "", "getInputCols"], [129, 3, 1, "", "getLazyAnnotator"], [129, 3, 1, "", "getOrDefault"], [129, 3, 1, "", "getOutputCol"], [129, 3, 1, "", "getParam"], [129, 3, 1, "", "getParamValue"], [129, 2, 1, "", "getter_attrs"], [129, 3, 1, "", "hasDefault"], [129, 3, 1, "", "hasParam"], [129, 2, 1, "", "inputAnnotatorTypes"], [129, 2, 1, "", "inputCols"], [129, 3, 1, "", "inputColsValidation"], [129, 3, 1, "", "isDefined"], [129, 3, 1, "", "isSet"], [129, 2, 1, "", "lazyAnnotator"], [129, 3, 1, "", "load"], [129, 2, 1, "", "lowerCase"], [129, 2, 1, "", "maxCharNgramFingerprint"], [129, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [129, 2, 1, "", "maxTokenNgramDroppingOperator"], [129, 2, 1, "", "maxTokenNgramDroppingTokens"], [129, 2, 1, "", "maxTokenNgramFingerprint"], [129, 2, 1, "", "minCharNgramFingerprint"], [129, 2, 1, "", "minTokenNgramFingerprint"], [129, 2, 1, "", "multivaluesRelations"], [129, 2, 1, "", "name"], [129, 2, 1, "", "optionalInputAnnotatorTypes"], [129, 2, 1, "", "outputAnnotatorType"], [129, 2, 1, "", "outputCol"], [129, 3, 1, "", "read"], [129, 2, 1, "", "rel"], [129, 2, 1, "", "rels"], [129, 3, 1, "", "save"], [129, 3, 1, "", "set"], [129, 3, 1, "", "setAllowMultiTokenChunk"], [129, 3, 1, "", "setDictionary"], [129, 3, 1, "", "setDoExceptionHandling"], [129, 3, 1, "", "setEnableCharFingerprintMatching"], [129, 3, 1, "", "setEnableFuzzyMatching"], [129, 3, 1, "", "setEnableTokenFingerprintMatching"], [129, 3, 1, "", "setForceInputTypeValidation"], [129, 3, 1, "", "setFuzzyDistanceScalingMode"], [129, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [129, 3, 1, "", "setFuzzyMatchingDistances"], [129, 3, 1, "", "setInputCols"], [129, 3, 1, "", "setLazyAnnotator"], [129, 3, 1, "", "setLowerCase"], [129, 3, 1, "", "setMaxCharNgramFingerprint"], [129, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [129, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [129, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [129, 3, 1, "", "setMaxTokenNgramFingerprint"], [129, 3, 1, "", "setMinCharNgramFingerprint"], [129, 3, 1, "", "setMinTokenNgramFingerprint"], [129, 3, 1, "", "setMultivaluesRelations"], [129, 3, 1, "", "setOutputCol"], [129, 3, 1, "", "setParamValue"], [129, 3, 1, "", "setRel"], [129, 3, 1, "", "setRels"], [129, 2, 1, "", "skipLPInputColsValidation"], [129, 2, 1, "", "uid"], [129, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[129, 2, 1, "", "allowMultiTokenChunk"], [129, 3, 1, "", "clear"], [129, 3, 1, "", "copy"], [129, 2, 1, "", "doExceptionHandling"], [129, 3, 1, "", "explainParam"], [129, 3, 1, "", "explainParams"], [129, 3, 1, "", "extractParamMap"], [129, 3, 1, "", "getInputCols"], [129, 3, 1, "", "getLazyAnnotator"], [129, 3, 1, "", "getOrDefault"], [129, 3, 1, "", "getOutputCol"], [129, 3, 1, "", "getParam"], [129, 3, 1, "", "getParamValue"], [129, 2, 1, "", "getter_attrs"], [129, 3, 1, "", "hasDefault"], [129, 3, 1, "", "hasParam"], [129, 2, 1, "", "inputAnnotatorTypes"], [129, 2, 1, "", "inputCols"], [129, 3, 1, "", "inputColsValidation"], [129, 3, 1, "", "isDefined"], [129, 3, 1, "", "isSet"], [129, 2, 1, "", "lazyAnnotator"], [129, 3, 1, "", "load"], [129, 2, 1, "", "lowerCase"], [129, 2, 1, "", "multivaluesRelations"], [129, 2, 1, "", "name"], [129, 2, 1, "", "optionalInputAnnotatorTypes"], [129, 2, 1, "", "outputAnnotatorType"], [129, 2, 1, "", "outputCol"], [129, 3, 1, "", "pretrained"], [129, 3, 1, "", "read"], [129, 2, 1, "", "rel"], [129, 2, 1, "", "rels"], [129, 3, 1, "", "save"], [129, 3, 1, "", "set"], [129, 3, 1, "", "setAllowMultiTokenChunk"], [129, 3, 1, "", "setDoExceptionHandling"], [129, 3, 1, "", "setForceInputTypeValidation"], [129, 3, 1, "", "setInputCols"], [129, 3, 1, "", "setLazyAnnotator"], [129, 3, 1, "", "setLowerCase"], [129, 3, 1, "", "setMultivaluesRelations"], [129, 3, 1, "", "setOutputCol"], [129, 3, 1, "", "setParamValue"], [129, 3, 1, "", "setParams"], [129, 3, 1, "", "setRel"], [129, 3, 1, "", "setRels"], [129, 2, 1, "", "skipLPInputColsValidation"], [129, 3, 1, "", "transform"], [129, 2, 1, "", "uid"], [129, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[130, 1, 1, "", "DocMapperApproach"], [130, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[130, 2, 1, "", "allowMultiTokenChunk"], [130, 3, 1, "", "clear"], [130, 3, 1, "", "copy"], [130, 2, 1, "", "dictionary"], [130, 2, 1, "", "doExceptionHandling"], [130, 2, 1, "", "enableCharFingerprintMatching"], [130, 2, 1, "", "enableFuzzyMatching"], [130, 2, 1, "", "enableTokenFingerprintMatching"], [130, 3, 1, "", "explainParam"], [130, 3, 1, "", "explainParams"], [130, 3, 1, "", "extractParamMap"], [130, 3, 1, "", "fit"], [130, 3, 1, "", "fitMultiple"], [130, 2, 1, "", "fuzzyDistanceScalingMode"], [130, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [130, 2, 1, "", "fuzzyMatchingDistances"], [130, 3, 1, "", "getInputCols"], [130, 3, 1, "", "getLazyAnnotator"], [130, 3, 1, "", "getOrDefault"], [130, 3, 1, "", "getOutputCol"], [130, 3, 1, "", "getParam"], [130, 3, 1, "", "getParamValue"], [130, 2, 1, "", "getter_attrs"], [130, 3, 1, "", "hasDefault"], [130, 3, 1, "", "hasParam"], [130, 2, 1, "", "inputAnnotatorTypes"], [130, 2, 1, "", "inputCols"], [130, 3, 1, "", "inputColsValidation"], [130, 3, 1, "", "isDefined"], [130, 3, 1, "", "isSet"], [130, 2, 1, "", "lazyAnnotator"], [130, 3, 1, "", "load"], [130, 2, 1, "", "lowerCase"], [130, 2, 1, "", "maxCharNgramFingerprint"], [130, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [130, 2, 1, "", "maxTokenNgramDroppingOperator"], [130, 2, 1, "", "maxTokenNgramDroppingTokens"], [130, 2, 1, "", "maxTokenNgramFingerprint"], [130, 2, 1, "", "minCharNgramFingerprint"], [130, 2, 1, "", "minTokenNgramFingerprint"], [130, 2, 1, "", "multivaluesRelations"], [130, 2, 1, "", "name"], [130, 2, 1, "", "optionalInputAnnotatorTypes"], [130, 2, 1, "", "outputAnnotatorType"], [130, 2, 1, "", "outputCol"], [130, 3, 1, "", "read"], [130, 2, 1, "", "rel"], [130, 2, 1, "", "rels"], [130, 3, 1, "", "save"], [130, 3, 1, "", "set"], [130, 3, 1, "", "setAllowMultiTokenChunk"], [130, 3, 1, "", "setDictionary"], [130, 3, 1, "", "setDoExceptionHandling"], [130, 3, 1, "", "setEnableCharFingerprintMatching"], [130, 3, 1, "", "setEnableFuzzyMatching"], [130, 3, 1, "", "setEnableTokenFingerprintMatching"], [130, 3, 1, "", "setForceInputTypeValidation"], [130, 3, 1, "", "setFuzzyDistanceScalingMode"], [130, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [130, 3, 1, "", "setFuzzyMatchingDistances"], [130, 3, 1, "", "setInputCols"], [130, 3, 1, "", "setLazyAnnotator"], [130, 3, 1, "", "setLowerCase"], [130, 3, 1, "", "setMaxCharNgramFingerprint"], [130, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [130, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [130, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [130, 3, 1, "", "setMaxTokenNgramFingerprint"], [130, 3, 1, "", "setMinCharNgramFingerprint"], [130, 3, 1, "", "setMinTokenNgramFingerprint"], [130, 3, 1, "", "setMultivaluesRelations"], [130, 3, 1, "", "setOutputCol"], [130, 3, 1, "", "setParamValue"], [130, 3, 1, "", "setRel"], [130, 3, 1, "", "setRels"], [130, 2, 1, "", "skipLPInputColsValidation"], [130, 2, 1, "", "uid"], [130, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[130, 2, 1, "", "allowMultiTokenChunk"], [130, 3, 1, "", "clear"], [130, 3, 1, "", "copy"], [130, 2, 1, "", "doExceptionHandling"], [130, 3, 1, "", "explainParam"], [130, 3, 1, "", "explainParams"], [130, 3, 1, "", "extractParamMap"], [130, 3, 1, "", "getInputCols"], [130, 3, 1, "", "getLazyAnnotator"], [130, 3, 1, "", "getOrDefault"], [130, 3, 1, "", "getOutputCol"], [130, 3, 1, "", "getParam"], [130, 3, 1, "", "getParamValue"], [130, 2, 1, "", "getter_attrs"], [130, 3, 1, "", "hasDefault"], [130, 3, 1, "", "hasParam"], [130, 2, 1, "", "inputAnnotatorTypes"], [130, 2, 1, "", "inputCols"], [130, 3, 1, "", "inputColsValidation"], [130, 3, 1, "", "isDefined"], [130, 3, 1, "", "isSet"], [130, 2, 1, "", "lazyAnnotator"], [130, 3, 1, "", "load"], [130, 2, 1, "", "lowerCase"], [130, 2, 1, "", "multivaluesRelations"], [130, 2, 1, "", "name"], [130, 2, 1, "", "optionalInputAnnotatorTypes"], [130, 2, 1, "", "outputAnnotatorType"], [130, 2, 1, "", "outputCol"], [130, 3, 1, "", "pretrained"], [130, 3, 1, "", "read"], [130, 2, 1, "", "rel"], [130, 2, 1, "", "rels"], [130, 3, 1, "", "save"], [130, 3, 1, "", "set"], [130, 3, 1, "", "setAllowMultiTokenChunk"], [130, 3, 1, "", "setDoExceptionHandling"], [130, 3, 1, "", "setForceInputTypeValidation"], [130, 3, 1, "", "setInputCols"], [130, 3, 1, "", "setLazyAnnotator"], [130, 3, 1, "", "setLowerCase"], [130, 3, 1, "", "setMultivaluesRelations"], [130, 3, 1, "", "setOutputCol"], [130, 3, 1, "", "setParamValue"], [130, 3, 1, "", "setParams"], [130, 3, 1, "", "setRel"], [130, 3, 1, "", "setRels"], [130, 2, 1, "", "skipLPInputColsValidation"], [130, 3, 1, "", "transform"], [130, 2, 1, "", "uid"], [130, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[132, 1, 1, "", "SentenceEntityResolverApproach"], [132, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[132, 2, 1, "", "aux_label_col"], [132, 2, 1, "", "caseSensitive"], [132, 3, 1, "", "clear"], [132, 2, 1, "", "confidenceFunction"], [132, 3, 1, "", "copy"], [132, 2, 1, "", "datasetInfo"], [132, 2, 1, "", "distanceFunction"], [132, 2, 1, "", "doExceptionHandling"], [132, 2, 1, "", "dropCodesList"], [132, 2, 1, "", "engine"], [132, 3, 1, "", "explainParam"], [132, 3, 1, "", "explainParams"], [132, 3, 1, "", "extractParamMap"], [132, 3, 1, "", "fit"], [132, 3, 1, "", "fitMultiple"], [132, 3, 1, "", "getCaseSensitive"], [132, 3, 1, "", "getEngine"], [132, 3, 1, "", "getInputCols"], [132, 3, 1, "", "getLazyAnnotator"], [132, 3, 1, "", "getOrDefault"], [132, 3, 1, "", "getOutputCol"], [132, 3, 1, "", "getParam"], [132, 3, 1, "", "getParamValue"], [132, 2, 1, "", "getter_attrs"], [132, 3, 1, "", "hasDefault"], [132, 3, 1, "", "hasParam"], [132, 2, 1, "", "inputAnnotatorTypes"], [132, 2, 1, "", "inputCols"], [132, 3, 1, "", "inputColsValidation"], [132, 3, 1, "", "isDefined"], [132, 3, 1, "", "isSet"], [132, 2, 1, "", "labelCol"], [132, 2, 1, "", "lazyAnnotator"], [132, 3, 1, "", "load"], [132, 2, 1, "", "missAsEmpty"], [132, 2, 1, "", "neighbours"], [132, 2, 1, "", "normalizedCol"], [132, 2, 1, "", "optionalInputAnnotatorTypes"], [132, 2, 1, "", "outputAnnotatorType"], [132, 2, 1, "", "outputCol"], [132, 2, 1, "", "overrideExistingCodes"], [132, 2, 1, "", "pretrainedModelPath"], [132, 3, 1, "", "read"], [132, 2, 1, "", "returnCosineDistances"], [132, 2, 1, "", "returnResolvedTextEmbeddings"], [132, 3, 1, "", "save"], [132, 3, 1, "", "set"], [132, 3, 1, "", "setAuxLabelCol"], [132, 3, 1, "", "setCaseSensitive"], [132, 3, 1, "", "setConfidenceFunction"], [132, 3, 1, "", "setDatasetInfo"], [132, 3, 1, "", "setDistanceFunction"], [132, 3, 1, "", "setDoExceptionHandling"], [132, 3, 1, "", "setDropCodesList"], [132, 3, 1, "", "setExtractCosineDistances"], [132, 3, 1, "", "setForceInputTypeValidation"], [132, 3, 1, "", "setInputCols"], [132, 3, 1, "", "setLabelCol"], [132, 3, 1, "", "setLazyAnnotator"], [132, 3, 1, "", "setMissAsEmpty"], [132, 3, 1, "", "setNeighbours"], [132, 3, 1, "", "setNormalizedCol"], [132, 3, 1, "", "setOutputCol"], [132, 3, 1, "", "setOverrideExistingCodes"], [132, 3, 1, "", "setParamValue"], [132, 3, 1, "", "setPretrainedModelPath"], [132, 3, 1, "", "setReturnResolvedTextEmbeddings"], [132, 3, 1, "", "setThreshold"], [132, 3, 1, "", "setUseAuxLabel"], [132, 2, 1, "", "skipLPInputColsValidation"], [132, 2, 1, "", "threshold"], [132, 2, 1, "", "uid"], [132, 2, 1, "", "useAuxLabel"], [132, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[132, 3, 1, "", "clear"], [132, 3, 1, "", "copy"], [132, 2, 1, "", "dimension"], [132, 3, 1, "", "explainParam"], [132, 3, 1, "", "explainParams"], [132, 3, 1, "", "extractParamMap"], [132, 3, 1, "", "getDimension"], [132, 3, 1, "", "getInputCols"], [132, 3, 1, "", "getLazyAnnotator"], [132, 3, 1, "", "getOrDefault"], [132, 3, 1, "", "getOutputCol"], [132, 3, 1, "", "getParam"], [132, 3, 1, "", "getParamValue"], [132, 2, 1, "", "getter_attrs"], [132, 3, 1, "", "hasDefault"], [132, 3, 1, "", "hasParam"], [132, 2, 1, "", "inputAnnotatorTypes"], [132, 2, 1, "", "inputCols"], [132, 3, 1, "", "inputColsValidation"], [132, 3, 1, "", "isDefined"], [132, 3, 1, "", "isSet"], [132, 2, 1, "", "lazyAnnotator"], [132, 3, 1, "", "load"], [132, 2, 1, "", "name"], [132, 2, 1, "", "optionalInputAnnotatorTypes"], [132, 2, 1, "", "outputAnnotatorType"], [132, 2, 1, "", "outputCol"], [132, 3, 1, "", "pretrained"], [132, 3, 1, "", "read"], [132, 2, 1, "", "returnCosineDistances"], [132, 3, 1, "", "save"], [132, 2, 1, "", "searchTree"], [132, 3, 1, "", "set"], [132, 3, 1, "", "setDimension"], [132, 3, 1, "", "setForceInputTypeValidation"], [132, 3, 1, "", "setInputCols"], [132, 3, 1, "", "setLazyAnnotator"], [132, 3, 1, "", "setOutputCol"], [132, 3, 1, "", "setParamValue"], [132, 3, 1, "", "setParams"], [132, 3, 1, "", "setSearchTree"], [132, 3, 1, "", "setUseAuxLabel"], [132, 2, 1, "", "skipLPInputColsValidation"], [132, 3, 1, "", "transform"], [132, 2, 1, "", "uid"], [132, 2, 1, "", "useAuxLabel"], [132, 3, 1, "", "write"]], "sparknlp_jsl.finance.graph": [[134, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[135, 0, 0, "-", "relation_extraction_dl"], [136, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[135, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[135, 2, 1, "", "batchSize"], [135, 2, 1, "", "classes"], [135, 3, 1, "", "clear"], [135, 3, 1, "", "copy"], [135, 2, 1, "", "customLabels"], [135, 2, 1, "", "doExceptionHandling"], [135, 3, 1, "", "explainParam"], [135, 3, 1, "", "explainParams"], [135, 3, 1, "", "extractParamMap"], [135, 3, 1, "", "getClasses"], [135, 3, 1, "", "getInputCols"], [135, 3, 1, "", "getLazyAnnotator"], [135, 3, 1, "", "getOrDefault"], [135, 3, 1, "", "getOutputCol"], [135, 3, 1, "", "getParam"], [135, 3, 1, "", "getParamValue"], [135, 3, 1, "", "getRelationTypePerPair"], [135, 2, 1, "", "getter_attrs"], [135, 3, 1, "", "hasDefault"], [135, 3, 1, "", "hasParam"], [135, 2, 1, "", "inputAnnotatorTypes"], [135, 2, 1, "", "inputCols"], [135, 3, 1, "", "inputColsValidation"], [135, 3, 1, "", "isDefined"], [135, 3, 1, "", "isSet"], [135, 2, 1, "", "lazyAnnotator"], [135, 3, 1, "", "load"], [135, 3, 1, "", "loadSavedModel"], [135, 2, 1, "", "name"], [135, 2, 1, "", "optionalInputAnnotatorTypes"], [135, 2, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "outputCol"], [135, 2, 1, "", "predictionThreshold"], [135, 3, 1, "", "pretrained"], [135, 3, 1, "", "read"], [135, 2, 1, "", "relationPairsCaseSensitive"], [135, 3, 1, "", "save"], [135, 3, 1, "", "set"], [135, 3, 1, "", "setBatchSize"], [135, 3, 1, "", "setCaseSensitive"], [135, 3, 1, "", "setCustomLabels"], [135, 3, 1, "", "setDoExceptionHandling"], [135, 3, 1, "", "setForceInputTypeValidation"], [135, 3, 1, "", "setInputCols"], [135, 3, 1, "", "setLazyAnnotator"], [135, 3, 1, "", "setOutputCol"], [135, 3, 1, "", "setParamValue"], [135, 3, 1, "", "setParams"], [135, 3, 1, "", "setPredictionThreshold"], [135, 3, 1, "", "setRelationPairsCaseSensitive"], [135, 3, 1, "", "setRelationTypePerPair"], [135, 2, 1, "", "skipLPInputColsValidation"], [135, 3, 1, "", "transform"], [135, 2, 1, "", "uid"], [135, 3, 1, "", "write"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[136, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[136, 2, 1, "", "caseSensitive"], [136, 3, 1, "", "clear"], [136, 2, 1, "", "coalesceSentences"], [136, 2, 1, "", "configProtoBytes"], [136, 3, 1, "", "copy"], [136, 3, 1, "", "explainParam"], [136, 3, 1, "", "explainParams"], [136, 3, 1, "", "extractParamMap"], [136, 3, 1, "", "getCaseSensitive"], [136, 3, 1, "", "getClasses"], [136, 3, 1, "", "getInputCols"], [136, 3, 1, "", "getLazyAnnotator"], [136, 3, 1, "", "getOrDefault"], [136, 3, 1, "", "getOutputCol"], [136, 3, 1, "", "getParam"], [136, 3, 1, "", "getParamValue"], [136, 2, 1, "", "getter_attrs"], [136, 3, 1, "", "hasDefault"], [136, 3, 1, "", "hasParam"], [136, 2, 1, "", "inputAnnotatorTypes"], [136, 2, 1, "", "inputCols"], [136, 3, 1, "", "inputColsValidation"], [136, 3, 1, "", "isDefined"], [136, 3, 1, "", "isSet"], [136, 2, 1, "", "lazyAnnotator"], [136, 3, 1, "", "load"], [136, 3, 1, "", "loadSavedModel"], [136, 3, 1, "", "loadSavedModelOpenSource"], [136, 2, 1, "", "maxSentenceLength"], [136, 2, 1, "", "multiLabel"], [136, 2, 1, "", "name"], [136, 2, 1, "", "negativeRelationships"], [136, 2, 1, "", "optionalInputAnnotatorTypes"], [136, 2, 1, "", "outputAnnotatorType"], [136, 2, 1, "", "outputCol"], [136, 2, 1, "", "predictionThreshold"], [136, 3, 1, "", "pretrained"], [136, 3, 1, "", "read"], [136, 3, 1, "", "save"], [136, 3, 1, "", "set"], [136, 3, 1, "", "setCaseSensitive"], [136, 3, 1, "", "setCoalesceSentences"], [136, 3, 1, "", "setConfigProtoBytes"], [136, 3, 1, "", "setForceInputTypeValidation"], [136, 3, 1, "", "setInputCols"], [136, 3, 1, "", "setLazyAnnotator"], [136, 3, 1, "", "setMaxSentenceLength"], [136, 3, 1, "", "setNegativeRelationships"], [136, 3, 1, "", "setOutputCol"], [136, 3, 1, "", "setParamValue"], [136, 3, 1, "", "setParams"], [136, 3, 1, "", "setRelationalCategories"], [136, 2, 1, "", "skipLPInputColsValidation"], [136, 3, 1, "", "transform"], [136, 2, 1, "", "uid"], [136, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification": [[138, 0, 0, "-", "finance_bert_for_sequence_classification"], [139, 0, 0, "-", "finance_classifier_dl"], [140, 0, 0, "-", "finance_document_ml_classifier"], [141, 0, 0, "-", "finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[138, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[138, 2, 1, "", "caseSensitive"], [138, 3, 1, "", "clear"], [138, 2, 1, "", "coalesceSentences"], [138, 2, 1, "", "configProtoBytes"], [138, 3, 1, "", "copy"], [138, 3, 1, "", "explainParam"], [138, 3, 1, "", "explainParams"], [138, 3, 1, "", "extractParamMap"], [138, 3, 1, "", "getCaseSensitive"], [138, 3, 1, "", "getClasses"], [138, 3, 1, "", "getInputCols"], [138, 3, 1, "", "getLazyAnnotator"], [138, 3, 1, "", "getOrDefault"], [138, 3, 1, "", "getOutputCol"], [138, 3, 1, "", "getParam"], [138, 3, 1, "", "getParamValue"], [138, 2, 1, "", "getter_attrs"], [138, 3, 1, "", "hasDefault"], [138, 3, 1, "", "hasParam"], [138, 2, 1, "", "inputAnnotatorTypes"], [138, 2, 1, "", "inputCols"], [138, 3, 1, "", "inputColsValidation"], [138, 3, 1, "", "isDefined"], [138, 3, 1, "", "isSet"], [138, 2, 1, "", "lazyAnnotator"], [138, 3, 1, "", "load"], [138, 3, 1, "", "loadSavedModel"], [138, 3, 1, "", "loadSavedModelOpenSource"], [138, 2, 1, "", "maxSentenceLength"], [138, 2, 1, "", "name"], [138, 2, 1, "", "optionalInputAnnotatorTypes"], [138, 2, 1, "", "outputAnnotatorType"], [138, 2, 1, "", "outputCol"], [138, 3, 1, "", "pretrained"], [138, 3, 1, "", "read"], [138, 3, 1, "", "save"], [138, 3, 1, "", "set"], [138, 3, 1, "", "setCaseSensitive"], [138, 3, 1, "", "setCoalesceSentences"], [138, 3, 1, "", "setConfigProtoBytes"], [138, 3, 1, "", "setForceInputTypeValidation"], [138, 3, 1, "", "setInputCols"], [138, 3, 1, "", "setLazyAnnotator"], [138, 3, 1, "", "setMaxSentenceLength"], [138, 3, 1, "", "setOutputCol"], [138, 3, 1, "", "setParamValue"], [138, 3, 1, "", "setParams"], [138, 2, 1, "", "skipLPInputColsValidation"], [138, 3, 1, "", "transform"], [138, 2, 1, "", "uid"], [138, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[139, 1, 1, "", "FinanceClassifierDLApproach"], [139, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach": [[139, 2, 1, "", "batchSize"], [139, 3, 1, "", "clear"], [139, 2, 1, "", "configProtoBytes"], [139, 3, 1, "", "copy"], [139, 2, 1, "", "dropout"], [139, 2, 1, "", "enableOutputLogs"], [139, 2, 1, "", "evaluationLogExtended"], [139, 3, 1, "", "explainParam"], [139, 3, 1, "", "explainParams"], [139, 3, 1, "", "extractParamMap"], [139, 3, 1, "", "fit"], [139, 3, 1, "", "fitMultiple"], [139, 3, 1, "", "getInputCols"], [139, 3, 1, "", "getLazyAnnotator"], [139, 3, 1, "", "getOrDefault"], [139, 3, 1, "", "getOutputCol"], [139, 3, 1, "", "getParam"], [139, 3, 1, "", "getParamValue"], [139, 2, 1, "", "getter_attrs"], [139, 3, 1, "", "hasDefault"], [139, 3, 1, "", "hasParam"], [139, 2, 1, "", "inputAnnotatorTypes"], [139, 2, 1, "", "inputCols"], [139, 3, 1, "", "inputColsValidation"], [139, 3, 1, "", "isDefined"], [139, 3, 1, "", "isSet"], [139, 2, 1, "", "labelColumn"], [139, 2, 1, "", "lazyAnnotator"], [139, 3, 1, "", "load"], [139, 2, 1, "", "lr"], [139, 2, 1, "", "maxEpochs"], [139, 2, 1, "", "optionalInputAnnotatorTypes"], [139, 2, 1, "", "outputAnnotatorType"], [139, 2, 1, "", "outputCol"], [139, 2, 1, "", "outputLogsPath"], [139, 2, 1, "", "randomSeed"], [139, 3, 1, "", "read"], [139, 3, 1, "", "save"], [139, 3, 1, "", "set"], [139, 3, 1, "", "setBatchSize"], [139, 3, 1, "", "setConfigProtoBytes"], [139, 3, 1, "", "setDropout"], [139, 3, 1, "", "setEnableOutputLogs"], [139, 3, 1, "", "setEvaluationLogExtended"], [139, 3, 1, "", "setInputCols"], [139, 3, 1, "", "setLabelColumn"], [139, 3, 1, "", "setLazyAnnotator"], [139, 3, 1, "", "setLr"], [139, 3, 1, "", "setMaxEpochs"], [139, 3, 1, "", "setOutputCol"], [139, 3, 1, "", "setOutputLogsPath"], [139, 3, 1, "", "setParamValue"], [139, 3, 1, "", "setRandomSeed"], [139, 3, 1, "", "setTestDataset"], [139, 3, 1, "", "setValidationSplit"], [139, 3, 1, "", "setVerbose"], [139, 2, 1, "", "testDataset"], [139, 2, 1, "", "uid"], [139, 2, 1, "", "validationSplit"], [139, 2, 1, "", "verbose"], [139, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[139, 2, 1, "", "classes"], [139, 3, 1, "", "clear"], [139, 2, 1, "", "configProtoBytes"], [139, 3, 1, "", "copy"], [139, 2, 1, "", "engine"], [139, 3, 1, "", "explainParam"], [139, 3, 1, "", "explainParams"], [139, 3, 1, "", "extractParamMap"], [139, 3, 1, "", "getEngine"], [139, 3, 1, "", "getInputCols"], [139, 3, 1, "", "getLazyAnnotator"], [139, 3, 1, "", "getOrDefault"], [139, 3, 1, "", "getOutputCol"], [139, 3, 1, "", "getParam"], [139, 3, 1, "", "getParamValue"], [139, 3, 1, "", "getStorageRef"], [139, 2, 1, "", "getter_attrs"], [139, 3, 1, "", "hasDefault"], [139, 3, 1, "", "hasParam"], [139, 2, 1, "", "inputAnnotatorTypes"], [139, 2, 1, "", "inputCols"], [139, 3, 1, "", "inputColsValidation"], [139, 3, 1, "", "isDefined"], [139, 3, 1, "", "isSet"], [139, 2, 1, "", "lazyAnnotator"], [139, 3, 1, "", "load"], [139, 2, 1, "", "name"], [139, 2, 1, "", "optionalInputAnnotatorTypes"], [139, 2, 1, "", "outputAnnotatorType"], [139, 2, 1, "", "outputCol"], [139, 3, 1, "", "pretrained"], [139, 3, 1, "", "read"], [139, 3, 1, "", "save"], [139, 3, 1, "", "set"], [139, 3, 1, "", "setConfigProtoBytes"], [139, 3, 1, "", "setInputCols"], [139, 3, 1, "", "setLazyAnnotator"], [139, 3, 1, "", "setOutputCol"], [139, 3, 1, "", "setParamValue"], [139, 3, 1, "", "setParams"], [139, 3, 1, "", "setStorageRef"], [139, 2, 1, "", "storageRef"], [139, 3, 1, "", "transform"], [139, 2, 1, "", "uid"], [139, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[140, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [140, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach": [[140, 2, 1, "", "classificationModelClass"], [140, 2, 1, "", "classificationModelPath"], [140, 3, 1, "", "clear"], [140, 3, 1, "", "copy"], [140, 3, 1, "", "explainParam"], [140, 3, 1, "", "explainParams"], [140, 3, 1, "", "extractParamMap"], [140, 3, 1, "", "fit"], [140, 2, 1, "", "fitIntercept"], [140, 3, 1, "", "fitMultiple"], [140, 3, 1, "", "getInputCols"], [140, 3, 1, "", "getLazyAnnotator"], [140, 3, 1, "", "getOrDefault"], [140, 3, 1, "", "getOutputCol"], [140, 3, 1, "", "getParam"], [140, 3, 1, "", "getParamValue"], [140, 2, 1, "", "getter_attrs"], [140, 3, 1, "", "hasDefault"], [140, 3, 1, "", "hasParam"], [140, 2, 1, "", "inputAnnotatorTypes"], [140, 2, 1, "", "inputCols"], [140, 3, 1, "", "inputColsValidation"], [140, 3, 1, "", "isDefined"], [140, 3, 1, "", "isSet"], [140, 2, 1, "", "labelCol"], [140, 2, 1, "", "labels"], [140, 2, 1, "", "lazyAnnotator"], [140, 3, 1, "", "load"], [140, 2, 1, "", "maxIter"], [140, 2, 1, "", "maxTokenNgram"], [140, 2, 1, "", "mergeChunks"], [140, 2, 1, "", "minTokenNgram"], [140, 2, 1, "", "optionalInputAnnotatorTypes"], [140, 2, 1, "", "outputAnnotatorType"], [140, 2, 1, "", "outputCol"], [140, 3, 1, "", "read"], [140, 3, 1, "", "save"], [140, 3, 1, "", "set"], [140, 3, 1, "", "setClassificationModelClass"], [140, 3, 1, "", "setClassificationModelPath"], [140, 3, 1, "", "setFitIntercept"], [140, 3, 1, "", "setForceInputTypeValidation"], [140, 3, 1, "", "setInputCols"], [140, 3, 1, "", "setLabelCol"], [140, 3, 1, "", "setLabels"], [140, 3, 1, "", "setLazyAnnotator"], [140, 3, 1, "", "setMaxIter"], [140, 3, 1, "", "setMaxTokenNgram"], [140, 3, 1, "", "setMergeChunks"], [140, 3, 1, "", "setMinTokenNgram"], [140, 3, 1, "", "setOutputCol"], [140, 3, 1, "", "setParamValue"], [140, 3, 1, "", "setTol"], [140, 3, 1, "", "setVectorizationModelPath"], [140, 2, 1, "", "skipLPInputColsValidation"], [140, 2, 1, "", "tol"], [140, 2, 1, "", "uid"], [140, 2, 1, "", "vectorizationModelPath"], [140, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[140, 2, 1, "", "classificationModel"], [140, 3, 1, "", "clear"], [140, 3, 1, "", "copy"], [140, 3, 1, "", "explainParam"], [140, 3, 1, "", "explainParams"], [140, 3, 1, "", "extractParamMap"], [140, 3, 1, "", "getInputCols"], [140, 3, 1, "", "getLazyAnnotator"], [140, 3, 1, "", "getOrDefault"], [140, 3, 1, "", "getOutputCol"], [140, 3, 1, "", "getParam"], [140, 3, 1, "", "getParamValue"], [140, 2, 1, "", "getter_attrs"], [140, 3, 1, "", "hasDefault"], [140, 3, 1, "", "hasParam"], [140, 2, 1, "", "inputAnnotatorTypes"], [140, 2, 1, "", "inputCols"], [140, 3, 1, "", "inputColsValidation"], [140, 3, 1, "", "isDefined"], [140, 3, 1, "", "isSet"], [140, 2, 1, "", "labels"], [140, 2, 1, "", "lazyAnnotator"], [140, 3, 1, "", "load"], [140, 2, 1, "", "maxTokenNgram"], [140, 2, 1, "", "mergeChunks"], [140, 2, 1, "", "minTokenNgram"], [140, 2, 1, "", "name"], [140, 2, 1, "", "optionalInputAnnotatorTypes"], [140, 2, 1, "", "outputAnnotatorType"], [140, 2, 1, "", "outputCol"], [140, 3, 1, "", "pretrained"], [140, 3, 1, "", "read"], [140, 3, 1, "", "save"], [140, 3, 1, "", "set"], [140, 3, 1, "", "setClassificationModel"], [140, 3, 1, "", "setForceInputTypeValidation"], [140, 3, 1, "", "setInputCols"], [140, 3, 1, "", "setLabels"], [140, 3, 1, "", "setLazyAnnotator"], [140, 3, 1, "", "setMergeChunks"], [140, 3, 1, "", "setOutputCol"], [140, 3, 1, "", "setParamValue"], [140, 3, 1, "", "setParams"], [140, 3, 1, "", "setVectorizationModel"], [140, 2, 1, "", "skipLPInputColsValidation"], [140, 3, 1, "", "transform"], [140, 2, 1, "", "uid"], [140, 2, 1, "", "vectorizationModel"], [140, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[141, 1, 1, "", "FinanceFewShotClassifierApproach"], [141, 1, 1, "", "FinanceFewShotClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach": [[141, 2, 1, "", "batchSize"], [141, 3, 1, "", "clear"], [141, 3, 1, "", "copy"], [141, 2, 1, "", "datasetInfo"], [141, 2, 1, "", "doExceptionHandling"], [141, 2, 1, "", "dropout"], [141, 2, 1, "", "engine"], [141, 2, 1, "", "epochsN"], [141, 3, 1, "", "explainParam"], [141, 3, 1, "", "explainParams"], [141, 3, 1, "", "extractParamMap"], [141, 2, 1, "", "featureScaling"], [141, 3, 1, "", "fit"], [141, 3, 1, "", "fitMultiple"], [141, 2, 1, "", "fixImbalance"], [141, 3, 1, "", "getEngine"], [141, 3, 1, "", "getInputCols"], [141, 3, 1, "", "getLazyAnnotator"], [141, 3, 1, "", "getOrDefault"], [141, 3, 1, "", "getOutputCol"], [141, 3, 1, "", "getParam"], [141, 3, 1, "", "getParamValue"], [141, 2, 1, "", "getter_attrs"], [141, 3, 1, "", "hasDefault"], [141, 3, 1, "", "hasParam"], [141, 2, 1, "", "inputAnnotatorTypes"], [141, 2, 1, "", "inputCols"], [141, 3, 1, "", "inputColsValidation"], [141, 3, 1, "", "isDefined"], [141, 3, 1, "", "isSet"], [141, 2, 1, "", "labelColumn"], [141, 2, 1, "", "lazyAnnotator"], [141, 2, 1, "", "learningRate"], [141, 3, 1, "", "load"], [141, 2, 1, "", "modelFile"], [141, 2, 1, "", "multiClass"], [141, 2, 1, "", "name"], [141, 2, 1, "", "optionalInputAnnotatorTypes"], [141, 2, 1, "", "outputAnnotatorType"], [141, 2, 1, "", "outputCol"], [141, 2, 1, "", "outputLogsPath"], [141, 3, 1, "", "read"], [141, 3, 1, "", "save"], [141, 3, 1, "", "set"], [141, 3, 1, "", "setBatchSize"], [141, 3, 1, "", "setDatasetInfo"], [141, 3, 1, "", "setDoExceptionHandling"], [141, 3, 1, "", "setDropout"], [141, 3, 1, "", "setEpochsNumber"], [141, 3, 1, "", "setFeatureScaling"], [141, 3, 1, "", "setFixImbalance"], [141, 3, 1, "", "setForceInputTypeValidation"], [141, 3, 1, "", "setInputCols"], [141, 3, 1, "", "setLabelCol"], [141, 3, 1, "", "setLazyAnnotator"], [141, 3, 1, "", "setLearningRate"], [141, 3, 1, "", "setModelFile"], [141, 3, 1, "", "setMultiClass"], [141, 3, 1, "", "setOutputCol"], [141, 3, 1, "", "setOutputLogsPath"], [141, 3, 1, "", "setParamValue"], [141, 3, 1, "", "setValidationSplit"], [141, 2, 1, "", "skipLPInputColsValidation"], [141, 2, 1, "", "uid"], [141, 2, 1, "", "validationSplit"], [141, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel": [[141, 2, 1, "", "classes"], [141, 3, 1, "", "clear"], [141, 3, 1, "", "copy"], [141, 2, 1, "", "datasetInfo"], [141, 2, 1, "", "doExceptionHandling"], [141, 3, 1, "", "explainParam"], [141, 3, 1, "", "explainParams"], [141, 3, 1, "", "extractParamMap"], [141, 2, 1, "", "featureScaling"], [141, 3, 1, "", "getInputCols"], [141, 3, 1, "", "getLazyAnnotator"], [141, 3, 1, "", "getOrDefault"], [141, 3, 1, "", "getOutputCol"], [141, 3, 1, "", "getParam"], [141, 3, 1, "", "getParamValue"], [141, 2, 1, "", "getter_attrs"], [141, 3, 1, "", "hasDefault"], [141, 3, 1, "", "hasParam"], [141, 2, 1, "", "inputAnnotatorTypes"], [141, 2, 1, "", "inputCols"], [141, 3, 1, "", "inputColsValidation"], [141, 3, 1, "", "isDefined"], [141, 3, 1, "", "isSet"], [141, 2, 1, "", "lazyAnnotator"], [141, 3, 1, "", "load"], [141, 2, 1, "", "multiClass"], [141, 2, 1, "", "name"], [141, 2, 1, "", "optionalInputAnnotatorTypes"], [141, 2, 1, "", "outputAnnotatorType"], [141, 2, 1, "", "outputCol"], [141, 3, 1, "", "pretrained"], [141, 3, 1, "", "read"], [141, 3, 1, "", "save"], [141, 3, 1, "", "set"], [141, 3, 1, "", "setDatasetInfo"], [141, 3, 1, "", "setDoExceptionHandling"], [141, 3, 1, "", "setFeatureScaling"], [141, 3, 1, "", "setForceInputTypeValidation"], [141, 3, 1, "", "setInputCols"], [141, 3, 1, "", "setLazyAnnotator"], [141, 3, 1, "", "setMultiClass"], [141, 3, 1, "", "setOutputCol"], [141, 3, 1, "", "setParamValue"], [141, 3, 1, "", "setParams"], [141, 2, 1, "", "skipLPInputColsValidation"], [141, 3, 1, "", "transform"], [141, 2, 1, "", "uid"], [141, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation": [[143, 0, 0, "-", "finance_encoder_decoder"], [144, 0, 0, "-", "finance_qa"], [145, 0, 0, "-", "finance_summarizer"], [146, 0, 0, "-", "finance_text_generator"], [148, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[143, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[143, 2, 1, "", "batchSize"], [143, 3, 1, "", "clear"], [143, 2, 1, "", "configProtoBytes"], [143, 3, 1, "", "copy"], [143, 2, 1, "", "doSample"], [143, 3, 1, "", "explainParam"], [143, 3, 1, "", "explainParams"], [143, 3, 1, "", "extractParamMap"], [143, 3, 1, "", "getBatchSize"], [143, 3, 1, "", "getInputCols"], [143, 3, 1, "", "getLazyAnnotator"], [143, 3, 1, "", "getOrDefault"], [143, 3, 1, "", "getOutputCol"], [143, 3, 1, "", "getParam"], [143, 3, 1, "", "getParamValue"], [143, 2, 1, "", "getter_attrs"], [143, 3, 1, "", "hasDefault"], [143, 3, 1, "", "hasParam"], [143, 2, 1, "", "ignoreTokenIds"], [143, 2, 1, "", "inputAnnotatorTypes"], [143, 2, 1, "", "inputCols"], [143, 3, 1, "", "inputColsValidation"], [143, 3, 1, "", "isDefined"], [143, 3, 1, "", "isSet"], [143, 2, 1, "", "lazyAnnotator"], [143, 3, 1, "", "load"], [143, 2, 1, "", "maxNewTokens"], [143, 2, 1, "", "maxTextLength"], [143, 2, 1, "", "mlFrameworkType"], [143, 2, 1, "", "name"], [143, 2, 1, "", "noRepeatNgramSize"], [143, 2, 1, "", "optionalInputAnnotatorTypes"], [143, 2, 1, "", "outputAnnotatorType"], [143, 2, 1, "", "outputCol"], [143, 2, 1, "", "randomSeed"], [143, 3, 1, "", "read"], [143, 2, 1, "", "refineChunkSize"], [143, 2, 1, "", "refineMaxAttempts"], [143, 2, 1, "", "refineSummary"], [143, 2, 1, "", "refineSummaryTargetLength"], [143, 3, 1, "", "save"], [143, 3, 1, "", "set"], [143, 3, 1, "", "setBatchSize"], [143, 3, 1, "", "setConfigProtoBytes"], [143, 3, 1, "", "setDoSample"], [143, 3, 1, "", "setForceInputTypeValidation"], [143, 3, 1, "", "setIgnoreTokenIds"], [143, 3, 1, "", "setInputCols"], [143, 3, 1, "", "setLazyAnnotator"], [143, 3, 1, "", "setMaxNewTokens"], [143, 3, 1, "", "setMaxTextLength"], [143, 3, 1, "", "setNoRepeatNgramSize"], [143, 3, 1, "", "setOutputCol"], [143, 3, 1, "", "setParamValue"], [143, 3, 1, "", "setParams"], [143, 3, 1, "", "setRandomSeed"], [143, 3, 1, "", "setRefineChunkSize"], [143, 3, 1, "", "setRefineMaxAttempts"], [143, 3, 1, "", "setRefineSummary"], [143, 3, 1, "", "setRefineSummaryTargetLength"], [143, 3, 1, "", "setStopAtEos"], [143, 3, 1, "", "setTopK"], [143, 2, 1, "", "skipLPInputColsValidation"], [143, 2, 1, "", "stopAtEos"], [143, 2, 1, "", "task"], [143, 2, 1, "", "topK"], [143, 3, 1, "", "transform"], [143, 2, 1, "", "uid"], [143, 2, 1, "", "useCache"], [143, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[144, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[144, 2, 1, "", "batchSize"], [144, 3, 1, "", "clear"], [144, 2, 1, "", "configProtoBytes"], [144, 3, 1, "", "copy"], [144, 2, 1, "", "customPrompt"], [144, 2, 1, "", "doSample"], [144, 3, 1, "", "explainParam"], [144, 3, 1, "", "explainParams"], [144, 3, 1, "", "extractParamMap"], [144, 3, 1, "", "getBatchSize"], [144, 3, 1, "", "getInputCols"], [144, 3, 1, "", "getLazyAnnotator"], [144, 3, 1, "", "getOrDefault"], [144, 3, 1, "", "getOutputCol"], [144, 3, 1, "", "getParam"], [144, 3, 1, "", "getParamValue"], [144, 3, 1, "", "getQuestionTypes"], [144, 2, 1, "", "getter_attrs"], [144, 3, 1, "", "hasDefault"], [144, 3, 1, "", "hasParam"], [144, 2, 1, "", "ignoreTokenIds"], [144, 2, 1, "", "inputAnnotatorTypes"], [144, 2, 1, "", "inputCols"], [144, 3, 1, "", "inputColsValidation"], [144, 3, 1, "", "isDefined"], [144, 3, 1, "", "isSet"], [144, 2, 1, "", "lazyAnnotator"], [144, 3, 1, "", "load"], [144, 3, 1, "", "loadMedicalTextGenerator"], [144, 3, 1, "", "loadSavedModel"], [144, 2, 1, "", "maxContextLength"], [144, 2, 1, "", "maxNewTokens"], [144, 2, 1, "", "mlFrameworkType"], [144, 2, 1, "", "modelType"], [144, 2, 1, "", "name"], [144, 2, 1, "", "noRepeatNgramSize"], [144, 2, 1, "", "optionalInputAnnotatorTypes"], [144, 2, 1, "", "outputAnnotatorType"], [144, 2, 1, "", "outputCol"], [144, 3, 1, "", "pretrained"], [144, 2, 1, "", "questionType"], [144, 3, 1, "", "read"], [144, 3, 1, "", "save"], [144, 3, 1, "", "set"], [144, 3, 1, "", "setBatchSize"], [144, 3, 1, "", "setConfigProtoBytes"], [144, 3, 1, "", "setCustomPrompt"], [144, 3, 1, "", "setDoSample"], [144, 3, 1, "", "setForceInputTypeValidation"], [144, 3, 1, "", "setIgnoreTokenIds"], [144, 3, 1, "", "setInputCols"], [144, 3, 1, "", "setLazyAnnotator"], [144, 3, 1, "", "setMaxContextLength"], [144, 3, 1, "", "setMaxNewTokens"], [144, 3, 1, "", "setNoRepeatNgramSize"], [144, 3, 1, "", "setOutputCol"], [144, 3, 1, "", "setParamValue"], [144, 3, 1, "", "setParams"], [144, 3, 1, "", "setQuestionAnswerTerminals"], [144, 3, 1, "", "setQuestionPrompts"], [144, 3, 1, "", "setQuestionSkipLastToken"], [144, 3, 1, "", "setQuestionType"], [144, 3, 1, "", "setRandomSeed"], [144, 3, 1, "", "setTopK"], [144, 3, 1, "", "setUseCache"], [144, 2, 1, "", "skipLPInputColsValidation"], [144, 2, 1, "", "topK"], [144, 3, 1, "", "transform"], [144, 2, 1, "", "uid"], [144, 2, 1, "", "useCache"], [144, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[145, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[145, 2, 1, "", "batchSize"], [145, 3, 1, "", "clear"], [145, 2, 1, "", "configProtoBytes"], [145, 3, 1, "", "copy"], [145, 2, 1, "", "doSample"], [145, 3, 1, "", "explainParam"], [145, 3, 1, "", "explainParams"], [145, 3, 1, "", "extractParamMap"], [145, 3, 1, "", "getBatchSize"], [145, 3, 1, "", "getInputCols"], [145, 3, 1, "", "getLazyAnnotator"], [145, 3, 1, "", "getOrDefault"], [145, 3, 1, "", "getOutputCol"], [145, 3, 1, "", "getParam"], [145, 3, 1, "", "getParamValue"], [145, 2, 1, "", "getter_attrs"], [145, 3, 1, "", "hasDefault"], [145, 3, 1, "", "hasParam"], [145, 2, 1, "", "ignoreTokenIds"], [145, 2, 1, "", "inputAnnotatorTypes"], [145, 2, 1, "", "inputCols"], [145, 3, 1, "", "inputColsValidation"], [145, 3, 1, "", "isDefined"], [145, 3, 1, "", "isSet"], [145, 2, 1, "", "lazyAnnotator"], [145, 3, 1, "", "load"], [145, 3, 1, "", "loadSavedModel"], [145, 2, 1, "", "maxNewTokens"], [145, 2, 1, "", "maxTextLength"], [145, 2, 1, "", "mlFrameworkType"], [145, 2, 1, "", "name"], [145, 2, 1, "", "noRepeatNgramSize"], [145, 2, 1, "", "optionalInputAnnotatorTypes"], [145, 2, 1, "", "outputAnnotatorType"], [145, 2, 1, "", "outputCol"], [145, 3, 1, "", "pretrained"], [145, 2, 1, "", "randomSeed"], [145, 3, 1, "", "read"], [145, 2, 1, "", "refineChunkSize"], [145, 2, 1, "", "refineMaxAttempts"], [145, 2, 1, "", "refineSummary"], [145, 2, 1, "", "refineSummaryTargetLength"], [145, 3, 1, "", "save"], [145, 3, 1, "", "set"], [145, 3, 1, "", "setBatchSize"], [145, 3, 1, "", "setConfigProtoBytes"], [145, 3, 1, "", "setDoSample"], [145, 3, 1, "", "setForceInputTypeValidation"], [145, 3, 1, "", "setIgnoreTokenIds"], [145, 3, 1, "", "setInputCols"], [145, 3, 1, "", "setLazyAnnotator"], [145, 3, 1, "", "setMaxNewTokens"], [145, 3, 1, "", "setMaxTextLength"], [145, 3, 1, "", "setNoRepeatNgramSize"], [145, 3, 1, "", "setOutputCol"], [145, 3, 1, "", "setParamValue"], [145, 3, 1, "", "setParams"], [145, 3, 1, "", "setRandomSeed"], [145, 3, 1, "", "setRefineChunkSize"], [145, 3, 1, "", "setRefineMaxAttempts"], [145, 3, 1, "", "setRefineSummary"], [145, 3, 1, "", "setRefineSummaryTargetLength"], [145, 3, 1, "", "setStopAtEos"], [145, 3, 1, "", "setTopK"], [145, 2, 1, "", "skipLPInputColsValidation"], [145, 2, 1, "", "stopAtEos"], [145, 2, 1, "", "task"], [145, 2, 1, "", "topK"], [145, 3, 1, "", "transform"], [145, 2, 1, "", "uid"], [145, 2, 1, "", "useCache"], [145, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[146, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[146, 2, 1, "", "batchSize"], [146, 3, 1, "", "clear"], [146, 2, 1, "", "configProtoBytes"], [146, 3, 1, "", "copy"], [146, 2, 1, "", "customPrompt"], [146, 2, 1, "", "doSample"], [146, 3, 1, "", "explainParam"], [146, 3, 1, "", "explainParams"], [146, 3, 1, "", "extractParamMap"], [146, 3, 1, "", "getAdditionalTokens"], [146, 3, 1, "", "getBatchSize"], [146, 3, 1, "", "getInputCols"], [146, 3, 1, "", "getLazyAnnotator"], [146, 3, 1, "", "getOrDefault"], [146, 3, 1, "", "getOutputCol"], [146, 3, 1, "", "getParam"], [146, 3, 1, "", "getParamValue"], [146, 2, 1, "", "getter_attrs"], [146, 3, 1, "", "hasDefault"], [146, 3, 1, "", "hasParam"], [146, 2, 1, "", "ignoreTokenIds"], [146, 2, 1, "", "inputAnnotatorTypes"], [146, 2, 1, "", "inputCols"], [146, 3, 1, "", "inputColsValidation"], [146, 3, 1, "", "isDefined"], [146, 3, 1, "", "isSet"], [146, 2, 1, "", "lazyAnnotator"], [146, 3, 1, "", "load"], [146, 3, 1, "", "loadSavedModel"], [146, 2, 1, "", "maxContextLength"], [146, 2, 1, "", "maxNewTokens"], [146, 2, 1, "", "maxTextLength"], [146, 2, 1, "", "mlFrameworkType"], [146, 2, 1, "", "modelType"], [146, 2, 1, "", "name"], [146, 2, 1, "", "noRepeatNgramSize"], [146, 2, 1, "", "optionalInputAnnotatorTypes"], [146, 2, 1, "", "outputAnnotatorType"], [146, 2, 1, "", "outputCol"], [146, 3, 1, "", "pretrained"], [146, 3, 1, "", "read"], [146, 3, 1, "", "save"], [146, 3, 1, "", "set"], [146, 3, 1, "", "setAdditionalTokens"], [146, 3, 1, "", "setBatchSize"], [146, 3, 1, "", "setConfigProtoBytes"], [146, 3, 1, "", "setCustomPrompt"], [146, 3, 1, "", "setDoSample"], [146, 3, 1, "", "setForceInputTypeValidation"], [146, 3, 1, "", "setIgnoreTokenIds"], [146, 3, 1, "", "setInputCols"], [146, 3, 1, "", "setLazyAnnotator"], [146, 3, 1, "", "setMaxContextLength"], [146, 3, 1, "", "setMaxNewTokens"], [146, 3, 1, "", "setMaxTextLength"], [146, 3, 1, "", "setNoRepeatNgramSize"], [146, 3, 1, "", "setOutputCol"], [146, 3, 1, "", "setParamValue"], [146, 3, 1, "", "setParams"], [146, 3, 1, "", "setRandomSeed"], [146, 3, 1, "", "setStopAtEos"], [146, 3, 1, "", "setTopK"], [146, 3, 1, "", "setUseCache"], [146, 2, 1, "", "skipLPInputColsValidation"], [146, 2, 1, "", "stopAtEos"], [146, 2, 1, "", "topK"], [146, 3, 1, "", "transform"], [146, 2, 1, "", "uid"], [146, 2, 1, "", "useCache"], [146, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[148, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator": [[148, 3, 1, "", "clear"], [148, 3, 1, "", "copy"], [148, 2, 1, "", "entities1"], [148, 2, 1, "", "entities2"], [148, 3, 1, "", "explainParam"], [148, 3, 1, "", "explainParams"], [148, 3, 1, "", "extractParamMap"], [148, 3, 1, "", "getInputCols"], [148, 3, 1, "", "getLazyAnnotator"], [148, 3, 1, "", "getOrDefault"], [148, 3, 1, "", "getOutputCol"], [148, 3, 1, "", "getParam"], [148, 3, 1, "", "getParamValue"], [148, 2, 1, "", "getter_attrs"], [148, 3, 1, "", "hasDefault"], [148, 3, 1, "", "hasParam"], [148, 2, 1, "", "inputAnnotatorTypes"], [148, 2, 1, "", "inputCols"], [148, 3, 1, "", "inputColsValidation"], [148, 3, 1, "", "isDefined"], [148, 3, 1, "", "isSet"], [148, 2, 1, "", "lazyAnnotator"], [148, 3, 1, "", "load"], [148, 2, 1, "", "name"], [148, 2, 1, "", "optionalInputAnnotatorTypes"], [148, 2, 1, "", "outputAnnotatorType"], [148, 2, 1, "", "outputCol"], [148, 2, 1, "", "questionMark"], [148, 2, 1, "", "questionPronoun"], [148, 3, 1, "", "read"], [148, 3, 1, "", "save"], [148, 3, 1, "", "set"], [148, 3, 1, "", "setEntities1"], [148, 3, 1, "", "setEntities2"], [148, 3, 1, "", "setForceInputTypeValidation"], [148, 3, 1, "", "setInputCols"], [148, 3, 1, "", "setLazyAnnotator"], [148, 3, 1, "", "setOutputCol"], [148, 3, 1, "", "setParamValue"], [148, 3, 1, "", "setParams"], [148, 3, 1, "", "setQuestionMark"], [148, 3, 1, "", "setQuestionPronoun"], [148, 3, 1, "", "setStrategyType"], [148, 2, 1, "", "skipLPInputColsValidation"], [148, 2, 1, "", "strategyType"], [148, 3, 1, "", "transform"], [148, 2, 1, "", "uid"], [148, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification": [[152, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[150, 0, 0, "-", "finance_bert_for_token_classifier"], [151, 0, 0, "-", "finance_ner"], [153, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[150, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[150, 2, 1, "", "caseSensitive"], [150, 3, 1, "", "clear"], [150, 2, 1, "", "configProtoBytes"], [150, 3, 1, "", "copy"], [150, 3, 1, "", "explainParam"], [150, 3, 1, "", "explainParams"], [150, 3, 1, "", "extractParamMap"], [150, 3, 1, "", "getCaseSensitive"], [150, 3, 1, "", "getClasses"], [150, 3, 1, "", "getInputCols"], [150, 3, 1, "", "getLazyAnnotator"], [150, 3, 1, "", "getOrDefault"], [150, 3, 1, "", "getOutputCol"], [150, 3, 1, "", "getParam"], [150, 3, 1, "", "getParamValue"], [150, 2, 1, "", "getter_attrs"], [150, 3, 1, "", "hasDefault"], [150, 3, 1, "", "hasParam"], [150, 2, 1, "", "inputAnnotatorTypes"], [150, 2, 1, "", "inputCols"], [150, 3, 1, "", "inputColsValidation"], [150, 3, 1, "", "isDefined"], [150, 3, 1, "", "isSet"], [150, 2, 1, "", "lazyAnnotator"], [150, 3, 1, "", "load"], [150, 3, 1, "", "loadSavedModel"], [150, 3, 1, "", "loadSavedModelOpenSource"], [150, 2, 1, "", "maxSentenceLength"], [150, 2, 1, "", "name"], [150, 2, 1, "", "optionalInputAnnotatorTypes"], [150, 2, 1, "", "outputAnnotatorType"], [150, 2, 1, "", "outputCol"], [150, 3, 1, "", "pretrained"], [150, 3, 1, "", "read"], [150, 3, 1, "", "save"], [150, 3, 1, "", "set"], [150, 3, 1, "", "setCaseSensitive"], [150, 3, 1, "", "setConfigProtoBytes"], [150, 3, 1, "", "setForceInputTypeValidation"], [150, 3, 1, "", "setInputCols"], [150, 3, 1, "", "setLazyAnnotator"], [150, 3, 1, "", "setMaxSentenceLength"], [150, 3, 1, "", "setOutputCol"], [150, 3, 1, "", "setParamValue"], [150, 3, 1, "", "setParams"], [150, 2, 1, "", "skipLPInputColsValidation"], [150, 3, 1, "", "transform"], [150, 2, 1, "", "uid"], [150, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[151, 1, 1, "", "FinanceNerApproach"], [151, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach": [[151, 2, 1, "", "batchSize"], [151, 3, 1, "", "clear"], [151, 2, 1, "", "configProtoBytes"], [151, 3, 1, "", "copy"], [151, 2, 1, "", "datasetInfo"], [151, 2, 1, "", "dropout"], [151, 2, 1, "", "earlyStoppingCriterion"], [151, 2, 1, "", "earlyStoppingPatience"], [151, 2, 1, "", "enableMemoryOptimizer"], [151, 2, 1, "", "enableOutputLogs"], [151, 2, 1, "", "engine"], [151, 2, 1, "", "entities"], [151, 2, 1, "", "evaluationLogExtended"], [151, 3, 1, "", "explainParam"], [151, 3, 1, "", "explainParams"], [151, 3, 1, "", "extractParamMap"], [151, 3, 1, "", "fit"], [151, 3, 1, "", "fitMultiple"], [151, 3, 1, "", "getEngine"], [151, 3, 1, "", "getInputCols"], [151, 3, 1, "", "getLabelColumn"], [151, 3, 1, "", "getLazyAnnotator"], [151, 3, 1, "", "getOrDefault"], [151, 3, 1, "", "getOutputCol"], [151, 3, 1, "", "getParam"], [151, 3, 1, "", "getParamValue"], [151, 2, 1, "", "getter_attrs"], [151, 2, 1, "", "graphFile"], [151, 2, 1, "", "graphFolder"], [151, 3, 1, "", "hasDefault"], [151, 3, 1, "", "hasParam"], [151, 2, 1, "", "includeAllConfidenceScores"], [151, 2, 1, "", "includeConfidence"], [151, 2, 1, "", "inputAnnotatorTypes"], [151, 2, 1, "", "inputCols"], [151, 3, 1, "", "inputColsValidation"], [151, 3, 1, "", "isDefined"], [151, 3, 1, "", "isSet"], [151, 2, 1, "", "labelColumn"], [151, 2, 1, "", "lazyAnnotator"], [151, 3, 1, "", "load"], [151, 2, 1, "", "logPrefix"], [151, 2, 1, "", "lr"], [151, 2, 1, "", "maxEpochs"], [151, 2, 1, "", "minEpochs"], [151, 2, 1, "", "optionalInputAnnotatorTypes"], [151, 2, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "outputCol"], [151, 2, 1, "", "outputLogsPath"], [151, 2, 1, "", "overrideExistingTags"], [151, 2, 1, "", "po"], [151, 2, 1, "", "pretrainedModelPath"], [151, 2, 1, "", "randomSeed"], [151, 2, 1, "", "randomValidationSplitPerEpoch"], [151, 3, 1, "", "read"], [151, 3, 1, "", "save"], [151, 2, 1, "", "sentenceTokenIndex"], [151, 3, 1, "", "set"], [151, 3, 1, "", "setBatchSize"], [151, 3, 1, "", "setConfigProtoBytes"], [151, 3, 1, "", "setDatasetInfo"], [151, 3, 1, "", "setDoExceptionHandling"], [151, 3, 1, "", "setDropout"], [151, 3, 1, "", "setEarlyStoppingCriterion"], [151, 3, 1, "", "setEarlyStoppingPatience"], [151, 3, 1, "", "setEnableMemoryOptimizer"], [151, 3, 1, "", "setEnableOutputLogs"], [151, 3, 1, "", "setEntities"], [151, 3, 1, "", "setEvaluationLogExtended"], [151, 3, 1, "", "setForceInputTypeValidation"], [151, 3, 1, "", "setGraphFile"], [151, 3, 1, "", "setGraphFolder"], [151, 3, 1, "", "setIncludeAllConfidenceScores"], [151, 3, 1, "", "setIncludeConfidence"], [151, 3, 1, "", "setInputCols"], [151, 3, 1, "", "setLabelColumn"], [151, 3, 1, "", "setLazyAnnotator"], [151, 3, 1, "", "setLogPrefix"], [151, 3, 1, "", "setLr"], [151, 3, 1, "", "setMaxEpochs"], [151, 3, 1, "", "setMinEpochs"], [151, 3, 1, "", "setOutputCol"], [151, 3, 1, "", "setOutputLogsPath"], [151, 3, 1, "", "setOverrideExistingTags"], [151, 3, 1, "", "setParamValue"], [151, 3, 1, "", "setPo"], [151, 3, 1, "", "setPretrainedModelPath"], [151, 3, 1, "", "setRandomSeed"], [151, 3, 1, "", "setRandomValidationSplitPerEpoch"], [151, 3, 1, "", "setSentenceTokenIndex"], [151, 3, 1, "", "setTagsMapping"], [151, 3, 1, "", "setTestDataset"], [151, 3, 1, "", "setUseBestModel"], [151, 3, 1, "", "setUseContrib"], [151, 3, 1, "", "setValidationSplit"], [151, 3, 1, "", "setVerbose"], [151, 2, 1, "", "skipLPInputColsValidation"], [151, 2, 1, "", "testDataset"], [151, 2, 1, "", "uc"], [151, 2, 1, "", "uid"], [151, 2, 1, "", "useBestModel"], [151, 2, 1, "", "useContrib"], [151, 2, 1, "", "validationSplit"], [151, 2, 1, "", "verbose"], [151, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[151, 2, 1, "", "classes"], [151, 3, 1, "", "clear"], [151, 2, 1, "", "configProtoBytes"], [151, 3, 1, "", "copy"], [151, 2, 1, "", "datasetInfo"], [151, 2, 1, "", "doExceptionHandling"], [151, 3, 1, "", "explainParam"], [151, 3, 1, "", "explainParams"], [151, 3, 1, "", "extractParamMap"], [151, 3, 1, "", "getClasses"], [151, 3, 1, "", "getInputCols"], [151, 3, 1, "", "getLazyAnnotator"], [151, 3, 1, "", "getOrDefault"], [151, 3, 1, "", "getOutputCol"], [151, 3, 1, "", "getParam"], [151, 3, 1, "", "getParamValue"], [151, 3, 1, "", "getStorageRef"], [151, 3, 1, "", "getTrainingClassDistribution"], [151, 2, 1, "", "getter_attrs"], [151, 3, 1, "", "hasDefault"], [151, 3, 1, "", "hasParam"], [151, 2, 1, "", "includeAllConfidenceScores"], [151, 2, 1, "", "includeConfidence"], [151, 2, 1, "", "inferenceBatchSize"], [151, 2, 1, "", "inputAnnotatorTypes"], [151, 2, 1, "", "inputCols"], [151, 3, 1, "", "inputColsValidation"], [151, 3, 1, "", "isDefined"], [151, 3, 1, "", "isSet"], [151, 2, 1, "", "labelCasing"], [151, 2, 1, "", "lazyAnnotator"], [151, 3, 1, "", "load"], [151, 3, 1, "", "loadSavedModel"], [151, 2, 1, "", "name"], [151, 2, 1, "", "optionalInputAnnotatorTypes"], [151, 2, 1, "", "outputAnnotatorType"], [151, 2, 1, "", "outputCol"], [151, 3, 1, "", "pretrained"], [151, 3, 1, "", "read"], [151, 3, 1, "", "save"], [151, 2, 1, "", "sentenceTokenIndex"], [151, 3, 1, "", "set"], [151, 3, 1, "", "setConfigProtoBytes"], [151, 3, 1, "", "setDatasetInfo"], [151, 3, 1, "", "setForceInputTypeValidation"], [151, 3, 1, "", "setIncludeConfidence"], [151, 3, 1, "", "setInferenceBatchSize"], [151, 3, 1, "", "setInputCols"], [151, 3, 1, "", "setLabelCasing"], [151, 3, 1, "", "setLazyAnnotator"], [151, 3, 1, "", "setOutputCol"], [151, 3, 1, "", "setParamValue"], [151, 3, 1, "", "setParams"], [151, 3, 1, "", "setSentenceTokenIndex"], [151, 3, 1, "", "setStorageRef"], [151, 2, 1, "", "skipLPInputColsValidation"], [151, 2, 1, "", "storageRef"], [151, 2, 1, "", "trainingClassDistribution"], [151, 3, 1, "", "transform"], [151, 2, 1, "", "uid"], [151, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[153, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[153, 2, 1, "", "batchSize"], [153, 2, 1, "", "caseSensitive"], [153, 3, 1, "", "clear"], [153, 2, 1, "", "coalesceSentences"], [153, 2, 1, "", "configProtoBytes"], [153, 3, 1, "", "copy"], [153, 2, 1, "", "engine"], [153, 3, 1, "", "explainParam"], [153, 3, 1, "", "explainParams"], [153, 3, 1, "", "extractParamMap"], [153, 3, 1, "", "getBatchSize"], [153, 3, 1, "", "getCaseSensitive"], [153, 3, 1, "", "getClasses"], [153, 3, 1, "", "getEngine"], [153, 3, 1, "", "getInputCols"], [153, 3, 1, "", "getLazyAnnotator"], [153, 3, 1, "", "getMaxSentenceLength"], [153, 3, 1, "", "getOrDefault"], [153, 3, 1, "", "getOutputCol"], [153, 3, 1, "", "getParam"], [153, 3, 1, "", "getParamValue"], [153, 2, 1, "", "getter_attrs"], [153, 3, 1, "", "hasDefault"], [153, 3, 1, "", "hasParam"], [153, 2, 1, "", "ignoreEntities"], [153, 2, 1, "", "inputAnnotatorTypes"], [153, 2, 1, "", "inputCols"], [153, 3, 1, "", "inputColsValidation"], [153, 3, 1, "", "isDefined"], [153, 3, 1, "", "isSet"], [153, 2, 1, "", "lazyAnnotator"], [153, 3, 1, "", "load"], [153, 3, 1, "", "loadSavedModel"], [153, 2, 1, "", "maxSentenceLength"], [153, 2, 1, "", "max_length_limit"], [153, 2, 1, "", "name"], [153, 2, 1, "", "optionalInputAnnotatorTypes"], [153, 2, 1, "", "outputAnnotatorType"], [153, 2, 1, "", "outputCol"], [153, 2, 1, "", "predictionThreshold"], [153, 3, 1, "", "pretrained"], [153, 3, 1, "", "read"], [153, 3, 1, "", "save"], [153, 3, 1, "", "set"], [153, 3, 1, "", "setBatchSize"], [153, 3, 1, "", "setCaseSensitive"], [153, 3, 1, "", "setConfigProtoBytes"], [153, 3, 1, "", "setEntityDefinitions"], [153, 3, 1, "", "setInputCols"], [153, 3, 1, "", "setLazyAnnotator"], [153, 3, 1, "", "setMaxSentenceLength"], [153, 3, 1, "", "setOutputCol"], [153, 3, 1, "", "setParamValue"], [153, 3, 1, "", "setParams"], [153, 3, 1, "", "setPredictionThreshold"], [153, 3, 1, "", "transform"], [153, 2, 1, "", "uid"], [153, 3, 1, "", "write"]], "sparknlp_jsl.functions": [[154, 5, 1, "", "profile"], [154, 5, 1, "", "profileESRDV21Y19"], [154, 5, 1, "", "profileRxHCCV05Y20"], [154, 5, 1, "", "profileRxHCCV05Y21"], [154, 5, 1, "", "profileRxHCCV05Y22"], [154, 5, 1, "", "profileRxHCCV05Y23"], [154, 5, 1, "", "profileRxHCCV08Y22"], [154, 5, 1, "", "profileRxHCCV08Y23"], [154, 5, 1, "", "profileV22"], [154, 5, 1, "", "profileV22Y17"], [154, 5, 1, "", "profileV22Y18"], [154, 5, 1, "", "profileV22Y19"], [154, 5, 1, "", "profileV22Y20"], [154, 5, 1, "", "profileV22Y21"], [154, 5, 1, "", "profileV22Y22"], [154, 5, 1, "", "profileV23"], [154, 5, 1, "", "profileV23Y18"], [154, 5, 1, "", "profileV23Y19"], [154, 5, 1, "", "profileV24"], [154, 5, 1, "", "profileV24Y19"], [154, 5, 1, "", "profileV24Y20"], [154, 5, 1, "", "profileV24Y21"], [154, 5, 1, "", "profileV24Y22"], [154, 5, 1, "", "profileV28"], [154, 5, 1, "", "profileV28Y24"]], "sparknlp_jsl.internal": [[156, 5, 1, "", "CustomLabels"], [156, 5, 1, "", "EntityWeights"], [156, 5, 1, "", "RelationalCategories"], [156, 5, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[162, 0, 0, "-", "chunk_classification"], [167, 0, 0, "-", "graph"], [172, 0, 0, "-", "sequence_classification"], [177, 0, 0, "-", "sequence_generation"], [183, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[158, 0, 0, "-", "assertion"], [161, 0, 0, "-", "deid"], [165, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[157, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[157, 1, 1, "", "AssertionDLApproach"], [157, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach": [[157, 2, 1, "", "batchSize"], [157, 3, 1, "", "clear"], [157, 2, 1, "", "configProtoBytes"], [157, 3, 1, "", "copy"], [157, 2, 1, "", "datasetInfo"], [157, 2, 1, "", "doExceptionHandling"], [157, 2, 1, "", "dropout"], [157, 2, 1, "", "enableOutputLogs"], [157, 2, 1, "", "endCol"], [157, 2, 1, "", "engine"], [157, 2, 1, "", "epochs"], [157, 3, 1, "", "explainParam"], [157, 3, 1, "", "explainParams"], [157, 3, 1, "", "extractParamMap"], [157, 3, 1, "", "fit"], [157, 3, 1, "", "fitMultiple"], [157, 3, 1, "", "getEngine"], [157, 3, 1, "", "getInputCols"], [157, 3, 1, "", "getLazyAnnotator"], [157, 3, 1, "", "getOrDefault"], [157, 3, 1, "", "getOutputCol"], [157, 3, 1, "", "getParam"], [157, 3, 1, "", "getParamValue"], [157, 2, 1, "", "getter_attrs"], [157, 2, 1, "", "graphFile"], [157, 2, 1, "", "graphFolder"], [157, 3, 1, "", "hasDefault"], [157, 3, 1, "", "hasParam"], [157, 2, 1, "", "includeConfidence"], [157, 2, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "inputCols"], [157, 3, 1, "", "inputColsValidation"], [157, 3, 1, "", "isDefined"], [157, 3, 1, "", "isSet"], [157, 2, 1, "", "label"], [157, 2, 1, "", "lazyAnnotator"], [157, 2, 1, "", "learningRate"], [157, 3, 1, "", "load"], [157, 2, 1, "", "maxSentLen"], [157, 2, 1, "", "optionalInputAnnotatorTypes"], [157, 2, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "outputCol"], [157, 2, 1, "", "outputLogsPath"], [157, 3, 1, "", "read"], [157, 3, 1, "", "save"], [157, 2, 1, "", "scopeWindow"], [157, 3, 1, "", "set"], [157, 3, 1, "", "setBatchSize"], [157, 3, 1, "", "setConfigProtoBytes"], [157, 3, 1, "", "setDatasetInfo"], [157, 3, 1, "", "setDoExceptionHandling"], [157, 3, 1, "", "setDropout"], [157, 3, 1, "", "setEnableOutputLogs"], [157, 3, 1, "", "setEndCol"], [157, 3, 1, "", "setEpochs"], [157, 3, 1, "", "setForceInputTypeValidation"], [157, 3, 1, "", "setGraphFile"], [157, 3, 1, "", "setGraphFolder"], [157, 3, 1, "", "setIncludeConfidence"], [157, 3, 1, "", "setInputCols"], [157, 3, 1, "", "setLabelCol"], [157, 3, 1, "", "setLazyAnnotator"], [157, 3, 1, "", "setLearningRate"], [157, 3, 1, "", "setMaxSentLen"], [157, 3, 1, "", "setOutputCol"], [157, 3, 1, "", "setOutputLogsPath"], [157, 3, 1, "", "setParamValue"], [157, 3, 1, "", "setScopeWindow"], [157, 3, 1, "", "setStartCol"], [157, 3, 1, "", "setTestDataset"], [157, 3, 1, "", "setValidationSplit"], [157, 3, 1, "", "setVerbose"], [157, 2, 1, "", "skipLPInputColsValidation"], [157, 2, 1, "", "startCol"], [157, 2, 1, "", "testDataset"], [157, 2, 1, "", "uid"], [157, 2, 1, "", "validationSplit"], [157, 2, 1, "", "verbose"], [157, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[157, 2, 1, "", "classes"], [157, 3, 1, "", "clear"], [157, 2, 1, "", "configProtoBytes"], [157, 3, 1, "", "copy"], [157, 2, 1, "", "datasetInfo"], [157, 2, 1, "", "entityAssertionCaseSensitive"], [157, 3, 1, "", "explainParam"], [157, 3, 1, "", "explainParams"], [157, 3, 1, "", "extractParamMap"], [157, 3, 1, "", "getEntityAssertion"], [157, 3, 1, "", "getInputCols"], [157, 3, 1, "", "getLazyAnnotator"], [157, 3, 1, "", "getOrDefault"], [157, 3, 1, "", "getOutputCol"], [157, 3, 1, "", "getParam"], [157, 3, 1, "", "getParamValue"], [157, 3, 1, "", "getReplaceLabels"], [157, 3, 1, "", "getStorageRef"], [157, 2, 1, "", "getter_attrs"], [157, 3, 1, "", "hasDefault"], [157, 3, 1, "", "hasParam"], [157, 2, 1, "", "includeConfidence"], [157, 2, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "inputCols"], [157, 3, 1, "", "inputColsValidation"], [157, 3, 1, "", "isDefined"], [157, 3, 1, "", "isSet"], [157, 2, 1, "", "lazyAnnotator"], [157, 3, 1, "", "load"], [157, 2, 1, "", "maxSentLen"], [157, 2, 1, "", "name"], [157, 2, 1, "", "optionalInputAnnotatorTypes"], [157, 2, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "outputCol"], [157, 3, 1, "", "pretrained"], [157, 3, 1, "", "read"], [157, 3, 1, "", "save"], [157, 2, 1, "", "scopeWindow"], [157, 3, 1, "", "set"], [157, 3, 1, "", "setConfigProtoBytes"], [157, 3, 1, "", "setDatasetInfo"], [157, 3, 1, "", "setEntityAssertion"], [157, 3, 1, "", "setEntityAssertionCaseSensitive"], [157, 3, 1, "", "setForceInputTypeValidation"], [157, 3, 1, "", "setIncludeConfidence"], [157, 3, 1, "", "setInputCols"], [157, 3, 1, "", "setLazyAnnotator"], [157, 3, 1, "", "setOutputCol"], [157, 3, 1, "", "setParamValue"], [157, 3, 1, "", "setParams"], [157, 3, 1, "", "setReplaceLabels"], [157, 3, 1, "", "setScopeWindow"], [157, 3, 1, "", "setStorageRef"], [157, 2, 1, "", "skipLPInputColsValidation"], [157, 2, 1, "", "storageRef"], [157, 2, 1, "", "targetNerLabels"], [157, 3, 1, "", "transform"], [157, 2, 1, "", "uid"], [157, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.deid": [[159, 0, 0, "-", "deIdentification"], [160, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[159, 1, 1, "", "DeIdentification"], [159, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[159, 2, 1, "", "ageRanges"], [159, 2, 1, "", "ageRangesByHipaa"], [159, 2, 1, "", "blackList"], [159, 2, 1, "", "blackListEntities"], [159, 3, 1, "", "clear"], [159, 2, 1, "", "combineRegexPatterns"], [159, 2, 1, "", "consistentObfuscation"], [159, 3, 1, "", "copy"], [159, 2, 1, "", "dateFormats"], [159, 2, 1, "", "dateTag"], [159, 2, 1, "", "dateToYear"], [159, 2, 1, "", "days"], [159, 2, 1, "", "doExceptionHandling"], [159, 2, 1, "", "entityCasingModesPath"], [159, 3, 1, "", "explainParam"], [159, 3, 1, "", "explainParams"], [159, 3, 1, "", "extractParamMap"], [159, 3, 1, "", "fit"], [159, 3, 1, "", "fitMultiple"], [159, 2, 1, "", "fixedMaskLength"], [159, 2, 1, "", "genderAwareness"], [159, 3, 1, "", "getBlackList"], [159, 3, 1, "", "getInputCols"], [159, 3, 1, "", "getLazyAnnotator"], [159, 3, 1, "", "getOrDefault"], [159, 3, 1, "", "getOutputCol"], [159, 3, 1, "", "getParam"], [159, 3, 1, "", "getParamValue"], [159, 3, 1, "", "getSameLengthFormattedEntities"], [159, 3, 1, "", "getUseShiftDays"], [159, 2, 1, "", "getter_attrs"], [159, 3, 1, "", "hasDefault"], [159, 3, 1, "", "hasParam"], [159, 2, 1, "", "ignoreRegex"], [159, 2, 1, "", "inputAnnotatorTypes"], [159, 2, 1, "", "inputCols"], [159, 3, 1, "", "inputColsValidation"], [159, 3, 1, "", "isDefined"], [159, 2, 1, "", "isRandomDateDisplacement"], [159, 3, 1, "", "isSet"], [159, 2, 1, "", "keepYear"], [159, 2, 1, "", "language"], [159, 2, 1, "", "lazyAnnotator"], [159, 3, 1, "", "load"], [159, 2, 1, "", "mappingsColumn"], [159, 2, 1, "", "maskingPolicy"], [159, 2, 1, "", "metadataMaskingPolicy"], [159, 2, 1, "", "minYear"], [159, 2, 1, "", "mode"], [159, 2, 1, "", "name"], [159, 2, 1, "", "obfuscateByAgeGroups"], [159, 2, 1, "", "obfuscateDate"], [159, 2, 1, "", "obfuscateRefFile"], [159, 2, 1, "", "obfuscateRefSource"], [159, 2, 1, "", "obfuscationStrategyOnException"], [159, 2, 1, "", "optionalInputAnnotatorTypes"], [159, 2, 1, "", "outputAnnotatorType"], [159, 2, 1, "", "outputAsDocument"], [159, 2, 1, "", "outputCol"], [159, 3, 1, "", "read"], [159, 2, 1, "", "refFileFormat"], [159, 2, 1, "", "refSep"], [159, 2, 1, "", "regexOverride"], [159, 2, 1, "", "regexPatternsDictionary"], [159, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [159, 2, 1, "", "region"], [159, 2, 1, "", "returnEntityMappings"], [159, 2, 1, "", "sameEntityThreshold"], [159, 2, 1, "", "sameLengthFormattedEntities"], [159, 3, 1, "", "save"], [159, 2, 1, "", "seed"], [159, 2, 1, "", "selectiveObfuscationModesPath"], [159, 3, 1, "", "set"], [159, 3, 1, "", "setAgeGroups"], [159, 3, 1, "", "setAgeRanges"], [159, 3, 1, "", "setAgeRangesByHipaa"], [159, 3, 1, "", "setBlackList"], [159, 3, 1, "", "setBlackListEntities"], [159, 3, 1, "", "setCombineRegexPatterns"], [159, 3, 1, "", "setConsistentObfuscation"], [159, 3, 1, "", "setDateFormats"], [159, 3, 1, "", "setDateTag"], [159, 3, 1, "", "setDateToYear"], [159, 3, 1, "", "setDays"], [159, 3, 1, "", "setDoExceptionHandling"], [159, 3, 1, "", "setEntityCasingModes"], [159, 3, 1, "", "setFixedMaskLength"], [159, 3, 1, "", "setForceInputTypeValidation"], [159, 3, 1, "", "setGenderAwareness"], [159, 3, 1, "", "setIgnoreRegex"], [159, 3, 1, "", "setInputCols"], [159, 3, 1, "", "setIsRandomDateDisplacement"], [159, 3, 1, "", "setKeepYear"], [159, 3, 1, "", "setLanguage"], [159, 3, 1, "", "setLazyAnnotator"], [159, 3, 1, "", "setMappingsColumn"], [159, 3, 1, "", "setMaskingPolicy"], [159, 3, 1, "", "setMetadataMaskingPolicy"], [159, 3, 1, "", "setMinYear"], [159, 3, 1, "", "setMode"], [159, 3, 1, "", "setObfuscateByAgeGroups"], [159, 3, 1, "", "setObfuscateDate"], [159, 3, 1, "", "setObfuscateRefFile"], [159, 3, 1, "", "setObfuscateRefSource"], [159, 3, 1, "", "setObfuscationStrategyOnException"], [159, 3, 1, "", "setOutputAsDocument"], [159, 3, 1, "", "setOutputCol"], [159, 3, 1, "", "setParamValue"], [159, 3, 1, "", "setRefFileFormat"], [159, 3, 1, "", "setRefSep"], [159, 3, 1, "", "setRegexOverride"], [159, 3, 1, "", "setRegexPatternsDictionary"], [159, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [159, 3, 1, "", "setRegion"], [159, 3, 1, "", "setReturnEntityMappings"], [159, 3, 1, "", "setSameEntityThreshold"], [159, 3, 1, "", "setSameLengthFormattedEntities"], [159, 3, 1, "", "setSeed"], [159, 3, 1, "", "setSelectiveObfuscationModes"], [159, 3, 1, "", "setUnnormalizedDateMode"], [159, 3, 1, "", "setUseShifDays"], [159, 3, 1, "", "setUseShiftDays"], [159, 3, 1, "", "setZipCodeTag"], [159, 2, 1, "", "skipLPInputColsValidation"], [159, 2, 1, "", "uid"], [159, 2, 1, "", "unnormalizedDateMode"], [159, 2, 1, "", "useShifDays"], [159, 3, 1, "", "write"], [159, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[159, 2, 1, "", "ageRanges"], [159, 2, 1, "", "ageRangesByHipaa"], [159, 2, 1, "", "blackList"], [159, 2, 1, "", "blackListEntities"], [159, 3, 1, "", "clear"], [159, 2, 1, "", "consistentObfuscation"], [159, 3, 1, "", "copy"], [159, 2, 1, "", "dateFormats"], [159, 2, 1, "", "dateTag"], [159, 2, 1, "", "dateToYear"], [159, 2, 1, "", "days"], [159, 2, 1, "", "doExceptionHandling"], [159, 3, 1, "", "explainParam"], [159, 3, 1, "", "explainParams"], [159, 3, 1, "", "extractParamMap"], [159, 2, 1, "", "fixedMaskLength"], [159, 2, 1, "", "genderAwareness"], [159, 3, 1, "", "getBlackList"], [159, 3, 1, "", "getInputCols"], [159, 3, 1, "", "getLazyAnnotator"], [159, 3, 1, "", "getOrDefault"], [159, 3, 1, "", "getOutputCol"], [159, 3, 1, "", "getParam"], [159, 3, 1, "", "getParamValue"], [159, 3, 1, "", "getRegexEntities"], [159, 3, 1, "", "getSameLengthFormattedEntities"], [159, 3, 1, "", "getUseShiftDays"], [159, 2, 1, "", "getter_attrs"], [159, 3, 1, "", "hasDefault"], [159, 3, 1, "", "hasParam"], [159, 2, 1, "", "ignoreRegex"], [159, 2, 1, "", "inputAnnotatorTypes"], [159, 2, 1, "", "inputCols"], [159, 3, 1, "", "inputColsValidation"], [159, 3, 1, "", "isDefined"], [159, 2, 1, "", "isRandomDateDisplacement"], [159, 3, 1, "", "isSet"], [159, 2, 1, "", "keepYear"], [159, 2, 1, "", "language"], [159, 2, 1, "", "lazyAnnotator"], [159, 3, 1, "", "load"], [159, 2, 1, "", "mappingsColumn"], [159, 2, 1, "", "maskingPolicy"], [159, 2, 1, "", "metadataMaskingPolicy"], [159, 2, 1, "", "minYear"], [159, 2, 1, "", "mode"], [159, 2, 1, "", "name"], [159, 2, 1, "", "obfuscateByAgeGroups"], [159, 2, 1, "", "obfuscateDate"], [159, 2, 1, "", "obfuscateRefSource"], [159, 2, 1, "", "obfuscationStrategyOnException"], [159, 2, 1, "", "optionalInputAnnotatorTypes"], [159, 2, 1, "", "outputAnnotatorType"], [159, 2, 1, "", "outputAsDocument"], [159, 2, 1, "", "outputCol"], [159, 3, 1, "", "pretrained"], [159, 3, 1, "", "read"], [159, 2, 1, "", "regexEntities"], [159, 2, 1, "", "regexOverride"], [159, 2, 1, "", "region"], [159, 2, 1, "", "returnEntityMappings"], [159, 2, 1, "", "sameEntityThreshold"], [159, 2, 1, "", "sameLengthFormattedEntities"], [159, 3, 1, "", "save"], [159, 2, 1, "", "seed"], [159, 3, 1, "", "set"], [159, 3, 1, "", "setAgeGroups"], [159, 3, 1, "", "setAgeRanges"], [159, 3, 1, "", "setAgeRangesByHipaa"], [159, 3, 1, "", "setBlackList"], [159, 3, 1, "", "setBlackListEntities"], [159, 3, 1, "", "setConsistentObfuscation"], [159, 3, 1, "", "setDateFormats"], [159, 3, 1, "", "setDateTag"], [159, 3, 1, "", "setDateToYear"], [159, 3, 1, "", "setDays"], [159, 3, 1, "", "setDoExceptionHandling"], [159, 3, 1, "", "setFixedMaskLength"], [159, 3, 1, "", "setForceInputTypeValidation"], [159, 3, 1, "", "setGenderAwareness"], [159, 3, 1, "", "setIgnoreRegex"], [159, 3, 1, "", "setInputCols"], [159, 3, 1, "", "setIsRandomDateDisplacement"], [159, 3, 1, "", "setKeepYear"], [159, 3, 1, "", "setLanguage"], [159, 3, 1, "", "setLazyAnnotator"], [159, 3, 1, "", "setMappingsColumn"], [159, 3, 1, "", "setMaskingPolicy"], [159, 3, 1, "", "setMetadataMaskingPolicy"], [159, 3, 1, "", "setMinYear"], [159, 3, 1, "", "setMode"], [159, 3, 1, "", "setObfuscateByAgeGroups"], [159, 3, 1, "", "setObfuscateDate"], [159, 3, 1, "", "setObfuscateRefSource"], [159, 3, 1, "", "setObfuscationStrategyOnException"], [159, 3, 1, "", "setOutputAsDocument"], [159, 3, 1, "", "setOutputCol"], [159, 3, 1, "", "setParamValue"], [159, 3, 1, "", "setParams"], [159, 3, 1, "", "setRegexOverride"], [159, 3, 1, "", "setRegion"], [159, 3, 1, "", "setReturnEntityMappings"], [159, 3, 1, "", "setSameEntityThreshold"], [159, 3, 1, "", "setSameLengthFormattedEntities"], [159, 3, 1, "", "setSeed"], [159, 3, 1, "", "setUnnormalizedDateMode"], [159, 3, 1, "", "setUseShifDays"], [159, 3, 1, "", "setUseShiftDays"], [159, 3, 1, "", "setZipCodeTag"], [159, 2, 1, "", "skipLPInputColsValidation"], [159, 3, 1, "", "transform"], [159, 2, 1, "", "uid"], [159, 2, 1, "", "unnormalizedDateMode"], [159, 2, 1, "", "useShifDays"], [159, 3, 1, "", "write"], [159, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[160, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[160, 3, 1, "", "clear"], [160, 3, 1, "", "copy"], [160, 2, 1, "", "dateShiftColumn"], [160, 3, 1, "", "explainParam"], [160, 3, 1, "", "explainParams"], [160, 3, 1, "", "extractParamMap"], [160, 3, 1, "", "getInputCols"], [160, 3, 1, "", "getLazyAnnotator"], [160, 3, 1, "", "getOrDefault"], [160, 3, 1, "", "getOutputCol"], [160, 3, 1, "", "getParam"], [160, 3, 1, "", "getParamValue"], [160, 2, 1, "", "getter_attrs"], [160, 3, 1, "", "hasDefault"], [160, 3, 1, "", "hasParam"], [160, 2, 1, "", "inputAnnotatorTypes"], [160, 2, 1, "", "inputCols"], [160, 3, 1, "", "inputColsValidation"], [160, 3, 1, "", "isDefined"], [160, 3, 1, "", "isSet"], [160, 2, 1, "", "kwargs"], [160, 2, 1, "", "lazyAnnotator"], [160, 3, 1, "", "load"], [160, 2, 1, "", "name"], [160, 2, 1, "", "newDateShift"], [160, 2, 1, "", "optionalInputAnnotatorTypes"], [160, 2, 1, "", "outputAnnotatorType"], [160, 2, 1, "", "outputCol"], [160, 2, 1, "", "patientIdColumn"], [160, 2, 1, "", "rangeDays"], [160, 3, 1, "", "read"], [160, 3, 1, "", "save"], [160, 2, 1, "", "seed"], [160, 3, 1, "", "set"], [160, 3, 1, "", "setDateShiftColumn"], [160, 3, 1, "", "setIdColumn"], [160, 3, 1, "", "setInputCols"], [160, 3, 1, "", "setLazyAnnotator"], [160, 3, 1, "", "setNewDateShift"], [160, 3, 1, "", "setOutputCol"], [160, 3, 1, "", "setParamValue"], [160, 3, 1, "", "setParams"], [160, 3, 1, "", "setPatientIdColumn"], [160, 3, 1, "", "setRangeDays"], [160, 3, 1, "", "setSeed"], [160, 3, 1, "", "transform"], [160, 2, 1, "", "uid"], [160, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[163, 0, 0, "-", "chunkmapper"], [164, 0, 0, "-", "docmapper"], [166, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[163, 1, 1, "", "ChunkMapperApproach"], [163, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[163, 2, 1, "", "allowMultiTokenChunk"], [163, 3, 1, "", "clear"], [163, 3, 1, "", "copy"], [163, 2, 1, "", "dictionary"], [163, 2, 1, "", "doExceptionHandling"], [163, 2, 1, "", "enableCharFingerprintMatching"], [163, 2, 1, "", "enableFuzzyMatching"], [163, 2, 1, "", "enableTokenFingerprintMatching"], [163, 3, 1, "", "explainParam"], [163, 3, 1, "", "explainParams"], [163, 3, 1, "", "extractParamMap"], [163, 3, 1, "", "fit"], [163, 3, 1, "", "fitMultiple"], [163, 2, 1, "", "fuzzyDistanceScalingMode"], [163, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [163, 2, 1, "", "fuzzyMatchingDistances"], [163, 3, 1, "", "getInputCols"], [163, 3, 1, "", "getLazyAnnotator"], [163, 3, 1, "", "getOrDefault"], [163, 3, 1, "", "getOutputCol"], [163, 3, 1, "", "getParam"], [163, 3, 1, "", "getParamValue"], [163, 2, 1, "", "getter_attrs"], [163, 3, 1, "", "hasDefault"], [163, 3, 1, "", "hasParam"], [163, 2, 1, "", "inputAnnotatorTypes"], [163, 2, 1, "", "inputCols"], [163, 3, 1, "", "inputColsValidation"], [163, 3, 1, "", "isDefined"], [163, 3, 1, "", "isSet"], [163, 2, 1, "", "lazyAnnotator"], [163, 3, 1, "", "load"], [163, 2, 1, "", "lowerCase"], [163, 2, 1, "", "maxCharNgramFingerprint"], [163, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [163, 2, 1, "", "maxTokenNgramDroppingOperator"], [163, 2, 1, "", "maxTokenNgramDroppingTokens"], [163, 2, 1, "", "maxTokenNgramFingerprint"], [163, 2, 1, "", "minCharNgramFingerprint"], [163, 2, 1, "", "minTokenNgramFingerprint"], [163, 2, 1, "", "multivaluesRelations"], [163, 2, 1, "", "name"], [163, 2, 1, "", "optionalInputAnnotatorTypes"], [163, 2, 1, "", "outputAnnotatorType"], [163, 2, 1, "", "outputCol"], [163, 3, 1, "", "read"], [163, 2, 1, "", "rel"], [163, 2, 1, "", "rels"], [163, 3, 1, "", "save"], [163, 3, 1, "", "set"], [163, 3, 1, "", "setAllowMultiTokenChunk"], [163, 3, 1, "", "setDictionary"], [163, 3, 1, "", "setDoExceptionHandling"], [163, 3, 1, "", "setEnableCharFingerprintMatching"], [163, 3, 1, "", "setEnableFuzzyMatching"], [163, 3, 1, "", "setEnableTokenFingerprintMatching"], [163, 3, 1, "", "setForceInputTypeValidation"], [163, 3, 1, "", "setFuzzyDistanceScalingMode"], [163, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [163, 3, 1, "", "setFuzzyMatchingDistances"], [163, 3, 1, "", "setInputCols"], [163, 3, 1, "", "setLazyAnnotator"], [163, 3, 1, "", "setLowerCase"], [163, 3, 1, "", "setMaxCharNgramFingerprint"], [163, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [163, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [163, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [163, 3, 1, "", "setMaxTokenNgramFingerprint"], [163, 3, 1, "", "setMinCharNgramFingerprint"], [163, 3, 1, "", "setMinTokenNgramFingerprint"], [163, 3, 1, "", "setMultivaluesRelations"], [163, 3, 1, "", "setOutputCol"], [163, 3, 1, "", "setParamValue"], [163, 3, 1, "", "setRel"], [163, 3, 1, "", "setRels"], [163, 2, 1, "", "skipLPInputColsValidation"], [163, 2, 1, "", "uid"], [163, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[163, 2, 1, "", "allowMultiTokenChunk"], [163, 3, 1, "", "clear"], [163, 3, 1, "", "copy"], [163, 2, 1, "", "doExceptionHandling"], [163, 3, 1, "", "explainParam"], [163, 3, 1, "", "explainParams"], [163, 3, 1, "", "extractParamMap"], [163, 3, 1, "", "getInputCols"], [163, 3, 1, "", "getLazyAnnotator"], [163, 3, 1, "", "getOrDefault"], [163, 3, 1, "", "getOutputCol"], [163, 3, 1, "", "getParam"], [163, 3, 1, "", "getParamValue"], [163, 2, 1, "", "getter_attrs"], [163, 3, 1, "", "hasDefault"], [163, 3, 1, "", "hasParam"], [163, 2, 1, "", "inputAnnotatorTypes"], [163, 2, 1, "", "inputCols"], [163, 3, 1, "", "inputColsValidation"], [163, 3, 1, "", "isDefined"], [163, 3, 1, "", "isSet"], [163, 2, 1, "", "lazyAnnotator"], [163, 3, 1, "", "load"], [163, 2, 1, "", "lowerCase"], [163, 2, 1, "", "multivaluesRelations"], [163, 2, 1, "", "name"], [163, 2, 1, "", "optionalInputAnnotatorTypes"], [163, 2, 1, "", "outputAnnotatorType"], [163, 2, 1, "", "outputCol"], [163, 3, 1, "", "pretrained"], [163, 3, 1, "", "read"], [163, 2, 1, "", "rel"], [163, 2, 1, "", "rels"], [163, 3, 1, "", "save"], [163, 3, 1, "", "set"], [163, 3, 1, "", "setAllowMultiTokenChunk"], [163, 3, 1, "", "setDoExceptionHandling"], [163, 3, 1, "", "setForceInputTypeValidation"], [163, 3, 1, "", "setInputCols"], [163, 3, 1, "", "setLazyAnnotator"], [163, 3, 1, "", "setLowerCase"], [163, 3, 1, "", "setMultivaluesRelations"], [163, 3, 1, "", "setOutputCol"], [163, 3, 1, "", "setParamValue"], [163, 3, 1, "", "setParams"], [163, 3, 1, "", "setRel"], [163, 3, 1, "", "setRels"], [163, 2, 1, "", "skipLPInputColsValidation"], [163, 3, 1, "", "transform"], [163, 2, 1, "", "uid"], [163, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[164, 1, 1, "", "DocMapperApproach"], [164, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[164, 2, 1, "", "allowMultiTokenChunk"], [164, 3, 1, "", "clear"], [164, 3, 1, "", "copy"], [164, 2, 1, "", "dictionary"], [164, 2, 1, "", "doExceptionHandling"], [164, 2, 1, "", "enableCharFingerprintMatching"], [164, 2, 1, "", "enableFuzzyMatching"], [164, 2, 1, "", "enableTokenFingerprintMatching"], [164, 3, 1, "", "explainParam"], [164, 3, 1, "", "explainParams"], [164, 3, 1, "", "extractParamMap"], [164, 3, 1, "", "fit"], [164, 3, 1, "", "fitMultiple"], [164, 2, 1, "", "fuzzyDistanceScalingMode"], [164, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [164, 2, 1, "", "fuzzyMatchingDistances"], [164, 3, 1, "", "getInputCols"], [164, 3, 1, "", "getLazyAnnotator"], [164, 3, 1, "", "getOrDefault"], [164, 3, 1, "", "getOutputCol"], [164, 3, 1, "", "getParam"], [164, 3, 1, "", "getParamValue"], [164, 2, 1, "", "getter_attrs"], [164, 3, 1, "", "hasDefault"], [164, 3, 1, "", "hasParam"], [164, 2, 1, "", "inputAnnotatorTypes"], [164, 2, 1, "", "inputCols"], [164, 3, 1, "", "inputColsValidation"], [164, 3, 1, "", "isDefined"], [164, 3, 1, "", "isSet"], [164, 2, 1, "", "lazyAnnotator"], [164, 3, 1, "", "load"], [164, 2, 1, "", "lowerCase"], [164, 2, 1, "", "maxCharNgramFingerprint"], [164, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [164, 2, 1, "", "maxTokenNgramDroppingOperator"], [164, 2, 1, "", "maxTokenNgramDroppingTokens"], [164, 2, 1, "", "maxTokenNgramFingerprint"], [164, 2, 1, "", "minCharNgramFingerprint"], [164, 2, 1, "", "minTokenNgramFingerprint"], [164, 2, 1, "", "multivaluesRelations"], [164, 2, 1, "", "name"], [164, 2, 1, "", "optionalInputAnnotatorTypes"], [164, 2, 1, "", "outputAnnotatorType"], [164, 2, 1, "", "outputCol"], [164, 3, 1, "", "read"], [164, 2, 1, "", "rel"], [164, 2, 1, "", "rels"], [164, 3, 1, "", "save"], [164, 3, 1, "", "set"], [164, 3, 1, "", "setAllowMultiTokenChunk"], [164, 3, 1, "", "setDictionary"], [164, 3, 1, "", "setDoExceptionHandling"], [164, 3, 1, "", "setEnableCharFingerprintMatching"], [164, 3, 1, "", "setEnableFuzzyMatching"], [164, 3, 1, "", "setEnableTokenFingerprintMatching"], [164, 3, 1, "", "setForceInputTypeValidation"], [164, 3, 1, "", "setFuzzyDistanceScalingMode"], [164, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [164, 3, 1, "", "setFuzzyMatchingDistances"], [164, 3, 1, "", "setInputCols"], [164, 3, 1, "", "setLazyAnnotator"], [164, 3, 1, "", "setLowerCase"], [164, 3, 1, "", "setMaxCharNgramFingerprint"], [164, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [164, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [164, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [164, 3, 1, "", "setMaxTokenNgramFingerprint"], [164, 3, 1, "", "setMinCharNgramFingerprint"], [164, 3, 1, "", "setMinTokenNgramFingerprint"], [164, 3, 1, "", "setMultivaluesRelations"], [164, 3, 1, "", "setOutputCol"], [164, 3, 1, "", "setParamValue"], [164, 3, 1, "", "setRel"], [164, 3, 1, "", "setRels"], [164, 2, 1, "", "skipLPInputColsValidation"], [164, 2, 1, "", "uid"], [164, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[164, 2, 1, "", "allowMultiTokenChunk"], [164, 3, 1, "", "clear"], [164, 3, 1, "", "copy"], [164, 2, 1, "", "doExceptionHandling"], [164, 3, 1, "", "explainParam"], [164, 3, 1, "", "explainParams"], [164, 3, 1, "", "extractParamMap"], [164, 3, 1, "", "getInputCols"], [164, 3, 1, "", "getLazyAnnotator"], [164, 3, 1, "", "getOrDefault"], [164, 3, 1, "", "getOutputCol"], [164, 3, 1, "", "getParam"], [164, 3, 1, "", "getParamValue"], [164, 2, 1, "", "getter_attrs"], [164, 3, 1, "", "hasDefault"], [164, 3, 1, "", "hasParam"], [164, 2, 1, "", "inputAnnotatorTypes"], [164, 2, 1, "", "inputCols"], [164, 3, 1, "", "inputColsValidation"], [164, 3, 1, "", "isDefined"], [164, 3, 1, "", "isSet"], [164, 2, 1, "", "lazyAnnotator"], [164, 3, 1, "", "load"], [164, 2, 1, "", "lowerCase"], [164, 2, 1, "", "multivaluesRelations"], [164, 2, 1, "", "name"], [164, 2, 1, "", "optionalInputAnnotatorTypes"], [164, 2, 1, "", "outputAnnotatorType"], [164, 2, 1, "", "outputCol"], [164, 3, 1, "", "pretrained"], [164, 3, 1, "", "read"], [164, 2, 1, "", "rel"], [164, 2, 1, "", "rels"], [164, 3, 1, "", "save"], [164, 3, 1, "", "set"], [164, 3, 1, "", "setAllowMultiTokenChunk"], [164, 3, 1, "", "setDoExceptionHandling"], [164, 3, 1, "", "setForceInputTypeValidation"], [164, 3, 1, "", "setInputCols"], [164, 3, 1, "", "setLazyAnnotator"], [164, 3, 1, "", "setLowerCase"], [164, 3, 1, "", "setMultivaluesRelations"], [164, 3, 1, "", "setOutputCol"], [164, 3, 1, "", "setParamValue"], [164, 3, 1, "", "setParams"], [164, 3, 1, "", "setRel"], [164, 3, 1, "", "setRels"], [164, 2, 1, "", "skipLPInputColsValidation"], [164, 3, 1, "", "transform"], [164, 2, 1, "", "uid"], [164, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[166, 1, 1, "", "SentenceEntityResolverApproach"], [166, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[166, 2, 1, "", "aux_label_col"], [166, 2, 1, "", "caseSensitive"], [166, 3, 1, "", "clear"], [166, 2, 1, "", "confidenceFunction"], [166, 3, 1, "", "copy"], [166, 2, 1, "", "datasetInfo"], [166, 2, 1, "", "distanceFunction"], [166, 2, 1, "", "doExceptionHandling"], [166, 2, 1, "", "dropCodesList"], [166, 2, 1, "", "engine"], [166, 3, 1, "", "explainParam"], [166, 3, 1, "", "explainParams"], [166, 3, 1, "", "extractParamMap"], [166, 3, 1, "", "fit"], [166, 3, 1, "", "fitMultiple"], [166, 3, 1, "", "getCaseSensitive"], [166, 3, 1, "", "getEngine"], [166, 3, 1, "", "getInputCols"], [166, 3, 1, "", "getLazyAnnotator"], [166, 3, 1, "", "getOrDefault"], [166, 3, 1, "", "getOutputCol"], [166, 3, 1, "", "getParam"], [166, 3, 1, "", "getParamValue"], [166, 2, 1, "", "getter_attrs"], [166, 3, 1, "", "hasDefault"], [166, 3, 1, "", "hasParam"], [166, 2, 1, "", "inputAnnotatorTypes"], [166, 2, 1, "", "inputCols"], [166, 3, 1, "", "inputColsValidation"], [166, 3, 1, "", "isDefined"], [166, 3, 1, "", "isSet"], [166, 2, 1, "", "labelCol"], [166, 2, 1, "", "lazyAnnotator"], [166, 3, 1, "", "load"], [166, 2, 1, "", "missAsEmpty"], [166, 2, 1, "", "neighbours"], [166, 2, 1, "", "normalizedCol"], [166, 2, 1, "", "optionalInputAnnotatorTypes"], [166, 2, 1, "", "outputAnnotatorType"], [166, 2, 1, "", "outputCol"], [166, 2, 1, "", "overrideExistingCodes"], [166, 2, 1, "", "pretrainedModelPath"], [166, 3, 1, "", "read"], [166, 2, 1, "", "returnCosineDistances"], [166, 2, 1, "", "returnResolvedTextEmbeddings"], [166, 3, 1, "", "save"], [166, 3, 1, "", "set"], [166, 3, 1, "", "setAuxLabelCol"], [166, 3, 1, "", "setCaseSensitive"], [166, 3, 1, "", "setConfidenceFunction"], [166, 3, 1, "", "setDatasetInfo"], [166, 3, 1, "", "setDistanceFunction"], [166, 3, 1, "", "setDoExceptionHandling"], [166, 3, 1, "", "setDropCodesList"], [166, 3, 1, "", "setExtractCosineDistances"], [166, 3, 1, "", "setForceInputTypeValidation"], [166, 3, 1, "", "setInputCols"], [166, 3, 1, "", "setLabelCol"], [166, 3, 1, "", "setLazyAnnotator"], [166, 3, 1, "", "setMissAsEmpty"], [166, 3, 1, "", "setNeighbours"], [166, 3, 1, "", "setNormalizedCol"], [166, 3, 1, "", "setOutputCol"], [166, 3, 1, "", "setOverrideExistingCodes"], [166, 3, 1, "", "setParamValue"], [166, 3, 1, "", "setPretrainedModelPath"], [166, 3, 1, "", "setReturnResolvedTextEmbeddings"], [166, 3, 1, "", "setThreshold"], [166, 3, 1, "", "setUseAuxLabel"], [166, 2, 1, "", "skipLPInputColsValidation"], [166, 2, 1, "", "threshold"], [166, 2, 1, "", "uid"], [166, 2, 1, "", "useAuxLabel"], [166, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[166, 3, 1, "", "clear"], [166, 3, 1, "", "copy"], [166, 2, 1, "", "dimension"], [166, 3, 1, "", "explainParam"], [166, 3, 1, "", "explainParams"], [166, 3, 1, "", "extractParamMap"], [166, 3, 1, "", "getDimension"], [166, 3, 1, "", "getInputCols"], [166, 3, 1, "", "getLazyAnnotator"], [166, 3, 1, "", "getOrDefault"], [166, 3, 1, "", "getOutputCol"], [166, 3, 1, "", "getParam"], [166, 3, 1, "", "getParamValue"], [166, 2, 1, "", "getter_attrs"], [166, 3, 1, "", "hasDefault"], [166, 3, 1, "", "hasParam"], [166, 2, 1, "", "inputAnnotatorTypes"], [166, 2, 1, "", "inputCols"], [166, 3, 1, "", "inputColsValidation"], [166, 3, 1, "", "isDefined"], [166, 3, 1, "", "isSet"], [166, 2, 1, "", "lazyAnnotator"], [166, 3, 1, "", "load"], [166, 2, 1, "", "name"], [166, 2, 1, "", "optionalInputAnnotatorTypes"], [166, 2, 1, "", "outputAnnotatorType"], [166, 2, 1, "", "outputCol"], [166, 3, 1, "", "pretrained"], [166, 3, 1, "", "read"], [166, 2, 1, "", "returnCosineDistances"], [166, 3, 1, "", "save"], [166, 2, 1, "", "searchTree"], [166, 3, 1, "", "set"], [166, 3, 1, "", "setDimension"], [166, 3, 1, "", "setForceInputTypeValidation"], [166, 3, 1, "", "setInputCols"], [166, 3, 1, "", "setLazyAnnotator"], [166, 3, 1, "", "setOutputCol"], [166, 3, 1, "", "setParamValue"], [166, 3, 1, "", "setParams"], [166, 3, 1, "", "setSearchTree"], [166, 3, 1, "", "setUseAuxLabel"], [166, 2, 1, "", "skipLPInputColsValidation"], [166, 3, 1, "", "transform"], [166, 2, 1, "", "uid"], [166, 2, 1, "", "useAuxLabel"], [166, 3, 1, "", "write"]], "sparknlp_jsl.legal.graph": [[168, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[169, 0, 0, "-", "relation_extraction_dl"], [170, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[169, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[169, 2, 1, "", "batchSize"], [169, 2, 1, "", "classes"], [169, 3, 1, "", "clear"], [169, 3, 1, "", "copy"], [169, 2, 1, "", "customLabels"], [169, 2, 1, "", "doExceptionHandling"], [169, 3, 1, "", "explainParam"], [169, 3, 1, "", "explainParams"], [169, 3, 1, "", "extractParamMap"], [169, 3, 1, "", "getClasses"], [169, 3, 1, "", "getInputCols"], [169, 3, 1, "", "getLazyAnnotator"], [169, 3, 1, "", "getOrDefault"], [169, 3, 1, "", "getOutputCol"], [169, 3, 1, "", "getParam"], [169, 3, 1, "", "getParamValue"], [169, 3, 1, "", "getRelationTypePerPair"], [169, 2, 1, "", "getter_attrs"], [169, 3, 1, "", "hasDefault"], [169, 3, 1, "", "hasParam"], [169, 2, 1, "", "inputAnnotatorTypes"], [169, 2, 1, "", "inputCols"], [169, 3, 1, "", "inputColsValidation"], [169, 3, 1, "", "isDefined"], [169, 3, 1, "", "isSet"], [169, 2, 1, "", "lazyAnnotator"], [169, 3, 1, "", "load"], [169, 3, 1, "", "loadSavedModel"], [169, 2, 1, "", "name"], [169, 2, 1, "", "optionalInputAnnotatorTypes"], [169, 2, 1, "", "outputAnnotatorType"], [169, 2, 1, "", "outputCol"], [169, 2, 1, "", "predictionThreshold"], [169, 3, 1, "", "pretrained"], [169, 3, 1, "", "read"], [169, 2, 1, "", "relationPairsCaseSensitive"], [169, 3, 1, "", "save"], [169, 3, 1, "", "set"], [169, 3, 1, "", "setBatchSize"], [169, 3, 1, "", "setCaseSensitive"], [169, 3, 1, "", "setCustomLabels"], [169, 3, 1, "", "setDoExceptionHandling"], [169, 3, 1, "", "setForceInputTypeValidation"], [169, 3, 1, "", "setInputCols"], [169, 3, 1, "", "setLazyAnnotator"], [169, 3, 1, "", "setOutputCol"], [169, 3, 1, "", "setParamValue"], [169, 3, 1, "", "setParams"], [169, 3, 1, "", "setPredictionThreshold"], [169, 3, 1, "", "setRelationPairsCaseSensitive"], [169, 3, 1, "", "setRelationTypePerPair"], [169, 2, 1, "", "skipLPInputColsValidation"], [169, 3, 1, "", "transform"], [169, 2, 1, "", "uid"], [169, 3, 1, "", "write"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[170, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[170, 2, 1, "", "caseSensitive"], [170, 3, 1, "", "clear"], [170, 2, 1, "", "coalesceSentences"], [170, 2, 1, "", "configProtoBytes"], [170, 3, 1, "", "copy"], [170, 3, 1, "", "explainParam"], [170, 3, 1, "", "explainParams"], [170, 3, 1, "", "extractParamMap"], [170, 3, 1, "", "getCaseSensitive"], [170, 3, 1, "", "getClasses"], [170, 3, 1, "", "getInputCols"], [170, 3, 1, "", "getLazyAnnotator"], [170, 3, 1, "", "getOrDefault"], [170, 3, 1, "", "getOutputCol"], [170, 3, 1, "", "getParam"], [170, 3, 1, "", "getParamValue"], [170, 2, 1, "", "getter_attrs"], [170, 3, 1, "", "hasDefault"], [170, 3, 1, "", "hasParam"], [170, 2, 1, "", "inputAnnotatorTypes"], [170, 2, 1, "", "inputCols"], [170, 3, 1, "", "inputColsValidation"], [170, 3, 1, "", "isDefined"], [170, 3, 1, "", "isSet"], [170, 2, 1, "", "lazyAnnotator"], [170, 3, 1, "", "load"], [170, 3, 1, "", "loadSavedModel"], [170, 3, 1, "", "loadSavedModelOpenSource"], [170, 2, 1, "", "maxSentenceLength"], [170, 2, 1, "", "multiLabel"], [170, 2, 1, "", "name"], [170, 2, 1, "", "negativeRelationships"], [170, 2, 1, "", "optionalInputAnnotatorTypes"], [170, 2, 1, "", "outputAnnotatorType"], [170, 2, 1, "", "outputCol"], [170, 2, 1, "", "predictionThreshold"], [170, 3, 1, "", "pretrained"], [170, 3, 1, "", "read"], [170, 3, 1, "", "save"], [170, 3, 1, "", "set"], [170, 3, 1, "", "setCaseSensitive"], [170, 3, 1, "", "setCoalesceSentences"], [170, 3, 1, "", "setConfigProtoBytes"], [170, 3, 1, "", "setForceInputTypeValidation"], [170, 3, 1, "", "setInputCols"], [170, 3, 1, "", "setLazyAnnotator"], [170, 3, 1, "", "setMaxSentenceLength"], [170, 3, 1, "", "setNegativeRelationships"], [170, 3, 1, "", "setOutputCol"], [170, 3, 1, "", "setParamValue"], [170, 3, 1, "", "setParams"], [170, 3, 1, "", "setRelationalCategories"], [170, 2, 1, "", "skipLPInputColsValidation"], [170, 3, 1, "", "transform"], [170, 2, 1, "", "uid"], [170, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification": [[173, 0, 0, "-", "legal_bert_for_sequence_classification"], [174, 0, 0, "-", "legal_classifier_dl"], [175, 0, 0, "-", "legal_document_ml_classifier"], [176, 0, 0, "-", "legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[173, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[173, 2, 1, "", "caseSensitive"], [173, 3, 1, "", "clear"], [173, 2, 1, "", "coalesceSentences"], [173, 2, 1, "", "configProtoBytes"], [173, 3, 1, "", "copy"], [173, 3, 1, "", "explainParam"], [173, 3, 1, "", "explainParams"], [173, 3, 1, "", "extractParamMap"], [173, 3, 1, "", "getCaseSensitive"], [173, 3, 1, "", "getClasses"], [173, 3, 1, "", "getInputCols"], [173, 3, 1, "", "getLazyAnnotator"], [173, 3, 1, "", "getOrDefault"], [173, 3, 1, "", "getOutputCol"], [173, 3, 1, "", "getParam"], [173, 3, 1, "", "getParamValue"], [173, 2, 1, "", "getter_attrs"], [173, 3, 1, "", "hasDefault"], [173, 3, 1, "", "hasParam"], [173, 2, 1, "", "inputAnnotatorTypes"], [173, 2, 1, "", "inputCols"], [173, 3, 1, "", "inputColsValidation"], [173, 3, 1, "", "isDefined"], [173, 3, 1, "", "isSet"], [173, 2, 1, "", "lazyAnnotator"], [173, 3, 1, "", "load"], [173, 3, 1, "", "loadSavedModel"], [173, 3, 1, "", "loadSavedModelOpenSource"], [173, 2, 1, "", "maxSentenceLength"], [173, 2, 1, "", "name"], [173, 2, 1, "", "optionalInputAnnotatorTypes"], [173, 2, 1, "", "outputAnnotatorType"], [173, 2, 1, "", "outputCol"], [173, 3, 1, "", "pretrained"], [173, 3, 1, "", "read"], [173, 3, 1, "", "save"], [173, 3, 1, "", "set"], [173, 3, 1, "", "setCaseSensitive"], [173, 3, 1, "", "setCoalesceSentences"], [173, 3, 1, "", "setConfigProtoBytes"], [173, 3, 1, "", "setForceInputTypeValidation"], [173, 3, 1, "", "setInputCols"], [173, 3, 1, "", "setLazyAnnotator"], [173, 3, 1, "", "setMaxSentenceLength"], [173, 3, 1, "", "setOutputCol"], [173, 3, 1, "", "setParamValue"], [173, 3, 1, "", "setParams"], [173, 2, 1, "", "skipLPInputColsValidation"], [173, 3, 1, "", "transform"], [173, 2, 1, "", "uid"], [173, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[174, 1, 1, "", "LegalClassifierDLApproach"], [174, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach": [[174, 2, 1, "", "batchSize"], [174, 3, 1, "", "clear"], [174, 2, 1, "", "configProtoBytes"], [174, 3, 1, "", "copy"], [174, 2, 1, "", "dropout"], [174, 2, 1, "", "enableOutputLogs"], [174, 2, 1, "", "evaluationLogExtended"], [174, 3, 1, "", "explainParam"], [174, 3, 1, "", "explainParams"], [174, 3, 1, "", "extractParamMap"], [174, 3, 1, "", "fit"], [174, 3, 1, "", "fitMultiple"], [174, 3, 1, "", "getInputCols"], [174, 3, 1, "", "getLazyAnnotator"], [174, 3, 1, "", "getOrDefault"], [174, 3, 1, "", "getOutputCol"], [174, 3, 1, "", "getParam"], [174, 3, 1, "", "getParamValue"], [174, 2, 1, "", "getter_attrs"], [174, 3, 1, "", "hasDefault"], [174, 3, 1, "", "hasParam"], [174, 2, 1, "", "inputAnnotatorTypes"], [174, 2, 1, "", "inputCols"], [174, 3, 1, "", "inputColsValidation"], [174, 3, 1, "", "isDefined"], [174, 3, 1, "", "isSet"], [174, 2, 1, "", "labelColumn"], [174, 2, 1, "", "lazyAnnotator"], [174, 3, 1, "", "load"], [174, 2, 1, "", "lr"], [174, 2, 1, "", "maxEpochs"], [174, 2, 1, "", "optionalInputAnnotatorTypes"], [174, 2, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "outputCol"], [174, 2, 1, "", "outputLogsPath"], [174, 2, 1, "", "randomSeed"], [174, 3, 1, "", "read"], [174, 3, 1, "", "save"], [174, 3, 1, "", "set"], [174, 3, 1, "", "setBatchSize"], [174, 3, 1, "", "setConfigProtoBytes"], [174, 3, 1, "", "setDropout"], [174, 3, 1, "", "setEnableOutputLogs"], [174, 3, 1, "", "setEvaluationLogExtended"], [174, 3, 1, "", "setInputCols"], [174, 3, 1, "", "setLabelColumn"], [174, 3, 1, "", "setLazyAnnotator"], [174, 3, 1, "", "setLr"], [174, 3, 1, "", "setMaxEpochs"], [174, 3, 1, "", "setOutputCol"], [174, 3, 1, "", "setOutputLogsPath"], [174, 3, 1, "", "setParamValue"], [174, 3, 1, "", "setRandomSeed"], [174, 3, 1, "", "setTestDataset"], [174, 3, 1, "", "setValidationSplit"], [174, 3, 1, "", "setVerbose"], [174, 2, 1, "", "testDataset"], [174, 2, 1, "", "uid"], [174, 2, 1, "", "validationSplit"], [174, 2, 1, "", "verbose"], [174, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[174, 2, 1, "", "classes"], [174, 3, 1, "", "clear"], [174, 2, 1, "", "configProtoBytes"], [174, 3, 1, "", "copy"], [174, 2, 1, "", "engine"], [174, 3, 1, "", "explainParam"], [174, 3, 1, "", "explainParams"], [174, 3, 1, "", "extractParamMap"], [174, 3, 1, "", "getEngine"], [174, 3, 1, "", "getInputCols"], [174, 3, 1, "", "getLazyAnnotator"], [174, 3, 1, "", "getOrDefault"], [174, 3, 1, "", "getOutputCol"], [174, 3, 1, "", "getParam"], [174, 3, 1, "", "getParamValue"], [174, 3, 1, "", "getStorageRef"], [174, 2, 1, "", "getter_attrs"], [174, 3, 1, "", "hasDefault"], [174, 3, 1, "", "hasParam"], [174, 2, 1, "", "inputAnnotatorTypes"], [174, 2, 1, "", "inputCols"], [174, 3, 1, "", "inputColsValidation"], [174, 3, 1, "", "isDefined"], [174, 3, 1, "", "isSet"], [174, 2, 1, "", "lazyAnnotator"], [174, 3, 1, "", "load"], [174, 2, 1, "", "name"], [174, 2, 1, "", "optionalInputAnnotatorTypes"], [174, 2, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "outputCol"], [174, 3, 1, "", "pretrained"], [174, 3, 1, "", "read"], [174, 3, 1, "", "save"], [174, 3, 1, "", "set"], [174, 3, 1, "", "setConfigProtoBytes"], [174, 3, 1, "", "setInputCols"], [174, 3, 1, "", "setLazyAnnotator"], [174, 3, 1, "", "setOutputCol"], [174, 3, 1, "", "setParamValue"], [174, 3, 1, "", "setParams"], [174, 3, 1, "", "setStorageRef"], [174, 2, 1, "", "storageRef"], [174, 3, 1, "", "transform"], [174, 2, 1, "", "uid"], [174, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[175, 1, 1, "", "LegalDocumentMLClassifierApproach"], [175, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach": [[175, 2, 1, "", "classificationModelClass"], [175, 2, 1, "", "classificationModelPath"], [175, 3, 1, "", "clear"], [175, 3, 1, "", "copy"], [175, 3, 1, "", "explainParam"], [175, 3, 1, "", "explainParams"], [175, 3, 1, "", "extractParamMap"], [175, 3, 1, "", "fit"], [175, 2, 1, "", "fitIntercept"], [175, 3, 1, "", "fitMultiple"], [175, 3, 1, "", "getInputCols"], [175, 3, 1, "", "getLazyAnnotator"], [175, 3, 1, "", "getOrDefault"], [175, 3, 1, "", "getOutputCol"], [175, 3, 1, "", "getParam"], [175, 3, 1, "", "getParamValue"], [175, 2, 1, "", "getter_attrs"], [175, 3, 1, "", "hasDefault"], [175, 3, 1, "", "hasParam"], [175, 2, 1, "", "inputAnnotatorTypes"], [175, 2, 1, "", "inputCols"], [175, 3, 1, "", "inputColsValidation"], [175, 3, 1, "", "isDefined"], [175, 3, 1, "", "isSet"], [175, 2, 1, "", "labelCol"], [175, 2, 1, "", "labels"], [175, 2, 1, "", "lazyAnnotator"], [175, 3, 1, "", "load"], [175, 2, 1, "", "maxIter"], [175, 2, 1, "", "maxTokenNgram"], [175, 2, 1, "", "mergeChunks"], [175, 2, 1, "", "minTokenNgram"], [175, 2, 1, "", "optionalInputAnnotatorTypes"], [175, 2, 1, "", "outputAnnotatorType"], [175, 2, 1, "", "outputCol"], [175, 3, 1, "", "read"], [175, 3, 1, "", "save"], [175, 3, 1, "", "set"], [175, 3, 1, "", "setClassificationModelClass"], [175, 3, 1, "", "setClassificationModelPath"], [175, 3, 1, "", "setFitIntercept"], [175, 3, 1, "", "setForceInputTypeValidation"], [175, 3, 1, "", "setInputCols"], [175, 3, 1, "", "setLabelCol"], [175, 3, 1, "", "setLabels"], [175, 3, 1, "", "setLazyAnnotator"], [175, 3, 1, "", "setMaxIter"], [175, 3, 1, "", "setMaxTokenNgram"], [175, 3, 1, "", "setMergeChunks"], [175, 3, 1, "", "setMinTokenNgram"], [175, 3, 1, "", "setOutputCol"], [175, 3, 1, "", "setParamValue"], [175, 3, 1, "", "setTol"], [175, 3, 1, "", "setVectorizationModelPath"], [175, 2, 1, "", "skipLPInputColsValidation"], [175, 2, 1, "", "tol"], [175, 2, 1, "", "uid"], [175, 2, 1, "", "vectorizationModelPath"], [175, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[175, 2, 1, "", "classificationModel"], [175, 3, 1, "", "clear"], [175, 3, 1, "", "copy"], [175, 3, 1, "", "explainParam"], [175, 3, 1, "", "explainParams"], [175, 3, 1, "", "extractParamMap"], [175, 3, 1, "", "getInputCols"], [175, 3, 1, "", "getLazyAnnotator"], [175, 3, 1, "", "getOrDefault"], [175, 3, 1, "", "getOutputCol"], [175, 3, 1, "", "getParam"], [175, 3, 1, "", "getParamValue"], [175, 2, 1, "", "getter_attrs"], [175, 3, 1, "", "hasDefault"], [175, 3, 1, "", "hasParam"], [175, 2, 1, "", "inputAnnotatorTypes"], [175, 2, 1, "", "inputCols"], [175, 3, 1, "", "inputColsValidation"], [175, 3, 1, "", "isDefined"], [175, 3, 1, "", "isSet"], [175, 2, 1, "", "labels"], [175, 2, 1, "", "lazyAnnotator"], [175, 3, 1, "", "load"], [175, 2, 1, "", "maxTokenNgram"], [175, 2, 1, "", "mergeChunks"], [175, 2, 1, "", "minTokenNgram"], [175, 2, 1, "", "name"], [175, 2, 1, "", "optionalInputAnnotatorTypes"], [175, 2, 1, "", "outputAnnotatorType"], [175, 2, 1, "", "outputCol"], [175, 3, 1, "", "pretrained"], [175, 3, 1, "", "read"], [175, 3, 1, "", "save"], [175, 3, 1, "", "set"], [175, 3, 1, "", "setClassificationModel"], [175, 3, 1, "", "setForceInputTypeValidation"], [175, 3, 1, "", "setInputCols"], [175, 3, 1, "", "setLabels"], [175, 3, 1, "", "setLazyAnnotator"], [175, 3, 1, "", "setMergeChunks"], [175, 3, 1, "", "setOutputCol"], [175, 3, 1, "", "setParamValue"], [175, 3, 1, "", "setParams"], [175, 3, 1, "", "setVectorizationModel"], [175, 2, 1, "", "skipLPInputColsValidation"], [175, 3, 1, "", "transform"], [175, 2, 1, "", "uid"], [175, 2, 1, "", "vectorizationModel"], [175, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[176, 1, 1, "", "LegalFewShotClassifierApproach"], [176, 1, 1, "", "LegalFewShotClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach": [[176, 2, 1, "", "batchSize"], [176, 3, 1, "", "clear"], [176, 3, 1, "", "copy"], [176, 2, 1, "", "datasetInfo"], [176, 2, 1, "", "doExceptionHandling"], [176, 2, 1, "", "dropout"], [176, 2, 1, "", "engine"], [176, 2, 1, "", "epochsN"], [176, 3, 1, "", "explainParam"], [176, 3, 1, "", "explainParams"], [176, 3, 1, "", "extractParamMap"], [176, 2, 1, "", "featureScaling"], [176, 3, 1, "", "fit"], [176, 3, 1, "", "fitMultiple"], [176, 2, 1, "", "fixImbalance"], [176, 3, 1, "", "getEngine"], [176, 3, 1, "", "getInputCols"], [176, 3, 1, "", "getLazyAnnotator"], [176, 3, 1, "", "getOrDefault"], [176, 3, 1, "", "getOutputCol"], [176, 3, 1, "", "getParam"], [176, 3, 1, "", "getParamValue"], [176, 2, 1, "", "getter_attrs"], [176, 3, 1, "", "hasDefault"], [176, 3, 1, "", "hasParam"], [176, 2, 1, "", "inputAnnotatorTypes"], [176, 2, 1, "", "inputCols"], [176, 3, 1, "", "inputColsValidation"], [176, 3, 1, "", "isDefined"], [176, 3, 1, "", "isSet"], [176, 2, 1, "", "labelColumn"], [176, 2, 1, "", "lazyAnnotator"], [176, 2, 1, "", "learningRate"], [176, 3, 1, "", "load"], [176, 2, 1, "", "modelFile"], [176, 2, 1, "", "multiClass"], [176, 2, 1, "", "name"], [176, 2, 1, "", "optionalInputAnnotatorTypes"], [176, 2, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "outputCol"], [176, 2, 1, "", "outputLogsPath"], [176, 3, 1, "", "read"], [176, 3, 1, "", "save"], [176, 3, 1, "", "set"], [176, 3, 1, "", "setBatchSize"], [176, 3, 1, "", "setDatasetInfo"], [176, 3, 1, "", "setDoExceptionHandling"], [176, 3, 1, "", "setDropout"], [176, 3, 1, "", "setEpochsNumber"], [176, 3, 1, "", "setFeatureScaling"], [176, 3, 1, "", "setFixImbalance"], [176, 3, 1, "", "setForceInputTypeValidation"], [176, 3, 1, "", "setInputCols"], [176, 3, 1, "", "setLabelCol"], [176, 3, 1, "", "setLazyAnnotator"], [176, 3, 1, "", "setLearningRate"], [176, 3, 1, "", "setModelFile"], [176, 3, 1, "", "setMultiClass"], [176, 3, 1, "", "setOutputCol"], [176, 3, 1, "", "setOutputLogsPath"], [176, 3, 1, "", "setParamValue"], [176, 3, 1, "", "setValidationSplit"], [176, 2, 1, "", "skipLPInputColsValidation"], [176, 2, 1, "", "uid"], [176, 2, 1, "", "validationSplit"], [176, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel": [[176, 2, 1, "", "classes"], [176, 3, 1, "", "clear"], [176, 3, 1, "", "copy"], [176, 2, 1, "", "datasetInfo"], [176, 2, 1, "", "doExceptionHandling"], [176, 3, 1, "", "explainParam"], [176, 3, 1, "", "explainParams"], [176, 3, 1, "", "extractParamMap"], [176, 2, 1, "", "featureScaling"], [176, 3, 1, "", "getInputCols"], [176, 3, 1, "", "getLazyAnnotator"], [176, 3, 1, "", "getOrDefault"], [176, 3, 1, "", "getOutputCol"], [176, 3, 1, "", "getParam"], [176, 3, 1, "", "getParamValue"], [176, 2, 1, "", "getter_attrs"], [176, 3, 1, "", "hasDefault"], [176, 3, 1, "", "hasParam"], [176, 2, 1, "", "inputAnnotatorTypes"], [176, 2, 1, "", "inputCols"], [176, 3, 1, "", "inputColsValidation"], [176, 3, 1, "", "isDefined"], [176, 3, 1, "", "isSet"], [176, 2, 1, "", "lazyAnnotator"], [176, 3, 1, "", "load"], [176, 2, 1, "", "multiClass"], [176, 2, 1, "", "name"], [176, 2, 1, "", "optionalInputAnnotatorTypes"], [176, 2, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "outputCol"], [176, 3, 1, "", "pretrained"], [176, 3, 1, "", "read"], [176, 3, 1, "", "save"], [176, 3, 1, "", "set"], [176, 3, 1, "", "setDatasetInfo"], [176, 3, 1, "", "setDoExceptionHandling"], [176, 3, 1, "", "setFeatureScaling"], [176, 3, 1, "", "setForceInputTypeValidation"], [176, 3, 1, "", "setInputCols"], [176, 3, 1, "", "setLazyAnnotator"], [176, 3, 1, "", "setMultiClass"], [176, 3, 1, "", "setOutputCol"], [176, 3, 1, "", "setParamValue"], [176, 3, 1, "", "setParams"], [176, 2, 1, "", "skipLPInputColsValidation"], [176, 3, 1, "", "transform"], [176, 2, 1, "", "uid"], [176, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation": [[178, 0, 0, "-", "legal_encoder_decoder"], [179, 0, 0, "-", "legal_qa"], [180, 0, 0, "-", "legal_summarizer"], [181, 0, 0, "-", "legal_text_generator"], [182, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[178, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[178, 2, 1, "", "batchSize"], [178, 3, 1, "", "clear"], [178, 2, 1, "", "configProtoBytes"], [178, 3, 1, "", "copy"], [178, 2, 1, "", "doSample"], [178, 3, 1, "", "explainParam"], [178, 3, 1, "", "explainParams"], [178, 3, 1, "", "extractParamMap"], [178, 3, 1, "", "getBatchSize"], [178, 3, 1, "", "getInputCols"], [178, 3, 1, "", "getLazyAnnotator"], [178, 3, 1, "", "getOrDefault"], [178, 3, 1, "", "getOutputCol"], [178, 3, 1, "", "getParam"], [178, 3, 1, "", "getParamValue"], [178, 2, 1, "", "getter_attrs"], [178, 3, 1, "", "hasDefault"], [178, 3, 1, "", "hasParam"], [178, 2, 1, "", "ignoreTokenIds"], [178, 2, 1, "", "inputAnnotatorTypes"], [178, 2, 1, "", "inputCols"], [178, 3, 1, "", "inputColsValidation"], [178, 3, 1, "", "isDefined"], [178, 3, 1, "", "isSet"], [178, 2, 1, "", "lazyAnnotator"], [178, 3, 1, "", "load"], [178, 2, 1, "", "maxNewTokens"], [178, 2, 1, "", "maxTextLength"], [178, 2, 1, "", "mlFrameworkType"], [178, 2, 1, "", "name"], [178, 2, 1, "", "noRepeatNgramSize"], [178, 2, 1, "", "optionalInputAnnotatorTypes"], [178, 2, 1, "", "outputAnnotatorType"], [178, 2, 1, "", "outputCol"], [178, 2, 1, "", "randomSeed"], [178, 3, 1, "", "read"], [178, 2, 1, "", "refineChunkSize"], [178, 2, 1, "", "refineMaxAttempts"], [178, 2, 1, "", "refineSummary"], [178, 2, 1, "", "refineSummaryTargetLength"], [178, 3, 1, "", "save"], [178, 3, 1, "", "set"], [178, 3, 1, "", "setBatchSize"], [178, 3, 1, "", "setConfigProtoBytes"], [178, 3, 1, "", "setDoSample"], [178, 3, 1, "", "setForceInputTypeValidation"], [178, 3, 1, "", "setIgnoreTokenIds"], [178, 3, 1, "", "setInputCols"], [178, 3, 1, "", "setLazyAnnotator"], [178, 3, 1, "", "setMaxNewTokens"], [178, 3, 1, "", "setMaxTextLength"], [178, 3, 1, "", "setNoRepeatNgramSize"], [178, 3, 1, "", "setOutputCol"], [178, 3, 1, "", "setParamValue"], [178, 3, 1, "", "setParams"], [178, 3, 1, "", "setRandomSeed"], [178, 3, 1, "", "setRefineChunkSize"], [178, 3, 1, "", "setRefineMaxAttempts"], [178, 3, 1, "", "setRefineSummary"], [178, 3, 1, "", "setRefineSummaryTargetLength"], [178, 3, 1, "", "setStopAtEos"], [178, 3, 1, "", "setTopK"], [178, 2, 1, "", "skipLPInputColsValidation"], [178, 2, 1, "", "stopAtEos"], [178, 2, 1, "", "task"], [178, 2, 1, "", "topK"], [178, 3, 1, "", "transform"], [178, 2, 1, "", "uid"], [178, 2, 1, "", "useCache"], [178, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[179, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[179, 2, 1, "", "batchSize"], [179, 3, 1, "", "clear"], [179, 2, 1, "", "configProtoBytes"], [179, 3, 1, "", "copy"], [179, 2, 1, "", "customPrompt"], [179, 2, 1, "", "doSample"], [179, 3, 1, "", "explainParam"], [179, 3, 1, "", "explainParams"], [179, 3, 1, "", "extractParamMap"], [179, 3, 1, "", "getBatchSize"], [179, 3, 1, "", "getInputCols"], [179, 3, 1, "", "getLazyAnnotator"], [179, 3, 1, "", "getOrDefault"], [179, 3, 1, "", "getOutputCol"], [179, 3, 1, "", "getParam"], [179, 3, 1, "", "getParamValue"], [179, 3, 1, "", "getQuestionTypes"], [179, 2, 1, "", "getter_attrs"], [179, 3, 1, "", "hasDefault"], [179, 3, 1, "", "hasParam"], [179, 2, 1, "", "ignoreTokenIds"], [179, 2, 1, "", "inputAnnotatorTypes"], [179, 2, 1, "", "inputCols"], [179, 3, 1, "", "inputColsValidation"], [179, 3, 1, "", "isDefined"], [179, 3, 1, "", "isSet"], [179, 2, 1, "", "lazyAnnotator"], [179, 3, 1, "", "load"], [179, 3, 1, "", "loadMedicalTextGenerator"], [179, 3, 1, "", "loadSavedModel"], [179, 2, 1, "", "maxContextLength"], [179, 2, 1, "", "maxNewTokens"], [179, 2, 1, "", "mlFrameworkType"], [179, 2, 1, "", "modelType"], [179, 2, 1, "", "name"], [179, 2, 1, "", "noRepeatNgramSize"], [179, 2, 1, "", "optionalInputAnnotatorTypes"], [179, 2, 1, "", "outputAnnotatorType"], [179, 2, 1, "", "outputCol"], [179, 3, 1, "", "pretrained"], [179, 2, 1, "", "questionType"], [179, 3, 1, "", "read"], [179, 3, 1, "", "save"], [179, 3, 1, "", "set"], [179, 3, 1, "", "setBatchSize"], [179, 3, 1, "", "setConfigProtoBytes"], [179, 3, 1, "", "setCustomPrompt"], [179, 3, 1, "", "setDoSample"], [179, 3, 1, "", "setForceInputTypeValidation"], [179, 3, 1, "", "setIgnoreTokenIds"], [179, 3, 1, "", "setInputCols"], [179, 3, 1, "", "setLazyAnnotator"], [179, 3, 1, "", "setMaxContextLength"], [179, 3, 1, "", "setMaxNewTokens"], [179, 3, 1, "", "setNoRepeatNgramSize"], [179, 3, 1, "", "setOutputCol"], [179, 3, 1, "", "setParamValue"], [179, 3, 1, "", "setParams"], [179, 3, 1, "", "setQuestionAnswerTerminals"], [179, 3, 1, "", "setQuestionPrompts"], [179, 3, 1, "", "setQuestionSkipLastToken"], [179, 3, 1, "", "setQuestionType"], [179, 3, 1, "", "setRandomSeed"], [179, 3, 1, "", "setTopK"], [179, 3, 1, "", "setUseCache"], [179, 2, 1, "", "skipLPInputColsValidation"], [179, 2, 1, "", "topK"], [179, 3, 1, "", "transform"], [179, 2, 1, "", "uid"], [179, 2, 1, "", "useCache"], [179, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[180, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[180, 2, 1, "", "batchSize"], [180, 3, 1, "", "clear"], [180, 2, 1, "", "configProtoBytes"], [180, 3, 1, "", "copy"], [180, 2, 1, "", "doSample"], [180, 3, 1, "", "explainParam"], [180, 3, 1, "", "explainParams"], [180, 3, 1, "", "extractParamMap"], [180, 3, 1, "", "getBatchSize"], [180, 3, 1, "", "getInputCols"], [180, 3, 1, "", "getLazyAnnotator"], [180, 3, 1, "", "getOrDefault"], [180, 3, 1, "", "getOutputCol"], [180, 3, 1, "", "getParam"], [180, 3, 1, "", "getParamValue"], [180, 2, 1, "", "getter_attrs"], [180, 3, 1, "", "hasDefault"], [180, 3, 1, "", "hasParam"], [180, 2, 1, "", "ignoreTokenIds"], [180, 2, 1, "", "inputAnnotatorTypes"], [180, 2, 1, "", "inputCols"], [180, 3, 1, "", "inputColsValidation"], [180, 3, 1, "", "isDefined"], [180, 3, 1, "", "isSet"], [180, 2, 1, "", "lazyAnnotator"], [180, 3, 1, "", "load"], [180, 3, 1, "", "loadSavedModel"], [180, 2, 1, "", "maxNewTokens"], [180, 2, 1, "", "maxTextLength"], [180, 2, 1, "", "mlFrameworkType"], [180, 2, 1, "", "name"], [180, 2, 1, "", "noRepeatNgramSize"], [180, 2, 1, "", "optionalInputAnnotatorTypes"], [180, 2, 1, "", "outputAnnotatorType"], [180, 2, 1, "", "outputCol"], [180, 3, 1, "", "pretrained"], [180, 2, 1, "", "randomSeed"], [180, 3, 1, "", "read"], [180, 2, 1, "", "refineChunkSize"], [180, 2, 1, "", "refineMaxAttempts"], [180, 2, 1, "", "refineSummary"], [180, 2, 1, "", "refineSummaryTargetLength"], [180, 3, 1, "", "save"], [180, 3, 1, "", "set"], [180, 3, 1, "", "setBatchSize"], [180, 3, 1, "", "setConfigProtoBytes"], [180, 3, 1, "", "setDoSample"], [180, 3, 1, "", "setForceInputTypeValidation"], [180, 3, 1, "", "setIgnoreTokenIds"], [180, 3, 1, "", "setInputCols"], [180, 3, 1, "", "setLazyAnnotator"], [180, 3, 1, "", "setMaxNewTokens"], [180, 3, 1, "", "setMaxTextLength"], [180, 3, 1, "", "setNoRepeatNgramSize"], [180, 3, 1, "", "setOutputCol"], [180, 3, 1, "", "setParamValue"], [180, 3, 1, "", "setParams"], [180, 3, 1, "", "setRandomSeed"], [180, 3, 1, "", "setRefineChunkSize"], [180, 3, 1, "", "setRefineMaxAttempts"], [180, 3, 1, "", "setRefineSummary"], [180, 3, 1, "", "setRefineSummaryTargetLength"], [180, 3, 1, "", "setStopAtEos"], [180, 3, 1, "", "setTopK"], [180, 2, 1, "", "skipLPInputColsValidation"], [180, 2, 1, "", "stopAtEos"], [180, 2, 1, "", "task"], [180, 2, 1, "", "topK"], [180, 3, 1, "", "transform"], [180, 2, 1, "", "uid"], [180, 2, 1, "", "useCache"], [180, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[181, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[181, 2, 1, "", "batchSize"], [181, 3, 1, "", "clear"], [181, 2, 1, "", "configProtoBytes"], [181, 3, 1, "", "copy"], [181, 2, 1, "", "customPrompt"], [181, 2, 1, "", "doSample"], [181, 3, 1, "", "explainParam"], [181, 3, 1, "", "explainParams"], [181, 3, 1, "", "extractParamMap"], [181, 3, 1, "", "getAdditionalTokens"], [181, 3, 1, "", "getBatchSize"], [181, 3, 1, "", "getInputCols"], [181, 3, 1, "", "getLazyAnnotator"], [181, 3, 1, "", "getOrDefault"], [181, 3, 1, "", "getOutputCol"], [181, 3, 1, "", "getParam"], [181, 3, 1, "", "getParamValue"], [181, 2, 1, "", "getter_attrs"], [181, 3, 1, "", "hasDefault"], [181, 3, 1, "", "hasParam"], [181, 2, 1, "", "ignoreTokenIds"], [181, 2, 1, "", "inputAnnotatorTypes"], [181, 2, 1, "", "inputCols"], [181, 3, 1, "", "inputColsValidation"], [181, 3, 1, "", "isDefined"], [181, 3, 1, "", "isSet"], [181, 2, 1, "", "lazyAnnotator"], [181, 3, 1, "", "load"], [181, 3, 1, "", "loadSavedModel"], [181, 2, 1, "", "maxContextLength"], [181, 2, 1, "", "maxNewTokens"], [181, 2, 1, "", "maxTextLength"], [181, 2, 1, "", "mlFrameworkType"], [181, 2, 1, "", "modelType"], [181, 2, 1, "", "name"], [181, 2, 1, "", "noRepeatNgramSize"], [181, 2, 1, "", "optionalInputAnnotatorTypes"], [181, 2, 1, "", "outputAnnotatorType"], [181, 2, 1, "", "outputCol"], [181, 3, 1, "", "pretrained"], [181, 3, 1, "", "read"], [181, 3, 1, "", "save"], [181, 3, 1, "", "set"], [181, 3, 1, "", "setAdditionalTokens"], [181, 3, 1, "", "setBatchSize"], [181, 3, 1, "", "setConfigProtoBytes"], [181, 3, 1, "", "setCustomPrompt"], [181, 3, 1, "", "setDoSample"], [181, 3, 1, "", "setForceInputTypeValidation"], [181, 3, 1, "", "setIgnoreTokenIds"], [181, 3, 1, "", "setInputCols"], [181, 3, 1, "", "setLazyAnnotator"], [181, 3, 1, "", "setMaxContextLength"], [181, 3, 1, "", "setMaxNewTokens"], [181, 3, 1, "", "setMaxTextLength"], [181, 3, 1, "", "setNoRepeatNgramSize"], [181, 3, 1, "", "setOutputCol"], [181, 3, 1, "", "setParamValue"], [181, 3, 1, "", "setParams"], [181, 3, 1, "", "setRandomSeed"], [181, 3, 1, "", "setStopAtEos"], [181, 3, 1, "", "setTopK"], [181, 3, 1, "", "setUseCache"], [181, 2, 1, "", "skipLPInputColsValidation"], [181, 2, 1, "", "stopAtEos"], [181, 2, 1, "", "topK"], [181, 3, 1, "", "transform"], [181, 2, 1, "", "uid"], [181, 2, 1, "", "useCache"], [181, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[182, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator": [[182, 3, 1, "", "clear"], [182, 3, 1, "", "copy"], [182, 2, 1, "", "entities1"], [182, 2, 1, "", "entities2"], [182, 3, 1, "", "explainParam"], [182, 3, 1, "", "explainParams"], [182, 3, 1, "", "extractParamMap"], [182, 3, 1, "", "getInputCols"], [182, 3, 1, "", "getLazyAnnotator"], [182, 3, 1, "", "getOrDefault"], [182, 3, 1, "", "getOutputCol"], [182, 3, 1, "", "getParam"], [182, 3, 1, "", "getParamValue"], [182, 2, 1, "", "getter_attrs"], [182, 3, 1, "", "hasDefault"], [182, 3, 1, "", "hasParam"], [182, 2, 1, "", "inputAnnotatorTypes"], [182, 2, 1, "", "inputCols"], [182, 3, 1, "", "inputColsValidation"], [182, 3, 1, "", "isDefined"], [182, 3, 1, "", "isSet"], [182, 2, 1, "", "lazyAnnotator"], [182, 3, 1, "", "load"], [182, 2, 1, "", "name"], [182, 2, 1, "", "optionalInputAnnotatorTypes"], [182, 2, 1, "", "outputAnnotatorType"], [182, 2, 1, "", "outputCol"], [182, 2, 1, "", "questionMark"], [182, 2, 1, "", "questionPronoun"], [182, 3, 1, "", "read"], [182, 3, 1, "", "save"], [182, 3, 1, "", "set"], [182, 3, 1, "", "setEntities1"], [182, 3, 1, "", "setEntities2"], [182, 3, 1, "", "setForceInputTypeValidation"], [182, 3, 1, "", "setInputCols"], [182, 3, 1, "", "setLazyAnnotator"], [182, 3, 1, "", "setOutputCol"], [182, 3, 1, "", "setParamValue"], [182, 3, 1, "", "setParams"], [182, 3, 1, "", "setQuestionMark"], [182, 3, 1, "", "setQuestionPronoun"], [182, 3, 1, "", "setStrategyType"], [182, 2, 1, "", "skipLPInputColsValidation"], [182, 2, 1, "", "strategyType"], [182, 3, 1, "", "transform"], [182, 2, 1, "", "uid"], [182, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification": [[184, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[185, 0, 0, "-", "legal_bert_for_token_classifier"], [186, 0, 0, "-", "legal_ner"], [187, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[185, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[185, 2, 1, "", "caseSensitive"], [185, 3, 1, "", "clear"], [185, 2, 1, "", "configProtoBytes"], [185, 3, 1, "", "copy"], [185, 3, 1, "", "explainParam"], [185, 3, 1, "", "explainParams"], [185, 3, 1, "", "extractParamMap"], [185, 3, 1, "", "getCaseSensitive"], [185, 3, 1, "", "getClasses"], [185, 3, 1, "", "getInputCols"], [185, 3, 1, "", "getLazyAnnotator"], [185, 3, 1, "", "getOrDefault"], [185, 3, 1, "", "getOutputCol"], [185, 3, 1, "", "getParam"], [185, 3, 1, "", "getParamValue"], [185, 2, 1, "", "getter_attrs"], [185, 3, 1, "", "hasDefault"], [185, 3, 1, "", "hasParam"], [185, 2, 1, "", "inputAnnotatorTypes"], [185, 2, 1, "", "inputCols"], [185, 3, 1, "", "inputColsValidation"], [185, 3, 1, "", "isDefined"], [185, 3, 1, "", "isSet"], [185, 2, 1, "", "lazyAnnotator"], [185, 3, 1, "", "load"], [185, 3, 1, "", "loadSavedModel"], [185, 3, 1, "", "loadSavedModelOpenSource"], [185, 2, 1, "", "maxSentenceLength"], [185, 2, 1, "", "name"], [185, 2, 1, "", "optionalInputAnnotatorTypes"], [185, 2, 1, "", "outputAnnotatorType"], [185, 2, 1, "", "outputCol"], [185, 3, 1, "", "pretrained"], [185, 3, 1, "", "read"], [185, 3, 1, "", "save"], [185, 3, 1, "", "set"], [185, 3, 1, "", "setCaseSensitive"], [185, 3, 1, "", "setConfigProtoBytes"], [185, 3, 1, "", "setForceInputTypeValidation"], [185, 3, 1, "", "setInputCols"], [185, 3, 1, "", "setLazyAnnotator"], [185, 3, 1, "", "setMaxSentenceLength"], [185, 3, 1, "", "setOutputCol"], [185, 3, 1, "", "setParamValue"], [185, 3, 1, "", "setParams"], [185, 2, 1, "", "skipLPInputColsValidation"], [185, 3, 1, "", "transform"], [185, 2, 1, "", "uid"], [185, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[186, 1, 1, "", "LegalNerApproach"], [186, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach": [[186, 2, 1, "", "batchSize"], [186, 3, 1, "", "clear"], [186, 2, 1, "", "configProtoBytes"], [186, 3, 1, "", "copy"], [186, 2, 1, "", "datasetInfo"], [186, 2, 1, "", "dropout"], [186, 2, 1, "", "earlyStoppingCriterion"], [186, 2, 1, "", "earlyStoppingPatience"], [186, 2, 1, "", "enableMemoryOptimizer"], [186, 2, 1, "", "enableOutputLogs"], [186, 2, 1, "", "engine"], [186, 2, 1, "", "entities"], [186, 2, 1, "", "evaluationLogExtended"], [186, 3, 1, "", "explainParam"], [186, 3, 1, "", "explainParams"], [186, 3, 1, "", "extractParamMap"], [186, 3, 1, "", "fit"], [186, 3, 1, "", "fitMultiple"], [186, 3, 1, "", "getEngine"], [186, 3, 1, "", "getInputCols"], [186, 3, 1, "", "getLabelColumn"], [186, 3, 1, "", "getLazyAnnotator"], [186, 3, 1, "", "getOrDefault"], [186, 3, 1, "", "getOutputCol"], [186, 3, 1, "", "getParam"], [186, 3, 1, "", "getParamValue"], [186, 2, 1, "", "getter_attrs"], [186, 2, 1, "", "graphFile"], [186, 2, 1, "", "graphFolder"], [186, 3, 1, "", "hasDefault"], [186, 3, 1, "", "hasParam"], [186, 2, 1, "", "includeAllConfidenceScores"], [186, 2, 1, "", "includeConfidence"], [186, 2, 1, "", "inputAnnotatorTypes"], [186, 2, 1, "", "inputCols"], [186, 3, 1, "", "inputColsValidation"], [186, 3, 1, "", "isDefined"], [186, 3, 1, "", "isSet"], [186, 2, 1, "", "labelColumn"], [186, 2, 1, "", "lazyAnnotator"], [186, 3, 1, "", "load"], [186, 2, 1, "", "logPrefix"], [186, 2, 1, "", "lr"], [186, 2, 1, "", "maxEpochs"], [186, 2, 1, "", "minEpochs"], [186, 2, 1, "", "optionalInputAnnotatorTypes"], [186, 2, 1, "", "outputAnnotatorType"], [186, 2, 1, "", "outputCol"], [186, 2, 1, "", "outputLogsPath"], [186, 2, 1, "", "overrideExistingTags"], [186, 2, 1, "", "po"], [186, 2, 1, "", "pretrainedModelPath"], [186, 2, 1, "", "randomSeed"], [186, 2, 1, "", "randomValidationSplitPerEpoch"], [186, 3, 1, "", "read"], [186, 3, 1, "", "save"], [186, 2, 1, "", "sentenceTokenIndex"], [186, 3, 1, "", "set"], [186, 3, 1, "", "setBatchSize"], [186, 3, 1, "", "setConfigProtoBytes"], [186, 3, 1, "", "setDatasetInfo"], [186, 3, 1, "", "setDoExceptionHandling"], [186, 3, 1, "", "setDropout"], [186, 3, 1, "", "setEarlyStoppingCriterion"], [186, 3, 1, "", "setEarlyStoppingPatience"], [186, 3, 1, "", "setEnableMemoryOptimizer"], [186, 3, 1, "", "setEnableOutputLogs"], [186, 3, 1, "", "setEntities"], [186, 3, 1, "", "setEvaluationLogExtended"], [186, 3, 1, "", "setForceInputTypeValidation"], [186, 3, 1, "", "setGraphFile"], [186, 3, 1, "", "setGraphFolder"], [186, 3, 1, "", "setIncludeAllConfidenceScores"], [186, 3, 1, "", "setIncludeConfidence"], [186, 3, 1, "", "setInputCols"], [186, 3, 1, "", "setLabelColumn"], [186, 3, 1, "", "setLazyAnnotator"], [186, 3, 1, "", "setLogPrefix"], [186, 3, 1, "", "setLr"], [186, 3, 1, "", "setMaxEpochs"], [186, 3, 1, "", "setMinEpochs"], [186, 3, 1, "", "setOutputCol"], [186, 3, 1, "", "setOutputLogsPath"], [186, 3, 1, "", "setOverrideExistingTags"], [186, 3, 1, "", "setParamValue"], [186, 3, 1, "", "setPo"], [186, 3, 1, "", "setPretrainedModelPath"], [186, 3, 1, "", "setRandomSeed"], [186, 3, 1, "", "setRandomValidationSplitPerEpoch"], [186, 3, 1, "", "setSentenceTokenIndex"], [186, 3, 1, "", "setTagsMapping"], [186, 3, 1, "", "setTestDataset"], [186, 3, 1, "", "setUseBestModel"], [186, 3, 1, "", "setUseContrib"], [186, 3, 1, "", "setValidationSplit"], [186, 3, 1, "", "setVerbose"], [186, 2, 1, "", "skipLPInputColsValidation"], [186, 2, 1, "", "testDataset"], [186, 2, 1, "", "uc"], [186, 2, 1, "", "uid"], [186, 2, 1, "", "useBestModel"], [186, 2, 1, "", "useContrib"], [186, 2, 1, "", "validationSplit"], [186, 2, 1, "", "verbose"], [186, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[186, 2, 1, "", "classes"], [186, 3, 1, "", "clear"], [186, 2, 1, "", "configProtoBytes"], [186, 3, 1, "", "copy"], [186, 2, 1, "", "datasetInfo"], [186, 2, 1, "", "doExceptionHandling"], [186, 3, 1, "", "explainParam"], [186, 3, 1, "", "explainParams"], [186, 3, 1, "", "extractParamMap"], [186, 3, 1, "", "getClasses"], [186, 3, 1, "", "getInputCols"], [186, 3, 1, "", "getLazyAnnotator"], [186, 3, 1, "", "getOrDefault"], [186, 3, 1, "", "getOutputCol"], [186, 3, 1, "", "getParam"], [186, 3, 1, "", "getParamValue"], [186, 3, 1, "", "getStorageRef"], [186, 3, 1, "", "getTrainingClassDistribution"], [186, 2, 1, "", "getter_attrs"], [186, 3, 1, "", "hasDefault"], [186, 3, 1, "", "hasParam"], [186, 2, 1, "", "includeAllConfidenceScores"], [186, 2, 1, "", "includeConfidence"], [186, 2, 1, "", "inferenceBatchSize"], [186, 2, 1, "", "inputAnnotatorTypes"], [186, 2, 1, "", "inputCols"], [186, 3, 1, "", "inputColsValidation"], [186, 3, 1, "", "isDefined"], [186, 3, 1, "", "isSet"], [186, 2, 1, "", "labelCasing"], [186, 2, 1, "", "lazyAnnotator"], [186, 3, 1, "", "load"], [186, 3, 1, "", "loadSavedModel"], [186, 2, 1, "", "name"], [186, 2, 1, "", "optionalInputAnnotatorTypes"], [186, 2, 1, "", "outputAnnotatorType"], [186, 2, 1, "", "outputCol"], [186, 3, 1, "", "pretrained"], [186, 3, 1, "", "read"], [186, 3, 1, "", "save"], [186, 2, 1, "", "sentenceTokenIndex"], [186, 3, 1, "", "set"], [186, 3, 1, "", "setConfigProtoBytes"], [186, 3, 1, "", "setDatasetInfo"], [186, 3, 1, "", "setForceInputTypeValidation"], [186, 3, 1, "", "setIncludeConfidence"], [186, 3, 1, "", "setInferenceBatchSize"], [186, 3, 1, "", "setInputCols"], [186, 3, 1, "", "setLabelCasing"], [186, 3, 1, "", "setLazyAnnotator"], [186, 3, 1, "", "setOutputCol"], [186, 3, 1, "", "setParamValue"], [186, 3, 1, "", "setParams"], [186, 3, 1, "", "setSentenceTokenIndex"], [186, 3, 1, "", "setStorageRef"], [186, 2, 1, "", "skipLPInputColsValidation"], [186, 2, 1, "", "storageRef"], [186, 2, 1, "", "trainingClassDistribution"], [186, 3, 1, "", "transform"], [186, 2, 1, "", "uid"], [186, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[187, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[187, 2, 1, "", "batchSize"], [187, 2, 1, "", "caseSensitive"], [187, 3, 1, "", "clear"], [187, 2, 1, "", "coalesceSentences"], [187, 2, 1, "", "configProtoBytes"], [187, 3, 1, "", "copy"], [187, 2, 1, "", "engine"], [187, 3, 1, "", "explainParam"], [187, 3, 1, "", "explainParams"], [187, 3, 1, "", "extractParamMap"], [187, 3, 1, "", "getBatchSize"], [187, 3, 1, "", "getCaseSensitive"], [187, 3, 1, "", "getClasses"], [187, 3, 1, "", "getEngine"], [187, 3, 1, "", "getInputCols"], [187, 3, 1, "", "getLazyAnnotator"], [187, 3, 1, "", "getMaxSentenceLength"], [187, 3, 1, "", "getOrDefault"], [187, 3, 1, "", "getOutputCol"], [187, 3, 1, "", "getParam"], [187, 3, 1, "", "getParamValue"], [187, 2, 1, "", "getter_attrs"], [187, 3, 1, "", "hasDefault"], [187, 3, 1, "", "hasParam"], [187, 2, 1, "", "ignoreEntities"], [187, 2, 1, "", "inputAnnotatorTypes"], [187, 2, 1, "", "inputCols"], [187, 3, 1, "", "inputColsValidation"], [187, 3, 1, "", "isDefined"], [187, 3, 1, "", "isSet"], [187, 2, 1, "", "lazyAnnotator"], [187, 3, 1, "", "load"], [187, 3, 1, "", "loadSavedModel"], [187, 2, 1, "", "maxSentenceLength"], [187, 2, 1, "", "max_length_limit"], [187, 2, 1, "", "name"], [187, 2, 1, "", "optionalInputAnnotatorTypes"], [187, 2, 1, "", "outputAnnotatorType"], [187, 2, 1, "", "outputCol"], [187, 2, 1, "", "predictionThreshold"], [187, 3, 1, "", "pretrained"], [187, 3, 1, "", "read"], [187, 3, 1, "", "save"], [187, 3, 1, "", "set"], [187, 3, 1, "", "setBatchSize"], [187, 3, 1, "", "setCaseSensitive"], [187, 3, 1, "", "setConfigProtoBytes"], [187, 3, 1, "", "setEntityDefinitions"], [187, 3, 1, "", "setInputCols"], [187, 3, 1, "", "setLazyAnnotator"], [187, 3, 1, "", "setMaxSentenceLength"], [187, 3, 1, "", "setOutputCol"], [187, 3, 1, "", "setParamValue"], [187, 3, 1, "", "setParams"], [187, 3, 1, "", "setPredictionThreshold"], [187, 3, 1, "", "transform"], [187, 2, 1, "", "uid"], [187, 3, 1, "", "write"]], "sparknlp_jsl.llm": [[189, 0, 0, "-", "llm_loader"]], "sparknlp_jsl.llm.llm_loader": [[189, 1, 1, "", "LLMLoader"]], "sparknlp_jsl.llm.llm_loader.LLMLoader": [[189, 2, 1, "", "classname"], [189, 3, 1, "", "clear"], [189, 3, 1, "", "copy"], [189, 3, 1, "", "encodeModel"], [189, 3, 1, "", "explainParam"], [189, 3, 1, "", "explainParams"], [189, 3, 1, "", "extractParamMap"], [189, 3, 1, "", "generate"], [189, 3, 1, "", "getMetadata"], [189, 3, 1, "", "getMetadataEntry"], [189, 3, 1, "", "getOrDefault"], [189, 3, 1, "", "getParam"], [189, 3, 1, "", "hasDefault"], [189, 3, 1, "", "hasParam"], [189, 3, 1, "", "isDefined"], [189, 3, 1, "", "isSet"], [189, 3, 1, "", "load"], [189, 3, 1, "", "pretrained"], [189, 3, 1, "", "set"], [189, 3, 1, "", "setCachePrompt"], [189, 3, 1, "", "setDynamicTemperatureExponent"], [189, 3, 1, "", "setDynamicTemperatureRange"], [189, 3, 1, "", "setFrequencyPenalty"], [189, 3, 1, "", "setGrammar"], [189, 3, 1, "", "setIgnoreEos"], [189, 3, 1, "", "setInputPrefix"], [189, 3, 1, "", "setInputSuffix"], [189, 3, 1, "", "setMinKeep"], [189, 3, 1, "", "setMinP"], [189, 3, 1, "", "setMiroStatEta"], [189, 3, 1, "", "setMiroStatTau"], [189, 3, 1, "", "setNKeep"], [189, 3, 1, "", "setNPredict"], [189, 3, 1, "", "setNProbs"], [189, 3, 1, "", "setPenalizeNl"], [189, 3, 1, "", "setPenaltyPrompt"], [189, 3, 1, "", "setPresencePenalty"], [189, 3, 1, "", "setRepeatLastN"], [189, 3, 1, "", "setRepeatPenalty"], [189, 3, 1, "", "setSeed"], [189, 3, 1, "", "setStopStrings"], [189, 3, 1, "", "setTemperature"], [189, 3, 1, "", "setTfsZ"], [189, 3, 1, "", "setTopK"], [189, 3, 1, "", "setTopP"], [189, 3, 1, "", "setTypicalP"], [189, 3, 1, "", "setUseChatTemplate"], [189, 3, 1, "", "transform"], [189, 2, 1, "", "uid"]], "sparknlp_jsl.modelTracer": [[190, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[190, 3, 1, "", "addUidCols"]], "sparknlp_jsl.pipeline_output_parser": [[191, 1, 1, "", "PipelineOutputParser"]], "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser": [[191, 3, 1, "", "check_column_mapping_dict"], [191, 3, 1, "", "check_unique_id"], [191, 3, 1, "", "get_assertions"], [191, 3, 1, "", "get_classification"], [191, 3, 1, "", "get_deidentification"], [191, 3, 1, "", "get_documents"], [191, 3, 1, "", "get_entities"], [191, 3, 1, "", "get_relations"], [191, 3, 1, "", "get_resolutions"], [191, 3, 1, "", "get_summary"], [191, 3, 1, "", "get_unique_id"], [191, 3, 1, "", "run"], [191, 3, 1, "", "update_columns_maps"]], "sparknlp_jsl.pipeline_tracer": [[192, 1, 1, "", "PipelineStage"], [192, 1, 1, "", "PipelineTracer"], [192, 1, 1, "", "StageField"]], "sparknlp_jsl.pipeline_tracer.PipelineStage": [[192, 2, 1, "", "index"], [192, 2, 1, "", "inputAnnotatorType"], [192, 2, 1, "", "inputCol"], [192, 2, 1, "", "name"], [192, 2, 1, "", "outputAnnotatorType"], [192, 2, 1, "", "outputCol"], [192, 2, 1, "", "stage"], [192, 2, 1, "", "uid"]], "sparknlp_jsl.pipeline_tracer.PipelineTracer": [[192, 3, 1, "", "createParserDictionary"], [192, 3, 1, "", "getParserDictDirectly"], [192, 3, 1, "", "getPipelineStages"], [192, 3, 1, "", "getPossibleAssertions"], [192, 3, 1, "", "getPossibleEntities"], [192, 3, 1, "", "getPossibleRelations"], [192, 3, 1, "", "listAvailableModels"], [192, 3, 1, "", "printPipelineSchema"], [192, 3, 1, "", "showAvailableModels"]], "sparknlp_jsl.pipeline_tracer.StageField": [[192, 2, 1, "", "fieldType"], [192, 2, 1, "", "name"], [192, 2, 1, "", "value"]], "sparknlp_jsl.pretrained": [[193, 1, 1, "", "InternalResourceDownloader"], [193, 5, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[193, 3, 1, "", "downloadModel"], [193, 3, 1, "", "downloadModelDirectly"], [193, 3, 1, "", "returnPrivateModels"], [193, 3, 1, "", "returnPrivatePipelines"], [193, 3, 1, "", "showAvailableAnnotators"], [193, 3, 1, "", "showPrivateModels"], [193, 3, 1, "", "showPrivatePipelines"], [193, 3, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[194, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[194, 2, 1, "", "columns"], [194, 2, 1, "", "instance"], [194, 3, 1, "", "obfuscateColumns"], [194, 2, 1, "", "obfuscateRefFile"], [194, 2, 1, "", "spark"]], "sparknlp_jsl.text_to_documents_columns": [[195, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[195, 2, 1, "", "columns"], [195, 2, 1, "", "instance"], [195, 2, 1, "", "spark"], [195, 3, 1, "", "toDocumentsColumns"], [195, 3, 1, "", "toDocumentsColumnsWithId"]], "sparknlp_jsl.training": [[196, 1, 1, "", "AnnotationToolJsonReader"], [196, 1, 1, "", "CantemistReader"], [196, 1, 1, "", "CodiEspReader"], [196, 1, 1, "", "REDatasetHelper"], [196, 1, 1, "", "SynonymAugmentationUMLS"], [196, 4, 1, "", "tf_graph"], [196, 4, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[196, 3, 1, "", "apply"], [196, 3, 1, "", "generateAssertionTrainSet"], [196, 3, 1, "", "generateConll"], [196, 3, 1, "", "generatePlainAssertionTrainSet"], [196, 3, 1, "", "getDataFrame"], [196, 2, 1, "", "java_obj"], [196, 3, 1, "", "new_java_array"], [196, 3, 1, "", "new_java_array_integer"], [196, 3, 1, "", "new_java_array_string"], [196, 3, 1, "", "new_java_obj"], [196, 3, 1, "", "readDataset"], [196, 2, 1, "", "sc"], [196, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.CantemistReader": [[196, 3, 1, "", "apply"], [196, 3, 1, "", "getDataFrame"], [196, 2, 1, "", "java_obj"], [196, 3, 1, "", "new_java_array"], [196, 3, 1, "", "new_java_array_integer"], [196, 3, 1, "", "new_java_array_string"], [196, 3, 1, "", "new_java_obj"], [196, 3, 1, "", "readDatasetTaskNer"], [196, 2, 1, "", "sc"], [196, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.CodiEspReader": [[196, 3, 1, "", "apply"], [196, 3, 1, "", "getDataFrame"], [196, 2, 1, "", "java_obj"], [196, 3, 1, "", "new_java_array"], [196, 3, 1, "", "new_java_array_integer"], [196, 3, 1, "", "new_java_array_string"], [196, 3, 1, "", "new_java_obj"], [196, 3, 1, "", "readDatasetTaskX"], [196, 2, 1, "", "sc"], [196, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.REDatasetHelper": [[196, 2, 1, "", "annotation_schema"], [196, 3, 1, "", "create_annotation_column"], [196, 2, 1, "", "data"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[196, 3, 1, "", "apply"], [196, 3, 1, "", "augmentCsv"], [196, 3, 1, "", "augmentDataFrame"], [196, 3, 1, "", "getDataFrame"], [196, 2, 1, "", "java_obj"], [196, 3, 1, "", "new_java_array"], [196, 3, 1, "", "new_java_array_integer"], [196, 3, 1, "", "new_java_array_string"], [196, 3, 1, "", "new_java_obj"], [196, 2, 1, "", "sc"], [196, 3, 1, "", "spark_version"]], "sparknlp_jsl.training_log_parser": [[197, 1, 1, "", "assertion_log_parser"], [197, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[197, 3, 1, "", "get_best_f1_scores"], [197, 3, 1, "", "get_charts"], [197, 3, 1, "", "loss_plot"], [197, 3, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[197, 3, 1, "", "evaluate"], [197, 3, 1, "", "evaluate_conll_file"], [197, 3, 1, "", "get_best_f1_scores"], [197, 3, 1, "", "get_charts"], [197, 3, 1, "", "loss_plot"], [197, 3, 1, "", "parse_logfile"]], "sparknlp_jsl.transpiler": [[198, 0, 0, "-", "builder"], [199, 0, 0, "-", "class_names"], [200, 0, 0, "-", "converter"], [201, 0, 0, "-", "externalSources"], [203, 0, 0, "-", "nlu_2_python"], [204, 0, 0, "-", "python_2_scala"], [205, 0, 0, "-", "source_loader"], [206, 0, 0, "-", "uploader"]], "sparknlp_jsl.transpiler.builder": [[198, 5, 1, "", "build_python_code"], [198, 5, 1, "", "build_scala_code"], [198, 5, 1, "", "compile_scala_code"], [198, 5, 1, "", "prepare_python_code"]], "sparknlp_jsl.transpiler.class_names": [[199, 1, 1, "", "ClassNames"]], "sparknlp_jsl.transpiler.class_names.ClassNames": [[199, 2, 1, "", "classes"], [199, 2, 1, "", "internal_classes"], [199, 2, 1, "", "openSource_classes"]], "sparknlp_jsl.transpiler.converter": [[200, 5, 1, "", "run_converter"]], "sparknlp_jsl.transpiler.nlu_2_python": [[203, 5, 1, "", "bucket"], [203, 5, 1, "", "convert_nlu_component_to_python"], [203, 5, 1, "", "is_component_finance"], [203, 5, 1, "", "is_component_legal"], [203, 5, 1, "", "is_component_medical"], [203, 5, 1, "", "is_component_ocr"], [203, 5, 1, "", "is_component_open_source"], [203, 5, 1, "", "is_component_pretrained"], [203, 4, 1, "", "medical_annotators_set"], [203, 5, 1, "", "nlu_component_to_spark_nlp_code"], [203, 4, 1, "", "open_source_annotator_set_final"], [203, 5, 1, "", "starts_with_finance"], [203, 5, 1, "", "starts_with_legal"], [203, 5, 1, "", "starts_with_medical"], [203, 5, 1, "", "to_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[204, 5, 1, "", "anonymize_script"], [204, 5, 1, "", "break_line_after_backslash"], [204, 5, 1, "", "convert"], [204, 5, 1, "", "convert_class_name"], [204, 5, 1, "", "convert_python_dict_to_scala_script"], [204, 5, 1, "", "find_key_values"], [204, 5, 1, "", "get_data_dict"], [204, 5, 1, "", "get_import_section"], [204, 5, 1, "", "prepare_scala_code"], [204, 5, 1, "", "remove_blank_lines"], [204, 5, 1, "", "restore_sensitive_values"], [204, 5, 1, "", "run_transpiler"]], "sparknlp_jsl.transpiler.source_loader": [[205, 5, 1, "", "get_python_code_from_md"], [205, 5, 1, "", "get_scala_code_from_md"], [205, 5, 1, "", "load_file_as_dict"], [205, 5, 1, "", "process_python_code"], [205, 5, 1, "", "update_md_file"], [205, 5, 1, "", "update_md_file_for_working_scala_code"]], "sparknlp_jsl.transpiler.uploader": [[206, 5, 1, "", "apply_method_to_all_md_files"], [206, 4, 1, "", "generated_code_failed"], [206, 4, 1, "", "generated_code_works"], [206, 4, 1, "", "python_code_failed"], [206, 4, 1, "", "results_list"], [206, 4, 1, "", "scala_code_works"], [206, 4, 1, "", "scala_generated"], [206, 5, 1, "", "upload_scala_code_in_md_file"]], "sparknlp_jsl.updateModels": [[207, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[207, 3, 1, "", "updateCacheModels"], [207, 3, 1, "", "updateModels"]], "sparknlp_jsl.util": [[208, 5, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[209, 0, 0, "-", "alab_utils"], [210, 0, 0, "-", "conll_parse"], [211, 0, 0, "-", "deidentification_utils"], [212, 0, 0, "-", "imports"], [214, 0, 0, "-", "java_helper"], [215, 0, 0, "-", "licensed_annotator_type"], [216, 0, 0, "-", "log_parse"], [217, 0, 0, "-", "ner_utils"], [218, 0, 0, "-", "ocr_nlp_processor"], [219, 0, 0, "-", "ocr_utils"], [220, 0, 0, "-", "risk_adjustment_utils"], [221, 0, 0, "-", "run_transpiled_code"], [222, 0, 0, "-", "training_log_parser_utils"], [223, 0, 0, "-", "visualner_annotations_parser"]], "sparknlp_jsl.utils.alab_utils": [[209, 4, 1, "", "document_assembler"], [209, 4, 1, "", "empty_df"], [209, 5, 1, "", "get_doc_assembler"], [209, 5, 1, "", "get_empty_df"], [209, 5, 1, "", "get_ner_df"], [209, 5, 1, "", "get_ner_sentence_borders"], [209, 5, 1, "", "get_nlp_pos_pipeline"], [209, 5, 1, "", "get_nlp_token_pipeline"], [209, 5, 1, "", "get_pos"], [209, 5, 1, "", "get_regex_tokenizer"], [209, 5, 1, "", "get_regular_tokenizer"], [209, 5, 1, "", "get_rel_df"], [209, 5, 1, "", "get_sent_detector"], [209, 5, 1, "", "get_sentence_pipeline"], [209, 5, 1, "", "get_single_task_conll"], [209, 5, 1, "", "get_token_df"], [209, 4, 1, "", "nlp_pos_pipeline"], [209, 4, 1, "", "nlp_token_pipeline"], [209, 4, 1, "", "pos"], [209, 4, 1, "", "pos_pipeline_initialized"], [209, 5, 1, "", "read_conll"], [209, 4, 1, "", "regex_tokenizer"], [209, 4, 1, "", "regular_tokenizer"], [209, 4, 1, "", "sentence_detector"], [209, 5, 1, "", "strip_json_entities"], [209, 4, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_utils": [[211, 5, 1, "", "dict_to_annotation_converter"], [211, 5, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[212, 5, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.java_helper": [[214, 5, 1, "", "parse_str_to_dict"]], "sparknlp_jsl.utils.licensed_annotator_type": [[215, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[215, 2, 1, "", "ASSERTION"], [215, 2, 1, "", "DISAMBIGUATION"], [215, 2, 1, "", "FEATURE_VECTOR"], [215, 2, 1, "", "KEYWORD"], [215, 2, 1, "", "SELECTOR"], [215, 2, 1, "", "SQL"], [215, 2, 1, "", "VECTOR_SIMILARITY_RANKINGS"]], "sparknlp_jsl.utils.ner_utils": [[217, 5, 1, "", "evaluate"], [217, 5, 1, "", "evaluate_conll_file"], [217, 5, 1, "", "get_charts"], [217, 5, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[218, 4, 1, "", "colors"], [218, 5, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[219, 4, 1, "", "colors"], [219, 4, 1, "", "colors_rgb"], [219, 5, 1, "", "draw_boxes_on_image_handwritten_region"], [219, 5, 1, "", "get_handwritten_regions"], [219, 4, 1, "", "label2color"], [219, 4, 1, "", "label2rgb"], [219, 4, 1, "", "pretrained_model"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[220, 1, 1, "", "RiskAdjustmentUtil"]], "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil": [[220, 3, 1, "", "HCC_from_ICD"], [220, 3, 1, "", "HCC_labels"], [220, 3, 1, "", "diff_between_HCCs"]], "sparknlp_jsl.utils.run_transpiled_code": [[221, 1, 1, "", "RunTranspiledCode"]], "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode": [[221, 3, 1, "", "build_scala_code"], [221, 3, 1, "", "compile_scala_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[222, 5, 1, "", "aggregate_entities"], [222, 5, 1, "", "calc_metrics"], [222, 5, 1, "", "count_chunks"], [222, 5, 1, "", "get_result"], [222, 5, 1, "", "is_chunk_end"], [222, 5, 1, "", "is_chunk_start"], [222, 5, 1, "", "split_tag"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[223, 5, 1, "", "convert_to_CONLL"], [223, 5, 1, "", "get_tokens"], [223, 5, 1, "", "pdfs_to_visualner_to_conll"], [223, 5, 1, "", "visualner_annotations_to_conll"], [223, 5, 1, "", "write_CONLL"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"sparknlp_jsl": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], "get": 1, "start": [1, 2], "requir": 1, "instal": 1, "spark": [1, 2], "nlp": [1, 2], "session": 1, "from": 1, "python": 1, "document": 2, "content": [2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 156, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223], "quick": 2, "annot": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "financ": [5, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "legal": [6, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "util": [7, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], "alab": 8, "modul": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 154, 156, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224], "class": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 129, 130, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 153, 157, 159, 160, 163, 164, 166, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 207, 215, 220, 221], "annotation_merg": 9, "assert": [10, 11, 12, 13, 14, 15, 16, 123, 124, 157, 158], "assertiondl": [10, 123, 157], "assertion_chunk_convert": 11, "exampl": [11, 41, 42, 45, 89, 125, 159, 211], "assertion_dl_reg": 12, "assertion_merg": 13, "contextual_assert": 14, "fewshot_assertion_sentence_convert": 15, "submodul": [16, 26, 34, 40, 44, 49, 58, 60, 65, 67, 68, 71, 73, 82, 84, 88, 90, 95, 97, 102, 108, 112, 118, 124, 127, 131, 134, 142, 147, 152, 155, 158, 161, 165, 168, 172, 177, 184, 188, 202, 213], "chunk2_token": 17, "chunker": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "assertion_filter": 18, "chunk_convert": 19, "chunk_key_phrase_extract": 20, "chunk_sentence_splitt": 21, "chunker_filter": 22, "chunkmapp": [23, 129, 163], "chunkmapper_filter": 24, "docmapp": [25, 130, 164], "mapper2_chunk": 27, "classif": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "document_log_classifi": 28, "document_ml_classifi": 29, "few_shot_assertion_classifi": 30, "few_shot_classifi": 31, "generic_log_reg_classifi": 32, "generic_svm_classifi": 33, "large_few_shot_classifi": 35, "medical_bert_for_sequence_classif": 36, "medical_bert_for_token_classifi": 37, "medical_distilbert_for_sequence_classif": 38, "context": [39, 40], "contextual_pars": 39, "deid": [41, 42, 43, 44, 45, 46, 47, 48, 125, 126, 127, 159, 160, 161], "deidentif": [41, 125, 159], "default": [41, 42, 125, 159], "dictionari": [41, 42, 125, 159], "deidentication_param": 42, "doccument_hashcod": 43, "light_deidentif": 45, "name_obfusc": 46, "reidentif": 47, "replac": 48, "disambigu": [49, 50], "ner_disambigu": 50, "doc2_chunk_intern": 51, "document_filterer_by_classifi": 52, "document_filterer_by_n": 53, "embed": [54, 55, 56, 57, 58], "average_embed": 54, "bert_sentence_embed": 55, "entity_chunk_embed": 56, "extractive_summar": 57, "er": [59, 60], "entity_ruler_intern": 59, "feature_assembl": 61, "filtering_param": 62, "flatten": 63, "generic_classifi": [64, 65], "handle_exception_param": 66, "subpackag": [67, 128, 133, 137, 149, 155, 162, 167, 171, 183, 202], "packag": [67, 155], "matcher": [68, 69], "text_matcher_intern": 69, "merg": [70, 71], "chunk_merg": 70, "multi_chunk2_doc": 72, "ner": [73, 74, 75, 76, 77, 78, 79, 150, 151, 152, 153, 184, 185, 186, 187], "iob_tagg": 74, "medical_n": 75, "ner_chunk": 76, "ner_converter_intern": 77, "ner_template_rend": 78, "zero_shot_n": [79, 153, 187], "normal": [80, 81, 82], "date_norm": 80, "drug_norm": 81, "qa": [83, 84, 85, 86], "beam_search_param": 83, "medical_qa": 85, "qa_ner_gener": [86, 148, 182], "rag": [87, 88, 89], "context_split_assembl": 87, "vectordb_post_processor": 89, "note": 89, "re": [90, 91, 92, 93, 94], "relation_extract": [91, 134, 135, 136, 168, 169, 170], "relation_extraction_dl": [92, 135, 169], "relation_ner_chunk_filt": 93, "zero_shot_relation_extract": [94, 136, 170], "regex": [95, 96], "regex_match": 96, "resolut": [97, 98, 99, 129, 130, 131, 132, 163, 164, 165, 166], "resolver_merg": 98, "sentence_entity_resolv": [99, 132, 166], "resolution2_chunk": 100, "router": 101, "seq2seq": [102, 103, 104, 105, 106], "medical_encoder_decod": 103, "medical_summar": 104, "medical_text_gener": 105, "text2sql": 106, "source_tracking_metadata_param": 107, "splitter": [108, 109], "internal_document_splitt": 109, "tf_graph_build": 110, "white_black_list_param": 111, "window": [112, 113], "windowed_sent": 113, "base": 114, "common": [115, 116, 117, 118], "annotator_approach_intern": 115, "annotator_model_intern": 116, "annotator_properties_intern": 117, "compat": 119, "custom_transform": 120, "deidentification_modul": 121, "eval": 122, "chunk_classif": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "document_hashcod": [126, 160], "graph": [133, 134, 135, 136, 167, 168, 169, 170], "sequence_classif": [138, 139, 140, 141, 142, 172, 173, 174, 175, 176], "finance_bert_for_sequence_classif": 138, "finance_classifier_dl": 139, "finance_document_ml_classifi": 140, "finance_few_shot_classifi": 141, "sequence_gener": [143, 144, 145, 146, 147, 148, 177, 178, 179, 180, 181, 182], "finance_encoder_decod": 143, "finance_qa": 144, "finance_summar": 145, "finance_text_gener": 146, "token_classif": [149, 150, 151, 152, 153, 183, 184, 185, 186, 187], "finance_bert_for_token_classifi": 150, "finance_n": 151, "function": [154, 155, 156, 193, 198, 200, 203, 204, 205, 206, 208, 209, 211, 212, 214, 217, 218, 219, 222, 223], "input": 154, "paramet": [154, 166, 192], "output": 154, "attribut": [155, 196, 203, 206, 209, 218, 219], "intern": 156, "legal_bert_for_sequence_classif": 173, "legal_classifier_dl": 174, "legal_document_ml_classifi": 175, "legal_few_shot_classifi": 176, "legal_encoder_decod": 178, "legal_qa": 179, "legal_summar": 180, "legal_text_gener": 181, "legal_bert_for_token_classifi": 185, "legal_n": 186, "llm": [188, 189], "llm_loader": 189, "modeltrac": 190, "pipeline_output_pars": 191, "pipeline_trac": 192, "return": [192, 211], "throw": 192, "pretrain": 193, "structured_deidentif": 194, "text_to_documents_column": 195, "train": 196, "training_log_pars": 197, "transpil": [198, 199, 200, 201, 202, 203, 204, 205, 206], "builder": 198, "class_nam": 199, "convert": 200, "externalsourc": 201, "nlu_2_python": 203, "python_2_scala": 204, "source_load": 205, "upload": 206, "updatemodel": 207, "alab_util": 209, "conll_pars": 210, "deidentification_util": 211, "import": 212, "java_help": 214, "licensed_annotator_typ": 215, "log_pars": 216, "ner_util": 217, "ocr_nlp_processor": 218, "ocr_util": 219, "risk_adjustment_util": 220, "run_transpiled_cod": 221, "training_log_parser_util": 222, "visualner_annotations_pars": 223, "api": 224, "refer": 224}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp_jsl": [[0, "module-sparknlp_jsl"], [3, "module-sparknlp_jsl"], [155, "module-sparknlp_jsl"]], "Getting Started": [[1, "getting-started"]], "Requirements": [[1, "requirements"]], "Installation": [[1, "installation"]], "Starting a Spark NLP Session from Python": [[1, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[2, "spark-nlp-documentation"]], "Content": [[2, "content"]], "Quick Start": [[2, "quick-start"]], "sparknlp_jsl.annotator": [[4, "module-sparknlp_jsl.annotator"], [67, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.finance": [[5, "module-sparknlp_jsl.finance"], [137, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.legal": [[6, "module-sparknlp_jsl.legal"], [171, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.utils": [[7, "module-sparknlp_jsl.utils"], [213, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.alab": [[8, "module-sparknlp_jsl.alab"]], "Module Contents": [[8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [83, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [89, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [164, "module-contents"], [166, "module-contents"], [169, "module-contents"], [170, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"]], "Classes": [[8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [69, "classes"], [70, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [83, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [89, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [169, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [199, "classes"], [207, "classes"], [215, "classes"], [220, "classes"], [221, "classes"]], "sparknlp_jsl.annotator.annotation_merger": [[9, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[10, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[11, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "Example:": [[11, "example"], [45, "example"], [45, "id13"], [89, "example"], [211, "example"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[12, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[13, "module-sparknlp_jsl.annotator.assertion.assertion_merger"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[14, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[15, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"]], "sparknlp_jsl.annotator.assertion": [[16, "module-sparknlp_jsl.annotator.assertion"]], "Submodules": [[16, "submodules"], [26, "submodules"], [34, "submodules"], [40, "submodules"], [44, "submodules"], [49, "submodules"], [58, "submodules"], [60, "submodules"], [65, "submodules"], [67, "submodules"], [68, "submodules"], [71, "submodules"], [73, "submodules"], [82, "submodules"], [84, "submodules"], [88, "submodules"], [90, "submodules"], [95, "submodules"], [97, "submodules"], [102, "submodules"], [108, "submodules"], [112, "submodules"], [118, "submodules"], [124, "submodules"], [127, "submodules"], [131, "submodules"], [134, "submodules"], [142, "submodules"], [147, "submodules"], [152, "submodules"], [155, "submodules"], [158, "submodules"], [161, "submodules"], [165, "submodules"], [168, "submodules"], [172, "submodules"], [177, "submodules"], [184, "submodules"], [188, "submodules"], [202, "submodules"], [213, "submodules"]], "sparknlp_jsl.annotator.chunk2_token": [[17, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[18, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[19, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[20, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[21, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[22, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[23, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[24, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[25, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[26, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[27, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[28, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[29, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[30, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[31, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[32, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[33, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[34, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[35, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[36, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[37, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[38, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[39, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[40, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[41, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Default and example dictionary": [[41, "default-and-example-dictionary"], [41, "id8"], [42, "default-and-example-dictionary"], [125, "default-and-example-dictionary"], [125, "id13"], [159, "default-and-example-dictionary"], [159, "id13"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[42, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[43, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[44, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.light_deIdentification": [[45, "module-sparknlp_jsl.annotator.deid.light_deIdentification"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[46, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[47, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[48, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[49, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[50, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[51, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[52, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[53, "module-sparknlp_jsl.annotator.document_filterer_by_ner"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[54, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[55, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[56, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[57, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "sparknlp_jsl.annotator.embeddings": [[58, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[59, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "sparknlp_jsl.annotator.er": [[60, "module-sparknlp_jsl.annotator.er"]], "sparknlp_jsl.annotator.feature_assembler": [[61, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.filtering_params": [[62, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.flattener": [[63, "module-sparknlp_jsl.annotator.flattener"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[64, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[65, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator.handle_exception_params": [[66, "module-sparknlp_jsl.annotator.handle_exception_params"]], "Subpackages": [[67, "subpackages"], [128, "subpackages"], [133, "subpackages"], [137, "subpackages"], [149, "subpackages"], [155, "subpackages"], [162, "subpackages"], [167, "subpackages"], [171, "subpackages"], [183, "subpackages"], [202, "subpackages"]], "Package Contents": [[67, "package-contents"], [155, "package-contents"]], "sparknlp_jsl.annotator.matcher": [[68, "module-sparknlp_jsl.annotator.matcher"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[69, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[70, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[71, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[72, "module-sparknlp_jsl.annotator.multi_chunk2_doc"]], "sparknlp_jsl.annotator.ner": [[73, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[74, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[75, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[76, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[77, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[78, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[79, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[80, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[81, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[82, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[83, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[84, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[85, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[86, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[87, "module-sparknlp_jsl.annotator.rag.context_split_assembler"]], "sparknlp_jsl.annotator.rag": [[88, "module-sparknlp_jsl.annotator.rag"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[89, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"]], "Notes:": [[89, "notes"], [89, "id1"]], "sparknlp_jsl.annotator.re": [[90, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[91, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[92, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[93, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[94, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.regex": [[95, "module-sparknlp_jsl.annotator.regex"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[96, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "sparknlp_jsl.annotator.resolution": [[97, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[98, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[99, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[100, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[101, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[102, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[103, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[104, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[105, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[106, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[107, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.splitter": [[108, "module-sparknlp_jsl.annotator.splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[109, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "sparknlp_jsl.annotator.tf_graph_builder": [[110, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.white_black_list_params": [[111, "module-sparknlp_jsl.annotator.white_black_list_params"]], "sparknlp_jsl.annotator.windowed": [[112, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[113, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[114, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[115, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[116, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[117, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[118, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[119, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[120, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[121, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[122, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[123, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[124, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[125, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[126, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[127, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[128, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[129, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[130, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[131, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[132, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[133, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[134, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[135, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[136, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[138, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[139, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[140, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[141, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[142, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[143, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[144, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[145, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[146, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[147, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[148, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[149, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[150, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[151, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[152, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[153, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[154, "module-sparknlp_jsl.functions"]], "Functions": [[154, "functions"], [155, "functions"], [156, "functions"], [193, "functions"], [198, "functions"], [200, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [206, "functions"], [208, "functions"], [209, "functions"], [211, "functions"], [212, "functions"], [214, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [222, "functions"], [223, "functions"]], "INPUT PARAMETERS": [[154, "input-parameters"], [154, "id1"], [154, "id3"], [154, "id5"], [154, "id7"], [154, "id9"], [154, "id11"], [154, "id13"], [154, "id15"], [154, "id17"], [154, "id19"], [154, "id21"], [154, "id23"], [154, "id25"], [154, "id27"], [154, "id29"], [154, "id31"], [154, "id33"], [154, "id35"], [154, "id37"], [154, "id39"], [154, "id41"], [154, "id43"], [154, "id45"], [154, "id47"]], "OUTPUT PARAMETERS": [[154, "output-parameters"], [154, "id2"], [154, "id4"], [154, "id6"], [154, "id8"], [154, "id10"], [154, "id12"], [154, "id14"], [154, "id16"], [154, "id18"], [154, "id20"], [154, "id22"], [154, "id24"], [154, "id26"], [154, "id28"], [154, "id30"], [154, "id32"], [154, "id34"], [154, "id36"], [154, "id38"], [154, "id40"], [154, "id42"], [154, "id44"], [154, "id46"], [154, "id48"]], "Attributes": [[155, "attributes"], [196, "attributes"], [203, "attributes"], [206, "attributes"], [209, "attributes"], [218, "attributes"], [219, "attributes"]], "sparknlp_jsl.internal": [[156, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[157, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[158, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[159, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[160, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[161, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[162, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[163, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[164, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[165, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[166, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "Parameters:": [[166, "parameters"], [192, "parameters"], [192, "id1"], [192, "id2"]], "sparknlp_jsl.legal.graph": [[167, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[168, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[169, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[170, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal.sequence_classification": [[172, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[173, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[174, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[175, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[176, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[177, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[178, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[179, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[180, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[181, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[182, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[183, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[184, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[185, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[186, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[187, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.llm": [[188, "module-sparknlp_jsl.llm"]], "sparknlp_jsl.llm.llm_loader": [[189, "module-sparknlp_jsl.llm.llm_loader"]], "sparknlp_jsl.modelTracer": [[190, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.pipeline_output_parser": [[191, "module-sparknlp_jsl.pipeline_output_parser"]], "sparknlp_jsl.pipeline_tracer": [[192, "module-sparknlp_jsl.pipeline_tracer"]], "Returns:": [[192, "returns"], [211, "returns"]], "Throws:": [[192, "throws"]], "sparknlp_jsl.pretrained": [[193, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[194, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[195, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[196, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[197, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.transpiler.builder": [[198, "module-sparknlp_jsl.transpiler.builder"]], "sparknlp_jsl.transpiler.class_names": [[199, "module-sparknlp_jsl.transpiler.class_names"]], "sparknlp_jsl.transpiler.converter": [[200, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalSources": [[201, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[202, "module-sparknlp_jsl.transpiler"]], "sparknlp_jsl.transpiler.nlu_2_python": [[203, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[204, "module-sparknlp_jsl.transpiler.python_2_scala"]], "sparknlp_jsl.transpiler.source_loader": [[205, "module-sparknlp_jsl.transpiler.source_loader"]], "sparknlp_jsl.transpiler.uploader": [[206, "module-sparknlp_jsl.transpiler.uploader"]], "sparknlp_jsl.updateModels": [[207, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[208, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[209, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[210, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[211, "module-sparknlp_jsl.utils.deidentification_utils"]], "sparknlp_jsl.utils.imports": [[212, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils.java_helper": [[214, "module-sparknlp_jsl.utils.java_helper"]], "sparknlp_jsl.utils.licensed_annotator_type": [[215, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[216, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[217, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[218, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[219, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[220, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "sparknlp_jsl.utils.run_transpiled_code": [[221, "module-sparknlp_jsl.utils.run_transpiled_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[222, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[223, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "API Reference": [[224, "api-reference"]], "Modules": [[224, "modules"]]}, "indexentries": {"get_credentials() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.get_credentials"], [3, "sparknlp_jsl.get_credentials"], [155, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.library_settings"], [3, "sparknlp_jsl.library_settings"], [155, "sparknlp_jsl.library_settings"]], "module": [[0, "module-sparknlp_jsl"], [3, "module-sparknlp_jsl"], [4, "module-sparknlp_jsl.annotator"], [5, "module-sparknlp_jsl.finance"], [6, "module-sparknlp_jsl.legal"], [7, "module-sparknlp_jsl.utils"], [8, "module-sparknlp_jsl.alab"], [9, "module-sparknlp_jsl.annotator.annotation_merger"], [10, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [11, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [12, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [13, "module-sparknlp_jsl.annotator.assertion.assertion_merger"], [14, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"], [15, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"], [16, "module-sparknlp_jsl.annotator.assertion"], [17, "module-sparknlp_jsl.annotator.chunk2_token"], [18, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [19, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [20, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [21, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [22, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [23, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [24, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [25, "module-sparknlp_jsl.annotator.chunker.docmapper"], [26, "module-sparknlp_jsl.annotator.chunker"], [27, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"], [28, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [29, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [30, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"], [31, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"], [32, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [33, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [34, "module-sparknlp_jsl.annotator.classification"], [35, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"], [36, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [37, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [38, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [39, "module-sparknlp_jsl.annotator.context.contextual_parser"], [40, "module-sparknlp_jsl.annotator.context"], [41, "module-sparknlp_jsl.annotator.deid.deIdentification"], [42, "module-sparknlp_jsl.annotator.deid.deidentication_params"], [43, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [44, "module-sparknlp_jsl.annotator.deid"], [45, "module-sparknlp_jsl.annotator.deid.light_deIdentification"], [46, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [47, "module-sparknlp_jsl.annotator.deid.reIdentification"], [48, "module-sparknlp_jsl.annotator.deid.replacer"], [49, "module-sparknlp_jsl.annotator.disambiguation"], [50, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [51, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [52, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"], [53, "module-sparknlp_jsl.annotator.document_filterer_by_ner"], [54, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [55, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [56, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [57, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"], [58, "module-sparknlp_jsl.annotator.embeddings"], [59, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"], [60, "module-sparknlp_jsl.annotator.er"], [61, "module-sparknlp_jsl.annotator.feature_assembler"], [62, "module-sparknlp_jsl.annotator.filtering_params"], [63, "module-sparknlp_jsl.annotator.flattener"], [64, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [65, "module-sparknlp_jsl.annotator.generic_classifier"], [66, "module-sparknlp_jsl.annotator.handle_exception_params"], [67, "module-sparknlp_jsl.annotator"], [68, "module-sparknlp_jsl.annotator.matcher"], [69, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"], [70, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [71, "module-sparknlp_jsl.annotator.merge"], [72, "module-sparknlp_jsl.annotator.multi_chunk2_doc"], [73, "module-sparknlp_jsl.annotator.ner"], [74, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [75, "module-sparknlp_jsl.annotator.ner.medical_ner"], [76, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [77, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [78, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [79, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [80, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [81, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [82, "module-sparknlp_jsl.annotator.normalizer"], [83, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [84, "module-sparknlp_jsl.annotator.qa"], [85, "module-sparknlp_jsl.annotator.qa.medical_qa"], [86, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [87, "module-sparknlp_jsl.annotator.rag.context_split_assembler"], [88, "module-sparknlp_jsl.annotator.rag"], [89, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"], [90, "module-sparknlp_jsl.annotator.re"], [91, "module-sparknlp_jsl.annotator.re.relation_extraction"], [92, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [93, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [94, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [95, "module-sparknlp_jsl.annotator.regex"], [96, "module-sparknlp_jsl.annotator.regex.regex_matcher"], [97, "module-sparknlp_jsl.annotator.resolution"], [98, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [99, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [100, "module-sparknlp_jsl.annotator.resolution2_chunk"], [101, "module-sparknlp_jsl.annotator.router"], [102, "module-sparknlp_jsl.annotator.seq2seq"], [103, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [104, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [105, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [106, "module-sparknlp_jsl.annotator.seq2seq.text2sql"], [107, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [108, "module-sparknlp_jsl.annotator.splitter"], [109, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"], [110, "module-sparknlp_jsl.annotator.tf_graph_builder"], [111, "module-sparknlp_jsl.annotator.white_black_list_params"], [112, "module-sparknlp_jsl.annotator.windowed"], [113, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [114, "module-sparknlp_jsl.base"], [115, "module-sparknlp_jsl.common.annotator_approach_internal"], [116, "module-sparknlp_jsl.common.annotator_model_internal"], [117, "module-sparknlp_jsl.common.annotator_properties_internal"], [118, "module-sparknlp_jsl.common"], [119, "module-sparknlp_jsl.compatibility"], [120, "module-sparknlp_jsl.custom_transformer"], [121, "module-sparknlp_jsl.deidentification_module"], [122, "module-sparknlp_jsl.eval"], [123, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [124, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [125, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [126, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [127, "module-sparknlp_jsl.finance.chunk_classification.deid"], [128, "module-sparknlp_jsl.finance.chunk_classification"], [129, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [130, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [131, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [132, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [133, "module-sparknlp_jsl.finance.graph"], [134, "module-sparknlp_jsl.finance.graph.relation_extraction"], [135, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [136, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [137, "module-sparknlp_jsl.finance"], [138, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [139, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [140, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [141, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"], [142, "module-sparknlp_jsl.finance.sequence_classification"], [143, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [144, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [145, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [146, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [147, "module-sparknlp_jsl.finance.sequence_generation"], [148, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [149, "module-sparknlp_jsl.finance.token_classification"], [150, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [151, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [152, "module-sparknlp_jsl.finance.token_classification.ner"], [153, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [154, "module-sparknlp_jsl.functions"], [155, "module-sparknlp_jsl"], [156, "module-sparknlp_jsl.internal"], [157, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [158, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [159, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [160, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [161, "module-sparknlp_jsl.legal.chunk_classification.deid"], [162, "module-sparknlp_jsl.legal.chunk_classification"], [163, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [164, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [165, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [166, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [167, "module-sparknlp_jsl.legal.graph"], [168, "module-sparknlp_jsl.legal.graph.relation_extraction"], [169, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [170, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [171, "module-sparknlp_jsl.legal"], [172, "module-sparknlp_jsl.legal.sequence_classification"], [173, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [174, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [175, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [176, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"], [177, "module-sparknlp_jsl.legal.sequence_generation"], [178, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [179, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [180, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [181, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [182, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [183, "module-sparknlp_jsl.legal.token_classification"], [184, "module-sparknlp_jsl.legal.token_classification.ner"], [185, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [186, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [187, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [188, "module-sparknlp_jsl.llm"], [189, "module-sparknlp_jsl.llm.llm_loader"], [190, "module-sparknlp_jsl.modelTracer"], [191, "module-sparknlp_jsl.pipeline_output_parser"], [192, "module-sparknlp_jsl.pipeline_tracer"], [193, "module-sparknlp_jsl.pretrained"], [194, "module-sparknlp_jsl.structured_deidentification"], [195, "module-sparknlp_jsl.text_to_documents_columns"], [196, "module-sparknlp_jsl.training"], [197, "module-sparknlp_jsl.training_log_parser"], [198, "module-sparknlp_jsl.transpiler.builder"], [199, "module-sparknlp_jsl.transpiler.class_names"], [200, "module-sparknlp_jsl.transpiler.converter"], [201, "module-sparknlp_jsl.transpiler.externalSources"], [202, "module-sparknlp_jsl.transpiler"], [203, "module-sparknlp_jsl.transpiler.nlu_2_python"], [204, "module-sparknlp_jsl.transpiler.python_2_scala"], [205, "module-sparknlp_jsl.transpiler.source_loader"], [206, "module-sparknlp_jsl.transpiler.uploader"], [207, "module-sparknlp_jsl.updateModels"], [208, "module-sparknlp_jsl.util"], [209, "module-sparknlp_jsl.utils.alab_utils"], [210, "module-sparknlp_jsl.utils.conll_parse"], [211, "module-sparknlp_jsl.utils.deidentification_utils"], [212, "module-sparknlp_jsl.utils.imports"], [213, "module-sparknlp_jsl.utils"], [214, "module-sparknlp_jsl.utils.java_helper"], [215, "module-sparknlp_jsl.utils.licensed_annotator_type"], [216, "module-sparknlp_jsl.utils.log_parse"], [217, "module-sparknlp_jsl.utils.ner_utils"], [218, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [219, "module-sparknlp_jsl.utils.ocr_utils"], [220, "module-sparknlp_jsl.utils.risk_adjustment_utils"], [221, "module-sparknlp_jsl.utils.run_transpiled_code"], [222, "module-sparknlp_jsl.utils.training_log_parser_utils"], [223, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "pub_version() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.pub_version"], [3, "sparknlp_jsl.pub_version"], [155, "sparknlp_jsl.pub_version"]], "sparknlp_jsl": [[0, "module-sparknlp_jsl"], [3, "module-sparknlp_jsl"], [155, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.start"], [3, "sparknlp_jsl.start"], [155, "sparknlp_jsl.start"]], "version() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.version"], [3, "sparknlp_jsl.version"], [155, "sparknlp_jsl.version"]], "sparknlp_jsl.annotator": [[4, "module-sparknlp_jsl.annotator"], [67, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.finance": [[5, "module-sparknlp_jsl.finance"], [137, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.legal": [[6, "module-sparknlp_jsl.legal"], [171, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.utils": [[7, "module-sparknlp_jsl.utils"], [213, "module-sparknlp_jsl.utils"]], "annotationlab (class in sparknlp_jsl.alab)": [[8, "sparknlp_jsl.alab.AnnotationLab"]], "base_url (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.base_url"]], "client_id (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.client_id"]], "client_secret (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.client_secret"]], "cookies (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.cookies"]], "create_project() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_conll_data_from_visualner() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_conll_data_from_visualner"]], "get_project_config() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "http_success_codes (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.http_success_codes"]], "password (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.password"]], "review_annotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[8, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "username (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.username"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "clear() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.clear"]], "copy() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.copy"]], "explainparam() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.explainParam"]], "explainparams() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.explainParams"]], "extractparammap() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.extractParamMap"]], "getinputcols() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getInputCols"]], "getlazyannotator() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getLazyAnnotator"]], "getordefault() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getOrDefault"]], "getoutputcol() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getOutputCol"]], "getparam() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getParam"]], "getparamvalue() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getParamValue"]], "getter_attrs (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getter_attrs"]], "hasdefault() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.hasDefault"]], "hasparam() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.hasParam"]], "inputannotatortypes (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputcols (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputCols"]], "inputcolsvalidation() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputColsValidation"]], "inputtype (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "isdefined() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.isDefined"]], "isset() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.isSet"]], "lazyannotator (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.lazyAnnotator"]], "load() (annotationmerger class method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.load"]], "name (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "optionalinputannotatortypes (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "outputcol (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputCol"]], "read() (annotationmerger class method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.read"]], "save() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.save"]], "set() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.set"]], "setforceinputtypevalidation() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setForceInputTypeValidation"]], "setinputcols() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "setlazyannotator() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setLazyAnnotator"]], "setoutputcol() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setOutputCol"]], "setparamvalue() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setParamValue"]], "setparams() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setParams"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[9, "module-sparknlp_jsl.annotator.annotation_merger"]], "transform() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.transform"]], "uid (annotationmerger attribute)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.uid"]], "write() (annotationmerger method)": [[9, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.write"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.batchSize"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.classes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.classes"]], "clear() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.clear"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.clear"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.clear"]], "clear() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.clear"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.clear"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.clear"]], "configprotobytes (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.configProtoBytes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.configProtoBytes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "copy() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.copy"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.copy"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.copy"]], "copy() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.copy"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.copy"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.copy"]], "datasetinfo (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.datasetInfo"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.datasetInfo"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.datasetInfo"]], "datasetinfo (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.datasetInfo"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.datasetInfo"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.datasetInfo"]], "doexceptionhandling (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"]], "dropout (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.dropout"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.endCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.endCol"]], "engine (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.engine"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.engine"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.engine"]], "entityassertioncasesensitive (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"]], "epochs (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.epochs"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.epochs"]], "explainparam() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.explainParam"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParam"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParam"]], "explainparam() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.explainParam"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParam"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParam"]], "explainparams() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.explainParams"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParams"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParams"]], "explainparams() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.explainParams"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParams"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParams"]], "extractparammap() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.extractParamMap"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.extractParamMap"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.extractParamMap"]], "extractparammap() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.extractParamMap"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.extractParamMap"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.extractParamMap"]], "fit() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.fit"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.fit"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.fit"]], "fitmultiple() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.fitMultiple"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.fitMultiple"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.fitMultiple"]], "getengine() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getEngine"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getEngine"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getEngine"]], "getentityassertion() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getEntityAssertion"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getEntityAssertion"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getEntityAssertion"]], "getinputcols() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getInputCols"]], "getinputcols() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getInputCols"]], "getlazyannotator() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"]], "getlazyannotator() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"]], "getordefault() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getOrDefault"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOrDefault"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOrDefault"]], "getordefault() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getOrDefault"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getOrDefault"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getOrDefault"]], "getoutputcol() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOutputCol"]], "getoutputcol() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getOutputCol"]], "getparam() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getParam"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParam"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParam"]], "getparam() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getParam"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getParam"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getParam"]], "getparamvalue() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParamValue"]], "getparamvalue() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getParamValue"]], "getreplacelabels() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getReplaceLabels"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getReplaceLabels"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getReplaceLabels"]], "getstorageref() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getStorageRef"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getStorageRef"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getStorageRef"]], "getter_attrs (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getter_attrs"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getter_attrs"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getter_attrs"]], "getter_attrs (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getter_attrs"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getter_attrs"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getter_attrs"]], "graphfile (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFile"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFolder"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "hasdefault() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.hasDefault"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasDefault"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasDefault"]], "hasdefault() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.hasDefault"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.hasDefault"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.hasDefault"]], "hasparam() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.hasParam"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasParam"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasParam"]], "hasparam() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.hasParam"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.hasParam"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.hasParam"]], "includeconfidence (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.includeConfidence"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.includeConfidence"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "inputcols (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputCols"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputCols"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputCols"]], "inputcols (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputCols"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputCols"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputCols"]], "inputcolsvalidation() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputColsValidation"]], "inputcolsvalidation() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputColsValidation"]], "isdefined() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.isDefined"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.isDefined"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.isDefined"]], "isdefined() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.isDefined"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.isDefined"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.isDefined"]], "isset() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.isSet"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.isSet"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.isSet"]], "isset() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.isSet"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.isSet"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.isSet"]], "label (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.label"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.label"]], "lazyannotator (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"]], "lazyannotator (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.lazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.lazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.lazyAnnotator"]], "learningrate (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.learningRate"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.learningRate"]], "load() (assertiondlapproach class method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.load"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.load"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.load"]], "load() (assertiondlmodel class method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.load"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.load"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.load"]], "maxsentlen (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.maxSentLen"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.maxSentLen"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "optionalinputannotatortypes (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputcol (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputCol"]], "outputcol (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.outputCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.outputCol"]], "outputlogspath (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputLogsPath"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "read() (assertiondlapproach class method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.read"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.read"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.read"]], "read() (assertiondlmodel class method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.read"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.read"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.read"]], "save() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.save"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.save"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.save"]], "save() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.save"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.save"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.save"]], "scopewindow (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.scopeWindow"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.scopeWindow"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "set() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.set"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.set"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.set"]], "set() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.set"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.set"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.set"]], "setbatchsize() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBatchSize"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdatasetinfo() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"]], "setdatasetinfo() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setDatasetInfo"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setDatasetInfo"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setDatasetInfo"]], "setdoexceptionhandling() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"]], "setdropout() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDropout"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEndCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setentityassertion() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertion"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertion"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertion"]], "setentityassertioncasesensitive() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"]], "setepochs() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEpochs"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setforceinputtypevalidation() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"]], "setgraphfile() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFile"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFolder"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setinputcols() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setInputCols"]], "setinputcols() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setInputCols"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setInputCols"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setInputCols"]], "setlabelcol() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLabelCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlazyannotator() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"]], "setlazyannotator() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"]], "setlearningrate() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLearningRate"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputcol() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputCol"]], "setoutputcol() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setOutputCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setOutputCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setOutputCol"]], "setoutputlogspath() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setparamvalue() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setParamValue"]], "setparamvalue() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setParamValue"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setParamValue"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setParamValue"]], "setparams() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setParams"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setParams"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setParams"]], "setreplacelabels() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setReplaceLabels"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setReplaceLabels"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setReplaceLabels"]], "setscopewindow() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setScopeWindow"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setScopeWindow"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setStartCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "setstorageref() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setStorageRef"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setStorageRef"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setStorageRef"]], "settestdataset() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setTestDataset"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setValidationSplit"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setVerbose"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "skiplpinputcolsvalidation (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[10, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.startCol"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.startCol"]], "storageref (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.storageRef"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.storageRef"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.storageRef"]], "targetnerlabels (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.targetNerLabels"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.testDataset"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.testDataset"]], "transform() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.transform"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.transform"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.transform"]], "uid (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.uid"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.uid"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.uid"]], "uid (assertiondlmodel attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.uid"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.uid"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.uid"]], "validationsplit (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.validationSplit"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.verbose"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.verbose"]], "write() (assertiondlapproach method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.write"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.write"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.write"]], "write() (assertiondlmodel method)": [[10, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.write"], [123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.write"], [157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.write"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "clear() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.clear"]], "copy() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.copy"]], "explainparam() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.explainParam"]], "explainparams() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.explainParams"]], "extractparammap() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.extractParamMap"]], "getordefault() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getOrDefault"]], "getparam() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getParam"]], "getparamvalue() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getParamValue"]], "getter_attrs (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getter_attrs"]], "hasdefault() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.hasDefault"]], "hasparam() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.hasParam"]], "inputannotatortypes (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "isdefined() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.isDefined"]], "isset() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.isSet"]], "kwargs (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.kwargs"]], "load() (assertionchunkconverter class method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.load"]], "name (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "read() (assertionchunkconverter class method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.read"]], "save() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.save"]], "set() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.set"]], "setchunkbegincol() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setmetadatafields() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setMetadataFields"]], "setoutputcol() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparamvalue() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParamValue"]], "setparams() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[11, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "transform() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.transform"]], "uid (assertionchunkconverter attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.uid"]], "write() (assertionchunkconverter method)": [[11, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.write"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "clear() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.clear"]], "clear() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.clear"]], "copy() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.copy"]], "copy() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.copy"]], "enetparam (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "explainparam() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.explainParam"]], "explainparam() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.explainParam"]], "explainparams() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.explainParams"]], "explainparams() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.explainParams"]], "extractparammap() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.extractParamMap"]], "extractparammap() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.extractParamMap"]], "fit() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.fit"]], "fitmultiple() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.fitMultiple"]], "getinputcols() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getInputCols"]], "getinputcols() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getInputCols"]], "getlazyannotator() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getLazyAnnotator"]], "getlazyannotator() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getLazyAnnotator"]], "getordefault() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getOrDefault"]], "getordefault() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getOrDefault"]], "getoutputcol() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getOutputCol"]], "getoutputcol() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getOutputCol"]], "getparam() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getParam"]], "getparam() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getParam"]], "getparamvalue() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getParamValue"]], "getparamvalue() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getParamValue"]], "getstorageref() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getStorageRef"]], "getter_attrs (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getter_attrs"]], "getter_attrs (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getter_attrs"]], "hasdefault() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.hasDefault"]], "hasdefault() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.hasDefault"]], "hasparam() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.hasParam"]], "hasparam() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.hasParam"]], "inputannotatortypes (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "inputcols (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputCols"]], "inputcols (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputCols"]], "inputcolsvalidation() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputColsValidation"]], "inputcolsvalidation() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputColsValidation"]], "isdefined() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.isDefined"]], "isdefined() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.isDefined"]], "isset() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.isSet"]], "isset() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.isSet"]], "label (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "lazyannotator (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.lazyAnnotator"]], "lazyannotator (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.lazyAnnotator"]], "load() (assertionlogregapproach class method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.load"]], "load() (assertionlogregmodel class method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.load"]], "maxiter (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "optionalinputannotatortypes (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.optionalInputAnnotatorTypes"]], "outputannotatortype (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "outputcol (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputCol"]], "outputcol (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputCol"]], "pretrained() (assertionlogregmodel static method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "read() (assertionlogregapproach class method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.read"]], "read() (assertionlogregmodel class method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.read"]], "regparam (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "save() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.save"]], "save() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.save"]], "set() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.set"]], "set() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.set"]], "setafter() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setforceinputtypevalidation() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setForceInputTypeValidation"]], "setinputcols() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setInputCols"]], "setinputcols() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setInputCols"]], "setlabelcol() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setlazyannotator() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLazyAnnotator"]], "setlazyannotator() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setLazyAnnotator"]], "setmaxiter() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setoutputcol() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setOutputCol"]], "setoutputcol() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setOutputCol"]], "setparamvalue() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setParamValue"]], "setparamvalue() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setParamValue"]], "setparams() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setParams"]], "setreg() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "setstorageref() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setStorageRef"]], "settargetnerlabels() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "skiplpinputcolsvalidation (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[12, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "storageref (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.storageRef"]], "targetnerlabels (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "transform() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.transform"]], "uid (assertionlogregapproach attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.uid"]], "uid (assertionlogregmodel attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.uid"]], "write() (assertionlogregapproach method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.write"]], "write() (assertionlogregmodel method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.write"]], "assertionmerger (class in sparknlp_jsl.annotator.assertion.assertion_merger)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger"]], "applyfilterbeforemerge (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.applyFilterBeforeMerge"]], "assertionsourceprecedence (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.assertionSourcePrecedence"]], "blacklist (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.blackList"]], "casesensitive (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.caseSensitive"]], "clear() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.clear"]], "copy() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.copy"]], "defaultconfidence (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.defaultConfidence"]], "explainparam() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.explainParam"]], "explainparams() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.explainParams"]], "extractparammap() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.extractParamMap"]], "getinputcols() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getInputCols"]], "getlazyannotator() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getLazyAnnotator"]], "getordefault() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getOrDefault"]], "getoutputcol() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getOutputCol"]], "getparam() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getParam"]], "getparamvalue() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getParamValue"]], "getter_attrs (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getter_attrs"]], "hasdefault() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.hasDefault"]], "hasparam() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.hasParam"]], "inputannotatortypes (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputAnnotatorTypes"]], "inputcols (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputCols"]], "inputcolsvalidation() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputColsValidation"]], "isdefined() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.isDefined"]], "isset() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.isSet"]], "lazyannotator (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.lazyAnnotator"]], "load() (assertionmerger class method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.load"]], "mergeoverlapping (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.mergeOverlapping"]], "name (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.name"]], "optionalinputannotatortypes (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.optionalInputAnnotatorTypes"]], "orderingfeatures (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.orderingFeatures"]], "outputannotatortype (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.outputAnnotatorType"]], "outputcol (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.outputCol"]], "read() (assertionmerger class method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.read"]], "save() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.save"]], "selectionstrategy (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.selectionStrategy"]], "set() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.set"]], "setapplyfilterbeforemerge() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setApplyFilterBeforeMerge"]], "setassertionsourceprecedence() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setAssertionSourcePrecedence"]], "setassertionsconfidence() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setAssertionsConfidence"]], "setblacklist() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setBlackList"]], "setcasesensitive() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setCaseSensitive"]], "setdefaultconfidence() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setDefaultConfidence"]], "setdenylist() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setDenyList"]], "setforceinputtypevalidation() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setForceInputTypeValidation"]], "setinputcols() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setInputCols"]], "setlazyannotator() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setLazyAnnotator"]], "setmergeoverlapping() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setMergeOverlapping"]], "setorderingfeatures() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setOrderingFeatures"]], "setoutputcol() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setOutputCol"]], "setparamvalue() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setParamValue"]], "setparams() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setParams"]], "setselectionstrategy() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setSelectionStrategy"]], "setsortbybegin() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setSortByBegin"]], "setwhitelist() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setWhiteList"]], "skiplpinputcolsvalidation (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.skipLPInputColsValidation"]], "sortbybegin (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.sortByBegin"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[13, "module-sparknlp_jsl.annotator.assertion.assertion_merger"]], "transform() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.transform"]], "uid (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.uid"]], "whitelist (assertionmerger attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.whiteList"]], "write() (assertionmerger method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.write"]], "contextualassertion (class in sparknlp_jsl.annotator.assertion.contextual_assertion)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion"]], "addprefixkeywords() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.addPrefixKeywords"]], "addsuffixkeywords() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.addSuffixKeywords"]], "assertion (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.assertion"]], "casesensitive (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.caseSensitive"]], "clear() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.clear"]], "confidencecalculationdirection (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.confidenceCalculationDirection"]], "copy() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.copy"]], "doexceptionhandling (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.doExceptionHandling"]], "explainparam() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.explainParam"]], "explainparams() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.explainParams"]], "extractparammap() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.extractParamMap"]], "getinputcols() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getInputCols"]], "getlazyannotator() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getLazyAnnotator"]], "getordefault() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getOrDefault"]], "getoutputcol() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getOutputCol"]], "getparam() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getParam"]], "getparamvalue() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getParamValue"]], "getter_attrs (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getter_attrs"]], "hasdefault() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.hasDefault"]], "hasparam() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.hasParam"]], "includechunktoscope (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.includeChunkToScope"]], "inputannotatortypes (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputAnnotatorTypes"]], "inputcols (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputCols"]], "inputcolsvalidation() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputColsValidation"]], "isdefined() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.isDefined"]], "isset() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.isSet"]], "lazyannotator (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.lazyAnnotator"]], "load() (contextualassertion class method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.load"]], "name (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.name"]], "optionalinputannotatortypes (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.outputAnnotatorType"]], "outputcol (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.outputCol"]], "prefixandsuffixmatch (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.prefixAndSuffixMatch"]], "pretrained() (contextualassertion static method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.pretrained"]], "read() (contextualassertion class method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.read"]], "save() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.save"]], "scopewindow (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.scopeWindow"]], "scopewindowdelimiters (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.scopeWindowDelimiters"]], "set() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.set"]], "setassertion() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setAssertion"]], "setcasesensitive() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setCaseSensitive"]], "setconfidencecalculationdirection() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setConfidenceCalculationDirection"]], "setdoexceptionhandling() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setDoExceptionHandling"]], "setexceptionkeywords() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setExceptionKeywords"]], "setexceptionregexpatterns() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setExceptionRegexPatterns"]], "setforceinputtypevalidation() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setForceInputTypeValidation"]], "setincludechunktoscope() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setIncludeChunkToScope"]], "setinputcols() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setInputCols"]], "setlazyannotator() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setLazyAnnotator"]], "setoutputcol() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setOutputCol"]], "setparamvalue() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setParamValue"]], "setparams() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setParams"]], "setprefixandsuffixmatch() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixAndSuffixMatch"]], "setprefixkeywords() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixKeywords"]], "setprefixregexpatterns() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixRegexPatterns"]], "setscopewindow() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setScopeWindow"]], "setscopewindowdelimiters() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setScopeWindowDelimiters"]], "setsuffixkeywords() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setSuffixKeywords"]], "setsuffixregexpatterns() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setSuffixRegexPatterns"]], "skiplpinputcolsvalidation (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[14, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"]], "transform() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.transform"]], "uid (contextualassertion attribute)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.uid"]], "write() (contextualassertion method)": [[14, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.write"]], "fewshotassertionsentenceconverter (class in sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter"]], "clear() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.clear"]], "copy() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.copy"]], "explainparam() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.explainParam"]], "explainparams() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.explainParams"]], "extractparammap() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.extractParamMap"]], "getordefault() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getOrDefault"]], "getparam() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getParam"]], "getparamvalue() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getParamValue"]], "getter_attrs (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getter_attrs"]], "hasdefault() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.hasDefault"]], "hasparam() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.hasParam"]], "inputannotatortypes (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.inputAnnotatorTypes"]], "inputcols (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.inputCols"]], "isdefined() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.isDefined"]], "isset() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.isSet"]], "kwargs (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.kwargs"]], "load() (fewshotassertionsentenceconverter class method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.load"]], "name (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.name"]], "outputannotatortype (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.outputAnnotatorType"]], "outputcol (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.outputCol"]], "read() (fewshotassertionsentenceconverter class method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.read"]], "save() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.save"]], "scopewindow (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.scopeWindow"]], "set() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.set"]], "setparamvalue() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setParamValue"]], "setparams() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setParams"]], "setscopewindow() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setScopeWindow"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[15, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"]], "transform() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.transform"]], "uid (fewshotassertionsentenceconverter attribute)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.uid"]], "write() (fewshotassertionsentenceconverter method)": [[15, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.write"]], "sparknlp_jsl.annotator.assertion": [[16, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "clear() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.clear"]], "copy() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.copy"]], "explainparam() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.explainParam"]], "explainparams() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.explainParams"]], "extractparammap() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.extractParamMap"]], "getinputcols() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getInputCols"]], "getlazyannotator() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getLazyAnnotator"]], "getordefault() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getOrDefault"]], "getoutputcol() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getOutputCol"]], "getparam() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getParam"]], "getparamvalue() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getParamValue"]], "getter_attrs (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getter_attrs"]], "hasdefault() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.hasDefault"]], "hasparam() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.hasParam"]], "inputannotatortypes (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "inputcols (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputCols"]], "inputcolsvalidation() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputColsValidation"]], "isdefined() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.isDefined"]], "isset() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.isSet"]], "lazyannotator (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.lazyAnnotator"]], "load() (chunk2token class method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.load"]], "name (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "optionalinputannotatortypes (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.optionalInputAnnotatorTypes"]], "outputannotatortype (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "outputcol (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputCol"]], "read() (chunk2token class method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.read"]], "save() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.save"]], "set() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.set"]], "setforceinputtypevalidation() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setForceInputTypeValidation"]], "setinputcols() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setInputCols"]], "setlazyannotator() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setLazyAnnotator"]], "setoutputcol() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setOutputCol"]], "setparamvalue() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setParamValue"]], "setparams() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setParams"]], "skiplpinputcolsvalidation (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunk2_token": [[17, "module-sparknlp_jsl.annotator.chunk2_token"]], "transform() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.transform"]], "uid (chunk2token attribute)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.uid"]], "write() (chunk2token method)": [[17, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.write"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "blacklist (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.blackList"]], "casesensitive (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "clear() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.clear"]], "copy() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.copy"]], "criteria (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "explainparam() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.explainParam"]], "explainparams() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.explainParams"]], "extractparammap() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.extractParamMap"]], "filtervalue (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.filterValue"]], "getinputcols() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getInputCols"]], "getlazyannotator() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getLazyAnnotator"]], "getordefault() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getOrDefault"]], "getoutputcol() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getOutputCol"]], "getparam() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getParam"]], "getparamvalue() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getParamValue"]], "getter_attrs (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getter_attrs"]], "hasdefault() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.hasDefault"]], "hasparam() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.hasParam"]], "inputannotatortypes (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "inputcols (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputCols"]], "inputcolsvalidation() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputColsValidation"]], "isdefined() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.isDefined"]], "isset() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.isSet"]], "lazyannotator (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.lazyAnnotator"]], "load() (assertionfilterer class method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.load"]], "name (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "optionalinputannotatortypes (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "outputcol (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputCol"]], "read() (assertionfilterer class method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.read"]], "regex (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "save() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.save"]], "set() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.set"]], "setblacklist() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setBlackList"]], "setcasesensitive() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "setcriteria() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "setdenylist() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setDenyList"]], "setfiltervalue() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setFilterValue"]], "setforceinputtypevalidation() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setForceInputTypeValidation"]], "setinputcols() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setInputCols"]], "setlazyannotator() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setLazyAnnotator"]], "setoutputcol() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setOutputCol"]], "setparamvalue() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setParamValue"]], "setparams() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setParams"]], "setregex() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setRegex"]], "setwhitelist() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setWhiteList"]], "skiplpinputcolsvalidation (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[18, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "transform() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.transform"]], "uid (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.uid"]], "whitelist (assertionfilterer attribute)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "write() (assertionfilterer method)": [[18, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.write"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "clear() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.clear"]], "copy() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.copy"]], "explainparam() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.explainParam"]], "explainparams() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.explainParams"]], "extractparammap() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.extractParamMap"]], "getinputcols() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getInputCols"]], "getlazyannotator() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getLazyAnnotator"]], "getordefault() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getOrDefault"]], "getoutputcol() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getOutputCol"]], "getparam() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getParam"]], "getparamvalue() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getParamValue"]], "getter_attrs (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getter_attrs"]], "hasdefault() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.hasDefault"]], "hasparam() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.hasParam"]], "inputannotatortypes (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "inputcols (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputCols"]], "inputcolsvalidation() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputColsValidation"]], "isdefined() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.isDefined"]], "isset() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.isSet"]], "lazyannotator (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.lazyAnnotator"]], "load() (chunkconverter class method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.load"]], "name (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "optionalinputannotatortypes (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "outputcol (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputCol"]], "read() (chunkconverter class method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.read"]], "save() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.save"]], "set() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.set"]], "setforceinputtypevalidation() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setForceInputTypeValidation"]], "setinputcols() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setInputCols"]], "setlazyannotator() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setLazyAnnotator"]], "setoutputcol() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setOutputCol"]], "setparamvalue() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setParamValue"]], "setparams() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setParams"]], "skiplpinputcolsvalidation (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[19, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "transform() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.transform"]], "uid (chunkconverter attribute)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.uid"]], "write() (chunkconverter method)": [[19, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.write"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "batchsize (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.batchSize"]], "casesensitive (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.caseSensitive"]], "clear() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.clear"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "configprotobytes (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.configProtoBytes"]], "copy() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.copy"]], "dimension (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dimension"]], "divergence (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "explainparam() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.explainParam"]], "explainparams() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.explainParams"]], "extractparammap() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.extractParamMap"]], "getbatchsize() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getBatchSize"]], "getcasesensitive() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getCaseSensitive"]], "getdimension() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getDimension"]], "getinputcols() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getInputCols"]], "getlazyannotator() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getLazyAnnotator"]], "getordefault() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getOrDefault"]], "getoutputcol() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getOutputCol"]], "getparam() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getParam"]], "getparamvalue() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getParamValue"]], "getstorageref() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getStorageRef"]], "getter_attrs (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getter_attrs"]], "hasdefault() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.hasDefault"]], "hasparam() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.hasParam"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "inputcols (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputCols"]], "inputcolsvalidation() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputColsValidation"]], "isdefined() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isDefined"]], "islong (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isLong"]], "isset() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isSet"]], "lazyannotator (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.lazyAnnotator"]], "load() (chunkkeyphraseextraction class method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.load"]], "loadsavedmodel() (chunkkeyphraseextraction static method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.loadSavedModel"]], "name (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "optionalinputannotatortypes (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "outputcol (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputCol"]], "pretrained() (chunkkeyphraseextraction static method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "read() (chunkkeyphraseextraction class method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.read"]], "save() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.save"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "set() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.set"]], "setbatchsize() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setBatchSize"]], "setcasesensitive() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setCaseSensitive"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setconfigprotobytes() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConfigProtoBytes"]], "setdimension() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDimension"]], "setdivergence() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setinputcols() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setInputCols"]], "setislong() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setIsLong"]], "setlazyannotator() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setLazyAnnotator"]], "setoutputcol() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setOutputCol"]], "setparamvalue() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setParamValue"]], "setparams() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setParams"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "setstorageref() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setStorageRef"]], "settopn() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[20, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "storageref (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.storageRef"]], "topn (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "transform() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.transform"]], "uid (chunkkeyphraseextraction attribute)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.uid"]], "write() (chunkkeyphraseextraction method)": [[20, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.write"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "clear() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.clear"]], "copy() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.copy"]], "defaultentity (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "explainparam() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.explainParam"]], "explainparams() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.explainParams"]], "extractparammap() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.extractParamMap"]], "getinputcols() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getInputCols"]], "getlazyannotator() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getLazyAnnotator"]], "getordefault() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getOrDefault"]], "getoutputcol() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getOutputCol"]], "getparam() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getParam"]], "getparamvalue() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getParamValue"]], "getter_attrs (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getter_attrs"]], "groupbysentences (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "hasdefault() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.hasDefault"]], "hasparam() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.hasParam"]], "inputannotatortypes (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "inputcols (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputCols"]], "inputcolsvalidation() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputColsValidation"]], "insertchunk (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "isdefined() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.isDefined"]], "isset() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.isSet"]], "lazyannotator (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.lazyAnnotator"]], "load() (chunksentencesplitter class method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.load"]], "name (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "optionalinputannotatortypes (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "outputcol (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputCol"]], "read() (chunksentencesplitter class method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.read"]], "save() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.save"]], "set() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.set"]], "setdefaultentity() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setforceinputtypevalidation() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setForceInputTypeValidation"]], "setgroupbysentences() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinputcols() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInputCols"]], "setinsertchunk() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "setlazyannotator() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setLazyAnnotator"]], "setoutputcol() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setOutputCol"]], "setparamvalue() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setParamValue"]], "setparams() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setParams"]], "skiplpinputcolsvalidation (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[21, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "transform() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.transform"]], "uid (chunksentencesplitter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.uid"]], "write() (chunksentencesplitter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.write"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "casesensitive (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.caseSensitive"]], "casesensitive (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.caseSensitive"]], "clear() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.clear"]], "clear() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.clear"]], "copy() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.copy"]], "copy() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.copy"]], "criteria (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "doexceptionhandling (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.doExceptionHandling"]], "entitiesconfidence (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.entitiesConfidence"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "entitiesconfidenceresourceasjsonstring (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResourceAsJsonString"]], "explainparam() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.explainParam"]], "explainparam() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.explainParam"]], "explainparams() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.explainParams"]], "explainparams() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.explainParams"]], "extractparammap() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.extractParamMap"]], "extractparammap() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.extractParamMap"]], "filtervalue (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "fit() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.fit"]], "fitmultiple() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.fitMultiple"]], "getinputcols() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getInputCols"]], "getinputcols() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getInputCols"]], "getlazyannotator() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getLazyAnnotator"]], "getlazyannotator() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getLazyAnnotator"]], "getordefault() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getOrDefault"]], "getordefault() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getOrDefault"]], "getoutputcol() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getOutputCol"]], "getoutputcol() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getOutputCol"]], "getparam() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getParam"]], "getparam() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getParam"]], "getparamvalue() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getParamValue"]], "getparamvalue() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getParamValue"]], "getter_attrs (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getter_attrs"]], "getter_attrs (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getter_attrs"]], "hasdefault() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.hasDefault"]], "hasdefault() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.hasDefault"]], "hasparam() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.hasParam"]], "hasparam() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.hasParam"]], "inputannotatortypes (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "inputcols (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputCols"]], "inputcols (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputCols"]], "inputcolsvalidation() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputColsValidation"]], "inputcolsvalidation() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputColsValidation"]], "isdefined() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.isDefined"]], "isdefined() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.isDefined"]], "isset() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.isSet"]], "isset() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.isSet"]], "lazyannotator (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.lazyAnnotator"]], "lazyannotator (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.lazyAnnotator"]], "load() (chunkfilterer class method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.load"]], "load() (chunkfiltererapproach class method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.load"]], "name (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "optionalinputannotatortypes (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "outputcol (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputCol"]], "outputcol (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputCol"]], "read() (chunkfilterer class method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.read"]], "read() (chunkfiltererapproach class method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.read"]], "regex (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "save() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.save"]], "save() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.save"]], "set() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.set"]], "set() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.set"]], "setblacklist() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcasesensitive() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCaseSensitive"]], "setcasesensitive() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCaseSensitive"]], "setcriteria() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setdenylist() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setDenyList"]], "setdenylist() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setDenyList"]], "setdoexceptionhandling() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setDoExceptionHandling"]], "setentitiesconfidence() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresourceasjsonstring() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResourceAsJsonString"]], "setfilterentity() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setfiltervalue() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterValue"]], "setfiltervalue() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterValue"]], "setforceinputtypevalidation() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setForceInputTypeValidation"]], "setinputcols() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setInputCols"]], "setinputcols() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setInputCols"]], "setlazyannotator() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setLazyAnnotator"]], "setlazyannotator() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setLazyAnnotator"]], "setoutputcol() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setOutputCol"]], "setoutputcol() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setOutputCol"]], "setparamvalue() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setParamValue"]], "setparamvalue() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setParamValue"]], "setparams() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setParams"]], "setregex() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "skiplpinputcolsvalidation (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[22, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "transform() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.transform"]], "uid (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.uid"]], "uid (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.uid"]], "whitelist (chunkfilterer attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "write() (chunkfilterer method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.write"]], "write() (chunkfiltererapproach method)": [[22, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.write"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "clear() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.clear"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.clear"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.clear"]], "clear() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.clear"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.clear"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.clear"]], "copy() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.copy"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.copy"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.copy"]], "copy() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.copy"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.copy"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.copy"]], "dictionary (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.dictionary"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.dictionary"]], "doexceptionhandling (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.doExceptionHandling"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.doExceptionHandling"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.doExceptionHandling"]], "doexceptionhandling (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.doExceptionHandling"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.doExceptionHandling"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.doExceptionHandling"]], "doexceptionhandling (commonchunkmapperparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.doExceptionHandling"]], "enablecharfingerprintmatching (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "explainparam() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.explainParam"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParam"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParam"]], "explainparam() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.explainParam"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParam"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParam"]], "explainparams() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.explainParams"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParams"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParams"]], "explainparams() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.explainParams"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParams"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParams"]], "extractparammap() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.extractParamMap"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.extractParamMap"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.extractParamMap"]], "extractparammap() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.extractParamMap"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.extractParamMap"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.extractParamMap"]], "fit() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fit"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fit"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fit"]], "fitmultiple() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fitMultiple"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fitMultiple"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fitMultiple"]], "fuzzydistancescalingmode (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "getinputcols() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getInputCols"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getInputCols"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getInputCols"]], "getinputcols() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getInputCols"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getInputCols"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getInputCols"]], "getlazyannotator() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getLazyAnnotator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getLazyAnnotator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getLazyAnnotator"]], "getlazyannotator() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getLazyAnnotator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getLazyAnnotator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getLazyAnnotator"]], "getordefault() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getOrDefault"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOrDefault"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOrDefault"]], "getordefault() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getOrDefault"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOrDefault"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOrDefault"]], "getoutputcol() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getOutputCol"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOutputCol"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOutputCol"]], "getoutputcol() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getOutputCol"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOutputCol"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOutputCol"]], "getparam() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getParam"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParam"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParam"]], "getparam() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getParam"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParam"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParam"]], "getparamvalue() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getParamValue"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParamValue"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParamValue"]], "getparamvalue() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getParamValue"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParamValue"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParamValue"]], "getter_attrs (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getter_attrs"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getter_attrs"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getter_attrs"]], "getter_attrs (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getter_attrs"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getter_attrs"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getter_attrs"]], "hasdefault() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.hasDefault"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasDefault"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasDefault"]], "hasdefault() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.hasDefault"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasDefault"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasDefault"]], "hasparam() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.hasParam"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasParam"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasParam"]], "hasparam() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.hasParam"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasParam"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasParam"]], "inputannotatortypes (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "inputcols (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputCols"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputCols"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputCols"]], "inputcols (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputCols"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputCols"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputCols"]], "inputcolsvalidation() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputColsValidation"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputColsValidation"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputColsValidation"]], "inputcolsvalidation() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputColsValidation"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputColsValidation"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputColsValidation"]], "isdefined() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.isDefined"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isDefined"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isDefined"]], "isdefined() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.isDefined"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isDefined"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isDefined"]], "isset() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.isSet"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isSet"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isSet"]], "isset() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.isSet"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isSet"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isSet"]], "lazyannotator (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lazyAnnotator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lazyAnnotator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lazyAnnotator"]], "lazyannotator (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lazyAnnotator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lazyAnnotator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lazyAnnotator"]], "load() (chunkmapperapproach class method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.load"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.load"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.load"]], "load() (chunkmappermodel class method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.load"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.load"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.load"]], "lowercase (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lowerCase"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lowerCase"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lowerCase"]], "lowercase (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lowerCase"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lowerCase"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lowerCase"]], "lowercase (commonchunkmapperparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.multivaluesRelations"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.multivaluesRelations"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.multivaluesRelations"]], "multivaluesrelations (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.multivaluesRelations"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.multivaluesRelations"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.multivaluesRelations"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "optionalinputannotatortypes (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputAnnotatorType"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputAnnotatorType"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "outputcol (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputCol"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputCol"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputCol"]], "outputcol (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputCol"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputCol"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputCol"]], "pretrained() (chunkmappermodel static method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "read() (chunkmapperapproach class method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.read"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.read"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.read"]], "read() (chunkmappermodel class method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.read"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.read"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.read"]], "rel (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rel"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rel"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rel"]], "rel (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rel"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rel"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rel"]], "rel (commonchunkmapperparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rels"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rels"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rels"]], "rels (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rels"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rels"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rels"]], "rels (commonchunkmapperparams attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "save() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.save"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.save"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.save"]], "save() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.save"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.save"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.save"]], "set() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.set"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.set"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.set"]], "set() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.set"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.set"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.set"]], "setallowmultitokenchunk() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDictionary"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDictionary"]], "setdoexceptionhandling() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setDoExceptionHandling"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setDoExceptionHandling"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setDoExceptionHandling"]], "setdoexceptionhandling() (commonchunkmapperparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setDoExceptionHandling"]], "setenablecharfingerprintmatching() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setforceinputtypevalidation() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"]], "setfuzzydistancescalingmode() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setinputcols() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setInputCols"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setInputCols"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setInputCols"]], "setinputcols() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setInputCols"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setInputCols"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setInputCols"]], "setlazyannotator() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLazyAnnotator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLazyAnnotator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLazyAnnotator"]], "setlazyannotator() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLazyAnnotator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLazyAnnotator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLazyAnnotator"]], "setlowercase() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLowerCase"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLowerCase"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLowerCase"]], "setlowercase() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLowerCase"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLowerCase"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLowerCase"]], "setlowercase() (commonchunkmapperparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMultivaluesRelations"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMultivaluesRelations"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMultivaluesRelations"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setoutputcol() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setOutputCol"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setOutputCol"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setOutputCol"]], "setoutputcol() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setOutputCol"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setOutputCol"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setOutputCol"]], "setparamvalue() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setParamValue"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setParamValue"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setParamValue"]], "setparamvalue() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setParamValue"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParamValue"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParamValue"]], "setparams() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setParams"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParams"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParams"]], "setrel() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRel"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRel"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRel"]], "setrel() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRel"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRel"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRel"]], "setrel() (commonchunkmapperparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRels"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRels"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRels"]], "setrels() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRels"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRels"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRels"]], "setrels() (commonchunkmapperparams method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[23, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "transform() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.transform"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.transform"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.transform"]], "uid (chunkmapperapproach attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.uid"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.uid"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.uid"]], "uid (chunkmappermodel attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.uid"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.uid"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.uid"]], "write() (chunkmapperapproach method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.write"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.write"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.write"]], "write() (chunkmappermodel method)": [[23, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.write"], [129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.write"], [163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.write"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "clear() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.clear"]], "copy() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.copy"]], "explainparam() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.explainParam"]], "explainparams() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.explainParams"]], "extractparammap() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.extractParamMap"]], "getinputcols() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getInputCols"]], "getlazyannotator() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getLazyAnnotator"]], "getordefault() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getOrDefault"]], "getoutputcol() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getOutputCol"]], "getparam() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getParam"]], "getparamvalue() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getParamValue"]], "getter_attrs (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getter_attrs"]], "hasdefault() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.hasDefault"]], "hasparam() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.hasParam"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "inputcols (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputCols"]], "inputcolsvalidation() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputColsValidation"]], "isdefined() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.isDefined"]], "isset() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.isSet"]], "lazyannotator (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.lazyAnnotator"]], "load() (chunkmapperfilterer class method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.load"]], "name (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "optionalinputannotatortypes (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "outputcol (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputCol"]], "read() (chunkmapperfilterer class method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.read"]], "returncriteria (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "save() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.save"]], "set() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.set"]], "setforceinputtypevalidation() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setForceInputTypeValidation"]], "setinputcols() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setInputCols"]], "setlazyannotator() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setLazyAnnotator"]], "setoutputcol() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setOutputCol"]], "setparamvalue() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setParamValue"]], "setparams() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setParams"]], "setreturncriteria() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "skiplpinputcolsvalidation (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[24, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "transform() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.transform"]], "uid (chunkmapperfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.uid"]], "write() (chunkmapperfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.write"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "allowmultitokenchunk (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.allowMultiTokenChunk"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.allowMultiTokenChunk"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.allowMultiTokenChunk"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.allowMultiTokenChunk"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.allowMultiTokenChunk"]], "clear() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.clear"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.clear"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.clear"]], "clear() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.clear"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.clear"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.clear"]], "copy() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.copy"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.copy"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.copy"]], "copy() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.copy"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.copy"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.copy"]], "dictionary (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "doexceptionhandling (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.doExceptionHandling"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.doExceptionHandling"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.doExceptionHandling"]], "doexceptionhandling (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.doExceptionHandling"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.doExceptionHandling"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.doExceptionHandling"]], "enablecharfingerprintmatching (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableCharFingerprintMatching"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableCharFingerprintMatching"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableCharFingerprintMatching"]], "enablefuzzymatching (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableFuzzyMatching"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableFuzzyMatching"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableFuzzyMatching"]], "enabletokenfingerprintmatching (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableTokenFingerprintMatching"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableTokenFingerprintMatching"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableTokenFingerprintMatching"]], "explainparam() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.explainParam"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.explainParam"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.explainParam"]], "explainparam() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.explainParam"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.explainParam"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.explainParam"]], "explainparams() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.explainParams"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.explainParams"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.explainParams"]], "explainparams() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.explainParams"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.explainParams"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.explainParams"]], "extractparammap() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.extractParamMap"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.extractParamMap"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.extractParamMap"]], "extractparammap() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.extractParamMap"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.extractParamMap"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.extractParamMap"]], "fit() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fit"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fit"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fit"]], "fitmultiple() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fitMultiple"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fitMultiple"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fitMultiple"]], "fuzzydistancescalingmode (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyMatchingDistances"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistances"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistances"]], "getinputcols() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getInputCols"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getInputCols"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getInputCols"]], "getinputcols() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getInputCols"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getInputCols"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getInputCols"]], "getlazyannotator() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getLazyAnnotator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getLazyAnnotator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getLazyAnnotator"]], "getlazyannotator() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getLazyAnnotator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getLazyAnnotator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getLazyAnnotator"]], "getordefault() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getOrDefault"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getOrDefault"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getOrDefault"]], "getordefault() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getOrDefault"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getOrDefault"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getOrDefault"]], "getoutputcol() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getOutputCol"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getOutputCol"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getOutputCol"]], "getoutputcol() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getOutputCol"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getOutputCol"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getOutputCol"]], "getparam() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getParam"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getParam"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getParam"]], "getparam() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getParam"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getParam"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getParam"]], "getparamvalue() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getParamValue"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getParamValue"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getParamValue"]], "getparamvalue() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getParamValue"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getParamValue"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getParamValue"]], "getter_attrs (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getter_attrs"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getter_attrs"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getter_attrs"]], "getter_attrs (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getter_attrs"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getter_attrs"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getter_attrs"]], "hasdefault() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.hasDefault"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.hasDefault"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.hasDefault"]], "hasdefault() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.hasDefault"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.hasDefault"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.hasDefault"]], "hasparam() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.hasParam"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.hasParam"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.hasParam"]], "hasparam() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.hasParam"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.hasParam"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.hasParam"]], "inputannotatortypes (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "inputcols (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputCols"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputCols"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputCols"]], "inputcols (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputCols"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputCols"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputCols"]], "inputcolsvalidation() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputColsValidation"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputColsValidation"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputColsValidation"]], "inputcolsvalidation() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputColsValidation"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputColsValidation"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputColsValidation"]], "isdefined() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.isDefined"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.isDefined"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.isDefined"]], "isdefined() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.isDefined"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.isDefined"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.isDefined"]], "isset() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.isSet"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.isSet"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.isSet"]], "isset() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.isSet"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.isSet"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.isSet"]], "lazyannotator (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.lazyAnnotator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.lazyAnnotator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.lazyAnnotator"]], "lazyannotator (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.lazyAnnotator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.lazyAnnotator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.lazyAnnotator"]], "load() (docmapperapproach class method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.load"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.load"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.load"]], "load() (docmappermodel class method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.load"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.load"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.load"]], "lowercase (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.lowerCase"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.lowerCase"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.lowerCase"]], "lowercase (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.lowerCase"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.lowerCase"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.lowerCase"]], "maxcharngramfingerprint (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxCharNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxCharNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramFingerprint"]], "mincharngramfingerprint (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.minCharNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.minCharNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.minCharNgramFingerprint"]], "mintokenngramfingerprint (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.minTokenNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.minTokenNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.minTokenNgramFingerprint"]], "multivaluesrelations (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.multivaluesRelations"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.multivaluesRelations"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.multivaluesRelations"]], "multivaluesrelations (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.multivaluesRelations"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.multivaluesRelations"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.multivaluesRelations"]], "name (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "optionalinputannotatortypes (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.optionalInputAnnotatorTypes"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.optionalInputAnnotatorTypes"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.optionalInputAnnotatorTypes"]], "outputannotatortype (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "outputcol (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputCol"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputCol"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputCol"]], "outputcol (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputCol"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputCol"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputCol"]], "pretrained() (docmappermodel static method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "read() (docmapperapproach class method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.read"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.read"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.read"]], "read() (docmappermodel class method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.read"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.read"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.read"]], "rel (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.rel"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.rel"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.rel"]], "rel (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.rel"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.rel"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.rel"]], "rels (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.rels"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.rels"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.rels"]], "rels (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.rels"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.rels"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.rels"]], "save() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.save"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.save"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.save"]], "save() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.save"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.save"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.save"]], "set() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.set"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.set"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.set"]], "set() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.set"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.set"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.set"]], "setallowmultitokenchunk() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setAllowMultiTokenChunk"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setAllowMultiTokenChunk"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setAllowMultiTokenChunk"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setAllowMultiTokenChunk"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setAllowMultiTokenChunk"]], "setdictionary() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "setdoexceptionhandling() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDoExceptionHandling"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDoExceptionHandling"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setDoExceptionHandling"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setDoExceptionHandling"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setDoExceptionHandling"]], "setenablecharfingerprintmatching() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableFuzzyMatching"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableFuzzyMatching"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"]], "setforceinputtypevalidation() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setForceInputTypeValidation"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setForceInputTypeValidation"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setForceInputTypeValidation"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setForceInputTypeValidation"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setForceInputTypeValidation"]], "setfuzzydistancescalingmode() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyMatchingDistances"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistances"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistances"]], "setinputcols() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setInputCols"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setInputCols"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setInputCols"]], "setinputcols() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setInputCols"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setInputCols"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setInputCols"]], "setlazyannotator() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setLazyAnnotator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setLazyAnnotator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setLazyAnnotator"]], "setlazyannotator() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setLazyAnnotator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setLazyAnnotator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setLazyAnnotator"]], "setlowercase() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setLowerCase"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setLowerCase"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setLowerCase"]], "setlowercase() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setLowerCase"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setLowerCase"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setLowerCase"]], "setmaxcharngramfingerprint() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMinCharNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMinCharNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMultivaluesRelations"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMultivaluesRelations"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMultivaluesRelations"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMultivaluesRelations"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMultivaluesRelations"]], "setoutputcol() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setOutputCol"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setOutputCol"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setOutputCol"]], "setoutputcol() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setOutputCol"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setOutputCol"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setOutputCol"]], "setparamvalue() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setParamValue"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setParamValue"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setParamValue"]], "setparamvalue() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setParamValue"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setParamValue"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setParamValue"]], "setparams() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setParams"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setParams"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setParams"]], "setrel() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setRel"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setRel"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setRel"]], "setrel() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setRel"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setRel"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setRel"]], "setrels() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setRels"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setRels"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setRels"]], "setrels() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setRels"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setRels"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setRels"]], "skiplpinputcolsvalidation (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.skipLPInputColsValidation"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.skipLPInputColsValidation"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.skipLPInputColsValidation"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.skipLPInputColsValidation"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.docmapper": [[25, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "transform() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.transform"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.transform"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.transform"]], "uid (docmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.uid"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.uid"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.uid"]], "uid (docmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.uid"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.uid"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.uid"]], "write() (docmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.write"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.write"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.write"]], "write() (docmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.write"], [130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.write"], [164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.write"]], "sparknlp_jsl.annotator.chunker": [[26, "module-sparknlp_jsl.annotator.chunker"]], "mapper2chunk (class in sparknlp_jsl.annotator.chunker.mapper2_chunk)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk"]], "clear() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.clear"]], "copy() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.copy"]], "explainparam() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.explainParam"]], "explainparams() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.explainParams"]], "extractparammap() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.extractParamMap"]], "filternonevalues (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.filterNoneValues"]], "getordefault() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getOrDefault"]], "getparam() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getParam"]], "getparamvalue() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getParamValue"]], "getter_attrs (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getter_attrs"]], "hasdefault() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.hasDefault"]], "hasparam() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.hasParam"]], "inputannotatortypes (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.inputAnnotatorTypes"]], "isdefined() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.isDefined"]], "isset() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.isSet"]], "kwargs (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.kwargs"]], "load() (mapper2chunk class method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.load"]], "name (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.name"]], "outputannotatortype (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.outputAnnotatorType"]], "read() (mapper2chunk class method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.read"]], "save() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.save"]], "set() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.set"]], "setfilternonevalues() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setFilterNoneValues"]], "setparamvalue() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setParamValue"]], "setparams() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setParams"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[27, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"]], "transform() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.transform"]], "uid (mapper2chunk attribute)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.uid"]], "write() (mapper2chunk method)": [[27, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.write"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "clear() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.clear"]], "clear() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.clear"]], "copy() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.copy"]], "copy() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.copy"]], "explainparam() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.explainParam"]], "explainparam() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.explainParam"]], "explainparams() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.explainParams"]], "explainparams() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.explainParams"]], "extractparammap() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.extractParamMap"]], "extractparammap() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.extractParamMap"]], "fit() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fit"]], "fitintercept (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "fitmultiple() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitMultiple"]], "getinputcols() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getInputCols"]], "getinputcols() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getInputCols"]], "getlazyannotator() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getLazyAnnotator"]], "getordefault() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getOrDefault"]], "getordefault() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getOrDefault"]], "getoutputcol() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getOutputCol"]], "getoutputcol() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getOutputCol"]], "getparam() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getParam"]], "getparam() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getParam"]], "getparamvalue() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getParamValue"]], "getparamvalue() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getParamValue"]], "getter_attrs (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getter_attrs"]], "getter_attrs (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getter_attrs"]], "hasdefault() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.hasDefault"]], "hasdefault() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.hasDefault"]], "hasparam() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.hasParam"]], "hasparam() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.hasParam"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputAnnotatorTypes"]], "inputcols (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputCols"]], "inputcols (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputCols"]], "inputcolsvalidation() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputColsValidation"]], "isdefined() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.isDefined"]], "isdefined() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.isDefined"]], "isset() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.isSet"]], "isset() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.isSet"]], "labelcol (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "lazyannotator (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.lazyAnnotator"]], "lazyannotator (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.lazyAnnotator"]], "load() (documentlogregclassifierapproach class method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.load"]], "load() (documentlogregclassifiermodel class method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.load"]], "maxiter (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "optionalinputannotatortypes (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "outputcol (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputCol"]], "outputcol (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputCol"]], "pretrained() (documentlogregclassifiermodel static method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "read() (documentlogregclassifierapproach class method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.read"]], "read() (documentlogregclassifiermodel class method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.read"]], "save() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.save"]], "save() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.save"]], "set() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.set"]], "set() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.set"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setForceInputTypeValidation"]], "setinputcols() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setInputCols"]], "setinputcols() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setInputCols"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setlazyannotator() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLazyAnnotator"]], "setmaxiter() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "setoutputcol() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setOutputCol"]], "setoutputcol() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setOutputCol"]], "setparamvalue() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setParamValue"]], "setparamvalue() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setParamValue"]], "setparams() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setParams"]], "settol() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[28, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "transform() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.transform"]], "uid (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.uid"]], "uid (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.uid"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "write() (documentlogregclassifierapproach method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.write"]], "write() (documentlogregclassifiermodel method)": [[28, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.write"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "clear() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.clear"]], "clear() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.clear"]], "copy() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.copy"]], "copy() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.copy"]], "explainparam() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.explainParam"]], "explainparam() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.explainParam"]], "explainparams() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.explainParams"]], "explainparams() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.explainParams"]], "extractparammap() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.extractParamMap"]], "fit() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fit"]], "fitintercept (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getInputCols"]], "getinputcols() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getOrDefault"]], "getordefault() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getOutputCol"]], "getparam() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getParam"]], "getparam() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getParam"]], "getparamvalue() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getParamValue"]], "getter_attrs (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getter_attrs"]], "hasdefault() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.hasDefault"]], "hasdefault() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.hasDefault"]], "hasparam() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.hasParam"]], "hasparam() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.hasParam"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputCols"]], "inputcols (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputColsValidation"]], "isdefined() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.isDefined"]], "isdefined() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.isDefined"]], "isset() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.isSet"]], "isset() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.isSet"]], "labelcol (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labels"]], "labels (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "lazyannotator (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.lazyAnnotator"]], "load() (documentmlclassifierapproach class method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.load"]], "load() (documentmlclassifiermodel class method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.load"]], "maxiter (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.maxTokenNgram"]], "maxtokenngram (documentmlclassifierparams attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.mergeChunks"]], "mergechunks (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.mergeChunks"]], "mergechunks (documentmlclassifierparams attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.minTokenNgram"]], "mintokenngram (documentmlclassifierparams attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "optionalinputannotatortypes (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputCol"]], "outputcol (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputCol"]], "pretrained() (documentmlclassifiermodel static method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "read() (documentmlclassifierapproach class method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.read"]], "read() (documentmlclassifiermodel class method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.read"]], "save() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.save"]], "save() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.save"]], "set() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.set"]], "set() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.set"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setInputCols"]], "setinputcols() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setInputCols"]], "setlabelcol() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabels"]], "setlabels() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setlazyannotator() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setMergeChunks"]], "setmergechunks() (documentmlclassifierparams method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setParamValue"]], "setparams() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setParams"]], "settol() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[29, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "transform() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.transform"]], "uid (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.uid"]], "uid (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.uid"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "write() (documentmlclassifierapproach method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.write"]], "write() (documentmlclassifiermodel method)": [[29, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.write"]], "fewshotassertionclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_assertion_classifier)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach"]], "fewshotassertionclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_assertion_classifier)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel"]], "batchsize (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.batchSize"]], "classes (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.classes"]], "clear() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.clear"]], "clear() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.clear"]], "copy() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.copy"]], "copy() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.copy"]], "datasetinfo (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.datasetInfo"]], "datasetinfo (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.datasetInfo"]], "doexceptionhandling (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.doExceptionHandling"]], "doexceptionhandling (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.doExceptionHandling"]], "dropout (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.dropout"]], "engine (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.engine"]], "epochsn (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.epochsN"]], "explainparam() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.explainParam"]], "explainparam() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.explainParam"]], "explainparams() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.explainParams"]], "explainparams() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.explainParams"]], "extractparammap() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.extractParamMap"]], "extractparammap() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.extractParamMap"]], "featurescaling (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.featureScaling"]], "featurescaling (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.featureScaling"]], "fit() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fit"]], "fitmultiple() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fitMultiple"]], "fiximbalance (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fixImbalance"]], "getengine() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getEngine"]], "getinputcols() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getInputCols"]], "getinputcols() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getInputCols"]], "getlazyannotator() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getLazyAnnotator"]], "getordefault() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getOrDefault"]], "getordefault() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getOrDefault"]], "getoutputcol() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getOutputCol"]], "getoutputcol() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getOutputCol"]], "getparam() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getParam"]], "getparam() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getParam"]], "getparamvalue() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getParamValue"]], "getparamvalue() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getParamValue"]], "getter_attrs (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getter_attrs"]], "getter_attrs (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getter_attrs"]], "hasdefault() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.hasDefault"]], "hasdefault() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.hasDefault"]], "hasparam() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.hasParam"]], "hasparam() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.hasParam"]], "inputannotatortypes (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputAnnotatorTypes"]], "inputcols (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputCols"]], "inputcols (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputCols"]], "inputcolsvalidation() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputColsValidation"]], "isdefined() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.isDefined"]], "isdefined() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.isDefined"]], "isset() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.isSet"]], "isset() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.isSet"]], "labelcolumn (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.labelColumn"]], "lazyannotator (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.lazyAnnotator"]], "lazyannotator (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.lazyAnnotator"]], "learningrate (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.learningRate"]], "load() (fewshotassertionclassifierapproach class method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.load"]], "load() (fewshotassertionclassifiermodel class method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.load"]], "loadsavedmodel() (fewshotassertionclassifiermodel static method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.loadSavedModel"]], "modelfile (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.modelFile"]], "multiclass (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.multiClass"]], "multiclass (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.multiClass"]], "name (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.name"]], "name (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.name"]], "optionalinputannotatortypes (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.outputAnnotatorType"]], "outputcol (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputCol"]], "outputcol (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.outputCol"]], "outputlogspath (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputLogsPath"]], "pretrained() (fewshotassertionclassifiermodel static method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.pretrained"]], "read() (fewshotassertionclassifierapproach class method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.read"]], "read() (fewshotassertionclassifiermodel class method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.read"]], "save() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.save"]], "save() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.save"]], "set() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.set"]], "set() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.set"]], "setbatchsize() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setBatchSize"]], "setdatasetinfo() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setDoExceptionHandling"]], "setdropout() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDropout"]], "setepochsnumber() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setFeatureScaling"]], "setfiximbalance() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setForceInputTypeValidation"]], "setinputcols() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setInputCols"]], "setinputcols() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setInputCols"]], "setlabelcol() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLabelCol"]], "setlazyannotator() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setLazyAnnotator"]], "setlearningrate() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLearningRate"]], "setmodelfile() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setModelFile"]], "setmulticlass() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setMultiClass"]], "setmulticlass() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setMultiClass"]], "setoutputcol() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setOutputCol"]], "setoutputcol() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setOutputCol"]], "setoutputlogspath() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setOutputLogsPath"]], "setparamvalue() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setParamValue"]], "setparamvalue() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setParamValue"]], "setparams() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setParams"]], "setvalidationsplit() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[30, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"]], "transform() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.transform"]], "uid (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.uid"]], "uid (fewshotassertionclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.uid"]], "validationsplit (fewshotassertionclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.validationSplit"]], "write() (fewshotassertionclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.write"]], "write() (fewshotassertionclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.write"]], "fewshotclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach"]], "fewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel"]], "batchsize (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.batchSize"]], "classes (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.classes"]], "clear() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.clear"]], "clear() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.clear"]], "copy() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.copy"]], "copy() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.copy"]], "datasetinfo (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.datasetInfo"]], "datasetinfo (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.datasetInfo"]], "doexceptionhandling (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.doExceptionHandling"]], "dropout (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.dropout"]], "engine (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.engine"]], "epochsn (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.epochsN"]], "explainparam() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.explainParam"]], "explainparam() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.explainParam"]], "explainparams() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.explainParams"]], "explainparams() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.explainParams"]], "extractparammap() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.extractParamMap"]], "extractparammap() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.extractParamMap"]], "featurescaling (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.featureScaling"]], "featurescaling (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.featureScaling"]], "fit() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fit"]], "fitmultiple() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fitMultiple"]], "fiximbalance (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fixImbalance"]], "getengine() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getEngine"]], "getinputcols() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getInputCols"]], "getinputcols() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getInputCols"]], "getlazyannotator() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getLazyAnnotator"]], "getordefault() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getOrDefault"]], "getordefault() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getOrDefault"]], "getoutputcol() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getOutputCol"]], "getoutputcol() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getOutputCol"]], "getparam() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getParam"]], "getparam() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getParam"]], "getparamvalue() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getParamValue"]], "getparamvalue() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getParamValue"]], "getter_attrs (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getter_attrs"]], "getter_attrs (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getter_attrs"]], "hasdefault() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.hasDefault"]], "hasdefault() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.hasDefault"]], "hasparam() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.hasParam"]], "hasparam() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.hasParam"]], "inputannotatortypes (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputCols"]], "inputcols (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputCols"]], "inputcolsvalidation() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputColsValidation"]], "isdefined() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.isDefined"]], "isdefined() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.isDefined"]], "isset() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.isSet"]], "isset() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.isSet"]], "labelcolumn (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.labelColumn"]], "lazyannotator (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.lazyAnnotator"]], "learningrate (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.learningRate"]], "load() (fewshotclassifierapproach class method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.load"]], "load() (fewshotclassifiermodel class method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.load"]], "modelfile (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.modelFile"]], "multiclass (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.multiClass"]], "multiclass (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.multiClass"]], "name (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.name"]], "name (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.name"]], "optionalinputannotatortypes (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputAnnotatorType"]], "outputcol (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputCol"]], "outputcol (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputCol"]], "outputlogspath (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputLogsPath"]], "pretrained() (fewshotclassifiermodel static method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.pretrained"]], "read() (fewshotclassifierapproach class method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.read"]], "read() (fewshotclassifiermodel class method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.read"]], "save() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.save"]], "save() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.save"]], "set() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.set"]], "set() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.set"]], "setbatchsize() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDropout"]], "setepochsnumber() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setInputCols"]], "setinputcols() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setInputCols"]], "setlabelcol() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLearningRate"]], "setmodelfile() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setModelFile"]], "setmulticlass() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setMultiClass"]], "setmulticlass() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setMultiClass"]], "setoutputcol() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setOutputCol"]], "setoutputcol() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setParamValue"]], "setparamvalue() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setParamValue"]], "setparams() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setParams"]], "setvalidationsplit() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[31, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "transform() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.transform"]], "uid (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.uid"]], "uid (fewshotclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.uid"]], "validationsplit (fewshotclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.validationSplit"]], "write() (fewshotclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.write"]], "write() (fewshotclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.write"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "batchsize (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.batchSize"]], "classes (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.classes"]], "clear() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.clear"]], "clear() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.clear"]], "copy() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.copy"]], "copy() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.copy"]], "datasetinfo (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.datasetInfo"]], "datasetinfo (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.datasetInfo"]], "doexceptionhandling (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.doExceptionHandling"]], "dropout (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.dropout"]], "engine (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.engine"]], "epochsn (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.epochsN"]], "explainparam() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.explainParam"]], "explainparam() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.explainParam"]], "explainparams() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.explainParams"]], "explainparams() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.explainParams"]], "extractparammap() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.extractParamMap"]], "extractparammap() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.extractParamMap"]], "featurescaling (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.featureScaling"]], "featurescaling (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.featureScaling"]], "fit() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fit"]], "fitmultiple() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fitMultiple"]], "fiximbalance (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fixImbalance"]], "getengine() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getEngine"]], "getinputcols() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getInputCols"]], "getinputcols() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getInputCols"]], "getlazyannotator() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getLazyAnnotator"]], "getordefault() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getOrDefault"]], "getordefault() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getOrDefault"]], "getoutputcol() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getOutputCol"]], "getoutputcol() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getOutputCol"]], "getparam() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getParam"]], "getparam() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getParam"]], "getparamvalue() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getParamValue"]], "getparamvalue() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getParamValue"]], "getter_attrs (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getter_attrs"]], "getter_attrs (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getter_attrs"]], "hasdefault() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.hasDefault"]], "hasdefault() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.hasDefault"]], "hasparam() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.hasParam"]], "hasparam() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.hasParam"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "inputcols (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputCols"]], "inputcols (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputCols"]], "inputcolsvalidation() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputColsValidation"]], "isdefined() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.isDefined"]], "isdefined() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.isDefined"]], "isset() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.isSet"]], "isset() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.isSet"]], "labelcolumn (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.labelColumn"]], "lazyannotator (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.lazyAnnotator"]], "lazyannotator (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.lazyAnnotator"]], "learningrate (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.learningRate"]], "load() (genericlogregclassifierapproach class method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.load"]], "load() (genericlogregclassifiermodel class method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.load"]], "modelfile (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.modelFile"]], "multiclass (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.multiClass"]], "multiclass (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.multiClass"]], "name (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "optionalinputannotatortypes (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "outputcol (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputCol"]], "outputcol (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputCol"]], "outputlogspath (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputLogsPath"]], "pretrained() (genericlogregclassifiermodel static method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "read() (genericlogregclassifierapproach class method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.read"]], "read() (genericlogregclassifiermodel class method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.read"]], "save() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.save"]], "save() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.save"]], "set() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.set"]], "set() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.set"]], "setbatchsize() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setDoExceptionHandling"]], "setdropout() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDropout"]], "setepochsnumber() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setInputCols"]], "setinputcols() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setInputCols"]], "setlabelcol() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLabelCol"]], "setlazyannotator() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLearningRate"]], "setmodelfile() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setModelFile"]], "setmulticlass() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setMultiClass"]], "setmulticlass() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setMultiClass"]], "setoutputcol() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setOutputCol"]], "setoutputcol() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setOutputCol"]], "setoutputlogspath() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setParamValue"]], "setparamvalue() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setParamValue"]], "setparams() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setParams"]], "setvalidationsplit() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[32, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "transform() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.transform"]], "uid (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.uid"]], "uid (genericlogregclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.uid"]], "validationsplit (genericlogregclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.validationSplit"]], "write() (genericlogregclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.write"]], "write() (genericlogregclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.write"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "batchsize (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.batchSize"]], "classes (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.classes"]], "clear() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.clear"]], "clear() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.clear"]], "copy() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.copy"]], "copy() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.copy"]], "datasetinfo (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.datasetInfo"]], "datasetinfo (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.datasetInfo"]], "doexceptionhandling (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.doExceptionHandling"]], "dropout (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.dropout"]], "engine (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.engine"]], "epochsn (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.epochsN"]], "explainparam() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.explainParam"]], "explainparam() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.explainParam"]], "explainparams() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.explainParams"]], "explainparams() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.explainParams"]], "extractparammap() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.extractParamMap"]], "extractparammap() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.extractParamMap"]], "featurescaling (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.featureScaling"]], "featurescaling (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.featureScaling"]], "fit() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fit"]], "fitmultiple() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fitMultiple"]], "fiximbalance (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fixImbalance"]], "getengine() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getEngine"]], "getinputcols() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getInputCols"]], "getinputcols() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getInputCols"]], "getlazyannotator() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getLazyAnnotator"]], "getordefault() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getOrDefault"]], "getordefault() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getOrDefault"]], "getoutputcol() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getOutputCol"]], "getoutputcol() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getOutputCol"]], "getparam() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getParam"]], "getparam() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getParam"]], "getparamvalue() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getParamValue"]], "getparamvalue() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getParamValue"]], "getter_attrs (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getter_attrs"]], "getter_attrs (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getter_attrs"]], "hasdefault() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.hasDefault"]], "hasdefault() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.hasDefault"]], "hasparam() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.hasParam"]], "hasparam() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.hasParam"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "inputcols (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputCols"]], "inputcols (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputCols"]], "inputcolsvalidation() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputColsValidation"]], "isdefined() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.isDefined"]], "isdefined() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.isDefined"]], "isset() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.isSet"]], "isset() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.isSet"]], "labelcolumn (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.labelColumn"]], "lazyannotator (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.lazyAnnotator"]], "lazyannotator (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.lazyAnnotator"]], "learningrate (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.learningRate"]], "load() (genericsvmclassifierapproach class method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.load"]], "load() (genericsvmclassifiermodel class method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.load"]], "modelfile (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.modelFile"]], "multiclass (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.multiClass"]], "multiclass (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.multiClass"]], "name (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "optionalinputannotatortypes (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "outputcol (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputCol"]], "outputcol (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputCol"]], "outputlogspath (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputLogsPath"]], "pretrained() (genericsvmclassifiermodel static method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "read() (genericsvmclassifierapproach class method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.read"]], "read() (genericsvmclassifiermodel class method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.read"]], "save() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.save"]], "save() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.save"]], "set() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.set"]], "set() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.set"]], "setbatchsize() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setDoExceptionHandling"]], "setdropout() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDropout"]], "setepochsnumber() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setInputCols"]], "setinputcols() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setInputCols"]], "setlabelcol() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLabelCol"]], "setlazyannotator() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLearningRate"]], "setmodelfile() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setModelFile"]], "setmulticlass() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setMultiClass"]], "setmulticlass() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setMultiClass"]], "setoutputcol() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setOutputCol"]], "setoutputcol() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setOutputCol"]], "setoutputlogspath() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setParamValue"]], "setparamvalue() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setParamValue"]], "setparams() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setParams"]], "setvalidationsplit() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[33, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "transform() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.transform"]], "uid (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.uid"]], "uid (genericsvmclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.uid"]], "validationsplit (genericsvmclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.validationSplit"]], "write() (genericsvmclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.write"]], "write() (genericsvmclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.write"]], "sparknlp_jsl.annotator.classification": [[34, "module-sparknlp_jsl.annotator.classification"]], "largefewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.large_few_shot_classifier)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel"]], "casesensitive (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.caseSensitive"]], "clear() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.clear"]], "copy() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.copy"]], "explainparam() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.explainParam"]], "explainparams() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.explainParams"]], "extractparammap() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.extractParamMap"]], "getcasesensitive() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getCaseSensitive"]], "getclasses() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getClasses"]], "getinputcols() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getInputCols"]], "getlazyannotator() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getOrDefault"]], "getoutputcol() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getOutputCol"]], "getparam() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getParam"]], "getparamvalue() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getParamValue"]], "getter_attrs (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getter_attrs"]], "hasdefault() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasDefault"]], "hasdifferentiablehead (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasDifferentiableHead"]], "hasparam() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasParam"]], "inputannotatortypes (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputColsValidation"]], "isdefined() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.isDefined"]], "isset() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.isSet"]], "lazyannotator (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.lazyAnnotator"]], "load() (largefewshotclassifiermodel class method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.load"]], "loadsavedmodel() (largefewshotclassifiermodel static method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.loadSavedModel"]], "modelarchitecture (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.modelArchitecture"]], "name (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.name"]], "optionalinputannotatortypes (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.outputAnnotatorType"]], "outputcol (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.outputCol"]], "pretrained() (largefewshotclassifiermodel static method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.pretrained"]], "read() (largefewshotclassifiermodel class method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.read"]], "save() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.save"]], "set() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.set"]], "setcasesensitive() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setCaseSensitive"]], "setforceinputtypevalidation() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setInputCols"]], "setlazyannotator() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setLazyAnnotator"]], "setoutputcol() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setOutputCol"]], "setparamvalue() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setParamValue"]], "setparams() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setParams"]], "skiplpinputcolsvalidation (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[35, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"]], "transform() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.transform"]], "uid (largefewshotclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.uid"]], "write() (largefewshotclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.write"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "casesensitive (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.caseSensitive"]], "clear() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.clear"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "copy() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.copy"]], "explainparam() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.explainParam"]], "explainparams() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.explainParams"]], "extractparammap() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getCaseSensitive"]], "getclasses() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "getinputcols() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getInputCols"]], "getlazyannotator() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getOrDefault"]], "getoutputcol() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getOutputCol"]], "getparam() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getParam"]], "getparamvalue() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getParamValue"]], "getter_attrs (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getter_attrs"]], "hasdefault() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.hasDefault"]], "hasparam() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.hasParam"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputColsValidation"]], "isdefined() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.isDefined"]], "isset() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.isSet"]], "lazyannotator (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.lazyAnnotator"]], "load() (medicalbertforsequenceclassification class method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.load"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "optionalinputannotatortypes (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "outputcol (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputCol"]], "pretrained() (medicalbertforsequenceclassification static method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "read() (medicalbertforsequenceclassification class method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.read"]], "save() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.save"]], "set() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.set"]], "setcasesensitive() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setInputCols"]], "setlazyannotator() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setOutputCol"]], "setparamvalue() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setParamValue"]], "setparams() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[36, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "transform() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.transform"]], "uid (medicalbertforsequenceclassification attribute)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.uid"]], "write() (medicalbertforsequenceclassification method)": [[36, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.write"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "casesensitive (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.caseSensitive"]], "clear() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.clear"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "copy() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.copy"]], "explainparam() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.explainParam"]], "explainparams() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.explainParams"]], "extractparammap() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.extractParamMap"]], "getcasesensitive() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getCaseSensitive"]], "getclasses() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "getinputcols() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getInputCols"]], "getlazyannotator() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getLazyAnnotator"]], "getordefault() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getOrDefault"]], "getoutputcol() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getOutputCol"]], "getparam() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getParam"]], "getparamvalue() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getParamValue"]], "getter_attrs (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getter_attrs"]], "hasdefault() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.hasDefault"]], "hasparam() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.hasParam"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "inputcols (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputCols"]], "inputcolsvalidation() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputColsValidation"]], "isdefined() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.isDefined"]], "isset() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.isSet"]], "lazyannotator (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.lazyAnnotator"]], "load() (medicalbertfortokenclassifier class method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.load"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "optionalinputannotatortypes (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "outputcol (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputCol"]], "pretrained() (medicalbertfortokenclassifier static method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "read() (medicalbertfortokenclassifier class method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.read"]], "save() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.save"]], "set() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.set"]], "setcasesensitive() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setCaseSensitive"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setForceInputTypeValidation"]], "setinputcols() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setInputCols"]], "setlazyannotator() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setLazyAnnotator"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "setoutputcol() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setOutputCol"]], "setparamvalue() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setParamValue"]], "setparams() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setParams"]], "skiplpinputcolsvalidation (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[37, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "transform() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.transform"]], "uid (medicalbertfortokenclassifier attribute)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.uid"]], "write() (medicalbertfortokenclassifier method)": [[37, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.write"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "casesensitive (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.caseSensitive"]], "clear() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.clear"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "copy() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.copy"]], "explainparam() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.explainParam"]], "explainparams() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.explainParams"]], "extractparammap() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getCaseSensitive"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "getinputcols() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getInputCols"]], "getlazyannotator() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getOrDefault"]], "getoutputcol() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getOutputCol"]], "getparam() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getParam"]], "getparamvalue() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getParamValue"]], "getter_attrs (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getter_attrs"]], "hasdefault() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.hasDefault"]], "hasparam() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.hasParam"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputColsValidation"]], "isdefined() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.isDefined"]], "isset() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.isSet"]], "lazyannotator (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.lazyAnnotator"]], "load() (medicaldistilbertforsequenceclassification class method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.load"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "optionalinputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "outputcol (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputCol"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "read() (medicaldistilbertforsequenceclassification class method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.read"]], "save() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.save"]], "set() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.set"]], "setcasesensitive() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setInputCols"]], "setlazyannotator() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setOutputCol"]], "setparamvalue() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setParamValue"]], "setparams() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[38, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "transform() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.transform"]], "uid (medicaldistilbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.uid"]], "write() (medicaldistilbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.write"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "clear() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.clear"]], "clear() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.clear"]], "completecontextmatch (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "copy() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.copy"]], "copy() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.copy"]], "dictionary (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "doexceptionhandling (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.doExceptionHandling"]], "doexceptionhandling (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.doExceptionHandling"]], "explainparam() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.explainParam"]], "explainparam() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.explainParam"]], "explainparams() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.explainParams"]], "explainparams() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.explainParams"]], "extractparammap() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.extractParamMap"]], "extractparammap() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.extractParamMap"]], "fit() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.fit"]], "fitmultiple() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.fitMultiple"]], "getinputcols() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getInputCols"]], "getinputcols() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getInputCols"]], "getlazyannotator() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getLazyAnnotator"]], "getlazyannotator() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getLazyAnnotator"]], "getordefault() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getOrDefault"]], "getordefault() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getOrDefault"]], "getoutputcol() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getOutputCol"]], "getoutputcol() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getOutputCol"]], "getparam() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getParam"]], "getparam() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getParam"]], "getparamvalue() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getParamValue"]], "getparamvalue() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getParamValue"]], "getter_attrs (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getter_attrs"]], "getter_attrs (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getter_attrs"]], "hasdefault() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.hasDefault"]], "hasdefault() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.hasDefault"]], "hasparam() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.hasParam"]], "hasparam() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.hasParam"]], "inputannotatortypes (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "inputcols (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputCols"]], "inputcols (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputCols"]], "inputcolsvalidation() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputColsValidation"]], "inputcolsvalidation() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputColsValidation"]], "isdefined() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.isDefined"]], "isdefined() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.isDefined"]], "isset() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.isSet"]], "isset() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.isSet"]], "jsonpath (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "lazyannotator (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.lazyAnnotator"]], "lazyannotator (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.lazyAnnotator"]], "load() (contextualparserapproach class method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.load"]], "load() (contextualparsermodel class method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.load"]], "name (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.name"]], "optionalcontextrules (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "optionalinputannotatortypes (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "outputcol (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputCol"]], "outputcol (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputCol"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "pretrained() (contextualparsermodel static method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.pretrained"]], "read() (contextualparserapproach class method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.read"]], "read() (contextualparsermodel class method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.read"]], "save() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.save"]], "save() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.save"]], "set() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.set"]], "set() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.set"]], "setcasesensitive() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setdoexceptionhandling() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setDoExceptionHandling"]], "setforceinputtypevalidation() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setForceInputTypeValidation"]], "setinputcols() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setInputCols"]], "setinputcols() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setInputCols"]], "setjsonpath() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setlazyannotator() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setLazyAnnotator"]], "setlazyannotator() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setLazyAnnotator"]], "setoptionalcontextrules() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setoutputcol() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOutputCol"]], "setoutputcol() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOutputCol"]], "setparamvalue() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setParamValue"]], "setparamvalue() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setParamValue"]], "setparams() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setParams"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "skiplpinputcolsvalidation (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.context.contextual_parser": [[39, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "transform() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.transform"]], "uid (contextualparserapproach attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.uid"]], "uid (contextualparsermodel attribute)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.uid"]], "write() (contextualparserapproach method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.write"]], "write() (contextualparsermodel method)": [[39, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.write"]], "sparknlp_jsl.annotator.context": [[40, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "ageranges (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ageRanges"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRanges"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRanges"]], "agerangesbyhipaa (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRangesByHipaa"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ageRangesByHipaa"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ageRangesByHipaa"]], "agerangesbyhipaa (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"]], "blacklist (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.blackList"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.blackList"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.blackList"]], "blacklistentities (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackListEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.blackListEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.blackListEntities"]], "blacklistentities (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackListEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.blackListEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.blackListEntities"]], "clear() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.clear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.clear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.clear"]], "clear() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.clear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.clear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.clear"]], "combineregexpatterns (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.combineRegexPatterns"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.combineRegexPatterns"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.combineRegexPatterns"]], "consistentobfuscation (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.consistentObfuscation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentObfuscation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "copy() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.copy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.copy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.copy"]], "copy() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.copy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.copy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.copy"]], "dateformats (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateFormats"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateFormats"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateToYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateToYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.days"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.days"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.days"]], "doexceptionhandling (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.doExceptionHandling"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.doExceptionHandling"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.doExceptionHandling"]], "doexceptionhandling (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.doExceptionHandling"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.doExceptionHandling"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.doExceptionHandling"]], "entitycasingmodespath (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.entityCasingModesPath"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "explainparam() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.explainParam"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.explainParam"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.explainParam"]], "explainparam() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.explainParam"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParam"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParam"]], "explainparams() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.explainParams"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.explainParams"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.explainParams"]], "explainparams() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.explainParams"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParams"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParams"]], "extractparammap() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.extractParamMap"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.extractParamMap"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.extractParamMap"]], "extractparammap() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.extractParamMap"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.extractParamMap"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.extractParamMap"]], "fit() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fit"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fit"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fit"]], "fitmultiple() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fitMultiple"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fitMultiple"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fitMultiple"]], "fixedmasklength (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fixedMaskLength"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.fixedMaskLength"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "genderawareness (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.genderAwareness"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.genderAwareness"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.genderAwareness"]], "genderawareness (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.genderAwareness"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.genderAwareness"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.genderAwareness"]], "getblacklist() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getBlackList"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getBlackList"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getinputcols() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getInputCols"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getInputCols"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getInputCols"]], "getinputcols() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getInputCols"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getInputCols"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getInputCols"]], "getlazyannotator() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getLazyAnnotator"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getLazyAnnotator"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getLazyAnnotator"]], "getlazyannotator() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"]], "getordefault() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getOrDefault"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getOrDefault"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getOrDefault"]], "getordefault() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getOrDefault"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getOrDefault"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getOrDefault"]], "getoutputcol() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getOutputCol"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getOutputCol"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getOutputCol"]], "getoutputcol() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getOutputCol"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getOutputCol"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getOutputCol"]], "getparam() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getParam"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getParam"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getParam"]], "getparam() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getParam"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getParam"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getParam"]], "getparamvalue() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getParamValue"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getParamValue"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getParamValue"]], "getparamvalue() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getParamValue"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getParamValue"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getParamValue"]], "getregexentities() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getRegexEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "getsamelengthformattedentities() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"]], "getsamelengthformattedentities() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"]], "getuseshiftdays() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getUseShiftDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getUseShiftDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getUseShiftDays"]], "getuseshiftdays() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getUseShiftDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getUseShiftDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getUseShiftDays"]], "getter_attrs (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getter_attrs"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getter_attrs"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getter_attrs"]], "getter_attrs (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getter_attrs"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getter_attrs"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getter_attrs"]], "hasdefault() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.hasDefault"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.hasDefault"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.hasDefault"]], "hasdefault() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.hasDefault"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.hasDefault"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.hasDefault"]], "hasparam() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.hasParam"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.hasParam"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.hasParam"]], "hasparam() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.hasParam"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.hasParam"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.hasParam"]], "ignoreregex (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ignoreRegex"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ignoreRegex"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputAnnotatorTypes"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "inputcols (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputCols"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputCols"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputCols"]], "inputcols (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputCols"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputCols"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputCols"]], "inputcolsvalidation() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputColsValidation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputColsValidation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputColsValidation"]], "inputcolsvalidation() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputColsValidation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputColsValidation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputColsValidation"]], "isdefined() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isDefined"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isDefined"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isDefined"]], "isdefined() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isDefined"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isDefined"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isDefined"]], "israndomdatedisplacement (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isRandomDateDisplacement"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "isset() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isSet"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isSet"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isSet"]], "isset() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isSet"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isSet"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isSet"]], "keepyear (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.keepYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.keepYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.keepYear"]], "keepyear (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.keepYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.keepYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.keepYear"]], "language (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.language"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.language"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.language"]], "lazyannotator (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.lazyAnnotator"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.lazyAnnotator"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.lazyAnnotator"]], "lazyannotator (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.lazyAnnotator"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.lazyAnnotator"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.lazyAnnotator"]], "load() (deidentification class method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.load"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.load"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.load"]], "load() (deidentificationmodel class method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.load"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.load"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.load"]], "mappingscolumn (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.mappingsColumn"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.mappingsColumn"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.maskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.maskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "metadatamaskingpolicy (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.metadataMaskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.metadataMaskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.metadataMaskingPolicy"]], "metadatamaskingpolicy (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"]], "minyear (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.minYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.minYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.mode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.mode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatebyagegroups (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"]], "obfuscatebyagegroups (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"]], "obfuscatedate (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateDate"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateDate"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefFile"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefSource"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"]], "obfuscationstrategyonexception (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"]], "optionalinputannotatortypes (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"]], "outputannotatortype (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputAnnotatorType"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputAsDocument"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAsDocument"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "outputcol (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputCol"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputCol"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputCol"]], "outputcol (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputCol"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputCol"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputCol"]], "pretrained() (deidentificationmodel static method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "read() (deidentification class method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.read"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.read"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.read"]], "read() (deidentificationmodel class method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.read"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.read"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.read"]], "reffileformat (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.refFileFormat"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.refSep"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.regexEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexOverride"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.regexOverride"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionary"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "regexpatternsdictionaryasjsonstring (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"]], "region (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.region"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.region"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.returnEntityMappings"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.returnEntityMappings"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.sameEntityThreshold"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "samelengthformattedentities (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"]], "samelengthformattedentities (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"]], "save() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.save"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.save"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.save"]], "save() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.save"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.save"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.save"]], "seed (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.seed"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.seed"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.seed"]], "selectiveobfuscationmodespath (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "set() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.set"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.set"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.set"]], "set() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.set"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.set"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.set"]], "setagegroups() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeGroups"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeGroups"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeGroups"]], "setagegroups() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeGroups"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeGroups"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeGroups"]], "setageranges() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeRanges"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRanges"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setagerangesbyhipaa() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"]], "setagerangesbyhipaa() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"]], "setblacklist() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setBlackList"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackList"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setblacklistentities() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackListEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setBlackListEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setBlackListEntities"]], "setblacklistentities() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackListEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackListEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackListEntities"]], "setcombineregexpatterns() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setCombineRegexPatterns"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setCombineRegexPatterns"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setCombineRegexPatterns"]], "setconsistentobfuscation() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setConsistentObfuscation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateFormats"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateFormats"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateToYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateToYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDays"]], "setdoexceptionhandling() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDoExceptionHandling"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDoExceptionHandling"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDoExceptionHandling"]], "setdoexceptionhandling() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDoExceptionHandling"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDoExceptionHandling"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDoExceptionHandling"]], "setentitycasingmodes() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setEntityCasingModes"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setfixedmasklength() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setFixedMaskLength"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setforceinputtypevalidation() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setForceInputTypeValidation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setForceInputTypeValidation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setForceInputTypeValidation"]], "setforceinputtypevalidation() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"]], "setgenderawareness() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGenderAwareness"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setGenderAwareness"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setGenderAwareness"]], "setgenderawareness() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGenderAwareness"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setGenderAwareness"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setGenderAwareness"]], "setignoreregex() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setIgnoreRegex"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setinputcols() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setInputCols"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setInputCols"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setInputCols"]], "setinputcols() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setInputCols"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setInputCols"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setInputCols"]], "setisrandomdatedisplacement() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setkeepyear() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setKeepYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setKeepYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setKeepYear"]], "setkeepyear() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setKeepYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepYear"]], "setlanguage() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setLanguage"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setLanguage"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setlazyannotator() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLazyAnnotator"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setLazyAnnotator"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setLazyAnnotator"]], "setlazyannotator() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"]], "setmappingscolumn() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMappingsColumn"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMappingsColumn"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMaskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"]], "setminyear() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMinYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMinYear"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatebyagegroups() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"]], "setobfuscatebyagegroups() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"]], "setobfuscatedate() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateDate"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateDate"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefFile"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefSource"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setobfuscationstrategyonexception() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"]], "setobfuscationstrategyonexception() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setOutputAsDocument"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setoutputcol() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputCol"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setOutputCol"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setOutputCol"]], "setoutputcol() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputCol"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputCol"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputCol"]], "setparamvalue() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setParamValue"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setParamValue"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setParamValue"]], "setparamvalue() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setParamValue"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setParamValue"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setParamValue"]], "setparams() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setParams"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setParams"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setParams"]], "setreffileformat() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRefFileFormat"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRefSep"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexOverride"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegexOverride"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregexpatternsdictionaryasjsonstring() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"]], "setregion() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegion"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegion"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setReturnEntityMappings"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSameEntityThreshold"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"]], "setsamelengthformattedentities() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"]], "setseed() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSeed"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSeed"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSeed"]], "setselectiveobfuscationmodes() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUseShifDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShifDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setuseshiftdays() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShiftDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUseShiftDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUseShiftDays"]], "setuseshiftdays() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShiftDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShiftDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShiftDays"]], "setzipcodetag() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setZipCodeTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setZipCodeTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "skiplpinputcolsvalidation (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.skipLPInputColsValidation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.skipLPInputColsValidation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.deidentification": [[41, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "transform() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.transform"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.transform"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.transform"]], "uid (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.uid"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.uid"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.uid"]], "uid (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.uid"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.uid"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.uid"]], "unnormalizeddatemode (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.unnormalizedDateMode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.useShifDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.useShifDays"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.useShifDays"]], "write() (deidentification method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.write"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.write"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.write"]], "write() (deidentificationmodel method)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.write"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.write"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.write"]], "zipcodetag (deidentification attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.zipCodeTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[41, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"], [125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.zipCodeTag"], [159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "deidentificationparams (class in sparknlp_jsl.annotator.deid.deidentication_params)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams"]], "ageranges (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRanges"]], "agerangesbyhipaa (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRangesByHipaa"]], "blacklist (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackList"]], "blacklistentities (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackListEntities"]], "consistentobfuscation (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.consistentObfuscation"]], "dateformats (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateFormats"]], "datetag (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateTag"]], "datetoyear (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateToYear"]], "days (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.days"]], "fixedmasklength (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.fixedMaskLength"]], "genderawareness (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.genderAwareness"]], "getblacklist() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getBlackList"]], "getsamelengthformattedentities() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getSameLengthFormattedEntities"]], "getuseshiftdays() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getUseShiftDays"]], "ignoreregex (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ignoreRegex"]], "israndomdatedisplacement (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.isRandomDateDisplacement"]], "keepyear (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.keepYear"]], "language (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.language"]], "mappingscolumn (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mappingsColumn"]], "maskingpolicy (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.maskingPolicy"]], "metadatamaskingpolicy (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.metadataMaskingPolicy"]], "minyear (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.minYear"]], "mode (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mode"]], "obfuscatebyagegroups (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateByAgeGroups"]], "obfuscatedate (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateDate"]], "obfuscaterefsource (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscationStrategyOnException"]], "outputasdocument (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.outputAsDocument"]], "regexoverride (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.regexOverride"]], "region (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.region"]], "returnentitymappings (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.returnEntityMappings"]], "sameentitythreshold (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameEntityThreshold"]], "samelengthformattedentities (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameLengthFormattedEntities"]], "seed (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.seed"]], "setagegroups() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeGroups"]], "setageranges() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRanges"]], "setagerangesbyhipaa() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRangesByHipaa"]], "setblacklist() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackList"]], "setblacklistentities() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackListEntities"]], "setconsistentobfuscation() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setConsistentObfuscation"]], "setdateformats() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateFormats"]], "setdatetag() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateTag"]], "setdatetoyear() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateToYear"]], "setdays() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDays"]], "setfixedmasklength() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setFixedMaskLength"]], "setgenderawareness() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGenderAwareness"]], "setignoreregex() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIsRandomDateDisplacement"]], "setkeepyear() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setKeepYear"]], "setlanguage() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setLanguage"]], "setmappingscolumn() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMappingsColumn"]], "setmaskingpolicy() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMetadataMaskingPolicy"]], "setminyear() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMinYear"]], "setmode() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMode"]], "setobfuscatebyagegroups() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateByAgeGroups"]], "setobfuscatedate() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateDate"]], "setobfuscaterefsource() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateRefSource"]], "setobfuscationstrategyonexception() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setOutputAsDocument"]], "setregexoverride() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegexOverride"]], "setregion() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegion"]], "setreturnentitymappings() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setReturnEntityMappings"]], "setsameentitythreshold() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameLengthFormattedEntities"]], "setseed() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSeed"]], "setunnormalizeddatemode() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUnnormalizedDateMode"]], "setuseshifdays() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShifDays"]], "setuseshiftdays() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShiftDays"]], "setzipcodetag() (deidentificationparams method)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[42, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "unnormalizeddatemode (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.unnormalizedDateMode"]], "useshifdays (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.useShifDays"]], "zipcodetag (deidentificationparams attribute)": [[42, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "clear() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.clear"]], "copy() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.copy"]], "dateshiftcolumn (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "explainparam() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.explainParam"]], "explainparams() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.explainParams"]], "extractparammap() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.extractParamMap"]], "getinputcols() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getInputCols"]], "getlazyannotator() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getLazyAnnotator"]], "getordefault() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getOrDefault"]], "getoutputcol() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getOutputCol"]], "getparam() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getParam"]], "getparamvalue() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getParamValue"]], "getter_attrs (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getter_attrs"]], "hasdefault() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.hasDefault"]], "hasparam() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.hasParam"]], "inputannotatortypes (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "inputcols (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputCols"]], "inputcolsvalidation() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputColsValidation"]], "isdefined() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.isDefined"]], "isset() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.isSet"]], "kwargs (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.kwargs"]], "lazyannotator (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.lazyAnnotator"]], "load() (documenthashcoder class method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.load"]], "name (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "outputcol (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputCol"]], "patientidcolumn (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "read() (documenthashcoder class method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.read"]], "save() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.save"]], "seed (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "set() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.set"]], "setdateshiftcolumn() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setinputcols() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setInputCols"]], "setlazyannotator() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setoutputcol() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setOutputCol"]], "setparamvalue() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParamValue"]], "setparams() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[43, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "transform() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.transform"]], "uid (documenthashcoder attribute)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.uid"]], "write() (documenthashcoder method)": [[43, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.write"]], "sparknlp_jsl.annotator.deid": [[44, "module-sparknlp_jsl.annotator.deid"]], "lightdeidentification (class in sparknlp_jsl.annotator.deid.light_deidentification)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification"]], "ageranges (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.ageRanges"]], "clear() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.clear"]], "copy() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.copy"]], "dateentities (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.dateEntities"]], "dateformats (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.dateFormats"]], "days (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.days"]], "explainparam() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.explainParam"]], "explainparams() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.explainParams"]], "extractparammap() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.extractParamMap"]], "fixedmasklength (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.fixedMaskLength"]], "genderawareness (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.genderAwareness"]], "getinputcols() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getInputCols"]], "getlazyannotator() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getLazyAnnotator"]], "getordefault() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getOrDefault"]], "getoutputcol() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getOutputCol"]], "getparam() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getParam"]], "getparamvalue() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getParamValue"]], "getter_attrs (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getter_attrs"]], "hasdefault() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.hasDefault"]], "hasparam() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.hasParam"]], "inputannotatortypes (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputAnnotatorTypes"]], "inputcols (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputCols"]], "inputcolsvalidation() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputColsValidation"]], "isdefined() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.isDefined"]], "isset() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.isSet"]], "language (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.language"]], "lazyannotator (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.lazyAnnotator"]], "load() (lightdeidentification class method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.load"]], "maskingpolicy (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.maskingPolicy"]], "mode (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.mode"]], "name (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.name"]], "obfuscatedate (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.obfuscateDate"]], "obfuscaterefsource (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.obfuscateRefSource"]], "optionalinputannotatortypes (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.optionalInputAnnotatorTypes"]], "outputannotatortype (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.outputAnnotatorType"]], "outputcol (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.outputCol"]], "read() (lightdeidentification class method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.read"]], "region (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.region"]], "samelengthformattedentities (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.sameLengthFormattedEntities"]], "save() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.save"]], "seed (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.seed"]], "set() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.set"]], "setageranges() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setAgeRanges"]], "setcustomfakers() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setCustomFakers"]], "setdateentities() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDateEntities"]], "setdateformats() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDateFormats"]], "setdays() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDays"]], "setfixedmasklength() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setFixedMaskLength"]], "setforceinputtypevalidation() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setForceInputTypeValidation"]], "setgenderawareness() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setGenderAwareness"]], "setinputcols() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setInputCols"]], "setlanguage() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setLanguage"]], "setlazyannotator() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setLazyAnnotator"]], "setmaskingpolicy() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setMaskingPolicy"]], "setmode() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setMode"]], "setobfuscatedate() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscateDate"]], "setobfuscaterefsource() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscateRefSource"]], "setoutputcol() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setOutputCol"]], "setparamvalue() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setParamValue"]], "setparams() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setParams"]], "setregion() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setRegion"]], "setsamelengthformattedentities() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSameLengthFormattedEntities"]], "setseed() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSeed"]], "setselectiveobfuscationmodes() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setUnnormalizedDateMode"]], "setuseshiftdays() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setUseShiftDays"]], "skiplpinputcolsvalidation (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.light_deidentification": [[45, "module-sparknlp_jsl.annotator.deid.light_deIdentification"]], "transform() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.transform"]], "uid (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.uid"]], "unnormalizeddatemode (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.unnormalizedDateMode"]], "useshiftdays (lightdeidentification attribute)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.useShiftDays"]], "write() (lightdeidentification method)": [[45, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.write"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "clear() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.clear"]], "clear() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.clear"]], "copy() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.copy"]], "copy() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.copy"]], "explainparam() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.explainParam"]], "explainparam() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.explainParam"]], "explainparams() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.explainParams"]], "explainparams() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.explainParams"]], "extractparammap() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.extractParamMap"]], "extractparammap() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.extractParamMap"]], "fit() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.fit"]], "fitmultiple() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.fitMultiple"]], "genderawareness (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "getinputcols() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getInputCols"]], "getinputcols() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getInputCols"]], "getlazyannotator() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getLazyAnnotator"]], "getlazyannotator() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getLazyAnnotator"]], "getordefault() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getOrDefault"]], "getordefault() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getOrDefault"]], "getoutputcol() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getOutputCol"]], "getoutputcol() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getOutputCol"]], "getparam() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getParam"]], "getparam() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getParam"]], "getparamvalue() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getParamValue"]], "getparamvalue() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getParamValue"]], "getter_attrs (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getter_attrs"]], "getter_attrs (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getter_attrs"]], "hasdefault() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.hasDefault"]], "hasdefault() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.hasDefault"]], "hasparam() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.hasParam"]], "hasparam() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.hasParam"]], "inputannotatortypes (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "inputcols (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputCols"]], "inputcols (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputCols"]], "inputcolsvalidation() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputColsValidation"]], "inputcolsvalidation() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputColsValidation"]], "isdefined() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.isDefined"]], "isdefined() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.isDefined"]], "isset() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.isSet"]], "isset() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.isSet"]], "language (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "lazyannotator (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.lazyAnnotator"]], "lazyannotator (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.lazyAnnotator"]], "load() (namechunkobfuscator class method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.load"]], "load() (namechunkobfuscatorapproach class method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.load"]], "nameentities (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "optionalinputannotatortypes (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.optionalInputAnnotatorTypes"]], "outputannotatortype (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "outputcol (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputCol"]], "outputcol (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputCol"]], "read() (namechunkobfuscator class method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.read"]], "read() (namechunkobfuscatorapproach class method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.read"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "save() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.save"]], "save() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.save"]], "seed (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "set() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.set"]], "set() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.set"]], "setforceinputtypevalidation() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setForceInputTypeValidation"]], "setforceinputtypevalidation() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setForceInputTypeValidation"]], "setgenderawareness() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setinputcols() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setInputCols"]], "setinputcols() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setInputCols"]], "setlanguage() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setlazyannotator() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLazyAnnotator"]], "setlazyannotator() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLazyAnnotator"]], "setnameentities() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setoutputcol() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setOutputCol"]], "setoutputcol() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setOutputCol"]], "setparamvalue() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setParamValue"]], "setparamvalue() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setParamValue"]], "setparams() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setParams"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "skiplpinputcolsvalidation (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[46, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "transform() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.transform"]], "uid (namechunkobfuscator attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.uid"]], "uid (namechunkobfuscatorapproach attribute)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.uid"]], "write() (namechunkobfuscator method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.write"]], "write() (namechunkobfuscatorapproach method)": [[46, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.write"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "clear() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.clear"]], "copy() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.copy"]], "explainparam() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.explainParam"]], "explainparams() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.explainParams"]], "extractparammap() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.extractParamMap"]], "getinputcols() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getInputCols"]], "getlazyannotator() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getLazyAnnotator"]], "getordefault() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getOrDefault"]], "getoutputcol() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getOutputCol"]], "getparam() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getParam"]], "getparamvalue() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getParamValue"]], "getter_attrs (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getter_attrs"]], "hasdefault() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.hasDefault"]], "hasparam() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.hasParam"]], "inputannotatortypes (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "inputcols (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputCols"]], "inputcolsvalidation() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputColsValidation"]], "isdefined() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.isDefined"]], "isset() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.isSet"]], "lazyannotator (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.lazyAnnotator"]], "load() (reidentification class method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.load"]], "name (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "optionalinputannotatortypes (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.optionalInputAnnotatorTypes"]], "outputannotatortype (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "outputcol (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputCol"]], "read() (reidentification class method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.read"]], "save() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.save"]], "set() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.set"]], "setforceinputtypevalidation() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setForceInputTypeValidation"]], "setinputcols() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setInputCols"]], "setlazyannotator() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setLazyAnnotator"]], "setoutputcol() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setOutputCol"]], "setparamvalue() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setParamValue"]], "setparams() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setParams"]], "skiplpinputcolsvalidation (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.reidentification": [[47, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "transform() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.transform"]], "uid (reidentification attribute)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.uid"]], "write() (reidentification method)": [[47, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.write"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "clear() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.clear"]], "copy() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.copy"]], "explainparam() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.explainParam"]], "explainparams() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.explainParams"]], "extractparammap() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.extractParamMap"]], "getinputcols() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getInputCols"]], "getlazyannotator() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getLazyAnnotator"]], "getordefault() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getOrDefault"]], "getoutputcol() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getOutputCol"]], "getparam() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getParam"]], "getparamvalue() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getParamValue"]], "getusereplacement() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "getter_attrs (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.getter_attrs"]], "hasdefault() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.hasDefault"]], "hasparam() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.hasParam"]], "inputannotatortypes (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "inputcols (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputCols"]], "inputcolsvalidation() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputColsValidation"]], "isdefined() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.isDefined"]], "isset() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.isSet"]], "lazyannotator (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.lazyAnnotator"]], "load() (replacer class method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.load"]], "name (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "nonevaluesto (replacer attribute)": [[48, "id0"], [48, "sparknlp_jsl.annotator.deid.replacer.Replacer.noneValuesTo"]], "optionalinputannotatortypes (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.optionalInputAnnotatorTypes"]], "outputannotatortype (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "outputcol (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputCol"]], "placeholder (replacer attribute)": [[48, "id1"], [48, "sparknlp_jsl.annotator.deid.replacer.Replacer.placeHolder"]], "placeholderdelimiters (replacer attribute)": [[48, "id2"], [48, "sparknlp_jsl.annotator.deid.replacer.Replacer.placeHolderDelimiters"]], "read() (replacer class method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.read"]], "save() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.save"]], "set() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.set"]], "setforceinputtypevalidation() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setForceInputTypeValidation"]], "setinputcols() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setInputCols"]], "setlazyannotator() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setLazyAnnotator"]], "setnonevaluesto() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setNoneValuesTo"]], "setoutputcol() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setOutputCol"]], "setparamvalue() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setParamValue"]], "setparams() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setParams"]], "setplaceholder() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setPlaceHolder"]], "setplaceholderdelimiters() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setPlaceHolderDelimiters"]], "setusereplacement() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "skiplpinputcolsvalidation (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.replacer": [[48, "module-sparknlp_jsl.annotator.deid.replacer"]], "transform() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.transform"]], "uid (replacer attribute)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.uid"]], "usereplacement (replacer attribute)": [[48, "id3"], [48, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "write() (replacer method)": [[48, "sparknlp_jsl.annotator.deid.replacer.Replacer.write"]], "sparknlp_jsl.annotator.disambiguation": [[49, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "clear() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.clear"]], "clear() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.clear"]], "copy() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.copy"]], "copy() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.copy"]], "embeddingtypeparam (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "explainparam() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.explainParam"]], "explainparam() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.explainParam"]], "explainparams() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.explainParams"]], "explainparams() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.explainParams"]], "extractparammap() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.extractParamMap"]], "extractparammap() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.extractParamMap"]], "fit() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.fit"]], "fitmultiple() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.fitMultiple"]], "getinputcols() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getInputCols"]], "getinputcols() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getInputCols"]], "getlazyannotator() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getLazyAnnotator"]], "getlazyannotator() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getLazyAnnotator"]], "getordefault() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getOrDefault"]], "getordefault() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getOrDefault"]], "getoutputcol() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getOutputCol"]], "getoutputcol() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getOutputCol"]], "getparam() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getParam"]], "getparam() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getParam"]], "getparamvalue() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getParamValue"]], "getparamvalue() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getParamValue"]], "getter_attrs (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getter_attrs"]], "getter_attrs (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getter_attrs"]], "hasdefault() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.hasDefault"]], "hasdefault() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.hasDefault"]], "hasparam() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.hasParam"]], "hasparam() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.hasParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "inputcols (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputCols"]], "inputcols (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputCols"]], "inputcolsvalidation() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputColsValidation"]], "inputcolsvalidation() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputColsValidation"]], "isdefined() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.isDefined"]], "isdefined() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.isDefined"]], "isset() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.isSet"]], "isset() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.isSet"]], "lazyannotator (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.lazyAnnotator"]], "lazyannotator (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.lazyAnnotator"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "load() (nerdisambiguator class method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.load"]], "load() (nerdisambiguatormodel class method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.load"]], "name (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "optionalinputannotatortypes (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "outputcol (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputCol"]], "outputcol (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputCol"]], "predictionslimit (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "read() (nerdisambiguator class method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.read"]], "read() (nerdisambiguatormodel class method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.read"]], "s3knowledgebasename (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "save() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.save"]], "save() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.save"]], "set() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.set"]], "set() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.set"]], "setembeddingtype() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setforceinputtypevalidation() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setForceInputTypeValidation"]], "setforceinputtypevalidation() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setForceInputTypeValidation"]], "setinputcols() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setInputCols"]], "setinputcols() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setInputCols"]], "setlazyannotator() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLazyAnnotator"]], "setlazyannotator() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLazyAnnotator"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setoutputcol() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setOutputCol"]], "setoutputcol() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setOutputCol"]], "setparamvalue() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setParamValue"]], "setparamvalue() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setParamValue"]], "setparams() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setParams"]], "setpredictionlimit() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "skiplpinputcolsvalidation (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[50, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "transform() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.transform"]], "uid (nerdisambiguator attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.uid"]], "uid (nerdisambiguatormodel attribute)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.uid"]], "write() (nerdisambiguator method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.write"]], "write() (nerdisambiguatormodel method)": [[50, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.write"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "clear() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.clear"]], "copy() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.copy"]], "explainparam() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.explainParam"]], "explainparams() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.explainParams"]], "extractparammap() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.extractParamMap"]], "failonmissing (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "getinputcols() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getInputCols"]], "getlazyannotator() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getLazyAnnotator"]], "getordefault() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getOrDefault"]], "getoutputcol() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getOutputCol"]], "getparam() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getParam"]], "getparamvalue() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getParamValue"]], "getter_attrs (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getter_attrs"]], "hasdefault() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.hasDefault"]], "hasparam() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.hasParam"]], "inputannotatortypes (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "inputcols (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputCols"]], "inputcolsvalidation() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputColsValidation"]], "isarray (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "isdefined() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isDefined"]], "isset() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isSet"]], "kwargs (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.kwargs"]], "lazyannotator (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lazyAnnotator"]], "load() (doc2chunkinternal class method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.load"]], "lowercase (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "optionalinputannotatortypes (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.outputAnnotatorType"]], "outputcol (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.outputCol"]], "read() (doc2chunkinternal class method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.read"]], "save() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.save"]], "set() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.set"]], "setchunkcol() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setinputcols() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setInputCols"]], "setisarray() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlazyannotator() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLazyAnnotator"]], "setlowercase() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setoutputcol() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setOutputCol"]], "setparamvalue() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParamValue"]], "setparams() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[51, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "transform() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.transform"]], "uid (doc2chunkinternal attribute)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.uid"]], "write() (doc2chunkinternal method)": [[51, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.write"]], "documentfiltererbyclassifier (class in sparknlp_jsl.annotator.document_filterer_by_classifier)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier"]], "blacklist (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.blackList"]], "casesensitive (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.caseSensitive"]], "clear() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.clear"]], "copy() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.copy"]], "explainparam() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.explainParam"]], "explainparams() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.explainParams"]], "extractparammap() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.extractParamMap"]], "getinputcols() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getInputCols"]], "getlazyannotator() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getLazyAnnotator"]], "getordefault() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getOrDefault"]], "getoutputcol() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getOutputCol"]], "getparam() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getParam"]], "getparamvalue() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getParamValue"]], "getter_attrs (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getter_attrs"]], "hasdefault() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.hasDefault"]], "hasparam() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.hasParam"]], "inputannotatortypes (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputAnnotatorTypes"]], "inputcols (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputCols"]], "inputcolsvalidation() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputColsValidation"]], "isdefined() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.isDefined"]], "isset() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.isSet"]], "lazyannotator (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.lazyAnnotator"]], "load() (documentfiltererbyclassifier class method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.load"]], "name (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.name"]], "optionalinputannotatortypes (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.optionalInputAnnotatorTypes"]], "outputannotatortype (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputAnnotatorType"]], "outputcol (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputCol"]], "read() (documentfiltererbyclassifier class method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.read"]], "save() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.save"]], "set() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.set"]], "setblacklist() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setBlackList"]], "setcasesensitive() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setCaseSensitive"]], "setdenylist() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setDenyList"]], "setforceinputtypevalidation() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setForceInputTypeValidation"]], "setinputcols() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setInputCols"]], "setlazyannotator() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setLazyAnnotator"]], "setoutputcol() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setOutputCol"]], "setparamvalue() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setParamValue"]], "setparams() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setParams"]], "setwhitelist() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setWhiteList"]], "skiplpinputcolsvalidation (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[52, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "transform() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.transform"]], "uid (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.uid"]], "whitelist (documentfiltererbyclassifier attribute)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.whiteList"]], "write() (documentfiltererbyclassifier method)": [[52, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.write"]], "documentfiltererbyner (class in sparknlp_jsl.annotator.document_filterer_by_ner)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER"]], "blacklist (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.blackList"]], "casesensitive (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.caseSensitive"]], "clear() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.clear"]], "copy() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.copy"]], "explainparam() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.explainParam"]], "explainparams() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.explainParams"]], "extractparammap() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.extractParamMap"]], "getinputcols() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getInputCols"]], "getlazyannotator() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getLazyAnnotator"]], "getordefault() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getOrDefault"]], "getoutputcol() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getOutputCol"]], "getparam() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getParam"]], "getparamvalue() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getParamValue"]], "getter_attrs (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getter_attrs"]], "hasdefault() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.hasDefault"]], "hasparam() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.hasParam"]], "inputannotatortypes (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputAnnotatorTypes"]], "inputcols (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputCols"]], "inputcolsvalidation() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputColsValidation"]], "isdefined() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.isDefined"]], "isset() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.isSet"]], "joinstring (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.joinString"]], "lazyannotator (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.lazyAnnotator"]], "load() (documentfiltererbyner class method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.load"]], "name (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.name"]], "optionalinputannotatortypes (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.optionalInputAnnotatorTypes"]], "outputannotatortype (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputAnnotatorType"]], "outputasdocument (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputAsDocument"]], "outputcol (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputCol"]], "read() (documentfiltererbyner class method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.read"]], "save() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.save"]], "set() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.set"]], "setblacklist() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setBlackList"]], "setcasesensitive() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setCaseSensitive"]], "setdenylist() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setDenyList"]], "setforceinputtypevalidation() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setForceInputTypeValidation"]], "setinputcols() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setInputCols"]], "setlazyannotator() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setLazyAnnotator"]], "setoutputcol() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setOutputCol"]], "setparamvalue() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setParamValue"]], "setparams() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setParams"]], "setwhitelist() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setWhiteList"]], "skiplpinputcolsvalidation (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[53, "module-sparknlp_jsl.annotator.document_filterer_by_ner"]], "transform() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.transform"]], "uid (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.uid"]], "whitelist (documentfiltererbyner attribute)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.whiteList"]], "write() (documentfiltererbyner method)": [[53, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.write"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "clear() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.clear"]], "copy() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.copy"]], "explainparam() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.explainParam"]], "explainparams() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.explainParams"]], "extractparammap() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.extractParamMap"]], "getinputcols() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getInputCols"]], "getlazyannotator() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getLazyAnnotator"]], "getordefault() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getOrDefault"]], "getoutputcol() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getOutputCol"]], "getparam() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getParam"]], "getparamvalue() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getParamValue"]], "getter_attrs (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getter_attrs"]], "hasdefault() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.hasDefault"]], "hasparam() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.hasParam"]], "inputannotatortypes (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "inputcols (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputCols"]], "inputcolsvalidation() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputColsValidation"]], "isdefined() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.isDefined"]], "isset() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.isSet"]], "lazyannotator (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.lazyAnnotator"]], "load() (averageembeddings class method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.load"]], "name (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "optionalinputannotatortypes (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "outputcol (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputCol"]], "read() (averageembeddings class method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.read"]], "save() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.save"]], "set() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.set"]], "setforceinputtypevalidation() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setForceInputTypeValidation"]], "setinputcols() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setInputCols"]], "setlazyannotator() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setLazyAnnotator"]], "setoutputcol() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setOutputCol"]], "setparamvalue() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setParamValue"]], "setparams() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setParams"]], "skiplpinputcolsvalidation (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[54, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "transform() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.transform"]], "uid (averageembeddings attribute)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.uid"]], "write() (averageembeddings method)": [[54, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.write"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "batchsize (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.batchSize"]], "casesensitive (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.caseSensitive"]], "chunkweight (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "clear() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.clear"]], "configprotobytes (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.configProtoBytes"]], "copy() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.copy"]], "dimension (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.dimension"]], "explainparam() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.explainParam"]], "explainparams() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.explainParams"]], "extractparammap() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.extractParamMap"]], "getbatchsize() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getBatchSize"]], "getcasesensitive() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getCaseSensitive"]], "getdimension() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getDimension"]], "getinputcols() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getInputCols"]], "getlazyannotator() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getLazyAnnotator"]], "getordefault() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getOrDefault"]], "getoutputcol() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getOutputCol"]], "getparam() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getParam"]], "getparamvalue() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getParamValue"]], "getstorageref() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getStorageRef"]], "getter_attrs (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getter_attrs"]], "hasdefault() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.hasDefault"]], "hasparam() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.hasParam"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "inputcols (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputCols"]], "inputcolsvalidation() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputColsValidation"]], "isdefined() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isDefined"]], "islong (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isLong"]], "isset() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isSet"]], "lazyannotator (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.lazyAnnotator"]], "load() (bertsentencechunkembeddings static method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "loadsavedmodel() (bertsentencechunkembeddings static method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.loadSavedModel"]], "name (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "optionalinputannotatortypes (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "outputcol (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputCol"]], "pretrained() (bertsentencechunkembeddings static method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "read() (bertsentencechunkembeddings class method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.read"]], "save() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.save"]], "set() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.set"]], "setbatchsize() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setBatchSize"]], "setcasesensitive() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setCaseSensitive"]], "setchunkweight() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "setconfigprotobytes() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setConfigProtoBytes"]], "setdimension() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setDimension"]], "setinputcols() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setInputCols"]], "setislong() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setIsLong"]], "setlazyannotator() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setLazyAnnotator"]], "setoutputcol() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setOutputCol"]], "setparamvalue() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setParamValue"]], "setparams() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setParams"]], "setstorageref() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setStorageRef"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[55, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "storageref (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.storageRef"]], "transform() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.transform"]], "uid (bertsentencechunkembeddings attribute)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.uid"]], "write() (bertsentencechunkembeddings method)": [[55, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.write"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "batchsize (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.batchSize"]], "casesensitive (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.caseSensitive"]], "clear() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.clear"]], "configprotobytes (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.configProtoBytes"]], "copy() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.copy"]], "dimension (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.dimension"]], "entityweights (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "explainparam() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.explainParam"]], "explainparams() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.explainParams"]], "extractparammap() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.extractParamMap"]], "getbatchsize() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getBatchSize"]], "getcasesensitive() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getCaseSensitive"]], "getdimension() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getDimension"]], "getinputcols() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getInputCols"]], "getlazyannotator() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getLazyAnnotator"]], "getordefault() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getOrDefault"]], "getoutputcol() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getOutputCol"]], "getparam() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getParam"]], "getparamvalue() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getParamValue"]], "getstorageref() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getStorageRef"]], "getter_attrs (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getter_attrs"]], "hasdefault() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.hasDefault"]], "hasparam() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.hasParam"]], "inputannotatortypes (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "inputcols (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputCols"]], "inputcolsvalidation() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputColsValidation"]], "isdefined() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isDefined"]], "islong (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isLong"]], "isset() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isSet"]], "lazyannotator (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.lazyAnnotator"]], "load() (entitychunkembeddings class method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.load"]], "loadsavedmodel() (entitychunkembeddings static method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.loadSavedModel"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "optionalinputannotatortypes (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "outputcol (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputCol"]], "pretrained() (entitychunkembeddings static method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "read() (entitychunkembeddings class method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.read"]], "save() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.save"]], "set() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.set"]], "setbatchsize() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setBatchSize"]], "setcasesensitive() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setCaseSensitive"]], "setconfigprotobytes() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setConfigProtoBytes"]], "setdimension() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setDimension"]], "setentityweights() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setinputcols() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setInputCols"]], "setislong() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setIsLong"]], "setlazyannotator() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setLazyAnnotator"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "setoutputcol() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setOutputCol"]], "setparamvalue() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setParamValue"]], "setparams() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setParams"]], "setstorageref() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setStorageRef"]], "settargetentities() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[56, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "storageref (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.storageRef"]], "targetentities (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "transform() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.transform"]], "uid (entitychunkembeddings attribute)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.uid"]], "write() (entitychunkembeddings method)": [[56, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.write"]], "extractivesummarization (class in sparknlp_jsl.annotator.embeddings.extractive_summarization)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization"]], "clear() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.clear"]], "copy() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.copy"]], "explainparam() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.explainParam"]], "explainparams() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.explainParams"]], "extractparammap() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.extractParamMap"]], "getinputcols() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getInputCols"]], "getlazyannotator() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getLazyAnnotator"]], "getordefault() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getOrDefault"]], "getoutputcol() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getOutputCol"]], "getparam() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getParam"]], "getparamvalue() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getParamValue"]], "getter_attrs (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getter_attrs"]], "hasdefault() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.hasDefault"]], "hasparam() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.hasParam"]], "inputannotatortypes (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputAnnotatorTypes"]], "inputcols (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputCols"]], "inputcolsvalidation() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputColsValidation"]], "isdefined() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.isDefined"]], "isset() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.isSet"]], "lazyannotator (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.lazyAnnotator"]], "load() (extractivesummarization class method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.load"]], "name (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.name"]], "optionalinputannotatortypes (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.optionalInputAnnotatorTypes"]], "outputannotatortype (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputAnnotatorType"]], "outputcol (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputCol"]], "read() (extractivesummarization class method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.read"]], "returnsingledocument (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.returnSingleDocument"]], "save() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.save"]], "set() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.set"]], "setforceinputtypevalidation() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setForceInputTypeValidation"]], "setinputcols() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setInputCols"]], "setlazyannotator() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setLazyAnnotator"]], "setoutputcol() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setOutputCol"]], "setparamvalue() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setParamValue"]], "setparams() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setParams"]], "setreturnsingledocument() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setReturnSingleDocument"]], "setsimilaritythreshold() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSimilarityThreshold"]], "setsummarysize() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSummarySize"]], "similaritythreshold (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.similarityThreshold"]], "skiplpinputcolsvalidation (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[57, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "summarysize (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.summarySize"]], "transform() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.transform"]], "uid (extractivesummarization attribute)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.uid"]], "write() (extractivesummarization method)": [[57, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.write"]], "sparknlp_jsl.annotator.embeddings": [[58, "module-sparknlp_jsl.annotator.embeddings"]], "entityrulerinternalapproach (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach"]], "entityrulerinternalmodel (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel"]], "alphabet (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.alphabet"]], "casesensitive (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.caseSensitive"]], "casesensitive (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.caseSensitive"]], "clear() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.clear"]], "clear() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.clear"]], "copy() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.copy"]], "copy() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.copy"]], "database (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.database"]], "enableinmemorystorage (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.enableInMemoryStorage"]], "explainparam() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.explainParam"]], "explainparam() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.explainParam"]], "explainparams() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.explainParams"]], "explainparams() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.explainParams"]], "extractparammap() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.extractParamMap"]], "extractparammap() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.extractParamMap"]], "fit() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.fit"]], "fitmultiple() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.fitMultiple"]], "getcasesensitive() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getCaseSensitive"]], "getcasesensitive() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getCaseSensitive"]], "getenableinmemorystorage() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getEnableInMemoryStorage"]], "getincludestorage() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getIncludeStorage"]], "getinputcols() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getInputCols"]], "getinputcols() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getInputCols"]], "getlazyannotator() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getLazyAnnotator"]], "getlazyannotator() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getLazyAnnotator"]], "getordefault() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getOrDefault"]], "getordefault() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getOrDefault"]], "getoutputcol() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getOutputCol"]], "getoutputcol() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getOutputCol"]], "getparam() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getParam"]], "getparam() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getParam"]], "getparamvalue() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getParamValue"]], "getparamvalue() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getParamValue"]], "getstoragepath() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getStoragePath"]], "getstorageref() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getStorageRef"]], "getstorageref() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getStorageRef"]], "getter_attrs (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getter_attrs"]], "getter_attrs (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getter_attrs"]], "hasdefault() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.hasDefault"]], "hasdefault() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.hasDefault"]], "hasparam() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.hasParam"]], "hasparam() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.hasParam"]], "includestorage (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.includeStorage"]], "inputannotatortypes (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputAnnotatorTypes"]], "inputcols (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputCols"]], "inputcols (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputCols"]], "inputcolsvalidation() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputColsValidation"]], "inputcolsvalidation() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputColsValidation"]], "isdefined() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.isDefined"]], "isdefined() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.isDefined"]], "isset() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.isSet"]], "isset() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.isSet"]], "lazyannotator (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.lazyAnnotator"]], "lazyannotator (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.lazyAnnotator"]], "load() (entityrulerinternalapproach class method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.load"]], "load() (entityrulerinternalmodel class method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.load"]], "loadstorage() (entityrulerinternalmodel static method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorage"]], "loadstorages() (entityrulerinternalmodel static method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorages"]], "name (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.name"]], "name (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.name"]], "optionalinputannotatortypes (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputAnnotatorType"]], "outputannotatortype (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputAnnotatorType"]], "outputcol (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputCol"]], "outputcol (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputCol"]], "patternsresource (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.patternsResource"]], "pretrained() (entityrulerinternalmodel static method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.pretrained"]], "read() (entityrulerinternalapproach class method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.read"]], "read() (entityrulerinternalmodel class method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.read"]], "save() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.save"]], "save() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.save"]], "savestorage() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.saveStorage"]], "sentencematch (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.sentenceMatch"]], "set() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.set"]], "set() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.set"]], "setalphabetresource() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setAlphabetResource"]], "setcasesensitive() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setCaseSensitive"]], "setcasesensitive() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setCaseSensitive"]], "setenableinmemorystorage() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setEnableInMemoryStorage"]], "setforceinputtypevalidation() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setForceInputTypeValidation"]], "setincludestorage() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setIncludeStorage"]], "setinputcols() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setInputCols"]], "setinputcols() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setInputCols"]], "setlazyannotator() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setLazyAnnotator"]], "setlazyannotator() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setLazyAnnotator"]], "setoutputcol() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setOutputCol"]], "setoutputcol() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setOutputCol"]], "setparamvalue() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setParamValue"]], "setparamvalue() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setParamValue"]], "setparams() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setParams"]], "setpatternsresource() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setPatternsResource"]], "setsentencematch() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setSentenceMatch"]], "setstoragepath() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setStoragePath"]], "setstorageref() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setStorageRef"]], "setstorageref() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setStorageRef"]], "setusestorage() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setUseStorage"]], "skiplpinputcolsvalidation (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[59, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "storagepath (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.storagePath"]], "storageref (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.storageRef"]], "storageref (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.storageRef"]], "transform() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.transform"]], "uid (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.uid"]], "uid (entityrulerinternalmodel attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.uid"]], "usestorage (entityrulerinternalapproach attribute)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.useStorage"]], "write() (entityrulerinternalapproach method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.write"]], "write() (entityrulerinternalmodel method)": [[59, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.write"]], "sparknlp_jsl.annotator.er": [[60, "module-sparknlp_jsl.annotator.er"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "clear() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.clear"]], "copy() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.copy"]], "explainparam() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.explainParam"]], "explainparams() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.explainParams"]], "extractparammap() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.extractParamMap"]], "getinputcols() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getInputCols"]], "getlazyannotator() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getLazyAnnotator"]], "getordefault() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getOrDefault"]], "getoutputcol() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getOutputCol"]], "getparam() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getParam"]], "getparamvalue() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getParamValue"]], "getter_attrs (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getter_attrs"]], "hasdefault() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.hasDefault"]], "hasparam() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.hasParam"]], "inputannotatortypes (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "inputcolsvalidation() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputColsValidation"]], "isdefined() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.isDefined"]], "isset() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.isSet"]], "lazyannotator (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.lazyAnnotator"]], "load() (featuresassembler class method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.load"]], "name (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "optionalinputannotatortypes (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.optionalInputAnnotatorTypes"]], "outputannotatortype (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "read() (featuresassembler class method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.read"]], "save() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.save"]], "set() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.set"]], "setforceinputtypevalidation() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setForceInputTypeValidation"]], "setinputcols() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setlazyannotator() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setLazyAnnotator"]], "setoutputcol() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparamvalue() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParamValue"]], "setparams() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[61, "module-sparknlp_jsl.annotator.feature_assembler"]], "transform() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.transform"]], "uid (featuresassembler attribute)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.uid"]], "write() (featuresassembler method)": [[61, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.write"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "blacklist (filteringparams attribute)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.blackList"]], "casesensitive (filteringparams attribute)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.caseSensitive"]], "criteria (filteringparams attribute)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "filtervalue (filteringparams attribute)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setblacklist() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setBlackList"]], "setcasesensitive() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCaseSensitive"]], "setcriteria() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setdenylist() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setDenyList"]], "setfiltervalue() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "setwhitelist() (filteringparams method)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setWhiteList"]], "sparknlp_jsl.annotator.filtering_params": [[62, "module-sparknlp_jsl.annotator.filtering_params"]], "whitelist (filteringparams attribute)": [[62, "sparknlp_jsl.annotator.filtering_params.FilteringParams.whiteList"]], "flattener (class in sparknlp_jsl.annotator.flattener)": [[63, "sparknlp_jsl.annotator.flattener.Flattener"]], "cleanannotations (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.cleanAnnotations"]], "clear() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.clear"]], "copy() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.copy"]], "explainparam() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.explainParam"]], "explainparams() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.explainParams"]], "extractparammap() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.extractParamMap"]], "flattenexplodedcolumns (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.flattenExplodedColumns"]], "getinputcols() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.getInputCols"]], "getordefault() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.getOrDefault"]], "getparam() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.getParam"]], "getparamvalue() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.getParamValue"]], "getter_attrs (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.getter_attrs"]], "hasdefault() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.hasDefault"]], "hasparam() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.hasParam"]], "inputcols (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.inputCols"]], "isdefined() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.isDefined"]], "isset() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.isSet"]], "keeporiginalcolumns (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.keepOriginalColumns"]], "kwargs (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.kwargs"]], "load() (flattener class method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.load"]], "name (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.name"]], "orderbycolumn (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.orderByColumn"]], "orderdescending (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.orderDescending"]], "outputannotatortype (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.outputAnnotatorType"]], "read() (flattener class method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.read"]], "save() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.save"]], "set() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.set"]], "setcleanannotations() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setCleanAnnotations"]], "setexplodeselectedfields() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setExplodeSelectedFields"]], "setflattenexplodedcolumns() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setFlattenExplodedColumns"]], "setinputcols() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setInputCols"]], "setkeeporiginalcolumns() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setKeepOriginalColumns"]], "setorderbycolumn() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setOrderByColumn"]], "setorderdescending() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setOrderDescending"]], "setparamvalue() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setParamValue"]], "setparams() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.setParams"]], "sparknlp_jsl.annotator.flattener": [[63, "module-sparknlp_jsl.annotator.flattener"]], "transform() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.transform"]], "uid (flattener attribute)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.uid"]], "write() (flattener method)": [[63, "sparknlp_jsl.annotator.flattener.Flattener.write"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "clear() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.clear"]], "clear() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.clear"]], "copy() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.copy"]], "copy() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.copy"]], "datasetinfo (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.datasetInfo"]], "datasetinfo (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.datasetInfo"]], "doexceptionhandling (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.doExceptionHandling"]], "dropout (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "engine (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.engine"]], "epochsn (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "explainparam() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.explainParam"]], "explainparam() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.explainParam"]], "explainparams() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.explainParams"]], "explainparams() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.explainParams"]], "extractparammap() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.extractParamMap"]], "extractparammap() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.extractParamMap"]], "featurescaling (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "featurescaling (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.featureScaling"]], "fit() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fit"]], "fitmultiple() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fitMultiple"]], "fiximbalance (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "getengine() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getEngine"]], "getinputcols() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getInputCols"]], "getinputcols() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getInputCols"]], "getlazyannotator() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getLazyAnnotator"]], "getordefault() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getOrDefault"]], "getordefault() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getOrDefault"]], "getoutputcol() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getOutputCol"]], "getoutputcol() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getOutputCol"]], "getparam() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getParam"]], "getparam() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getParam"]], "getparamvalue() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getParamValue"]], "getparamvalue() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getParamValue"]], "getter_attrs (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getter_attrs"]], "getter_attrs (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getter_attrs"]], "hasdefault() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.hasDefault"]], "hasdefault() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.hasDefault"]], "hasparam() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.hasParam"]], "hasparam() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.hasParam"]], "inputannotatortypes (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "inputcols (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputCols"]], "inputcols (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputCols"]], "inputcolsvalidation() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputColsValidation"]], "isdefined() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.isDefined"]], "isdefined() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.isDefined"]], "isset() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.isSet"]], "isset() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.isSet"]], "labelcolumn (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "lazyannotator (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.lazyAnnotator"]], "lazyannotator (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.lazyAnnotator"]], "learningrate (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "load() (genericclassifierapproach class method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.load"]], "load() (genericclassifiermodel class method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.load"]], "modelfile (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "optionalinputannotatortypes (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputcol (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputCol"]], "outputcol (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputCol"]], "outputlogspath (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "read() (genericclassifierapproach class method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.read"]], "read() (genericclassifiermodel class method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.read"]], "save() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.save"]], "save() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.save"]], "set() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.set"]], "set() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.set"]], "setbatchsize() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setDoExceptionHandling"]], "setdropout() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setInputCols"]], "setinputcols() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setInputCols"]], "setlabelcol() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlazyannotator() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputcol() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputCol"]], "setoutputcol() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setOutputCol"]], "setoutputlogspath() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setParamValue"]], "setparamvalue() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setParamValue"]], "setparams() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setParams"]], "setvalidationsplit() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[64, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "transform() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.transform"]], "uid (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.uid"]], "uid (genericclassifiermodel attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.uid"]], "validationsplit (genericclassifierapproach attribute)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "write() (genericclassifierapproach method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.write"]], "write() (genericclassifiermodel method)": [[64, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.write"]], "sparknlp_jsl.annotator.generic_classifier": [[65, "module-sparknlp_jsl.annotator.generic_classifier"]], "handleexceptionparams (class in sparknlp_jsl.annotator.handle_exception_params)": [[66, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams"]], "doexceptionhandling (handleexceptionparams attribute)": [[66, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.doExceptionHandling"]], "setdoexceptionhandling() (handleexceptionparams method)": [[66, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.setDoExceptionHandling"]], "sparknlp_jsl.annotator.handle_exception_params": [[66, "module-sparknlp_jsl.annotator.handle_exception_params"]], "assertion (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.disambiguation"]], "embeddings (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.embeddings"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.qa"]], "rag (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.rag"]], "re (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.re"]], "regex (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.regex"]], "resolution (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.seq2seq"]], "splitter (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.splitter"]], "windowed (in module sparknlp_jsl.annotator)": [[67, "sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.matcher": [[68, "module-sparknlp_jsl.annotator.matcher"]], "textmatcherinternal (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal"]], "textmatcherinternalmodel (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel"]], "buildfromtokens (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.buildFromTokens"]], "buildfromtokens (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.buildFromTokens"]], "casesensitive (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.caseSensitive"]], "casesensitive (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.caseSensitive"]], "clear() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.clear"]], "clear() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.clear"]], "copy() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.copy"]], "copy() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.copy"]], "delimiter (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.delimiter"]], "delimiter (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.delimiter"]], "entities (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entities"]], "entityvalue (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entityValue"]], "entityvalue (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.entityValue"]], "explainparam() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.explainParam"]], "explainparam() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.explainParam"]], "explainparams() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.explainParams"]], "explainparams() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.explainParams"]], "extractparammap() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.extractParamMap"]], "extractparammap() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.extractParamMap"]], "fit() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.fit"]], "fitmultiple() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.fitMultiple"]], "getcasesensitive() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getCaseSensitive"]], "getdelimiter() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getDelimiter"]], "getinputcols() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getInputCols"]], "getinputcols() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getInputCols"]], "getlazyannotator() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getLazyAnnotator"]], "getlazyannotator() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getLazyAnnotator"]], "getordefault() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getOrDefault"]], "getordefault() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getOrDefault"]], "getoutputcol() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getOutputCol"]], "getoutputcol() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getOutputCol"]], "getparam() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getParam"]], "getparam() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getParam"]], "getparamvalue() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getParamValue"]], "getparamvalue() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getParamValue"]], "getter_attrs (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getter_attrs"]], "getter_attrs (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getter_attrs"]], "hasdefault() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.hasDefault"]], "hasdefault() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.hasDefault"]], "hasparam() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.hasParam"]], "hasparam() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.hasParam"]], "inputannotatortypes (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputAnnotatorTypes"]], "inputcols (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputCols"]], "inputcols (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputCols"]], "inputcolsvalidation() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputColsValidation"]], "inputcolsvalidation() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputColsValidation"]], "isdefined() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.isDefined"]], "isdefined() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.isDefined"]], "isset() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.isSet"]], "isset() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.isSet"]], "lazyannotator (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.lazyAnnotator"]], "lazyannotator (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.lazyAnnotator"]], "load() (textmatcherinternal class method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.load"]], "load() (textmatcherinternalmodel class method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.load"]], "mergeoverlapping (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.mergeOverlapping"]], "mergeoverlapping (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.mergeOverlapping"]], "name (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.name"]], "optionalinputannotatortypes (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputAnnotatorType"]], "outputannotatortype (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputAnnotatorType"]], "outputcol (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputCol"]], "outputcol (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputCol"]], "pretrained() (textmatcherinternalmodel static method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.pretrained"]], "read() (textmatcherinternal class method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.read"]], "read() (textmatcherinternalmodel class method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.read"]], "save() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.save"]], "save() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.save"]], "searchtrie (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.searchTrie"]], "set() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.set"]], "set() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.set"]], "setbuildfromtokens() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setBuildFromTokens"]], "setbuildfromtokens() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setBuildFromTokens"]], "setcasesensitive() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setCaseSensitive"]], "setdelimiter() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setDelimiter"]], "setdelimiter() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setDelimiter"]], "setentities() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntities"]], "setentityvalue() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntityValue"]], "setentityvalue() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setEntityValue"]], "setforceinputtypevalidation() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setForceInputTypeValidation"]], "setforceinputtypevalidation() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setForceInputTypeValidation"]], "setinputcols() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setInputCols"]], "setinputcols() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setInputCols"]], "setlazyannotator() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setLazyAnnotator"]], "setlazyannotator() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setLazyAnnotator"]], "setmergeoverlapping() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setMergeOverlapping"]], "setoutputcol() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setOutputCol"]], "setoutputcol() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setOutputCol"]], "setparamvalue() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setParamValue"]], "setparamvalue() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setParamValue"]], "setparams() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setParams"]], "skiplpinputcolsvalidation (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[69, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "transform() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.transform"]], "uid (textmatcherinternal attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.uid"]], "uid (textmatcherinternalmodel attribute)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.uid"]], "write() (textmatcherinternal method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.write"]], "write() (textmatcherinternalmodel method)": [[69, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.write"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergefeatureparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "blacklist (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.blackList"]], "blacklist (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.blackList"]], "casesensitive (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.caseSensitive"]], "casesensitive (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.caseSensitive"]], "chunkprecedence (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.chunkPrecedence"]], "chunkprecedence (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.chunkPrecedence"]], "chunkprecedence (mergeprioritizationparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.chunkPrecedenceValuePrioritization"]], "chunkprecedencevalueprioritization (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.chunkPrecedenceValuePrioritization"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "clear() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.clear"]], "clear() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.clear"]], "copy() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.copy"]], "copy() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.copy"]], "criteria (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.criteria"]], "criteria (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.criteria"]], "defaultconfidence (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.defaultConfidence"]], "defaultconfidence (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.defaultConfidence"]], "defaultconfidence (mergeprioritizationparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "doexceptionhandling (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.doExceptionHandling"]], "entitiesconfidenceresource (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.entitiesConfidenceResource"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "explainparam() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.explainParam"]], "explainparam() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.explainParam"]], "explainparams() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.explainParams"]], "explainparams() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.explainParams"]], "extractparammap() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.extractParamMap"]], "extractparammap() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.extractParamMap"]], "falsepositivesresource (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.falsePositivesResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "filtervalue (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.filterValue"]], "filtervalue (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.filterValue"]], "fit() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.fit"]], "fitmultiple() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.fitMultiple"]], "getinputcols() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getInputCols"]], "getinputcols() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getInputCols"]], "getlazyannotator() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getLazyAnnotator"]], "getlazyannotator() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getLazyAnnotator"]], "getordefault() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getOrDefault"]], "getordefault() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getOrDefault"]], "getoutputcol() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getOutputCol"]], "getoutputcol() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getOutputCol"]], "getparam() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getParam"]], "getparam() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getParam"]], "getparamvalue() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getParamValue"]], "getparamvalue() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getParamValue"]], "getreplacedict() (mergefeatureparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.getReplaceDict"]], "getter_attrs (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getter_attrs"]], "getter_attrs (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getter_attrs"]], "hasdefault() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.hasDefault"]], "hasdefault() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.hasDefault"]], "hasparam() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.hasParam"]], "hasparam() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.hasParam"]], "inputannotatortypes (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "inputcols (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputCols"]], "inputcols (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputCols"]], "inputcolsvalidation() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputColsValidation"]], "inputcolsvalidation() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputColsValidation"]], "isdefined() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.isDefined"]], "isdefined() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.isDefined"]], "isset() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.isSet"]], "isset() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.isSet"]], "lazyannotator (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.lazyAnnotator"]], "lazyannotator (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.lazyAnnotator"]], "load() (chunkmergeapproach class method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.load"]], "load() (chunkmergemodel class method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.load"]], "mergeoverlapping (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.mergeOverlapping"]], "mergeoverlapping (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.mergeOverlapping"]], "mergeoverlapping (mergecommonparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "optionalinputannotatortypes (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.optionalInputAnnotatorTypes"]], "orderingfeatures (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.orderingFeatures"]], "orderingfeatures (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.orderingFeatures"]], "orderingfeatures (mergeprioritizationparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "outputcol (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputCol"]], "outputcol (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputCol"]], "pretrained() (chunkmergemodel static method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "read() (chunkmergeapproach class method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.read"]], "read() (chunkmergemodel class method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.read"]], "regex (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.regex"]], "regex (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.regex"]], "replacedictresource (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.replaceDictResource"]], "replacedictresource (mergeresourceparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "save() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.save"]], "save() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.save"]], "selectionstrategy (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.selectionStrategy"]], "selectionstrategy (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.selectionStrategy"]], "selectionstrategy (mergeprioritizationparams attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "set() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.set"]], "set() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.set"]], "setblacklist() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setBlackList"]], "setblacklist() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setBlackList"]], "setcasesensitive() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setCaseSensitive"]], "setcasesensitive() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setCaseSensitive"]], "setchunkprecedence() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setChunkPrecedence"]], "setchunkprecedence() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setChunkPrecedence"]], "setchunkprecedence() (mergeprioritizationparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setChunkPrecedenceValuePrioritization"]], "setchunkprecedencevalueprioritization() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setChunkPrecedenceValuePrioritization"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setcriteria() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setCriteria"]], "setcriteria() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setCriteria"]], "setdefaultconfidence() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDefaultConfidence"]], "setdefaultconfidence() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setDefaultConfidence"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setdenylist() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDenyList"]], "setdenylist() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setDenyList"]], "setdoexceptionhandling() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDoExceptionHandling"]], "setentitiesconfidence() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositives() (mergefeatureparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setFalsePositives"]], "setfalsepositivesresource() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFalsePositivesResource"]], "setfalsepositivesresource() (mergeresourceparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setfiltervalue() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFilterValue"]], "setfiltervalue() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setFilterValue"]], "setforceinputtypevalidation() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setForceInputTypeValidation"]], "setinputcols() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setlazyannotator() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setLazyAnnotator"]], "setlazyannotator() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setLazyAnnotator"]], "setmergeoverlapping() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setMergeOverlapping"]], "setmergeoverlapping() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setMergeOverlapping"]], "setmergeoverlapping() (mergecommonparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setOrderingFeatures"]], "setorderingfeatures() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setOrderingFeatures"]], "setorderingfeatures() (mergeprioritizationparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setoutputcol() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setOutputCol"]], "setoutputcol() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setOutputCol"]], "setparamvalue() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setParamValue"]], "setparamvalue() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setParamValue"]], "setparams() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setParams"]], "setregex() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setRegex"]], "setregex() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setRegex"]], "setreplacedict() (mergefeatureparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setReplaceDict"]], "setreplacedictresource() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setReplaceDictResource"]], "setreplacedictresource() (mergeresourceparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setselectionstrategy() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setSelectionStrategy"]], "setselectionstrategy() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setSelectionStrategy"]], "setselectionstrategy() (mergeprioritizationparams method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "setwhitelist() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setWhiteList"]], "setwhitelist() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setWhiteList"]], "skiplpinputcolsvalidation (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[70, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "transform() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.transform"]], "uid (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.uid"]], "uid (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.uid"]], "whitelist (chunkmergeapproach attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.whiteList"]], "whitelist (chunkmergemodel attribute)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.whiteList"]], "write() (chunkmergeapproach method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.write"]], "write() (chunkmergemodel method)": [[70, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.write"]], "sparknlp_jsl.annotator.merge": [[71, "module-sparknlp_jsl.annotator.merge"]], "multichunk2doc (class in sparknlp_jsl.annotator.multi_chunk2_doc)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc"]], "blacklist (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.blackList"]], "casesensitive (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.caseSensitive"]], "clear() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.clear"]], "copy() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.copy"]], "explainparam() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.explainParam"]], "explainparams() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.explainParams"]], "extractparammap() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.extractParamMap"]], "getinputcols() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getInputCols"]], "getlazyannotator() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getLazyAnnotator"]], "getordefault() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getOrDefault"]], "getoutputcol() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getOutputCol"]], "getparam() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getParam"]], "getparamvalue() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getParamValue"]], "getter_attrs (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getter_attrs"]], "hasdefault() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.hasDefault"]], "hasparam() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.hasParam"]], "inputannotatortypes (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputAnnotatorTypes"]], "inputcols (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputCols"]], "inputcolsvalidation() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputColsValidation"]], "isdefined() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.isDefined"]], "isset() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.isSet"]], "lazyannotator (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.lazyAnnotator"]], "load() (multichunk2doc class method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.load"]], "name (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.name"]], "optionalinputannotatortypes (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.optionalInputAnnotatorTypes"]], "outputannotatortype (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.outputAnnotatorType"]], "outputcol (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.outputCol"]], "prefix (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.prefix"]], "read() (multichunk2doc class method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.read"]], "save() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.save"]], "separator (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.separator"]], "set() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.set"]], "setblacklist() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setBlackList"]], "setcasesensitive() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setCaseSensitive"]], "setdenylist() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setDenyList"]], "setforceinputtypevalidation() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setForceInputTypeValidation"]], "setinputcols() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setInputCols"]], "setlazyannotator() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setLazyAnnotator"]], "setoutputcol() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setOutputCol"]], "setparamvalue() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setParamValue"]], "setparams() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setParams"]], "setprefix() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setPrefix"]], "setseparator() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setSeparator"]], "setsuffix() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setSuffix"]], "setwhitelist() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setWhiteList"]], "skiplpinputcolsvalidation (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[72, "module-sparknlp_jsl.annotator.multi_chunk2_doc"]], "suffix (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.suffix"]], "transform() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.transform"]], "uid (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.uid"]], "whitelist (multichunk2doc attribute)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.whiteList"]], "write() (multichunk2doc method)": [[72, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.write"]], "sparknlp_jsl.annotator.ner": [[73, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "clear() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.clear"]], "copy() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.copy"]], "explainparam() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.explainParam"]], "explainparams() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.explainParams"]], "extractparammap() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.extractParamMap"]], "getinputcols() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getInputCols"]], "getlazyannotator() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getLazyAnnotator"]], "getordefault() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getOrDefault"]], "getoutputcol() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getOutputCol"]], "getparam() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getParam"]], "getparamvalue() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getParamValue"]], "getter_attrs (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getter_attrs"]], "hasdefault() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.hasDefault"]], "hasparam() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.hasParam"]], "inputannotatortypes (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "inputcols (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputCols"]], "inputcolsvalidation() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputColsValidation"]], "isdefined() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.isDefined"]], "isset() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.isSet"]], "lazyannotator (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.lazyAnnotator"]], "load() (iobtagger class method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.load"]], "name (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "optionalinputannotatortypes (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.optionalInputAnnotatorTypes"]], "outputannotatortype (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "outputcol (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputCol"]], "read() (iobtagger class method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.read"]], "save() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.save"]], "scheme (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "set() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.set"]], "setforceinputtypevalidation() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setForceInputTypeValidation"]], "setinputcols() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setInputCols"]], "setlazyannotator() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setLazyAnnotator"]], "setoutputcol() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setOutputCol"]], "setparamvalue() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setParamValue"]], "setparams() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setParams"]], "setscheme() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "skiplpinputcolsvalidation (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[74, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "transform() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.transform"]], "uid (iobtagger attribute)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.uid"]], "write() (iobtagger method)": [[74, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.write"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "clear() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.clear"]], "clear() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.clear"]], "configprotobytes (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "copy() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.copy"]], "copy() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.copy"]], "datasetinfo (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.datasetInfo"]], "datasetinfo (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.datasetInfo"]], "doexceptionhandling (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.doExceptionHandling"]], "dropout (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableOutputLogs"]], "engine (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.engine"]], "entities (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.entities"]], "evaluationlogextended (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.evaluationLogExtended"]], "explainparam() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.explainParam"]], "explainparam() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.explainParam"]], "explainparams() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.explainParams"]], "explainparams() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.explainParams"]], "extractparammap() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.extractParamMap"]], "extractparammap() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.extractParamMap"]], "fit() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.fit"]], "fitmultiple() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.fitMultiple"]], "getclasses() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "getengine() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getEngine"]], "getinputcols() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getInputCols"]], "getinputcols() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getInputCols"]], "getlabelcolumn() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getLabelColumn"]], "getlazyannotator() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getLazyAnnotator"]], "getlazyannotator() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getLazyAnnotator"]], "getordefault() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getOrDefault"]], "getordefault() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getOrDefault"]], "getoutputcol() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getOutputCol"]], "getoutputcol() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getOutputCol"]], "getparam() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getParam"]], "getparam() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getParam"]], "getparamvalue() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getParamValue"]], "getparamvalue() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getParamValue"]], "getstorageref() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getStorageRef"]], "gettrainingclassdistribution() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "getter_attrs (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getter_attrs"]], "getter_attrs (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getter_attrs"]], "graphfile (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "hasdefault() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.hasDefault"]], "hasdefault() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.hasDefault"]], "hasparam() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.hasParam"]], "hasparam() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.hasParam"]], "includeallconfidencescores (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "inputcols (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputCols"]], "inputcols (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputCols"]], "inputcolsvalidation() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputColsValidation"]], "inputcolsvalidation() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputColsValidation"]], "isdefined() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.isDefined"]], "isdefined() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.isDefined"]], "isset() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.isSet"]], "isset() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.isSet"]], "labelcasing (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "labelcolumn (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.labelColumn"]], "lazyannotator (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lazyAnnotator"]], "lazyannotator (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.lazyAnnotator"]], "load() (medicalnerapproach class method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.load"]], "load() (medicalnermodel class method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.load"]], "loadsavedmodel() (medicalnermodel static method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "maxepochs (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.maxEpochs"]], "minepochs (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.minEpochs"]], "name (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "optionalinputannotatortypes (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "outputcol (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputCol"]], "outputcol (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputCol"]], "outputlogspath (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputLogsPath"]], "overrideexistingtags (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomseed (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomSeed"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "read() (medicalnerapproach class method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.read"]], "read() (medicalnermodel class method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.read"]], "save() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.save"]], "save() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.save"]], "sentencetokenindex (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "set() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.set"]], "set() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.set"]], "setbatchsize() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdatasetinfo() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDatasetInfo"]], "setdatasetinfo() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setDatasetInfo"]], "setdoexceptionhandling() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDoExceptionHandling"]], "setdropout() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableOutputLogs"]], "setentities() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEntities"]], "setevaluationlogextended() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setForceInputTypeValidation"]], "setgraphfile() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setinputcols() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setInputCols"]], "setinputcols() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInputCols"]], "setlabelcasing() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlabelcolumn() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLabelColumn"]], "setlazyannotator() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLazyAnnotator"]], "setlazyannotator() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLazyAnnotator"]], "setlogprefix() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setmaxepochs() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setMaxEpochs"]], "setminepochs() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setMinEpochs"]], "setoutputcol() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOutputCol"]], "setoutputcol() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setOutputCol"]], "setoutputlogspath() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setparamvalue() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setParamValue"]], "setparamvalue() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setParamValue"]], "setparams() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setParams"]], "setpo() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomseed() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "setstorageref() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setStorageRef"]], "settagsmapping() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "settestdataset() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTestDataset"]], "setusebestmodel() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "setverbose() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setVerbose"]], "skiplpinputcolsvalidation (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.medical_ner": [[75, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "storageref (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.storageRef"]], "testdataset (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.testDataset"]], "trainingclassdistribution (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "transform() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.transform"]], "uc (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.uc"]], "uid (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.uid"]], "uid (medicalnermodel attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.uid"]], "usebestmodel (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "validationsplit (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.validationSplit"]], "verbose (medicalnerapproach attribute)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.verbose"]], "write() (medicalnerapproach method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.write"]], "write() (medicalnermodel method)": [[75, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.write"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "clear() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.clear"]], "copy() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.copy"]], "explainparam() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.explainParam"]], "explainparams() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.explainParams"]], "extractparammap() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.extractParamMap"]], "getinputcols() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getInputCols"]], "getlazyannotator() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getLazyAnnotator"]], "getordefault() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getOrDefault"]], "getoutputcol() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getOutputCol"]], "getparam() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getParam"]], "getparamvalue() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getParamValue"]], "getter_attrs (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getter_attrs"]], "hasdefault() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.hasDefault"]], "hasparam() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.hasParam"]], "inputannotatortypes (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "inputcols (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputCols"]], "inputcolsvalidation() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputColsValidation"]], "isdefined() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.isDefined"]], "isset() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.isSet"]], "lazyannotator (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.lazyAnnotator"]], "load() (nerchunker class method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.load"]], "name (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "optionalinputannotatortypes (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.optionalInputAnnotatorTypes"]], "outputannotatortype (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "outputcol (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputCol"]], "read() (nerchunker class method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.read"]], "regexparsers (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "save() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.save"]], "set() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.set"]], "setforceinputtypevalidation() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setForceInputTypeValidation"]], "setinputcols() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setInputCols"]], "setlazyannotator() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setLazyAnnotator"]], "setoutputcol() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setOutputCol"]], "setparamvalue() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setParamValue"]], "setparams() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setParams"]], "setregexparsers() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "skiplpinputcolsvalidation (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[76, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "transform() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.transform"]], "uid (nerchunker attribute)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.uid"]], "write() (nerchunker method)": [[76, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.write"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "allpossiblefieldstostandardize (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.allPossibleFieldsToStandardize"]], "blacklist (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.blackList"]], "blacklist (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.blackList"]], "blacklist (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.blackList"]], "casesensitive (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.caseSensitive"]], "casesensitive (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.caseSensitive"]], "casesensitive (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.caseSensitive"]], "clear() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.clear"]], "clear() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.clear"]], "copy() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.copy"]], "copy() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.copy"]], "criteria (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.criteria"]], "criteria (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.criteria"]], "criteria (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.criteria"]], "doexceptionhandling (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.doExceptionHandling"]], "doexceptionhandling (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.doExceptionHandling"]], "doexceptionhandling (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.doExceptionHandling"]], "explainparam() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.explainParam"]], "explainparam() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.explainParam"]], "explainparams() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.explainParams"]], "explainparams() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.explainParams"]], "extractparammap() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.extractParamMap"]], "extractparammap() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.extractParamMap"]], "filtervalue (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.filterValue"]], "filtervalue (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.filterValue"]], "filtervalue (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.filterValue"]], "fit() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.fit"]], "fitmultiple() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.fitMultiple"]], "getinputcols() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getInputCols"]], "getinputcols() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getInputCols"]], "getlazyannotator() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getLazyAnnotator"]], "getlazyannotator() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getLazyAnnotator"]], "getordefault() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getOrDefault"]], "getordefault() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getOrDefault"]], "getoutputcol() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getOutputCol"]], "getoutputcol() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getOutputCol"]], "getparam() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getParam"]], "getparam() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getParam"]], "getparamvalue() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getParamValue"]], "getparamvalue() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getParamValue"]], "getter_attrs (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getter_attrs"]], "getter_attrs (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getter_attrs"]], "greedymode (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "greedymode (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.greedyMode"]], "greedymode (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.greedyMode"]], "hasdefault() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.hasDefault"]], "hasdefault() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.hasDefault"]], "hasparam() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.hasParam"]], "hasparam() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.hasParam"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "ignorestopwords (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.ignoreStopWords"]], "ignorestopwords (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.ignoreStopWords"]], "includeoutputcolumn (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.includeOutputColumn"]], "includestandardfield (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.includeStandardField"]], "inputannotatortypes (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "inputcols (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputCols"]], "inputcols (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputCols"]], "inputcolsvalidation() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputColsValidation"]], "inputcolsvalidation() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputColsValidation"]], "isdefined() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.isDefined"]], "isdefined() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.isDefined"]], "isset() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.isSet"]], "isset() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.isSet"]], "lazyannotator (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.lazyAnnotator"]], "lazyannotator (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.lazyAnnotator"]], "load() (nerconverterinternal class method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.load"]], "load() (nerconverterinternalmodel class method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.load"]], "name (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "optionalinputannotatortypes (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "outputcol (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputCol"]], "outputcol (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputCol"]], "outputcolumnkey (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputColumnKey"]], "preserveposition (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "preserveposition (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.preservePosition"]], "preserveposition (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.preservePosition"]], "read() (nerconverterinternal class method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.read"]], "read() (nerconverterinternalmodel class method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.read"]], "regex (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.regex"]], "regex (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.regex"]], "regex (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.regex"]], "replacedictresource (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "save() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.save"]], "save() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.save"]], "set() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.set"]], "set() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.set"]], "setallpossiblefieldstostandardize() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setAllPossibleFieldsToStandardize"]], "setallowlist() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setallowlist() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setAllowList"]], "setallowlist() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setAllowList"]], "setblacklist() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setBlackList"]], "setblacklist() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setBlackList"]], "setblacklist() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setBlackList"]], "setcasesensitive() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setCaseSensitive"]], "setcasesensitive() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setCaseSensitive"]], "setcasesensitive() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setCaseSensitive"]], "setcriteria() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setCriteria"]], "setcriteria() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setCriteria"]], "setcriteria() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setCriteria"]], "setdenylist() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setdenylist() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setDenyList"]], "setdenylist() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setDenyList"]], "setdoexceptionhandling() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDoExceptionHandling"]], "setdoexceptionhandling() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setDoExceptionHandling"]], "setdoexceptionhandling() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setDoExceptionHandling"]], "setfiltervalue() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setFilterValue"]], "setfiltervalue() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setFilterValue"]], "setfiltervalue() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setFilterValue"]], "setforceinputtypevalidation() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setForceInputTypeValidation"]], "setgreedymode() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setgreedymode() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setGreedyMode"]], "setgreedymode() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setIgnoreStopWords"]], "setincludeoutputcolumn() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIncludeOutputColumn"]], "setincludestandardfield() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIncludeStandardField"]], "setinputcols() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setInputCols"]], "setinputcols() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setInputCols"]], "setlazyannotator() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setLazyAnnotator"]], "setlazyannotator() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setLazyAnnotator"]], "setoutputcol() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setOutputCol"]], "setoutputcol() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setOutputCol"]], "setoutputcolumnkey() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setOutputColumnKey"]], "setparamvalue() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setParamValue"]], "setparamvalue() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setParamValue"]], "setparams() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setParams"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setpreserveposition() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setPreservePosition"]], "setpreserveposition() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setPreservePosition"]], "setregex() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setRegex"]], "setregex() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setRegex"]], "setregex() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setRegex"]], "setreplacedictresource() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setstandardfieldkey() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setStandardFieldKey"]], "setthreshold() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "setthreshold() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setThreshold"]], "setthreshold() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setThreshold"]], "setwhitelist() (commonnerconverterinternalparams method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setWhiteList"]], "setwhitelist() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setWhiteList"]], "setwhitelist() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setWhiteList"]], "skiplpinputcolsvalidation (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[77, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "standardfieldkey (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.standardFieldKey"]], "threshold (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "threshold (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.threshold"]], "threshold (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.threshold"]], "transform() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.transform"]], "uid (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.uid"]], "uid (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.uid"]], "whitelist (commonnerconverterinternalparams attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.whiteList"]], "whitelist (nerconverterinternal attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.whiteList"]], "whitelist (nerconverterinternalmodel attribute)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.whiteList"]], "write() (nerconverterinternal method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.write"]], "write() (nerconverterinternalmodel method)": [[77, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.write"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "clear() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.clear"]], "combineentities (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "copy() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.copy"]], "entityscopes (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "explainparam() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.explainParam"]], "explainparams() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.explainParams"]], "extractparammap() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.extractParamMap"]], "getinputcols() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getInputCols"]], "getlazyannotator() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getLazyAnnotator"]], "getordefault() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getOrDefault"]], "getoutputcol() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getOutputCol"]], "getparam() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getParam"]], "getparamvalue() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getParamValue"]], "getter_attrs (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getter_attrs"]], "hasdefault() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.hasDefault"]], "hasparam() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.hasParam"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "inputcols (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputCols"]], "inputcolsvalidation() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputColsValidation"]], "isdefined() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.isDefined"]], "isset() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.isSet"]], "lazyannotator (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.lazyAnnotator"]], "load() (nertemplaterendermodel class method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.load"]], "optionalinputannotatortypes (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "outputcol (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputCol"]], "permuteentities (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "read() (nertemplaterendermodel class method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.read"]], "resampleentities (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "save() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.save"]], "set() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.set"]], "setcombineentities() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setforceinputtypevalidation() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setForceInputTypeValidation"]], "setinputcols() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setInputCols"]], "setlazyannotator() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setLazyAnnotator"]], "setoutputcol() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setOutputCol"]], "setparamvalue() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setParamValue"]], "setparams() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setParams"]], "setpermuteentities() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "skiplpinputcolsvalidation (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[78, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "transform() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.transform"]], "uid (nertemplaterendermodel attribute)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.uid"]], "write() (nertemplaterendermodel method)": [[78, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.write"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "batchsize (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.batchSize"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.batchSize"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.batchSize"]], "casesensitive (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"]], "clear() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.clear"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.clear"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.clear"]], "coalescesentences (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"]], "configprotobytes (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"]], "copy() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.copy"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.copy"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.copy"]], "engine (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.engine"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.engine"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.engine"]], "explainparam() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.explainParam"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParam"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParam"]], "explainparams() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.explainParams"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParams"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParams"]], "extractparammap() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"]], "getbatchsize() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"]], "getcasesensitive() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"]], "getclasses() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getClasses"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "getengine() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getEngine"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getEngine"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getEngine"]], "getinputcols() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"]], "getlazyannotator() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"]], "getmaxsentencelength() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"]], "getordefault() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"]], "getoutputcol() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"]], "getparam() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getParam"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParam"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParam"]], "getparamvalue() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"]], "getter_attrs (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"]], "hasdefault() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"]], "hasparam() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.hasParam"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasParam"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasParam"]], "ignoreentities (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "inputcols (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputCols"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputCols"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputCols"]], "inputcolsvalidation() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"]], "isdefined() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.isDefined"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isDefined"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isDefined"]], "isset() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.isSet"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isSet"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isSet"]], "lazyannotator (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"]], "load() (zeroshotnermodel static method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "loadsavedmodel() (zeroshotnermodel static method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"]], "maxsentencelength (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"]], "max_length_limit (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"]], "name (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "optionalinputannotatortypes (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "outputcol (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputCol"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputCol"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputCol"]], "predictionthreshold (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "read() (zeroshotnermodel class method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.read"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.read"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.read"]], "save() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.save"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.save"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.save"]], "set() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.set"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.set"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.set"]], "setbatchsize() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"]], "setcasesensitive() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"]], "setconfigprotobytes() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"]], "setentitydefinitions() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setinputcols() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"]], "setlazyannotator() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"]], "setmaxsentencelength() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"]], "setoutputcol() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"]], "setparamvalue() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"]], "setparams() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setParams"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParams"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParams"]], "setpredictionthreshold() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[79, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "transform() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.transform"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.transform"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.transform"]], "uid (zeroshotnermodel attribute)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.uid"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.uid"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.uid"]], "write() (zeroshotnermodel method)": [[79, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.write"], [153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.write"], [187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.write"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "clear() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.clear"]], "copy() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.copy"]], "defaultreplacementday (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "explainparam() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.explainParam"]], "explainparams() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.explainParams"]], "extractparammap() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.extractParamMap"]], "getinputcols() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getInputCols"]], "getlazyannotator() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getLazyAnnotator"]], "getordefault() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getOrDefault"]], "getoutputcol() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getOutputCol"]], "getparam() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getParam"]], "getparamvalue() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getParamValue"]], "getter_attrs (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getter_attrs"]], "hasdefault() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.hasDefault"]], "hasparam() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.hasParam"]], "inputannotatortypes (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "inputcols (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputCols"]], "inputcolsvalidation() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputColsValidation"]], "isdefined() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.isDefined"]], "isset() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.isSet"]], "lazyannotator (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.lazyAnnotator"]], "load() (datenormalizer class method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.load"]], "name (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "optionalinputannotatortypes (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.optionalInputAnnotatorTypes"]], "outputannotatortype (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputcol (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputCol"]], "outputdateformat (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "read() (datenormalizer class method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.read"]], "save() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.save"]], "set() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.set"]], "setanchordateday() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setforceinputtypevalidation() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setForceInputTypeValidation"]], "setinputcols() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setInputCols"]], "setlazyannotator() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setLazyAnnotator"]], "setoutputcol() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputCol"]], "setoutputdateformat() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "setparamvalue() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setParamValue"]], "setparams() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setParams"]], "skiplpinputcolsvalidation (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[80, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "transform() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.transform"]], "uid (datenormalizer attribute)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.uid"]], "write() (datenormalizer method)": [[80, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.write"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "clear() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.clear"]], "copy() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.copy"]], "explainparam() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.explainParam"]], "explainparams() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.explainParams"]], "extractparammap() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.extractParamMap"]], "getinputcols() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getInputCols"]], "getlazyannotator() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getLazyAnnotator"]], "getordefault() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getOrDefault"]], "getoutputcol() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getOutputCol"]], "getparam() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getParam"]], "getparamvalue() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getParamValue"]], "getter_attrs (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getter_attrs"]], "hasdefault() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.hasDefault"]], "hasparam() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.hasParam"]], "inputannotatortypes (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "inputcols (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputCols"]], "inputcolsvalidation() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputColsValidation"]], "isdefined() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.isDefined"]], "isset() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.isSet"]], "lazyannotator (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lazyAnnotator"]], "load() (drugnormalizer class method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.load"]], "lowercase (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "optionalinputannotatortypes (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.optionalInputAnnotatorTypes"]], "outputannotatortype (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "outputcol (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputCol"]], "policy (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "read() (drugnormalizer class method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.read"]], "save() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.save"]], "set() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.set"]], "setforceinputtypevalidation() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setForceInputTypeValidation"]], "setinputcols() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setInputCols"]], "setlazyannotator() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLazyAnnotator"]], "setlowercase() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setoutputcol() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setOutputCol"]], "setparamvalue() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setParamValue"]], "setparams() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setParams"]], "setpolicy() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "skiplpinputcolsvalidation (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[81, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "transform() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.transform"]], "uid (drugnormalizer attribute)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.uid"]], "write() (drugnormalizer method)": [[81, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.write"]], "sparknlp_jsl.annotator.normalizer": [[82, "module-sparknlp_jsl.annotator.normalizer"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[83, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[83, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[84, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "batchsize (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.batchSize"]], "clear() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.clear"]], "configprotobytes (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "copy() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.copy"]], "customprompt (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "dosample (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.doSample"]], "explainparam() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.explainParam"]], "explainparams() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.explainParams"]], "extractparammap() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.extractParamMap"]], "getbatchsize() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getBatchSize"]], "getinputcols() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getInputCols"]], "getlazyannotator() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getLazyAnnotator"]], "getordefault() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getOrDefault"]], "getoutputcol() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getOutputCol"]], "getparam() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getParam"]], "getparamvalue() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getParamValue"]], "getquestiontypes() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "getter_attrs (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getter_attrs"]], "hasdefault() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.hasDefault"]], "hasparam() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.hasParam"]], "ignoretokenids (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "inputcols (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputCols"]], "inputcolsvalidation() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputColsValidation"]], "isdefined() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.isDefined"]], "isset() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.isSet"]], "lazyannotator (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.lazyAnnotator"]], "load() (medicalquestionanswering class method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.load"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "maxcontextlength (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.maxContextLength"]], "maxnewtokens (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.maxNewTokens"]], "mlframeworktype (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.mlFrameworkType"]], "modeltype (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.modelType"]], "name (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "norepeatngramsize (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "outputcol (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputCol"]], "pretrained() (medicalquestionanswering static method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "read() (medicalquestionanswering class method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.read"]], "save() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.save"]], "set() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.set"]], "setbatchsize() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setBatchSize"]], "setconfigprotobytes() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setdosample() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setInputCols"]], "setlazyannotator() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setOutputCol"]], "setparamvalue() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setParamValue"]], "setparams() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setParams"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setrandomseed() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setRandomSeed"]], "settopk() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setTopK"]], "setusecache() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.qa.medical_qa": [[85, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "topk (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.topK"]], "transform() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.transform"]], "uid (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.uid"]], "usecache (medicalquestionanswering attribute)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "write() (medicalquestionanswering method)": [[85, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.write"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "clear() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.clear"]], "copy() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.copy"]], "entities1 (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "explainparam() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.explainParam"]], "explainparams() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.explainParams"]], "extractparammap() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.extractParamMap"]], "getinputcols() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getInputCols"]], "getlazyannotator() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getLazyAnnotator"]], "getordefault() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getOrDefault"]], "getoutputcol() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getOutputCol"]], "getparam() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getParam"]], "getparamvalue() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getParamValue"]], "getter_attrs (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getter_attrs"]], "hasdefault() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.hasDefault"]], "hasparam() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.hasParam"]], "inputannotatortypes (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputCols"]], "inputcolsvalidation() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputColsValidation"]], "isdefined() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.isDefined"]], "isset() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.isSet"]], "lazyannotator (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.lazyAnnotator"]], "load() (nerquestiongenerator class method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.load"]], "name (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "optionalinputannotatortypes (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "outputcol (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputCol"]], "questionmark (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "read() (nerquestiongenerator class method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.read"]], "save() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.save"]], "set() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.set"]], "setentities1() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setInputCols"]], "setlazyannotator() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setOutputCol"]], "setparamvalue() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setParamValue"]], "setparams() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setParams"]], "setquestionmark() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[86, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "transform() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.transform"]], "uid (nerquestiongenerator attribute)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.uid"]], "write() (nerquestiongenerator method)": [[86, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.write"]], "contextsplitassembler (class in sparknlp_jsl.annotator.rag.context_split_assembler)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler"]], "clear() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.clear"]], "copy() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.copy"]], "explainparam() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explainParam"]], "explainparams() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explainParams"]], "explodesplits (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explodeSplits"]], "extractparammap() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.extractParamMap"]], "getinputcols() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getInputCols"]], "getlazyannotator() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getLazyAnnotator"]], "getordefault() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getOrDefault"]], "getoutputcol() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getOutputCol"]], "getparam() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getParam"]], "getparamvalue() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getParamValue"]], "getter_attrs (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getter_attrs"]], "hasdefault() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.hasDefault"]], "hasparam() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.hasParam"]], "inputannotatortypes (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputAnnotatorTypes"]], "inputcols (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputCols"]], "inputcolsvalidation() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputColsValidation"]], "isdefined() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.isDefined"]], "isset() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.isSet"]], "joinstring (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.joinString"]], "lazyannotator (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.lazyAnnotator"]], "load() (contextsplitassembler class method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.load"]], "name (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.name"]], "optionalinputannotatortypes (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.optionalInputAnnotatorTypes"]], "outputannotatortype (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.outputAnnotatorType"]], "outputcol (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.outputCol"]], "read() (contextsplitassembler class method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.read"]], "save() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.save"]], "set() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.set"]], "setexplodesplits() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setExplodeSplits"]], "setforceinputtypevalidation() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setForceInputTypeValidation"]], "setinputcols() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setInputCols"]], "setjoinstring() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setJoinString"]], "setlazyannotator() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setLazyAnnotator"]], "setoutputcol() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setOutputCol"]], "setparamvalue() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setParamValue"]], "setparams() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setParams"]], "skiplpinputcolsvalidation (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[87, "module-sparknlp_jsl.annotator.rag.context_split_assembler"]], "transform() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.transform"]], "uid (contextsplitassembler attribute)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.uid"]], "write() (contextsplitassembler method)": [[87, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.write"]], "sparknlp_jsl.annotator.rag": [[88, "module-sparknlp_jsl.annotator.rag"]], "vectordbpostprocessor (class in sparknlp_jsl.annotator.rag.vectordb_post_processor)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor"]], "allowzerocontentafterfiltering (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.allowZeroContentAfterFiltering"]], "casesensitive (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.caseSensitive"]], "clear() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.clear"]], "copy() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.copy"]], "diversitythreshold (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.diversityThreshold"]], "explainparam() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.explainParam"]], "explainparams() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.explainParams"]], "extractparammap() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.extractParamMap"]], "filterby (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.filterBy"]], "getinputcols() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getInputCols"]], "getlazyannotator() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getLazyAnnotator"]], "getordefault() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getOrDefault"]], "getoutputcol() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getOutputCol"]], "getparam() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getParam"]], "getparamvalue() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getParamValue"]], "getter_attrs (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getter_attrs"]], "hasdefault() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.hasDefault"]], "hasparam() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.hasParam"]], "inputannotatortypes (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputAnnotatorTypes"]], "inputcols (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputCols"]], "inputcolsvalidation() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputColsValidation"]], "isdefined() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.isDefined"]], "isset() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.isSet"]], "lazyannotator (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.lazyAnnotator"]], "load() (vectordbpostprocessor class method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.load"]], "maxtopkafterfiltering (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.maxTopKAfterFiltering"]], "name (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.name"]], "optionalinputannotatortypes (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.optionalInputAnnotatorTypes"]], "outputannotatortype (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.outputAnnotatorType"]], "outputcol (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.outputCol"]], "read() (vectordbpostprocessor class method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.read"]], "save() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.save"]], "set() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.set"]], "setallowzerocontentafterfiltering() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setAllowZeroContentAfterFiltering"]], "setcasesensitive() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setCaseSensitive"]], "setdiversitythreshold() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setDiversityThreshold"]], "setfilterby() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setFilterBy"]], "setforceinputtypevalidation() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setForceInputTypeValidation"]], "setinputcols() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setInputCols"]], "setlazyannotator() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setLazyAnnotator"]], "setmaxtopkafterfiltering() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMaxTopKAfterFiltering"]], "setmetadatacriteria() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMetadataCriteria"]], "setmetadatacriteriaasstr() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMetadataCriteriaAsStr"]], "setoutputcol() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setOutputCol"]], "setparamvalue() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setParamValue"]], "setparams() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setParams"]], "setsortby() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setSortBy"]], "skiplpinputcolsvalidation (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.skipLPInputColsValidation"]], "sortby (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.sortBy"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[89, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"]], "transform() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.transform"]], "uid (vectordbpostprocessor attribute)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.uid"]], "write() (vectordbpostprocessor method)": [[89, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.write"]], "sparknlp_jsl.annotator.re": [[90, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "batchsize (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.batchSize"]], "classes (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.classes"]], "classes (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.classes"]], "classes (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "clear() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.clear"]], "clear() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.clear"]], "clear() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.clear"]], "clear() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.clear"]], "copy() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.copy"]], "copy() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.copy"]], "copy() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.copy"]], "copy() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.copy"]], "customlabels (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.customLabels"]], "customlabels (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.customLabels"]], "customlabels (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "datasetinfo (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.datasetInfo"]], "datasetinfo (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.datasetInfo"]], "datasetinfo (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.datasetInfo"]], "datasetinfo (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.datasetInfo"]], "directionsensitive (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.directionSensitive"]], "directionsensitive (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.directionSensitive"]], "directionsensitive (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.directionSensitive"]], "directionsensitive (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.directionSensitive"]], "doexceptionhandling (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.doExceptionHandling"]], "doexceptionhandling (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.doExceptionHandling"]], "doexceptionhandling (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.doExceptionHandling"]], "doexceptionhandling (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.doExceptionHandling"]], "dropout (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.dropout"]], "engine (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.engine"]], "epochsn (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.epochsN"]], "explainparam() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.explainParam"]], "explainparam() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.explainParam"]], "explainparam() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.explainParam"]], "explainparam() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.explainParam"]], "explainparams() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.explainParams"]], "explainparams() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.explainParams"]], "explainparams() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.explainParams"]], "explainparams() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.explainParams"]], "extractparammap() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.extractParamMap"]], "extractparammap() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.extractParamMap"]], "extractparammap() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.extractParamMap"]], "extractparammap() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.extractParamMap"]], "featurescaling (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.featureScaling"]], "featurescaling (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.featureScaling"]], "featurescaling (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.featureScaling"]], "featurescaling (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.featureScaling"]], "filterbytokendistance (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.filterByTokenDistance"]], "filterbytokendistance (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.filterByTokenDistance"]], "filterbytokendistance (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.filterByTokenDistance"]], "filterbytokendistance (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.filterByTokenDistance"]], "fit() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fit"]], "fitmultiple() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fitMultiple"]], "fiximbalance (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fixImbalance"]], "fromentitybegincol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getClasses"]], "getclasses() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getClasses"]], "getclasses() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getengine() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getEngine"]], "getinputcols() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getInputCols"]], "getinputcols() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getInputCols"]], "getinputcols() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getInputCols"]], "getinputcols() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getInputCols"]], "getlazyannotator() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getLazyAnnotator"]], "getlazyannotator() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getLazyAnnotator"]], "getlazyannotator() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getLazyAnnotator"]], "getlazyannotator() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getLazyAnnotator"]], "getordefault() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getOrDefault"]], "getordefault() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getOrDefault"]], "getordefault() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getOrDefault"]], "getordefault() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getOrDefault"]], "getoutputcol() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getOutputCol"]], "getoutputcol() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getOutputCol"]], "getoutputcol() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getOutputCol"]], "getoutputcol() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getOutputCol"]], "getparam() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getParam"]], "getparam() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getParam"]], "getparam() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getParam"]], "getparam() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getParam"]], "getparamvalue() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getParamValue"]], "getparamvalue() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getParamValue"]], "getparamvalue() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getParamValue"]], "getparamvalue() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getParamValue"]], "getrelationtypeperpair() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getRelationTypePerPair"]], "getrelationtypeperpair() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getRelationTypePerPair"]], "getrelationtypeperpair() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "getter_attrs (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getter_attrs"]], "getter_attrs (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getter_attrs"]], "getter_attrs (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getter_attrs"]], "getter_attrs (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getter_attrs"]], "hasdefault() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.hasDefault"]], "hasdefault() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.hasDefault"]], "hasdefault() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.hasDefault"]], "hasdefault() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.hasDefault"]], "hasparam() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.hasParam"]], "hasparam() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.hasParam"]], "hasparam() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.hasParam"]], "hasparam() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.hasParam"]], "inputannotatortypes (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputAnnotatorTypes"]], "inputannotatortypes (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "inputcols (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputCols"]], "inputcols (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputCols"]], "inputcols (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputCols"]], "inputcols (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputCols"]], "inputcolsvalidation() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputColsValidation"]], "inputcolsvalidation() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputColsValidation"]], "inputcolsvalidation() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputColsValidation"]], "inputcolsvalidation() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputColsValidation"]], "isdefined() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.isDefined"]], "isdefined() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.isDefined"]], "isdefined() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.isDefined"]], "isdefined() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.isDefined"]], "isset() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.isSet"]], "isset() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.isSet"]], "isset() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.isSet"]], "isset() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.isSet"]], "labelcolumn (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.labelColumn"]], "lazyannotator (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.lazyAnnotator"]], "lazyannotator (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.lazyAnnotator"]], "lazyannotator (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.lazyAnnotator"]], "lazyannotator (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.lazyAnnotator"]], "learningrate (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.learningRate"]], "load() (genericremodel class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.load"]], "load() (posologyremodel class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.load"]], "load() (relationextractionapproach class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.load"]], "load() (relationextractionmodel class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.load"]], "maxsyntacticdistance (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.maxSyntacticDistance"]], "maxsyntacticdistance (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "modelfile (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.modelFile"]], "multiclass (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.multiClass"]], "multiclass (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.multiClass"]], "multiclass (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.multiClass"]], "multiclass (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.multiClass"]], "name (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.name"]], "name (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.name"]], "name (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "optionalinputannotatortypes (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.outputAnnotatorType"]], "outputannotatortype (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.outputAnnotatorType"]], "outputannotatortype (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "outputcol (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.outputCol"]], "outputcol (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.outputCol"]], "outputcol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputCol"]], "outputcol (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputCol"]], "outputlogspath (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputLogsPath"]], "overrideexistinglabels (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.predictionThreshold"]], "predictionthreshold (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.predictionThreshold"]], "predictionthreshold (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (genericremodel static method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.pretrained"]], "pretrained() (posologyremodel static method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.pretrained"]], "pretrained() (relationextractionmodel static method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "read() (genericremodel class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.read"]], "read() (posologyremodel class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.read"]], "read() (relationextractionapproach class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.read"]], "read() (relationextractionmodel class method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.read"]], "relationdirectioncol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.relationPairs"]], "relationpairs (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.relationPairs"]], "relationpairs (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.relationPairsCaseSensitive"]], "relationpairscasesensitive (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.relationPairsCaseSensitive"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "save() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.save"]], "save() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.save"]], "save() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.save"]], "save() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.save"]], "scopewindow (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.scopeWindow"]], "scopewindow (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.scopeWindow"]], "scopewindow (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.scopeWindow"]], "scopewindow (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.scopeWindow"]], "set() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.set"]], "set() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.set"]], "set() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.set"]], "set() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.set"]], "setbatchsize() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setBatchSize"]], "setcustomlabels() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setCustomLabels"]], "setcustomlabels() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setCustomLabels"]], "setcustomlabels() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setdatasetinfo() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDatasetInfo"]], "setdatasetinfo() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDatasetInfo"]], "setdatasetinfo() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDatasetInfo"]], "setdatasetinfo() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDatasetInfo"]], "setdirectionsensitive() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDirectionSensitive"]], "setdirectionsensitive() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDirectionSensitive"]], "setdirectionsensitive() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDirectionSensitive"]], "setdirectionsensitive() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDirectionSensitive"]], "setdoexceptionhandling() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDoExceptionHandling"]], "setdoexceptionhandling() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDoExceptionHandling"]], "setdoexceptionhandling() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDoExceptionHandling"]], "setdropout() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDropout"]], "setepochsnumber() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setEpochsNumber"]], "setfeaturescaling() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setFeatureScaling"]], "setfeaturescaling() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setFeatureScaling"]], "setfeaturescaling() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFeatureScaling"]], "setfeaturescaling() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFeatureScaling"]], "setfilterbytokendistance() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setFilterByTokenDistance"]], "setfilterbytokendistance() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setFilterByTokenDistance"]], "setfilterbytokendistance() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFilterByTokenDistance"]], "setfilterbytokendistance() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFilterByTokenDistance"]], "setfiximbalance() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setForceInputTypeValidation"]], "setforceinputtypevalidation() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setForceInputTypeValidation"]], "setforceinputtypevalidation() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setForceInputTypeValidation"]], "setfromentity() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setinputcols() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setInputCols"]], "setinputcols() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setInputCols"]], "setinputcols() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setInputCols"]], "setinputcols() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setInputCols"]], "setlabelcol() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLabelCol"]], "setlazyannotator() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setLazyAnnotator"]], "setlazyannotator() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setLazyAnnotator"]], "setlazyannotator() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLazyAnnotator"]], "setlazyannotator() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setLazyAnnotator"]], "setlearningrate() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLearningRate"]], "setmaxsyntacticdistance() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setmodelfile() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setModelFile"]], "setmulticlass() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setMultiClass"]], "setmulticlass() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setMultiClass"]], "setmulticlass() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMultiClass"]], "setmulticlass() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMultiClass"]], "setoutputcol() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setOutputCol"]], "setoutputcol() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setOutputCol"]], "setoutputcol() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setOutputCol"]], "setoutputcol() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setOutputCol"]], "setoutputlogspath() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setOutputLogsPath"]], "setparamvalue() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setParamValue"]], "setparamvalue() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setParamValue"]], "setparamvalue() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setParamValue"]], "setparamvalue() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setParamValue"]], "setparams() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setParams"]], "setparams() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setParams"]], "setparams() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setParams"]], "setpredictionthreshold() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setPredictionThreshold"]], "setpredictionthreshold() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setPredictionThreshold"]], "setpredictionthreshold() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationPairs"]], "setrelationpairs() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationPairs"]], "setrelationpairs() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationPairsCaseSensitive"]], "setrelationpairscasesensitive() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationPairsCaseSensitive"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationTypePerPair"]], "setrelationtypeperpair() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationTypePerPair"]], "setrelationtypeperpair() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "setscopewindow() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setScopeWindow"]], "setscopewindow() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setScopeWindow"]], "setscopewindow() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setScopeWindow"]], "setscopewindow() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setScopeWindow"]], "settoentity() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "setvalidationsplit() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setValidationSplit"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "skiplpinputcolsvalidation (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.relation_extraction": [[91, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "transform() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.transform"]], "transform() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.transform"]], "transform() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.transform"]], "uid (genericremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.uid"]], "uid (posologyremodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.uid"]], "uid (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.uid"]], "uid (relationextractionmodel attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.uid"]], "validationsplit (relationextractionapproach attribute)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.validationSplit"]], "write() (genericremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.write"]], "write() (posologyremodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.write"]], "write() (relationextractionapproach method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.write"]], "write() (relationextractionmodel method)": [[91, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.write"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.batchSize"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.classes"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.classes"]], "clear() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.clear"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.clear"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.clear"]], "copy() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.copy"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.copy"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.copy"]], "customlabels (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.customLabels"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "doexceptionhandling (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"]], "explainparam() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.explainParam"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParam"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParam"]], "explainparams() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.explainParams"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParams"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParams"]], "extractparammap() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"]], "getclasses() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getClasses"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "getinputcols() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getInputCols"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getInputCols"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getInputCols"]], "getlazyannotator() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"]], "getordefault() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"]], "getoutputcol() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"]], "getparam() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getParam"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParam"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParam"]], "getparamvalue() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getParamValue"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParamValue"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParamValue"]], "getrelationtypeperpair() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"]], "getter_attrs (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"]], "hasdefault() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.hasDefault"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasDefault"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasDefault"]], "hasparam() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.hasParam"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasParam"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasParam"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "inputcols (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputCols"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputCols"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputCols"]], "inputcolsvalidation() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"]], "isdefined() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.isDefined"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isDefined"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isDefined"]], "isset() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.isSet"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isSet"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isSet"]], "lazyannotator (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"]], "load() (relationextractiondlmodel class method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.load"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.load"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.load"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "optionalinputannotatortypes (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "outputcol (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputCol"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputCol"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputCol"]], "predictionthreshold (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "read() (relationextractiondlmodel class method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.read"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.read"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.read"]], "relationpairscasesensitive (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"]], "save() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.save"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.save"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.save"]], "set() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.set"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.set"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.set"]], "setbatchsize() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setdoexceptionhandling() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"]], "setforceinputtypevalidation() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"]], "setinputcols() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setInputCols"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setInputCols"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setInputCols"]], "setlazyannotator() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"]], "setoutputcol() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"]], "setparamvalue() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setParamValue"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParamValue"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParamValue"]], "setparams() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setParams"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParams"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParams"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "setrelationpairscasesensitive() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"]], "skiplpinputcolsvalidation (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[92, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "transform() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.transform"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.transform"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.transform"]], "uid (relationextractiondlmodel attribute)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.uid"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.uid"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.uid"]], "write() (relationextractiondlmodel method)": [[92, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.write"], [135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.write"], [169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.write"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "clear() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.clear"]], "copy() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.copy"]], "directionsensitive (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.directionSensitive"]], "doclevelrelations (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "explainparam() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.explainParam"]], "explainparams() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.explainParams"]], "extractparammap() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.extractParamMap"]], "filterbytokendistance (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.filterByTokenDistance"]], "getinputcols() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getInputCols"]], "getlazyannotator() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getLazyAnnotator"]], "getordefault() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getOrDefault"]], "getoutputcol() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getOutputCol"]], "getparam() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getParam"]], "getparamvalue() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getParamValue"]], "getter_attrs (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getter_attrs"]], "hasdefault() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.hasDefault"]], "hasparam() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.hasParam"]], "inputannotatortypes (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "inputcols (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputCols"]], "inputcolsvalidation() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputColsValidation"]], "isdefined() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.isDefined"]], "isset() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.isSet"]], "lazyannotator (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.lazyAnnotator"]], "load() (renerchunksfilter class method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.load"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "optionalinputannotatortypes (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.optionalInputAnnotatorTypes"]], "outputannotatortype (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "outputcol (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputCol"]], "read() (renerchunksfilter class method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.read"]], "relationpairs (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "save() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.save"]], "set() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.set"]], "setdirectionsensitive() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDirectionSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setfilterbytokendistance() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setFilterByTokenDistance"]], "setinputcols() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setInputCols"]], "setlazyannotator() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setLazyAnnotator"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setoutputcol() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setOutputCol"]], "setparamvalue() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setParamValue"]], "setparams() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setParams"]], "setrelationpairs() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[93, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "transform() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.transform"]], "uid (renerchunksfilter attribute)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.uid"]], "write() (renerchunksfilter method)": [[93, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.write"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "casesensitive (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"]], "clear() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"]], "coalescesentences (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"]], "configprotobytes (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"]], "copy() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"]], "explainparam() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"]], "explainparams() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"]], "extractparammap() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"]], "getcasesensitive() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"]], "getclasses() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "getinputcols() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"]], "getlazyannotator() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"]], "getordefault() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"]], "getoutputcol() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"]], "getparam() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"]], "getparamvalue() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"]], "getter_attrs (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"]], "hasdefault() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"]], "hasparam() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "inputcols (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"]], "inputcolsvalidation() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"]], "isdefined() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"]], "isset() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"]], "lazyannotator (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"]], "load() (zeroshotrelationextractionmodel class method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "loadsavedmodelopensource() (zeroshotrelationextractionmodel static method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"]], "maxsentencelength (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "name (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "optionalinputannotatortypes (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "outputcol (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "read() (zeroshotrelationextractionmodel class method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"]], "save() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"]], "set() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"]], "setcasesensitive() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"]], "setcoalescesentences() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"]], "setconfigprotobytes() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"]], "setforceinputtypevalidation() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"]], "setinputcols() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"]], "setlazyannotator() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"]], "setmaxsentencelength() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setoutputcol() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"]], "setparamvalue() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"]], "setparams() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "skiplpinputcolsvalidation (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[94, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "transform() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"]], "uid (zeroshotrelationextractionmodel attribute)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.uid"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.uid"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.uid"]], "write() (zeroshotrelationextractionmodel method)": [[94, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"], [136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"], [170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"]], "sparknlp_jsl.annotator.regex": [[95, "module-sparknlp_jsl.annotator.regex"]], "regexmatcherinternal (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal"]], "regexmatcherinternalmodel (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel"]], "clear() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.clear"]], "clear() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.clear"]], "copy() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.copy"]], "copy() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.copy"]], "delimiter (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.delimiter"]], "explainparam() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.explainParam"]], "explainparam() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.explainParam"]], "explainparams() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.explainParams"]], "explainparams() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.explainParams"]], "externalrules (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.externalRules"]], "extractparammap() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.extractParamMap"]], "extractparammap() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.extractParamMap"]], "fit() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.fit"]], "fitmultiple() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.fitMultiple"]], "getinputcols() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getInputCols"]], "getinputcols() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getInputCols"]], "getlazyannotator() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getLazyAnnotator"]], "getlazyannotator() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getLazyAnnotator"]], "getordefault() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getOrDefault"]], "getordefault() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getOrDefault"]], "getoutputcol() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getOutputCol"]], "getoutputcol() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getOutputCol"]], "getparam() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getParam"]], "getparam() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getParam"]], "getparamvalue() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getParamValue"]], "getparamvalue() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getParamValue"]], "getter_attrs (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getter_attrs"]], "getter_attrs (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getter_attrs"]], "hasdefault() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.hasDefault"]], "hasdefault() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.hasDefault"]], "hasparam() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.hasParam"]], "hasparam() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.hasParam"]], "inputannotatortypes (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputAnnotatorTypes"]], "inputcols (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputCols"]], "inputcols (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputCols"]], "inputcolsvalidation() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputColsValidation"]], "inputcolsvalidation() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputColsValidation"]], "isdefined() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.isDefined"]], "isdefined() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.isDefined"]], "isset() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.isSet"]], "isset() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.isSet"]], "lazyannotator (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.lazyAnnotator"]], "lazyannotator (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.lazyAnnotator"]], "load() (regexmatcherinternal class method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.load"]], "load() (regexmatcherinternalmodel class method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.load"]], "mergeoverlapping (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.mergeOverlapping"]], "mergeoverlapping (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.mergeOverlapping"]], "name (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.name"]], "optionalinputannotatortypes (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputAnnotatorType"]], "outputannotatortype (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputAnnotatorType"]], "outputcol (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputCol"]], "outputcol (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputCol"]], "pretrained() (regexmatcherinternalmodel static method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.pretrained"]], "read() (regexmatcherinternal class method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.read"]], "read() (regexmatcherinternalmodel class method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.read"]], "rules (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.rules"]], "save() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.save"]], "save() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.save"]], "set() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.set"]], "set() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.set"]], "setdelimiter() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setDelimiter"]], "setexternalrules() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setExternalRules"]], "setforceinputtypevalidation() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setForceInputTypeValidation"]], "setinputcols() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setInputCols"]], "setinputcols() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setInputCols"]], "setlazyannotator() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setLazyAnnotator"]], "setlazyannotator() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setLazyAnnotator"]], "setmergeoverlapping() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setMergeOverlapping"]], "setoutputcol() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setOutputCol"]], "setoutputcol() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setOutputCol"]], "setparamvalue() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setParamValue"]], "setparamvalue() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setParamValue"]], "setparams() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setParams"]], "setrules() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setRules"]], "setstrategy() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setStrategy"]], "skiplpinputcolsvalidation (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[96, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "strategy (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.strategy"]], "transform() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.transform"]], "uid (regexmatcherinternal attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.uid"]], "uid (regexmatcherinternalmodel attribute)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.uid"]], "write() (regexmatcherinternal method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.write"]], "write() (regexmatcherinternalmodel method)": [[96, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.write"]], "sparknlp_jsl.annotator.resolution": [[97, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "clear() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.clear"]], "copy() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.copy"]], "explainparam() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.explainParam"]], "explainparams() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.explainParams"]], "extractparammap() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.extractParamMap"]], "getinputcols() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getInputCols"]], "getlazyannotator() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getLazyAnnotator"]], "getordefault() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getOrDefault"]], "getoutputcol() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getOutputCol"]], "getparam() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getParam"]], "getparamvalue() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getParamValue"]], "getter_attrs (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getter_attrs"]], "hasdefault() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.hasDefault"]], "hasparam() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.hasParam"]], "inputannotatortypes (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "inputcols (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputCols"]], "inputcolsvalidation() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputColsValidation"]], "isdefined() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.isDefined"]], "isset() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.isSet"]], "lazyannotator (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.lazyAnnotator"]], "load() (resolvermerger class method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.load"]], "name (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "optionalinputannotatortypes (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "outputcol (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputCol"]], "read() (resolvermerger class method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.read"]], "save() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.save"]], "set() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.set"]], "setforceinputtypevalidation() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setForceInputTypeValidation"]], "setinputcols() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setInputCols"]], "setlazyannotator() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setLazyAnnotator"]], "setoutputcol() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setOutputCol"]], "setparamvalue() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setParamValue"]], "setparams() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setParams"]], "skiplpinputcolsvalidation (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[98, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "transform() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.transform"]], "uid (resolvermerger attribute)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.uid"]], "write() (resolvermerger method)": [[98, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.write"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "casesensitive (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"]], "casesensitive (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.caseSensitive"]], "clear() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"]], "clear() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"]], "confidencefunction (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"]], "confidencefunction (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "copy() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"]], "copy() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"]], "datasetinfo (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"]], "datasetinfo (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.datasetInfo"]], "dimension (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"]], "distancefunction (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "doexceptionhandling (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"]], "doexceptionhandling (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.doExceptionHandling"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "engine (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"]], "explainparam() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"]], "explainparam() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"]], "explainparams() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"]], "explainparams() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"]], "extractparammap() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"]], "extractparammap() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"]], "fit() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"]], "fitmultiple() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"]], "getcasesensitive() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"]], "getcasesensitive() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.getCaseSensitive"]], "getdimension() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"]], "getengine() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"]], "getinputcols() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"]], "getinputcols() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"]], "getlazyannotator() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"]], "getlazyannotator() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"]], "getordefault() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"]], "getordefault() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"]], "getoutputcol() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"]], "getoutputcol() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"]], "getparam() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"]], "getparam() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"]], "getparamvalue() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"]], "getparamvalue() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"]], "getter_attrs (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"]], "getter_attrs (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"]], "hasdefault() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"]], "hasdefault() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"]], "hasparam() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"]], "hasparam() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "inputcols (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"]], "inputcols (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"]], "inputcolsvalidation() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"]], "inputcolsvalidation() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"]], "isdefined() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"]], "isdefined() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"]], "isset() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"]], "isset() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"]], "labelcol (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "lazyannotator (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"]], "lazyannotator (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"]], "load() (sentenceentityresolverapproach class method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"]], "load() (sentenceentityresolvermodel class method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"]], "missasempty (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"]], "missasempty (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"]], "neighbours (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "optionalinputannotatortypes (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "outputcol (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"]], "outputcol (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "read() (sentenceentityresolverapproach class method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"]], "read() (sentenceentityresolvermodel class method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "returnresolvedtextembeddings (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"]], "returnresolvedtextembeddings (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.returnResolvedTextEmbeddings"]], "save() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"]], "save() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"]], "searchtree (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "set() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"]], "set() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setcasesensitive() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"]], "setcasesensitive() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setCaseSensitive"]], "setconfidencefunction() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"]], "setconfidencefunction() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdatasetinfo() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"]], "setdatasetinfo() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDatasetInfo"]], "setdimension() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"]], "setdistancefunction() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdoexceptionhandling() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDoExceptionHandling"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setforceinputtypevalidation() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"]], "setinputcols() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"]], "setinputcols() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"]], "setlabelcol() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setlazyannotator() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"]], "setlazyannotator() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"]], "setmissasempty() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"]], "setmissasempty() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"]], "setneighbours() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoutputcol() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"]], "setoutputcol() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setparamvalue() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"]], "setparamvalue() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"]], "setparams() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setreturnresolvedtextembeddings() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"]], "setreturnresolvedtextembeddings() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setReturnResolvedTextEmbeddings"]], "setsearchtree() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"]], "setthreshold() (sentenceresolverparams method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "skiplpinputcolsvalidation (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[99, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"]], "threshold (sentenceresolverparams attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "transform() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"]], "uid (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.uid"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.uid"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.uid"]], "uid (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.uid"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.uid"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.uid"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "write() (sentenceentityresolverapproach method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"]], "write() (sentenceentityresolvermodel method)": [[99, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"], [132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"], [166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "clear() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.clear"]], "copy() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.copy"]], "explainparam() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.explainParam"]], "explainparams() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.explainParams"]], "extractparammap() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.extractParamMap"]], "getinputcols() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getInputCols"]], "getlazyannotator() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getLazyAnnotator"]], "getordefault() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getOrDefault"]], "getoutputcol() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getOutputCol"]], "getparam() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getParam"]], "getparamvalue() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getParamValue"]], "getter_attrs (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getter_attrs"]], "hasdefault() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.hasDefault"]], "hasparam() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.hasParam"]], "inputannotatortypes (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "inputcols (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputCols"]], "inputcolsvalidation() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputColsValidation"]], "isdefined() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.isDefined"]], "isset() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.isSet"]], "kwargs (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.kwargs"]], "lazyannotator (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.lazyAnnotator"]], "load() (resolution2chunk class method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.load"]], "name (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "optionalinputannotatortypes (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.optionalInputAnnotatorTypes"]], "outputannotatortype (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "outputcol (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputCol"]], "read() (resolution2chunk class method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.read"]], "save() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.save"]], "set() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.set"]], "setinputcols() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setInputCols"]], "setlazyannotator() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setLazyAnnotator"]], "setoutputcol() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setOutputCol"]], "setparamvalue() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParamValue"]], "setparams() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[100, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "transform() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.transform"]], "uid (resolution2chunk attribute)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.uid"]], "write() (resolution2chunk method)": [[100, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.write"]], "router (class in sparknlp_jsl.annotator.router)": [[101, "sparknlp_jsl.annotator.router.Router"]], "clear() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.clear"]], "copy() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.copy"]], "explainparam() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.explainParam"]], "explainparams() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.explainParams"]], "extractparammap() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.extractParamMap"]], "filterfieldselements (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "getinputcols() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.getInputCols"]], "getlazyannotator() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.getLazyAnnotator"]], "getordefault() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.getOrDefault"]], "getoutputcol() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.getOutputCol"]], "getparam() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.getParam"]], "getparamvalue() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.getParamValue"]], "getter_attrs (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.getter_attrs"]], "hasdefault() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.hasDefault"]], "hasparam() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.hasParam"]], "inputannotatortypes (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputcols (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.inputCols"]], "inputcolsvalidation() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.inputColsValidation"]], "inputtype (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.inputType"]], "isdefined() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.isDefined"]], "isset() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.isSet"]], "lazyannotator (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.lazyAnnotator"]], "load() (router class method)": [[101, "sparknlp_jsl.annotator.router.Router.load"]], "metadatafield (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.name"]], "optionalinputannotatortypes (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.optionalInputAnnotatorTypes"]], "outputannotatortype (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "outputcol (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.outputCol"]], "read() (router class method)": [[101, "sparknlp_jsl.annotator.router.Router.read"]], "save() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.save"]], "set() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.set"]], "setfilterfieldselements() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setforceinputtypevalidation() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setForceInputTypeValidation"]], "setinputcols() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setlazyannotator() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setLazyAnnotator"]], "setmetadatafield() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "setoutputcol() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setOutputCol"]], "setparamvalue() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setParamValue"]], "setparams() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.setParams"]], "skiplpinputcolsvalidation (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[101, "module-sparknlp_jsl.annotator.router"]], "transform() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.transform"]], "uid (router attribute)": [[101, "sparknlp_jsl.annotator.router.Router.uid"]], "write() (router method)": [[101, "sparknlp_jsl.annotator.router.Router.write"]], "sparknlp_jsl.annotator.seq2seq": [[102, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "batchsize (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.batchSize"]], "clear() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.clear"]], "configprotobytes (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "copy() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.copy"]], "dosample (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "explainparam() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.explainParam"]], "explainparams() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.explainParams"]], "extractparammap() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.extractParamMap"]], "getbatchsize() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getBatchSize"]], "getinputcols() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getInputCols"]], "getlazyannotator() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getLazyAnnotator"]], "getordefault() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getOrDefault"]], "getoutputcol() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getOutputCol"]], "getparam() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getParam"]], "getparamvalue() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getParamValue"]], "getter_attrs (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getter_attrs"]], "hasdefault() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.hasDefault"]], "hasparam() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.hasParam"]], "ignoretokenids (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "inputcols (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputCols"]], "inputcolsvalidation() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputColsValidation"]], "isdefined() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.isDefined"]], "isset() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.isSet"]], "lazyannotator (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.lazyAnnotator"]], "load() (medicalencoderdecoder class method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.load"]], "maxnewtokens (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "mlframeworktype (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.mlFrameworkType"]], "name (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "outputcol (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputCol"]], "randomseed (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "read() (medicalencoderdecoder class method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.read"]], "refinechunksize (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "save() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.save"]], "set() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.set"]], "setbatchsize() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setBatchSize"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setInputCols"]], "setlazyannotator() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setOutputCol"]], "setparamvalue() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setParamValue"]], "setparams() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setParams"]], "setrandomseed() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[103, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "transform() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.transform"]], "uid (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.uid"]], "usecache (medicalencoderdecoder attribute)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "write() (medicalencoderdecoder method)": [[103, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.write"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "batchsize (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.batchSize"]], "clear() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.clear"]], "configprotobytes (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.configProtoBytes"]], "copy() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.copy"]], "dosample (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.doSample"]], "explainparam() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.explainParam"]], "explainparams() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.explainParams"]], "extractparammap() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.extractParamMap"]], "getbatchsize() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getBatchSize"]], "getinputcols() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getInputCols"]], "getlazyannotator() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getLazyAnnotator"]], "getordefault() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getOrDefault"]], "getoutputcol() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getOutputCol"]], "getparam() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getParam"]], "getparamvalue() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getParamValue"]], "getter_attrs (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getter_attrs"]], "hasdefault() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.hasDefault"]], "hasparam() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.hasParam"]], "ignoretokenids (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.ignoreTokenIds"]], "inputannotatortypes (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputAnnotatorTypes"]], "inputcols (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputCols"]], "inputcolsvalidation() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputColsValidation"]], "isdefined() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.isDefined"]], "isset() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.isSet"]], "lazyannotator (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.lazyAnnotator"]], "load() (medicalsummarizer class method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.load"]], "loadsavedmodel() (medicalsummarizer static method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "maxnewtokens (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.maxNewTokens"]], "maxtextlength (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.maxTextLength"]], "mlframeworktype (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.mlFrameworkType"]], "name (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "norepeatngramsize (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.outputAnnotatorType"]], "outputcol (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.outputCol"]], "pretrained() (medicalsummarizer static method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "randomseed (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.randomSeed"]], "read() (medicalsummarizer class method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.read"]], "refinechunksize (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineChunkSize"]], "refinemaxattempts (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineMaxAttempts"]], "refinesummary (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineSummary"]], "refinesummarytargetlength (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineSummaryTargetLength"]], "save() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.save"]], "set() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.set"]], "setbatchsize() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setBatchSize"]], "setconfigprotobytes() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setConfigProtoBytes"]], "setdosample() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setDoSample"]], "setforceinputtypevalidation() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setIgnoreTokenIds"]], "setinputcols() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setInputCols"]], "setlazyannotator() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setMaxNewTokens"]], "setmaxtextlength() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setOutputCol"]], "setparamvalue() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setParamValue"]], "setparams() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setParams"]], "setrandomseed() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRandomSeed"]], "setrefinechunksize() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setStopAtEos"]], "settopk() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setTopK"]], "skiplpinputcolsvalidation (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[104, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "stopateos (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.stopAtEos"]], "task (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.task"]], "topk (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.topK"]], "transform() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.transform"]], "uid (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.uid"]], "usecache (medicalsummarizer attribute)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.useCache"]], "write() (medicalsummarizer method)": [[104, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.write"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "batchsize (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.batchSize"]], "clear() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.clear"]], "configprotobytes (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "copy() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.copy"]], "customprompt (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.customPrompt"]], "dosample (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.doSample"]], "explainparam() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.explainParam"]], "explainparams() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.explainParams"]], "extractparammap() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.extractParamMap"]], "getadditionaltokens() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getAdditionalTokens"]], "getbatchsize() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getBatchSize"]], "getinputcols() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getInputCols"]], "getlazyannotator() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getLazyAnnotator"]], "getordefault() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getOrDefault"]], "getoutputcol() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getOutputCol"]], "getparam() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getParam"]], "getparamvalue() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getParamValue"]], "getter_attrs (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getter_attrs"]], "hasdefault() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.hasDefault"]], "hasparam() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.hasParam"]], "ignoretokenids (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.ignoreTokenIds"]], "inputannotatortypes (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "inputcols (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputCols"]], "inputcolsvalidation() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputColsValidation"]], "isdefined() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.isDefined"]], "isset() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.isSet"]], "lazyannotator (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.lazyAnnotator"]], "load() (medicaltextgenerator class method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.load"]], "loadsavedmodel() (medicaltextgenerator static method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxcontextlength (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxContextLength"]], "maxnewtokens (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxNewTokens"]], "maxtextlength (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "mlframeworktype (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.mlFrameworkType"]], "modeltype (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "norepeatngramsize (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "outputcol (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputCol"]], "pretrained() (medicaltextgenerator static method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "read() (medicaltextgenerator class method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.read"]], "save() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.save"]], "set() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.set"]], "setadditionaltokens() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setAdditionalTokens"]], "setbatchsize() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setBatchSize"]], "setconfigprotobytes() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCustomPrompt"]], "setdosample() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setDoSample"]], "setforceinputtypevalidation() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setIgnoreTokenIds"]], "setinputcols() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setInputCols"]], "setlazyannotator() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setOutputCol"]], "setparamvalue() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setParamValue"]], "setparams() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setParams"]], "setrandomseed() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setRandomSeed"]], "setstopateos() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "settopk() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setTopK"]], "setusecache() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[105, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "topk (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.topK"]], "transform() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.transform"]], "uid (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.uid"]], "usecache (medicaltextgenerator attribute)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "write() (medicaltextgenerator method)": [[105, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.write"]], "text2sql (class in sparknlp_jsl.annotator.seq2seq.text2sql)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL"]], "batchsize (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.batchSize"]], "clear() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.clear"]], "configprotobytes (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.configProtoBytes"]], "copy() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.copy"]], "customprompt (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.customPrompt"]], "dosample (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.doSample"]], "explainparam() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.explainParam"]], "explainparams() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.explainParams"]], "extractparammap() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.extractParamMap"]], "getadditionaltokens() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getAdditionalTokens"]], "getbatchsize() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getBatchSize"]], "getinputcols() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getInputCols"]], "getlazyannotator() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getLazyAnnotator"]], "getordefault() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getOrDefault"]], "getoutputcol() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getOutputCol"]], "getparam() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getParam"]], "getparamvalue() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getParamValue"]], "getpostprocessingsubstitutions() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getPostProcessingSubstitutions"]], "getschema() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getSchema"]], "getter_attrs (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getter_attrs"]], "hasdefault() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.hasDefault"]], "hasparam() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.hasParam"]], "ignoretokenids (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.ignoreTokenIds"]], "inputannotatortypes (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputAnnotatorTypes"]], "inputcols (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputCols"]], "inputcolsvalidation() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputColsValidation"]], "isdefined() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.isDefined"]], "isset() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.isSet"]], "lazyannotator (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.lazyAnnotator"]], "load() (text2sql class method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.load"]], "loadsavedmodel() (text2sql static method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.loadSavedModel"]], "maxcontextlength (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxContextLength"]], "maxnewtokens (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxNewTokens"]], "maxtextlength (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxTextLength"]], "mlframeworktype (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.mlFrameworkType"]], "modeltype (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.modelType"]], "name (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.name"]], "norepeatngramsize (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.noRepeatNgramSize"]], "optionalinputannotatortypes (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.optionalInputAnnotatorTypes"]], "outputannotatortype (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.outputAnnotatorType"]], "outputcol (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.outputCol"]], "pretrained() (text2sql static method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.pretrained"]], "read() (text2sql class method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.read"]], "save() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.save"]], "set() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.set"]], "setadditionaltokens() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setAdditionalTokens"]], "setbatchsize() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setBatchSize"]], "setconfigprotobytes() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setConfigProtoBytes"]], "setcustomprompt() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setCustomPrompt"]], "setdosample() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setDoSample"]], "setforceinputtypevalidation() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setForceInputTypeValidation"]], "setignoretokenids() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setIgnoreTokenIds"]], "setinputcols() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setInputCols"]], "setlazyannotator() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setLazyAnnotator"]], "setmaxcontextlength() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxContextLength"]], "setmaxnewtokens() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxNewTokens"]], "setmaxtextlength() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxTextLength"]], "setnorepeatngramsize() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setNoRepeatNgramSize"]], "setoutputcol() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setOutputCol"]], "setparamvalue() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setParamValue"]], "setparams() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setParams"]], "setpostprocessingsubstitutions() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setPostProcessingSubstitutions"]], "setrandomseed() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setRandomSeed"]], "setschema() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setSchema"]], "setstopateos() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setStopAtEos"]], "settablelimit() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTableLimit"]], "settopk() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTopK"]], "setusecache() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setUseCache"]], "skiplpinputcolsvalidation (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[106, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "stopateos (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.stopAtEos"]], "tablelimit (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.tableLimit"]], "topk (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.topK"]], "transform() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.transform"]], "uid (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.uid"]], "usecache (text2sql attribute)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.useCache"]], "write() (text2sql method)": [[106, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.write"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[107, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[107, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[108, "module-sparknlp_jsl.annotator.splitter"]], "internaldocumentsplitter (class in sparknlp_jsl.annotator.splitter.internal_document_splitter)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter"]], "casesensitive (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.caseSensitive"]], "chunkoverlap (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.chunkOverlap"]], "chunksize (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.chunkSize"]], "clear() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.clear"]], "copy() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.copy"]], "customboundsstrategy (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.customBoundsStrategy"]], "enablesentenceincrement (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.enableSentenceIncrement"]], "explainparam() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explainParam"]], "explainparams() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explainParams"]], "explodesplits (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explodeSplits"]], "extractparammap() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.extractParamMap"]], "getinputcols() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getInputCols"]], "getlazyannotator() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getLazyAnnotator"]], "getordefault() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getOrDefault"]], "getoutputcol() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getOutputCol"]], "getparam() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getParam"]], "getparamvalue() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getParamValue"]], "getter_attrs (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getter_attrs"]], "hasdefault() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.hasDefault"]], "hasparam() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.hasParam"]], "inputannotatortypes (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputAnnotatorTypes"]], "inputcols (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputCols"]], "inputcolsvalidation() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputColsValidation"]], "isdefined() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.isDefined"]], "isset() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.isSet"]], "keepseparators (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.keepSeparators"]], "lazyannotator (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.lazyAnnotator"]], "load() (internaldocumentsplitter class method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.load"]], "maxlength (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.maxLength"]], "metadatafields (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.metaDataFields"]], "name (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.name"]], "optionalinputannotatortypes (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputAnnotatorType"]], "outputcol (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputCol"]], "patternsareregex (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.patternsAreRegex"]], "read() (internaldocumentsplitter class method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.read"]], "save() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.save"]], "sentenceawareness (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.sentenceAwareness"]], "set() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.set"]], "setcasesensitive() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCaseSensitive"]], "setchunkoverlap() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setChunkOverlap"]], "setchunksize() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setChunkSize"]], "setcustomboundsstrategy() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCustomBoundsStrategy"]], "setenablesentenceincrement() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setEnableSentenceIncrement"]], "setexplodesplits() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setExplodeSplits"]], "setforceinputtypevalidation() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setForceInputTypeValidation"]], "setinputcols() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setInputCols"]], "setkeepseparators() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setKeepSeparators"]], "setlazyannotator() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setLazyAnnotator"]], "setmaxlength() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMaxLength"]], "setmetadatafields() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMetaDataFields"]], "setoutputcol() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setOutputCol"]], "setparamvalue() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setParamValue"]], "setparams() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setParams"]], "setpatternsareregex() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setPatternsAreRegex"]], "setsentenceawareness() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSentenceAwareness"]], "setsplitmode() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitMode"]], "setsplitpatterns() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitPatterns"]], "settrimwhitespace() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setTrimWhitespace"]], "skiplpinputcolsvalidation (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[109, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "splitmode (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitMode"]], "splitpatterns (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitPatterns"]], "transform() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.transform"]], "trimwhitespace (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.trimWhitespace"]], "uid (internaldocumentsplitter attribute)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.uid"]], "write() (internaldocumentsplitter method)": [[109, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.write"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "clear() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.clear"]], "clear() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.clear"]], "copy() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.copy"]], "copy() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.copy"]], "explainparam() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.explainParam"]], "explainparam() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.explainParam"]], "explainparams() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.explainParams"]], "explainparams() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.explainParams"]], "extractparammap() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.extractParamMap"]], "extractparammap() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.extractParamMap"]], "fit() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.fit"]], "fitmultiple() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.fitMultiple"]], "getbatchnorm() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getordefault() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOrDefault"]], "getordefault() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.getOrDefault"]], "getoutputact() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getparam() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getParam"]], "getparam() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.getParam"]], "getuserelationdirection() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hasdefault() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hasDefault"]], "hasdefault() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.hasDefault"]], "hasparam() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hasParam"]], "hasparam() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.hasParam"]], "hiddenact (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "isdefined() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isDefined"]], "isdefined() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.isDefined"]], "islicensed (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "isset() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isSet"]], "isset() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.isSet"]], "labelcolumn (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "load() (tfgraphbuilder class method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.load"]], "load() (tfgraphbuildermodel class method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.load"]], "maxsequencelength (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "read() (tfgraphbuilder class method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.read"]], "read() (tfgraphbuildermodel class method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.read"]], "save() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.save"]], "save() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.save"]], "set() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.set"]], "set() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.set"]], "setbatchnorm() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[110, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "transform() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.transform"]], "uid (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.uid"]], "uid (tfgraphbuildermodel attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.uid"]], "userelationdirection (tfgraphbuilder attribute)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "write() (tfgraphbuilder method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.write"]], "write() (tfgraphbuildermodel method)": [[110, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.write"]], "whiteblacklistparams (class in sparknlp_jsl.annotator.white_black_list_params)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams"]], "blacklist (whiteblacklistparams attribute)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.blackList"]], "casesensitive (whiteblacklistparams attribute)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.caseSensitive"]], "setblacklist() (whiteblacklistparams method)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setBlackList"]], "setcasesensitive() (whiteblacklistparams method)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setCaseSensitive"]], "setdenylist() (whiteblacklistparams method)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setDenyList"]], "setwhitelist() (whiteblacklistparams method)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setWhiteList"]], "sparknlp_jsl.annotator.white_black_list_params": [[111, "module-sparknlp_jsl.annotator.white_black_list_params"]], "whitelist (whiteblacklistparams attribute)": [[111, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.whiteList"]], "sparknlp_jsl.annotator.windowed": [[112, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "clear() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.clear"]], "copy() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.copy"]], "explainparam() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.explainParam"]], "explainparams() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.explainParams"]], "extractparammap() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.extractParamMap"]], "getinputcols() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getInputCols"]], "getlazyannotator() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getLazyAnnotator"]], "getordefault() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getOrDefault"]], "getoutputcol() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getOutputCol"]], "getparam() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getParam"]], "getparamvalue() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getParamValue"]], "getter_attrs (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getter_attrs"]], "gluestring (windowedparams attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "gluestring (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.glueString"]], "hasdefault() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.hasDefault"]], "hasparam() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.hasParam"]], "inputannotatortypes (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "inputcols (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputCols"]], "inputcolsvalidation() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputColsValidation"]], "isdefined() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.isDefined"]], "isset() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.isSet"]], "lazyannotator (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.lazyAnnotator"]], "load() (windowedsentencemodel class method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.load"]], "optionalinputannotatortypes (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.optionalInputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "outputcol (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputCol"]], "read() (windowedsentencemodel class method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.read"]], "save() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.save"]], "set() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.set"]], "setforceinputtypevalidation() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setForceInputTypeValidation"]], "setgluestring() (windowedparams method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setgluestring() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setGlueString"]], "setinputcols() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setInputCols"]], "setlazyannotator() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setLazyAnnotator"]], "setoutputcol() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setOutputCol"]], "setparamvalue() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setParamValue"]], "setparams() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setParams"]], "setwindowsize() (windowedparams method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "setwindowsize() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setWindowSize"]], "skiplpinputcolsvalidation (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[113, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "transform() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.transform"]], "uid (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.uid"]], "windowsize (windowedparams attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "windowsize (windowedsentencemodel attribute)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.windowSize"]], "write() (windowedsentencemodel method)": [[113, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.write"]], "sparknlp_jsl.base": [[114, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "clear() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.clear"]], "copy() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.copy"]], "explainparam() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.explainParam"]], "explainparams() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.explainParams"]], "extractparammap() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.extractParamMap"]], "fit() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.fit"]], "fitmultiple() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.fitMultiple"]], "getinputcols() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getInputCols"]], "getlazyannotator() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getLazyAnnotator"]], "getordefault() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getOrDefault"]], "getoutputcol() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getOutputCol"]], "getparam() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getParam"]], "getparamvalue() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getParamValue"]], "getter_attrs (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getter_attrs"]], "hasdefault() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.hasDefault"]], "hasparam() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.hasParam"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "inputcols (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputCols"]], "inputcolsvalidation() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputColsValidation"]], "isdefined() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.isDefined"]], "isset() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.isSet"]], "lazyannotator (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.lazyAnnotator"]], "load() (annotatorapproachinternal class method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.load"]], "optionalinputannotatortypes (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "outputcol (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputCol"]], "read() (annotatorapproachinternal class method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.read"]], "save() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.save"]], "set() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.set"]], "setforceinputtypevalidation() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setForceInputTypeValidation"]], "setinputcols() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setInputCols"]], "setlazyannotator() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setLazyAnnotator"]], "setoutputcol() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setOutputCol"]], "setparamvalue() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setParamValue"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[115, "module-sparknlp_jsl.common.annotator_approach_internal"]], "uid (annotatorapproachinternal attribute)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.uid"]], "write() (annotatorapproachinternal method)": [[115, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.write"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "clear() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.clear"]], "copy() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.copy"]], "explainparam() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.explainParam"]], "explainparams() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.explainParams"]], "extractparammap() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.extractParamMap"]], "getinputcols() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getInputCols"]], "getlazyannotator() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getLazyAnnotator"]], "getordefault() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getOrDefault"]], "getoutputcol() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getOutputCol"]], "getparam() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getParam"]], "getparamvalue() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getParamValue"]], "getter_attrs (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getter_attrs"]], "hasdefault() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.hasDefault"]], "hasparam() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.hasParam"]], "inputannotatortypes (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "inputcols (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputCols"]], "inputcolsvalidation() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputColsValidation"]], "isdefined() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.isDefined"]], "isset() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.isSet"]], "lazyannotator (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.lazyAnnotator"]], "load() (annotatormodelinternal class method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.load"]], "optionalinputannotatortypes (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "outputcol (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputCol"]], "read() (annotatormodelinternal class method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.read"]], "save() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.save"]], "set() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.set"]], "setforceinputtypevalidation() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setForceInputTypeValidation"]], "setinputcols() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setInputCols"]], "setlazyannotator() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setLazyAnnotator"]], "setoutputcol() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setOutputCol"]], "setparamvalue() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParamValue"]], "setparams() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[116, "module-sparknlp_jsl.common.annotator_model_internal"]], "transform() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.transform"]], "uid (annotatormodelinternal attribute)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.uid"]], "write() (annotatormodelinternal method)": [[116, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.write"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "clear() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.clear"]], "copy() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.copy"]], "explainparam() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.explainParam"]], "explainparams() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.explainParams"]], "extractparammap() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.extractParamMap"]], "getinputcols() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getInputCols"]], "getlazyannotator() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getLazyAnnotator"]], "getordefault() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getOrDefault"]], "getoutputcol() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getOutputCol"]], "getparam() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getParam"]], "hasdefault() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.hasDefault"]], "hasparam() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.hasParam"]], "inputannotatortypes (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputAnnotatorTypes"]], "inputcols (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputCols"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "isdefined() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.isDefined"]], "isset() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.isSet"]], "lazyannotator (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.lazyAnnotator"]], "optionalinputannotatortypes (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.outputAnnotatorType"]], "outputcol (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.outputCol"]], "set() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.set"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "setinputcols() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setInputCols"]], "setlazyannotator() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setLazyAnnotator"]], "setoutputcol() (annotatorpropertiesinternal method)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setOutputCol"]], "sparknlp_jsl.common.annotator_properties_internal": [[117, "module-sparknlp_jsl.common.annotator_properties_internal"]], "uid (annotatorpropertiesinternal attribute)": [[117, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.uid"]], "sparknlp_jsl.common": [[118, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[119, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[119, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "instance (compatibility attribute)": [[119, "sparknlp_jsl.compatibility.Compatibility.instance"]], "showversion() (compatibility method)": [[119, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "spark (compatibility attribute)": [[119, "sparknlp_jsl.compatibility.Compatibility.spark"]], "sparknlp_jsl.compatibility": [[119, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "clear() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.clear"]], "copy() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.copy"]], "explainparam() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.explainParam"]], "explainparams() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.explainParams"]], "extractparammap() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.extractParamMap"]], "f (customtransformer attribute)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "getinputcol() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.getInputCol"]], "getordefault() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.getOrDefault"]], "getoutputcol() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.getOutputCol"]], "getparam() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.getParam"]], "hasdefault() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.hasDefault"]], "hasparam() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.hasParam"]], "inputcol (customtransformer attribute)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.inputCol"]], "isdefined() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.isDefined"]], "isset() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.isSet"]], "load() (customtransformer class method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.load"]], "outputcol (customtransformer attribute)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.outputCol"]], "read() (customtransformer class method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.read"]], "save() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.save"]], "set() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.set"]], "setinputcol() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[120, "module-sparknlp_jsl.custom_transformer"]], "transform() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.transform"]], "uid (customtransformer attribute)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.uid"]], "write() (customtransformer method)": [[120, "sparknlp_jsl.custom_transformer.CustomTransformer.write"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier"]], "age_group_obfuscation (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.age_group_obfuscation"]], "age_ranges (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.age_ranges"]], "custom_pipeline (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.custom_pipeline"]], "date_shift_column_name (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.date_shift_column_name"]], "date_tag (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.date_tag"]], "deid_with_custom_pipeline() (deidentifier method)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "document (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.document"]], "documenthashcoder_col_name (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.documenthashcoder_col_name"]], "domain (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.domain"]], "fields (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.fields"]], "fixed_mask_length (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.fixed_mask_length"]], "id_column_name (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.id_column_name"]], "input_file_path (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.input_file_path"]], "language (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.language"]], "masking_policy (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.masking_policy"]], "multi_mode_file_path (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.multi_mode_file_path"]], "ner_chunk (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.ner_chunk"]], "number_of_days (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.number_of_days"]], "obfuscate_date (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_date"]], "obfuscate_ref_file_path (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_ref_file_path"]], "obfuscate_ref_source (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_ref_source"]], "output_file_path (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.output_file_path"]], "region (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.region"]], "sentence (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.sentence"]], "separator (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.separator"]], "shift_days (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.shift_days"]], "spark (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.spark"]], "sparknlp_jsl.deidentification_module": [[121, "module-sparknlp_jsl.deidentification_module"]], "token (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.token"]], "unnormalized_date (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.unnormalized_date"]], "unnormalized_mode (deidentifier attribute)": [[121, "sparknlp_jsl.deidentification_module.Deidentifier.unnormalized_mode"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[122, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[122, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[122, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation"]], "apply() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.apply"]], "apply() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.apply"]], "apply() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.apply"]], "apply() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.apply"]], "apply() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.apply"]], "apply() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.apply"]], "computeaccuracyannotator() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "getdataframe() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.getDataFrame"]], "getdataframe() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.getDataFrame"]], "getdataframe() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.getDataFrame"]], "getdataframe() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.getDataFrame"]], "getdataframe() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.getDataFrame"]], "getdataframe() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.getDataFrame"]], "java_obj (nercrfevaluation attribute)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.java_obj"]], "java_obj (nerdlevaluation attribute)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.java_obj"]], "java_obj (nerdlmetrics attribute)": [[122, "sparknlp_jsl.eval.NerDLMetrics.java_obj"]], "java_obj (norvigspellevaluation attribute)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.java_obj"]], "java_obj (posevaluation attribute)": [[122, "sparknlp_jsl.eval.POSEvaluation.java_obj"]], "java_obj (symspellevaluation attribute)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.java_obj"]], "new_java_array() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array"]], "new_java_array() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array"]], "new_java_array() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.new_java_array"]], "new_java_array() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array"]], "new_java_array() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.new_java_array"]], "new_java_array() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array"]], "new_java_array_integer() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array_integer"]], "new_java_array_integer() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array_integer"]], "new_java_array_integer() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.new_java_array_integer"]], "new_java_array_integer() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array_integer"]], "new_java_array_integer() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.new_java_array_integer"]], "new_java_array_integer() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array_integer"]], "new_java_array_string() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array_string"]], "new_java_array_string() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array_string"]], "new_java_array_string() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.new_java_array_string"]], "new_java_array_string() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array_string"]], "new_java_array_string() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.new_java_array_string"]], "new_java_array_string() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array_string"]], "new_java_obj() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_obj"]], "new_java_obj() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.new_java_obj"]], "new_java_obj() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.new_java_obj"]], "new_java_obj() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_obj"]], "new_java_obj() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.new_java_obj"]], "new_java_obj() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_obj"]], "sc (nercrfevaluation attribute)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.sc"]], "sc (nerdlevaluation attribute)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.sc"]], "sc (nerdlmetrics attribute)": [[122, "sparknlp_jsl.eval.NerDLMetrics.sc"]], "sc (norvigspellevaluation attribute)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.sc"]], "sc (posevaluation attribute)": [[122, "sparknlp_jsl.eval.POSEvaluation.sc"]], "sc (symspellevaluation attribute)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.sc"]], "spark_version() (nercrfevaluation method)": [[122, "sparknlp_jsl.eval.NerCrfEvaluation.spark_version"]], "spark_version() (nerdlevaluation method)": [[122, "sparknlp_jsl.eval.NerDLEvaluation.spark_version"]], "spark_version() (nerdlmetrics method)": [[122, "sparknlp_jsl.eval.NerDLMetrics.spark_version"]], "spark_version() (norvigspellevaluation method)": [[122, "sparknlp_jsl.eval.NorvigSpellEvaluation.spark_version"]], "spark_version() (posevaluation method)": [[122, "sparknlp_jsl.eval.POSEvaluation.spark_version"]], "spark_version() (symspellevaluation method)": [[122, "sparknlp_jsl.eval.SymSpellEvaluation.spark_version"]], "sparknlp_jsl.eval": [[122, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[123, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[123, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[124, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[125, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[125, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "clear() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.clear"]], "copy() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.copy"]], "dateshiftcolumn (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.dateShiftColumn"]], "explainparam() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.explainParam"]], "explainparams() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.explainParams"]], "extractparammap() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.extractParamMap"]], "getinputcols() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getInputCols"]], "getlazyannotator() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getLazyAnnotator"]], "getordefault() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getOrDefault"]], "getoutputcol() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getOutputCol"]], "getparam() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getParam"]], "getparamvalue() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getParamValue"]], "getter_attrs (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getter_attrs"]], "hasdefault() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.hasDefault"]], "hasparam() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.hasParam"]], "inputannotatortypes (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputAnnotatorTypes"]], "inputcols (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputCols"]], "inputcolsvalidation() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputColsValidation"]], "isdefined() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.isDefined"]], "isset() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.isSet"]], "kwargs (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.kwargs"]], "lazyannotator (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.lazyAnnotator"]], "load() (financedocumenthashcoder class method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.load"]], "name (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.name"]], "newdateshift (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.outputAnnotatorType"]], "outputcol (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.outputCol"]], "patientidcolumn (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.patientIdColumn"]], "rangedays (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.rangeDays"]], "read() (financedocumenthashcoder class method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.read"]], "save() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.save"]], "seed (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.seed"]], "set() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.set"]], "setdateshiftcolumn() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setDateShiftColumn"]], "setidcolumn() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "setinputcols() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setInputCols"]], "setlazyannotator() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setNewDateShift"]], "setoutputcol() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setOutputCol"]], "setparamvalue() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setParamValue"]], "setparams() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setParams"]], "setpatientidcolumn() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setPatientIdColumn"]], "setrangedays() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setRangeDays"]], "setseed() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setSeed"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[126, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "transform() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.transform"]], "uid (financedocumenthashcoder attribute)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.uid"]], "write() (financedocumenthashcoder method)": [[126, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.write"]], "sparknlp_jsl.finance.chunk_classification.deid": [[127, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[128, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[129, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[129, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[130, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[130, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[131, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[132, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[132, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[133, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[134, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[135, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[135, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[136, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[136, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "casesensitive (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.caseSensitive"]], "clear() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.clear"]], "coalescesentences (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.coalesceSentences"]], "configprotobytes (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.configProtoBytes"]], "copy() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.copy"]], "explainparam() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.explainParam"]], "explainparams() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.explainParams"]], "extractparammap() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getCaseSensitive"]], "getclasses() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getClasses"]], "getinputcols() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getInputCols"]], "getlazyannotator() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getOrDefault"]], "getoutputcol() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getOutputCol"]], "getparam() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getParam"]], "getparamvalue() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getParamValue"]], "getter_attrs (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getter_attrs"]], "hasdefault() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.hasDefault"]], "hasparam() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.hasParam"]], "inputannotatortypes (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputColsValidation"]], "isdefined() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.isDefined"]], "isset() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.isSet"]], "lazyannotator (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.lazyAnnotator"]], "load() (financebertforsequenceclassification class method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.load"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.maxSentenceLength"]], "name (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "optionalinputannotatortypes (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.outputAnnotatorType"]], "outputcol (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.outputCol"]], "pretrained() (financebertforsequenceclassification static method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "read() (financebertforsequenceclassification class method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.read"]], "save() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.save"]], "set() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.set"]], "setcasesensitive() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setInputCols"]], "setlazyannotator() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setOutputCol"]], "setparamvalue() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setParamValue"]], "setparams() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[138, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "transform() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.transform"]], "uid (financebertforsequenceclassification attribute)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.uid"]], "write() (financebertforsequenceclassification method)": [[138, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.write"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "batchsize (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.batchSize"]], "classes (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.classes"]], "clear() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.clear"]], "clear() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.clear"]], "configprotobytes (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.configProtoBytes"]], "configprotobytes (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.configProtoBytes"]], "copy() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.copy"]], "copy() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.copy"]], "dropout (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.dropout"]], "enableoutputlogs (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.enableOutputLogs"]], "engine (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.engine"]], "evaluationlogextended (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.evaluationLogExtended"]], "explainparam() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.explainParam"]], "explainparam() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.explainParam"]], "explainparams() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.explainParams"]], "explainparams() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.explainParams"]], "extractparammap() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.extractParamMap"]], "extractparammap() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.extractParamMap"]], "fit() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.fit"]], "fitmultiple() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.fitMultiple"]], "getengine() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getEngine"]], "getinputcols() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getInputCols"]], "getinputcols() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getInputCols"]], "getlazyannotator() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getLazyAnnotator"]], "getlazyannotator() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getLazyAnnotator"]], "getordefault() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getOrDefault"]], "getordefault() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getOrDefault"]], "getoutputcol() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getOutputCol"]], "getoutputcol() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getOutputCol"]], "getparam() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getParam"]], "getparam() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getParam"]], "getparamvalue() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getParamValue"]], "getparamvalue() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getParamValue"]], "getstorageref() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getStorageRef"]], "getter_attrs (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getter_attrs"]], "getter_attrs (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getter_attrs"]], "hasdefault() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.hasDefault"]], "hasdefault() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.hasDefault"]], "hasparam() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.hasParam"]], "hasparam() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.hasParam"]], "inputannotatortypes (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputAnnotatorTypes"]], "inputcols (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputCols"]], "inputcols (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputCols"]], "inputcolsvalidation() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputColsValidation"]], "inputcolsvalidation() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputColsValidation"]], "isdefined() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.isDefined"]], "isdefined() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.isDefined"]], "isset() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.isSet"]], "isset() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.isSet"]], "labelcolumn (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.labelColumn"]], "lazyannotator (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.lazyAnnotator"]], "lazyannotator (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.lazyAnnotator"]], "load() (financeclassifierdlapproach class method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.load"]], "load() (financeclassifierdlmodel class method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.load"]], "lr (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.lr"]], "maxepochs (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.maxEpochs"]], "name (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "optionalinputannotatortypes (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.outputAnnotatorType"]], "outputcol (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputCol"]], "outputcol (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.outputCol"]], "outputlogspath (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputLogsPath"]], "pretrained() (financeclassifierdlmodel static method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "randomseed (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.randomSeed"]], "read() (financeclassifierdlapproach class method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.read"]], "read() (financeclassifierdlmodel class method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.read"]], "save() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.save"]], "save() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.save"]], "set() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.set"]], "set() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.set"]], "setbatchsize() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setBatchSize"]], "setconfigprotobytes() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setConfigProtoBytes"]], "setdropout() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setDropout"]], "setenableoutputlogs() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setEnableOutputLogs"]], "setevaluationlogextended() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setEvaluationLogExtended"]], "setinputcols() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setInputCols"]], "setinputcols() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setInputCols"]], "setlabelcolumn() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLabelColumn"]], "setlazyannotator() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLazyAnnotator"]], "setlazyannotator() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setLazyAnnotator"]], "setlr() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLr"]], "setmaxepochs() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setMaxEpochs"]], "setoutputcol() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setOutputCol"]], "setoutputcol() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setOutputCol"]], "setoutputlogspath() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setOutputLogsPath"]], "setparamvalue() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setParamValue"]], "setparamvalue() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setParamValue"]], "setparams() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setParams"]], "setrandomseed() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setRandomSeed"]], "setstorageref() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setStorageRef"]], "settestdataset() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setTestDataset"]], "setvalidationsplit() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setValidationSplit"]], "setverbose() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setVerbose"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[139, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "storageref (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.storageRef"]], "testdataset (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.testDataset"]], "transform() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.transform"]], "uid (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.uid"]], "uid (financeclassifierdlmodel attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.uid"]], "validationsplit (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.validationSplit"]], "verbose (financeclassifierdlapproach attribute)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.verbose"]], "write() (financeclassifierdlapproach method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.write"]], "write() (financeclassifierdlmodel method)": [[139, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.write"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "classificationmodel (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.classificationModelPath"]], "clear() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.clear"]], "clear() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.clear"]], "copy() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.copy"]], "copy() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.copy"]], "explainparam() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.explainParam"]], "explainparam() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.explainParam"]], "explainparams() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.explainParams"]], "explainparams() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.explainParams"]], "extractparammap() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.extractParamMap"]], "fit() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fit"]], "fitintercept (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getInputCols"]], "getinputcols() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getOrDefault"]], "getordefault() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getOutputCol"]], "getparam() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getParam"]], "getparam() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getParam"]], "getparamvalue() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getParamValue"]], "getter_attrs (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getter_attrs"]], "hasdefault() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.hasDefault"]], "hasdefault() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.hasDefault"]], "hasparam() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.hasParam"]], "hasparam() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.hasParam"]], "inputannotatortypes (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputCols"]], "inputcols (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputColsValidation"]], "isdefined() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.isDefined"]], "isdefined() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.isDefined"]], "isset() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.isSet"]], "isset() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.isSet"]], "labelcol (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.labelCol"]], "labels (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.labels"]], "labels (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.labels"]], "lazyannotator (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.lazyAnnotator"]], "load() (financedocumentmlclassifierapproach class method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.load"]], "load() (financedocumentmlclassifiermodel class method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.load"]], "maxiter (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.maxIter"]], "maxtokenngram (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.maxTokenNgram"]], "mergechunks (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.mergeChunks"]], "mergechunks (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.mergeChunks"]], "mintokenngram (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.minTokenNgram"]], "name (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "optionalinputannotatortypes (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.outputCol"]], "outputcol (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.outputCol"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "read() (financedocumentmlclassifierapproach class method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.read"]], "read() (financedocumentmlclassifiermodel class method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.read"]], "save() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.save"]], "save() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.save"]], "set() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.set"]], "set() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.set"]], "setclassificationmodel() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setInputCols"]], "setinputcols() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setInputCols"]], "setlabelcol() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLabelCol"]], "setlabels() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLabels"]], "setlabels() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setLabels"]], "setlazyannotator() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setMergeChunks"]], "setmintokenngram() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setParamValue"]], "setparams() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setParams"]], "settol() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[140, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "tol (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.tol"]], "transform() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.transform"]], "uid (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.uid"]], "uid (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.uid"]], "vectorizationmodel (financedocumentmlclassifiermodel attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (financedocumentmlclassifierapproach attribute)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.vectorizationModelPath"]], "write() (financedocumentmlclassifierapproach method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.write"]], "write() (financedocumentmlclassifiermodel method)": [[140, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.write"]], "financefewshotclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach"]], "financefewshotclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel"]], "batchsize (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.batchSize"]], "classes (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.classes"]], "clear() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.clear"]], "clear() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.clear"]], "copy() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.copy"]], "copy() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.copy"]], "datasetinfo (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.datasetInfo"]], "datasetinfo (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.datasetInfo"]], "doexceptionhandling (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.doExceptionHandling"]], "dropout (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.dropout"]], "engine (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.engine"]], "epochsn (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.epochsN"]], "explainparam() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.explainParam"]], "explainparam() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.explainParam"]], "explainparams() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.explainParams"]], "explainparams() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.explainParams"]], "extractparammap() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.extractParamMap"]], "extractparammap() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.extractParamMap"]], "featurescaling (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.featureScaling"]], "featurescaling (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.featureScaling"]], "fit() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fit"]], "fitmultiple() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fitMultiple"]], "fiximbalance (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fixImbalance"]], "getengine() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getEngine"]], "getinputcols() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getInputCols"]], "getinputcols() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getInputCols"]], "getlazyannotator() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getOrDefault"]], "getordefault() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getOrDefault"]], "getoutputcol() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getOutputCol"]], "getoutputcol() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getOutputCol"]], "getparam() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getParam"]], "getparam() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getParam"]], "getparamvalue() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getParamValue"]], "getparamvalue() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getParamValue"]], "getter_attrs (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getter_attrs"]], "getter_attrs (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getter_attrs"]], "hasdefault() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.hasDefault"]], "hasdefault() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.hasDefault"]], "hasparam() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.hasParam"]], "hasparam() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.hasParam"]], "inputannotatortypes (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputCols"]], "inputcols (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputColsValidation"]], "isdefined() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.isDefined"]], "isdefined() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.isDefined"]], "isset() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.isSet"]], "isset() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.isSet"]], "labelcolumn (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.labelColumn"]], "lazyannotator (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.lazyAnnotator"]], "learningrate (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.learningRate"]], "load() (financefewshotclassifierapproach class method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.load"]], "load() (financefewshotclassifiermodel class method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.load"]], "modelfile (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.modelFile"]], "multiclass (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.multiClass"]], "multiclass (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.multiClass"]], "name (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.name"]], "name (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.name"]], "optionalinputannotatortypes (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.outputAnnotatorType"]], "outputcol (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputCol"]], "outputcol (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.outputCol"]], "outputlogspath (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputLogsPath"]], "pretrained() (financefewshotclassifiermodel static method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.pretrained"]], "read() (financefewshotclassifierapproach class method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.read"]], "read() (financefewshotclassifiermodel class method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.read"]], "save() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.save"]], "save() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.save"]], "set() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.set"]], "set() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.set"]], "setbatchsize() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDropout"]], "setepochsnumber() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setInputCols"]], "setinputcols() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setInputCols"]], "setlabelcol() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLearningRate"]], "setmodelfile() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setModelFile"]], "setmulticlass() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setMultiClass"]], "setmulticlass() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setMultiClass"]], "setoutputcol() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setOutputCol"]], "setoutputcol() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setParamValue"]], "setparamvalue() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setParamValue"]], "setparams() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setParams"]], "setvalidationsplit() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[141, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "transform() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.transform"]], "uid (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.uid"]], "uid (financefewshotclassifiermodel attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.uid"]], "validationsplit (financefewshotclassifierapproach attribute)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.validationSplit"]], "write() (financefewshotclassifierapproach method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.write"]], "write() (financefewshotclassifiermodel method)": [[141, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.write"]], "sparknlp_jsl.finance.sequence_classification": [[142, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "batchsize (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.batchSize"]], "clear() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.clear"]], "configprotobytes (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.configProtoBytes"]], "copy() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.copy"]], "dosample (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.doSample"]], "explainparam() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.explainParam"]], "explainparams() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.explainParams"]], "extractparammap() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.extractParamMap"]], "getbatchsize() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getBatchSize"]], "getinputcols() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getInputCols"]], "getlazyannotator() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getLazyAnnotator"]], "getordefault() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getOrDefault"]], "getoutputcol() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getOutputCol"]], "getparam() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getParam"]], "getparamvalue() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getParamValue"]], "getter_attrs (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getter_attrs"]], "hasdefault() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.hasDefault"]], "hasparam() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.hasParam"]], "ignoretokenids (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputAnnotatorTypes"]], "inputcols (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputCols"]], "inputcolsvalidation() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputColsValidation"]], "isdefined() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.isDefined"]], "isset() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.isSet"]], "lazyannotator (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.lazyAnnotator"]], "load() (financeencoderdecoder class method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.load"]], "maxnewtokens (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.maxNewTokens"]], "maxtextlength (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.maxTextLength"]], "mlframeworktype (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.mlFrameworkType"]], "name (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "norepeatngramsize (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.outputAnnotatorType"]], "outputcol (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.outputCol"]], "randomseed (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.randomSeed"]], "read() (financeencoderdecoder class method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.read"]], "refinechunksize (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineChunkSize"]], "refinemaxattempts (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineMaxAttempts"]], "refinesummary (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineSummary"]], "refinesummarytargetlength (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineSummaryTargetLength"]], "save() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.save"]], "set() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.set"]], "setbatchsize() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setBatchSize"]], "setconfigprotobytes() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setConfigProtoBytes"]], "setdosample() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setInputCols"]], "setlazyannotator() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setOutputCol"]], "setparamvalue() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setParamValue"]], "setparams() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setParams"]], "setrandomseed() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setStopAtEos"]], "settopk() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[143, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "stopateos (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.stopAtEos"]], "task (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.task"]], "topk (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.topK"]], "transform() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.transform"]], "uid (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.uid"]], "usecache (financeencoderdecoder attribute)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.useCache"]], "write() (financeencoderdecoder method)": [[143, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.write"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "batchsize (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.batchSize"]], "clear() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.clear"]], "configprotobytes (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.configProtoBytes"]], "copy() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.copy"]], "customprompt (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.customPrompt"]], "dosample (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.doSample"]], "explainparam() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.explainParam"]], "explainparams() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.explainParams"]], "extractparammap() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.extractParamMap"]], "getbatchsize() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getBatchSize"]], "getinputcols() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getInputCols"]], "getlazyannotator() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getLazyAnnotator"]], "getordefault() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getOrDefault"]], "getoutputcol() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getOutputCol"]], "getparam() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getParam"]], "getparamvalue() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getParamValue"]], "getquestiontypes() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getQuestionTypes"]], "getter_attrs (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getter_attrs"]], "hasdefault() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.hasDefault"]], "hasparam() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.hasParam"]], "ignoretokenids (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputAnnotatorTypes"]], "inputcols (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputCols"]], "inputcolsvalidation() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputColsValidation"]], "isdefined() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.isDefined"]], "isset() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.isSet"]], "lazyannotator (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.lazyAnnotator"]], "load() (financequestionanswering class method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.load"]], "loadmedicaltextgenerator() (financequestionanswering static method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (financequestionanswering static method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "maxcontextlength (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.maxContextLength"]], "maxnewtokens (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.maxNewTokens"]], "mlframeworktype (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.mlFrameworkType"]], "modeltype (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.modelType"]], "name (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "norepeatngramsize (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.outputAnnotatorType"]], "outputcol (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.outputCol"]], "pretrained() (financequestionanswering static method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "questiontype (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.questionType"]], "read() (financequestionanswering class method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.read"]], "save() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.save"]], "set() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.set"]], "setbatchsize() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setBatchSize"]], "setconfigprotobytes() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setCustomPrompt"]], "setdosample() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setInputCols"]], "setlazyannotator() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setOutputCol"]], "setparamvalue() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setParamValue"]], "setparams() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setParams"]], "setquestionanswerterminals() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionType"]], "setrandomseed() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setRandomSeed"]], "settopk() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setTopK"]], "setusecache() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[144, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "topk (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.topK"]], "transform() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.transform"]], "uid (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.uid"]], "usecache (financequestionanswering attribute)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.useCache"]], "write() (financequestionanswering method)": [[144, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.write"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "batchsize (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.batchSize"]], "clear() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.clear"]], "configprotobytes (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.configProtoBytes"]], "copy() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.copy"]], "dosample (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.doSample"]], "explainparam() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.explainParam"]], "explainparams() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.explainParams"]], "extractparammap() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.extractParamMap"]], "getbatchsize() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getBatchSize"]], "getinputcols() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getInputCols"]], "getlazyannotator() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getLazyAnnotator"]], "getordefault() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getOrDefault"]], "getoutputcol() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getOutputCol"]], "getparam() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getParam"]], "getparamvalue() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getParamValue"]], "getter_attrs (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getter_attrs"]], "hasdefault() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.hasDefault"]], "hasparam() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.hasParam"]], "ignoretokenids (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.ignoreTokenIds"]], "inputannotatortypes (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputAnnotatorTypes"]], "inputcols (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputCols"]], "inputcolsvalidation() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputColsValidation"]], "isdefined() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.isDefined"]], "isset() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.isSet"]], "lazyannotator (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.lazyAnnotator"]], "load() (financesummarizer class method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.load"]], "loadsavedmodel() (financesummarizer static method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "maxnewtokens (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.maxNewTokens"]], "maxtextlength (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.maxTextLength"]], "mlframeworktype (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.mlFrameworkType"]], "name (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "norepeatngramsize (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.outputAnnotatorType"]], "outputcol (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.outputCol"]], "pretrained() (financesummarizer static method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "randomseed (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.randomSeed"]], "read() (financesummarizer class method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.read"]], "refinechunksize (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineChunkSize"]], "refinemaxattempts (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineMaxAttempts"]], "refinesummary (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineSummary"]], "refinesummarytargetlength (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineSummaryTargetLength"]], "save() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.save"]], "set() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.set"]], "setbatchsize() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setBatchSize"]], "setconfigprotobytes() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setConfigProtoBytes"]], "setdosample() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setDoSample"]], "setforceinputtypevalidation() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setIgnoreTokenIds"]], "setinputcols() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setInputCols"]], "setlazyannotator() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setMaxNewTokens"]], "setmaxtextlength() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setOutputCol"]], "setparamvalue() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setParamValue"]], "setparams() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setParams"]], "setrandomseed() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRandomSeed"]], "setrefinechunksize() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setStopAtEos"]], "settopk() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setTopK"]], "skiplpinputcolsvalidation (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[145, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "stopateos (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.stopAtEos"]], "task (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.task"]], "topk (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.topK"]], "transform() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.transform"]], "uid (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.uid"]], "usecache (financesummarizer attribute)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.useCache"]], "write() (financesummarizer method)": [[145, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.write"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "batchsize (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.batchSize"]], "clear() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.clear"]], "configprotobytes (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.configProtoBytes"]], "copy() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.copy"]], "customprompt (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.customPrompt"]], "dosample (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.doSample"]], "explainparam() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.explainParam"]], "explainparams() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.explainParams"]], "extractparammap() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.extractParamMap"]], "getadditionaltokens() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getAdditionalTokens"]], "getbatchsize() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getBatchSize"]], "getinputcols() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getInputCols"]], "getlazyannotator() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getLazyAnnotator"]], "getordefault() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getOrDefault"]], "getoutputcol() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getOutputCol"]], "getparam() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getParam"]], "getparamvalue() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getParamValue"]], "getter_attrs (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getter_attrs"]], "hasdefault() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.hasDefault"]], "hasparam() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.hasParam"]], "ignoretokenids (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.ignoreTokenIds"]], "inputannotatortypes (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputAnnotatorTypes"]], "inputcols (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputCols"]], "inputcolsvalidation() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputColsValidation"]], "isdefined() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.isDefined"]], "isset() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.isSet"]], "lazyannotator (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.lazyAnnotator"]], "load() (financetextgenerator class method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.load"]], "loadsavedmodel() (financetextgenerator static method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "maxcontextlength (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxContextLength"]], "maxnewtokens (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxNewTokens"]], "maxtextlength (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxTextLength"]], "mlframeworktype (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.mlFrameworkType"]], "modeltype (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.modelType"]], "name (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "norepeatngramsize (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.outputAnnotatorType"]], "outputcol (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.outputCol"]], "pretrained() (financetextgenerator static method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "read() (financetextgenerator class method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.read"]], "save() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.save"]], "set() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.set"]], "setadditionaltokens() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setAdditionalTokens"]], "setbatchsize() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setBatchSize"]], "setconfigprotobytes() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setCustomPrompt"]], "setdosample() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setDoSample"]], "setforceinputtypevalidation() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setIgnoreTokenIds"]], "setinputcols() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setInputCols"]], "setlazyannotator() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setOutputCol"]], "setparamvalue() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setParamValue"]], "setparams() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setParams"]], "setrandomseed() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setRandomSeed"]], "setstopateos() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setStopAtEos"]], "settopk() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setTopK"]], "setusecache() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[146, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "stopateos (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.stopAtEos"]], "topk (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.topK"]], "transform() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.transform"]], "uid (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.uid"]], "usecache (financetextgenerator attribute)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.useCache"]], "write() (financetextgenerator method)": [[146, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.write"]], "sparknlp_jsl.finance.sequence_generation": [[147, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "clear() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.clear"]], "copy() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.copy"]], "entities1 (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.entities1"]], "entities2 (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.entities2"]], "explainparam() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.explainParam"]], "explainparams() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.explainParams"]], "extractparammap() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.extractParamMap"]], "getinputcols() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getInputCols"]], "getlazyannotator() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getLazyAnnotator"]], "getordefault() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getOrDefault"]], "getoutputcol() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getOutputCol"]], "getparam() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getParam"]], "getparamvalue() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getParamValue"]], "getter_attrs (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getter_attrs"]], "hasdefault() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.hasDefault"]], "hasparam() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.hasParam"]], "inputannotatortypes (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputCols"]], "inputcolsvalidation() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputColsValidation"]], "isdefined() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.isDefined"]], "isset() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.isSet"]], "lazyannotator (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.lazyAnnotator"]], "load() (financenerquestiongenerator class method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.load"]], "name (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.name"]], "optionalinputannotatortypes (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.outputAnnotatorType"]], "outputcol (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.outputCol"]], "questionmark (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.questionMark"]], "questionpronoun (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.questionPronoun"]], "read() (financenerquestiongenerator class method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.read"]], "save() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.save"]], "set() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.set"]], "setentities1() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setEntities1"]], "setentities2() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setInputCols"]], "setlazyannotator() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setOutputCol"]], "setparamvalue() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setParamValue"]], "setparams() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setParams"]], "setquestionmark() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[148, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "strategytype (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.strategyType"]], "transform() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.transform"]], "uid (financenerquestiongenerator attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.uid"]], "write() (financenerquestiongenerator method)": [[148, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.write"]], "sparknlp_jsl.finance.token_classification": [[149, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "casesensitive (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.caseSensitive"]], "clear() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.clear"]], "configprotobytes (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.configProtoBytes"]], "copy() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.copy"]], "explainparam() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.explainParam"]], "explainparams() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.explainParams"]], "extractparammap() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.extractParamMap"]], "getcasesensitive() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getCaseSensitive"]], "getclasses() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getClasses"]], "getinputcols() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getInputCols"]], "getlazyannotator() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getLazyAnnotator"]], "getordefault() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getOrDefault"]], "getoutputcol() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getOutputCol"]], "getparam() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getParam"]], "getparamvalue() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getParamValue"]], "getter_attrs (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getter_attrs"]], "hasdefault() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.hasDefault"]], "hasparam() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.hasParam"]], "inputannotatortypes (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputAnnotatorTypes"]], "inputcols (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputCols"]], "inputcolsvalidation() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputColsValidation"]], "isdefined() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.isDefined"]], "isset() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.isSet"]], "lazyannotator (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.lazyAnnotator"]], "load() (financebertfortokenclassification class method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.load"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "maxsentencelength (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.maxSentenceLength"]], "name (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "optionalinputannotatortypes (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.outputAnnotatorType"]], "outputcol (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.outputCol"]], "pretrained() (financebertfortokenclassification static method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "read() (financebertfortokenclassification class method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.read"]], "save() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.save"]], "set() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.set"]], "setcasesensitive() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setCaseSensitive"]], "setconfigprotobytes() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setForceInputTypeValidation"]], "setinputcols() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setInputCols"]], "setlazyannotator() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setLazyAnnotator"]], "setmaxsentencelength() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setMaxSentenceLength"]], "setoutputcol() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setOutputCol"]], "setparamvalue() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setParamValue"]], "setparams() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setParams"]], "skiplpinputcolsvalidation (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.skipLPInputColsValidation"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[150, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "transform() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.transform"]], "uid (financebertfortokenclassification attribute)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.uid"]], "write() (financebertfortokenclassification method)": [[150, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.write"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "batchsize (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.batchSize"]], "classes (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.classes"]], "clear() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.clear"]], "clear() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.clear"]], "configprotobytes (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.configProtoBytes"]], "configprotobytes (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.configProtoBytes"]], "copy() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.copy"]], "copy() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.copy"]], "datasetinfo (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.datasetInfo"]], "datasetinfo (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.datasetInfo"]], "doexceptionhandling (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.doExceptionHandling"]], "dropout (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.dropout"]], "earlystoppingcriterion (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.enableOutputLogs"]], "engine (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.engine"]], "entities (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.entities"]], "evaluationlogextended (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.evaluationLogExtended"]], "explainparam() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.explainParam"]], "explainparam() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.explainParam"]], "explainparams() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.explainParams"]], "explainparams() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.explainParams"]], "extractparammap() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.extractParamMap"]], "extractparammap() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.extractParamMap"]], "fit() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.fit"]], "fitmultiple() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.fitMultiple"]], "getclasses() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getClasses"]], "getengine() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getEngine"]], "getinputcols() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getInputCols"]], "getinputcols() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getInputCols"]], "getlabelcolumn() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getLabelColumn"]], "getlazyannotator() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getLazyAnnotator"]], "getlazyannotator() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getLazyAnnotator"]], "getordefault() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getOrDefault"]], "getordefault() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getOrDefault"]], "getoutputcol() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getOutputCol"]], "getoutputcol() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getOutputCol"]], "getparam() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getParam"]], "getparam() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getParam"]], "getparamvalue() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getParamValue"]], "getparamvalue() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getParamValue"]], "getstorageref() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getStorageRef"]], "gettrainingclassdistribution() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getTrainingClassDistribution"]], "getter_attrs (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getter_attrs"]], "getter_attrs (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getter_attrs"]], "graphfile (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.graphFile"]], "graphfolder (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.graphFolder"]], "hasdefault() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.hasDefault"]], "hasdefault() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.hasDefault"]], "hasparam() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.hasParam"]], "hasparam() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.hasParam"]], "includeallconfidencescores (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.includeAllConfidenceScores"]], "includeconfidence (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.includeConfidence"]], "includeconfidence (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.includeConfidence"]], "inferencebatchsize (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inferenceBatchSize"]], "inputannotatortypes (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputAnnotatorTypes"]], "inputcols (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputCols"]], "inputcols (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputCols"]], "inputcolsvalidation() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputColsValidation"]], "inputcolsvalidation() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputColsValidation"]], "isdefined() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.isDefined"]], "isdefined() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.isDefined"]], "isset() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.isSet"]], "isset() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.isSet"]], "labelcasing (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.labelCasing"]], "labelcolumn (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.labelColumn"]], "lazyannotator (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.lazyAnnotator"]], "lazyannotator (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.lazyAnnotator"]], "load() (financenerapproach class method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.load"]], "load() (financenermodel class method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.load"]], "loadsavedmodel() (financenermodel static method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "logprefix (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.logPrefix"]], "lr (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.lr"]], "maxepochs (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.maxEpochs"]], "minepochs (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.minEpochs"]], "name (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "optionalinputannotatortypes (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputAnnotatorType"]], "outputannotatortype (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.outputAnnotatorType"]], "outputcol (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputCol"]], "outputcol (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.outputCol"]], "outputlogspath (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputLogsPath"]], "overrideexistingtags (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.overrideExistingTags"]], "po (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.po"]], "pretrained() (financenermodel static method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "pretrainedmodelpath (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.pretrainedModelPath"]], "randomseed (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.randomSeed"]], "randomvalidationsplitperepoch (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.randomValidationSplitPerEpoch"]], "read() (financenerapproach class method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.read"]], "read() (financenermodel class method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.read"]], "save() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.save"]], "save() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.save"]], "sentencetokenindex (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.sentenceTokenIndex"]], "sentencetokenindex (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.sentenceTokenIndex"]], "set() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.set"]], "set() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.set"]], "setbatchsize() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setBatchSize"]], "setconfigprotobytes() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setConfigProtoBytes"]], "setdatasetinfo() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDatasetInfo"]], "setdatasetinfo() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setDatasetInfo"]], "setdoexceptionhandling() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDoExceptionHandling"]], "setdropout() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDropout"]], "setearlystoppingcriterion() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEnableOutputLogs"]], "setentities() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEntities"]], "setevaluationlogextended() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setForceInputTypeValidation"]], "setgraphfile() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setGraphFile"]], "setgraphfolder() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setIncludeConfidence"]], "setincludeconfidence() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setIncludeConfidence"]], "setinferencebatchsize() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setInferenceBatchSize"]], "setinputcols() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setInputCols"]], "setinputcols() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setInputCols"]], "setlabelcasing() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setLabelCasing"]], "setlabelcolumn() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLabelColumn"]], "setlazyannotator() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLazyAnnotator"]], "setlazyannotator() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setLazyAnnotator"]], "setlogprefix() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLogPrefix"]], "setlr() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLr"]], "setmaxepochs() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setMaxEpochs"]], "setminepochs() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setMinEpochs"]], "setoutputcol() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOutputCol"]], "setoutputcol() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setOutputCol"]], "setoutputlogspath() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOverrideExistingTags"]], "setparamvalue() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setParamValue"]], "setparamvalue() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setParamValue"]], "setparams() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setParams"]], "setpo() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setPo"]], "setpretrainedmodelpath() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setPretrainedModelPath"]], "setrandomseed() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setSentenceTokenIndex"]], "setstorageref() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setStorageRef"]], "settagsmapping() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setTagsMapping"]], "settestdataset() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setTestDataset"]], "setusebestmodel() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setUseBestModel"]], "setusecontrib() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setUseContrib"]], "setvalidationsplit() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setValidationSplit"]], "setverbose() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setVerbose"]], "skiplpinputcolsvalidation (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[151, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "storageref (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.storageRef"]], "testdataset (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.testDataset"]], "trainingclassdistribution (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.trainingClassDistribution"]], "transform() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.transform"]], "uc (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.uc"]], "uid (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.uid"]], "uid (financenermodel attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.uid"]], "usebestmodel (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.useBestModel"]], "usecontrib (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.useContrib"]], "validationsplit (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.validationSplit"]], "verbose (financenerapproach attribute)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.verbose"]], "write() (financenerapproach method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.write"]], "write() (financenermodel method)": [[151, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.write"]], "sparknlp_jsl.finance.token_classification.ner": [[152, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[153, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[153, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profile"]], "profileesrdv21y19() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileESRDV21Y19"]], "profilerxhccv05y20() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileRxHCCV05Y20"]], "profilerxhccv05y21() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileRxHCCV05Y21"]], "profilerxhccv05y22() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileRxHCCV05Y22"]], "profilerxhccv05y23() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileRxHCCV05Y23"]], "profilerxhccv08y22() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileRxHCCV08Y22"]], "profilerxhccv08y23() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileRxHCCV08Y23"]], "profilev22() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV24"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV24Y22"]], "profilev28() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV28"]], "profilev28y24() (in module sparknlp_jsl.functions)": [[154, "sparknlp_jsl.functions.profileV28Y24"]], "sparknlp_jsl.functions": [[154, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[155, "sparknlp_jsl.annotators"]], "load_license_validator() (in module sparknlp_jsl)": [[155, "sparknlp_jsl.load_license_validator"]], "size_regex (in module sparknlp_jsl)": [[155, "sparknlp_jsl.size_regex"]], "transformer_seq_classification (in module sparknlp_jsl)": [[155, "sparknlp_jsl.transformer_seq_classification"]], "version_regex (in module sparknlp_jsl)": [[155, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[156, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[156, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[156, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[156, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[156, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[157, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[157, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[158, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[159, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[159, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "clear() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.clear"]], "copy() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.copy"]], "dateshiftcolumn (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.dateShiftColumn"]], "explainparam() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.explainParam"]], "explainparams() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.explainParams"]], "extractparammap() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.extractParamMap"]], "getinputcols() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getInputCols"]], "getlazyannotator() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getLazyAnnotator"]], "getordefault() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getOrDefault"]], "getoutputcol() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getOutputCol"]], "getparam() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getParam"]], "getparamvalue() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getParamValue"]], "getter_attrs (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getter_attrs"]], "hasdefault() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.hasDefault"]], "hasparam() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.hasParam"]], "inputannotatortypes (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputAnnotatorTypes"]], "inputcols (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputCols"]], "inputcolsvalidation() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputColsValidation"]], "isdefined() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.isDefined"]], "isset() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.isSet"]], "kwargs (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.kwargs"]], "lazyannotator (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.lazyAnnotator"]], "load() (legaldocumenthashcoder class method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.load"]], "name (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.name"]], "newdateshift (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.outputAnnotatorType"]], "outputcol (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.outputCol"]], "patientidcolumn (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.patientIdColumn"]], "rangedays (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.rangeDays"]], "read() (legaldocumenthashcoder class method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.read"]], "save() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.save"]], "seed (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.seed"]], "set() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.set"]], "setdateshiftcolumn() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setDateShiftColumn"]], "setidcolumn() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "setinputcols() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setInputCols"]], "setlazyannotator() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setNewDateShift"]], "setoutputcol() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setOutputCol"]], "setparamvalue() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setParamValue"]], "setparams() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setParams"]], "setpatientidcolumn() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setPatientIdColumn"]], "setrangedays() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setRangeDays"]], "setseed() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setSeed"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[160, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "transform() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.transform"]], "uid (legaldocumenthashcoder attribute)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.uid"]], "write() (legaldocumenthashcoder method)": [[160, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.write"]], "sparknlp_jsl.legal.chunk_classification.deid": [[161, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[162, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[163, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[163, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[164, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[164, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[165, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[166, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[166, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[167, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[168, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[169, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[169, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[170, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[170, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal.sequence_classification": [[172, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "casesensitive (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.caseSensitive"]], "clear() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.clear"]], "coalescesentences (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.configProtoBytes"]], "copy() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.copy"]], "explainparam() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.explainParam"]], "explainparams() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.explainParams"]], "extractparammap() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getCaseSensitive"]], "getclasses() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getClasses"]], "getinputcols() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getInputCols"]], "getlazyannotator() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getOrDefault"]], "getoutputcol() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getOutputCol"]], "getparam() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getParam"]], "getparamvalue() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getParamValue"]], "getter_attrs (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getter_attrs"]], "hasdefault() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.hasDefault"]], "hasparam() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.hasParam"]], "inputannotatortypes (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputColsValidation"]], "isdefined() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.isDefined"]], "isset() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.isSet"]], "lazyannotator (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.lazyAnnotator"]], "load() (legalbertforsequenceclassification class method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.load"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.maxSentenceLength"]], "name (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "optionalinputannotatortypes (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.outputAnnotatorType"]], "outputcol (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.outputCol"]], "pretrained() (legalbertforsequenceclassification static method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "read() (legalbertforsequenceclassification class method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.read"]], "save() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.save"]], "set() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.set"]], "setcasesensitive() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setInputCols"]], "setlazyannotator() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setOutputCol"]], "setparamvalue() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setParamValue"]], "setparams() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[173, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "transform() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.transform"]], "uid (legalbertforsequenceclassification attribute)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.uid"]], "write() (legalbertforsequenceclassification method)": [[173, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.write"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "batchsize (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.batchSize"]], "classes (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.classes"]], "clear() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.clear"]], "clear() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.clear"]], "configprotobytes (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.configProtoBytes"]], "configprotobytes (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.configProtoBytes"]], "copy() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.copy"]], "copy() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.copy"]], "dropout (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.dropout"]], "enableoutputlogs (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.enableOutputLogs"]], "engine (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.engine"]], "evaluationlogextended (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.evaluationLogExtended"]], "explainparam() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.explainParam"]], "explainparam() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.explainParam"]], "explainparams() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.explainParams"]], "explainparams() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.explainParams"]], "extractparammap() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.extractParamMap"]], "extractparammap() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.extractParamMap"]], "fit() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.fit"]], "fitmultiple() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.fitMultiple"]], "getengine() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getEngine"]], "getinputcols() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getInputCols"]], "getinputcols() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getInputCols"]], "getlazyannotator() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getLazyAnnotator"]], "getlazyannotator() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getLazyAnnotator"]], "getordefault() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getOrDefault"]], "getordefault() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getOrDefault"]], "getoutputcol() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getOutputCol"]], "getoutputcol() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getOutputCol"]], "getparam() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getParam"]], "getparam() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getParam"]], "getparamvalue() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getParamValue"]], "getparamvalue() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getParamValue"]], "getstorageref() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getStorageRef"]], "getter_attrs (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getter_attrs"]], "getter_attrs (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getter_attrs"]], "hasdefault() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.hasDefault"]], "hasdefault() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.hasDefault"]], "hasparam() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.hasParam"]], "hasparam() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.hasParam"]], "inputannotatortypes (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputAnnotatorTypes"]], "inputcols (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputCols"]], "inputcols (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputCols"]], "inputcolsvalidation() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputColsValidation"]], "inputcolsvalidation() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputColsValidation"]], "isdefined() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.isDefined"]], "isdefined() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.isDefined"]], "isset() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.isSet"]], "isset() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.isSet"]], "labelcolumn (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.labelColumn"]], "lazyannotator (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.lazyAnnotator"]], "lazyannotator (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.lazyAnnotator"]], "load() (legalclassifierdlapproach class method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.load"]], "load() (legalclassifierdlmodel class method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.load"]], "lr (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.lr"]], "maxepochs (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.maxEpochs"]], "name (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "optionalinputannotatortypes (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.outputAnnotatorType"]], "outputcol (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputCol"]], "outputcol (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.outputCol"]], "outputlogspath (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputLogsPath"]], "pretrained() (legalclassifierdlmodel static method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "randomseed (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.randomSeed"]], "read() (legalclassifierdlapproach class method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.read"]], "read() (legalclassifierdlmodel class method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.read"]], "save() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.save"]], "save() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.save"]], "set() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.set"]], "set() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.set"]], "setbatchsize() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setBatchSize"]], "setconfigprotobytes() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setConfigProtoBytes"]], "setdropout() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setDropout"]], "setenableoutputlogs() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setEnableOutputLogs"]], "setevaluationlogextended() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setEvaluationLogExtended"]], "setinputcols() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setInputCols"]], "setinputcols() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setInputCols"]], "setlabelcolumn() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLabelColumn"]], "setlazyannotator() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLazyAnnotator"]], "setlazyannotator() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setLazyAnnotator"]], "setlr() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLr"]], "setmaxepochs() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setMaxEpochs"]], "setoutputcol() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setOutputCol"]], "setoutputcol() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setOutputCol"]], "setoutputlogspath() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setOutputLogsPath"]], "setparamvalue() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setParamValue"]], "setparamvalue() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setParamValue"]], "setparams() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setParams"]], "setrandomseed() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setRandomSeed"]], "setstorageref() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setStorageRef"]], "settestdataset() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setTestDataset"]], "setvalidationsplit() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setValidationSplit"]], "setverbose() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setVerbose"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[174, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "storageref (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.storageRef"]], "testdataset (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.testDataset"]], "transform() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.transform"]], "uid (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.uid"]], "uid (legalclassifierdlmodel attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.uid"]], "validationsplit (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.validationSplit"]], "verbose (legalclassifierdlapproach attribute)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.verbose"]], "write() (legalclassifierdlapproach method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.write"]], "write() (legalclassifierdlmodel method)": [[174, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.write"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "classificationmodel (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.classificationModelPath"]], "clear() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.clear"]], "clear() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.clear"]], "copy() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.copy"]], "copy() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.copy"]], "explainparam() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.explainParam"]], "explainparam() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.explainParam"]], "explainparams() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.explainParams"]], "explainparams() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.explainParams"]], "extractparammap() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.extractParamMap"]], "fit() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fit"]], "fitintercept (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getInputCols"]], "getinputcols() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getOrDefault"]], "getordefault() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getOutputCol"]], "getparam() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getParam"]], "getparam() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getParam"]], "getparamvalue() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getParamValue"]], "getter_attrs (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getter_attrs"]], "hasdefault() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.hasDefault"]], "hasdefault() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.hasDefault"]], "hasparam() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.hasParam"]], "hasparam() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.hasParam"]], "inputannotatortypes (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputCols"]], "inputcols (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputColsValidation"]], "isdefined() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.isDefined"]], "isdefined() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.isDefined"]], "isset() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.isSet"]], "isset() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.isSet"]], "labelcol (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.labelCol"]], "labels (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.labels"]], "labels (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.labels"]], "lazyannotator (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.lazyAnnotator"]], "load() (legaldocumentmlclassifierapproach class method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.load"]], "load() (legaldocumentmlclassifiermodel class method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.load"]], "maxiter (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.maxIter"]], "maxtokenngram (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.maxTokenNgram"]], "mergechunks (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.mergeChunks"]], "mergechunks (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.mergeChunks"]], "mintokenngram (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.minTokenNgram"]], "name (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "optionalinputannotatortypes (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.outputCol"]], "outputcol (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.outputCol"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "read() (legaldocumentmlclassifierapproach class method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.read"]], "read() (legaldocumentmlclassifiermodel class method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.read"]], "save() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.save"]], "save() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.save"]], "set() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.set"]], "set() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.set"]], "setclassificationmodel() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setInputCols"]], "setinputcols() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setInputCols"]], "setlabelcol() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLabelCol"]], "setlabels() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLabels"]], "setlabels() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setLabels"]], "setlazyannotator() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setMergeChunks"]], "setmintokenngram() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setParamValue"]], "setparams() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setParams"]], "settol() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[175, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "tol (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.tol"]], "transform() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.transform"]], "uid (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.uid"]], "uid (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.uid"]], "vectorizationmodel (legaldocumentmlclassifiermodel attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (legaldocumentmlclassifierapproach attribute)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.vectorizationModelPath"]], "write() (legaldocumentmlclassifierapproach method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.write"]], "write() (legaldocumentmlclassifiermodel method)": [[175, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.write"]], "legalfewshotclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach"]], "legalfewshotclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel"]], "batchsize (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.batchSize"]], "classes (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.classes"]], "clear() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.clear"]], "clear() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.clear"]], "copy() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.copy"]], "copy() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.copy"]], "datasetinfo (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.datasetInfo"]], "datasetinfo (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.datasetInfo"]], "doexceptionhandling (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.doExceptionHandling"]], "dropout (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.dropout"]], "engine (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.engine"]], "epochsn (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.epochsN"]], "explainparam() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.explainParam"]], "explainparam() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.explainParam"]], "explainparams() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.explainParams"]], "explainparams() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.explainParams"]], "extractparammap() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.extractParamMap"]], "extractparammap() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.extractParamMap"]], "featurescaling (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.featureScaling"]], "featurescaling (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.featureScaling"]], "fit() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fit"]], "fitmultiple() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fitMultiple"]], "fiximbalance (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fixImbalance"]], "getengine() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getEngine"]], "getinputcols() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getInputCols"]], "getinputcols() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getInputCols"]], "getlazyannotator() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getOrDefault"]], "getordefault() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getOrDefault"]], "getoutputcol() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getOutputCol"]], "getoutputcol() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getOutputCol"]], "getparam() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getParam"]], "getparam() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getParam"]], "getparamvalue() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getParamValue"]], "getparamvalue() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getParamValue"]], "getter_attrs (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getter_attrs"]], "getter_attrs (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getter_attrs"]], "hasdefault() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.hasDefault"]], "hasdefault() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.hasDefault"]], "hasparam() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.hasParam"]], "hasparam() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.hasParam"]], "inputannotatortypes (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputCols"]], "inputcols (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputColsValidation"]], "isdefined() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.isDefined"]], "isdefined() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.isDefined"]], "isset() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.isSet"]], "isset() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.isSet"]], "labelcolumn (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.labelColumn"]], "lazyannotator (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.lazyAnnotator"]], "learningrate (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.learningRate"]], "load() (legalfewshotclassifierapproach class method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.load"]], "load() (legalfewshotclassifiermodel class method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.load"]], "modelfile (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.modelFile"]], "multiclass (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.multiClass"]], "multiclass (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.multiClass"]], "name (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.name"]], "name (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.name"]], "optionalinputannotatortypes (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.outputAnnotatorType"]], "outputcol (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputCol"]], "outputcol (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.outputCol"]], "outputlogspath (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputLogsPath"]], "pretrained() (legalfewshotclassifiermodel static method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.pretrained"]], "read() (legalfewshotclassifierapproach class method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.read"]], "read() (legalfewshotclassifiermodel class method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.read"]], "save() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.save"]], "save() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.save"]], "set() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.set"]], "set() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.set"]], "setbatchsize() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDropout"]], "setepochsnumber() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setInputCols"]], "setinputcols() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setInputCols"]], "setlabelcol() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLearningRate"]], "setmodelfile() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setModelFile"]], "setmulticlass() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setMultiClass"]], "setmulticlass() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setMultiClass"]], "setoutputcol() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setOutputCol"]], "setoutputcol() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setParamValue"]], "setparamvalue() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setParamValue"]], "setparams() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setParams"]], "setvalidationsplit() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[176, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "transform() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.transform"]], "uid (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.uid"]], "uid (legalfewshotclassifiermodel attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.uid"]], "validationsplit (legalfewshotclassifierapproach attribute)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.validationSplit"]], "write() (legalfewshotclassifierapproach method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.write"]], "write() (legalfewshotclassifiermodel method)": [[176, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.write"]], "sparknlp_jsl.legal.sequence_generation": [[177, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "batchsize (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.batchSize"]], "clear() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.clear"]], "configprotobytes (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.configProtoBytes"]], "copy() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.copy"]], "dosample (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.doSample"]], "explainparam() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.explainParam"]], "explainparams() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.explainParams"]], "extractparammap() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.extractParamMap"]], "getbatchsize() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getBatchSize"]], "getinputcols() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getInputCols"]], "getlazyannotator() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getLazyAnnotator"]], "getordefault() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getOrDefault"]], "getoutputcol() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getOutputCol"]], "getparam() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getParam"]], "getparamvalue() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getParamValue"]], "getter_attrs (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getter_attrs"]], "hasdefault() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.hasDefault"]], "hasparam() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.hasParam"]], "ignoretokenids (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputAnnotatorTypes"]], "inputcols (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputCols"]], "inputcolsvalidation() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputColsValidation"]], "isdefined() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.isDefined"]], "isset() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.isSet"]], "lazyannotator (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.lazyAnnotator"]], "load() (legalencoderdecoder class method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.load"]], "maxnewtokens (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.maxNewTokens"]], "maxtextlength (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.maxTextLength"]], "mlframeworktype (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.mlFrameworkType"]], "name (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "norepeatngramsize (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.outputAnnotatorType"]], "outputcol (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.outputCol"]], "randomseed (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.randomSeed"]], "read() (legalencoderdecoder class method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.read"]], "refinechunksize (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineMaxAttempts"]], "refinesummary (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineSummaryTargetLength"]], "save() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.save"]], "set() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.set"]], "setbatchsize() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setBatchSize"]], "setconfigprotobytes() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setInputCols"]], "setlazyannotator() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setOutputCol"]], "setparamvalue() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setParamValue"]], "setparams() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setParams"]], "setrandomseed() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setStopAtEos"]], "settopk() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[178, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "stopateos (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.stopAtEos"]], "task (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.task"]], "topk (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.topK"]], "transform() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.transform"]], "uid (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.uid"]], "usecache (legalencoderdecoder attribute)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.useCache"]], "write() (legalencoderdecoder method)": [[178, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.write"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "batchsize (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.batchSize"]], "clear() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.clear"]], "configprotobytes (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.configProtoBytes"]], "copy() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.copy"]], "customprompt (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.customPrompt"]], "dosample (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.doSample"]], "explainparam() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.explainParam"]], "explainparams() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.explainParams"]], "extractparammap() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.extractParamMap"]], "getbatchsize() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getBatchSize"]], "getinputcols() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getInputCols"]], "getlazyannotator() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getLazyAnnotator"]], "getordefault() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getOrDefault"]], "getoutputcol() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getOutputCol"]], "getparam() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getParam"]], "getparamvalue() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getParamValue"]], "getquestiontypes() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getQuestionTypes"]], "getter_attrs (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getter_attrs"]], "hasdefault() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.hasDefault"]], "hasparam() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.hasParam"]], "ignoretokenids (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputAnnotatorTypes"]], "inputcols (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputCols"]], "inputcolsvalidation() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputColsValidation"]], "isdefined() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.isDefined"]], "isset() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.isSet"]], "lazyannotator (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.lazyAnnotator"]], "load() (legalquestionanswering class method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.load"]], "loadmedicaltextgenerator() (legalquestionanswering static method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (legalquestionanswering static method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "maxcontextlength (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.maxContextLength"]], "maxnewtokens (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.maxNewTokens"]], "mlframeworktype (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.mlFrameworkType"]], "modeltype (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.modelType"]], "name (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "norepeatngramsize (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.outputAnnotatorType"]], "outputcol (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.outputCol"]], "pretrained() (legalquestionanswering static method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "questiontype (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.questionType"]], "read() (legalquestionanswering class method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.read"]], "save() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.save"]], "set() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.set"]], "setbatchsize() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setBatchSize"]], "setconfigprotobytes() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setCustomPrompt"]], "setdosample() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setInputCols"]], "setlazyannotator() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setOutputCol"]], "setparamvalue() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setParamValue"]], "setparams() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setParams"]], "setquestionanswerterminals() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionType"]], "setrandomseed() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setRandomSeed"]], "settopk() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setTopK"]], "setusecache() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[179, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "topk (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.topK"]], "transform() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.transform"]], "uid (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.uid"]], "usecache (legalquestionanswering attribute)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.useCache"]], "write() (legalquestionanswering method)": [[179, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.write"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "batchsize (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.batchSize"]], "clear() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.clear"]], "configprotobytes (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.configProtoBytes"]], "copy() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.copy"]], "dosample (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.doSample"]], "explainparam() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.explainParam"]], "explainparams() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.explainParams"]], "extractparammap() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.extractParamMap"]], "getbatchsize() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getBatchSize"]], "getinputcols() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getInputCols"]], "getlazyannotator() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getLazyAnnotator"]], "getordefault() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getOrDefault"]], "getoutputcol() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getOutputCol"]], "getparam() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getParam"]], "getparamvalue() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getParamValue"]], "getter_attrs (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getter_attrs"]], "hasdefault() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.hasDefault"]], "hasparam() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.hasParam"]], "ignoretokenids (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.ignoreTokenIds"]], "inputannotatortypes (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputAnnotatorTypes"]], "inputcols (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputCols"]], "inputcolsvalidation() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputColsValidation"]], "isdefined() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.isDefined"]], "isset() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.isSet"]], "lazyannotator (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.lazyAnnotator"]], "load() (legalsummarizer class method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.load"]], "loadsavedmodel() (legalsummarizer static method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "maxnewtokens (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.maxNewTokens"]], "maxtextlength (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.maxTextLength"]], "mlframeworktype (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.mlFrameworkType"]], "name (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "norepeatngramsize (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.outputAnnotatorType"]], "outputcol (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.outputCol"]], "pretrained() (legalsummarizer static method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "randomseed (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.randomSeed"]], "read() (legalsummarizer class method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.read"]], "refinechunksize (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineChunkSize"]], "refinemaxattempts (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineMaxAttempts"]], "refinesummary (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineSummary"]], "refinesummarytargetlength (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineSummaryTargetLength"]], "save() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.save"]], "set() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.set"]], "setbatchsize() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setBatchSize"]], "setconfigprotobytes() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setConfigProtoBytes"]], "setdosample() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setDoSample"]], "setforceinputtypevalidation() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setIgnoreTokenIds"]], "setinputcols() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setInputCols"]], "setlazyannotator() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setMaxNewTokens"]], "setmaxtextlength() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setOutputCol"]], "setparamvalue() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setParamValue"]], "setparams() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setParams"]], "setrandomseed() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRandomSeed"]], "setrefinechunksize() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setStopAtEos"]], "settopk() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setTopK"]], "skiplpinputcolsvalidation (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[180, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "stopateos (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.stopAtEos"]], "task (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.task"]], "topk (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.topK"]], "transform() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.transform"]], "uid (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.uid"]], "usecache (legalsummarizer attribute)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.useCache"]], "write() (legalsummarizer method)": [[180, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.write"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "batchsize (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.batchSize"]], "clear() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.clear"]], "configprotobytes (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.configProtoBytes"]], "copy() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.copy"]], "customprompt (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.customPrompt"]], "dosample (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.doSample"]], "explainparam() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.explainParam"]], "explainparams() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.explainParams"]], "extractparammap() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.extractParamMap"]], "getadditionaltokens() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getAdditionalTokens"]], "getbatchsize() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getBatchSize"]], "getinputcols() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getInputCols"]], "getlazyannotator() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getLazyAnnotator"]], "getordefault() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getOrDefault"]], "getoutputcol() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getOutputCol"]], "getparam() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getParam"]], "getparamvalue() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getParamValue"]], "getter_attrs (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getter_attrs"]], "hasdefault() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.hasDefault"]], "hasparam() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.hasParam"]], "ignoretokenids (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.ignoreTokenIds"]], "inputannotatortypes (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputAnnotatorTypes"]], "inputcols (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputCols"]], "inputcolsvalidation() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputColsValidation"]], "isdefined() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.isDefined"]], "isset() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.isSet"]], "lazyannotator (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.lazyAnnotator"]], "load() (legaltextgenerator class method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.load"]], "loadsavedmodel() (legaltextgenerator static method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "maxcontextlength (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxContextLength"]], "maxnewtokens (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxNewTokens"]], "maxtextlength (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxTextLength"]], "mlframeworktype (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.mlFrameworkType"]], "modeltype (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.modelType"]], "name (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "norepeatngramsize (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.outputAnnotatorType"]], "outputcol (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.outputCol"]], "pretrained() (legaltextgenerator static method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "read() (legaltextgenerator class method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.read"]], "save() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.save"]], "set() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.set"]], "setadditionaltokens() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setAdditionalTokens"]], "setbatchsize() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setBatchSize"]], "setconfigprotobytes() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setCustomPrompt"]], "setdosample() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setDoSample"]], "setforceinputtypevalidation() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setIgnoreTokenIds"]], "setinputcols() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setInputCols"]], "setlazyannotator() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setOutputCol"]], "setparamvalue() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setParamValue"]], "setparams() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setParams"]], "setrandomseed() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setRandomSeed"]], "setstopateos() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setStopAtEos"]], "settopk() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setTopK"]], "setusecache() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[181, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "stopateos (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.stopAtEos"]], "topk (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.topK"]], "transform() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.transform"]], "uid (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.uid"]], "usecache (legaltextgenerator attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.useCache"]], "write() (legaltextgenerator method)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.write"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "clear() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.clear"]], "copy() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.copy"]], "entities1 (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.entities1"]], "entities2 (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.entities2"]], "explainparam() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.explainParam"]], "explainparams() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.explainParams"]], "extractparammap() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.extractParamMap"]], "getinputcols() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getInputCols"]], "getlazyannotator() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getLazyAnnotator"]], "getordefault() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getOrDefault"]], "getoutputcol() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getOutputCol"]], "getparam() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getParam"]], "getparamvalue() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getParamValue"]], "getter_attrs (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getter_attrs"]], "hasdefault() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.hasDefault"]], "hasparam() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.hasParam"]], "inputannotatortypes (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputCols"]], "inputcolsvalidation() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputColsValidation"]], "isdefined() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.isDefined"]], "isset() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.isSet"]], "lazyannotator (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.lazyAnnotator"]], "load() (legalnerquestiongenerator class method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.load"]], "name (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.name"]], "optionalinputannotatortypes (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.outputAnnotatorType"]], "outputcol (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.outputCol"]], "questionmark (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.questionMark"]], "questionpronoun (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.questionPronoun"]], "read() (legalnerquestiongenerator class method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.read"]], "save() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.save"]], "set() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.set"]], "setentities1() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setEntities1"]], "setentities2() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setInputCols"]], "setlazyannotator() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setOutputCol"]], "setparamvalue() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setParamValue"]], "setparams() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setParams"]], "setquestionmark() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[182, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "strategytype (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.strategyType"]], "transform() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.transform"]], "uid (legalnerquestiongenerator attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.uid"]], "write() (legalnerquestiongenerator method)": [[182, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.write"]], "sparknlp_jsl.legal.token_classification": [[183, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[184, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "casesensitive (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.caseSensitive"]], "clear() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.clear"]], "configprotobytes (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.configProtoBytes"]], "copy() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.copy"]], "explainparam() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.explainParam"]], "explainparams() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.explainParams"]], "extractparammap() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.extractParamMap"]], "getcasesensitive() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getCaseSensitive"]], "getclasses() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getClasses"]], "getinputcols() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getInputCols"]], "getlazyannotator() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getLazyAnnotator"]], "getordefault() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getOrDefault"]], "getoutputcol() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getOutputCol"]], "getparam() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getParam"]], "getparamvalue() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getParamValue"]], "getter_attrs (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getter_attrs"]], "hasdefault() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.hasDefault"]], "hasparam() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.hasParam"]], "inputannotatortypes (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputAnnotatorTypes"]], "inputcols (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputCols"]], "inputcolsvalidation() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputColsValidation"]], "isdefined() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.isDefined"]], "isset() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.isSet"]], "lazyannotator (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.lazyAnnotator"]], "load() (legalbertfortokenclassification class method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.load"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "maxsentencelength (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.maxSentenceLength"]], "name (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "optionalinputannotatortypes (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.outputAnnotatorType"]], "outputcol (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.outputCol"]], "pretrained() (legalbertfortokenclassification static method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "read() (legalbertfortokenclassification class method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.read"]], "save() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.save"]], "set() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.set"]], "setcasesensitive() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setCaseSensitive"]], "setconfigprotobytes() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setForceInputTypeValidation"]], "setinputcols() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setInputCols"]], "setlazyannotator() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setLazyAnnotator"]], "setmaxsentencelength() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setMaxSentenceLength"]], "setoutputcol() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setOutputCol"]], "setparamvalue() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setParamValue"]], "setparams() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setParams"]], "skiplpinputcolsvalidation (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.skipLPInputColsValidation"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[185, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "transform() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.transform"]], "uid (legalbertfortokenclassification attribute)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.uid"]], "write() (legalbertfortokenclassification method)": [[185, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.write"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "batchsize (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.batchSize"]], "classes (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.classes"]], "clear() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.clear"]], "clear() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.clear"]], "configprotobytes (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.configProtoBytes"]], "configprotobytes (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.configProtoBytes"]], "copy() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.copy"]], "copy() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.copy"]], "datasetinfo (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.datasetInfo"]], "datasetinfo (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.datasetInfo"]], "doexceptionhandling (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.doExceptionHandling"]], "dropout (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.dropout"]], "earlystoppingcriterion (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.enableOutputLogs"]], "engine (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.engine"]], "entities (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.entities"]], "evaluationlogextended (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.evaluationLogExtended"]], "explainparam() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.explainParam"]], "explainparam() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.explainParam"]], "explainparams() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.explainParams"]], "explainparams() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.explainParams"]], "extractparammap() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.extractParamMap"]], "extractparammap() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.extractParamMap"]], "fit() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.fit"]], "fitmultiple() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.fitMultiple"]], "getclasses() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getClasses"]], "getengine() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getEngine"]], "getinputcols() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getInputCols"]], "getinputcols() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getInputCols"]], "getlabelcolumn() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getLabelColumn"]], "getlazyannotator() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getLazyAnnotator"]], "getlazyannotator() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getLazyAnnotator"]], "getordefault() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getOrDefault"]], "getordefault() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getOrDefault"]], "getoutputcol() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getOutputCol"]], "getoutputcol() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getOutputCol"]], "getparam() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getParam"]], "getparam() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getParam"]], "getparamvalue() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getParamValue"]], "getparamvalue() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getParamValue"]], "getstorageref() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getStorageRef"]], "gettrainingclassdistribution() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getTrainingClassDistribution"]], "getter_attrs (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getter_attrs"]], "getter_attrs (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getter_attrs"]], "graphfile (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.graphFile"]], "graphfolder (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.graphFolder"]], "hasdefault() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.hasDefault"]], "hasdefault() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.hasDefault"]], "hasparam() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.hasParam"]], "hasparam() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.hasParam"]], "includeallconfidencescores (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.includeAllConfidenceScores"]], "includeconfidence (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.includeConfidence"]], "includeconfidence (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.includeConfidence"]], "inferencebatchsize (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inferenceBatchSize"]], "inputannotatortypes (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputAnnotatorTypes"]], "inputcols (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputCols"]], "inputcols (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputCols"]], "inputcolsvalidation() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputColsValidation"]], "inputcolsvalidation() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputColsValidation"]], "isdefined() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.isDefined"]], "isdefined() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.isDefined"]], "isset() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.isSet"]], "isset() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.isSet"]], "labelcasing (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.labelCasing"]], "labelcolumn (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.labelColumn"]], "lazyannotator (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.lazyAnnotator"]], "lazyannotator (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.lazyAnnotator"]], "load() (legalnerapproach class method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.load"]], "load() (legalnermodel class method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.load"]], "loadsavedmodel() (legalnermodel static method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "logprefix (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.logPrefix"]], "lr (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.lr"]], "maxepochs (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.maxEpochs"]], "minepochs (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.minEpochs"]], "name (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "optionalinputannotatortypes (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputAnnotatorType"]], "outputannotatortype (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.outputAnnotatorType"]], "outputcol (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputCol"]], "outputcol (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.outputCol"]], "outputlogspath (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputLogsPath"]], "overrideexistingtags (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.overrideExistingTags"]], "po (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.po"]], "pretrained() (legalnermodel static method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "pretrainedmodelpath (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.pretrainedModelPath"]], "randomseed (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.randomSeed"]], "randomvalidationsplitperepoch (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.randomValidationSplitPerEpoch"]], "read() (legalnerapproach class method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.read"]], "read() (legalnermodel class method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.read"]], "save() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.save"]], "save() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.save"]], "sentencetokenindex (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.sentenceTokenIndex"]], "set() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.set"]], "set() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.set"]], "setbatchsize() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setBatchSize"]], "setconfigprotobytes() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setConfigProtoBytes"]], "setdatasetinfo() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDatasetInfo"]], "setdatasetinfo() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setDatasetInfo"]], "setdoexceptionhandling() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDoExceptionHandling"]], "setdropout() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDropout"]], "setearlystoppingcriterion() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEnableOutputLogs"]], "setentities() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEntities"]], "setevaluationlogextended() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setForceInputTypeValidation"]], "setgraphfile() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setGraphFile"]], "setgraphfolder() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setInferenceBatchSize"]], "setinputcols() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setInputCols"]], "setinputcols() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setInputCols"]], "setlabelcasing() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setLabelCasing"]], "setlabelcolumn() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLabelColumn"]], "setlazyannotator() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLazyAnnotator"]], "setlazyannotator() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setLazyAnnotator"]], "setlogprefix() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLogPrefix"]], "setlr() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLr"]], "setmaxepochs() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setMaxEpochs"]], "setminepochs() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setMinEpochs"]], "setoutputcol() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOutputCol"]], "setoutputcol() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setOutputCol"]], "setoutputlogspath() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOverrideExistingTags"]], "setparamvalue() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setParamValue"]], "setparamvalue() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setParamValue"]], "setparams() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setParams"]], "setpo() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setPo"]], "setpretrainedmodelpath() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setPretrainedModelPath"]], "setrandomseed() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setSentenceTokenIndex"]], "setstorageref() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setStorageRef"]], "settagsmapping() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setTagsMapping"]], "settestdataset() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setTestDataset"]], "setusebestmodel() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setUseBestModel"]], "setusecontrib() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setUseContrib"]], "setvalidationsplit() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setValidationSplit"]], "setverbose() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setVerbose"]], "skiplpinputcolsvalidation (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[186, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "storageref (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.storageRef"]], "testdataset (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.testDataset"]], "trainingclassdistribution (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.trainingClassDistribution"]], "transform() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.transform"]], "uc (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.uc"]], "uid (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.uid"]], "uid (legalnermodel attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.uid"]], "usebestmodel (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.useBestModel"]], "usecontrib (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.useContrib"]], "validationsplit (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.validationSplit"]], "verbose (legalnerapproach attribute)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.verbose"]], "write() (legalnerapproach method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.write"]], "write() (legalnermodel method)": [[186, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.write"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[187, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[187, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.llm": [[188, "module-sparknlp_jsl.llm"]], "llmloader (class in sparknlp_jsl.llm.llm_loader)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader"]], "classname (llmloader attribute)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.classname"]], "clear() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.clear"]], "copy() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.copy"]], "encodemodel() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.encodeModel"]], "explainparam() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.explainParam"]], "explainparams() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.explainParams"]], "extractparammap() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.extractParamMap"]], "generate() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.generate"]], "getmetadata() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.getMetadata"]], "getmetadataentry() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.getMetadataEntry"]], "getordefault() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.getOrDefault"]], "getparam() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.getParam"]], "hasdefault() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.hasDefault"]], "hasparam() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.hasParam"]], "isdefined() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.isDefined"]], "isset() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.isSet"]], "load() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.load"]], "pretrained() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.pretrained"]], "set() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.set"]], "setcacheprompt() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setCachePrompt"]], "setdynamictemperatureexponent() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setDynamicTemperatureRange"]], "setfrequencypenalty() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setFrequencyPenalty"]], "setgrammar() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setGrammar"]], "setignoreeos() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setIgnoreEos"]], "setinputprefix() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setInputPrefix"]], "setinputsuffix() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setInputSuffix"]], "setminkeep() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMinKeep"]], "setminp() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMinP"]], "setmirostateta() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMiroStatEta"]], "setmirostattau() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMiroStatTau"]], "setnkeep() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNKeep"]], "setnpredict() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNPredict"]], "setnprobs() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNProbs"]], "setpenalizenl() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPenalizeNl"]], "setpenaltyprompt() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPenaltyPrompt"]], "setpresencepenalty() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPresencePenalty"]], "setrepeatlastn() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setRepeatLastN"]], "setrepeatpenalty() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setRepeatPenalty"]], "setseed() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setSeed"]], "setstopstrings() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setStopStrings"]], "settemperature() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTemperature"]], "settfsz() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTfsZ"]], "settopk() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTopK"]], "settopp() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTopP"]], "settypicalp() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTypicalP"]], "setusechattemplate() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.setUseChatTemplate"]], "sparknlp_jsl.llm.llm_loader": [[189, "module-sparknlp_jsl.llm.llm_loader"]], "transform() (llmloader method)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.transform"]], "uid (llmloader attribute)": [[189, "sparknlp_jsl.llm.llm_loader.LLMLoader.uid"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[190, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[190, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[190, "module-sparknlp_jsl.modelTracer"]], "pipelineoutputparser (class in sparknlp_jsl.pipeline_output_parser)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser"]], "check_column_mapping_dict() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.check_column_mapping_dict"]], "check_unique_id() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.check_unique_id"]], "get_assertions() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_assertions"]], "get_classification() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_classification"]], "get_deidentification() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_deidentification"]], "get_documents() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_documents"]], "get_entities() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_entities"]], "get_relations() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_relations"]], "get_resolutions() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_resolutions"]], "get_summary() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_summary"]], "get_unique_id() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_unique_id"]], "run() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.run"]], "sparknlp_jsl.pipeline_output_parser": [[191, "module-sparknlp_jsl.pipeline_output_parser"]], "update_columns_maps() (pipelineoutputparser method)": [[191, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.update_columns_maps"]], "pipelinestage (class in sparknlp_jsl.pipeline_tracer)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage"]], "pipelinetracer (class in sparknlp_jsl.pipeline_tracer)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer"]], "stagefield (class in sparknlp_jsl.pipeline_tracer)": [[192, "sparknlp_jsl.pipeline_tracer.StageField"]], "createparserdictionary() (pipelinetracer method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.createParserDictionary"]], "fieldtype (stagefield attribute)": [[192, "sparknlp_jsl.pipeline_tracer.StageField.fieldType"]], "getparserdictdirectly() (pipelinetracer static method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getParserDictDirectly"]], "getpipelinestages() (pipelinetracer method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPipelineStages"]], "getpossibleassertions() (pipelinetracer method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleAssertions"]], "getpossibleentities() (pipelinetracer method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleEntities"]], "getpossiblerelations() (pipelinetracer method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleRelations"]], "index (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.index"]], "inputannotatortype (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.inputAnnotatorType"]], "inputcol (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.inputCol"]], "listavailablemodels() (pipelinetracer static method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.listAvailableModels"]], "name (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.name"]], "name (stagefield attribute)": [[192, "sparknlp_jsl.pipeline_tracer.StageField.name"]], "outputannotatortype (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.outputAnnotatorType"]], "outputcol (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.outputCol"]], "printpipelineschema() (pipelinetracer method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.printPipelineSchema"]], "showavailablemodels() (pipelinetracer static method)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineTracer.showAvailableModels"]], "sparknlp_jsl.pipeline_tracer": [[192, "module-sparknlp_jsl.pipeline_tracer"]], "stage (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.stage"]], "uid (pipelinestage attribute)": [[192, "sparknlp_jsl.pipeline_tracer.PipelineStage.uid"]], "value (stagefield attribute)": [[192, "sparknlp_jsl.pipeline_tracer.StageField.value"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "downloadmodeldirectly() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModelDirectly"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[193, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[193, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[193, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[194, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "columns (structureddeidentification attribute)": [[194, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.columns"]], "instance (structureddeidentification attribute)": [[194, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.instance"]], "obfuscatecolumns() (structureddeidentification method)": [[194, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "obfuscatereffile (structureddeidentification attribute)": [[194, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateRefFile"]], "spark (structureddeidentification attribute)": [[194, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.spark"]], "sparknlp_jsl.structured_deidentification": [[194, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[195, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "columns (texttodocumentscolumns attribute)": [[195, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.columns"]], "instance (texttodocumentscolumns attribute)": [[195, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.instance"]], "spark (texttodocumentscolumns attribute)": [[195, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.spark"]], "sparknlp_jsl.text_to_documents_columns": [[195, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[195, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "todocumentscolumnswithid() (texttodocumentscolumns method)": [[195, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumnsWithId"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "annotation_schema (redatasethelper attribute)": [[196, "sparknlp_jsl.training.REDatasetHelper.annotation_schema"]], "apply() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.apply"]], "apply() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.apply"]], "apply() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.apply"]], "apply() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.apply"]], "augmentcsv() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[196, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "data (redatasethelper attribute)": [[196, "sparknlp_jsl.training.REDatasetHelper.data"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "getdataframe() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.getDataFrame"]], "getdataframe() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.getDataFrame"]], "getdataframe() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.getDataFrame"]], "getdataframe() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.getDataFrame"]], "java_obj (annotationtooljsonreader attribute)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.java_obj"]], "java_obj (cantemistreader attribute)": [[196, "sparknlp_jsl.training.CantemistReader.java_obj"]], "java_obj (codiespreader attribute)": [[196, "sparknlp_jsl.training.CodiEspReader.java_obj"]], "java_obj (synonymaugmentationumls attribute)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.java_obj"]], "new_java_array() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array"]], "new_java_array() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.new_java_array"]], "new_java_array() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.new_java_array"]], "new_java_array() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array"]], "new_java_array_integer() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array_integer"]], "new_java_array_integer() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.new_java_array_integer"]], "new_java_array_integer() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.new_java_array_integer"]], "new_java_array_integer() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array_integer"]], "new_java_array_string() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array_string"]], "new_java_array_string() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.new_java_array_string"]], "new_java_array_string() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.new_java_array_string"]], "new_java_array_string() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array_string"]], "new_java_obj() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_obj"]], "new_java_obj() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.new_java_obj"]], "new_java_obj() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.new_java_obj"]], "new_java_obj() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_obj"]], "readdataset() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sc (annotationtooljsonreader attribute)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.sc"]], "sc (cantemistreader attribute)": [[196, "sparknlp_jsl.training.CantemistReader.sc"]], "sc (codiespreader attribute)": [[196, "sparknlp_jsl.training.CodiEspReader.sc"]], "sc (synonymaugmentationumls attribute)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.sc"]], "spark_version() (annotationtooljsonreader method)": [[196, "sparknlp_jsl.training.AnnotationToolJsonReader.spark_version"]], "spark_version() (cantemistreader method)": [[196, "sparknlp_jsl.training.CantemistReader.spark_version"]], "spark_version() (codiespreader method)": [[196, "sparknlp_jsl.training.CodiEspReader.spark_version"]], "spark_version() (synonymaugmentationumls method)": [[196, "sparknlp_jsl.training.SynonymAugmentationUMLS.spark_version"]], "sparknlp_jsl.training": [[196, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[196, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[197, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[197, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[197, "module-sparknlp_jsl.training_log_parser"]], "build_python_code() (in module sparknlp_jsl.transpiler.builder)": [[198, "sparknlp_jsl.transpiler.builder.build_python_code"]], "build_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[198, "sparknlp_jsl.transpiler.builder.build_scala_code"]], "compile_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[198, "sparknlp_jsl.transpiler.builder.compile_scala_code"]], "prepare_python_code() (in module sparknlp_jsl.transpiler.builder)": [[198, "sparknlp_jsl.transpiler.builder.prepare_python_code"]], "sparknlp_jsl.transpiler.builder": [[198, "module-sparknlp_jsl.transpiler.builder"]], "classnames (class in sparknlp_jsl.transpiler.class_names)": [[199, "sparknlp_jsl.transpiler.class_names.ClassNames"]], "classes (classnames attribute)": [[199, "sparknlp_jsl.transpiler.class_names.ClassNames.classes"]], "internal_classes (classnames attribute)": [[199, "sparknlp_jsl.transpiler.class_names.ClassNames.internal_classes"]], "opensource_classes (classnames attribute)": [[199, "sparknlp_jsl.transpiler.class_names.ClassNames.openSource_classes"]], "sparknlp_jsl.transpiler.class_names": [[199, "module-sparknlp_jsl.transpiler.class_names"]], "run_converter() (in module sparknlp_jsl.transpiler.converter)": [[200, "sparknlp_jsl.transpiler.converter.run_converter"]], "sparknlp_jsl.transpiler.converter": [[200, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalsources": [[201, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[202, "module-sparknlp_jsl.transpiler"]], "bucket() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.bucket"]], "convert_nlu_component_to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.convert_nlu_component_to_python"]], "is_component_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.is_component_finance"]], "is_component_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.is_component_legal"]], "is_component_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.is_component_medical"]], "is_component_ocr() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.is_component_ocr"]], "is_component_open_source() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.is_component_open_source"]], "is_component_pretrained() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.is_component_pretrained"]], "medical_annotators_set (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.medical_annotators_set"]], "nlu_component_to_spark_nlp_code() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.nlu_component_to_spark_nlp_code"]], "open_source_annotator_set_final (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.open_source_annotator_set_final"]], "sparknlp_jsl.transpiler.nlu_2_python": [[203, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "starts_with_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_finance"]], "starts_with_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_legal"]], "starts_with_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_medical"]], "to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[203, "sparknlp_jsl.transpiler.nlu_2_python.to_python"]], "anonymize_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.anonymize_script"]], "break_line_after_backslash() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.break_line_after_backslash"]], "convert() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.convert"]], "convert_class_name() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.convert_class_name"]], "convert_python_dict_to_scala_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.convert_python_dict_to_scala_script"]], "find_key_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.find_key_values"]], "get_data_dict() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.get_data_dict"]], "get_import_section() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.get_import_section"]], "prepare_scala_code() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.prepare_scala_code"]], "remove_blank_lines() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.remove_blank_lines"]], "restore_sensitive_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.restore_sensitive_values"]], "run_transpiler() (in module sparknlp_jsl.transpiler.python_2_scala)": [[204, "sparknlp_jsl.transpiler.python_2_scala.run_transpiler"]], "sparknlp_jsl.transpiler.python_2_scala": [[204, "module-sparknlp_jsl.transpiler.python_2_scala"]], "get_python_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[205, "sparknlp_jsl.transpiler.source_loader.get_python_code_from_md"]], "get_scala_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[205, "sparknlp_jsl.transpiler.source_loader.get_scala_code_from_md"]], "load_file_as_dict() (in module sparknlp_jsl.transpiler.source_loader)": [[205, "sparknlp_jsl.transpiler.source_loader.load_file_as_dict"]], "process_python_code() (in module sparknlp_jsl.transpiler.source_loader)": [[205, "sparknlp_jsl.transpiler.source_loader.process_python_code"]], "sparknlp_jsl.transpiler.source_loader": [[205, "module-sparknlp_jsl.transpiler.source_loader"]], "update_md_file() (in module sparknlp_jsl.transpiler.source_loader)": [[205, "sparknlp_jsl.transpiler.source_loader.update_md_file"]], "update_md_file_for_working_scala_code() (in module sparknlp_jsl.transpiler.source_loader)": [[205, "sparknlp_jsl.transpiler.source_loader.update_md_file_for_working_scala_code"]], "apply_method_to_all_md_files() (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.apply_method_to_all_md_files"]], "generated_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.generated_code_failed"]], "generated_code_works (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.generated_code_works"]], "python_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.python_code_failed"]], "results_list (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.results_list"]], "scala_code_works (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.scala_code_works"]], "scala_generated (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.scala_generated"]], "sparknlp_jsl.transpiler.uploader": [[206, "module-sparknlp_jsl.transpiler.uploader"]], "upload_scala_code_in_md_file() (in module sparknlp_jsl.transpiler.uploader)": [[206, "sparknlp_jsl.transpiler.uploader.upload_scala_code_in_md_file"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[207, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[207, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[207, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[207, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[208, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[208, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[209, "module-sparknlp_jsl.utils.alab_utils"]], "strip_json_entities() (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.strip_json_entities"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[209, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[210, "module-sparknlp_jsl.utils.conll_parse"]], "dict_to_annotation_converter() (in module sparknlp_jsl.utils.deidentification_utils)": [[211, "sparknlp_jsl.utils.deidentification_utils.dict_to_annotation_converter"]], "sparknlp_jsl.utils.deidentification_utils": [[211, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[211, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[212, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[212, "module-sparknlp_jsl.utils.imports"]], "parse_str_to_dict() (in module sparknlp_jsl.utils.java_helper)": [[214, "sparknlp_jsl.utils.java_helper.parse_str_to_dict"]], "sparknlp_jsl.utils.java_helper": [[214, "module-sparknlp_jsl.utils.java_helper"]], "assertion (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "vector_similarity_rankings (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.VECTOR_SIMILARITY_RANKINGS"]], "sparknlp_jsl.utils.licensed_annotator_type": [[215, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[216, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[217, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[218, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[218, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[218, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "draw_boxes_on_image_handwritten_region() (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.draw_boxes_on_image_handwritten_region"]], "get_handwritten_regions() (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.get_handwritten_regions"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "pretrained_model (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.pretrained_model"]], "sparknlp_jsl.utils.ocr_utils": [[219, "module-sparknlp_jsl.utils.ocr_utils"]], "hcc_from_icd() (riskadjustmentutil static method)": [[220, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_from_ICD"]], "hcc_labels() (riskadjustmentutil static method)": [[220, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_labels"]], "riskadjustmentutil (class in sparknlp_jsl.utils.risk_adjustment_utils)": [[220, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil"]], "diff_between_hccs() (riskadjustmentutil static method)": [[220, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.diff_between_HCCs"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[220, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "runtranspiledcode (class in sparknlp_jsl.utils.run_transpiled_code)": [[221, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode"]], "build_scala_code() (runtranspiledcode static method)": [[221, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.build_scala_code"]], "compile_scala_code() (runtranspiledcode static method)": [[221, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.compile_scala_code"]], "sparknlp_jsl.utils.run_transpiled_code": [[221, "module-sparknlp_jsl.utils.run_transpiled_code"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[222, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[222, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]], "convert_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[223, "sparknlp_jsl.utils.visualner_annotations_parser.convert_to_CONLL"]], "get_tokens() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[223, "sparknlp_jsl.utils.visualner_annotations_parser.get_tokens"]], "pdfs_to_visualner_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[223, "sparknlp_jsl.utils.visualner_annotations_parser.pdfs_to_visualner_to_conll"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[223, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "visualner_annotations_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[223, "sparknlp_jsl.utils.visualner_annotations_parser.visualner_annotations_to_conll"]], "write_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[223, "sparknlp_jsl.utils.visualner_annotations_parser.write_CONLL"]]}})