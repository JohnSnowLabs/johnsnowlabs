Search.setIndex({"docnames": ["autosummary/sparknlp_jsl", "getting_started/index", "index", "reference/autosummary/sparknlp_jsl", "reference/autosummary/sparknlp_jsl.annotator", "reference/autosummary/sparknlp_jsl.finance", "reference/autosummary/sparknlp_jsl.legal", "reference/autosummary/sparknlp_jsl.utils", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_converter/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/bert_for_assertion_classification/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/contextual_assertion/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/fewshot_assertion_sentence_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/mapper2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_assertion_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/large_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_entity_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_entity_ruler/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/base_deidentification_params/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/light_deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_ner/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index", "reference/autosummary/sparknlp_jsl/annotator/er/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/fhir/fhir_deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/fhir/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/flattener/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_params/index", "reference/autosummary/sparknlp_jsl/annotator/medical_llm/index", "reference/autosummary/sparknlp_jsl/annotator/medical_llm/medical_llm/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/re_chunk_merger/index", "reference/autosummary/sparknlp_jsl/annotator/metadata_annotation_converter/index", "reference/autosummary/sparknlp_jsl/annotator/multi_chunk2_doc/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/pretrained_zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/params/index", "reference/autosummary/sparknlp_jsl/annotator/params/reset_sentence_indices_param/index", "reference/autosummary/sparknlp_jsl/annotator/parser/index", "reference/autosummary/sparknlp_jsl/annotator/parser/structured_json_converter/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/rag/context_split_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/rag/index", "reference/autosummary/sparknlp_jsl/annotator/rag/vectordb_post_processor/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/regex/index", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/index", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/llm/index", "reference/autosummary/sparknlp_jsl/llm/llm_loader/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/pipeline_output_parser/index", "reference/autosummary/sparknlp_jsl/pipeline_tracer/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/transpiler/builder/index", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index", "reference/autosummary/sparknlp_jsl/transpiler/converter/index", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index", "reference/autosummary/sparknlp_jsl/transpiler/index", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/database_deidentification/index", "reference/autosummary/sparknlp_jsl/utils/date_shift_filler/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/exception_handling_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/java_helper/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/autosummary/sparknlp_jsl/utils/visualner_annotations_parser/index", "reference/index"], "filenames": ["autosummary/sparknlp_jsl.rst", "getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl.rst", "reference/autosummary/sparknlp_jsl.annotator.rst", "reference/autosummary/sparknlp_jsl.finance.rst", "reference/autosummary/sparknlp_jsl.legal.rst", "reference/autosummary/sparknlp_jsl.utils.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/bert_for_assertion_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/contextual_assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/fewshot_assertion_sentence_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/mapper2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_assertion_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/large_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_entity_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_entity_ruler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/base_deidentification_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deidentication_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/light_deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/document_filterer_by_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/entity_ruler_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/er/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/fhir/fhir_deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/fhir/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/flattener/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/handle_exception_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/matcher/text_matcher_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/medical_llm/index.rst", "reference/autosummary/sparknlp_jsl/annotator/medical_llm/medical_llm/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/re_chunk_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/metadata_annotation_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/multi_chunk2_doc/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/pretrained_zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/params/reset_sentence_indices_param/index.rst", "reference/autosummary/sparknlp_jsl/annotator/parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/parser/structured_json_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/context_split_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/index.rst", "reference/autosummary/sparknlp_jsl/annotator/rag/vectordb_post_processor/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/index.rst", "reference/autosummary/sparknlp_jsl/annotator/regex/regex_matcher/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/text2sql/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/splitter/internal_document_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/white_black_list_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_few_shot_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/llm/index.rst", "reference/autosummary/sparknlp_jsl/llm/llm_loader/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/pipeline_output_parser/index.rst", "reference/autosummary/sparknlp_jsl/pipeline_tracer/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/builder/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/class_names/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/converter/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/externalSources/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/nlu_2_python/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/python_2_scala/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/source_loader/index.rst", "reference/autosummary/sparknlp_jsl/transpiler/uploader/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/database_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/utils/date_shift_filler/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/exception_handling_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/java_helper/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/risk_adjustment_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/run_transpiled_code/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/visualner_annotations_parser/index.rst", "reference/index.rst"], "titles": ["sparknlp_jsl", "Getting Started", "Spark NLP Documentation", "sparknlp_jsl", "sparknlp_jsl.annotator", "sparknlp_jsl.finance", "sparknlp_jsl.legal", "sparknlp_jsl.utils", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.bert_for_assertion_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.contextual_assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.mapper2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_assertion_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.large_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_entity_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_entity_ruler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.base_deidentification_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deidentication_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.light_deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.document_filterer_by_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.extractive_summarization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er.entity_ruler_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.er</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.fhir.fhir_deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.fhir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.flattener</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.handle_exception_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher.text_matcher_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.matcher.text_matcher_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.medical_llm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.medical_llm.medical_llm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.re_chunk_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.metadata_annotation_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.multi_chunk2_doc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.params.reset_sentence_indices_param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.parser.structured_json_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag.context_split_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.rag.vectordb_post_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.regex.regex_matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.text2sql</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.splitter.internal_document_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.white_black_list_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.llm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.llm.llm_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pipeline_output_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pipeline_tracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.class_names</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.externalSources</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.nlu_2_python</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.python_2_scala</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.source_loader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.transpiler.uploader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.database_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.date_shift_filler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.exception_handling_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.java_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.risk_adjustment_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.run_transpiled_code</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.visualner_annotations_parser</span></code>", "API Reference"], "terms": {"6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "9": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "function": [0, 3, 8, 9, 11, 25, 27, 34, 35, 67, 69, 89, 116, 127, 128, 138, 140, 146, 147, 149, 174, 180, 181, 183, 207, 208, 209, 213, 229, 240, 244], "get_credenti": [0, 3, 172], "spark": [0, 3, 8, 9, 10, 11, 13, 15, 16, 19, 21, 22, 24, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 99, 102, 108, 109, 110, 111, 113, 116, 117, 118, 121, 122, 123, 126, 130, 136, 138, 139, 140, 142, 143, 152, 153, 155, 156, 158, 161, 162, 163, 167, 168, 170, 172, 174, 176, 177, 186, 187, 190, 191, 193, 196, 197, 198, 202, 203, 204, 206, 208, 210, 211, 212, 213, 215, 216, 217, 221, 223, 226, 228, 229, 230, 231, 238, 243, 244], "get": [0, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209, 226], "john": [0, 3, 8, 45, 46, 47, 48, 50, 51, 53, 64, 67, 103, 106, 126, 142, 172, 176, 211, 230], "snow": [0, 3, 8, 64, 172, 230], "lab": [0, 1, 3, 8, 172, 213, 226, 230], "credenti": [0, 3, 8, 172], "paramet": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 48, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 136, 137, 140, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 173, 174, 177, 180, 181, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 237, 238, 240, 241, 242, 243], "sparksess": [0, 1, 3, 8, 15, 22, 32, 37, 38, 39, 40, 60, 61, 64, 79, 87, 91, 92, 102, 109, 111, 121, 122, 123, 136, 152, 153, 155, 161, 162, 163, 167, 168, 170, 172, 186, 187, 190, 196, 197, 198, 202, 203, 204, 211, 212, 215, 217, 226, 228, 229, 230, 238, 243], "return": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 210, 211, 213, 214, 215, 217, 221, 222, 223, 226, 228, 229, 230, 232, 234, 237, 238, 240, 241, 242, 243], "secretkei": [0, 3, 172], "keyid": [0, 3, 172], "token": [0, 3, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 56, 57, 58, 60, 61, 64, 70, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 92, 100, 102, 108, 109, 110, 111, 116, 118, 120, 121, 122, 123, 126, 127, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 195, 196, 197, 198, 199, 202, 203, 204, 206, 213, 216, 226, 243], "type": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 48, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 210, 211, 213, 214, 215, 217, 221, 222, 223, 226, 228, 229, 230, 232, 237, 238, 240, 242, 243], "tupl": [0, 3, 8, 11, 12, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 60, 64, 71, 76, 80, 87, 89, 90, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 172, 174, 176, 180, 181, 183, 191, 192, 193, 203, 221, 238, 242], "library_set": [0, 3, 172], "librari": [0, 1, 2, 3, 8, 15, 38, 39, 40, 56, 136, 143, 155, 167, 172, 177, 190, 202, 215, 221], "set": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 213, 214, 221, 226, 228, 230, 231, 238, 240], "str": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 234, 237, 238, 240, 241, 242, 243], "pub_vers": [0, 3, 172], "public": [0, 3, 172, 210, 239], "version": [0, 1, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 210, 224, 240], "nlp": [0, 3, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 121, 122, 123, 126, 130, 143, 155, 156, 158, 161, 162, 163, 167, 168, 172, 177, 190, 191, 193, 196, 197, 198, 202, 203, 208, 210, 213, 216, 226, 230, 231, 238, 244], "start": [0, 3, 11, 12, 13, 56, 79, 80, 87, 108, 116, 140, 143, 149, 168, 172, 174, 177, 183, 203, 213, 224, 226, 230, 242], "secret": [0, 1, 3, 8, 172], "gpu": [0, 3, 79, 172], "bool": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 210, 211, 213, 214, 215, 217, 221, 226, 228, 230, 231, 232, 234, 237, 238, 242], "fals": [0, 3, 8, 9, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 67, 70, 71, 76, 77, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 116, 117, 118, 122, 123, 124, 126, 127, 130, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 198, 199, 202, 203, 204, 206, 208, 211, 213, 226, 230, 232, 234, 238, 242], "apple_silicon": [0, 3, 172], "aarch64": [0, 3, 172], "param": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 216, 226, 234, 238], "dict": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 211, 217, 221, 222, 223, 226, 228, 230, 234, 240, 242, 243], "none": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 138, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 210, 211, 213, 215, 217, 222, 223, 224, 225, 226, 228, 230, 231, 232, 238, 242], "fhir_deid": [0, 3, 172], "default": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 136, 137, 140, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209, 210, 211, 213, 217, 224, 226, 229, 230, 231, 234, 237, 238, 242, 243], "licens": [0, 1, 3, 45, 67, 89, 142, 172, 176, 211], "The": [0, 1, 3, 9, 10, 11, 12, 13, 14, 15, 16, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 53, 55, 57, 58, 60, 61, 64, 66, 67, 69, 70, 71, 76, 79, 80, 83, 84, 87, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 116, 118, 120, 121, 122, 123, 126, 127, 128, 130, 134, 137, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 217, 221, 222, 223, 224, 228, 229, 230, 234, 240, 242], "would": [0, 3, 117, 126, 156, 172, 191], "result": [0, 3, 8, 9, 11, 12, 15, 16, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 66, 69, 70, 71, 76, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 99, 102, 104, 108, 109, 110, 111, 113, 116, 117, 122, 123, 126, 130, 138, 140, 142, 143, 146, 147, 152, 153, 155, 156, 157, 158, 161, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 186, 187, 190, 191, 192, 193, 196, 198, 199, 202, 203, 204, 208, 214, 215, 217, 223, 230, 239], "equival": [0, 3, 45, 46, 47, 50, 142, 172, 176], "builder": [0, 1, 3, 127, 172, 219], "appnam": [0, 1, 3, 172], "master": [0, 1, 3, 172], "local": [0, 1, 3, 11, 15, 22, 32, 37, 38, 39, 40, 46, 58, 60, 61, 71, 79, 87, 91, 92, 102, 108, 111, 116, 121, 122, 123, 140, 142, 149, 153, 155, 156, 161, 162, 163, 167, 168, 170, 172, 174, 176, 183, 187, 190, 191, 196, 197, 198, 202, 203, 204, 206], "config": [0, 1, 3, 43, 172, 228], "driver": [0, 1, 3, 172, 211], "memori": [0, 1, 3, 38, 40, 64, 79, 87, 102, 127, 155, 161, 167, 168, 172, 190, 196, 202, 203], "avail": [0, 1, 3, 14, 22, 38, 39, 45, 46, 47, 50, 53, 61, 79, 80, 87, 89, 99, 102, 122, 123, 142, 155, 156, 161, 163, 167, 168, 172, 176, 190, 191, 196, 198, 202, 203, 209, 210], "serial": [0, 1, 3, 11, 15, 22, 38, 39, 40, 60, 61, 64, 87, 92, 102, 111, 120, 121, 122, 123, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 172, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204, 216, 234], "org": [0, 1, 3, 55, 116, 172, 230], "apach": [0, 1, 3, 172], "kryoseri": [0, 1, 3, 172], "buffer": [0, 1, 3, 22, 60, 61, 172], "max": [0, 1, 3, 8, 11, 13, 25, 27, 31, 38, 39, 40, 92, 111, 120, 121, 122, 123, 140, 146, 147, 153, 155, 157, 160, 162, 163, 167, 170, 172, 174, 180, 181, 187, 190, 192, 195, 197, 198, 202, 204], "2000m": [0, 1, 3, 172], "maxresults": [0, 1, 3, 172], "extralisten": [0, 3, 172], "com": [0, 1, 3, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 67, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 118, 121, 122, 123, 126, 130, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 216, 225, 230], "johnsnowlab": [0, 1, 3, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 67, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 118, 121, 122, 123, 126, 130, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 216], "licenselifecyclemanag": [0, 3, 172], "jar": [0, 1, 3, 8, 172, 226, 238], "http": [0, 1, 3, 8, 55, 67, 110, 116, 172], "pypi": [0, 1, 3, 172], "jsl": [0, 1, 3, 8, 25, 27, 146, 147, 165, 172, 180, 181, 199, 216, 226, 238], "releas": [0, 3, 172], "packag": [0, 1, 3, 79], "nlp_2": [0, 1, 3, 172], "12": [0, 1, 3, 9, 19, 48, 93, 172, 213, 230], "getorcr": [0, 1, 3, 172], "your": [0, 3, 8, 23, 58, 76, 79, 87, 99, 113, 127, 156, 168, 172, 191, 203, 211], "kei": [0, 3, 15, 21, 22, 25, 27, 41, 42, 45, 46, 47, 50, 53, 67, 76, 80, 83, 89, 90, 92, 97, 99, 106, 111, 118, 124, 142, 146, 147, 153, 170, 172, 176, 180, 181, 187, 204, 208, 211, 221, 228, 230, 234, 242], "whether": [0, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 214, 215, 217, 221, 232, 234, 237], "us": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 213, 215, 217, 222, 226, 228, 229, 230, 238, 240, 243], "m1": [0, 3, 172], "fhir": [0, 3, 74, 172], "de": [0, 1, 3, 45, 46, 47, 50, 51, 67, 142, 172, 176, 211, 228, 229], "identif": [0, 1, 3, 11, 13, 22, 45, 46, 47, 50, 60, 61, 64, 67, 87, 140, 142, 156, 168, 172, 174, 176, 191, 203, 211, 228, 229], "note": [0, 3, 11, 12, 45, 46, 47, 50, 58, 60, 64, 67, 79, 87, 92, 99, 140, 142, 156, 168, 170, 172, 174, 176, 191, 203, 204, 208, 209, 221, 230, 242], "i": [0, 1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 211, 214, 215, 221, 224, 228, 229, 230, 232, 234, 237, 238, 240, 242, 243], "healthcar": [1, 2, 8, 50, 79, 90, 244], "commerci": 1, "extens": [1, 60], "clinic": [1, 11, 13, 15, 16, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 55, 57, 58, 60, 61, 67, 70, 71, 79, 80, 82, 84, 86, 87, 88, 89, 91, 92, 94, 99, 102, 108, 109, 110, 111, 113, 116, 117, 121, 122, 123, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 165, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 199, 202, 204, 206, 208, 209, 210, 224], "biomed": [1, 15], "text": [1, 8, 9, 10, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 56, 57, 58, 60, 61, 62, 64, 67, 70, 76, 77, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 102, 108, 109, 110, 111, 113, 116, 117, 118, 120, 121, 122, 123, 126, 130, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 195, 196, 197, 198, 199, 202, 203, 204, 208, 211, 212, 213, 221, 226, 230, 238, 243], "mine": 1, "If": [1, 8, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 57, 58, 61, 64, 66, 67, 69, 70, 71, 73, 76, 77, 80, 84, 87, 89, 91, 92, 93, 97, 99, 100, 102, 103, 106, 108, 109, 110, 111, 113, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 132, 136, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 208, 209, 211, 215, 221, 224, 229, 230, 231, 232, 234, 237, 242], "you": [1, 8, 10, 11, 23, 41, 43, 45, 46, 47, 50, 51, 53, 58, 67, 70, 87, 90, 92, 102, 108, 110, 116, 118, 126, 136, 140, 142, 161, 168, 170, 174, 176, 196, 203, 204, 209, 210, 211, 213, 230], "don": [1, 24, 103, 116, 149, 165, 183, 199], "t": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 213, 242], "have": [1, 8, 11, 14, 16, 22, 24, 25, 27, 29, 45, 46, 47, 50, 61, 67, 80, 87, 90, 106, 108, 110, 113, 116, 127, 140, 142, 146, 147, 156, 165, 168, 174, 176, 180, 181, 191, 199, 203, 212, 229, 230], "subscript": 1, "yet": [1, 16, 126], "can": [1, 8, 11, 12, 13, 14, 20, 22, 24, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 58, 61, 64, 66, 67, 70, 71, 76, 77, 80, 84, 87, 89, 99, 100, 102, 103, 106, 108, 110, 111, 113, 116, 120, 121, 122, 123, 126, 127, 140, 142, 149, 153, 155, 156, 160, 161, 162, 163, 167, 168, 171, 174, 176, 183, 187, 190, 191, 195, 196, 197, 198, 202, 203, 209, 210, 211, 213, 224, 230, 232, 234], "ask": [1, 126], "free": [1, 16, 79, 206], "trial": 1, "click": 1, "button": 1, "below": [1, 41, 61], "try": [1, 30, 31, 32, 33, 34, 35, 71, 80, 93, 108, 116, 136, 149, 157, 158, 183, 192, 193], "www": [1, 225], "provid": [1, 8, 11, 23, 39, 43, 45, 46, 47, 50, 53, 60, 64, 67, 70, 76, 87, 88, 113, 116, 134, 140, 142, 156, 167, 168, 174, 176, 191, 202, 203, 208, 209, 211, 214, 215, 221, 223, 230, 240, 241], "specif": [1, 42, 45, 46, 47, 50, 61, 67, 84, 87, 99, 110, 126, 127, 130, 142, 168, 176, 203, 211, 221, 228, 238, 240], "annot": [1, 8, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 173, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 208, 210, 212, 213, 216, 226, 230, 238, 243], "pipelin": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 229, 231, 238, 243], "model": [1, 2, 8, 11, 12, 13, 15, 16, 21, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 51, 53, 55, 57, 58, 60, 61, 64, 67, 70, 71, 73, 76, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 99, 102, 108, 109, 110, 111, 113, 116, 117, 120, 121, 122, 123, 126, 127, 130, 132, 133, 136, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 216, 224, 239, 243], "embed": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 64, 66, 67, 70, 71, 74, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 216], "entiti": [1, 8, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 32, 39, 41, 42, 43, 51, 52, 53, 55, 57, 58, 61, 64, 67, 69, 70, 76, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 97, 99, 103, 108, 109, 110, 111, 113, 115, 116, 118, 124, 128, 140, 146, 147, 149, 152, 153, 165, 167, 168, 170, 173, 174, 180, 181, 183, 186, 187, 199, 202, 203, 204, 208, 209, 211, 213, 226, 230, 238], "recognit": [1, 23, 39, 42, 87, 91, 92, 167, 168, 170, 202, 203, 204], "link": [1, 45, 46, 47, 50, 55, 79, 142, 176], "normal": [1, 30, 31, 43, 45, 46, 47, 50, 74, 83, 116, 127, 142, 149, 156, 157, 171, 172, 176, 183, 191, 192, 216], "assert": [1, 8, 9, 20, 32, 70, 74, 99, 145, 154, 172, 179, 188, 208, 209, 213, 214, 216, 226, 235], "statu": [1, 11, 12, 13, 15, 140, 174, 208, 213, 240], "detect": [1, 12, 16, 42, 67, 228, 238], "relat": [1, 8, 25, 27, 29, 61, 82, 99, 108, 109, 110, 111, 127, 128, 146, 147, 152, 153, 165, 171, 173, 180, 181, 186, 187, 199, 208, 209, 213, 221, 226, 228], "extract": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 222, 243], "spell": [1, 126, 139, 216], "check": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 224, 242], "correct": [1, 79, 83, 230], "resolv": [1, 14, 16, 115, 116, 149, 183, 208, 229], "rule": [1, 9, 16, 21, 41, 42, 43, 45, 46, 47, 50, 64, 87, 113, 142, 176, 211, 228], "base": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 210, 211, 213, 221, 224, 226, 228, 229, 235, 240, 241], "contextu": [1, 16, 41, 42], "parser": [1, 43, 67, 74, 172, 208, 209, 213, 216], "gener": [1, 8, 22, 23, 32, 33, 34, 35, 45, 46, 47, 48, 50, 67, 71, 76, 79, 87, 90, 99, 100, 102, 103, 108, 120, 121, 122, 123, 142, 143, 156, 158, 160, 161, 162, 163, 168, 176, 177, 191, 193, 195, 196, 197, 198, 203, 206, 208, 211, 213, 216, 217, 221, 226, 229, 238], "summar": [1, 62, 79, 120, 121, 160, 162, 195, 197, 208], "risk": [1, 171, 240], "adjust": [1, 79, 84, 171, 240], "modul": [1, 2], "offer": [1, 240], "access": [1, 8], "sever": [1, 11, 15, 20, 45, 46, 47, 50, 51, 67, 140, 142, 174, 176, 240], "transform": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 216, 221, 230], "bert": [1, 9, 15, 22, 37, 38, 39, 40, 60, 61, 87, 109, 111, 116, 118, 152, 153, 155, 167, 168, 186, 187, 190, 202, 203], "biobert": [1, 15], "clinicalbert": 1, "glove": [1, 13], "med": 1, "icd": [1, 116, 149, 183, 240], "o": [1, 39, 51, 53, 86, 89, 167, 202, 213, 242], "It": [1, 8, 14, 16, 20, 24, 41, 42, 45, 46, 47, 48, 50, 58, 61, 64, 66, 67, 69, 70, 71, 77, 80, 87, 89, 97, 99, 104, 124, 126, 127, 128, 142, 156, 168, 171, 176, 191, 203, 208, 209, 211, 215, 221, 222, 230], "also": [1, 14, 15, 29, 38, 39, 40, 45, 46, 47, 50, 55, 61, 64, 67, 79, 84, 87, 89, 108, 113, 116, 134, 142, 155, 156, 167, 168, 176, 190, 191, 202, 203, 208], "includ": [1, 8, 11, 14, 15, 16, 20, 21, 23, 24, 26, 32, 42, 45, 46, 47, 50, 57, 58, 64, 69, 70, 80, 84, 87, 89, 99, 102, 110, 111, 116, 124, 127, 128, 140, 142, 149, 153, 161, 168, 171, 174, 176, 183, 187, 196, 203, 209, 215, 221, 222, 226, 228, 230], "over": [1, 46, 47, 58, 87, 126, 127, 134, 137, 142, 168, 176, 203, 208, 238, 240], "2000": [1, 93], "pre": [1, 8, 15, 16, 22, 25, 27, 38, 39, 40, 43, 56, 60, 87, 91, 92, 108, 109, 111, 126, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 202, 203, 204, 243], "train": [1, 8, 11, 12, 13, 15, 16, 20, 22, 24, 25, 27, 29, 30, 31, 32, 34, 37, 38, 39, 40, 43, 46, 51, 56, 60, 61, 64, 66, 71, 76, 80, 86, 87, 88, 89, 91, 92, 93, 108, 109, 111, 113, 116, 117, 126, 127, 130, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 199, 202, 203, 204, 216, 243], "recogn": [1, 61, 87, 89, 91, 92, 108, 111, 153, 168, 170, 187, 203, 204], "follow": [1, 15, 20, 23, 24, 41, 42, 43, 45, 46, 47, 50, 51, 53, 58, 67, 69, 80, 87, 89, 99, 106, 113, 116, 126, 142, 168, 171, 176, 203, 208, 211, 213, 221, 222, 225], "mani": [1, 41, 42, 55, 61, 120, 121, 160, 162, 195, 197], "more": [1, 12, 14, 22, 38, 40, 45, 46, 47, 50, 56, 58, 61, 67, 89, 90, 142, 143, 155, 167, 176, 177, 190, 202, 206], "support": [1, 15, 35, 51, 60, 67, 79, 87, 106, 156, 168, 191, 203], "sign": [1, 213, 216], "symptom": [1, 61, 70, 108], "treatment": [1, 15, 58, 110, 111, 153, 187, 213], "procedur": 1, "test": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 213, 214, 232], "section": [1, 46, 90, 215, 221], "drug": [1, 61, 89, 94, 108, 110, 111, 153, 187, 211], "name": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 136, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 221, 224, 228, 229, 230, 232, 238, 240], "dosag": [1, 61, 89, 94, 108], "strength": [1, 61, 89, 108], "rout": [1, 108], "durat": [1, 108], "frequenc": [1, 79, 89, 108, 206], "factor": [1, 79, 171, 208], "smoke": 1, "obes": 1, "diabet": [1, 22, 42, 58, 60, 82, 84, 106, 130], "hypertens": [1, 32], "substanc": 1, "abus": 1, "anatomi": 1, "organ": [1, 39, 70, 104, 167, 202, 211], "subdivis": 1, "cell": [1, 39, 87, 167, 168, 202, 203, 211], "structur": [1, 99, 111, 127, 153, 187, 211, 230], "tissu": 1, "gene": 1, "chemic": 1, "demograph": 1, "ag": [1, 41, 42, 45, 46, 47, 50, 52, 53, 58, 67, 70, 80, 86, 123, 142, 171, 176, 211, 228, 240], "gender": [1, 45, 46, 47, 50, 51, 67, 70, 80, 86, 142, 176, 211], "height": 1, "weight": [1, 8, 60, 61, 127, 173], "race": 1, "ethnic": 1, "marit": 1, "vital": [1, 213], "sensit": [1, 11, 14, 15, 16, 20, 24, 26, 32, 41, 42, 43, 45, 46, 47, 50, 57, 58, 60, 67, 69, 80, 84, 89, 106, 108, 109, 110, 126, 127, 128, 140, 142, 152, 174, 176, 186, 221, 228], "data": [1, 8, 11, 12, 15, 16, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 64, 66, 70, 71, 73, 76, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 102, 103, 108, 109, 110, 111, 113, 116, 117, 122, 123, 126, 127, 130, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 198, 199, 202, 203, 204, 211, 213, 221, 228, 229, 230, 243], "patient": [1, 11, 15, 16, 24, 25, 27, 29, 43, 45, 46, 47, 48, 50, 51, 53, 61, 67, 102, 103, 140, 142, 143, 146, 147, 161, 165, 171, 174, 176, 177, 180, 181, 196, 199, 211, 240], "address": [1, 11, 13, 22, 30, 31, 32, 33, 34, 35, 37, 45, 46, 47, 50, 55, 60, 61, 67, 71, 76, 79, 80, 88, 102, 113, 116, 121, 122, 123, 126, 142, 158, 161, 162, 163, 176, 193, 196, 197, 198, 203], "phone": [1, 45, 46, 47, 50, 67, 142, 176, 211], "email": [1, 45, 46, 47, 50, 67, 142, 176, 211, 230], "date": [1, 10, 41, 45, 46, 47, 48, 50, 52, 67, 93, 106, 113, 118, 138, 142, 143, 176, 177, 211, 224, 228, 229, 230], "identifi": [1, 16, 21, 22, 23, 41, 45, 46, 47, 50, 67, 80, 99, 110, 116, 118, 142, 176, 208, 211, 213, 228, 240, 242], "For": [1, 8, 9, 13, 20, 38, 39, 41, 42, 45, 46, 47, 50, 56, 60, 61, 64, 67, 76, 86, 87, 91, 92, 94, 106, 108, 109, 110, 111, 113, 116, 126, 142, 143, 152, 153, 155, 156, 167, 168, 170, 176, 177, 186, 187, 190, 191, 202, 203, 204, 210, 211], "inform": [1, 2, 11, 32, 33, 34, 35, 43, 46, 48, 50, 58, 70, 71, 80, 87, 89, 93, 94, 108, 116, 127, 140, 142, 149, 158, 168, 171, 174, 176, 183, 193, 203, 208, 209, 213, 228, 240, 243], "visit": [1, 57, 108], "our": 1, "site": [1, 43], "built": [1, 67, 156, 191, 215, 228], "top": [1, 22, 38, 39, 40, 79, 87, 106, 120, 121, 155, 160, 162, 167, 168, 190, 195, 197, 202, 203, 206, 213], "x": [1, 126], "need": [1, 13, 16, 43, 45, 46, 47, 50, 60, 64, 67, 87, 88, 103, 108, 113, 116, 142, 149, 156, 165, 168, 171, 176, 183, 191, 199, 203, 213], "java": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 210, 234], "8": [1, 15, 38, 40, 58, 61, 87, 126, 155, 156, 167, 168, 190, 191, 202, 203, 206, 208, 213, 230], "11": [1, 9, 13, 24, 45, 46, 47, 50, 52, 93, 106, 142, 176, 213, 230], "7": [1, 9, 15, 45, 46, 47, 50, 67, 142, 176, 213], "10": [1, 12, 25, 27, 48, 83, 94, 109, 116, 146, 147, 149, 165, 180, 181, 183, 199, 213, 230, 240], "recommend": [1, 46, 47, 55, 79, 87, 142, 168, 176, 203], "basic": [1, 45, 46, 47, 50, 142, 176], "knowledg": [1, 55, 116], "framework": 1, "work": [1, 50, 87, 92, 127, 168, 170, 203, 204, 217, 230, 240], "environ": [1, 46, 79, 232], "befor": [1, 11, 13, 14, 16, 22, 41, 42, 53, 60, 84, 87, 120, 121, 126, 160, 162, 168, 171, 195, 197, 203, 206, 230, 240], "pleas": [1, 8, 38, 39, 52, 76, 87, 108, 109, 113, 116, 152, 155, 156, 167, 168, 186, 190, 191, 202, 203, 210], "refer": [1, 2, 8, 11, 13, 22, 46, 47, 48, 51, 52, 56, 60, 61, 64, 87, 108, 116, 140, 142, 143, 156, 168, 174, 176, 177, 191, 203], "document": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 212, 213, 226, 230, 243], "first": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 213, 222, 229], "let": [1, 106, 108, 116], "": [1, 8, 11, 13, 14, 21, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 45, 46, 47, 50, 51, 53, 55, 58, 60, 64, 67, 71, 76, 80, 87, 89, 100, 102, 106, 108, 113, 116, 120, 121, 122, 123, 124, 126, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 160, 161, 162, 163, 168, 171, 174, 176, 180, 181, 183, 191, 192, 193, 195, 196, 197, 198, 203, 206, 211, 228, 230], "make": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209], "sure": [1, 8, 45, 46, 47, 50, 67, 79, 142, 176, 209], "oracl": 1, "openjdk": 1, "0_292": 1, "pip": [1, 213], "extra": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "index": [1, 11, 12, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 90, 108, 113, 116, 126, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203, 208, 209, 226, 230], "url": [1, 8, 67, 211], "code": [1, 8, 41, 43, 45, 46, 47, 48, 50, 116, 127, 142, 149, 171, 176, 183, 208, 211, 213, 215, 217, 221, 222, 223, 238, 240, 241], "upgrad": [1, 240], "part": [1, 9, 45, 46, 47, 48, 50, 56, 79, 142, 143, 176, 177, 206, 211, 232], "split": [1, 9, 23, 32, 33, 34, 35, 71, 79, 87, 92, 104, 108, 126, 158, 168, 170, 193, 203, 204, 213, 226, 242], "e": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 224, 229, 242], "2": [1, 9, 11, 13, 14, 15, 16, 19, 22, 24, 25, 27, 30, 31, 32, 33, 34, 35, 41, 42, 43, 45, 46, 47, 50, 51, 55, 57, 58, 60, 61, 64, 71, 76, 79, 80, 87, 89, 94, 103, 106, 108, 113, 116, 126, 127, 132, 139, 140, 142, 146, 147, 149, 156, 157, 158, 165, 168, 171, 174, 176, 180, 181, 183, 191, 192, 193, 199, 203, 206, 210, 213, 230, 238], "onli": [1, 8, 14, 16, 22, 25, 27, 32, 33, 34, 35, 41, 45, 46, 47, 50, 51, 60, 67, 70, 71, 80, 87, 100, 102, 108, 110, 113, 120, 121, 122, 123, 126, 142, 146, 147, 158, 160, 161, 162, 163, 168, 171, 176, 180, 181, 193, 195, 196, 197, 198, 203, 206, 211, 213], "user": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 230], "valid": [1, 8, 11, 32, 33, 34, 35, 45, 46, 47, 50, 71, 87, 108, 110, 140, 142, 156, 158, 168, 174, 176, 191, 193, 203, 208, 224, 230], "did": [1, 126], "receiv": 1, "contact": [1, 211], "u": [1, 45, 46, 47, 50, 87, 138, 142, 168, 176, 203, 211, 224], "href": [1, 206], "mailto": 1, "info": [1, 11, 32, 33, 34, 35, 41, 71, 87, 108, 116, 140, 149, 158, 168, 174, 183, 193, 203], "thi": [1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 211, 213, 215, 229, 230, 232, 234, 240, 242, 244], "simpl": [1, 64, 79], "piec": [1, 23], "import": [1, 8, 9, 11, 13, 15, 16, 19, 20, 24, 25, 27, 29, 30, 31, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 56, 57, 58, 60, 61, 64, 66, 67, 70, 71, 76, 80, 83, 84, 86, 87, 88, 89, 93, 99, 108, 109, 113, 117, 126, 130, 140, 142, 143, 146, 147, 149, 152, 155, 156, 157, 165, 167, 168, 172, 174, 176, 177, 180, 181, 183, 186, 190, 191, 192, 199, 202, 203, 208, 213, 215, 221, 230, 233], "sparknlp_jsl": 1, "Or": 1, "flexibl": [1, 9], "pyspark": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 211, 212, 213, 226, 228, 229, 230, 238], "sql": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 211, 212, 213, 226, 228, 229, 230, 235, 238], "enterpris": 1, "16": [1, 9, 19, 213, 230], "2g": 1, "version_publ": 1, "main": [2, 64, 79], "page": [2, 13, 244], "workshop": [2, 8, 56, 87, 143, 156, 168, 177, 191, 203], "hub": [2, 13, 38, 39, 61, 87, 108, 109, 116, 155, 156, 167, 168, 190, 191, 202, 203, 210], "welcom": 2, "python": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 215, 217, 221, 222, 223, 234], "legal": [2, 16, 25, 27, 38, 39, 40, 43, 87, 91, 92, 108, 109, 111, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 167, 168, 170, 172, 216], "financ": [2, 16, 25, 27, 38, 39, 40, 43, 87, 91, 92, 108, 109, 111, 126, 172, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 202, 204, 216], "contain": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 211, 213, 217, 221, 222, 223, 228, 229, 230, 242, 243], "how": [2, 15, 20, 22, 25, 27, 32, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 47, 50, 52, 55, 58, 64, 67, 71, 76, 79, 80, 87, 89, 103, 108, 113, 117, 120, 121, 126, 142, 146, 147, 155, 156, 158, 160, 162, 165, 167, 168, 176, 180, 181, 190, 191, 193, 195, 197, 199, 202, 203, 211, 229], "exampl": [2, 8, 9, 10, 11, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 38, 39, 40, 43, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 66, 70, 71, 76, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 99, 102, 103, 108, 109, 110, 111, 113, 116, 117, 118, 122, 123, 126, 127, 130, 140, 143, 146, 147, 149, 152, 153, 155, 156, 157, 161, 163, 165, 167, 168, 170, 174, 177, 180, 181, 183, 186, 187, 190, 191, 192, 196, 198, 199, 202, 203, 204, 208, 211, 213, 225, 229, 230], "requir": [2, 8, 11, 13, 22, 30, 31, 38, 40, 41, 42, 52, 56, 58, 60, 61, 87, 99, 106, 116, 117, 143, 155, 157, 167, 168, 174, 177, 190, 192, 202, 203, 213, 215, 221, 232], "instal": [2, 8, 232], "session": [2, 8, 213, 215, 221, 226, 229, 230, 238, 243], "from": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 137, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 210, 213, 221, 222, 225, 226, 228, 230, 243], "api": [2, 103], "manipul": 8, "an": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 211, 213, 215, 226, 238, 240, 244], "json": [8, 24, 25, 27, 43, 46, 64, 67, 99, 138, 142, 146, 147, 165, 176, 180, 181, 199, 213, 226, 230, 243], "export": [8, 213, 226], "appropri": [8, 12], "layout": 8, "ner": [8, 11, 13, 15, 16, 22, 23, 24, 25, 27, 29, 32, 39, 41, 42, 46, 47, 48, 51, 53, 55, 58, 60, 61, 70, 74, 80, 84, 103, 110, 111, 139, 140, 142, 146, 147, 153, 154, 165, 166, 172, 174, 176, 180, 181, 187, 188, 199, 200, 208, 213, 216, 226, 238], "annotationlab": 8, "ssl_verif": 8, "true": [8, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 64, 66, 67, 69, 70, 71, 73, 76, 77, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 138, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 210, 211, 213, 214, 221, 226, 230, 231, 232, 237, 238, 242], "interfac": [8, 116], "tool": 8, "multi": [8, 15, 25, 27, 32, 33, 34, 35, 38, 39, 40, 45, 46, 47, 50, 67, 71, 108, 142, 146, 147, 155, 156, 158, 167, 176, 180, 181, 190, 191, 193, 202], "modal": 8, "allow": [8, 9, 11, 15, 22, 25, 27, 38, 40, 42, 45, 46, 47, 50, 53, 57, 58, 70, 79, 106, 108, 109, 118, 123, 126, 140, 142, 146, 147, 152, 155, 167, 171, 174, 176, 180, 181, 186, 190, 202, 209, 211, 224, 240], "team": 8, "effici": [8, 79], "collabor": 8, "ml": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 216, 238], "automat": [8, 45, 46, 47, 50, 67, 103, 111, 142, 153, 176, 187], "those": [8, 22, 45, 46, 47, 48, 50, 58, 89, 110, 142, 171, 176, 211], "programmat": 8, "through": [8, 43, 226, 228], "conll": [8, 87, 168, 203, 213, 216, 226, 243], "format": [8, 11, 43, 45, 46, 47, 50, 51, 64, 70, 76, 79, 80, 86, 87, 89, 93, 99, 106, 113, 140, 142, 156, 168, 174, 176, 191, 203, 211, 213, 224, 230, 238, 243], "file": [8, 11, 24, 32, 33, 34, 35, 43, 45, 46, 47, 50, 51, 64, 67, 71, 76, 80, 87, 89, 108, 113, 116, 127, 138, 140, 142, 149, 156, 158, 168, 174, 176, 183, 191, 193, 203, 211, 213, 214, 222, 223, 224, 226, 228, 230, 237, 238, 243], "csv": [8, 24, 43, 46, 51, 53, 64, 66, 80, 87, 89, 138, 142, 156, 168, 176, 191, 203, 213, 228, 230], "excel": 8, "classif": [8, 9, 15, 71, 74, 99, 111, 155, 156, 157, 167, 172, 190, 191, 192, 202, 208, 216, 240], "build": [8, 29, 127, 215, 217, 221], "preannot": 8, "save": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 213, 225, 228, 238, 243], "upload": [8, 172, 219], "project": [8, 126], "interact": [8, 171, 211], "instanc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 212, 215, 229], "up": [8, 92, 117, 127, 156, 170, 191, 204, 228], "list": [8, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 69, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 221, 224, 226, 228, 230, 231, 234, 237, 238, 240, 242, 243, 244], "all": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 136, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 221, 223, 224, 226, 228, 229, 230, 231, 238, 244], "creat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209, 213, 228, 230], "new": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 213, 222, 224, 229, 240, 242], "delet": [8, 240], "edit": [8, 25, 27, 146, 147, 180, 181], "configur": [8, 16, 45, 46, 47, 50, 67, 73, 130, 142, 176, 215, 221, 228], "ani": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 230], "exist": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 222, 224, 231], "task": [8, 38, 39, 40, 45, 46, 47, 50, 79, 111, 120, 121, 142, 153, 155, 160, 162, 167, 176, 187, 190, 195, 197, 202, 213, 226], "usag": [8, 45, 46, 47, 50, 64, 79, 87, 89, 94, 102, 142, 156, 161, 168, 176, 191, 196, 203], "detail": [8, 94, 99, 108, 171, 206, 209], "tutori": 8, "base_url": 8, "client_id": 8, "client_secret": 8, "cooki": 8, "http_success_cod": 8, "200": [8, 108, 126, 127, 238], "201": 8, "203": 8, "password": 8, "usernam": [8, 211], "check_preannotations_summari": 8, "project_nam": 8, "summari": [8, 99, 120, 121, 160, 162, 195, 197, 208], "match": [8, 11, 13, 14, 16, 22, 25, 27, 37, 38, 39, 40, 41, 42, 43, 46, 47, 55, 56, 60, 61, 64, 67, 76, 77, 80, 88, 92, 106, 111, 113, 116, 126, 140, 142, 143, 146, 147, 149, 153, 155, 167, 170, 174, 176, 177, 180, 181, 183, 187, 190, 202, 204, 221, 230], "label": [8, 11, 12, 13, 14, 15, 20, 23, 24, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 45, 46, 47, 50, 57, 58, 64, 67, 69, 71, 80, 84, 86, 87, 89, 91, 92, 108, 109, 111, 115, 116, 127, 128, 139, 140, 142, 149, 152, 153, 155, 156, 157, 158, 167, 168, 170, 173, 174, 176, 183, 186, 187, 190, 191, 192, 193, 202, 203, 204, 208, 213, 214, 226, 238, 243], "thei": [8, 22, 35, 45, 46, 47, 50, 58, 61, 70, 87, 120, 121, 126, 127, 142, 160, 162, 168, 176, 195, 197, 203, 211], "otherwis": [8, 11, 13, 16, 22, 30, 31, 32, 33, 34, 35, 37, 46, 47, 53, 55, 56, 60, 61, 66, 71, 76, 79, 80, 87, 100, 102, 103, 108, 109, 113, 116, 120, 121, 122, 123, 142, 143, 152, 158, 160, 161, 162, 163, 165, 168, 176, 177, 186, 193, 195, 196, 197, 198, 199, 203, 211, 214, 229, 232, 237, 242], "addition": [8, 24, 43, 50, 67, 84, 87, 126, 127, 168, 203, 209, 230], "print": [8, 53, 136, 208, 209, 210, 214, 237, 238, 242], "generate_preannot": 8, "create_project": 8, "project_descript": 8, "project_sampl": 8, "project_instruct": 8, "descript": [8, 11, 22, 32, 33, 34, 35, 71, 87, 91, 102, 108, 116, 140, 149, 158, 161, 168, 174, 183, 193, 196, 203, 213, 222, 240], "random": [8, 45, 46, 47, 48, 50, 67, 87, 90, 99, 100, 102, 120, 121, 122, 123, 142, 143, 156, 160, 161, 162, 163, 168, 176, 177, 191, 195, 196, 197, 198, 203, 206, 211, 229, 238], "sequenti": [8, 11, 13, 14, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "sampl": [8, 29, 48, 79, 100, 102, 120, 121, 122, 123, 143, 160, 161, 162, 163, 177, 195, 196, 197, 198, 206, 225], "while": [8, 12, 45, 46, 47, 50, 87, 93, 116, 120, 121, 127, 142, 149, 156, 160, 162, 168, 176, 183, 191, 195, 197, 203], "show": [8, 9, 11, 12, 15, 16, 19, 20, 22, 23, 24, 25, 27, 29, 32, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 52, 55, 56, 57, 58, 60, 61, 64, 67, 70, 76, 80, 82, 83, 84, 86, 91, 92, 93, 94, 99, 102, 103, 108, 109, 110, 111, 113, 117, 122, 123, 126, 130, 140, 142, 143, 146, 147, 152, 153, 155, 156, 161, 163, 165, 167, 170, 174, 176, 177, 180, 181, 186, 187, 190, 191, 196, 198, 199, 202, 204, 210, 213, 216, 230, 238], "guidelin": 8, "delete_project": 8, "confirm": [8, 57], "boolean": [8, 23, 42, 46, 47, 80, 90, 113, 127, 142, 176, 214], "input": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 221, 226, 228, 229, 230, 238, 243], "delete_task": 8, "task_id": [8, 213], "id": [8, 21, 41, 45, 46, 47, 48, 50, 56, 64, 67, 79, 100, 102, 116, 120, 121, 122, 123, 138, 142, 143, 160, 161, 162, 163, 176, 177, 195, 196, 197, 198, 208, 211, 212, 213, 226, 229, 243], "all_result": 8, "document_column": 8, "ner_column": 8, "assertion_column": 8, "relations_column": 8, "user_nam": 8, "titles_list": 8, "id_offset": 8, "int": [8, 10, 11, 13, 16, 22, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 48, 50, 51, 55, 60, 61, 62, 64, 67, 71, 76, 79, 80, 87, 89, 90, 91, 92, 93, 100, 102, 106, 108, 109, 110, 111, 113, 116, 118, 120, 121, 122, 123, 126, 127, 130, 132, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 208, 211, 213, 217, 225, 228, 229, 230, 238, 240, 242, 243], "directli": [8, 46, 108, 142, 176, 209, 210], "object": [8, 26, 38, 39, 40, 87, 100, 108, 127, 139, 155, 156, 167, 168, 190, 191, 202, 203, 207, 209, 210, 224, 228, 230, 231, 235, 240, 241], "light_pipelin": 8, "fullannot": [8, 10, 53, 208], "full_pipelin": 8, "df": [8, 41, 67, 93, 99, 139, 207, 211, 212, 213, 228, 229], "collect": [8, 11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 66, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 211, 226, 228, 229, 238, 243], "column": [8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 207, 208, 211, 212, 213, 226, 228, 229, 230], "documentassembl": [8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 32, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 55, 56, 57, 58, 60, 61, 64, 70, 76, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 99, 108, 109, 110, 111, 113, 116, 117, 118, 122, 123, 126, 130, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 198, 199, 202, 203, 204, 216, 226], "stage": [8, 9, 11, 13, 16, 20, 21, 24, 29, 41, 43, 46, 51, 53, 55, 70, 80, 83, 86, 88, 89, 93, 94, 102, 108, 109, 110, 116, 122, 123, 130, 140, 142, 149, 152, 161, 163, 171, 174, 176, 183, 186, 196, 198, 209, 231], "chunk": [8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 56, 58, 60, 61, 64, 69, 76, 77, 79, 80, 82, 83, 84, 86, 88, 89, 90, 93, 99, 102, 103, 108, 109, 110, 111, 113, 116, 117, 118, 120, 121, 122, 123, 126, 140, 142, 143, 146, 147, 149, 152, 153, 157, 160, 161, 162, 163, 165, 174, 176, 177, 180, 181, 183, 186, 187, 192, 195, 196, 197, 198, 199, 208, 213, 214, 230, 237, 238, 242], "custom": [8, 9, 11, 13, 43, 45, 46, 47, 50, 67, 102, 108, 109, 116, 122, 123, 126, 137, 138, 142, 152, 161, 163, 173, 176, 186, 196, 198], "titl": [8, 23, 106, 213, 226], "when": [8, 11, 12, 14, 16, 21, 23, 41, 42, 43, 45, 46, 47, 50, 53, 58, 61, 67, 70, 76, 77, 79, 80, 83, 87, 88, 89, 90, 93, 97, 99, 103, 104, 106, 108, 116, 120, 121, 122, 123, 124, 126, 140, 142, 149, 160, 162, 163, 165, 168, 171, 174, 176, 183, 195, 197, 198, 199, 203, 210, 211, 213, 229, 232], "older": [8, 45, 46, 47, 50, 58, 142, 176], "ar": [8, 11, 14, 15, 16, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 55, 57, 58, 60, 61, 64, 67, 69, 70, 71, 73, 76, 77, 80, 84, 87, 89, 90, 91, 92, 94, 99, 100, 102, 104, 106, 108, 109, 110, 111, 116, 118, 120, 121, 122, 123, 126, 127, 128, 136, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 167, 168, 170, 171, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 208, 209, 211, 213, 224, 226, 229, 230, 240, 242], "alreadi": [8, 30, 31, 87, 108, 116, 149, 157, 168, 183, 192, 203], "defin": [8, 9, 11, 13, 14, 15, 16, 20, 23, 24, 26, 29, 30, 31, 32, 41, 42, 43, 45, 46, 47, 50, 53, 57, 58, 60, 61, 67, 69, 80, 84, 87, 89, 93, 99, 110, 116, 127, 128, 140, 142, 157, 168, 174, 176, 192, 203, 208, 226, 228, 230], "offeset": 8, "avoid": [8, 12, 22, 79, 206], "overrit": 8, "get_iaa_metr": 8, "conll_dir": 8, "annotator_nam": 8, "set_ref_annot": 8, "return_nerdlmetr": 8, "save_dir": [8, 238], "results_token_bas": 8, "iaa": 8, "metric": [8, 11, 87, 140, 168, 174, 203, 214, 237, 242], "path": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 213, 214, 222, 223, 224, 225, 226, 230, 237, 238, 243], "present": [8, 11, 12, 15, 16, 19, 20, 32, 70, 80, 82, 84, 86, 87, 89, 116, 130, 140, 149, 156, 168, 174, 183, 191, 203, 208, 240], "comparison": [8, 45, 46, 47, 50, 60, 142, 176], "made": [8, 80, 127, 208], "respect": [8, 45, 46, 47, 50, 142, 176, 211, 240], "By": [8, 22, 61, 87, 110, 168, 203], "we": [8, 24, 25, 27, 30, 31, 32, 33, 34, 35, 46, 47, 55, 61, 71, 79, 87, 103, 106, 108, 116, 142, 146, 147, 149, 156, 157, 158, 165, 176, 180, 181, 183, 191, 192, 193, 199], "full": [8, 25, 27, 45, 46, 47, 50, 94, 102, 142, 146, 147, 161, 171, 176, 180, 181, 196, 211], "partial": [8, 25, 27, 146, 147, 171, 180, 181], "per": [8, 11, 13, 38, 40, 45, 46, 47, 50, 55, 71, 87, 89, 108, 111, 140, 142, 153, 155, 156, 168, 174, 176, 187, 190, 191, 203, 214, 237, 242], "datafram": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 211, 212, 213, 214, 226, 228, 229, 230], "nerdlmetr": [8, 139, 216], "evalu": [8, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 214, 237], "method": [8, 22, 32, 33, 34, 35, 43, 45, 46, 47, 50, 51, 71, 79, 89, 108, 126, 127, 134, 137, 142, 149, 158, 176, 183, 193, 208, 209, 211, 213, 223, 230, 240, 244], "report": [8, 16, 225], "get_all_project": 8, "visibl": [8, 45, 46, 47, 50, 67, 142, 176], "rtype": [8, 183, 226], "get_annot": 8, "output_nam": 8, "where": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 213, 224, 229, 242, 243], "write": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 238, 243], "directori": [8, 210, 223, 243], "locat": [8, 15, 16, 25, 27, 38, 39, 40, 41, 43, 45, 46, 47, 50, 55, 64, 83, 87, 89, 91, 92, 108, 109, 111, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 202, 203, 204, 210, 211, 224], "get_assertion_data": 8, "input_json_path": [8, 226], "assertion_label": [8, 213, 226], "relevant_ner_label": 8, "ground_truth": [8, 116, 213, 226], "unannotated_label": 8, "regex_pattern": [8, 226], "unannotated_label_strategi": 8, "unannotated_label_strategy_dict": 8, "included_task_id": 8, "excluded_task_id": [8, 226], "excluded_task_titl": [8, 226], "seed": [8, 45, 46, 47, 48, 50, 51, 67, 79, 87, 90, 100, 102, 120, 121, 122, 123, 142, 143, 156, 160, 161, 162, 163, 168, 176, 177, 191, 195, 196, 197, 198, 203, 206, 211, 229], "panda": [8, 48, 226], "relev": [8, 22, 213], "assign": [8, 21, 64, 80, 89, 97, 124], "select": [8, 9, 11, 12, 14, 20, 22, 23, 25, 27, 38, 39, 40, 45, 46, 47, 48, 50, 51, 52, 53, 61, 62, 67, 70, 80, 83, 91, 92, 99, 102, 103, 106, 108, 109, 116, 122, 123, 140, 142, 146, 147, 149, 152, 155, 161, 163, 165, 167, 170, 174, 176, 180, 181, 183, 186, 190, 196, 198, 199, 202, 204, 211, 226], "ground": [8, 116, 226], "truth": [8, 116, 226], "complet": [8, 45, 46, 47, 50, 79, 142, 176, 226, 228], "latest": [8, 226], "pattern": [8, 9, 16, 42, 45, 46, 47, 50, 64, 76, 77, 80, 88, 94, 102, 113, 126, 142, 161, 171, 176, 196, 226], "regex": [8, 10, 16, 20, 21, 24, 41, 42, 43, 45, 46, 47, 50, 64, 67, 69, 74, 76, 77, 80, 88, 89, 106, 118, 126, 142, 172, 176, 216, 226], "regular": [8, 13, 20, 24, 41, 42, 46, 80, 113, 126, 127, 142, 176, 226], "strategi": [8, 14, 46, 47, 60, 67, 79, 80, 103, 113, 126, 142, 165, 176, 199], "control": [8, 11, 15, 20, 77, 87, 94, 99, 140, 174], "number": [8, 11, 13, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 45, 46, 47, 48, 50, 60, 62, 64, 67, 71, 79, 80, 87, 100, 102, 103, 106, 108, 109, 110, 116, 120, 121, 122, 123, 127, 140, 142, 143, 146, 147, 149, 152, 156, 157, 158, 160, 161, 162, 163, 165, 168, 174, 176, 177, 180, 181, 183, 186, 191, 192, 193, 195, 196, 197, 198, 199, 203, 206, 211, 217, 225, 228, 229, 230, 242], "occurr": [8, 45, 46, 47, 50, 87, 116, 142, 168, 176, 203], "unannot": 8, "option": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 210, 211, 213, 215, 217, 229, 230, 238, 242, 243], "count": [8, 87, 168, 203, 242], "fraction": 8, "absolut": 8, "dictionari": [8, 12, 13, 25, 27, 41, 42, 43, 45, 50, 53, 61, 67, 76, 80, 83, 89, 92, 106, 108, 109, 111, 113, 118, 123, 146, 147, 152, 153, 165, 170, 171, 180, 181, 186, 187, 199, 204, 208, 209, 211, 217, 221, 222, 223, 228, 230, 243], "entity_label": [8, 45, 46, 47, 50, 67, 138, 142, 176], "sample_weight_or_count": 8, "should": [8, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209, 210, 211, 213, 215, 221, 224, 230], "between": [8, 11, 22, 23, 33, 34, 35, 42, 45, 46, 47, 50, 58, 60, 61, 62, 67, 76, 77, 82, 84, 87, 88, 89, 94, 104, 106, 108, 109, 110, 111, 116, 126, 127, 140, 142, 152, 153, 156, 158, 168, 174, 176, 186, 187, 191, 193, 203, 211, 213, 234, 240, 242], "exclud": [8, 13, 16, 42, 76, 77, 87, 116, 149, 168, 183, 203, 213, 226], "same": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 211, 229, 230], "everi": [8, 46, 87, 142, 168, 176, 203, 210], "time": [8, 29, 45, 46, 47, 50, 51, 67, 84, 87, 120, 121, 127, 142, 156, 160, 162, 168, 176, 191, 195, 197, 203, 217, 240], "execut": [8, 45, 46, 47, 50, 51, 67, 142, 176, 215, 221, 241], "pd": [8, 48, 226], "get_classification_data": 8, "get_conll_data": 8, "exported_conl": 8, "excluded_label": [8, 213, 226], "io": [8, 216, 238], "irrelev": [8, 226], "get_conll_data_from_visualn": 8, "visualn": [8, 243], "get_project_config": 8, "get_relation_extraction_data": 8, "negative_rel": 8, "relation_pair": 8, "negative_relation_strategi": 8, "negative_relation_strategy_dict": 8, "doc_wise_annot": [8, 226], "wa": [8, 11, 13, 16, 24, 25, 27, 30, 31, 32, 33, 34, 35, 41, 43, 46, 48, 51, 53, 55, 61, 64, 71, 76, 79, 80, 84, 87, 89, 103, 108, 113, 116, 126, 127, 130, 132, 140, 142, 146, 147, 149, 156, 157, 158, 165, 168, 171, 174, 176, 180, 181, 183, 191, 192, 193, 199, 203, 208, 217, 230], "were": [8, 16, 26, 87, 99, 168, 203, 226, 240], "want": [8, 10, 11, 23, 25, 27, 43, 45, 46, 47, 50, 53, 55, 61, 64, 87, 90, 102, 103, 108, 110, 116, 118, 140, 142, 146, 147, 161, 165, 174, 176, 180, 181, 196, 199, 211], "discard": [8, 92, 170, 204], "rest": [8, 11, 14, 15, 20, 24, 26, 29, 32, 46, 47, 57, 58, 69, 80, 84, 89, 128, 140, 142, 174, 176], "plausibl": 8, "pair": [8, 14, 24, 45, 46, 47, 50, 61, 80, 89, 103, 108, 109, 110, 111, 142, 152, 153, 165, 176, 186, 187, 199, 221], "separ": [8, 14, 22, 45, 46, 47, 50, 51, 80, 82, 84, 87, 89, 104, 106, 108, 110, 113, 126, 138, 142, 168, 176, 203, 211, 230, 234], "case": [8, 11, 12, 14, 15, 16, 20, 22, 24, 25, 26, 27, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 56, 57, 58, 60, 61, 64, 67, 69, 76, 80, 84, 87, 89, 92, 103, 106, 108, 109, 110, 111, 116, 126, 128, 140, 142, 143, 146, 147, 149, 152, 153, 155, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 199, 202, 203, 204, 230, 242], "one": [8, 10, 11, 13, 16, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 46, 47, 51, 53, 55, 59, 60, 61, 64, 67, 71, 73, 76, 80, 84, 87, 89, 103, 106, 108, 109, 110, 111, 113, 116, 126, 127, 132, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 165, 168, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 199, 203, 211, 222, 224, 230], "direct": [8, 16, 46, 99, 108, 109, 110, 127, 142, 152, 176, 186, 208], "possibl": [8, 10, 11, 14, 20, 21, 22, 24, 25, 26, 27, 31, 32, 33, 34, 35, 41, 43, 45, 46, 47, 61, 64, 69, 71, 80, 89, 94, 108, 110, 118, 124, 126, 127, 140, 142, 146, 147, 157, 158, 174, 176, 180, 181, 192, 193, 209, 211, 230], "neg": [8, 11, 16, 17, 60, 102, 108, 111, 140, 153, 161, 174, 187, 196, 208, 242], "entity1": [8, 103, 108, 109, 110, 152, 186, 208], "entity2": [8, 103, 108, 109, 110, 152, 186, 208], "each": [8, 11, 13, 21, 22, 24, 25, 27, 30, 31, 32, 33, 34, 35, 41, 42, 43, 45, 46, 47, 50, 51, 55, 60, 61, 64, 70, 71, 76, 80, 87, 89, 90, 97, 102, 103, 108, 110, 111, 113, 116, 124, 126, 127, 132, 140, 142, 146, 147, 149, 153, 156, 157, 158, 161, 165, 168, 174, 176, 180, 181, 183, 187, 191, 192, 193, 196, 199, 203, 208, 224, 226, 228, 230, 238], "repres": [8, 22, 23, 24, 41, 42, 46, 47, 64, 76, 80, 116, 127, 142, 176, 208, 209, 238, 240], "wise": [8, 87, 168, 203, 226], "done": [8, 13, 41, 87, 156, 168, 191, 203, 230], "cross": [8, 45, 46, 47, 50, 142, 176], "sentenc": [8, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 32, 33, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 53, 55, 57, 58, 60, 61, 62, 64, 70, 76, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 97, 99, 109, 110, 111, 113, 115, 116, 118, 120, 121, 122, 123, 124, 126, 130, 138, 140, 142, 146, 147, 149, 152, 153, 155, 156, 158, 160, 162, 163, 165, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 193, 195, 197, 198, 199, 202, 203, 204, 208, 213, 226], "review_annot": 8, "conll_path": 8, "ner_model_path": [8, 87, 168, 203], "review": [8, 139, 213], "predict": [8, 11, 15, 30, 31, 32, 33, 34, 35, 55, 71, 79, 87, 108, 140, 157, 158, 168, 174, 192, 193, 203, 206, 214, 237, 242], "tag": [8, 11, 24, 46, 47, 80, 86, 87, 88, 89, 108, 140, 142, 156, 168, 174, 176, 191, 203, 214, 216, 237, 242], "compar": [8, 20, 22, 24, 69, 80, 89], "origin": [8, 21, 25, 27, 30, 31, 42, 45, 46, 47, 50, 51, 53, 67, 76, 77, 79, 80, 89, 93, 97, 116, 124, 127, 142, 146, 147, 149, 157, 171, 176, 180, 181, 183, 192, 206, 208, 228, 242], "chunk_based_comparison_df": 8, "token_based_comparision_df": 8, "chunk_frequency_df": 8, "metrics_result": 8, "set_credenti": 8, "annotationlab_url": 8, "connect": [8, 127, 228], "client": 8, "ha": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 73, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 229, 238], "set_project_config": 8, "classification_label": 8, "ner_label": [8, 15, 16, 86, 99, 208, 213], "relations_label": 8, "d": [8, 41, 106, 113, 211], "multiclass": [8, 32, 33, 34, 35, 71, 108, 158, 193], "differ": [8, 22, 45, 46, 47, 50, 66, 67, 80, 87, 108, 110, 127, 142, 168, 171, 176, 203, 211, 213, 238, 240], "upload_preannot": 8, "upload_task": 8, "task_list": 8, "title_list": 8, "length": [8, 11, 13, 14, 37, 38, 39, 40, 45, 46, 47, 50, 51, 55, 67, 80, 92, 100, 102, 111, 120, 121, 122, 123, 126, 127, 140, 142, 153, 155, 160, 161, 162, 163, 167, 170, 174, 176, 187, 190, 195, 196, 197, 198, 202, 204, 211], "equal": [8, 24, 60, 61, 80, 87, 106, 120, 121, 160, 162, 168, 195, 197, 203], "increment": [8, 126], "offset": [8, 11, 16, 17, 60, 83, 108, 140, 174], "batch": [8, 11, 22, 32, 33, 34, 35, 37, 38, 40, 60, 61, 71, 79, 87, 91, 92, 102, 108, 120, 121, 122, 123, 127, 140, 155, 156, 158, 160, 161, 162, 163, 167, 168, 170, 174, 190, 191, 193, 195, 196, 197, 198, 202, 203, 204], "annotationconvert": [9, 83], "f": [9, 46, 51, 66, 137, 142, 171, 176], "classnam": [9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 67, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 216], "sparknlp": [9, 11, 12, 13, 15, 16, 17, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 56, 57, 58, 60, 61, 64, 66, 67, 70, 71, 76, 79, 80, 83, 84, 86, 87, 88, 89, 90, 92, 93, 99, 102, 108, 109, 111, 113, 117, 126, 130, 132, 133, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 161, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 196, 199, 202, 203, 204, 208, 213, 216, 221, 222, 226, 230], "intern": [9, 12, 17, 48, 56, 67, 87, 89, 99, 102, 116, 117, 122, 123, 134, 139, 149, 161, 163, 168, 172, 183, 196, 198, 203, 210, 211, 213, 240], "annotatortransform": [9, 12, 17, 29, 48, 56, 67, 70, 99, 117], "share": [9, 25, 61, 67, 137], "hasinputcol": [9, 67, 137], "hasoutputcol": [9, 67, 137], "A": [9, 11, 13, 15, 16, 19, 22, 24, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 53, 55, 58, 60, 61, 64, 67, 71, 76, 79, 80, 82, 84, 86, 87, 88, 89, 91, 92, 100, 102, 106, 108, 109, 111, 113, 116, 120, 121, 122, 123, 126, 127, 130, 132, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 167, 168, 170, 171, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 208, 209, 210, 211, 213, 217, 222, 223, 229, 230, 240, 242], "convert": [9, 12, 19, 21, 29, 46, 56, 70, 83, 84, 89, 94, 99, 104, 106, 117, 118, 142, 143, 172, 176, 177, 212, 219, 221, 230, 243], "logic": [9, 46, 47, 79, 142, 176, 216, 229], "convers": [9, 79, 217, 221], "modifi": [9, 42, 45, 46, 47, 50, 67, 70, 80, 86, 89, 142, 176], "enabl": [9, 11, 20, 24, 45, 46, 47, 50, 67, 76, 77, 79, 83, 87, 126, 127, 140, 142, 168, 174, 176, 203, 211, 222], "like": [9, 14, 16, 30, 31, 43, 45, 46, 47, 50, 58, 67, 79, 99, 106, 113, 142, 156, 157, 176, 191, 192, 206], "llm": [9, 32, 37, 79, 120, 121, 160, 162, 172, 195, 197], "updat": [9, 21, 42, 79, 80, 87, 89, 97, 124, 203, 208, 222, 223, 224, 226, 240], "integr": [9, 79], "style": [9, 226, 232, 238, 239], "g": [9, 15, 25, 27, 37, 38, 39, 40, 42, 45, 46, 47, 50, 61, 67, 76, 77, 83, 87, 92, 102, 103, 110, 116, 123, 142, 146, 147, 149, 155, 161, 165, 167, 168, 170, 174, 176, 180, 181, 183, 190, 196, 199, 202, 203, 204, 206, 211, 229, 242], "oper": [9, 22, 70, 106, 127], "pure": 9, "scala": [9, 83, 103, 206, 215, 217, 221, 222, 223, 241], "inputcol": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 209], "outputcol": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 209, 238], "outputannotatortyp": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 209], "document_assembl": [9, 11, 12, 13, 15, 21, 30, 31, 32, 37, 83, 88, 91, 92, 93, 102, 122, 123, 140, 157, 161, 163, 170, 174, 192, 196, 198, 204, 226], "setinputcol": [9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 230], "setoutputcol": [9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 230], "def": 9, "new_annot": 9, "r": [9, 25, 27, 146, 147, 180, 181, 213], "z": [9, 79, 206], "re": [9, 53, 74, 120, 121, 153, 160, 162, 172, 187, 195, 197, 213, 216], "begin": [9, 12, 14, 23, 41, 48, 56, 80, 83, 86, 87, 89, 99, 108, 110, 116, 126, 143, 149, 168, 177, 183, 203, 208, 213, 226, 230], "end": [9, 11, 12, 13, 14, 22, 45, 46, 47, 50, 67, 79, 80, 83, 86, 87, 99, 103, 108, 120, 121, 122, 123, 126, 140, 142, 160, 162, 163, 165, 168, 171, 174, 176, 195, 197, 198, 199, 203, 206, 208, 213, 224, 226, 230, 242], "len": [9, 55], "append": [9, 87, 111, 126, 153, 168, 187, 203, 229], "annotatortyp": [9, 29, 56, 117, 143, 177, 216], "metadata": [9, 11, 12, 16, 20, 21, 22, 24, 32, 37, 41, 43, 45, 46, 47, 50, 53, 55, 61, 69, 70, 76, 79, 80, 83, 86, 87, 89, 90, 91, 92, 93, 97, 106, 108, 109, 110, 111, 118, 124, 126, 140, 142, 152, 153, 168, 170, 174, 176, 186, 187, 203, 204, 206, 212, 230], "camel_case_token": 9, "setoutputannotatortyp": 9, "medicalbertforsequenceclassif": [9, 38, 40, 57, 111, 153, 155, 187, 190, 216], "chunk2doc": [9, 56, 118, 143, 177, 216], "test_data": [9, 21, 87, 118, 156, 168, 191, 203, 213], "createdatafram": [9, 10, 11, 15, 16, 19, 21, 22, 24, 29, 32, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 55, 56, 57, 58, 60, 61, 64, 67, 70, 76, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 99, 102, 108, 109, 111, 113, 116, 117, 118, 122, 123, 130, 140, 142, 143, 152, 153, 155, 156, 161, 163, 167, 168, 170, 174, 176, 177, 186, 187, 190, 191, 196, 198, 202, 203, 204], "todf": [9, 10, 11, 15, 16, 19, 21, 22, 24, 29, 32, 37, 38, 39, 40, 41, 43, 46, 48, 51, 53, 55, 56, 57, 58, 60, 61, 64, 67, 70, 76, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 99, 102, 108, 109, 110, 111, 113, 116, 117, 118, 122, 123, 126, 130, 140, 142, 143, 152, 153, 155, 156, 161, 163, 167, 168, 170, 174, 176, 177, 186, 187, 190, 191, 196, 198, 202, 203, 204], "fit": [9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 56, 57, 58, 60, 61, 64, 66, 67, 70, 71, 76, 80, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 102, 103, 108, 109, 110, 111, 113, 116, 117, 122, 123, 126, 127, 130, 132, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 198, 199, 202, 203, 204, 238], "selectexpr": [9, 11, 12, 15, 19, 20, 22, 24, 25, 27, 29, 32, 37, 41, 42, 43, 52, 55, 56, 57, 58, 60, 61, 64, 67, 76, 80, 82, 83, 84, 86, 91, 92, 93, 94, 108, 109, 110, 111, 113, 117, 126, 140, 143, 146, 147, 152, 153, 156, 170, 174, 177, 180, 181, 186, 187, 191, 204, 230], "explod": [9, 15, 22, 24, 25, 27, 37, 41, 42, 43, 52, 55, 58, 60, 61, 64, 70, 76, 80, 82, 83, 86, 91, 92, 94, 104, 108, 109, 110, 111, 113, 126, 146, 147, 152, 153, 156, 170, 180, 181, 186, 187, 191, 204], "cct": 9, "truncat": [9, 11, 12, 16, 19, 20, 22, 24, 25, 27, 29, 38, 39, 40, 41, 42, 43, 46, 48, 51, 52, 56, 57, 58, 60, 61, 64, 67, 70, 76, 82, 83, 84, 91, 92, 94, 99, 102, 103, 108, 109, 110, 111, 113, 117, 122, 123, 126, 127, 130, 140, 142, 143, 146, 147, 152, 153, 155, 156, 161, 163, 165, 167, 170, 174, 176, 177, 180, 181, 186, 187, 190, 191, 196, 198, 199, 202, 204, 208, 230], "5": [9, 12, 15, 19, 24, 25, 27, 41, 43, 45, 46, 47, 50, 55, 60, 61, 67, 80, 86, 87, 89, 94, 106, 109, 126, 142, 146, 147, 152, 156, 168, 176, 180, 181, 186, 191, 203, 206, 210, 213, 230], "14": [9, 19, 41, 46, 48, 52, 142, 176], "25": [9, 19, 46, 52, 103, 116, 142, 149, 176, 183, 213], "27": [9, 19, 76], "30": [9, 15, 19, 48, 93, 102, 122, 123, 156, 161, 163, 191, 196, 198, 213], "32": [9, 19, 43, 79, 118], "33": [9, 12], "medic": [9, 58, 79, 116, 127, 211, 225, 240], "35": [9, 25, 27, 110, 146, 147, 165, 180, 181, 199], "41": [9, 19, 25, 27, 110, 146, 147, 165, 180, 181, 199], "42": [9, 19, 24, 213, 229], "45": 9, "46": [9, 230], "48": [9, 76], "sequenc": [9, 11, 13, 15, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 50, 51, 55, 64, 67, 71, 76, 79, 80, 87, 89, 92, 108, 111, 113, 116, 127, 132, 140, 142, 146, 147, 149, 153, 155, 156, 157, 158, 168, 170, 174, 176, 180, 181, 183, 187, 190, 191, 192, 193, 203, 204, 206, 237], "49": [9, 43, 213], "56": [9, 25, 27, 146, 147, 165, 180, 181, 199], "57": [9, 12], "70": [9, 24, 87, 203, 238], "72": [9, 80, 86], "74": 9, "76": [9, 230], "84": [9, 99, 213], "85": 9, "functionstr": 9, "getter_attr": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "uid": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 209], "clear": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "map": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 213, 221, 234, 240], "been": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "explicitli": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "copi": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 210], "_type": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "parammap": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "jp": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "some": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 229, 240], "implement": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "call": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "companion": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "compon": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "so": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "both": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209, 211, 222, 223, 228], "wrapper": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 234], "javaparam": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "explainparam": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "explain": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "singl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 226, 238], "its": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "doc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "valu": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 211, 216, 221, 224, 228, 229, 230, 234, 242], "suppli": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "string": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 212, 213, 216, 221, 224, 230, 234], "extractparammap": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "merg": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 74, 76, 79, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 215, 216], "them": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209], "flat": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "latter": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "conflict": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 229], "order": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "getinputcol": [9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "getordefault": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "rais": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 215, 230, 232], "error": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 73, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 230, 232], "neither": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "getoutputannotatortyp": 9, "getoutputcol": [9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "getparam": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "paramnam": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "getparamvalu": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "hasdefault": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "hasparam": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "given": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 138, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 209, 211, 221, 223, 224, 229, 230, 232, 240], "isdefin": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "isset": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "classmethod": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "load": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 210, 213, 221, 222], "rl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203], "read": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 213, 216], "shortcut": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "mlreader": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "setparamvalu": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "setparam": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "dataset": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 213, 216], "overrid": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206], "javamlwrit": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "mlwriter": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 137, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "annotationmerg": [10, 216], "java_model": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 67, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 118, 120, 121, 122, 123, 126, 130, 133, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "common": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 77, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 122, 126, 130, 140, 142, 143, 146, 147, 149, 152, 157, 165, 168, 171, 172, 174, 176, 177, 180, 181, 183, 186, 192, 199, 203, 216], "annotatormodelintern": [10, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 62, 64, 66, 71, 76, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 102, 103, 104, 106, 109, 115, 116, 118, 120, 122, 126, 130, 133, 147, 181], "multipl": [10, 46, 47, 50, 58, 61, 64, 111, 142, 153, 176, 187, 229], "inputtyp": [10, 83, 118], "wordpiec": [10, 118, 216], "word_embed": [10, 11, 13, 15, 16, 29, 41, 48, 53, 55, 58, 70, 87, 108, 118, 140, 156, 168, 174, 191, 203], "sentence_embed": [10, 33, 55, 59, 60, 61, 116, 117, 118, 149, 156, 158, 183, 191, 193], "categori": [10, 30, 31, 33, 34, 35, 37, 38, 40, 57, 71, 82, 108, 109, 111, 118, 152, 153, 155, 156, 157, 158, 173, 186, 187, 190, 191, 192, 193, 208, 240], "sentiment": [10, 118, 156, 191], "po": [10, 24, 87, 108, 118, 139, 168, 203, 216, 226], "named_ent": [10, 39, 86, 87, 88, 89, 91, 92, 118, 156, 167, 168, 170, 191, 202, 203, 204, 213], "depend": [10, 26, 61, 64, 82, 87, 92, 99, 102, 108, 109, 110, 111, 115, 118, 127, 152, 153, 161, 168, 170, 186, 187, 196, 203, 204, 226], "labeled_depend": [10, 25, 27, 29, 118, 146, 147, 165, 180, 181, 199], "languag": [10, 11, 13, 15, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 51, 55, 56, 60, 61, 64, 67, 71, 76, 79, 80, 87, 91, 92, 102, 108, 109, 111, 113, 116, 118, 121, 122, 123, 126, 138, 140, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 167, 168, 170, 174, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 209, 210, 211, 213, 224, 230], "keyword": [10, 16, 22, 74, 76, 77, 118, 216, 228, 235], "empty_data": [10, 48, 53, 116], "document1": 10, "document2": [10, 48], "setinputtyp": [10, 83, 118], "all_doc": 10, "pipelinemodel": [10, 30, 31, 87, 156, 157, 168, 191, 192, 203, 207, 209, 216, 231, 238], "setstag": [10, 12, 15, 19, 22, 23, 25, 27, 30, 31, 32, 37, 38, 39, 40, 42, 48, 56, 57, 58, 60, 61, 64, 66, 71, 76, 82, 84, 87, 91, 92, 111, 113, 117, 118, 126, 143, 146, 147, 153, 155, 156, 157, 165, 167, 168, 170, 177, 180, 181, 187, 190, 191, 192, 199, 202, 203, 204], "lp": 10, "lightpipelin": [10, 46, 47, 53, 142, 176, 216, 226], "replic": 10, "23": [10, 21, 113, 171], "inputannotatortyp": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 209], "lazyannot": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "optionalinputannotatortyp": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "skiplpinputcolsvalid": [10, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 62, 64, 66, 71, 76, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 102, 103, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 122, 123, 126, 130, 132, 133, 140, 142, 146, 147, 149, 152, 153, 155, 157, 158, 160, 161, 162, 163, 165, 167, 168, 174, 176, 180, 181, 183, 186, 187, 190, 192, 193, 195, 196, 197, 198, 199, 202, 203], "current": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 132, 133, 134, 136, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 212, 232, 240, 242], "getlazyannot": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "lazili": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "recursivepipelin": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 216], "inputcolsvalid": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "setforceinputtypevalid": [10, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 62, 64, 66, 71, 76, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 102, 103, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 146, 147, 149, 152, 153, 155, 157, 158, 160, 161, 162, 163, 165, 167, 168, 174, 176, 180, 181, 183, 186, 187, 190, 192, 193, 195, 196, 197, 198, 199, 202, 203], "etfm": [10, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 53, 55, 57, 58, 59, 62, 64, 66, 71, 76, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 102, 103, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 146, 147, 149, 152, 153, 155, 157, 158, 160, 161, 162, 163, 165, 167, 168, 174, 176, 180, 181, 183, 186, 187, 190, 192, 193, 195, 196, 197, 198, 199, 202, 203], "filter": [10, 11, 14, 20, 24, 26, 29, 41, 42, 57, 58, 69, 76, 77, 80, 84, 89, 100, 102, 106, 108, 110, 118, 120, 121, 122, 123, 128, 140, 160, 161, 162, 163, 174, 195, 196, 197, 198, 210, 213, 224, 230], "setlazyannot": [10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 71, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 132, 133, 134, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204], "assertiondlapproach": [11, 127, 140, 174, 216], "annotatorapproachintern": [11, 13, 24, 25, 27, 30, 31, 43, 46, 51, 55, 64, 71, 76, 80, 87, 113, 116, 132, 147, 181], "hasengin": [11, 15, 22, 38, 39, 40, 60, 61, 71, 87, 92, 102, 111, 116, 120, 122, 216], "handle_exception_param": [11, 16, 24, 25, 41, 42, 46, 60, 71, 74, 80, 108, 109, 116, 172], "handleexceptionparam": [11, 16, 20, 24, 25, 41, 42, 43, 46, 60, 71, 73, 80, 108, 109, 116], "white_black_list_param": [11, 14, 15, 26, 32, 69, 74, 84, 172], "whiteblacklistparam": [11, 14, 15, 26, 32, 57, 58, 69, 84, 128], "algorithm": [11, 13, 22, 30, 31, 126, 140, 157, 174, 192], "deep": [11, 15, 32, 33, 34, 35, 71, 87, 92, 108, 116, 127, 140, 149, 156, 158, 168, 170, 174, 183, 191, 193, 203, 204], "learn": [11, 15, 32, 33, 34, 35, 71, 79, 87, 92, 108, 116, 127, 140, 149, 156, 158, 168, 170, 174, 183, 191, 193, 203, 204, 206], "absent": [11, 15, 16, 20, 32, 41, 70, 140, 174, 213], "hypothet": [11, 20, 140, 174], "condit": [11, 58, 87, 140, 168, 174, 203, 240], "associated_with_other_person": [11, 140, 174], "etc": [11, 16, 61, 103, 116, 140, 149, 165, 174, 183, 199], "term": [11, 30, 31, 46, 47, 50, 51, 67, 127, 140, 142, 157, 171, 174, 176, 192, 208, 211], "To": [11, 13, 15, 20, 24, 38, 39, 40, 43, 52, 79, 108, 113, 116, 155, 167, 190, 202, 213], "pretrain": [11, 13, 15, 16, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 55, 57, 58, 60, 61, 64, 67, 70, 71, 76, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 99, 102, 108, 109, 110, 111, 113, 116, 117, 118, 121, 122, 123, 126, 138, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 165, 167, 168, 170, 172, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 199, 202, 203, 204, 206, 208, 216, 224], "assertiondlmodel": [11, 14, 20, 70, 99, 140, 174, 216], "startcol": [11, 13, 56, 140, 143, 174, 177], "target": [11, 12, 13, 15, 41, 42, 55, 56, 61, 67, 71, 79, 108, 109, 120, 121, 140, 143, 152, 160, 162, 173, 174, 177, 186, 195, 197, 206, 213], "endcol": [11, 13, 140, 174], "batchsiz": [11, 22, 32, 33, 34, 35, 37, 38, 40, 60, 61, 71, 79, 87, 91, 92, 102, 108, 109, 120, 121, 122, 123, 140, 152, 155, 156, 158, 160, 161, 162, 163, 167, 168, 170, 174, 186, 190, 191, 193, 195, 196, 197, 198, 202, 203, 204], "size": [11, 22, 32, 33, 34, 35, 37, 38, 40, 45, 46, 47, 50, 60, 61, 71, 79, 87, 91, 92, 100, 102, 108, 120, 121, 122, 123, 126, 127, 130, 140, 142, 155, 156, 158, 160, 161, 162, 163, 167, 168, 170, 174, 176, 190, 191, 193, 195, 196, 197, 198, 202, 203, 204], "optim": [11, 32, 33, 34, 35, 71, 79, 87, 108, 140, 158, 168, 174, 193, 203], "process": [11, 14, 15, 16, 20, 24, 25, 26, 27, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 56, 57, 58, 67, 69, 70, 71, 73, 79, 80, 84, 87, 89, 92, 102, 108, 109, 110, 111, 116, 120, 121, 122, 123, 126, 127, 128, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 158, 160, 161, 162, 163, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 193, 195, 196, 197, 198, 202, 203, 204, 211, 213, 217, 221, 222, 223, 228, 229, 238, 243], "epoch": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203, 214, 237], "learningr": [11, 32, 33, 34, 35, 71, 108, 140, 158, 174, 193], "rate": [11, 32, 33, 34, 35, 71, 79, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203, 206, 213], "dropout": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203], "layer": [11, 15, 32, 33, 34, 35, 38, 39, 40, 71, 79, 87, 108, 127, 140, 155, 158, 167, 168, 174, 190, 193, 202, 203], "maxsentlen": [11, 140, 174], "graphfold": [11, 87, 127, 140, 168, 174, 203], "folder": [11, 15, 22, 32, 33, 34, 35, 37, 38, 39, 40, 60, 61, 71, 79, 87, 91, 92, 102, 108, 109, 111, 121, 122, 123, 127, 140, 152, 153, 155, 156, 158, 161, 162, 163, 167, 168, 170, 174, 186, 187, 190, 191, 193, 196, 197, 198, 202, 203, 204, 210, 224, 238], "extern": [11, 46, 50, 76, 80, 87, 89, 113, 127, 140, 142, 168, 174, 176, 203, 221], "graph": [11, 87, 108, 127, 140, 154, 168, 172, 174, 188, 203, 214, 216], "distribut": [11, 71, 79, 87, 108, 116, 136, 140, 149, 156, 168, 174, 183, 191, 203], "hdf": [11, 71, 87, 108, 116, 140, 149, 156, 168, 174, 183, 191, 203, 224], "dbf": [11, 71, 87, 108, 116, 140, 149, 156, 168, 174, 183, 191, 203], "cloud": [11, 71, 87, 108, 116, 140, 149, 156, 168, 174, 183, 191, 203], "storag": [11, 64, 71, 87, 108, 116, 140, 149, 156, 168, 174, 183, 191, 203], "s3": [11, 55, 71, 87, 108, 116, 140, 149, 156, 168, 174, 183, 191, 203, 210, 224], "graphfil": [11, 87, 127, 140, 168, 174, 203], "specifi": [11, 12, 14, 21, 30, 31, 32, 33, 34, 35, 41, 42, 45, 46, 47, 48, 50, 53, 58, 61, 67, 70, 71, 79, 80, 84, 86, 87, 89, 104, 108, 110, 111, 124, 126, 140, 142, 153, 156, 157, 158, 168, 174, 176, 187, 191, 192, 193, 203, 211, 213, 215, 221, 222, 223, 224, 228, 230, 231, 240], "search": [11, 16, 55, 87, 116, 140, 149, 168, 174, 183, 203, 216, 221, 230], "happen": [11, 87, 127, 140, 168, 174, 203, 230], "configprotobyt": [11, 15, 22, 38, 39, 40, 60, 61, 87, 92, 102, 111, 120, 121, 122, 123, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204], "configproto": [11, 15, 22, 38, 39, 40, 60, 61, 87, 92, 102, 111, 120, 121, 122, 123, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204], "tensorflow": [11, 15, 22, 38, 39, 40, 60, 61, 71, 87, 92, 102, 108, 111, 120, 121, 122, 123, 127, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204, 216], "byte": [11, 15, 22, 38, 39, 40, 60, 61, 87, 92, 102, 111, 120, 121, 122, 123, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204], "arrai": [11, 14, 15, 21, 22, 30, 31, 38, 39, 40, 53, 56, 60, 61, 66, 67, 70, 80, 87, 88, 89, 92, 99, 102, 111, 120, 121, 122, 123, 124, 140, 142, 143, 153, 155, 156, 157, 160, 161, 162, 163, 167, 168, 170, 174, 176, 177, 187, 190, 191, 192, 195, 196, 197, 198, 202, 203, 204, 211], "config_proto": [11, 140, 174], "serializetostr": [11, 140, 174], "validationsplit": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203], "proport": [11, 87, 140, 156, 168, 174, 191, 203], "mean": [11, 16, 22, 43, 46, 47, 60, 61, 87, 93, 142, 168, 176, 203, 211, 230], "against": [11, 22, 64, 76, 87, 140, 156, 168, 174, 191, 203], "testdataset": [11, 87, 140, 156, 168, 174, 191, 203], "calcul": [11, 16, 22, 41, 42, 60, 87, 116, 140, 149, 156, 168, 171, 174, 183, 191, 203, 230, 240], "statist": [11, 87, 140, 156, 168, 174, 191, 203], "dure": [11, 45, 46, 47, 50, 51, 55, 67, 73, 76, 77, 79, 84, 87, 109, 140, 142, 152, 156, 168, 174, 176, 186, 191, 203, 211], "includeconfid": [11, 87, 140, 168, 174, 203], "confid": [11, 14, 15, 16, 24, 25, 27, 32, 33, 34, 35, 37, 41, 43, 46, 47, 70, 71, 80, 87, 89, 91, 92, 99, 108, 111, 116, 140, 142, 146, 147, 149, 153, 158, 165, 168, 170, 174, 176, 180, 181, 183, 187, 193, 199, 203, 204, 208, 230], "score": [11, 22, 32, 33, 34, 35, 71, 87, 91, 92, 108, 111, 140, 153, 158, 168, 170, 171, 174, 187, 193, 203, 204, 208, 214, 237, 242], "enableoutputlog": [11, 87, 140, 156, 168, 174, 191, 203], "log": [11, 13, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203, 214, 228, 237], "outputlogspath": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203], "won": [11, 71, 87, 108, 140, 156, 168, 174, 191, 203], "store": [11, 71, 79, 87, 110, 134, 140, 156, 168, 174, 191, 203], "disk": [11, 71, 87, 108, 140, 156, 168, 174, 191, 203], "verbos": [11, 87, 140, 156, 168, 174, 191, 203, 214, 237, 242], "level": [11, 22, 23, 24, 41, 42, 43, 64, 67, 80, 87, 140, 156, 168, 174, 191, 203, 213, 240], "scopewindow": [11, 16, 17, 41, 42, 60, 108, 140, 174], "scope": [11, 16, 17, 41, 42, 60, 90, 108, 140, 174], "window": [11, 16, 17, 41, 42, 60, 74, 87, 108, 120, 121, 140, 160, 162, 168, 172, 174, 195, 197, 203, 216, 230], "express": [11, 16, 17, 20, 24, 41, 42, 46, 67, 80, 113, 126, 127, 140, 142, 174, 176], "datasetinfo": [11, 32, 33, 34, 35, 71, 87, 108, 116, 140, 149, 158, 168, 174, 183, 193, 203], "about": [11, 32, 33, 34, 35, 46, 58, 71, 87, 108, 116, 127, 140, 149, 158, 168, 174, 183, 193, 203, 208, 209], "being": [11, 32, 33, 34, 35, 45, 46, 47, 50, 67, 71, 87, 108, 116, 118, 126, 127, 140, 142, 149, 156, 158, 168, 174, 176, 183, 191, 193, 203, 240], "doc2chunk": [11, 48, 56, 93, 143, 177, 216], "setchunkcol": [11, 13, 56, 88, 140, 143, 174, 177], "setstartcol": [11, 13, 56, 140, 174], "setstartcolbytokenindex": [11, 56], "setfailonmiss": [11, 56], "setlowercas": [11, 25, 27, 56, 94, 146, 147, 180, 181], "wordembeddingsmodel": [11, 13, 15, 16, 22, 25, 27, 29, 32, 41, 42, 46, 48, 51, 53, 55, 58, 60, 61, 70, 80, 82, 84, 86, 87, 88, 89, 108, 109, 110, 111, 140, 142, 146, 147, 152, 153, 165, 168, 174, 176, 180, 181, 186, 187, 199, 203, 216], "embeddings_clin": [11, 13, 15, 16, 22, 25, 27, 29, 32, 41, 42, 46, 48, 51, 53, 58, 61, 70, 80, 82, 84, 86, 88, 89, 108, 109, 110, 111, 140, 142, 146, 147, 152, 153, 165, 174, 176, 180, 181, 186, 187, 199], "en": [11, 13, 15, 16, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 55, 57, 58, 60, 61, 64, 67, 70, 71, 76, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 99, 102, 108, 109, 110, 111, 113, 116, 117, 121, 122, 123, 126, 138, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 165, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 211, 224, 230, 239], "setcasesensit": [11, 13, 14, 15, 16, 20, 22, 24, 26, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 57, 58, 60, 61, 64, 69, 76, 80, 84, 88, 89, 92, 106, 109, 111, 116, 117, 118, 126, 128, 140, 149, 152, 153, 155, 157, 167, 170, 174, 183, 186, 187, 190, 192, 202, 204], "setlabelcol": [11, 13, 31, 32, 33, 34, 35, 71, 108, 116, 140, 149, 157, 158, 174, 183, 192, 193], "setbatchs": [11, 22, 32, 33, 34, 35, 60, 61, 71, 79, 87, 91, 92, 102, 108, 109, 120, 121, 122, 123, 140, 152, 156, 158, 160, 161, 162, 163, 168, 170, 174, 186, 191, 193, 195, 196, 197, 198, 203, 204], "128": [11, 38, 39, 40, 111, 126, 140, 153, 155, 167, 174, 187, 190, 202], "setdropout": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203], "012": [11, 140, 174], "setlearningr": [11, 32, 33, 34, 35, 71, 108, 140, 158, 174, 193], "015": [11, 140, 174], "setepoch": [11, 140, 174], "setscopewindow": [11, 16, 17, 60, 108, 140, 174], "setendcol": [11, 13, 140, 174], "setmaxsentlen": [11, 140, 174], "250": [11, 61, 140, 174], "assertionpipelin": [11, 13, 20, 140, 149, 174, 183], "assertion_model": 11, "blacklist": [11, 14, 15, 20, 24, 26, 32, 41, 46, 47, 57, 58, 69, 80, 84, 89, 128, 140, 142, 174, 176], "casesensit": [11, 14, 15, 16, 20, 22, 24, 26, 32, 37, 38, 39, 40, 41, 42, 43, 57, 58, 60, 61, 64, 69, 76, 80, 84, 89, 92, 106, 111, 116, 126, 128, 140, 149, 153, 155, 167, 170, 174, 183, 187, 190, 202, 204], "doexceptionhandl": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 71, 73, 80, 87, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 168, 174, 176, 180, 181, 183, 186, 193, 203], "engin": [11, 15, 32, 33, 34, 35, 71, 87, 92, 108, 116, 140, 149, 156, 158, 168, 170, 174, 183, 191, 193, 203, 204], "whitelist": [11, 14, 15, 20, 24, 26, 32, 57, 58, 69, 80, 84, 89, 128, 140, 174], "m": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 117, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 171, 174, 176, 180, 181, 183, 191, 192, 193, 203, 211], "fitmultipl": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "iter": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203, 226, 228], "abc": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "thread": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 79, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "safe": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 57, 64, 71, 76, 77, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "which": [11, 13, 14, 15, 16, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 55, 60, 61, 64, 66, 67, 70, 71, 73, 76, 79, 80, 87, 89, 91, 92, 93, 99, 100, 102, 106, 108, 109, 110, 111, 113, 116, 120, 121, 122, 123, 126, 127, 132, 136, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 167, 168, 170, 171, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 206, 208, 230, 232, 240], "next": [11, 13, 16, 24, 25, 27, 30, 31, 32, 33, 34, 35, 41, 42, 43, 46, 51, 55, 64, 71, 73, 76, 80, 87, 89, 93, 106, 108, 109, 113, 116, 127, 132, 140, 142, 146, 147, 149, 152, 156, 157, 158, 168, 174, 176, 180, 181, 183, 186, 191, 192, 193, 203], "modeliter": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "mai": [11, 12, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 45, 46, 47, 50, 51, 55, 56, 58, 61, 64, 71, 76, 79, 80, 87, 89, 106, 108, 110, 113, 116, 117, 127, 132, 140, 142, 143, 146, 147, 149, 156, 157, 158, 168, 171, 174, 176, 177, 180, 181, 183, 191, 192, 193, 203, 229], "_fitmultipleiter": [11, 13, 24, 25, 27, 30, 31, 32, 33, 34, 35, 43, 46, 51, 55, 64, 71, 76, 80, 87, 89, 108, 113, 116, 127, 132, 140, 142, 146, 147, 149, 156, 157, 158, 168, 174, 176, 180, 181, 183, 191, 192, 193, 203], "getengin": [11, 15, 32, 33, 34, 35, 71, 87, 92, 108, 116, 140, 149, 156, 158, 168, 170, 174, 183, 191, 193, 203, 204], "setblacklist": [11, 14, 15, 20, 24, 26, 32, 46, 47, 57, 58, 69, 80, 84, 89, 128, 140, 142, 174, 176], "ignor": [11, 14, 15, 20, 22, 24, 26, 32, 37, 38, 39, 40, 46, 47, 57, 58, 60, 61, 64, 69, 79, 80, 84, 89, 92, 100, 102, 106, 111, 116, 120, 121, 122, 123, 128, 140, 142, 149, 153, 155, 160, 161, 162, 163, 167, 170, 174, 176, 183, 187, 190, 195, 196, 197, 198, 202, 204, 206], "do": [11, 14, 15, 20, 24, 26, 32, 43, 46, 47, 57, 58, 69, 80, 84, 87, 89, 90, 128, 140, 142, 168, 174, 176, 203], "iob": [11, 14, 15, 20, 24, 26, 32, 57, 58, 69, 80, 84, 86, 87, 89, 128, 140, 168, 174, 203, 213, 242], "prefix": [11, 14, 15, 16, 20, 24, 26, 32, 42, 43, 53, 55, 57, 58, 69, 79, 80, 84, 87, 89, 128, 140, 168, 174, 203, 206, 242], "determin": [11, 14, 15, 20, 22, 23, 24, 26, 32, 41, 42, 45, 46, 47, 50, 53, 57, 58, 62, 69, 80, 84, 89, 108, 110, 111, 126, 127, 128, 140, 142, 153, 174, 176, 187, 208, 211, 230], "definit": [11, 14, 15, 20, 24, 26, 32, 57, 58, 64, 69, 80, 84, 89, 92, 111, 128, 140, 153, 170, 174, 187, 204], "white": [11, 14, 15, 20, 24, 26, 32, 41, 48, 57, 58, 69, 80, 84, 89, 128, 140, 174], "black": [11, 14, 15, 20, 24, 26, 32, 41, 57, 58, 69, 80, 84, 89, 128, 140, 174, 238, 239], "setconfigprotobyt": [11, 15, 22, 38, 39, 40, 60, 61, 87, 92, 102, 111, 120, 121, 122, 123, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204], "conf": [11, 87, 140, 168, 174, 203], "contai": [11, 140, 174], "setdatasetinfo": [11, 32, 33, 34, 35, 71, 87, 108, 116, 140, 149, 158, 168, 174, 183, 193, 203], "setdenylist": [11, 14, 15, 20, 24, 26, 32, 57, 58, 69, 80, 84, 89, 128, 140, 174], "setdoexceptionhandl": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 71, 73, 80, 87, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 168, 174, 176, 180, 181, 183, 186, 193, 203, 231], "except": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 47, 71, 73, 80, 87, 89, 106, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 168, 171, 174, 176, 180, 181, 183, 186, 193, 203, 230, 231, 232], "handl": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 53, 71, 73, 80, 83, 89, 108, 109, 116, 127, 140, 142, 146, 147, 149, 152, 158, 174, 176, 180, 181, 183, 186, 193, 223, 228, 231], "caus": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 58, 71, 73, 80, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 174, 176, 180, 181, 183, 186, 193, 240], "pass": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 57, 58, 71, 73, 80, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 174, 176, 180, 181, 183, 186, 193], "emit": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 71, 73, 80, 87, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 168, 174, 176, 180, 181, 183, 186, 193, 203], "messag": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 71, 73, 80, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 174, 176, 180, 181, 183, 186, 193, 232], "continu": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 47, 71, 73, 79, 80, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 171, 174, 176, 180, 181, 183, 186, 193, 206], "come": [11, 14, 16, 20, 22, 24, 25, 27, 29, 32, 33, 34, 35, 41, 42, 43, 45, 46, 47, 50, 71, 73, 80, 87, 89, 108, 109, 116, 126, 140, 142, 146, 147, 149, 152, 158, 168, 174, 176, 180, 181, 183, 186, 193, 203], "perform": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 45, 46, 47, 50, 51, 67, 71, 73, 79, 80, 87, 89, 102, 108, 109, 110, 116, 120, 121, 122, 123, 127, 140, 142, 146, 147, 149, 152, 158, 160, 161, 162, 163, 168, 174, 176, 180, 181, 183, 186, 193, 195, 196, 197, 198, 203, 211, 214, 228, 237, 242], "penalti": [11, 16, 24, 25, 27, 32, 33, 34, 35, 41, 42, 43, 46, 71, 73, 79, 80, 87, 89, 108, 109, 116, 140, 142, 146, 147, 149, 152, 158, 168, 174, 176, 180, 181, 183, 186, 193, 203, 206], "float": [11, 14, 22, 24, 25, 27, 30, 31, 32, 33, 34, 35, 46, 47, 55, 60, 61, 62, 66, 71, 79, 80, 87, 89, 91, 92, 106, 108, 109, 116, 140, 142, 146, 147, 149, 152, 156, 157, 158, 168, 170, 174, 176, 180, 181, 183, 186, 191, 192, 193, 203, 204, 208, 214, 237], "setenableoutputlog": [11, 87, 140, 156, 168, 174, 191, 203], "srt": [11, 127, 140, 174], "end_col": [11, 108, 140, 174], "setgraphfil": [11, 87, 127, 140, 168, 174, 203], "setgraphfold": [11, 87, 127, 140, 168, 174, 203], "setincludeconfid": [11, 87, 140, 168, 174, 203], "waht": [11, 140, 174], "colnam": [11, 140, 174], "lr": [11, 87, 140, 156, 168, 174, 191, 203], "maximum": [11, 25, 27, 30, 31, 37, 87, 92, 100, 102, 106, 110, 116, 120, 121, 122, 123, 126, 127, 140, 146, 147, 156, 157, 160, 161, 162, 163, 168, 170, 174, 180, 181, 191, 192, 195, 196, 197, 198, 203, 204, 229], "setoutputlogspath": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203], "left": [11, 16, 17, 25, 27, 60, 108, 109, 110, 140, 146, 147, 152, 174, 180, 181, 186, 208], "right": [11, 15, 16, 17, 22, 25, 27, 60, 108, 109, 110, 140, 146, 147, 152, 174, 180, 181, 186, 208], "must": [11, 12, 13, 16, 17, 22, 25, 27, 41, 45, 46, 47, 48, 50, 56, 60, 67, 70, 76, 79, 87, 99, 103, 106, 108, 113, 117, 140, 142, 143, 146, 147, 156, 165, 168, 174, 176, 177, 180, 181, 191, 199, 203, 211, 229, 230], "non": [11, 16, 17, 45, 46, 47, 50, 60, 61, 67, 108, 140, 142, 171, 174, 176, 229], "start_col": [11, 140, 174], "settestdataset": [11, 87, 140, 156, 168, 174, 191, 203], "read_a": [11, 24, 43, 46, 64, 76, 80, 87, 89, 113, 140, 142, 156, 168, 174, 176, 191, 203], "reada": [11, 24, 43, 46, 64, 76, 80, 87, 89, 113, 140, 142, 156, 168, 174, 176, 191, 203, 216], "setvalidationsplit": [11, 32, 33, 34, 35, 71, 87, 108, 140, 156, 158, 168, 174, 191, 193, 203], "setverbos": [11, 87, 140, 156, 168, 174, 191, 203], "setwhitelist": [11, 14, 15, 20, 24, 26, 32, 55, 57, 58, 69, 80, 84, 89, 128, 140, 174], "dl": [11, 127, 216], "hasstorageref": [11, 13, 32, 87], "approach": [11, 22, 25, 27, 32, 37, 127, 132, 134, 137, 140, 146, 147, 153, 165, 174, 180, 181, 187, 199, 229], "replacelabel": [11, 89, 140, 174], "targetnerlabel": [11, 13, 140, 174], "mark": [11, 13, 15, 22, 48, 103, 140, 165, 174, 199], "fever": [11, 15, 20, 140, 174], "sore": [11, 15, 20, 140, 174], "throat": [11, 15, 20, 140, 174], "stomach": [11, 15, 20, 24, 140, 174], "pain": [11, 15, 20, 24, 140, 174], "she": [11, 84, 126, 130, 140, 174, 213], "maintain": [11, 15, 45, 46, 47, 50, 140, 142, 174, 176, 211], "epidur": [11, 15, 20, 140, 174], "pca": [11, 15, 20, 140, 174], "sentencedetector": [11, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 27, 29, 32, 41, 42, 43, 46, 51, 55, 57, 58, 60, 61, 70, 80, 84, 86, 87, 88, 89, 91, 92, 110, 111, 113, 116, 118, 130, 140, 142, 146, 147, 149, 153, 156, 165, 168, 170, 174, 176, 180, 181, 183, 187, 191, 199, 203, 204, 216], "nermodel": [11, 20, 86, 87, 89, 140, 168, 174, 203], "medicalnermodel": [11, 15, 16, 22, 25, 27, 29, 32, 41, 42, 46, 48, 51, 53, 58, 60, 61, 70, 80, 82, 84, 86, 87, 88, 89, 108, 109, 110, 111, 140, 142, 146, 147, 152, 153, 165, 168, 174, 176, 180, 181, 186, 187, 199, 203, 216], "ner_clin": [11, 15, 16, 82, 110, 111, 140, 153, 174, 187], "nerconvert": [11, 16, 20, 22, 32, 42, 46, 48, 51, 55, 60, 80, 82, 86, 89, 108, 109, 110, 111, 140, 142, 152, 153, 174, 176, 186, 187, 216], "ner_chunk": [11, 15, 16, 20, 22, 25, 27, 29, 32, 41, 42, 45, 46, 47, 48, 50, 51, 53, 55, 58, 60, 61, 70, 74, 82, 84, 85, 86, 89, 103, 108, 109, 110, 111, 117, 138, 140, 142, 146, 147, 152, 153, 165, 174, 176, 180, 181, 186, 187, 199, 238], "clinicalassert": [11, 20, 140, 174], "assertion_dl": [11, 140, 174], "assertionmodel": [11, 13, 20, 140, 149, 174, 183], "entityassertioncasesensit": [11, 140, 174], "storageref": [11, 13, 22, 60, 61, 64, 87, 140, 156, 168, 174, 191, 203], "getentityassert": [11, 140, 174], "getreplacelabel": [11, 140, 174], "replac": [11, 42, 43, 45, 46, 47, 48, 49, 50, 51, 67, 74, 80, 89, 94, 140, 142, 174, 176, 211, 216, 222, 228], "getstorageref": [11, 13, 22, 60, 61, 64, 87, 140, 156, 168, 174, 191, 203], "uniqu": [11, 13, 22, 55, 60, 61, 64, 87, 140, 156, 168, 174, 191, 203, 208], "static": [11, 13, 15, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 45, 46, 47, 50, 53, 55, 60, 61, 64, 67, 71, 76, 79, 80, 87, 90, 91, 92, 102, 108, 109, 111, 113, 116, 121, 122, 123, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 209, 210, 224, 240, 241], "assertion_jsl_aug": [11, 70], "lang": [11, 13, 15, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 45, 46, 47, 50, 55, 60, 61, 64, 67, 71, 76, 79, 80, 87, 90, 91, 92, 102, 108, 109, 111, 113, 116, 121, 122, 123, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 206, 210], "remote_loc": [11, 13, 15, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 46, 55, 60, 61, 64, 67, 71, 76, 79, 80, 87, 90, 91, 92, 102, 108, 109, 111, 113, 116, 121, 122, 123, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 206, 210, 224], "download": [11, 13, 15, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 46, 55, 60, 61, 67, 71, 76, 79, 80, 87, 91, 92, 102, 108, 109, 111, 113, 116, 121, 122, 123, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 210, 224, 225], "remot": [11, 13, 15, 16, 22, 25, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 46, 55, 60, 61, 67, 71, 76, 79, 80, 87, 91, 92, 102, 108, 109, 111, 113, 116, 121, 122, 123, 126, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 158, 161, 162, 163, 167, 168, 170, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 210, 224], "resourc": [11, 13, 21, 22, 23, 30, 31, 32, 33, 34, 35, 37, 46, 55, 60, 61, 64, 66, 67, 71, 76, 79, 80, 87, 89, 102, 113, 116, 118, 121, 122, 123, 126, 142, 156, 158, 161, 162, 163, 168, 176, 191, 193, 196, 197, 198, 203, 210], "Will": [11, 13, 22, 30, 31, 32, 33, 34, 35, 37, 46, 55, 60, 61, 71, 76, 79, 80, 102, 113, 116, 121, 122, 123, 158, 161, 162, 163, 193, 196, 197, 198, 203], "repositori": [11, 13, 22, 30, 31, 32, 33, 34, 35, 37, 46, 55, 60, 61, 71, 76, 79, 80, 102, 113, 116, 121, 122, 123, 158, 161, 162, 163, 193, 196, 197, 198, 203], "restor": [11, 13, 15, 22, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 55, 60, 61, 67, 71, 76, 79, 80, 87, 91, 92, 102, 111, 113, 116, 121, 122, 123, 127, 153, 155, 158, 161, 162, 163, 167, 168, 170, 187, 190, 193, 196, 197, 198, 202, 203, 204, 221], "b": [11, 15, 16, 22, 38, 39, 40, 41, 60, 61, 76, 77, 86, 87, 88, 89, 92, 102, 111, 120, 121, 122, 123, 140, 153, 155, 156, 160, 161, 162, 163, 167, 168, 170, 174, 187, 190, 191, 195, 196, 197, 198, 202, 203, 204, 242], "bytearrai": [11, 140, 174], "setentityassert": [11, 140, 174], "assertionent": [11, 140, 174], "entityassert": [11, 140, 174], "earlier": [11, 140, 174], "than": [11, 14, 22, 24, 45, 46, 47, 50, 67, 79, 80, 87, 90, 102, 106, 108, 110, 116, 140, 142, 161, 168, 171, 174, 176, 196, 203, 206, 211], "setentityassertioncasesensit": [11, 70, 140, 174], "p": [11, 21, 25, 27, 79, 87, 89, 124, 127, 134, 137, 140, 146, 147, 156, 168, 174, 180, 181, 191, 203, 206, 242], "setreplacelabel": [11, 89, 140, 174], "later": [11, 55, 140, 174, 208], "setstorageref": [11, 13, 22, 60, 61, 64, 87, 140, 156, 168, 174, 191, 203], "assertionchunkconvert": [12, 216], "In": [12, 22, 43, 48, 61, 64, 76, 87, 99, 103, 109, 113, 127, 152, 156, 165, 168, 186, 191, 199, 203], "issu": [12, 46, 88], "indic": [12, 21, 22, 32, 33, 34, 35, 37, 45, 71, 80, 89, 97, 102, 108, 124, 158, 161, 171, 193, 196, 211, 215, 217, 221, 231], "lead": [12, 127], "loss": [12, 87, 127, 168, 203, 214, 237], "add": [12, 16, 42, 79, 82, 84, 87, 89, 93, 94, 103, 104, 110, 126, 165, 168, 199, 203, 207, 211, 221], "robust": 12, "wai": [12, 22, 45, 46, 47, 50, 58, 64, 142, 176], "improv": [12, 87, 102, 111, 122, 123, 127, 153, 161, 163, 168, 187, 196, 198, 203], "reliabl": 12, "popul": [12, 122, 123, 163, 198], "alab": [12, 172, 226], "chunktextcol": 12, "chunkbegincol": 12, "chunkendcol": 12, "outputtokenbegincol": 12, "outputtokenendcol": 12, "metadatafield": [12, 118, 126], "field": [12, 20, 21, 24, 41, 42, 43, 53, 58, 64, 66, 67, 69, 70, 76, 80, 83, 89, 90, 93, 99, 106, 118, 124, 126, 138, 209], "ad": [12, 23, 37, 87, 89, 108, 127, 168, 203, 211, 215, 221, 240], "element": [12, 41, 45, 46, 47, 50, 53, 67, 99, 104, 130, 142, 176, 234], "second": [12, 16, 21, 45, 46, 47, 50, 53, 60, 87, 103, 113, 142, 165, 168, 176, 199, 203, 208, 210, 222], "stringtyp": [12, 46, 47, 56, 93, 99, 117, 142, 143, 176, 177], "setchunktextcol": 12, "setchunkbegincol": 12, "char_begin": 12, "setchunkendcol": 12, "char_end": [12, 83], "setoutputtokenbegincol": 12, "token_begin": 12, "setoutputtokenendcol": 12, "token_end": 12, "minni": 12, "63": [12, 19, 80, 86, 89], "62": [12, 51, 53], "pcp": [12, 46, 52, 142, 176], "31": [12, 21, 110, 113, 213], "34": [12, 19, 213], "col": [12, 21, 24, 43, 52, 55, 64, 108, 116, 149, 183], "setmetadatafield": [12, 118, 126], "assertionlogregapproach": [13, 216], "regress": [13, 15, 30, 31, 34, 38, 40, 155, 157, 190, 192], "assertionlogregmodel": [13, 174, 216], "maxit": [13, 30, 31, 157, 192], "regparam": 13, "enetparam": 13, "elast": 13, "net": 13, "beforeparam": 13, "context": [13, 15, 16, 22, 60, 74, 79, 102, 120, 121, 122, 123, 127, 160, 161, 162, 163, 172, 195, 196, 197, 198, 206, 216], "afterparam": 13, "after": [13, 14, 15, 16, 30, 31, 37, 38, 39, 40, 41, 42, 60, 70, 84, 87, 93, 102, 106, 108, 130, 155, 157, 161, 167, 168, 190, 192, 196, 202, 203, 230], "externalfeatur": 13, "addit": [13, 45, 46, 47, 50, 64, 76, 77, 87, 110, 116, 122, 123, 142, 149, 156, 163, 168, 176, 183, 191, 198, 203, 240], "featur": [13, 14, 15, 32, 33, 34, 35, 45, 46, 47, 50, 66, 71, 80, 87, 108, 142, 156, 158, 168, 176, 191, 193, 203, 216], "nercol": 13, "either": [13, 14, 22, 46, 56, 64, 86, 103, 108, 113, 116, 117, 142, 143, 149, 156, 165, 176, 177, 183, 191, 199, 228, 232], "sentence_detector": [13, 15, 21, 25, 27, 32, 61, 88, 91, 92, 140, 146, 147, 165, 170, 174, 180, 181, 199, 204, 226], "chunker": [13, 74, 83, 88, 140, 146, 147, 172, 174, 180, 181, 216], "Then": [13, 55, 87, 108, 116, 156, 168, 191, 203], "setreg": 13, "01": [13, 46, 48, 52, 67, 87, 93, 106, 113, 142, 168, 176, 203, 213], "setbefor": 13, "setaft": 13, "13": [13, 15, 46, 47, 52, 93, 94, 142, 176, 208, 213], "setenet": 13, "enet": 13, "labelcol": [13, 30, 31, 116, 149, 157, 183, 192], "setmaxit": [13, 30, 31, 157, 192], "setnercol": 13, "n": [13, 22, 51, 55, 79, 87, 100, 102, 120, 121, 122, 123, 126, 160, 161, 162, 163, 168, 195, 196, 197, 198, 203, 206, 225, 234], "lamda": 13, "settargetnerlabel": 13, "v": [13, 22, 60, 61, 79, 87, 91, 92, 102, 103, 120, 121, 122, 123, 156, 160, 161, 162, 163, 165, 168, 170, 191, 195, 196, 197, 198, 199, 203, 204, 214, 237], "logreg": [13, 30, 31, 157, 192, 216], "logarithm": [13, 30, 31, 157, 192], "instead": [13, 22, 38, 40, 60, 61, 87, 108, 111, 153, 155, 168, 187, 190, 203], "obtain": [13, 22, 53, 70, 103, 111, 153, 168, 174, 187, 203, 209, 240], "assertionpretrain": 13, "assertion_ml": 13, "assertionmerg": 14, "merger": [14, 80], "varieti": 14, "priorit": [14, 46, 47, 80, 106, 142, 176], "proper": 14, "see": [14, 15, 20, 38, 39, 40, 52, 56, 64, 76, 79, 84, 87, 89, 99, 108, 109, 113, 116, 143, 152, 155, 156, 167, 168, 177, 186, 190, 191, 202, 203, 206, 210, 238], "mergeoverlap": [14, 42, 76, 80, 113], "overlap": [14, 42, 76, 80, 113, 126], "applyfilterbeforemerg": 14, "appli": [14, 15, 25, 27, 41, 42, 45, 46, 47, 50, 64, 79, 84, 87, 103, 106, 126, 139, 142, 146, 147, 156, 165, 168, 171, 176, 180, 181, 191, 199, 203, 206, 208, 211, 213, 223, 228, 229, 231], "assertionsconfid": 14, "confidencethreshold": [14, 24, 41, 80, 238], "lower": [14, 15, 24, 25, 27, 46, 47, 56, 80, 87, 142, 143, 146, 147, 168, 176, 177, 180, 181, 203], "threshold": [14, 24, 25, 27, 41, 46, 47, 55, 61, 79, 80, 89, 91, 92, 106, 108, 109, 116, 142, 146, 147, 149, 152, 170, 176, 180, 181, 183, 186, 204, 214, 237], "orderingfeatur": [14, 80], "sourc": [14, 16, 21, 25, 27, 38, 39, 40, 43, 45, 46, 47, 50, 51, 56, 67, 76, 77, 80, 87, 89, 91, 92, 99, 108, 109, 111, 113, 124, 126, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 202, 204, 208, 209, 211, 213, 221], "selectionstrategi": [14, 80], "divers": [14, 106], "diverselong": [14, 80], "defaultconfid": [14, 80], "doe": [14, 32, 45, 46, 47, 50, 67, 80, 87, 142, 168, 176, 203, 224], "assertionsourcepreced": 14, "util": [14, 15, 46, 111, 127, 137, 153, 172, 187, 209, 211, 216], "comma": [14, 42, 80, 87, 89, 106, 168, 203], "drive": [14, 80], "sortbybegin": 14, "sort": [14, 106], "majorityvot": 14, "major": 14, "vote": 14, "setapplyfilterbeforemerg": 14, "setassertionsourcepreced": 14, "setassertionsconfid": 14, "setdefaultconfid": [14, 80], "setmajorityvot": 14, "group": [14, 23, 45, 46, 47, 50, 67, 79, 88, 103, 142, 165, 171, 176, 199, 228, 229], "sum": 14, "setmergeoverlap": [14, 42, 76, 80, 113], "setorderingfeatur": [14, 80], "setselectionstrategi": [14, 80], "setsortbybegin": 14, "bertforassertionclassif": 15, "hasbatchedannot": [15, 37, 38, 39, 40, 87, 91, 102, 120, 122, 216], "analyz": [15, 70, 110, 228], "surround": [15, 45, 46, 47, 50, 60, 67, 142, 176], "classifi": [15, 30, 31, 32, 34, 37, 57, 71, 108, 109, 152, 156, 157, 167, 186, 191, 192, 216], "leverag": 15, "fine": 15, "tune": 15, "head": [15, 38, 39, 40, 87, 126, 155, 167, 168, 190, 202, 203], "linear": [15, 38, 39, 40, 79, 127, 155, 167, 190, 202], "pool": [15, 38, 40, 45, 46, 47, 50, 79, 142, 155, 176, 190], "accept": [15, 16, 45, 46, 47, 50, 142, 156, 176, 191, 211], "produc": [15, 70, 80, 89, 99], "emphas": 15, "special": [15, 41, 58, 225], "better": [15, 116, 127], "focu": 15, "architectur": [15, 37, 87, 168, 203], "achiev": [15, 22, 87, 168, 203], "accur": 15, "preprocess": [15, 213], "cl": 15, "huggingfac": [15, 38, 39, 40, 155, 167, 190, 202], "compat": [15, 29, 38, 39, 40, 83, 87, 99, 155, 167, 168, 172, 190, 202, 203, 209, 216, 230], "classificationcasesensit": 15, "clinical_n": [15, 16, 29, 41, 48, 53, 70, 84], "ner_convert": [15, 16, 22, 25, 27, 29, 32, 41, 48, 55, 58, 61, 70, 82, 84, 89, 111, 146, 147, 153, 165, 180, 181, 187, 199], "nerconverterintern": [15, 25, 27, 29, 41, 42, 46, 53, 58, 60, 61, 70, 84, 89, 103, 146, 147, 165, 180, 181, 199, 213, 216], "clinical_assert": [15, 70], "he": [15, 22, 41, 51, 60, 70, 126, 208], "becam": 15, "short": [15, 25, 27, 45, 46, 47, 50, 102, 142, 146, 147, 161, 176, 180, 181, 196], "breath": [15, 58], "climb": 15, "flight": 15, "stair": 15, "ct": 15, "lung": [15, 208], "tumor": [15, 208], "lobe": 15, "father": 15, "alzheim": 15, "result_df": [15, 67, 229, 230], "100": [15, 46, 47, 71, 102, 122, 123, 142, 156, 161, 163, 176, 191, 196, 198, 242], "24": [15, 76, 83, 171], "assertion_sourc": [15, 208], "9996883": 15, "problem": [15, 16, 108, 110, 111, 127, 153, 187, 213], "40": [15, 206], "999676": 15, "55": [15, 25, 27, 41, 146, 147, 165, 180, 181, 199], "66": 15, "9989444": 15, "89": 15, "99": [15, 99], "99903834": 15, "114": 15, "116": 15, "99900436": 15, "122": 15, "133": 15, "9993321": 15, "151": 15, "165": [15, 239], "9997882": 15, "207": 15, "208": 15, "9996158": 15, "220": 15, "229": 15, "9997308": 15, "276": 15, "284": 15, "98367596": 15, "getclass": [15, 37, 38, 39, 40, 87, 92, 108, 109, 111, 152, 153, 155, 167, 168, 170, 186, 187, 190, 202, 203, 204], "loadsavedmodel": [15, 22, 32, 37, 38, 39, 40, 60, 61, 79, 87, 91, 92, 102, 109, 111, 121, 122, 123, 152, 153, 155, 161, 162, 163, 167, 168, 170, 186, 187, 190, 196, 197, 198, 202, 203, 204], "spark_sess": [15, 22, 32, 37, 38, 39, 40, 60, 61, 79, 87, 91, 92, 102, 109, 111, 121, 122, 123, 152, 153, 155, 161, 162, 163, 167, 168, 170, 186, 187, 190, 196, 197, 198, 202, 203, 204], "assertion_bert_classifier_jsl_slim": 15, "setclassificationcasesensit": 15, "contextualassert": 16, "analysi": [16, 110, 156, 191], "cue": 16, "within": [16, 22, 41, 42, 45, 46, 47, 50, 56, 61, 87, 117, 142, 143, 168, 176, 177, 203, 209], "negat": 16, "uncertainti": 16, "suffix": [16, 42, 43, 53, 79, 84, 206, 211, 212, 229], "prefixandsuffixmatch": [16, 43], "hit": [16, 43, 106], "prefixkeyword": 16, "suffixkeyword": 16, "exceptionkeyword": 16, "prefixregexpattern": 16, "suffixregexpattern": 16, "exceptionregexpattern": 16, "includechunktoscop": 16, "scopewindowdelimit": 16, "delimit": [16, 21, 46, 53, 64, 67, 76, 80, 89, 104, 113, 120, 121, 142, 160, 162, 176, 195, 197], "limit": [16, 38, 40, 45, 46, 47, 50, 55, 67, 92, 108, 111, 142, 153, 155, 170, 176, 187, 190, 204], "confidencecalculationdirect": 16, "No": [16, 126, 213], "kidnei": 16, "injuri": 16, "abnorm": 16, "rash": 16, "ulcer": 16, "might": [16, 45, 46, 47, 50, 51, 64, 67, 87, 142, 168, 176, 203, 211, 240], "liver": [16, 43], "diseas": [16, 32, 58, 171, 240], "setprefixkeyword": 16, "setsuffixkeyword": 16, "unlik": [16, 102, 161, 196], "setprefixregexpattern": 16, "without": [16, 29, 42, 45, 46, 47, 50, 58, 67, 70, 116, 127, 142, 176, 209, 215, 241], "deni": [16, 29], "never": 16, "setsuffixregexpattern": 16, "absenc": 16, "out": [16, 22, 41, 76, 77, 79, 87, 94, 100, 102, 106, 116, 120, 121, 122, 123, 149, 156, 160, 161, 162, 163, 168, 183, 191, 195, 196, 197, 198, 203, 226], "setexceptionkeyword": 16, "setexceptionregexpattern": 16, "clearli": 16, "addprefixkeyword": 16, "addsuffixkeyword": 16, "setprefixandsuffixmatch": [16, 43], "setassert": 16, "flatten": [16, 74, 130, 172], "setexplodeselectedfield": [16, 70], "assertion_result": [16, 70, 208], "contextual_assertion_abs": 16, "open": [16, 25, 27, 38, 39, 40, 43, 56, 87, 89, 91, 92, 108, 109, 111, 126, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 202, 204], "other": [16, 22, 25, 27, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 58, 61, 67, 80, 87, 91, 92, 106, 108, 109, 110, 111, 116, 126, 127, 140, 142, 146, 147, 149, 152, 153, 155, 156, 157, 167, 168, 170, 173, 174, 176, 180, 181, 183, 186, 187, 190, 191, 192, 202, 204, 211, 228], "setconfidencecalculationdirect": 16, "distanc": [16, 25, 27, 46, 47, 55, 61, 106, 108, 110, 116, 142, 146, 147, 149, 176, 180, 181, 183, 208], "found": [16, 41, 43, 56, 61, 99, 143, 177, 221, 222], "side": [16, 83], "minimum": [16, 25, 27, 31, 46, 47, 87, 142, 146, 147, 157, 168, 176, 180, 181, 192, 203], "necessarili": 16, "certain": [16, 46, 47, 80, 88, 142, 176], "extend": [16, 56, 87, 143, 156, 168, 177, 191, 203, 213], "alwai": [16, 24, 45, 46, 47, 50, 80, 142, 176, 229], "empti": [16, 32, 33, 34, 35, 42, 46, 47, 56, 61, 71, 76, 77, 80, 87, 99, 103, 108, 116, 142, 143, 149, 158, 165, 168, 176, 177, 183, 193, 199, 203, 206, 211, 213, 229], "setincludechunktoscop": 16, "look": [16, 41, 42, 61], "nor": 16, "lack": 16, "unremark": 16, "declin": [16, 29], "two": [16, 22, 24, 26, 41, 42, 45, 46, 47, 50, 53, 57, 59, 60, 67, 80, 82, 84, 89, 103, 130, 142, 176, 222, 230, 240], "integ": [16, 25, 27, 41, 42, 45, 46, 47, 48, 50, 60, 67, 87, 99, 122, 123, 142, 146, 147, 163, 176, 180, 181, 198, 203, 211, 230], "whole": [16, 22, 64], "setscopewindowdelimit": 16, "demonstr": [16, 108, 109, 110, 152, 186], "appear": [16, 41, 45, 46, 47, 50, 60, 61, 103, 142, 165, 176, 199, 211], "had": [16, 37, 38, 40, 55, 84, 126, 130, 155, 190, 208], "develop": [16, 58], "associ": [16, 23, 46, 47, 64, 84, 89, 110, 113, 116, 142, 176, 240], "fewshotassertionsentenceconvert": 17, "assertiondl": [18, 74, 141, 145, 175, 179], "assertion_chunk_convert": [18, 74], "assertion_dl_reg": [18, 74], "assertion_merg": [18, 74], "bert_for_assertion_classif": [18, 74], "contextual_assert": [18, 74], "fewshot_assertion_sentence_convert": [18, 74], "chunk2token": [19, 216], "chunkassembl": [19, 56, 143, 177], "ngramgener": [19, 22, 216], "ngram": [19, 25, 27, 31, 100, 102, 120, 121, 122, 123, 146, 147, 157, 160, 161, 162, 163, 180, 181, 192, 195, 196, 197, 198], "setdelimit": [19, 76, 113], "_": [19, 52, 53, 87, 168, 203], "setn": 19, "setenablecumul": 19, "ngram_token": 19, "year": [19, 22, 41, 42, 45, 46, 47, 50, 52, 60, 67, 80, 82, 84, 86, 89, 93, 130, 142, 171, 176, 208, 211, 240], "old": [19, 22, 42, 46, 52, 80, 82, 84, 86, 87, 89, 108, 109, 130, 142, 152, 168, 171, 176, 186, 203, 222], "man": [19, 80, 86, 89], "hospit": [19, 50, 80, 86, 89, 211], "a_63": 19, "old_man": 19, "man_pres": 19, "18": [19, 46, 52, 116, 122, 123, 142, 163, 176, 198, 213], "28": [19, 22, 82, 84, 130, 171, 213], "presents_to": 19, "to_th": 19, "the_hospit": 19, "hospital_": 19, "assertionfilter": [20, 216], "filtering_param": [20, 24, 74, 80, 89, 172], "filteringparam": [20, 24, 69, 80, 89, 216], "via": [20, 24, 41], "criteria": [20, 24, 26, 69, 80, 89, 106], "isin": [20, 24, 69, 80, 89], "step": [20, 87, 156, 168, 191, 203, 221], "setcriteria": [20, 24, 69, 80, 89], "filtervalu": [20, 24, 69, 80, 89], "setfiltervalu": [20, 24, 69, 80, 89], "accord": [20, 24, 45, 46, 47, 48, 50, 67, 69, 79, 80, 89, 138, 142, 171, 176], "setregex": [20, 24, 69, 80, 89], "chunkconvert": [21, 216], "source_tracking_metadata_param": [21, 74, 89, 172], "sourcetrackingmetadataparam": [21, 89, 124, 216], "regexmatch": [21, 23, 43, 113, 118, 216], "my": [21, 57, 91, 92, 113, 126, 156, 170, 191, 204, 230], "ceremoni": [21, 113], "regex_match": [21, 74, 112], "setexternalrul": [21, 23, 113, 118], "src": [21, 23, 76, 87, 113, 118, 156, 168, 191, 203], "matcher": [21, 74, 113, 118, 172], "txt": [21, 23, 46, 51, 53, 76, 113, 118, 126, 142, 176], "outdf": 21, "71": [21, 113], "80": [21, 113, 126], "allpossiblefieldstostandard": [21, 89, 124], "includeoutputcolumn": [21, 89, 124], "includestandardfield": [21, 89, 124], "outputcolumnkei": [21, 89, 124], "resetsentenceindic": [21, 80, 89, 97, 124], "standardfieldkei": [21, 89, 124], "setallpossiblefieldstostandard": [21, 89, 124], "standard": [21, 35, 45, 46, 47, 50, 67, 89, 94, 124, 142, 176], "prioriti": [21, 45, 46, 47, 50, 58, 87, 89, 124, 126, 142, 168, 176, 203], "setincludeoutputcolumn": [21, 89, 124], "setincludestandardfield": [21, 89, 124], "setoutputcolumnkei": [21, 89, 124], "setresetsentenceindic": [21, 80, 89, 97, 124], "reset": [21, 80, 89, 97, 124], "treat": [21, 23, 45, 46, 47, 50, 80, 89, 97, 124, 142, 176], "entir": [21, 38, 40, 80, 87, 89, 97, 111, 124, 153, 155, 168, 187, 190, 203], "effect": [21, 45, 46, 47, 50, 51, 67, 80, 89, 97, 120, 121, 124, 142, 160, 162, 176, 195, 197, 211], "regardless": [21, 43, 45, 46, 47, 50, 76, 80, 89, 97, 124, 142, 176], "boundari": [21, 43, 80, 89, 97, 124], "setstandardfieldkei": [21, 89, 124], "chunkkeyphraseextract": [22, 216], "bert_sentence_embed": [22, 63, 74], "bertsentenceembed": [22, 60, 61, 116, 117, 118, 149, 183, 216], "phrase": [22, 42, 76, 77, 83, 88, 102, 161, 196], "most": [22, 58, 61, 87, 126, 168, 171, 203], "describ": 22, "cosin": [22, 25, 27, 62, 116, 146, 147, 149, 180, 181, 183], "similar": [22, 46, 47, 62, 142, 176, 216, 242], "represent": [22, 43, 60, 61, 83, 89], "correspond": [22, 33, 34, 35, 45, 46, 47, 50, 53, 55, 60, 67, 70, 142, 158, 176, 193, 240], "maxim": [22, 61, 79, 108], "margin": 22, "mmr": 22, "setdiverg": 22, "selectmostdiffer": 22, "too": [22, 87, 127, 168, 203], "broader": 22, "belong": 22, "brief": 22, "understand": 22, "consist": [22, 51, 61, 67, 111, 113, 153, 187, 208, 211, 228, 229], "variou": [22, 99, 102, 161, 196, 209, 221, 240], "rank": 22, "gram": [22, 100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "yakekeywordextractor": 22, "yake": [22, 216], "textmatch": [22, 83, 216], "desir": [22, 25, 27, 50, 70, 80, 110, 146, 147, 180, 181], "topn": [22, 55], "conjunct": [22, 46, 47, 142, 176], "diverg": 22, "aim": [22, 102, 161, 196], "goal": 22, "interv": 22, "higher": [22, 240], "enforc": [22, 45, 46, 47, 50, 142, 176, 211], "ensur": [22, 41, 45, 46, 47, 50, 99, 104, 142, 176, 211, 230], "sole": 22, "constraint": [22, 213], "measur": [22, 126, 171, 240], "documentlevelprocess": 22, "flag": [22, 32, 33, 34, 35, 37, 71, 102, 108, 158, 161, 193, 196, 215, 217, 221, 228], "row": [22, 46, 47, 87, 126, 142, 168, 176, 203, 211, 213, 229], "rather": [22, 45, 46, 47, 50, 79, 87, 102, 142, 161, 168, 176, 196, 203], "particular": [22, 45, 46, 47, 50, 61, 111, 116, 142, 149, 153, 176, 183, 187, 211, 240], "concatenatesent": 22, "concaten": [22, 104, 222], "comput": [22, 60, 61, 87, 120, 121, 127, 160, 162, 168, 195, 197, 203, 229, 242], "averag": [22, 38, 40, 59, 60, 61, 106, 111, 153, 155, 187, 190], "vector": [22, 30, 31, 35, 59, 61, 66, 71, 157, 192], "droppunctu": 22, "remov": [22, 24, 41, 42, 46, 70, 76, 77, 80, 94, 99, 110, 221, 230, 240], "punctuat": [22, 42, 76, 77, 94], "affect": [22, 70, 122, 123, 163, 198], "ner_tagg": [22, 82, 111, 153, 187], "ner_jsl_slim": 22, "ner_tag": [22, 82, 108, 109, 110, 111, 152, 153, 186, 187], "key_phrase_extractor": 22, "settopn": 22, "setdocumentlevelprocess": 22, "ner_chunk_key_phras": 22, "her": [22, 60, 84, 92, 170, 204], "becom": [22, 58, 60, 127], "last": [22, 45, 60, 79, 87, 102, 116, 149, 161, 168, 183, 196, 203, 206, 211], "complain": [22, 60], "swell": [22, 60], "hi": [22, 60, 92, 170, 204], "forearm": [22, 60], "AS": [22, 25, 27, 60, 61, 91, 92, 146, 147, 170, 180, 181, 204], "key_phras": 22, "documentsimilar": 22, "mmrscore": 22, "gestat": [22, 82, 84, 130], "mellitu": [22, 42, 82, 84, 130], "7391447825527298": 22, "4366776288430703": 22, "7323921930094919": 22, "44348688715422274": 22, "13577881610104517": 22, "085800103824974": 22, "dimens": [22, 60, 61, 87, 116, 149, 168, 183, 203], "islong": [22, 60, 61], "getbatchs": [22, 60, 61, 79, 91, 92, 102, 120, 121, 122, 123, 160, 161, 162, 163, 170, 195, 196, 197, 198, 204], "getcasesensit": [22, 37, 38, 39, 40, 60, 61, 64, 76, 92, 111, 116, 149, 153, 155, 167, 170, 183, 187, 190, 202, 204], "getdimens": [22, 60, 61, 116, 149, 183], "use_openvino": [22, 60, 61], "openvino": [22, 60, 61], "backend": [22, 60, 61], "sbert_jsl_medium_uncas": 22, "setconcatenatesent": 22, "setdimens": [22, 60, 61, 116, 149, 183], "setdroppunctu": 22, "setislong": [22, 60, 61], "long": [22, 25, 27, 60, 61, 92, 102, 146, 147, 161, 170, 171, 180, 181, 196, 204, 213], "setselectmostdiffer": 22, "highest": [22, 32, 33, 34, 35, 71, 80, 100, 102, 108, 120, 121, 122, 123, 158, 160, 161, 162, 163, 193, 195, 196, 197, 198], "chunksentencesplitt": [23, 216], "header": [23, 66, 156, 191, 213], "subsequ": [23, 25, 27, 82, 84, 146, 147, 180, 181], "particularli": [23, 42, 70, 222], "subtitl": 23, "paragraph": [23, 90], "groupbysent": 23, "assum": [23, 61, 87, 156, 168, 191, 203], "detector": [23, 226], "insertchunk": 23, "omit": [23, 116, 149, 183], "defaultent": 23, "introduct": 23, "title_regex": 23, "setdefaultent": 23, "setgroupbysent": 23, "properti": [23, 45, 46, 47, 50, 53, 67, 134, 142, 176, 211], "setinsertchunk": 23, "insert": [23, 58, 104], "chunkfilter": [24, 216], "what": [24, 46, 47, 80, 92, 94, 103, 108, 116, 142, 149, 165, 170, 176, 183, 199, 204, 230], "entitiesconfid": [24, 80], "past": [24, 210], "histori": [24, 82, 84, 130], "gastroenter": 24, "howev": [24, 58, 87, 168, 203], "docassembl": 24, "postagg": [24, 108, 109, 152, 186], "perceptronmodel": [24, 61, 82, 108, 109, 110, 111, 152, 153, 186, 187, 216, 226], "setregexpars": [24, 88], "nn": [24, 88], "chunkerfilt": 24, "17": [24, 80, 86, 213], "22": [24, 25, 27, 93, 146, 147, 165, 171, 180, 181, 199, 213], "36": [24, 41, 42], "53": [24, 76], "64": [24, 80, 86, 87, 156, 168, 191, 203, 206, 213], "81": [24, 110, 213], "110": [24, 41, 80, 86], "now": 24, "care": [24, 110], "118": 24, "132": 24, "setentitiesconfid": [24, 80], "entities_confid": [24, 80], "setfilterent": 24, "filter_bi": 24, "attribut": [24, 80], "chunkfiltererapproach": [24, 216], "entitiesconfidenceresourc": [24, 80], "entitiesconfidenceresourceasjsonstr": 24, "chunksfilterapproach": 24, "setentitiesconfidenceresourc": [24, 80], "binari": [24, 80, 89, 111, 116, 153, 187], "setentitiesconfidenceresourceasjsonstr": 24, "chunkmapperapproach": [25, 146, 165, 180, 199, 216], "commonchunkmapperparam": [25, 27, 147, 181], "chunkmapperfuzzymatchingparam": [25, 27, 147, 181, 216], "mapper": [25, 27, 146, 147, 165, 180, 181, 199], "jsondictionari": [25, 27, 146, 147, 165, 180, 181, 199], "chunkmappermodel": [25, 29, 146, 165, 180, 199, 216], "label_depend": [25, 26, 27, 103, 115, 146, 147, 165, 180, 181, 199], "mappinmg": [25, 27, 146, 147, 165, 180, 181, 199], "rel": [25, 27, 60, 61, 93, 127, 146, 147, 165, 180, 181, 199, 213], "go": [25, 27, 146, 147, 165, 180, 181, 199], "lowercas": [25, 27, 46, 56, 94, 142, 143, 146, 147, 165, 176, 177, 180, 181, 199], "decid": [25, 27, 45, 46, 47, 50, 126, 142, 146, 147, 165, 176, 180, 181, 199], "ner_model": [25, 27, 55, 61, 146, 147, 165, 180, 181, 199], "ner_posology_larg": [25, 27, 61, 146, 147, 165, 180, 181, 199], "chunkermapperapproach": [25, 27, 146, 147, 165, 180, 181, 199], "setdictionari": [25, 27, 43, 146, 147, 165, 180, 181, 199], "home": [25, 27, 57, 58, 126, 146, 147, 165, 180, 181, 199], "mappings2": [25, 27, 146, 147, 165, 180, 181, 199], "setrel": [25, 27, 29, 146, 147, 165, 180, 181, 199], "action": [25, 27, 29, 53, 146, 147, 165, 180, 181, 199], "sampledata": [25, 27, 61, 146, 147, 165, 180, 181, 199], "warfarina": [25, 27, 146, 147, 165, 180, 181, 199], "lusa": [25, 27, 146, 147, 165, 180, 181, 199], "amlodipin": [25, 27, 146, 147, 165, 180, 181, 199], "mg": [25, 27, 61, 146, 147, 165, 180, 181, 199, 208], "analges": [25, 27, 146, 147, 165, 180, 181, 199], "56995": [25, 27, 146, 147, 165, 180, 181, 199], "all_rel": [25, 27, 146, 147, 165, 180, 181, 199], "antipyret": [25, 27, 146, 147, 165, 180, 181, 199], "50": [25, 27, 43, 71, 146, 147, 165, 168, 180, 181, 199], "9989": [25, 27, 146, 147, 165, 180, 181, 199], "9123": [25, 27, 146, 147, 165, 180, 181, 199], "allowmultitokenchunk": [25, 27, 146, 147, 180, 181], "enablecharfingerprintmatch": [25, 27, 146, 147, 180, 181], "enablefuzzymatch": [25, 27, 146, 147, 180, 181], "enabletokenfingerprintmatch": [25, 27, 146, 147, 180, 181], "fuzzydistancescalingmod": [25, 27, 146, 147, 180, 181], "fuzzymatchingdistancethreshold": [25, 27, 146, 147, 180, 181], "fuzzymatchingdist": [25, 27, 146, 147, 180, 181], "maxcharngramfingerprint": [25, 27, 146, 147, 180, 181], "maxtokenngramdroppingcharsratio": [25, 27, 146, 147, 180, 181], "maxtokenngramdroppingoper": [25, 27, 146, 147, 180, 181], "maxtokenngramdroppingtoken": [25, 27, 146, 147, 180, 181], "maxtokenngramfingerprint": [25, 27, 146, 147, 180, 181], "mincharngramfingerprint": [25, 27, 146, 147, 180, 181], "mintokenngramfingerprint": [25, 27, 146, 147, 180, 181], "multivaluesrel": [25, 27, 146, 147, 180, 181], "setallowmultitokenchunk": [25, 27, 146, 147, 180, 181], "mc": [25, 27, 146, 147, 180, 181], "skip": [25, 27, 45, 46, 47, 50, 53, 67, 76, 77, 142, 146, 147, 176, 180, 181, 211], "multitoken": [25, 27, 146, 147, 180, 181], "bow": [25, 27, 55, 146, 147, 180, 181], "word": [25, 27, 41, 42, 46, 47, 55, 64, 76, 77, 86, 89, 91, 92, 94, 100, 102, 116, 117, 120, 121, 122, 123, 127, 142, 146, 147, 149, 156, 160, 161, 162, 163, 170, 176, 180, 181, 183, 191, 195, 196, 197, 198, 204, 242], "setenablecharfingerprintmatch": [25, 27, 146, 147, 180, 181], "ecfm": [25, 27, 146, 147, 180, 181], "char": [25, 27, 42, 45, 46, 47, 50, 67, 87, 126, 142, 146, 147, 168, 176, 180, 181, 203], "fingerprint": [25, 27, 146, 147, 180, 181], "setenablefuzzymatch": [25, 27, 146, 147, 180, 181], "efm": [25, 27, 146, 147, 180, 181], "fuzzi": [25, 27, 146, 147, 180, 181], "setenabletokenfingerprintmatch": [25, 27, 146, 147, 180, 181], "driven": [25, 27, 146, 147, 180, 181], "three": [25, 27, 45, 46, 47, 50, 53, 84, 142, 146, 147, 171, 176, 180, 181], "maxtokenngramdrop": [25, 27, 146, 147, 180, 181], "setfuzzydistancescalingmod": [25, 27, 146, 147, 180, 181], "fdsm": [25, 27, 146, 147, 180, 181], "scale": [25, 27, 32, 33, 34, 35, 71, 79, 108, 146, 147, 158, 180, 181, 193], "mode": [25, 27, 32, 33, 34, 35, 42, 45, 46, 47, 50, 51, 67, 71, 87, 106, 108, 126, 139, 140, 142, 146, 147, 156, 158, 168, 174, 176, 180, 181, 191, 193, 203, 211], "setfuzzymatchingdistancethreshold": [25, 27, 146, 147, 180, 181], "fmdth": [25, 27, 146, 147, 180, 181], "setfuzzymatchingdist": [25, 27, 146, 147, 180, 181], "fmd": [25, 27, 146, 147, 180, 181], "levenshtein": [25, 27, 46, 47, 55, 142, 146, 147, 176, 180, 181], "longest": [25, 27, 146, 147, 180, 181], "jaccard": [25, 27, 146, 147, 180, 181], "lc": [25, 27, 146, 147, 180, 181], "setmaxcharngramfingerprint": [25, 27, 146, 147, 180, 181], "setmaxtokenngramdroppingcharsratio": [25, 27, 146, 147, 180, 181], "etd": [25, 27, 146, 147, 180, 181], "amount": [25, 27, 55, 79, 146, 147, 180, 181, 206], "drop": [25, 27, 76, 77, 146, 147, 180, 181, 226], "ratio": [25, 27, 146, 147, 180, 181], "enabletokenngrammatch": [25, 27, 146, 147, 180, 181], "whenev": [25, 27, 146, 147, 180, 181], "matter": [25, 27, 108, 146, 147, 180, 181], "final": [25, 27, 70, 104, 126, 146, 147, 180, 181, 221], "setmaxtokenngramdroppingoper": [25, 27, 146, 147, 180, 181], "setmaxtokenngramdroppingtoken": [25, 27, 146, 147, 180, 181], "veri": [25, 27, 46, 47, 87, 126, 142, 146, 147, 168, 176, 180, 181, 203], "high": [25, 27, 79, 127, 146, 147, 180, 181], "sy": [25, 27, 146, 147, 180, 181], "maxsiz": [25, 27, 146, 147, 180, 181], "setmaxtokenngramfingerprint": [25, 27, 146, 147, 180, 181], "mxtnf": [25, 27, 146, 147, 180, 181], "setmincharngramfingerprint": [25, 27, 146, 147, 180, 181], "setmintokenngramfingerprint": [25, 27, 146, 147, 180, 181], "mntnf": [25, 27, 146, 147, 180, 181], "min": [25, 27, 31, 79, 146, 147, 157, 180, 181, 192, 206], "setmultivaluesrel": [25, 27, 146, 147, 180, 181], "send": [25, 27, 146, 147, 180, 181], "fuzzymatch": 25, "drug_chunk_embed": [25, 27, 61, 146, 147, 180, 181], "drug_chunk": [25, 27, 61, 146, 147, 180, 181], "slice": [25, 27, 60, 61, 146, 147, 180, 181], "drug_embed": [25, 27, 61, 146, 147, 180, 181], "drug_action_treatment_mapp": [25, 27, 29], "chunkmapperfilter": [26, 216], "chunkmapp": [26, 27, 28, 29, 74, 145, 147, 148, 179, 181, 182], "successfulli": [26, 217], "returncriteria": 26, "success": 26, "fail": [26, 45, 46, 47, 50, 56, 66, 67, 142, 143, 176, 177, 217], "chunkmapperfilterermodel": 26, "setreturncriteria": 26, "return_criteria": 26, "itself": [26, 80], "self": [26, 45, 46, 47, 50, 58, 66, 142, 176], "docmapperapproach": [27, 147, 181, 216], "docmappermodel": [27, 147, 181, 216], "cach": [27, 61, 66, 67, 79, 80, 102, 121, 122, 123, 146, 147, 149, 161, 162, 163, 180, 181, 183, 196, 197, 198, 210, 224], "assertion_filter": [28, 74], "chunk_convert": [28, 74], "chunk_key_phrase_extract": [28, 74], "chunk_sentence_splitt": [28, 74], "chunker_filter": [28, 74], "chunkmapper_filter": [28, 74], "docmapp": [28, 74, 145, 148, 179, 182], "mapper2_chunk": [28, 74], "mapper2chunk": 29, "annotatorproperti": [29, 48, 56, 117, 134], "bed": 29, "azithromycin": 29, "difficulti": 29, "nausea": 29, "zofran": 29, "intermitt": 29, "sweat": 29, "ner_jsl": [29, 32, 58, 70, 80, 86, 87, 89], "setfilternonevalu": 29, "bactericid": 29, "antiemet": 29, "filternonevalu": 29, "documentlogregclassifierapproach": [30, 216], "genericclassifiermodel": [30, 31, 32, 34, 35, 71, 108, 157, 192, 216], "tol": [30, 31, 157, 192], "converg": [30, 31, 157, 192], "toler": [30, 31, 157, 192], "fitintercept": [30, 31, 157, 192], "intercept": [30, 31, 157, 192], "form": [30, 31, 42, 45, 46, 47, 50, 55, 61, 64, 76, 87, 94, 103, 108, 110, 113, 142, 156, 157, 168, 176, 191, 192, 203], "vectorizationmodelpath": [30, 31, 157, 192], "classificationmodelpath": [30, 31, 157, 192], "could": [30, 31, 43, 55, 87, 113, 117, 156, 157, 168, 191, 192, 203], "stopwords_clean": [30, 31, 157, 192], "stopwordsclean": [30, 31, 157, 192, 216], "cleantoken": [30, 31, 157, 192], "stemmer": [30, 31, 76, 77, 157, 192, 216], "stem": [30, 31, 76, 77, 108, 109, 110, 152, 157, 186, 192], "gen_clf": [30, 31, 71, 157, 192], "setlabelcolumn": [30, 71, 87, 108, 127, 156, 157, 168, 191, 192, 203], "clf_model": [30, 31, 71, 157, 192], "setclassificationmodelpath": [30, 31, 157, 192], "setfitintercept": [30, 31, 157, 192], "setlabel": [30, 31, 91, 157, 192], "k": [30, 31, 79, 116, 120, 121, 149, 157, 160, 162, 183, 192, 195, 197, 206, 208], "settol": [30, 31, 157, 192], "dist": [30, 31, 116, 149, 157, 183, 192], "setvectorizationmodelpath": [30, 31, 157, 192], "documentlogregclassifiermodel": [30, 216], "mergechunk": [30, 31, 157, 192], "vectorizationmodel": [30, 31, 157, 192], "classificationmodel": [30, 31, 157, 192], "classifier_logreg_ad": 30, "setclassificationmodel": [30, 31, 157, 192], "setmergechunk": [30, 31, 157, 192], "setvectorizationmodel": [30, 31, 157, 192], "documentmlclassifierapproach": [31, 157, 192, 216], "documentmlclassifierparam": [31, 216], "classificationmodelclass": [31, 157, 192], "sparkml": [31, 157, 192], "svm": [31, 35, 157, 192], "maxtokenngram": [31, 157, 192], "mintokenngram": [31, 157, 192], "setclassificationmodelclass": [31, 157, 192], "setmaxtokenngram": [31, 157, 192], "setmintokenngram": [31, 157, 192], "documentmlclassifiermodel": [31, 157, 192, 216], "classifierml_ad": 31, "fewshotassertionclassifierapproach": 32, "generic_classifi": [32, 34, 35, 74, 108, 172, 216], "genericclassifierapproach": [32, 34, 35, 71, 108, 216], "purpos": [32, 48, 71], "few": [32, 37], "shot": [32, 37, 91, 92, 111, 153, 170, 187, 204], "epochsn": [32, 33, 34, 35, 71, 108, 158, 193], "featuresc": [32, 33, 34, 35, 71, 108, 158, 193], "fiximbal": [32, 33, 34, 35, 71, 108, 158, 193], "labelcolumn": [32, 33, 34, 35, 71, 87, 108, 127, 156, 158, 168, 191, 193, 203], "modelfil": [32, 33, 34, 35, 71, 108, 158, 193], "drouptup": [32, 33, 34, 35, 71, 108, 158, 193], "setepochsnumb": [32, 33, 34, 35, 71, 108, 158, 193], "setfeaturesc": [32, 33, 34, 35, 71, 108, 158, 193], "feature_sc": [32, 33, 34, 35, 71, 108, 158, 193], "zscore": [32, 33, 34, 35, 71, 108, 158, 193], "minmax": [32, 33, 34, 35, 71, 108, 158, 193], "setfiximbal": [32, 33, 34, 35, 71, 108, 158, 193], "fix_imbal": [32, 33, 34, 35, 71, 108, 158, 193], "whenther": [32, 33, 34, 35, 71, 108, 158, 193], "balanc": [32, 33, 34, 35, 71, 108, 158, 193], "trainig": [32, 33, 34, 35, 71, 108, 158, 193], "label_column": [32, 33, 34, 35, 71, 108, 158, 193], "learning_r": [32, 33, 34, 35, 71, 108, 158, 193], "setmodelfil": [32, 33, 34, 35, 71, 108, 158, 193], "mode_fil": [32, 33, 34, 35, 71, 108, 158, 193], "setmulticlass": [32, 33, 34, 35, 71, 108, 158, 193], "output_logs_path": [32, 33, 34, 35, 71, 108, 158, 193], "validation_split": [32, 33, 34, 35, 71, 108, 158, 193], "validaiton": [32, 33, 34, 35, 71, 108, 158, 193], "much": [32, 33, 34, 35, 45, 46, 47, 50, 71, 108, 117, 142, 156, 158, 176, 191, 193, 211], "fewshotassertionclassifiermodel": 32, "run": [32, 37, 79, 127, 208, 217], "larg": [32, 37, 38, 40, 46, 79, 87, 120, 121, 126, 142, 155, 160, 162, 167, 168, 176, 190, 195, 197, 202, 203], "setfit": [32, 33, 37, 158, 193], "disease_syndrome_disord": [32, 58], "chronic": [32, 58, 171], "obstruct": 32, "pulmonari": 32, "arterioven": 32, "malform": [32, 67], "has_differentiable_head": [32, 37], "differenti": [32, 37], "largefewshotclassifiermodel": [32, 37], "assertion_fewshotclassifi": 32, "fewshotclassifierapproach": [33, 158, 193, 216], "generic_log_reg_classifi": [33, 36, 74], "genericlogregclassifierapproach": [33, 34, 216], "fewshotclassifi": 33, "tunstal": [33, 158, 193], "et": [33, 158, 193], "al": [33, 158, 193], "2022": [33, 48, 106, 158, 171, 193, 213], "vari": [33, 34, 35, 45, 46, 47, 50, 142, 158, 171, 176, 193], "fewshotclassifiermodel": [33, 158, 193, 216], "genericlogregclassifiermodel": [33, 34, 216], "multinomi": 34, "logist": [34, 35], "genericlogregclassifi": 34, "deriv": [34, 35], "genericclassifi": [34, 35, 127], "neural": [34, 87, 127, 168, 203], "network": [34, 87, 127, 168, 203], "featurevector": [34, 35], "feature_vectir": [34, 35], "generic_logreg_classifier_ad": 34, "genericsvmclassifierapproach": [35, 216], "svmclassifi": 35, "machin": [35, 126, 127], "genericsvmclassifiermodel": [35, 216], "generic_svm_classifier_ad": 35, "document_log_classifi": [36, 74], "document_ml_classifi": [36, 74], "few_shot_assertion_classifi": [36, 74], "few_shot_classifi": [36, 74], "generic_svm_classifi": [36, 74], "large_few_shot_classifi": [36, 74], "medical_bert_for_sequence_classif": [36, 74, 111, 155, 190], "medical_bert_for_token_classifi": [36, 74, 167, 202], "medical_distilbert_for_sequence_classif": [36, 74], "hascasesensitiveproperti": [37, 38, 39, 40, 102, 116, 120, 122, 216], "hasmaxsentencelengthlimit": 37, "senstivi": 37, "maxsentencelength": [37, 38, 39, 40, 92, 111, 153, 155, 167, 170, 187, 190, 202, 204], "felt": [37, 38, 40, 155, 190], "bit": [37, 38, 40, 155, 190], "drowsi": [37, 38, 40, 155, 190], "blur": [37, 38, 40, 155, 190], "vision": [37, 38, 40, 155, 190], "take": [37, 38, 40, 45, 46, 47, 50, 53, 60, 66, 67, 71, 76, 103, 120, 121, 126, 134, 142, 155, 160, 162, 176, 190, 195, 197, 230], "aspirin": [37, 38, 40, 94, 155, 190], "9672883": 37, "hasdifferentiablehead": 37, "modelarchitectur": 37, "model_architectur": 37, "underli": [37, 58], "mpnet": [37, 216], "large_fewshot_classifier_ad": 37, "medicalbertfortokenclassifi": [38, 39, 167, 202, 216], "faster": [38, 40, 79, 127, 155, 167, 190, 202], "tokenclassifi": [38, 39, 155, 167, 190, 202], "coalescesent": [38, 40, 92, 111, 153, 155, 170, 187, 190, 204], "loadsavedmodelopensourc": [38, 39, 40, 111, 153, 155, 167, 187, 190, 202], "bertfortokenclassifierpath": [38, 39, 40, 111, 153, 155, 167, 187, 190, 202], "tfmodelpath": [38, 39, 40, 111, 153, 155, 167, 187, 190, 202], "bertfortokenclassifi": [38, 39, 40, 111, 153, 155, 167, 187, 190, 202], "taht": [38, 39, 40, 111, 153, 155, 167, 187, 190, 202], "tf": [38, 39, 40, 111, 127, 153, 155, 167, 187, 190, 202], "bert_sequence_classifier_ad": 38, "setcoalescesent": [38, 40, 111, 153, 155, 187, 190], "probabl": [38, 40, 79, 100, 102, 111, 120, 121, 122, 123, 153, 155, 160, 161, 162, 163, 187, 190, 195, 196, 197, 198, 206], "due": [38, 40, 111, 153, 155, 187, 190], "almost": [38, 40, 111, 153, 155, 187, 190], "512": [38, 40, 92, 111, 126, 153, 155, 170, 187, 190, 204], "help": [38, 40, 45, 46, 47, 50, 67, 79, 111, 116, 126, 127, 142, 153, 155, 176, 187, 190, 211], "feed": [38, 40, 87, 111, 153, 155, 187, 190], "setmaxsentencelength": [38, 39, 40, 92, 111, 118, 153, 155, 167, 170, 187, 190, 202, 204], "hidden": [39, 127, 167, 202], "state": [39, 45, 46, 47, 50, 87, 102, 122, 123, 142, 156, 161, 163, 167, 168, 176, 191, 196, 198, 202, 203, 211, 213, 240], "bert_token_classifier_ner_bionlp": [39, 167, 202], "erba": [39, 167, 202], "ir": [39, 142, 167, 202], "myb": [39, 167, 202], "viru": [39, 58, 167, 202], "construct": [39, 167, 202], "erythroid": [39, 167, 202], "infect": [39, 58, 130, 167, 202], "bone": [39, 99, 167, 202], "marrow": [39, 99, 167, 202], "blastoderm": [39, 167, 202], "cultur": [39, 167, 202], "tissue_structur": [39, 167, 202], "medicaldistilbertforsequenceclassif": [40, 216], "distilbert": 40, "sequenceclassifi": 40, "distilbertforsequenceclassif": [40, 216], "destilbertfortokenclassifierpath": 40, "distilbert_sequence_classifier_ad": 40, "contextualentityfilter": 41, "rulescop": 41, "consid": [41, 42, 45, 46, 47, 50, 55, 61, 62, 79, 90, 92, 100, 102, 108, 110, 116, 122, 123, 126, 142, 149, 161, 163, 170, 176, 183, 196, 198, 204, 206, 242], "whitelistent": 41, "kept": [41, 70, 80], "enough": [41, 90], "keep": [41, 45, 46, 47, 50, 67, 71, 79, 87, 116, 120, 121, 126, 142, 149, 160, 162, 168, 176, 183, 195, 197, 203, 206, 211], "blacklistent": [41, 46, 47, 142, 176], "scopewindowlevel": [41, 42], "blacklistword": 41, "whitelistword": 41, "possibleregexcontext": 41, "impossibleregexcontext": 41, "imposs": 41, "ner_deid_generic_aug": [41, 42, 53], "filtered_ner_chunk": 41, "setrul": [41, 42, 113], "known": [41, 83, 88, 171], "setrulescop": 41, "nlppipelin": [41, 53, 55, 70], "california": [41, 42, 45, 46, 47, 50, 142, 176], "beauti": [41, 80], "beach": 41, "grand": [41, 42], "canyon": [41, 42], "arizona": [41, 42], "37": [41, 42, 213, 230], "stun": 41, "natur": [41, 56, 111, 143, 153, 177, 187], "landmark": 41, "septemb": 41, "1850": 41, "februari": 41, "1912": 41, "filtered_chunk": 41, "20": [41, 46, 47, 48, 67, 71, 93, 106, 126, 142, 156, 176, 191], "54": [41, 213], "111": 41, "164": 41, "180": 41, "198": 41, "214": 41, "around": [41, 42, 238], "decis": [41, 42, 80], "occur": [41, 46, 47, 87, 100, 102, 120, 121, 122, 123, 142, 160, 161, 162, 163, 168, 176, 195, 196, 197, 198, 203, 211], "One": [41, 61, 225], "doubl": [41, 156, 191], "escap": 41, "charact": [41, 42, 45, 46, 47, 50, 51, 55, 64, 83, 89, 113, 126, 142, 176, 208, 211, 230], "properli": [41, 58, 104], "setrulesasstr": [41, 42], "contextualentityrul": 42, "These": [42, 46, 58, 70, 111, 142, 153, 176, 187], "refin": [42, 120, 121, 160, 162, 195, 197], "domain": [42, 138], "allowpunctuationinbetween": 42, "allowtokensinbetween": 42, "dropemptychunk": 42, "rang": [42, 46, 47, 48, 58, 79, 87, 142, 143, 168, 176, 177, 203, 206, 229], "prefixpattern": 42, "suffixpattern": 42, "prefixregex": 42, "suffixregex": 42, "prefixent": 42, "suffixent": 42, "regexinbetween": 42, "replaceent": 42, "replace_label_onli": 42, "replaced_ag": 42, "updated_chunk": 42, "setallowpunctuationinbetween": 42, "period": 42, "break": 42, "prevent": [42, 58, 102, 122, 123, 127, 161, 163, 196, 198], "setallowtokensinbetween": 42, "complic": 42, "setdropemptyent": 42, "dropemptyent": 42, "contextualparserapproach": [43, 216], "setjsonpath": 43, "along": [43, 45, 46, 47, 50, 67, 142, 176], "unifi": 43, "jsonpath": 43, "tsv": [43, 89], "optionalcontextrul": 43, "shortestcontextmatch": 43, "stop": [43, 57, 76, 77, 79, 87, 89, 120, 121, 122, 123, 126, 160, 162, 163, 168, 195, 197, 198, 203, 206, 210], "find": [43, 60, 64, 103, 108, 110, 111, 116, 136, 153, 187, 221], "completecontextmatch": 43, "exact": [43, 64, 76], "metastas": 43, "pt1bn0m0": 43, "t5": 43, "primari": [43, 228], "colon": 43, "contextualpars": [43, 80], "regex_token": [43, 226], "39": 43, "00": [43, 213], "148": 43, "156": 43, "ct4bcn2m1": 43, "189": 43, "194": 43, "n3m1": 43, "316": 43, "323": 43, "setcompletecontextmatch": 43, "setoptionalcontextrul": 43, "setshortestcontextmatch": 43, "contextualparsermodel": [43, 216], "mycontextualparsermodel": 43, "date_of_birth_pars": 43, "contextual_entity_filter": [44, 74], "contextual_entity_rul": [44, 74], "contextual_pars": [44, 74], "basedeidentificationparam": [45, 47, 50], "deidentif": [45, 47, 48, 49, 50, 52, 67, 74, 99, 138, 144, 145, 178, 179, 208, 211, 216, 230], "anonim": [45, 67, 142, 176], "mask": [45, 46, 47, 50, 58, 67, 138, 142, 176, 208, 211, 228, 230], "obfusc": [45, 46, 47, 48, 50, 51, 52, 53, 67, 142, 176, 208, 211, 228], "dateent": [45, 46, 47, 50, 67, 142, 176], "dob": [45, 46, 47, 50, 67, 142, 176], "dod": [45, 46, 47, 50, 67, 142, 176], "effdat": [45, 46, 47, 50, 142, 176], "fiscal_year": [45, 46, 47, 50, 142, 176], "obfuscated": [45, 46, 47, 50, 67, 142, 176], "dateformat": [45, 46, 47, 50, 67, 106, 142, 176, 211], "unnormalizeddatemod": [45, 46, 47, 50, 67, 142, 176, 211], "activ": [45, 46, 47, 50, 67, 108, 109, 127, 142, 152, 176, 186, 229, 243], "dai": [45, 46, 47, 48, 50, 67, 93, 142, 143, 176, 177, 211, 228, 229], "displac": [45, 46, 47, 50, 67, 142, 176, 211], "60": [45, 46, 47, 50, 67, 142, 176, 208, 211, 229], "useshiftdai": [45, 46, 47, 50, 142, 176], "shift": [45, 46, 47, 48, 50, 142, 143, 176, 177, 228, 229], "pars": [45, 46, 47, 48, 50, 64, 67, 106, 142, 176, 208, 213, 224, 234], "additionaldateformat": [45, 46, 47, 50, 142, 176], "region": [45, 46, 47, 50, 138, 142, 176, 211, 239], "especi": [45, 46, 47, 50, 83, 142, 176, 211], "2023": [45, 46, 47, 48, 50, 93, 142, 171, 176], "eu": [45, 46, 47, 50, 142, 176, 211], "european": [45, 46, 47, 50, 142, 176, 211], "union": [45, 46, 47, 50, 142, 176, 211], "usa": [45, 46, 47, 50, 142, 168, 176, 203, 211], "keepyear": [45, 46, 47, 50, 67, 142, 176, 211], "intact": [45, 46, 47, 50, 67, 142, 176, 211], "remain": [45, 46, 47, 50, 51, 67, 142, 176, 211], "unchang": [45, 46, 47, 50, 67, 142, 176, 211], "month": [45, 46, 47, 50, 67, 84, 93, 142, 176, 211], "keepmonth": [45, 46, 47, 50, 67, 142, 176, 211], "obfuscaterefsourc": [45, 46, 47, 50, 51, 67, 142, 176, 211], "invalid": [45, 46, 47, 50, 67, 142, 176, 230], "faker": [45, 46, 47, 48, 50, 51, 67, 138, 142, 176, 211, 230], "setcustomfak": [45, 46, 47, 50, 67, 142, 176], "selectiveobfuscaterefsourc": [45, 211], "english": [45, 46, 47, 50, 51, 67, 142, 176, 211, 230], "german": [45, 46, 47, 50, 51, 67, 142, 176, 211], "spanish": [45, 46, 47, 50, 51, 67, 142, 176, 211], "fr": [45, 46, 47, 50, 51, 67, 142, 176, 211], "french": [45, 46, 47, 50, 51, 67, 142, 176, 211], "arab": [45, 46, 47, 50, 51, 67, 142, 176, 211], "ro": [45, 46, 47, 50, 51, 67, 142, 176, 211], "romanian": [45, 46, 47, 50, 51, 67, 142, 176, 211], "With": [45, 46, 47, 50, 51, 53, 67, 79, 142, 176, 211], "repli": [45, 46, 47, 50, 51, 67, 142, 176], "maskingpolici": [45, 46, 47, 50, 67, 142, 176], "polici": [45, 46, 47, 50, 67, 94, 142, 176], "same_length_char": [45, 46, 47, 50, 67, 142, 176], "compos": [45, 46, 47, 50, 67, 142, 176], "asterisk": [45, 46, 47, 50, 67, 142, 176, 228], "squar": [45, 46, 47, 50, 67, 142, 176], "bracket": [45, 46, 47, 50, 67, 142, 176], "total": [45, 46, 47, 50, 67, 142, 176], "smith": [45, 46, 47, 50, 67, 103, 142, 176, 211], "less": [45, 46, 47, 50, 67, 87, 142, 168, 176, 203], "jo": [45, 46, 47, 50, 67, 142, 176], "fixed_length_char": [45, 46, 47, 50, 67, 142, 176], "fix": [45, 46, 47, 50, 67, 142, 176, 228], "entity_labels_without_bracket": [45, 46, 47, 50, 67, 142, 176], "same_length_chars_without_bracket": [45, 46, 47, 50, 67, 142, 176], "asterix": [45, 46, 47, 50, 67, 142, 176], "fixedmasklength": [45, 46, 47, 50, 67, 142, 176], "samelengthformattedent": [45, 46, 47, 50, 67, 142, 176], "ones": [45, 46, 47, 50, 51, 53, 67, 87, 102, 142, 161, 168, 176, 196, 203], "fax": [45, 67, 142, 176, 211], "idnum": [45, 67, 142, 176], "bioid": [45, 67, 142, 176, 211], "medicalrecord": [45, 67, 142, 176, 211], "zip": [45, 46, 47, 50, 67, 142, 176, 211], "vin": [45, 67, 142, 176], "ssn": [45, 46, 47, 67, 142, 176, 211], "dln": [45, 46, 47, 67, 142, 176, 211], "plate": [45, 67, 142, 176], "genderawar": [45, 46, 47, 50, 51, 67, 142, 176, 211], "awar": [45, 46, 47, 50, 51, 67, 79, 126, 142, 176, 211], "decreas": [45, 46, 47, 50, 51, 67, 126, 127, 142, 176, 211], "agerang": [45, 46, 47, 50, 67, 142, 176], "preserv": [45, 46, 47, 50, 67, 76, 77, 89, 142, 176], "agerangesbyhipaa": [45, 46, 47, 50, 142, 176, 211], "hipaa": [45, 46, 47, 50, 142, 176, 211, 228], "health": [45, 46, 47, 50, 57, 142, 176, 211, 240], "insur": [45, 46, 47, 50, 142, 171, 176, 211], "portabl": [45, 46, 47, 50, 142, 176, 211], "account": [45, 46, 47, 50, 60, 99, 142, 176, 211], "act": [45, 46, 47, 50, 104, 142, 156, 176, 191, 211], "privaci": [45, 46, 47, 50, 67, 142, 176, 211], "mandat": [45, 46, 47, 50, 142, 176], "90": [45, 46, 47, 50, 142, 176, 213], "younger": [45, 46, 47, 50, 142, 171, 176], "larger": [45, 46, 47, 50, 58, 79, 89, 142, 176], "consistentacrossnamepart": [45, 46, 47, 50, 142, 176, 211], "across": [45, 46, 47, 50, 79, 87, 142, 168, 176, 203, 211], "middl": [45, 106, 211], "even": [45, 46, 47, 50, 90, 142, 176, 211], "liam": [45, 46, 47, 50, 142, 176, 211], "brown": [45, 46, 47, 48, 50, 142, 176, 211, 238, 239], "individu": [45, 46, 47, 50, 126, 142, 176, 211], "still": [45, 46, 47, 50, 142, 176, 211], "keeptextsizeforobfusc": [45, 46, 47, 50, 142, 176, 211], "fakerlengthoffset": [45, 46, 47, 50, 142, 176, 211], "deviat": [45, 46, 47, 50, 142, 176, 211], "greater": [45, 46, 47, 50, 79, 87, 106, 116, 142, 168, 176, 203, 206, 211], "geoconsist": [45, 46, 47, 50, 142, 176], "geograph": [45, 46, 47, 50, 142, 176], "citi": [45, 46, 47, 50, 67, 92, 118, 142, 170, 176, 204, 211], "street": [45, 46, 47, 50, 142, 176, 211], "intellig": [45, 46, 47, 50, 142, 176], "realist": [45, 46, 47, 50, 142, 176], "relationship": [45, 46, 47, 50, 61, 108, 111, 142, 153, 176, 187, 209], "system": [45, 46, 47, 50, 67, 79, 106, 142, 176, 211], "coher": [45, 46, 47, 50, 142, 176], "combin": [45, 46, 47, 50, 58, 60, 89, 90, 103, 104, 130, 142, 165, 171, 176, 199], "countryobfusc": [45, 46, 47, 50, 142, 176], "countri": [45, 46, 47, 50, 142, 176, 211], "enabledefaultobfuscationequival": [45, 46, 47, 50, 142, 176], "getdefaultobfuscationequival": [45, 46, 47, 50, 142, 176], "getselectiveobfuscaterefsourc": [45, 46, 47, 50, 142, 176], "ref": [45, 46, 47, 50, 142, 176], "setadditionaldateformat": [45, 46, 47, 50, 142, 176], "setagerang": [45, 46, 47, 50, 67, 142, 176], "setagerangesbyhipaa": [45, 46, 47, 50, 142, 176], "setconsistentacrossnamepart": [45, 46, 47, 50, 142, 176], "setcountryobfusc": [45, 46, 47, 50, 142, 176], "setdateent": [45, 46, 47, 50, 67, 142, 176], "setdateformat": [45, 46, 47, 50, 67, 142, 176], "setdai": [45, 46, 47, 50, 67, 142, 176], "setenabledefaultobfuscationequival": [45, 46, 47, 50, 142, 176], "predefin": [45, 46, 47, 48, 50, 61, 76, 113, 142, 143, 176, 177, 228], "setfakerlengthoffset": [45, 46, 47, 50, 142, 176], "setfixedmasklength": [45, 46, 47, 50, 67, 142, 176], "setgenderawar": [45, 46, 47, 50, 51, 67, 142, 176], "setgeoconsist": [45, 46, 47, 50, 142, 176], "AND": [45, 46, 47, 50, 142, 176], "disabl": [45, 46, 47, 50, 79, 102, 142, 161, 171, 176, 196, 206, 213], "fake": [45, 46, 47, 50, 142, 176], "hash": [45, 46, 47, 48, 50, 142, 143, 176, 177, 229], "determinist": [45, 46, 47, 50, 142, 176, 229], "reproduc": [45, 46, 47, 50, 87, 122, 123, 142, 163, 176, 198, 203], "consistentobfusc": [45, 46, 47, 50, 142, 176], "overridden": [45, 46, 47, 50, 142, 176], "necessari": [45, 46, 47, 50, 142, 176, 215], "becaus": [45, 46, 47, 50, 57, 142, 171, 176, 206, 213], "deidentifi": [45, 46, 47, 48, 50, 52, 67, 138, 142, 176, 208, 228, 230], "setlanguag": [45, 46, 47, 48, 50, 51, 67, 142, 176], "setkeepmonth": [45, 46, 47, 50, 67, 142, 176], "setkeeptextsizeforobfusc": [45, 46, 47, 50, 142, 176], "els": [45, 46, 47, 50, 93, 142, 176], "setkeepyear": [45, 46, 47, 50, 67, 142, 176], "setmaskingpolici": [45, 46, 47, 50, 67, 142, 176], "setmod": [45, 46, 47, 48, 50, 67, 142, 176, 230], "anonym": [45, 46, 47, 50, 67, 142, 176, 221], "setobfuscated": [45, 46, 47, 48, 50, 142, 176], "setobfuscaterefsourc": [45, 46, 47, 48, 50, 51, 67, 142, 176], "randomli": [45, 46, 47, 50, 67, 87, 142, 168, 176, 203, 211], "setobfuscationequival": [45, 46, 47, 50, 142, 176], "variant": [45, 46, 47, 50, 142, 176], "canon": [45, 46, 47, 50, 142, 176], "alex": [45, 46, 47, 50, 142, 176], "alexand": [45, 46, 47, 50, 142, 176], "triplet": [45, 46, 47, 50, 142, 176], "altern": [45, 46, 47, 50, 83, 142, 176], "entitytyp": [45, 46, 47, 50, 142, 176], "semant": [45, 46, 47, 50, 142, 176], "ident": [45, 46, 47, 50, 142, 176], "insensit": [45, 46, 47, 50, 61, 142, 176, 230], "rob": [45, 46, 47, 50, 142, 176], "robert": [45, 46, 47, 50, 142, 176], "ca": [45, 46, 47, 50, 142, 176], "calif": [45, 46, 47, 50, 142, 176], "my_deid_transform": [45, 46, 47, 50, 142, 176], "valueerror": [45, 46, 47, 50, 142, 176, 230], "entri": [45, 46, 47, 50, 142, 176], "exactli": [45, 46, 47, 50, 67, 87, 142, 168, 176, 203], "setregion": [45, 46, 47, 50, 142, 176], "setsamelengthformattedent": [45, 46, 47, 50, 67, 142, 176], "setse": [45, 46, 47, 48, 50, 51, 67, 79, 142, 143, 176, 177, 206], "setselectiveobfuscaterefsourc": [45, 46, 47, 50, 142, 176], "selective_sourc": [45, 46, 47, 50, 142, 176], "setselectiveobfuscationmod": [45, 46, 47, 50, 67, 142, 176], "mask_same_length_char": [45, 46, 47, 50, 67, 142, 176], "minu": [45, 46, 47, 50, 67, 142, 176, 230], "plu": [45, 46, 47, 50, 67, 142, 176], "mask_entity_label": [45, 46, 47, 50, 67, 142, 176], "mask_fixed_length_char": [45, 46, 47, 50, 67, 142, 176], "invok": [45, 46, 47, 50, 67, 142, 176], "mask_entity_labels_without_bracket": [45, 46, 47, 50, 67, 142, 176], "mask_same_length_chars_without_bracket": [45, 46, 47, 50, 67, 142, 176], "deidannot": [45, 46, 47, 50, 142, 176], "setstaticobfuscationpair": [45, 46, 47, 50, 142, 176], "person": [45, 46, 47, 50, 55, 58, 64, 89, 91, 142, 171, 176, 211, 230], "jane": [45, 46, 47, 50, 67, 142, 176], "lo": [45, 46, 47, 50, 67, 142, 176], "angel": [45, 46, 47, 50, 67, 142, 176], "york": [45, 46, 47, 50, 67, 91, 92, 142, 170, 176, 204], "setunnormalizeddatemod": [45, 46, 47, 50, 67, 142, 176], "setuseshiftdai": [45, 46, 47, 50, 142, 176], "deidentication_param": [46, 49, 74], "deidentificationparam": [46, 47, 142, 176], "deidentificationmodel": [46, 47, 53, 142, 176, 216], "setregexpatternsdictionari": [46, 142, 176], "line": [46, 64, 76, 89, 142, 176, 208, 213, 221, 226, 243], "secur": [46, 211], "securerandom": 46, "variabl": [46, 102, 122, 123, 161, 163, 171, 196, 198], "spark_nlp_jsl_seed_algorithm": 46, "chosen": [46, 87, 168, 203], "impact": 46, "potenti": [46, 127], "block": [46, 80], "rng": [46, 79, 206], "sha1prng": 46, "regexpatternsdictionari": [46, 142, 176], "protect": [46, 58, 80, 142, 176], "obfuscatereffil": [46, 51, 142, 176, 211, 230], "reffileformat": [46, 51, 142, 176], "refsep": [46, 51, 142, 176], "sep": [46, 142, 176, 213], "reffil": [46, 51, 142, 176], "selectiveobfuscationmodespath": [46, 142, 176], "entitycasingmodespath": [46, 142, 176], "uppercas": [46, 142, 176], "upper": [46, 47, 87, 108, 109, 110, 142, 152, 168, 176, 186, 203], "capit": [46, 142, 176], "titlecas": [46, 142, 176], "setuseabbrevi": [46, 51, 142, 176], "clinical_sensitive_ent": [46, 51, 142, 176], "ner_deid_enrich": [46, 51, 142, 176], "ner_con": [46, 142, 176], "dei": [46, 52, 142, 176], "dic_regex_patterns_main_categori": [46, 142, 176], "setobfuscatereffil": [46, 51, 53, 142, 176], "obfuscate_fixed_ent": [46, 142, 176], "setreffileformat": [46, 51, 53, 142, 176], "setrefsep": [46, 51, 53, 142, 176], "mm": [46, 66, 93, 142, 176, 211, 213, 224], "dd": [46, 66, 93, 106, 113, 142, 176, 211, 224], "yy": [46, 142, 176], "yyyi": [46, 66, 93, 106, 142, 176, 211, 224], "7194334": [46, 52, 142, 176], "93": [46, 52, 142, 176], "oliveira": [46, 52, 142, 176], "record": [46, 52, 142, 176, 211], "2079": [46, 52, 142, 176], "09": [46, 52, 142, 176], "01010101": [46, 52, 142, 176], "dr": [46, 51, 52, 53, 142, 176], "gregori": [46, 52, 142, 176], "hous": [46, 52, 142, 176], "combineregexpattern": [46, 142, 176], "datetag": [46, 47, 142, 176], "datetoyear": [46, 47, 142, 176], "groupbycol": [46, 47, 142, 176], "ignoreregex": [46, 47, 142, 176], "israndomdatedisplac": [46, 47, 142, 176], "mappingscolumn": [46, 47, 53, 142, 176], "metadatamaskingpolici": [46, 47, 142, 176], "minyear": [46, 47, 142, 176], "obfuscatebyagegroup": [46, 47, 142, 176], "obfuscationequivalentsresourc": [46, 142, 176], "obfuscationstrategyonexcept": [46, 47, 142, 176], "outputasdocu": [46, 47, 58, 142, 176], "regexoverrid": [46, 47, 142, 176], "regexpatternsdictionaryasjsonstr": [46, 142, 176], "returnentitymap": [46, 47, 53, 142, 176], "sameentitythreshold": [46, 47, 142, 176], "staticobfuscationpairsresourc": [46, 142, 176], "useshifdai": [46, 47, 142, 176], "zipcodetag": [46, 47, 142, 176], "getchunkmatch": [46, 47, 142, 176], "chunkmatch": [46, 47, 142, 176], "getuseshiftdai": [46, 47, 142, 176], "setagegroup": [46, 47, 142, 176], "agegroup": [46, 47, 142, 176], "fulli": [46, 47, 142, 176], "bound": [46, 47, 126, 142, 176, 238, 243], "babi": [46, 47, 142, 176], "toddler": [46, 47, 142, 176], "child": [46, 47, 142, 176], "teenag": [46, 47, 142, 176], "adult": [46, 47, 142, 176], "65": [46, 47, 142, 171, 176, 213], "senior": [46, 47, 142, 176], "iban": [46, 47, 142, 176, 211], "npi": [46, 47, 142, 176, 211], "passport": [46, 47, 142, 176, 211], "c_card": [46, 47, 142, 176, 211], "dea": [46, 47, 142, 176, 211], "ip": [46, 47, 142, 176, 211], "setblacklistent": [46, 47, 142, 176], "setchunkmatch": [46, 47, 142, 176], "miss": [46, 47, 56, 142, 171, 176, 208, 229], "infer": [46, 47, 79, 87, 111, 127, 142, 153, 168, 176, 187, 203], "setcombineregexpattern": [46, 142, 176], "setconsistentobfusc": [46, 47, 142, 176], "setdatetag": [46, 47, 48, 142, 176], "setdatetoyear": [46, 47, 142, 176], "setentitycasingmod": [46, 142, 176], "setgroupbycol": [46, 47, 142, 176], "partit": [46, 47, 142, 176], "chang": [46, 47, 80, 89, 127, 139, 142, 176, 213, 232, 240], "caution": [46, 47, 142, 176], "cannot": [46, 47, 142, 176, 230, 232], "setignoreregex": [46, 47, 142, 176], "increas": [46, 47, 79, 108, 110, 120, 121, 127, 142, 160, 162, 176, 195, 197], "accuraci": [46, 47, 87, 127, 142, 168, 176, 203, 230], "setisrandomdatedisplac": [46, 47, 142, 176], "setmappingscolumn": [46, 47, 52, 53, 142, 176], "setmetadatamaskingpolici": [46, 47, 142, 176], "just": [46, 47, 57, 87, 142, 168, 176, 203], "setminyear": [46, 47, 142, 176], "1929": [46, 47, 142, 176], "setobfuscatebyagegroup": [46, 47, 142, 176], "setobfuscationequivalentsresourc": [46, 142, 176], "plain": [46, 64, 142, 176], "manag": [46, 142, 176, 215], "outsid": [46, 89, 142, 176], "setobfuscationstrategyonexcept": [46, 47, 142, 176], "four": [46, 47, 142, 176], "throw": [46, 47, 106, 142, 171, 176], "setoutputasdocu": [46, 47, 142, 176], "l": [46, 47, 51, 142, 176, 213], "join": [46, 47, 58, 104, 130, 142, 176], "c": [46, 51, 142, 176, 220], "setregexoverrid": [46, 47, 142, 176], "setregexpatternsdictionaryasjsonstr": [46, 142, 176], "setreturnentitymap": [46, 47, 53, 142, 176], "setsameentitythreshold": [46, 47, 142, 176], "setstaticobfuscationpairsresourc": [46, 142, 176], "third": [46, 80, 103, 142, 165, 176, 199], "setuseshifdai": [46, 47, 48, 142, 176], "setzipcodetag": [46, 47, 142, 176], "regexent": [46, 142, 176], "regexpatterndictionari": [46, 142, 176], "deidentify_larg": [46, 142, 176], "getregexent": [46, 142, 176], "deidentify_enriched_clin": 46, "base_deidentification_param": [47, 49, 50, 74], "fill": [47, 90, 206, 229], "documenthashcod": [48, 143, 177, 216], "accordingli": 48, "patientidcolumn": [48, 143, 177], "dateshiftcolumn": [48, 143, 177], "newdateshift": [48, 143, 177], "rangedai": [48, 143, 177], "patientid": 48, "a001": 48, "a003": 48, "chri": 48, "discharg": 48, "02": [48, 93], "04": [48, 93], "15": [48, 80, 86, 93, 230], "03": [48, 93, 110, 213], "moor": 48, "dateshift": [48, 138, 230], "my_input_df": 48, "documenthash": [48, 138], "setdateshiftcolumn": [48, 143, 177], "ner_deid_subentity_aug": 48, "de_identif": 48, "deid_text": 48, "pipeline_col": 48, "pipeline_col_model": 48, "ellend": 48, "manual": 48, "errol": 48, "bang": 48, "ariel": 48, "null": [48, 213], "jean": 48, "cotton": 48, "setnewdateshift": [48, 143, 177], "setpatientidcolumn": [48, 143, 177], "setrangedai": [48, 143, 177], "doccument_hashcod": [49, 74], "light_deidentif": [49, 74, 230], "name_obfusc": [49, 74], "reidentif": [49, 74, 216], "lightdeidentif": [50, 230], "light": [50, 213], "design": [50, 79, 99], "doctor": [50, 51, 211], "million": [50, 94, 122, 123, 126, 163, 198], "And": [50, 58, 84, 126], "selectiveobfuscationmod": [50, 67], "customfak": [50, 67], "school": [50, 67], "oxford": [50, 67], "harvard": [50, 67], "namechunkobfusc": [51, 53, 216], "pretraind": 51, "seper": [51, 234], "samelength": 51, "nameent": 51, "setnameent": 51, "setsamelength": 51, "mike": 51, "namechunkobfuscatorapproach": [51, 53, 216], "obfuscator_nam": 51, "replacer_nam": [51, 53], "obfuscated_nam": 51, "setusereplac": [51, 53], "davi": [51, 53], "y": [51, 53], "admit": [51, 53, 103], "seen": [51, 53, 126], "attend": [51, 53], "physician": [51, 53], "lorand": [51, 53], "schedul": [51, 53], "emerg": [51, 53, 240], "assess": [51, 53, 240], "charlestin": 51, "loweri": 51, "reidentifi": 52, "py": [52, 53, 206], "frame": [52, 87, 168, 203, 213], "reideintif": 52, "protectedent": 52, "reid": 52, "redeideintif": 52, "datenorm": [53, 93, 216], "usereplac": 53, "nonevaluesto": 53, "encount": [53, 120, 121, 122, 123, 160, 162, 163, 195, 197, 198], "placehold": 53, "place_hold": 53, "placeholderdelimit": 53, "wrap": [53, 206], "staticentitymappingsfallback": 53, "fallback": [53, 106, 229], "staticentitymap": 53, "ner_converter_nam": 53, "names_test": 53, "obfuscated_document_nam": 53, "model_chunck_obfusc": 53, "sample_text": 53, "mr": 53, "lmodel": 53, "fitzpatrick": 53, "bowman": 53, "acosta": 53, "getstaticentitymap": 53, "getusereplac": 53, "setnonevaluesto": 53, "retain": 53, "target_text": 53, "prioritizestatic_ent": 53, "unrecogn": 53, "illegalargumentexcept": [53, 67, 209], "thrown": 53, "setplacehold": 53, "setplaceholderdelimit": 53, "setstaticentitymap": 53, "setstaticentitymappingsfallback": 53, "ner_disambigu": [54, 74], "nerdisambigu": [55, 216], "interest": 55, "compani": [55, 211], "kb": 55, "ne": [55, 171], "mention": [55, 94], "surfac": 55, "instanti": [55, 64, 76, 87, 108, 113, 156, 168, 191, 203, 213], "embeddingtypeparam": 55, "numfirstchar": 55, "initi": [55, 79, 87, 108, 168, 203, 206, 208, 213], "tokensearch": 55, "narrowwithapproximatematch": 55, "narrow": 55, "levenstein": 55, "levenshteindistancethresholdparam": 55, "nearmatchinggapparam": 55, "put": [55, 117, 156, 191], "trim": [55, 126], "candid": [55, 116, 149, 183], "nearmatchinggap": 55, "predictionslimit": 55, "s3knowledgebasenam": 55, "contest": 55, "donald": 55, "trump": 55, "who": [55, 103, 126, 165, 199], "defeat": 55, "christina": 55, "aguilera": 55, "sentenceembed": [55, 156, 191, 216], "nerdlmodel": [55, 60, 87, 168, 203, 216], "sets3knowledgebasenam": 55, "setnumfirstchar": 55, "wikipedia": 55, "curid": 55, "4848272": 55, "31698421": 55, "55907961": 55, "144171": 55, "6636454": 55, "setembeddingtyp": 55, "setlevenshteindistancethresholdparam": 55, "setnarrowwithapproximatematch": 55, "setnearmatchinggapparam": 55, "setpredictionlimit": 55, "settokensearch": 55, "nerdisambiguatormodel": [55, 216], "disambiguator_p": 55, "doc2chunkintern": [56, 216], "chunkcol": [56, 117, 143, 177], "arraytyp": [56, 117, 143, 177], "setisarrai": [56, 117, 143, 177], "startcolbytokenindex": [56, 143, 177], "prepend": [56, 126, 143, 177], "whitespac": [56, 120, 121, 126, 143, 160, 162, 177, 195, 197], "isarrai": [56, 143, 177], "failonmiss": [56, 143, 177], "job": [56, 143, 177], "advanc": [56, 143, 177], "documentfiltererbyclassifi": 57, "medicalbfsc": 57, "bert_sequence_classifier_covid_senti": 57, "documentfilter": 57, "filtereddocu": 57, "posit": [57, 80, 87, 89, 99, 108, 110, 122, 123, 163, 198, 203, 208, 213, 226, 242], "british": 57, "depart": 57, "uk": 57, "trip": 57, "australian": 57, "exchang": 57, "student": 57, "got": 57, "cancel": 57, "coronaviru": [57, 58], "wish": 57, "everyon": 57, "pandem": [57, 122, 123, 163, 198], "181": 57, "233": 57, "documentfiltererbyn": 58, "joinstr": [58, 104], "sentencedetectordlmodel": [58, 84, 216, 226], "sentence_detector_dl_healthcar": [58, 84], "covid": [58, 122, 123, 163, 198], "19": [58, 80, 86, 122, 123, 163, 198, 213], "infecti": 58, "sar": 58, "cov": 58, "peopl": [58, 122, 123, 163, 198], "experi": 58, "mild": 58, "moder": 58, "respiratori": [58, 130, 213], "ill": [58, 87, 168, 203], "recov": 58, "serious": 58, "attent": [58, 79], "cardiovascular": 58, "cancer": [58, 102, 111, 153, 161, 187, 196, 208], "seriou": 58, "anyon": 58, "sick": [58, 111, 153, 187], "die": 58, "best": [58, 87, 156, 168, 191, 203, 214], "slow": [58, 87, 127, 168, 203], "down": [58, 87, 127, 168, 203], "transmiss": 58, "well": [58, 61, 94, 126, 171, 214, 237, 242], "spread": 58, "yourself": 58, "stai": 58, "least": [58, 79, 106, 206], "metr": 58, "apart": 58, "wear": 58, "wash": 58, "hand": [58, 127], "alcohol": 58, "rub": 58, "frequent": 58, "vaccin": 58, "turn": [58, 102, 161, 196], "guidanc": 58, "mouth": 58, "nose": 58, "small": [58, 79, 126], "liquid": 58, "particl": 58, "cough": 58, "sneez": 58, "speak": 58, "sing": 58, "droplet": 58, "smaller": [58, 127], "aerosol": 58, "practic": [58, 87, 168, 203], "etiquett": 58, "flex": 58, "elbow": 58, "isol": 58, "until": [58, 206], "feel": 58, "unwel": 58, "86": 58, "87": [58, 230], "223": 58, "295": 58, "473": 58, "669": 58, "854": 58, "916": 58, "1050": 58, "averageembed": [59, 60, 216], "embded": 59, "bertsentencechunkembed": [60, 62, 216], "numer": [60, 66, 127, 228], "chunkweight": 60, "sentence_averag": 60, "scope_averag": 60, "chunk_onli": 60, "scope_onli": 60, "prerequisit": [60, 87, 168, 203], "nertagg": [60, 87, 108, 109, 152, 168, 186, 203], "sbluebert_base_uncased_mli": 60, "sentence_chunk_embed": 60, "31995273": 60, "04710883": 60, "28973156": 60, "1294758": 60, "12481072": 60, "027161136": 60, "24613449": 60, "0949309": 60, "1825444": 60, "2252143": 60, "45139068": 60, "12400375": 60, "0075617577": 60, "90806055": 60, "12871636": 60, "sbiobert_base_cased_mli": [60, 61, 117], "setchunkweight": 60, "setstrategi": [60, 113, 118], "entitychunkembed": [61, 216], "tri": [61, 66, 87, 106, 168, 203, 209], "criterion": [61, 87, 108, 110, 168, 203], "anoth": [61, 92, 170, 204, 229], "syntact": [61, 108, 110], "125": 61, "paracetamol": [61, 111, 153, 187], "metformin": [61, 84], "target_ent": 61, "related_ent": 61, "notat": [61, 67], "subclass": [61, 127, 134, 137, 206], "targetent": [61, 173, 216], "entityweight": [61, 173, 216], "3f": 61, "maxsyntacticdist": [61, 108, 110], "pos_tag": [61, 82, 108, 110, 111, 127, 153, 187], "pos_clin": [61, 82, 108, 109, 110, 111, 152, 153, 186, 187], "dependency_pars": [61, 82, 110, 111, 153, 187], "dependencyparsermodel": [61, 82, 108, 109, 110, 111, 152, 153, 186, 187, 216], "dependency_conllu": [61, 82, 108, 109, 110, 111, 152, 153, 186, 187], "setmaxsyntacticdist": [61, 108, 109, 110, 111, 152, 153, 186, 187], "settargetent": 61, "setentityweight": 61, "parient": 61, "coumadin": 61, "pill": 61, "sparkcontextfortest": 61, "267413": 61, "07614058": 61, "5620966": 61, "83838946": 61, "8911504": 61, "22319649": 61, "07094894": 61, "6885556": 61, "79176235": 61, "82672405": 61, "10939768": 61, "29242": 61, "3574444": 61, "3981813": 61, "79609615": 61, "weigh": 61, "related1": 61, "related2": 61, "extractivesummar": [62, 216], "summarizaiton": 62, "lexrank": 62, "returnsingledocu": 62, "similaritythreshold": 62, "summarys": 62, "setreturnsingledocu": 62, "compil": [62, 215, 241], "setsimilaritythreshold": 62, "minim": [62, 91, 92, 108, 109, 111, 152, 153, 170, 186, 187, 204], "setsummarys": 62, "average_embed": [63, 74], "entity_chunk_embed": [63, 74], "extractive_summar": [63, 74], "entityrulerintern": 64, "entityrulerinternalapproach": 64, "hasstorag": 64, "There": [64, 171], "jsonl": 64, "setpatternsresourc": 64, "w": [64, 113, 216], "winterfel": 64, "j": 64, "jon": [64, 116], "stark": 64, "eddard": 64, "patternsresourc": 64, "usestorag": 64, "rocksdb": 64, "entityrul": 64, "lord": 64, "29": 64, "38": [64, 213], "alphabet": 64, "enableinmemorystorag": 64, "includestorag": 64, "sentencematch": 64, "storagepath": 64, "getenableinmemorystorag": 64, "getincludestorag": 64, "getstoragepath": 64, "setalphabetresourc": 64, "setenableinmemorystorag": 64, "lookup": [64, 79], "setincludestorag": 64, "interpret": [64, 70, 126], "setsentencematch": 64, "setstoragepath": 64, "setusestorag": 64, "entityrulerinternalmodel": 64, "hasstoragemodel": [64, 116], "databas": [64, 228], "entity_pattern": 64, "loadstorag": 64, "storage_ref": 64, "savestorag": 64, "entity_ruler_intern": [65, 74], "featuresassembl": [66, 71, 216], "anyth": [66, 127], "cast": [66, 106], "feature_vector": [66, 71, 235], "timestampformat": 66, "hh": 66, "ss": 66, "zz": 66, "test_jsl": 66, "relfeatur": 66, "withcolumn": 66, "array_column": 66, "words_in_ent1": [66, 213], "words_in_ent2": [66, 213], "features_asm1": 66, "words_between": [66, 213], "features_t": 66, "__data": 66, "fhirdeidentif": 67, "deid": [67, 74, 145, 154, 172, 179, 188, 216], "paramsgetterssett": 67, "r4": 67, "r5": 67, "dstu3": 67, "xml": 67, "fhirvers": 67, "parsertyp": 67, "birthdat": 67, "first_nam": [67, 211], "famili": [67, 116], "last_nam": [67, 211], "telecom": 67, "setmappingrul": 67, "setfhirvers": 67, "setparsertyp": 67, "88": [67, 99], "femal": [67, 82, 84, 130, 171], "john_do": 67, "resourcetyp": 67, "offici": [67, 87, 168, 203], "michael": 67, "johndo": 67, "1970": [67, 113], "male": [67, 171], "kill": 67, "ellison": 67, "isidor": 67, "bryton": 67, "yahoo": 67, "aurora": 67, "googl": 67, "21": [67, 171, 213, 230], "deidentify_list": 67, "deidentify_str": 67, "getmappingrul": 67, "primit": 67, "syntax": 67, "supportedentityclass": 67, "dot": 67, "unsupport": 67, "fhir_deidentif": [68, 74], "easier": 70, "cleanannot": [70, 99], "explodeselectedfield": 70, "flattenexplodedcolumn": 70, "orderbycolumn": 70, "orderdescend": 70, "descend": [70, 106], "pretrainedpipelin": [70, 99, 208, 209, 216], "elderli": 70, "gentleman": 70, "acut": [70, 84], "distress": 70, "finish": [70, 216], "setorderbycolumn": 70, "assertion_metadata_confid": 70, "explainresult": 70, "finished_ner_chunk_explod": 70, "ner_chunk_result": [70, 208], "ner_chunk_metadata_ent": 70, "someoneels": 70, "9885": 70, "9976": 70, "9994": 70, "keeporiginalcolumn": 70, "setcleanannot": [70, 99], "choos": [70, 87, 140, 156, 168, 174, 191, 203], "alia": [70, 79], "setflattenexplodedcolumn": 70, "comprehens": 70, "view": 70, "setkeeporiginalcolumn": 70, "setorderdescend": 70, "proce": 71, "dropou": 71, "lay": 71, "features_asm": 71, "feature_1": 71, "feature_2": 71, "feature_n": 71, "graph_fil": [71, 108], "pb": [71, 87, 108, 127, 168, 203], "001": [71, 87, 108, 168, 203], "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 71, "disambigu": [74, 172, 216, 235], "er": [74, 172, 208, 216], "text_matcher_intern": [74, 75], "text_matcher_param": [74, 75, 76], "medical_llm": [74, 172], "chunk_merg": [74, 81], "re_chunk_merg": [74, 81], "iob_tagg": [74, 85], "medical_n": [74, 85, 168, 203], "ner_converter_intern": [74, 85], "ner_template_rend": [74, 85], "pretrained_zero_shot_n": [74, 85], "zero_shot_n": [74, 85, 166, 169, 200, 201], "date_norm": [74, 95], "drug_norm": [74, 95], "reset_sentence_indices_param": [74, 80, 96, 124], "structured_json_convert": [74, 98], "qa": [74, 122, 123, 161, 163, 172, 196, 198, 216], "beam_search_param": [74, 101, 102, 122], "medical_qa": [74, 101], "qa_ner_gener": [74, 101, 154, 164, 188, 194], "rag": [74, 79, 172], "context_split_assembl": [74, 105], "vectordb_post_processor": [74, 105], "relation_extract": [74, 107, 127, 150, 154, 184, 188, 216], "relation_extraction_dl": [74, 107, 150, 151, 184, 185], "relation_ner_chunk_filt": [74, 107], "zero_shot_relation_extract": [74, 107, 150, 151, 184, 185], "resolut": [74, 99, 106, 117, 145, 154, 172, 179, 188, 208, 216, 238], "resolver_merg": [74, 114], "sentence_entity_resolv": [74, 114, 145, 148, 179, 182], "seq2seq": [74, 79, 172, 216], "medical_encoder_decod": [74, 119, 121], "medical_summar": [74, 119], "medical_text_gener": [74, 119, 123], "text2sql": [74, 119, 216], "splitter": [74, 172], "internal_document_splitt": [74, 125], "windowed_sent": [74, 129], "annotation_convert": [74, 172], "annotation_merg": [74, 172], "chunk2_token": [74, 172], "doc2_chunk_intern": [74, 172], "document_filterer_by_classifi": [74, 172], "document_filterer_by_n": [74, 172], "feature_assembl": [74, 172], "metadata_annotation_convert": [74, 172], "multi_chunk2_doc": [74, 172], "resolution2_chunk": [74, 172], "router": [74, 172, 216], "tf_graph_build": [74, 172], "textmatcherintern": [76, 77], "textmatcherparam": [76, 77], "setent": [76, 83, 87, 168, 203], "externalresourc": [76, 216], "entityvalu": 76, "buildfromtoken": 76, "lemmat": [76, 77, 216], "enablelemmat": [76, 77], "enablestemm": [76, 77], "stopword": [76, 77, 89], "cleanstopword": [76, 77], "clean": [76, 77, 221], "shuffleentitysubtoken": 76, "variat": 76, "permut": [76, 90], "dolor": 76, "magna": 76, "aliqua": 76, "entity_name_1": 76, "lorem": 76, "ipsum": 76, "sit": 76, "laborum": 76, "hello": [76, 206], "entityextractor": 76, "extractor": 76, "59": [76, 110], "cleankeyword": [76, 77], "excludepunctu": [76, 77], "excluderegexpattern": [76, 77], "lemmatizerdictionari": 76, "returnchunk": [76, 77], "safekeyword": [76, 77], "skipmatcheraugment": [76, 77], "skipsourcetextaugment": [76, 77], "getcleankeyword": [76, 77], "alongsid": [76, 77], "getexcluderegexpattern": [76, 77], "getreturnchunk": [76, 77], "getsafekeyword": [76, 77], "getstopword": [76, 77], "setbuildfromtoken": 76, "setcleankeyword": [76, 77], "setcleanstopword": [76, 77], "setenablelemmat": [76, 77], "setenablestemm": [76, 77], "setentityvalu": 76, "setexcludepunctu": [76, 77], "setexcluderegexpattern": [76, 77], "setlemmatizerdictionari": 76, "key_delimit": 76, "value_delimit": 76, "here": 76, "pick": 76, "peck": 76, "pickl": 76, "pepper": 76, "setreturnchunk": [76, 77], "setsafekeyword": [76, 77], "setshuffleentitysubtoken": 76, "setskipmatcheraugment": [76, 77], "augment": [76, 77, 79, 213], "setskipsourcetextaugment": [76, 77], "setstopword": [76, 77], "textmatcherinternalmodel": [76, 77], "own": [76, 87, 113, 156, 168, 191, 203, 211], "searchtri": 76, "searchtrieintern": 76, "getdelimit": 76, "medicalllm": 79, "autoggufmodel": [79, 91], "gguf": 79, "scalabl": 79, "ideal": 79, "applic": [79, 126, 240], "q": 79, "retriev": [79, 87, 168, 203, 208, 209, 228, 240], "ai": [79, 216], "customiz": 79, "chat": [79, 206], "templat": [79, 90, 102, 111, 122, 123, 153, 161, 163, 187, 196, 198, 206], "enhanc": 79, "capabl": [79, 102, 161, 196], "empow": 79, "complex": [79, 127], "precis": [79, 214, 237, 242], "setngpulay": 79, "setnctx": 79, "hardwar": 79, "nthread": 79, "nthreadsdraft": 79, "draft": 79, "nthreadsbatch": 79, "prompt": [79, 102, 122, 123, 161, 163, 196, 198, 206], "nthreadsbatchdraft": 79, "nctx": 79, "nbatch": 79, "bla": 79, "nubatch": 79, "physic": [79, 84], "ndraft": 79, "specul": 79, "decod": [79, 100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "nchunk": 79, "nsequenc": 79, "psplit": 79, "ngpulay": 79, "vram": 79, "ngpulayersdraft": 79, "gpusplitmod": 79, "maingpu": 79, "scratch": 79, "tensor": [79, 127], "tensorsplit": 79, "grpattnn": 79, "grpattnw": 79, "width": [79, 238], "ropefreqbas": 79, "rope": 79, "ntk": 79, "ropefreqscal": 79, "expand": 79, "yarnextfactor": 79, "yarn": 79, "extrapol": 79, "mix": [79, 206], "yarnattnfactor": 79, "sqrt": 79, "magnitud": 79, "yarnbetafast": 79, "low": [79, 127, 171], "dim": 79, "beta": 79, "yarnbetaslow": 79, "alpha": [79, 206], "yarnorigctx": 79, "defragmentationthreshold": 79, "kv": 79, "defragment": 79, "numastrategi": 79, "numa": 79, "ropescalingtyp": 79, "unless": 79, "poolingtyp": 79, "unspecifi": 79, "modeldraft": 79, "modelalia": 79, "lookupcachestaticfilepath": 79, "lookupcachedynamicfilepath": 79, "dynam": [79, 206], "flashattent": 79, "flash": 79, "inputprefixbo": 79, "bo": 79, "preced": [79, 80], "usemmap": 79, "pageout": 79, "mlock": 79, "usemlock": 79, "forc": 79, "ram": 79, "swap": 79, "compress": 79, "nokvoffload": 79, "offload": 79, "systemprompt": 79, "chattempl": 79, "inputprefix": [79, 206], "inputsuffix": [79, 206], "infil": [79, 206], "cacheprompt": [79, 206], "rememb": [79, 206], "reprocess": [79, 206], "npredict": [79, 206], "topk": [79, 100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198, 206], "topp": [79, 206], "minp": [79, 206], "tfsz": [79, 206], "tail": [79, 206], "typicalp": [79, 206], "typic": [79, 99, 206], "temperatur": [79, 206], "dynatemprang": [79, 206], "dynatempexpon": [79, 206], "expon": [79, 206], "repeatlastn": [79, 206], "repeatpenalti": [79, 206], "repeat": [79, 102, 122, 123, 161, 163, 196, 198, 206], "frequencypenalti": [79, 206], "repetit": [79, 206], "presencepenalti": [79, 206], "presenc": [79, 206], "mirostat": [79, 206], "mirostattau": [79, 206], "entropi": [79, 206], "tau": [79, 206], "mirostateta": [79, 206], "eta": [79, 206], "penalizenl": [79, 206], "penal": [79, 206], "newlin": [79, 206], "nkeep": [79, 206], "nprob": [79, 206], "minkeep": [79, 206], "sampler": [79, 206], "grammar": [79, 206], "bnf": [79, 206], "constrain": [79, 206], "penaltyprompt": [79, 206], "ignoreeo": [79, 206], "stream": [79, 206], "impli": [79, 206], "logit": [79, 206, 216], "bia": [79, 206], "inf": [79, 206], "disabletokenid": 79, "stopstr": [79, 206], "upon": [79, 206], "usechattempl": [79, 206], "dynamictemperatureexpon": 79, "dynamictemperaturerang": 79, "getmetadata": [79, 206], "jsl_medm_q8_v1": 79, "setcacheprompt": [79, 206], "setchattempl": 79, "setdefragmentationthreshold": 79, "setdisabletokenid": 79, "setdynamictemperatureexpon": [79, 206], "setdynamictemperaturerang": [79, 206], "setembed": 79, "setflashattent": 79, "setfrequencypenalti": [79, 206], "setgpusplitmod": 79, "setgrammar": [79, 206], "setgrpattnn": 79, "setgrpattnw": 79, "setignoreeo": [79, 206], "setinputprefix": [79, 206], "setinputprefixbo": 79, "setinputsuffix": [79, 206], "setlookupcachedynamicfilepath": 79, "setlookupcachestaticfilepath": 79, "setloraadapt": 79, "loraadapt": 79, "lora": 79, "adapt": [79, 221], "setmaingpu": 79, "setminkeep": [79, 206], "setminp": [79, 206], "setmirostat": 79, "setmirostateta": [79, 206], "setmirostattau": [79, 206], "setmodelalia": 79, "setmodeldraft": 79, "setnbatch": 79, "setnchunk": 79, "setndraft": 79, "setngpulayersdraft": 79, "setnkeep": [79, 206], "setnparallel": 79, "nparallel": 79, "parallel": 79, "setnpredict": [79, 206], "setnprob": [79, 206], "setnsequ": 79, "setnthread": 79, "setnthreadsbatch": 79, "setnthreadsbatchdraft": 79, "setnthreadsdraft": 79, "setnubatch": 79, "setnokvoffload": 79, "setnumastrategi": 79, "setpsplit": 79, "setpenalizenl": [79, 206], "setpenaltyprompt": [79, 206], "setpoolingtyp": 79, "setpresencepenalti": [79, 206], "setrepeatlastn": [79, 206], "setrepeatpenalti": [79, 206], "setropefreqbas": 79, "setropefreqscal": 79, "setropescalingtyp": 79, "setsampl": 79, "setstopstr": [79, 206], "setsystemprompt": 79, "settemperatur": [79, 206], "settensorsplit": 79, "settfsz": [79, 206], "settokenbia": 79, "tokenbia": 79, "settokenidbia": 79, "tokenidbia": 79, "settopk": [79, 100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198, 206], "settopp": [79, 206], "settypicalp": [79, 206], "setusechattempl": [79, 206], "setusemlock": 79, "setusemmap": 79, "setyarnattnfactor": 79, "setyarnbetafast": 79, "setyarnbetaslow": 79, "setyarnextfactor": 79, "setyarnorigctx": 79, "chunkmergeapproach": [80, 216], "mergecommonparam": [80, 113, 216], "mergeprioritizationparam": [80, 216], "mergeresourceparam": [80, 216], "resetsentenceindicesparam": [80, 97, 124], "longer": [80, 127], "setreplacedictresourc": [80, 89], "falsepositivesresourc": 80, "replacedictresourc": [80, 89], "chunkpreced": 80, "proccess": [80, 89, 103, 165, 199], "emb": [80, 86], "jsl_ner": [80, 89], "jsl_ner_chunk": 80, "ner_bionlp": 80, "bionlp_ner": 80, "bionlp_ner_chunk": 80, "merged_chunk": [80, 208], "recurr": [80, 86, 87, 168, 203], "98": [80, 86, 230], "107": [80, 86], "cellul": [80, 86], "diagnosi": [80, 86], "119": [80, 86], "pneumonia": [80, 86], "chunkprecedencevaluepriorit": 80, "setchunkpreced": 80, "togeth": [80, 106, 130], "setchunkprecedencevaluepriorit": 80, "chunkconfid": 80, "setfalsepositivesresourc": 80, "chunkbegin": 80, "chunklength": 80, "chunkmergemodel": [80, 99, 216], "mergefeatureparam": [80, 216], "falseposit": 80, "replacedict": 80, "getreplacedict": 80, "setfalseposit": 80, "wow": 80, "thing": 80, "setreplacedict": 80, "rechunkmerg": 82, "words_embedd": [82, 110, 111, 153, 187], "pos_tagg": [82, 110, 111, 153, 187], "re_model": [82, 108, 109, 111, 152, 153, 186, 187], "relationextractionmodel": [82, 99, 108, 109, 152, 186, 216], "re_clin": 82, "re_chunk": [82, 110], "relation_chunk": 82, "setsepar": [82, 84], "diagnos": [82, 84, 130], "eight": [82, 84, 130], "prior": [82, 84, 130], "t2dm": [82, 84], "metadataannotationconvert": 83, "actual": [83, 230], "resultfield": 83, "beginfield": 83, "endfield": 83, "metadata_convert": 83, "setinputannotatortyp": 83, "converted_chunk": 83, "setresultfield": 83, "setbeginfield": 83, "char_start": 83, "setendfield": 83, "multichunk2doc": 84, "creation": [84, 213], "place": 84, "ner_clinical_large_langtest": 84, "new_docu": 84, "setprefix": 84, "setsuffix": 84, "episod": 84, "htg": [84, 130], "induc": 84, "pancreat": 84, "hepat": 84, "week": [84, 93, 130], "polyuria": 84, "poor": 84, "appetit": 84, "vomit": 84, "glipizid": 84, "dapagliflozin": 84, "atorvastatin": 84, "gemfibrozil": 84, "six": [84, 208], "examin": [84, 130], "signific": 84, "dry": 84, "oral": [84, 94], "mucosa": 84, "significantli": 84, "abdomin": 84, "benign": [84, 130], "tender": 84, "guard": 84, "rigid": [84, 130], "iobtagg": [86, 216], "scheme": [86, 213], "bioe": 86, "iobtaggermodel": 86, "setschem": 86, "medicalnerapproach": [87, 127, 168, 203, 216], "nerapproach": [87, 216], "evaluation_dl_param": 87, "evaluationdlparam": [87, 216], "cnn": [87, 168, 203], "bilstm": [87, 168, 203], "crf": [87, 168, 203, 216], "art": [87, 156, 168, 191, 203], "2003": [87, 168, 203], "bertembed": [87, 116, 149, 168, 183, 203, 216], "thu": [87, 168, 203], "minepoch": [87, 168, 203], "maxepoch": [87, 156, 168, 191, 203], "randomse": [87, 90, 120, 121, 122, 123, 156, 160, 162, 163, 168, 191, 195, 197, 198, 203], "decai": [87, 127, 168, 203], "coeffici": [87, 156, 168, 171, 191, 203], "005": [87, 156, 168, 191, 203], "adequ": [87, 168, 203], "blstn_": [87, 168, 203], "ntag": [87, 168, 203], "embedding_dim": [87, 168, 203], "lstm_size": [87, 168, 203], "nchar": [87, 168, 203], "satisfi": [87, 168, 203], "usecontrib": [87, 168, 203], "contrib": [87, 168, 203], "lstm": [87, 168, 203], "Not": [87, 168, 203], "slightli": [87, 168, 203], "off": [87, 140, 156, 168, 174, 191, 203], "hold": [87, 108, 168, 203], "evaluationlogextend": [87, 140, 156, 168, 174, 191, 203], "parquet": [87, 156, 168, 191, 203], "includeallconfidencescor": [87, 168, 203], "speed": 87, "stdout": [87, 156, 168, 191, 203], "enablememoryoptim": [87, 168, 203], "slower": [87, 168, 203], "evei": [87, 168, 203], "bach": [87, 168, 203], "onc": [87, 100, 102, 109, 120, 121, 122, 123, 152, 160, 161, 162, 163, 186, 195, 196, 197, 198], "tagsmap": [87, 168, 203], "oldtag": [87, 168, 203], "newtag": [87, 168, 203], "vip": [87, 168, 203], "overrideexistingtag": [87, 168, 203], "earlystoppingpati": [87, 168, 203], "wait": [87, 168, 203], "earli": [87, 168, 203], "earlystoppingcriterion": [87, 168, 203], "soon": [87, 168, 203], "met": [87, 168, 203], "patienc": [87, 168, 203], "f1": [87, 168, 203, 214, 237, 242], "socr": [87, 168, 203], "infin": [87, 168, 203, 206], "pretrainedmodelpath": [87, 108, 116, 149, 168, 183, 203], "point": [87, 108, 116, 149, 168, 183, 203], "logprefix": [87, 168, 203], "usebestmodel": [87, 168, 203], "sentencetokenindex": [87, 168, 203], "setmaxepoch": [87, 156, 168, 191, 203], "setrandomse": [87, 90, 100, 102, 120, 121, 122, 123, 156, 160, 161, 162, 163, 168, 191, 195, 196, 197, 198, 203], "trainingdata": [87, 168, 203], "readdataset": [87, 168, 203, 213], "conll2003": [87, 168, 203], "eng": [87, 168, 203, 213], "randomvalidationsplitperepoch": [87, 168, 203], "getlabelcolumn": [87, 127, 168, 203], "usual": [87, 89, 111, 116, 153, 168, 187, 203], "bad": [87, 156, 168, 191, 203], "lost": [87, 106, 168, 203], "setearlystoppingcriterion": [87, 168, 203], "setearlystoppingpati": [87, 168, 203], "termin": [87, 102, 161, 168, 196, 203], "setenablememoryoptim": [87, 168, 203], "setevaluationlogextend": [87, 156, 168, 191, 203], "displai": [87, 156, 168, 191, 203], "setincludeallconfidencescor": [87, 168, 203], "setlogprefix": [87, 168, 203], "setlr": [87, 156, 168, 191, 203], "setminepoch": [87, 168, 203], "setoverrideexistingtag": [87, 168, 203], "setpo": [87, 168, 203], "real": [87, 168, 203], "rage": [87, 168, 203], "setpretrainedmodelpath": [87, 108, 116, 149, 168, 183, 203], "shuffl": [87, 156, 168, 191, 203], "setrandomvalidationsplitperepoch": [87, 168, 203], "setsentencetokenindex": [87, 168, 203], "settagsmap": [87, 168, 203], "preprocessingpipelin": [87, 156, 168, 191, 203], "randomsplit": [87, 156, 168, 191, 203], "overwrit": [87, 156, 168, 191, 203, 211, 224], "setusebestmodel": [87, 168, 203], "setusecontrib": [87, 168, 203], "nerdlapproach": [87, 127, 168, 203, 216], "medicalnerdlmodel": [87, 168, 203], "ner_dl": [87, 168, 203, 230], "wordembed": [87, 168, 203, 216], "glove_100d": [87, 168, 203], "inferencebatchs": [87, 168, 203], "labelcas": [87, 168, 203], "ekeu": [87, 168, 203], "baghdad": [87, 168, 203], "trainingclassdistribut": [87, 168, 203], "gettrainingclassdistribut": [87, 168, 203], "setinferencebatchs": [87, 168, 203], "setlabelcas": [87, 168, 203], "nerchunk": [88, 108, 109, 152, 186, 216], "neighbor": [88, 130], "dt": 88, "jj": 88, "ner_radiologi": 88, "imagingfind": 88, "bodypart": 88, "regexpars": 88, "commonnerconverterinternalparam": 89, "preserveposit": 89, "greedymod": 89, "contigu": 89, "ignorestopword": 89, "setallowlist": 89, "loc": [89, 242], "setgreedymod": 89, "greedy_mod": 89, "setignorestopword": 89, "setpreserveposit": 89, "preserve_posit": 89, "setthreshold": [89, 116, 149, 183], "annotatorapproach": [89, 132, 216], "iob2": 89, "friendli": 89, "nerconverterinternalmodel": [89, 216], "insid": [89, 156, 191], "substitut": [89, 123], "replaced_ner_chunk": 89, "drug_brandnam": 89, "drug_frequ": 89, "drug_dosag": 89, "drug_strength": 89, "nertemplaterendermodel": [90, 216], "combineent": 90, "entityscop": 90, "permuteent": 90, "resampleent": 90, "setcombineent": 90, "setentityscop": 90, "render": 90, "liststr": 90, "setpermuteent": 90, "resampl": 90, "setresampleent": 90, "settempl": 90, "pretrainedzeroshotn": 91, "zero": [91, 92, 106, 111, 153, 170, 187, 204], "robertaforquestionansw": [91, 92, 170, 204, 216], "descriv": 91, "predictionthreshold": [91, 92, 108, 109, 111, 152, 153, 170, 186, 187, 204], "encod": [91, 92, 108, 109, 111, 127, 152, 153, 156, 170, 186, 187, 191, 204, 208], "01f": [91, 92, 170, 204], "clara": [91, 92, 170, 204], "live": [91, 92, 170, 204, 211], "hellen": [91, 92, 170, 204], "pari": [91, 92, 170, 204], "9360068": [91, 92, 170, 204], "83294415": [91, 92, 170, 204], "5328949": [91, 92, 170, 204], "getlabel": 91, "zeroshot_ner_deid_subentity_merged_medium": 91, "pretrained_zeroshot_n": 91, "setpredictionthreshold": [91, 92, 108, 109, 152, 170, 186, 204], "zeroshotnermodel": [92, 170, 204, 216], "classifier_dl": [92, 156, 191], "entitydefinit": [92, 170, 204], "question": [92, 102, 103, 161, 165, 170, 196, 199, 204], "town": [92, 170, 204], "ignoreent": [92, 170, 204], "setentitydefinit": [92, 170, 204], "45366877": [92, 170, 204], "max_length_limit": [92, 170, 204], "getmaxsentencelength": [92, 170, 204], "zero_shot_ner_roberta": 92, "expect": [93, 104, 213], "anchordateyear": 93, "anchor": 93, "tomorrow": 93, "2021": [93, 110, 171], "anchordatemonth": 93, "januari": 93, "anchordatedai": 93, "08": [93, 171], "2018": [93, 171], "12mar2021": 93, "jan": 93, "1999": 93, "3april": 93, "2020": [93, 171], "mondai": [93, 117, 156, 191], "todai": 93, "original_d": 93, "date_chunk": 93, "setanchordateyear": 93, "setanchordatemonth": 93, "setanchordatedai": 93, "normalized_d": 93, "defaultreplacementdai": 93, "defaultreplacementmonth": 93, "defaultreplacementyear": 93, "outputdateformat": 93, "setdefaultreplacementdai": 93, "setdefaultreplacementmonth": 93, "06": 93, "setdefaultreplacementyear": 93, "setoutputdateformat": 93, "drugnorm": [94, 216], "apac": 94, "discuss": 94, "blog": 94, "post": [94, 123, 171], "abbrevi": 94, "sol": 94, "solut": 94, "unit": [94, 108, 109, 127, 152, 186], "10000000": 94, "unt": 94, "sodium": 94, "chlorid": 94, "potassium": 94, "13bag": 94, "interferon": 94, "alfa": 94, "2b": 94, "injec": 94, "meq": 94, "document_norm": 94, "trainingpipelin": 94, "normalized_text": [94, 116, 149, 183], "bag": 94, "inject": 94, "setpolici": 94, "structuredjsonconvert": 99, "struct": 99, "outputasstr": 99, "schema": [99, 123, 209, 213, 216, 228], "converterschema": 99, "outlin": [99, 238], "pipelinepars": 99, "pipeline_trac": [99, 172], "pipelinetrac": [99, 209], "bm": 99, "aspir": 99, "blast": 99, "anc": 99, "cd9": 99, "cd10": 99, "flow": [99, 127], "cytometri": 99, "bio_pip": 99, "explain_clinical_doc_biomark": 99, "createparserdictionari": [99, 209], "setconverterschema": 99, "base_df": 99, "json_df": 99, "document_identifi": [99, 208], "ccf25343": 99, "e01c": 99, "42f6": 99, "932d": 99, "297e731fc3bf": 99, "document_text": [99, 208], "ner_sourc": [99, 208, 230], "ner_oncology_chunk": 99, "91": [99, 213, 230], "biomarker_result": 99, "chunk_id": [99, 208], "bc15add6": 99, "ner_confid": [99, 208], "9672": 99, "97": [99, 213], "biomark": [99, 108], "b473fd80": 99, "992": 99, "105": 99, "108": 99, "0252d08a": 99, "9987": 99, "is_finding_of": 99, "99814475": 99, "chunk2": [99, 108, 109, 152, 186, 208, 213], "chunk2_id": [99, 208], "chunk1": [99, 108, 109, 152, 186, 208, 213], "chunk1_id": [99, 208], "9996313": 99, "sentence_id": [99, 208], "uuid": [99, 208], "parentsourc": 99, "returnrelationent": 99, "sentencecolumn": 99, "resolutionschema": 99, "medicalsummar": [99, 121, 123, 162, 197, 216], "setconverterschemaasstr": 99, "setoutputasstr": 99, "column_nam": 99, "nullabl": [99, 213], "containsnul": 99, "valuecontainsnul": 99, "setparentsourc": 99, "parent": 99, "json_output": 99, "assertion_confid": [99, 208], "setreturnrelationent": 99, "setsentencecolumn": 99, "beamsearchparam": [100, 102, 122], "dosampl": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "ignoretokenid": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "maxcontextlength": [100, 102, 122, 123, 161, 163, 196, 198], "maxnewtoken": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "norepeatngrams": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "setdosampl": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "greedi": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "setignoretokenid": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "setmaxcontextlength": [100, 102, 122, 123, 161, 163, 196, 198], "setmaxnewtoken": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "setnorepeatngrams": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "vocabulari": [100, 102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "medicalquestionansw": [102, 161, 196, 216], "gpt": [102, 122, 123, 161, 163, 196, 198], "answer": [102, 103, 122, 123, 126, 161, 163, 196, 198], "span": [102, 161, 196], "ye": [102, 161, 196], "questiontyp": [102, 161, 196], "card": [102, 161, 196, 211], "loop": [102, 122, 123, 161, 163, 196, 198], "customprompt": [102, 122, 123, 161, 163, 196, 198], "usecach": [102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "spare": [102, 161, 196], "studi": [102, 161, 196], "failur": [102, 161, 196], "node": [102, 127, 161, 196, 208], "breast": [102, 161, 196, 208], "chest": [102, 161, 196], "wall": [102, 161, 196], "irradi": [102, 161, 196], "mastectomi": [102, 161, 196, 208], "multidocumentassembl": [102, 161, 196, 216], "document_quest": [102, 161, 196], "document_context": [102, 161, 196], "med_qa": [102, 161, 196], "medical_qa_biogpt": [102, 161, 196], "setquestiontyp": [102, 161, 196], "mlframeworktyp": [102, 120, 121, 122, 123, 160, 161, 162, 163, 195, 196, 197, 198], "modeltyp": [102, 122, 123, 161, 163, 196, 198, 216], "getquestiontyp": [102, 161, 196], "loadmedicaltextgener": [102, 161, 196], "med_text_generator_path": [102, 161, 196], "medicaltextgener": [102, 122, 123, 161, 163, 196, 198, 216], "flan_t5_base_jsl_qa": 102, "setcustomprompt": [102, 122, 123, 161, 163, 196, 198], "setquestionanswertermin": [102, 161, 196], "questiontermin": [102, 161, 196], "symbol": [102, 161, 196, 238], "setquestionprompt": [102, 161, 196], "questionprompt": [102, 161, 196], "setquestionskiplasttoken": [102, 161, 196], "questionskiplasttoken": [102, 161, 196], "setusecach": [102, 122, 123, 161, 163, 196, 198], "nerquestiongener": [103, 165, 199, 216], "pronoun": [103, 165, 199], "questionpronoun": [103, 165, 199], "questionmark": [103, 165, 199], "questionanswer": 103, "why": [103, 165, 199], "strategytyp": [103, 165, 199], "entities1": [103, 165, 199], "entities2": [103, 165, 199], "qagener": 103, "setquestionmark": [103, 165, 199], "setquestionpronoun": [103, 165, 199], "setstrategytyp": [103, 165, 199], "setentities1": [103, 165, 199], "setentities2": [103, 165, 199], "admiss": 103, "zeroshotn": 103, "align": [103, 165, 199], "contextsplitassembl": 104, "assembl": [104, 226], "vector_similarity_rank": [104, 106, 235], "explodesplit": [104, 126], "setexplodesplit": [104, 126], "setjoinstr": 104, "vectordbpostprocessor": 106, "vectordbmodel": 106, "filterbi": 106, "diversity_by_threshold": 106, "metadatacriteria": 106, "diversitythreshold": 106, "sortbi": 106, "ascend": 106, "lost_in_the_middl": 106, "ranker": 106, "sai": 106, "diversitybythreshold": 106, "maxtopkafterfilt": 106, "allowzerocontentafterfilt": 106, "setallowzerocontentafterfilt": 106, "setdiversitythreshold": 106, "setfilterbi": 106, "setmaxtopkafterfilt": 106, "setmetadatacriteria": 106, "fieldtyp": [106, 209], "not_equ": 106, "greater_than": 106, "greater_than_or_equ": 106, "less_than": 106, "less_than_or_equ": 106, "not_contain": 106, "matchmod": 106, "matchvalu": 106, "converterfallback": 106, "not_filt": 106, "publish_d": 106, "mmm": 106, "5470": 106, "immun": 106, "setmetadatacriteriaasstr": 106, "setsortbi": 106, "genericremodel": [108, 216], "intend": 108, "setrelationpair": [108, 109, 110, 111, 152, 153, 186, 187], "customlabel": [108, 109, 152, 173, 186, 216], "directionsensit": [108, 110], "filterbytokendist": [108, 110], "relationpair": [108, 109, 110, 152, 186], "relationpairscasesensit": [108, 109, 110, 152, 186], "getrelationtypeperpair": [108, 109, 152, 186], "posology_r": 108, "setcustomlabel": [108, 109, 152, 186], "setdirectionsensit": [108, 110], "setfilterbytokendist": [108, 110], "fewer": [108, 110], "far": [108, 110], "recal": [108, 214, 237, 242], "dash": [108, 110], "setrelationpairscasesensit": [108, 109, 110, 152, 186], "setrelationtypeperpair": [108, 109, 152, 186], "relationtypepair": [108, 109, 152, 186], "posologyremodel": [108, 216], "posologi": 108, "entitit": 108, "reason": [108, 126, 171], "relationextractionapproach": [108, 127, 213, 216], "tfgraphbuild": [108, 127], "tf_graph": [108, 127, 213], "tensorflow_graph": 108, "relationdirectioncol": 108, "decript": 108, "fromentitybegincol": 108, "fromentityendcol": 108, "fromentitylabelcol": 108, "toentitybegincol": 108, "toentityendcol": 108, "toentitylabelcol": 108, "leftward": 108, "argument": [108, 171], "rightward": 108, "doesn": 108, "symmetr": [108, 216], "embedd": [108, 109, 152, 186], "postag": [108, 109, 152, 186], "ner_events_clin": [108, 109, 152, 186], "depencypars": [108, 109, 152, 186], "train_ner_chunk": [108, 127, 213], "relations_t": 108, "target_rel": 108, "300": [108, 127], "05": [108, 171], "setfroment": 108, "from_begin": 108, "from_end": 108, "from_label": 108, "settoent": 108, "to_begin": 108, "to_end": 108, "to_label": 108, "traindata": [108, 109, 152, 186], "overrideexistinglabel": 108, "begin_col": 108, "label_col": [108, 139], "setrelationdirectioncol": 108, "set\u043everrideexistinglabel": 108, "annotatormodel": [108, 110, 113, 133, 216], "relativedai": 108, "relationtypeperpair": 108, "symtom": 108, "external_body_part_or_region": [108, 109, 110, 152, 186], "internal_organ_or_compon": [108, 109, 110, 152, 186], "re_bodypart_direct": 108, "mri": [108, 109, 110, 111, 152, 153, 186, 187], "infarct": [108, 109, 110, 152, 186], "brain": [108, 109, 110, 152, 186], "cerebellum": [108, 109, 110, 152, 186], "basil": [108, 109, 110, 152, 186], "ganglia": [108, 109, 110, 152, 186], "relationextractiondlmodel": [109, 110, 152, 186, 216], "contrast": [109, 152, 186], "re_ner_chunk_filt": [109, 110, 111, 152, 153, 186, 187], "renerchunksfilt": [109, 110, 111, 152, 153, 186, 187, 216], "re_ner_chunk": [109, 110, 111, 152, 153, 186, 187], "redl_bodypart_direction_biobert": [109, 152, 186], "redl_ade_biobert": 109, "realtionpair": 110, "advers": 110, "reaction": 110, "realat": 110, "further": 110, "ner_clinical_en": 110, "html": 110, "awai": 110, "doclevelrel": 110, "clinical_ner_tagg": 110, "jsl_ner_wip_greedy_clin": 110, "trained_pipelin": 110, "cre": 110, "paired_to": 110, "setdoclevelrel": [110, 111, 153, 187], "zeroshotrelationextractionmodel": [111, 153, 187, 216], "nli": [111, 153, 187], "statement": [111, 153, 187], "regard": [111, 153, 187], "relationalcategori": [111, 153, 173, 187, 216], "hypothesi": [111, 153, 187], "cure": [111, 153, 187], "5f": [111, 153, 187], "multilabel": [111, 153, 187], "categor": [111, 153, 187, 228, 240], "tmp": [111, 153, 187], "spark_sbert_zero_shot": [111, 153, 187], "setrelationalcategori": [111, 153, 187], "reveal": [111, 153, 187], "setmultilabel": [111, 153, 187], "allevi": [111, 153, 187], "headach": [111, 153, 187], "9760039": [111, 153, 187], "98819494": [111, 153, 187], "9929625": [111, 153, 187], "negativerelationship": [111, 153, 187], "zero_shot_r": 111, "setnegativerelationship": [111, 153, 187], "serv": [111, 153, 187], "regexmatcherintern": 113, "choic": 113, "match_first": 113, "match_al": [113, 118], "match_complet": 113, "externalrul": 113, "short_dat": 113, "regexmatcherinternalmodel": 113, "email_match": 113, "resolvermerg": [115, 216], "enit": 115, "sentenceentityresolverapproach": [116, 149, 183, 216], "sentenceresolverparam": [116, 216], "sentenceentityresolvermodel": [116, 117, 149, 183, 216], "standart": 116, "aux_label": 116, "auxiliari": [116, 149, 183], "overrideexistingcod": [116, 149, 183], "unwant": 116, "dropcodeslist": [116, 149, 183], "flavour": 116, "normalizedcol": [116, 149, 183], "returncosinedist": [116, 149, 183], "aux_label_col": [116, 149, 183], "useauxlabel": [116, 149, 183], "conceptid": 116, "concept": 116, "snome": [116, 149, 183], "concept_nam": 116, "108367008": 116, "disloc": 116, "joint": 116, "3384011000036100": 116, "arthrotec": 116, "166717003": 116, "serum": 116, "creatinin": 116, "3877011000036101": 116, "lipitor": 116, "402234004": 116, "foot": 116, "eczema": 116, "sent_biobert_pubmed_base_cas": [116, 149, 183], "data_pipelin": 116, "data_processing_model": 116, "prepared_data": 116, "bertextractor": [116, 149, 183], "setneighbour": [116, 149, 183], "1000": [116, 149, 183], "bert_embed": [116, 149, 183], "setnormalizedcol": [116, 149, 183], "snomed_cod": [116, 149, 183], "setdistancefunct": [116, 149, 183], "euclidian": [116, 149, 183], "setuseauxlabel": [116, 149, 183], "setauxlabelcol": [116, 149, 183], "snomedmodel": [116, 149, 183], "confidencefunct": [116, 149, 183], "distancefunct": [116, 149, 183], "missasempti": [116, 149, 183], "neighbour": [116, 149, 183], "returnresolvedtextembed": [116, 149, 183], "setconfidencefunct": [116, 149, 183], "conf_funct": [116, 149, 183], "invers": [116, 149, 183], "softmax": [116, 127, 149, 183], "mover": [116, 149, 183], "wmd": [116, 149, 183], "euclidean": [116, 149, 183], "setdropcodeslist": [116, 149, 183], "leav": [116, 149, 183], "setextractcosinedist": [116, 149, 183], "setmissasempti": [116, 149, 183], "unmatch": [116, 149, 183], "knn": [116, 149, 183], "algorithmn": [116, 149, 183], "queri": [116, 149, 183], "setoverrideexistingcod": [116, 149, 183], "setreturnresolvedtextembed": [116, 149, 183], "thre": [116, 149, 183], "auxlabel": [116, 149, 183], "hasembeddingsproperti": [116, 216], "ontologi": [116, 149, 183], "curat": [116, 149, 183], "rxnorm": [116, 149, 183], "searchtre": [116, 149, 183], "structfeature_hadoopfix": [116, 216], "encapsul": [116, 149, 183], "serializablekdtre": [116, 149, 183], "tree": [116, 149, 183], "nearest": 116, "multidimension": 116, "approch": 116, "loui": 116, "bentlei": 116, "1975": 116, "commun": [116, 171], "acm": 116, "sept": 116, "509": 116, "517": 116, "doi": 116, "1145": 116, "361002": 116, "361007": 116, "sbertresolve_icd10cm_slim_billable_hcc_m": 116, "icd10_cod": [116, 208, 240], "icd10extractorpipelin": 116, "icd10model": 116, "sbiobertresolve_icd10cm_augmented_billable_hcc": 116, "setsearchtre": [116, 149, 183], "search_tre": [116, 149, 183], "usuali": [116, 149, 183], "kdtree": [116, 149, 183], "algorithmm": 116, "resolution2chunk": [117, 216], "sbert_embedd": 117, "rxnorm_resolv": 117, "sbiobertresolve_rxnorm_aug": 117, "rxnorm_cod": 117, "readi": [117, 156, 191, 221, 230], "love": [117, 156, 191], "wake": [117, 156, 191], "am": [117, 126, 156, 191, 230], "resolver2chunk": 117, "219400": 117, "13369": 117, "filterfieldsel": 118, "rules2": 118, "doc_chunk": 118, "sent_small_bert_l2_128": 118, "router_name_embed": 118, "setfilterfieldsel": 118, "names_embed": 118, "router_city_embed": 118, "cities_embed": 118, "router_nam": 118, "names_chunk": 118, "medicalencoderdecod": [120, 121, 160, 195, 216], "maxtextlength": [120, 121, 122, 123, 160, 162, 163, 195, 197, 198], "refinechunks": [120, 121, 160, 162, 195, 197], "refinemaxattempt": [120, 121, 160, 162, 195, 197], "refinesummari": [120, 121, 160, 162, 195, 197], "refinesummarytargetlength": [120, 121, 160, 162, 195, 197], "stopateo": [120, 121, 122, 123, 160, 162, 163, 195, 197, 198], "setmaxtextlength": [120, 121, 122, 123, 160, 162, 163, 195, 197, 198], "setrefinechunks": [120, 121, 160, 162, 195, 197], "Be": [120, 121, 160, 162, 195, 197], "setrefinemaxattempt": [120, 121, 160, 162, 195, 197], "abov": [120, 121, 160, 162, 195, 197, 242], "summarytargetlength": [120, 121, 160, 162, 195, 197], "setrefinesummari": [120, 121, 160, 162, 195, 197], "cost": [120, 121, 160, 162, 195, 197], "setrefinesummarytargetlength": [120, 121, 160, 162, 195, 197], "setstopateo": [120, 121, 122, 123, 160, 162, 163, 195, 197, 198], "use_cach": [121, 162, 197], "facilit": [121, 162, 197], "summarizer_clinical_jsl_aug": 121, "document_prompt": [122, 123, 163, 198], "med_text_gener": [122, 123, 163, 198], "convid": [122, 123, 163, 198], "worldwid": [122, 123, 163, 198], "getadditionaltoken": [122, 123, 163, 198], "model_typ": [122, 123, 163, 198], "text_generator_biomedical_biogpt_bas": 122, "setadditionaltoken": [122, 123, 163, 198], "additionaltoken": [122, 123, 163, 198], "tablelimit": 123, "getpostprocessingsubstitut": 123, "getschema": 123, "text2sql_mimicsql": 123, "setpostprocessingsubstitut": 123, "setschema": 123, "tabl": [123, 228], "settablelimit": 123, "internaldocumentsplitt": 126, "documentcharactertextsplitt": [126, 216], "setsplitmod": 126, "splitmod": 126, "recurs": [126, 216], "subtext": 126, "perfect": 126, "observ": 126, "world": 126, "setsplitpattern": 126, "setpatternsareregex": 126, "setkeepsepar": 126, "settrimwhitespac": 126, "chunksiz": 126, "chunkoverlap": 126, "splitpattern": 126, "trfv": 126, "patternsareregex": 126, "keepsepar": 126, "trimwhitespac": 126, "segment": [126, 171], "sentenceawar": 126, "maxlength": 126, "spit": 126, "customboundsstrategi": 126, "enablesentenceincr": 126, "textdf": 126, "sherlockholm": 126, "wholetext": 126, "textsplitt": 126, "setchunks": 126, "20000": 126, "setchunkoverlap": 126, "gutenberg": 126, "adventur": 126, "sherlock": 126, "holm": 126, "arthur": 126, "conan": 126, "doyl": 126, "19994": 126, "mademoisel": 126, "brioni": 126, "lodg": 126, "serpentin": 126, "aven": 126, "19798": 126, "39395": 126, "19597": 126, "woman": 126, "think": 126, "39371": 126, "59242": 126, "19871": 126, "But": 126, "said": 126, "red": [126, 238], "men": 126, "59166": 126, "77833": 126, "18667": 126, "friend": 126, "enthusiast": 126, "musician": 126, "himself": 126, "capab": 126, "77835": 126, "97769": 126, "19934": 126, "convinc": 126, "li": 126, "97771": 126, "117248": 126, "19477": 126, "slate": 126, "colour": 126, "broad": 126, "brim": 126, "straw": 126, "hat": 126, "feather": 126, "117250": 126, "137242": 126, "19992": 126, "That": 126, "sound": 126, "littl": 126, "paradox": 126, "profoundli": 126, "singulari": 126, "137244": 126, "157171": 126, "19927": 126, "document_splitt": 126, "setcustomboundsstrategi": 126, "setenablesentenceincr": 126, "setmaxlength": 126, "setsentenceawar": 126, "estim": 127, "defaultparamswrit": [127, 137], "defaultparamsread": [127, 137], "sinc": 127, "seri": [127, 130], "edg": 127, "biggest": 127, "idea": 127, "backbon": 127, "program": 127, "graph_fold": 127, "re_graph_fold": 127, "setmodelnam": 127, "re_graph": 127, "sethiddenlay": 127, "sethiddenact": 127, "relu": 127, "sethiddenactl2": 127, "sethiddenweightsl2": 127, "setbatchnorm": 127, "batchnorm": 127, "hiddenact": 127, "hiddenactl2": 127, "hiddenlay": 127, "hiddenunitsnumb": 127, "hiddenweightsl2": 127, "islicens": 127, "maxsequencelength": 127, "modelnam": 127, "outputact": 127, "userelationdirect": 127, "shallow": [127, 134, 137], "suffici": [127, 134, 137], "getbatchnorm": 127, "getgraphfil": 127, "getgraphfold": 127, "gethiddenact": 127, "gethiddenactl2": 127, "l2": 127, "gethiddenlay": 127, "hiudden": 127, "gethiddenunitsnumb": 127, "gethiddenweightsl2": 127, "getislicens": 127, "medicalneraprroach": 127, "getmaxsequencelength": 127, "getmodelnam": 127, "getoutputact": 127, "getuserelationdirect": 127, "techniqu": 127, "stabil": 127, "greaph": 127, "auto": 127, "sigmoid": 127, "tanh": 127, "aka": 127, "overfit": 127, "involv": 127, "encourag": 127, "neuron": 127, "sethiddenunitsnumb": 127, "solv": 127, "setislicens": 127, "setmaxsequencelength": 127, "lose": 127, "valuabl": 127, "On": 127, "consum": 127, "excess": 127, "setuserelationdirect": 127, "settoutputact": 127, "tfgraphbuildermodel": 127, "windowedparam": 130, "gluestr": 130, "windows": 130, "setgluestr": 130, "setwindows": 130, "slide": 130, "windowedsentencemodel": [130, 216], "windowedsent": 130, "five": [130, 171], "tract": 130, "annotator_properties_intern": [132, 133, 135, 172], "annotatorpropertiesintern": [132, 133, 134], "attach": 134, "annotator_approach_intern": [135, 172], "annotator_model_intern": [135, 172], "verifi": 136, "findvers": 136, "privat": [136, 210], "showvers": 136, "customtransform": 137, "helper": [137, 211, 224], "custom_pipelin": 138, "masking_polici": 138, "fixed_mask_length": 138, "obfuscate_d": [138, 228], "obfuscate_ref_sourc": 138, "obfuscate_ref_file_path": 138, "age_group_obfusc": 138, "age_rang": 138, "shift_dai": [138, 230], "number_of_dai": 138, "documenthashcoder_col_nam": 138, "date_tag": 138, "unnormalized_d": 138, "unnormalized_mod": 138, "id_column_nam": 138, "date_shift_column_nam": 138, "multi_mode_file_path": 138, "input_file_path": [138, 230], "output_file_path": [138, 230], "deid_with_custom_pipelin": 138, "pretrained_pipelin": 138, "deid_with_pretrained_pipelin": 138, "nercrfevalu": [139, 216], "test_fil": 139, "tag_level": 139, "extendedjavawrapp": [139, 213], "java_obj": [139, 213], "sc": [139, 213], "computeaccuracyannot": 139, "train_fil": 139, "computeaccuracymodel": 139, "getdatafram": [139, 213], "jdf": [139, 213], "new_java_arrai": [139, 213], "pylist": [139, 213], "java_class": [139, 213], "todo": [139, 213], "inspir": [139, 213], "new_java_array_integ": [139, 213], "new_java_array_str": [139, 213], "new_java_obj": [139, 213], "arg": [139, 208, 213], "spark_vers": [139, 213], "nerdlevalu": [139, 216], "full_chunk": 139, "computemetricsfromdf": 139, "prediction_col": 139, "drop_o": 139, "case_sensit": [139, 213, 230], "norvigspellevalu": [139, 216], "ground_truth_fil": 139, "posevalu": [139, 216], "symspellevalu": [139, 216], "olumn": [140, 174], "eval": [140, 172, 174, 216], "finassertiondl_time_md": 140, "doesnt": [142, 176], "tha": [142, 176], "obfuscatorreffil": [142, 176], "ouptut": [142, 176], "cfn": 142, "finner_deid": 142, "financedocumenthashcod": [143, 216], "setidcolumn": [143, 177], "document_hashcod": [144, 145, 178, 179], "finmapper_edgar_companynam": 146, "snomedtrainingpipelin": [149, 183], "snomedtrainingmodel": [149, 183], "snomeddata": [149, 183], "finel_edgar_company_nam": 149, "finre_financial_smal": 152, "finre_zero_shot": 153, "chunk_classif": [154, 172, 188, 216], "sequence_classif": [154, 172, 188, 216], "finance_bert_for_sequence_classif": [154, 159], "finance_classifier_dl": [154, 159], "finance_document_ml_classifi": [154, 159], "finance_few_shot_classifi": [154, 159], "sequence_gener": [154, 172, 188, 216], "finance_encoder_decod": [154, 164], "finance_qa": [154, 164], "finance_summar": [154, 164], "finance_text_gener": [154, 164], "token_classif": [154, 172, 188, 216], "financebertforsequenceclassif": [155, 216], "financebertfortokenclassif": [155, 167, 216], "finclf_bert_banking77": 155, "financeclassifierdlapproach": [156, 216], "classifierdlapproach": [156, 191, 216], "classifierdl": [156, 191], "univers": [156, 191], "dnn": [156, 191], "classifierdlmodel": [156, 191, 216], "item": [156, 191, 226], "universalsentenceencod": [156, 191, 216], "movi": [156, 191], "wach": [156, 191], "ever": [156, 191], "opinion": [156, 191], "win": [156, 191], "award": [156, 191], "terribl": [156, 191], "realli": [156, 191], "trane": [156, 191], "smallcorpu": [156, 191], "useembed": [156, 191], "docclassifi": [156, 191], "5e": [156, 191], "multiclassifierdlapproach": [156, 191, 216], "sentimentdlapproach": [156, 191, 216], "financeclassifierdlmodel": [156, 157, 216], "financeclassifierdl": 156, "classifierdl_use_trec6": [156, 191], "trec": [156, 191], "sarcasmdl": [156, 191], "classifierdl_use_sarcasm": [156, 191], "sarcasm": [156, 191], "arrays_zip": [156, 191], "multiclassifierdlmodel": [156, 191, 216], "sentimentdlmodel": [156, 191, 216], "finclf_sec_fil": 156, "financedocumentmlclassifierapproach": [157, 216], "financedocumentmlclassifiermodel": [157, 192, 216], "financefewshotclassifierapproach": [158, 216], "financefewshotclassifi": 158, "financefewshotclassifiermodel": [158, 216], "financeencoderdecod": [160, 216], "financequestionansw": [161, 216], "biogpt_pubmed_qa": [161, 196], "financesummar": [162, 216], "finsum_flant5_finetuned_sec10k": 162, "financetextgener": [163, 216], "fingen_flant5_finetuned_sec10k": 163, "financenerquestiongener": [165, 216], "finance_bert_for_token_classifi": [166, 169], "finance_n": [166, 169], "financebertfortokenclassifi": 167, "finner_responsibility_report": 167, "financenerapproach": [168, 216], "verif": [168, 203], "greather": [168, 203], "financenermodel": [168, 203, 216], "teh": [168, 203], "finner_sec_10k_summari": 168, "finner_roberta_zeroshot": 170, "profil": 171, "code_arrai": 171, "sex": 171, "elig": 171, "cna": 171, "orec": 171, "medicaid": 171, "cm": 171, "hcc": [171, 240], "illeg": 171, "icd10": 171, "cfa": 171, "benefit": 171, "dual": 171, "cfd": 171, "nondual": 171, "cnd": 171, "cpa": 171, "cpd": 171, "INS": 171, "institut": 171, "enrolle": 171, "snpne": 171, "snp": 171, "plan": [171, 211], "entitl": 171, "survivor": 171, "renal": 171, "dib": 171, "esrd": 171, "risk_scor": 171, "risk_score_ag": 171, "risk_score_adj": 171, "intens": 171, "risk_score_age_adj": 171, "hcc_lst": 171, "hcc_map": 171, "hierarchi": 171, "profileesrdv21y19": 171, "di": 171, "2019": 171, "dialysi": 171, "gc": 171, "graft": 171, "gi": 171, "dne": 171, "gne": 171, "profilerxhccv05y20": 171, "ce_nolowag": 171, "rxhcc": [171, 240], "incom": 171, "ce_nolownoag": 171, "ce_lowag": 171, "ce_lownoag": 171, "ce_lti": 171, "ne_nolo": 171, "ne_lo": 171, "ne_lti": 171, "beneficiari": 171, "medicar": 171, "payment": 171, "status": 171, "transplant": 171, "situat": 171, "rxhcc_lst": 171, "rxhcc_map": 171, "profilerxhccv05y21": 171, "profilerxhccv05y22": 171, "profilerxhccv05y23": 171, "profilerxhccv08y22": 171, "profilerxhccv08y23": 171, "profilev22": 171, "profilev22y17": 171, "2017": 171, "profilev22y18": 171, "profilev22y19": 171, "profilev22y20": 171, "profilev22y21": 171, "profilev22y22": 171, "profilev23": 171, "profilev23y18": 171, "profilev23y19": 171, "profilev24": 171, "profilev24y19": 171, "profilev24y20": 171, "profilev24y21": 171, "profilev24y22": 171, "profilev28": 171, "profilev28y24": 171, "2024": 171, "llm_loader": [172, 205], "transpil": 172, "externalsourc": [172, 219], "class_nam": [172, 219], "nlu_2_python": [172, 219], "python_2_scala": [172, 219], "source_load": [172, 219], "alab_util": [172, 233], "conll_pars": [172, 233], "database_deidentif": [172, 233], "date_shift_fil": [172, 233], "deidentification_util": [172, 233], "exception_handling_util": [172, 233], "java_help": [172, 233], "licensed_annotator_typ": [172, 233], "log_pars": [172, 233], "ner_util": [172, 233], "ocr_nlp_processor": [172, 233], "ocr_util": [172, 233], "risk_adjustment_util": [172, 233], "run_transpiled_cod": [172, 233], "training_log_parser_util": [172, 233], "visualner_annotations_pars": [172, 233], "custom_transform": 172, "deidentification_modul": 172, "modeltrac": [172, 216], "pipeline_output_pars": 172, "structured_deidentif": 172, "text_to_documents_column": 172, "training_log_pars": 172, "updatemodel": [172, 216], "load_license_valid": 172, "size_regex": 172, "transformer_seq_classif": 172, "version_regex": 172, "legassertion_time_md": 174, "legner_deid": 176, "legaldocumenthashcod": [177, 216], "legmapper_edgar_companynam": 180, "legel_edgar_company_nam": 183, "legre_contract_doc_parti": 186, "legre_zero_shot": 187, "legal_bert_for_sequence_classif": [188, 189], "legal_classifier_dl": [188, 189], "legal_document_ml_classifi": [188, 189], "legal_few_shot_classifi": [188, 189], "legal_encoder_decod": [188, 194], "legal_qa": [188, 194], "legal_summar": [188, 194], "legal_text_gener": [188, 194], "legalbertforsequenceclassif": [190, 216], "legalbertfortokenclassif": [190, 202, 216], "legclf_reddit_advic": 190, "legalclassifierdlapproach": [191, 216], "legalclassifierdlmodel": [191, 192, 216], "legalclassifierdl": 191, "legclf_argument_min": 191, "legaldocumentmlclassifierapproach": [192, 216], "legaldocumentmlclassifiermodel": [192, 216], "legalfewshotclassifierapproach": [193, 216], "legalfewshotclassifi": 193, "legalfewshotclassifiermodel": [193, 216], "legalencoderdecod": [195, 216], "legalquestionansw": [196, 216], "legalsummar": [197, 216], "legsum_flant5_legal_aug": 197, "legaltextgener": [198, 216], "leggen_flant5_finetun": 198, "legalnerquestiongener": [199, 216], "legal_bert_for_token_classifi": [200, 201], "legal_n": [200, 201], "classit": 202, "legalbertfortokenclassifi": 202, "legner_bert_gr": 202, "legalnerapproach": [203, 216], "legalnermodel": [203, 216], "legner_contract_doc_parties_lg": 203, "legner_roberta_zeroshot": 204, "llmloader": 206, "javamodel": 206, "inherit": 206, "ins": 206, "encodemodel": 206, "model_path": 206, "output_model_path": 206, "getmetadataentri": 206, "n_gpu_lay": 206, "loadgguf": 206, "system_prompt": 206, "alic": 206, "ggerganov": 206, "llama": 206, "cpp": 206, "3727": 206, "pull": 206, "request": 206, "ctx_size": 206, "lt": 206, "adduidcol": 207, "timestamp": 207, "pipelineoutputpars": [208, 209], "columns_map": 208, "immunohistochemistri": 208, "thyroid": 208, "transcript": [208, 225], "napsin": 208, "pr": 208, "her2": 208, "previous": 208, "undergon": 208, "axillari": 208, "lymph": 208, "dissect": 208, "twenti": 208, "ago": 208, "postop": 208, "radiotherapi": 208, "administ": 208, "residu": 208, "recur": 208, "metastasi": 208, "underw": 208, "regimen": 208, "adriamycin": 208, "m2": 208, "cyclophosphamid": 208, "600": 208, "cours": 208, "therapi": 208, "oncology_pipelin": 208, "oncology_biomarker_pipelin": 208, "column_map": [208, 213], "xyz_123": 208, "assertion_chunk": 208, "pipeline_pars": 208, "parsed_result": 208, "check_column_mapping_dict": 208, "ner_chunk_column_nam": 208, "resolver_column_nam": 208, "assertion_column_nam": 208, "keyerror": 208, "check_unique_id": 208, "ner_chunk_begin": 208, "ner_chunk_end": 208, "get_assert": 208, "get_classif": 208, "get_deidentif": 208, "get_docu": 208, "get_ent": 208, "entity_result": 208, "get_rel": 208, "return_relation_ent": 208, "envolv": 208, "entity1_begin": 208, "entity1_end": 208, "entity2_begin": 208, "entity2_end": 208, "get_resolut": 208, "terminologi": 208, "vocab": 208, "vocablari": 208, "teminologi": 208, "term_cod": 208, "all_k_cod": 208, "all_k_resolut": 208, "all_k_aux_label": 208, "aux": 208, "all_k_dist": 208, "get_summari": 208, "get_unique_id": 208, "base64": 208, "uuid3": 208, "document_id": 208, "update_columns_map": 208, "pipelinestag": 209, "trace": 209, "insight": 209, "getparserdictdirectli": 209, "listavailablemodel": 209, "getpipelinestag": 209, "getpossibleassert": 209, "getpossibleent": 209, "getpossiblerel": 209, "printpipelineschema": 209, "showavailablemodel": 209, "stagefield": 209, "internalresourcedownload": [210, 216], "downlod": 210, "downloadmodel": 210, "reader": [210, 213], "j_dwn": 210, "internalspythonresourcedownload": [210, 216], "downloadmodeldirectli": 210, "unzip": 210, "cache_folder_path": 210, "uri": 210, "returnprivatemodel": 210, "returnprivatepipelin": 210, "showavailableannot": 210, "showprivatemodel": 210, "showprivatepipelin": 210, "showuncategorizedresourc": 210, "uncategor": 210, "printprogress": 210, "progress": 210, "bar": 210, "consol": [210, 228], "tabular": 211, "structureddeidentif": [211, 216], "columnsse": 211, "userandomdatedisplac": 211, "idcolumn": [211, 230], "internet": 211, "profess": 211, "opf": 211, "screen": 211, "protein": 211, "someth": 211, "someon": 211, "healthplan": 211, "devic": 211, "social": 211, "protocol": 211, "nation": 211, "credit": 211, "bank": 211, "administr": 211, "obfuscatecolumn": 211, "outputasarrai": 211, "_obfusc": 211, "overwritten": 211, "texttodocumentscolumn": 212, "todocumentscolumn": 212, "todocumentscolumnswithid": 212, "id_column": [212, 230], "annotationtooljsonread": [213, 216], "pipeline_model": 213, "cleanup_mod": 213, "split_char": 213, "context_char": 213, "min_chars_tol": 213, "align_chars_tol": 213, "merge_overlap": 213, "sddlpath": 213, "generateassertiontrainset": 213, "generateconl": 213, "aspres": 213, "rdr": 213, "completion_id": 213, "completion_d": 213, "completion_us": 213, "tool_chunk": 213, "229937784": 213, "fih": 213, "18001": 213, "04t13": 213, "aleksei": 213, "136": 213, "142": 213, "79": 213, "305038693": 213, "65001": 213, "03t08": 213, "844970557": 213, "rwh": 213, "21001": 213, "914783811": 213, "97001": 213, "02t12": 213, "07": 213, "733882247": 213, "84001": 213, "02t15": 213, "73": 213, "77": 213, "assertion_df": 213, "sentencecol": 213, "assertioncol": 213, "taskcolumn": 213, "tokencol": 213, "nerlabel": 213, "generateplainassertiontrainset": 213, "cantemistread": 213, "cantemist": 213, "readdatasettaskn": 213, "textfold": 213, "codiespread": 213, "codiesp": 213, "readdatasettaskx": 213, "redatasethelp": 213, "spark_df": 213, "i2b2_clinical_rel_dataset": 213, "begin1": 213, "firstcharent1": 213, "end1": 213, "lastcharent1": 213, "begin2": 213, "firstcharent2": 213, "end2": 213, "lastcharent2": 213, "label1": 213, "label2": 213, "create_annotation_column": 213, "txt_file": 213, "sent_id": 213, "beth": 213, "partner": 213, "i2b2": 213, "2010": 213, "va": 213, "tem": 213, "44": 213, "satur": 213, "75": 213, "lotion": 213, "crea": 213, "146": 213, "trnap": 213, "incis": 213, "conc": 213, "43": [213, 239], "ter": 213, "picc": 213, "68": 213, "58": 213, "headed": 213, "diaphoresi": 213, "92": 213, "82": 213, "electroca": 213, "61": 213, "inferior": 213, "st": 213, "depressio": 213, "239": 213, "196": 213, "176": 213, "145": 213, "train_data": 213, "annotation_schema": 213, "ner_column_nam": 213, "printschema": 213, "root": 213, "synonymaugmentationuml": [213, 216], "umls_path": 213, "code_col": 213, "description_col": 213, "synonym": 213, "uml": 213, "augmentcsv": 213, "corpus_csv_path": 213, "ner_pipelin": [213, 238], "do_product": 213, "augmentation_mod": 213, "plain_text": 213, "synonym_sourc": 213, "regex_pars": 213, "euclidean_distance_threshold": 213, "cosine_distance_threshold": 213, "synonym_limit": 213, "casing_funct": 213, "augmentdatafram": 213, "corpus_df": 213, "tf_graph_1x": 213, "assertion_log_pars": 214, "get_best_f1_scor": 214, "log_path": [214, 237], "micro": 214, "macro": 214, "get_chart": [214, 237], "log_fil": [214, 237], "plot": [214, 237], "figur": [214, 237], "loss_plot": [214, 237], "parse_logfil": 214, "avg": 214, "ner_log_pars": 214, "true_seq": [214, 237, 242], "pred_seq": [214, 237, 242], "overal": [214, 237, 242], "simpli": [214, 237, 242], "evaluate_conll_fil": [214, 237], "fileiter": [214, 237], "script": [215, 221, 222, 223], "prepar": [215, 221], "build_python_cod": 215, "py_cod": [215, 217, 221], "subprocess": 215, "build_scala_cod": [215, 241], "scala_cod": [215, 221, 241], "runtranspiledcod": [215, 241], "class": [215, 221, 244], "compile_scala_cod": [215, 241], "prepare_python_cod": 215, "import_sect": [215, 221], "typeerror": 215, "internal_class": [216, 222], "multilin": 216, "internals3resourcedownload": 216, "medicaltensorflowbertclassif": 216, "assertiondatasetencod": 216, "tensorflowbiogpt": 216, "medicaltensorflowdistilbertclassif": 216, "medicalnerdatasetencod": 216, "medicaltensorflowclassif": 216, "medicalencoderdecodermodel": 216, "taskread": 216, "annotationtooljsonschema": 216, "simpledisambiguationpipelin": 216, "cosinemetricsbreezeimpl": 216, "linalg": 216, "categorytodomainmap": 216, "switchablesentenceembed": 216, "storagedisambiguatorhelp": 216, "storagelocatordisambigu": 216, "disambiguatormodelparam": 216, "disambiguationdatatyp": 216, "datatyp": 216, "contextmappingsschema": 216, "linalgalias": 216, "predictionlog": 216, "bowpoolingextractor": 216, "impl": 216, "sentenceembeddingsextractor": 216, "poolinglogicnd4": 216, "switchableembeddingsextractor": 216, "embeddingsextractor": 216, "poolinglog": 216, "annotationlog": 216, "kvknowledgeextractor": 216, "matchregex": 216, "readablepretrainedcontextualpars": 216, "matchedtoken": 216, "matchexcept": 216, "nertagsencodingintern": 216, "nertaggedintern": 216, "biogpttoken": 216, "assertionannot": 216, "genericclassifierdataencod": 216, "gptgenerationparam": 216, "negexdatasetread": 216, "stringfunct": 216, "jtreeread": 216, "jtreewrit": 216, "resolverparam": 216, "datehelp": 216, "deidmodelparam": 216, "obfuscatorannotatorapproach": 216, "obfuscatorparam": 216, "datechunkobfusc": 216, "texttodocumentcolumn": 216, "namechunkobfuscatorparam": 216, "obfuscatorannotatormodel": 216, "deidapproachparam": 216, "bertreconfig": 216, "relationinst": 216, "refeaturegener": 216, "relationencod": 216, "redataencod": 216, "tagsmetr": 216, "loggingdata": 216, "goldtoken": 216, "evalentityresolv": 216, "evaluationmetr": 216, "internalss3resourcedownload": 216, "threadsafedownload": 216, "riskadjustmentutil": [216, 240], "opensource_class": [216, 222], "jsonbuild": 216, "configload": 216, "conllgener": 216, "ziparchiveutil": 216, "longmapaccumul": 216, "mapaccumul": 216, "jsonpars": 216, "loadexternalmodel": 216, "debertaclassif": 216, "visionencoderdecod": 216, "xlnetclassif": 216, "vitclassifi": 216, "xlmroberta": 216, "xlmrobertaclassif": 216, "prepareembed": 216, "generationconfig": 216, "beamhypothes": 216, "beamsearchscor": 216, "beamscor": 216, "logitprocessorlist": 216, "logitwarp": 216, "topklogitwarp": 216, "temperaturelogitwarp": 216, "topplogitwarp": 216, "minlengthlogitprocessor": 216, "logitprocess": 216, "forcedtokenlogitprocessor": 216, "logitprocessor": 216, "repetitionpenaltylogitprocessor": 216, "norepeatngramslogitprocessor": 216, "suppresslogitprocessor": 216, "bartclassif": 216, "openaiembed": 216, "albertclassif": 216, "camembert": 216, "zeroshotnerclassif": 216, "bertclassif": 216, "wav2vec2": 216, "spanbertcoref": 216, "openaicomplet": 216, "camembertclassif": 216, "textembeddingrespons": 216, "completionrespons": 216, "robertaclassif": 216, "convnextclassifi": 216, "instructor": 216, "distilbertclassif": 216, "tapa": 216, "bart": 216, "sentencedetectordl": 216, "classifierdatasetencod": 216, "chunkbyt": 216, "tensorflowsenti": 216, "loadsentencepiec": 216, "sentencepiec": 216, "sentencepieceencod": 216, "sentencepiecewrapp": 216, "sentencegroup": 216, "nerdatasetencod": 216, "tensorflown": 216, "tensorflowserializemodel": 216, "modelsignaturemanag": 216, "modelsignatureconst": 216, "datasetencod": 216, "sparsearrai": 216, "linearchaincrfmodel": 216, "datasetmetadata": 216, "datasetread": 216, "linearchaincrf": 216, "vectormath": 216, "crfdataset": 216, "hasenablecachingproperti": 216, "tableassembl": 216, "hasrecursivetransform": 216, "haspretrain": 216, "camembertembed": 216, "doc2vecapproach": 216, "word2vecapproach": 216, "wordembeddingsread": 216, "elmoembed": 216, "e5embed": 216, "robertasentenceembed": 216, "xlmrobertasentenceembed": 216, "distilbertembed": 216, "wordembeddingsload": 216, "debertaembed": 216, "xlmrobertaembed": 216, "readsfrombyt": 216, "mpnetembed": 216, "robertaembed": 216, "albertembed": 216, "instructorembed": 216, "wordembeddingswrit": 216, "chunkembed": 216, "longformerembed": 216, "xlnetembed": 216, "doc2vecmodel": 216, "word2vecmodel": 216, "tokenassembl": 216, "hassimpleannot": 216, "imageassembl": 216, "hascandidatelabelsproperti": 216, "sparknlpconfigkei": 216, "matchstrategi": 216, "cloudstoragetyp": 216, "outputhelp": 216, "resourcehelp": 216, "graphbuild": 216, "rulefactori": 216, "regexrul": 216, "lfucach": 216, "finisherutil": 216, "lrumap": 216, "hasinputannotationcol": 216, "pubtat": 216, "conllucol": 216, "conllu": 216, "conll2003nerread": 216, "spacytoannot": 216, "conllhelp": 216, "serializedexternalresourc": 216, "multidatematch": 216, "regextoken": [216, 226], "textmatchermodel": 216, "tmedgesreadwrit": 216, "btm": 216, "bigtextmatchermodel": 216, "trienod": 216, "tmnodesread": 216, "bigtextmatch": 216, "tmedgesread": 216, "tmnodeswrit": 216, "tmvocabreadwrit": 216, "tmvocabread": 216, "datematchertransl": 216, "sentencedetectorparam": 216, "sbd": 216, "pragmaticsentenceextractor": 216, "pragmat": 216, "pragmaticmethod": 216, "pragmaticdictionari": 216, "pragmaticcontentformatt": 216, "rulesymbol": 216, "pragmaticsymbol": 216, "viveknsentimentmodel": 216, "sda": 216, "vivekn": 216, "viveknsentimentutil": 216, "viveknsentimentapproach": 216, "sentimentdetectormodel": 216, "pragmaticscor": 216, "sentimentdetector": 216, "nertagsencod": 216, "nerdlmodelpythonread": 216, "loadscontrib": 216, "featuregener": 216, "nercrfapproach": 216, "nercrfmodel": 216, "dictionaryfeatur": 216, "neroverwrit": 216, "languagedetectordl": 216, "ld": 216, "sentencedetectordlencod": 216, "sentence_detector_dl": 216, "sentencedetectordlapproach": 216, "documentnorm": 216, "symmetricdeleteapproach": 216, "symmetricdeleteparam": 216, "symmetricdeletemodel": 216, "contextspellcheckerapproach": 216, "contextspellcheckermodel": 216, "weightedlevenshtein": 216, "serializableclass": 216, "specialtokenspars": 216, "hastransducerfeatur": 216, "norvigsweetingmodel": 216, "norvig": 216, "norvigsweetingparam": 216, "norvigsweetingapproach": 216, "whispertokendecod": 216, "bpe": 216, "bpespecialtoken": 216, "xlmtoken": 216, "bpetoken": 216, "barttoken": 216, "gpt2token": 216, "robertatoken": 216, "wordpieceencod": 216, "basictoken": 216, "mosespunctnorm": 216, "mosestoken": 216, "mose": 216, "tapasencod": 216, "datematch": 216, "documentsimilarityrankermodel": 216, "documentsimilarityrankerapproach": 216, "chunktoken": 216, "tagdictionari": 216, "dep": 216, "dependencyparserapproach": 216, "tagger": [216, 226, 237], "perceptron": 216, "greedytransitionapproach": 216, "greedytransit": 216, "dependencymak": 216, "trainfil": 216, "typdep": 216, "typeddependencyparsermodel": 216, "typeddependencyparserapproach": 216, "chunktokenizermodel": 216, "annotatorparam": 216, "writableannotatorcompon": 216, "externalresourceparam": 216, "serializedannotatorcompon": 216, "graphextract": 216, "xlmrobertafortokenclassif": 216, "bertfortokenclassif": 216, "robertaforzeroshotclassif": 216, "xlnetforsequenceclassif": 216, "robertaforsequenceclassif": 216, "classifierencod": 216, "bertforquestionansw": 216, "tapasforquestionansw": 216, "camembertforsequenceclassif": 216, "robertafortokenclassif": 216, "debertaforsequenceclassif": 216, "distilbertforzeroshotclassif": 216, "camembertforquestionansw": 216, "debertafortokenclassif": 216, "xlnetfortokenclassif": 216, "classifiermetr": 216, "albertforquestionansw": 216, "debertaforquestionansw": 216, "bertforzeroshotclassif": 216, "bertforsequenceclassif": 216, "distilbertforquestionansw": 216, "camembertfortokenclassif": 216, "bartforzeroshotclassif": 216, "xlmrobertaforsequenceclassif": 216, "longformerforsequenceclassif": 216, "distilbertfortokenclassif": 216, "xlmrobertaforzeroshotclassif": 216, "albertforsequenceclassif": 216, "xlmrobertaforquestionansw": 216, "longformerfortokenclassif": 216, "longformerforquestionansw": 216, "albertfortokenclassif": 216, "datasethelp": 216, "taggedsent": 216, "wordpiecetoken": 216, "dependencypars": 216, "embeddingswithsent": 216, "indexedtoken": 216, "tokenizedwithsent": 216, "tabledata": 216, "tokenpars": 216, "conllsent": 216, "tokenizedsent": 216, "sentencewithembed": 216, "labeleddepend": 216, "recursivetokenizermodel": 216, "whisperforctc": 216, "audio": 216, "hubertforctc": 216, "wav2vec2forctc": 216, "whisperpreprocessor": 216, "feature_extractor": 216, "preprocessorattribut": 216, "audioutil": 216, "preprocessor": 216, "perceptronapproachdistribut": 216, "averagedperceptron": 216, "perceptronpredictionutil": 216, "perceptrontrainingutil": 216, "perceptronapproach": 216, "accumul": 216, "perceptronutil": 216, "tokenizermodel": 216, "mariantransform": 216, "gpt2transform": 216, "barttransform": 216, "t5transform": 216, "date2chunk": 216, "regexmatchermodel": 216, "recursivetoken": 216, "lemmatizermodel": 216, "normalizermodel": 216, "convnextforimageclassif": 216, "cv": 216, "imageioutil": 216, "imageschemautil": 216, "imageresizeutil": 216, "hasrescalefactor": 216, "vitforimageclassif": 216, "visionencoderdecoderforimagecapt": 216, "swinforimageclassif": 216, "datematcherutil": 216, "yakeparam": 216, "yakekeywordextract": 216, "regexpatternsread": 216, "patternsread": 216, "ahocorasickautomaton": 216, "entityrulermodel": 216, "regexpatternsreadwrit": 216, "entitypattern": 216, "patternsreadwrit": 216, "entityrulerfeatur": 216, "entityrulerutil": 216, "entityrulerapproach": 216, "pretrainedannot": 216, "token2chunk": 216, "wordsegmenterapproach": 216, "wordsegmentermodel": 216, "tagstyp": 216, "spanbertcorefmodel": 216, "coref": 216, "rawannot": 216, "embeddingsfinish": 216, "hasimagefeatureproperti": 216, "audioassembl": 216, "canbelazi": 216, "paramsandfeatureswrit": 216, "annotationimag": 216, "hasmultipleinputannotationcol": 216, "hasgeneratorproperti": 216, "hasrecursivefit": 216, "hasbatchedannotateaudio": 216, "hasaudiofeatureproperti": 216, "graphfinish": 216, "hasprotectedparam": 216, "hasbatchedannotateimag": 216, "hasfeatur": 216, "hasoutputannotatortyp": 216, "annotationaudio": 216, "iannot": 216, "paramsandfeaturesread": 216, "hasoutputannotationcol": 216, "hasclassifieractivationproperti": 216, "documentsimilarityrankerfinish": 216, "resourcedownload": 216, "repositorymetadata": 216, "resourcemetadata": 216, "s3resourcedownload": 216, "run_convert": 217, "build_py_cod": 217, "build_sc_cod": 217, "python_code_fail": [217, 223], "scala_gener": [217, 223], "generated_code_work": [217, 223], "generated_code_fail": [217, 223], "bucket": 220, "convert_nlu_component_to_python": 220, "is_component_fin": 220, "is_component_leg": 220, "is_component_med": 220, "is_component_ocr": 220, "is_component_open_sourc": 220, "is_component_pretrain": 220, "nlu_component_to_spark_nlp_cod": 220, "starts_with_fin": 220, "starts_with_leg": 220, "starts_with_med": 220, "to_python": 220, "pipeline_to_convert": 220, "medical_annotators_set": 220, "open_source_annotator_set_fin": 220, "focus": 221, "anonymize_script": 221, "break_line_after_backslash": 221, "convert_class_nam": 221, "convert_python_dict_to_scala_script": 221, "find_key_valu": 221, "get_data_dict": 221, "get_import_sect": 221, "data_dict": 221, "prepare_scala_cod": 221, "is_spark_initi": 221, "remove_blank_lin": 221, "blank": 221, "restore_sensitive_valu": 221, "anonymized_script": 221, "sensitive_valu": 221, "run_transpil": 221, "markdown": [222, 223], "get_python_code_from_md": 222, "md_file_path": [222, 223], "get_scala_code_from_md": 222, "load_file_as_dict": 222, "file_path1": 222, "file_path2": 222, "process_python_cod": 222, "python_cod": 222, "update_md_fil": 222, "file_path": [222, 230, 238], "update_md_file_for_working_scala_cod": 222, "replacement_str": 222, "git": 223, "apply_method_to_all_md_fil": 223, "directory_path": 223, "upload_scala_code_in_git": 223, "upload_scala_code_in_md_fil": 223, "md_file": 223, "results_list": 223, "scala_code_work": 223, "updatecachemodel": 224, "cache_fold": 224, "refresh": 224, "model_nam": 224, "start_dat": 224, "end_dat": 224, "get_mt_sampl": 225, "medical_speci": 225, "transcrib": 225, "mtsampl": 225, "allergy_immunologi": 225, "autopsi": 225, "bariatr": 225, "cardiovascular_pulmonari": 225, "chiropract": 225, "consult_history_and_phi": 225, "cosmetic_plastic_surgeri": 225, "dentistri": 225, "dermatologi": 225, "diets_and_nutrit": 225, "discharge_summari": 225, "emergency_room_report": 225, "endocrinologi": 225, "ent_otolaryngologi": 225, "gastroenterologi": 225, "general_medicin": 225, "hematology_oncologi": 225, "hospice_palliative_car": 225, "im": 225, "lab_medicine_pathologi": 225, "letter": 225, "nephrologi": 225, "neurologi": 225, "neurosurgeri": 225, "obstetrics_gynecologi": 225, "office_not": 225, "ophthalmologi": 225, "orthoped": 225, "pain_manag": 225, "pediatrics_neonat": 225, "physical_medicine_rehab": 225, "podiatri": 225, "psychiatry_psychologi": 225, "radiologi": 225, "rheumatologi": 225, "sleep_medicin": 225, "soap_chart_progress_not": 225, "speech_languag": 225, "surgeri": 225, "urologi": 225, "scrap": 225, "get_doc_assembl": 226, "get_empty_df": 226, "get_ner_df": 226, "get_ner_sentence_bord": 226, "border": 226, "get_nlp_pos_pipelin": 226, "get_nlp_token_pipelin": 226, "get_po": 226, "get_regex_token": 226, "get_regular_token": 226, "get_rel_df": 226, "get_sent_detector": 226, "get_sentence_pipelin": 226, "get_single_task_conl": 226, "pos_pipelin": 226, "token_pipelin": 226, "enumer": 226, "get_token_df": 226, "_type_": 226, "read_conl": 226, "filepath": 226, "strip_json_ent": 226, "exported_json": 226, "strip": 226, "empty_df": 226, "nlp_pos_pipelin": 226, "nlp_token_pipelin": 226, "pos_pipeline_initi": 226, "regular_token": 226, "token_pipeline_initi": 226, "relationaldbdeidentif": 228, "foreign": 228, "age_group": 228, "days_to_shift": 228, "phi_keyword": 228, "pk_fk_shift_valu": 228, "use_hipaa": 228, "connect_to_db": 228, "mysql": 228, "pymysql": 228, "fetch": 228, "detect_sensitive_column": 228, "get_all_t": 228, "get_schema_info": 228, "table_nam": 228, "mask_other_sensitive_column": 228, "other_column": 228, "obfuscate_ag": 228, "age_column": 228, "date_column": 228, "obfuscate_primary_foreign_kei": 228, "pk_fk_column": 228, "setup_log": 228, "create_obfuscate_age_udf": 228, "age_groups_broadcast": 228, "udf": 228, "broadcast": 228, "userdefinedfunct": 228, "dateshiftfil": 229, "max_shift_dai": 229, "pseudo": 229, "reus": 229, "maxshiftdai": 229, "filler": 229, "fill_missing_shift": 229, "id_col": 229, "note_id": 229, "shift_col": 229, "date_shift": 229, "_fill": 229, "resolved_mod": 229, "resolvedmod": 229, "duplic": 229, "dict_to_annotation_convert": 230, "document_col_nam": 230, "chunk_col_nam": 230, "adjust_end": 230, "chunk_validation_opt": 230, "validation_mod": 230, "scope_window": 230, "respons": 230, "abl": 230, "therefor": 230, "document_metadata": 230, "reserv": 230, "list_of_dict": 230, "georg": 230, "born": 230, "1995": 230, "pleasur": 230, "llm_output": 230, "83": 230, "96": 230, "doc_id": [230, 243], "file1": 230, "bush": 230, "nativ": 230, "reach": 230, "me": 230, "file2": 230, "structured_deidentifi": 230, "columns_dict": 230, "ref_sourc": 230, "columns_se": 230, "date_format": 230, "apply_exception_handl": 231, "is_module_import": 232, "lib": 232, "raise_except": 232, "pip_nam": 232, "message_typ": 232, "instruct": 232, "parse_str_to_dict": 234, "dict_str": 234, "row_separ": 234, "key_value_separ": 234, "is_value_list": 234, "value_separ": 234, "deseri": 234, "internalannotatortyp": 235, "selector": 235, "ocr_entity_processor": 238, "bounding_box": 238, "save_fold": 238, "label_color": 238, "box_color": 238, "color_chart_path": 238, "color_chart": 238, "png": 238, "chunk_col": 238, "black_list": 238, "display_result": 238, "pageiteratorlevel": 238, "pagesegmod": 238, "pagesegmentationmod": 238, "sparse_text_osd": 238, "outline_color": [238, 239], "outline_width": [238, 239], "text_band": [238, 239], "text_typ": 238, "pdf": [238, 243], "ocr": [238, 239], "paint": 238, "highlight": [238, 240], "colored_box": 238, "draw": 238, "band": 238, "color": [238, 239], "box": [238, 243], "rgb": 238, "chart": 238, "entitii": 238, "writ": 238, "aqua": [238, 239], "aquamarin": [238, 239], "blanchedalmond": [238, 239], "blue": [238, 239], "blueviolet": [238, 239], "burlywood": [238, 239], "draw_boxes_on_image_handwritten_region": 239, "image_data": 239, "get_handwritten_region": 239, "colors_rgb": 239, "255": 239, "127": 239, "212": 239, "235": 239, "205": 239, "138": 239, "226": 239, "label2color": 239, "label2rgb": 239, "pretrained_model": 239, "image_handwritten_detector_gsa0803": 239, "hierarch": 240, "10th": 240, "revis": 240, "hcc_from_icd": 240, "hcc_label": 240, "hcc_list": 240, "diff_between_hcc": 240, "before_hcc_list": 240, "after_hcc_list": 240, "evolv": 240, "cc": 240, "escal": 240, "aggregate_ent": 242, "calc_metr": 242, "tp": 242, "percent": 242, "fb1": 242, "decim": 242, "count_chunk": 242, "correct_chunk": 242, "true_chunk": 242, "pred_chunk": 242, "correct_count": 242, "true_count": 242, "pred_count": 242, "counter": 242, "correctli": 242, "get_result": 242, "prec": 242, "rec": 242, "is_chunk_end": 242, "prev_tag": 242, "previou": 242, "contradict": 242, "is_chunk_start": 242, "split_tag": 242, "chunk_tag": 242, "chunk_typ": 242, "convert_to_conl": 243, "get_token": 243, "hocr": 243, "pdfs_to_visualner_to_conl": 243, "pdf_dir": 243, "pdf_visual_pipeline_model": 243, "output_fil": 243, "text_ner_dataset": 243, "visualner_annotations_to_conl": 243, "visual_json_input_fil": 243, "conll_output_fil": 243, "write_conl": 243, "conll_lin": 243, "filenam": 243, "overview": 244}, "objects": {"": [[172, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[8, 0, 0, "-", "alab"], [74, 0, 0, "-", "annotator"], [172, 4, 1, "", "annotators"], [131, 0, 0, "-", "base"], [135, 0, 0, "-", "common"], [136, 0, 0, "-", "compatibility"], [137, 0, 0, "-", "custom_transformer"], [138, 0, 0, "-", "deidentification_module"], [139, 0, 0, "-", "eval"], [154, 0, 0, "-", "finance"], [171, 0, 0, "-", "functions"], [172, 5, 1, "", "get_credentials"], [173, 0, 0, "-", "internal"], [188, 0, 0, "-", "legal"], [172, 5, 1, "", "library_settings"], [205, 0, 0, "-", "llm"], [172, 5, 1, "", "load_license_validator"], [207, 0, 0, "-", "modelTracer"], [208, 0, 0, "-", "pipeline_output_parser"], [209, 0, 0, "-", "pipeline_tracer"], [210, 0, 0, "-", "pretrained"], [172, 5, 1, "", "pub_version"], [172, 4, 1, "", "size_regex"], [172, 5, 1, "", "start"], [211, 0, 0, "-", "structured_deidentification"], [212, 0, 0, "-", "text_to_documents_columns"], [213, 0, 0, "-", "training"], [214, 0, 0, "-", "training_log_parser"], [172, 4, 1, "", "transformer_seq_classification"], [219, 0, 0, "-", "transpiler"], [224, 0, 0, "-", "updateModels"], [225, 0, 0, "-", "util"], [233, 0, 0, "-", "utils"], [172, 5, 1, "", "version"], [172, 4, 1, "", "version_regex"]], "sparknlp_jsl.alab": [[8, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[8, 2, 1, "", "base_url"], [8, 3, 1, "", "check_preannotations_summary"], [8, 2, 1, "", "client_id"], [8, 2, 1, "", "client_secret"], [8, 2, 1, "", "cookies"], [8, 3, 1, "", "create_project"], [8, 3, 1, "", "delete_project"], [8, 3, 1, "", "delete_tasks"], [8, 3, 1, "", "generate_preannotations"], [8, 3, 1, "", "get_IAA_metrics"], [8, 3, 1, "", "get_all_projects"], [8, 3, 1, "", "get_annotations"], [8, 3, 1, "", "get_assertion_data"], [8, 3, 1, "", "get_classification_data"], [8, 3, 1, "", "get_conll_data"], [8, 3, 1, "", "get_conll_data_from_visualner"], [8, 3, 1, "", "get_project_config"], [8, 3, 1, "", "get_relation_extraction_data"], [8, 2, 1, "", "http_success_codes"], [8, 2, 1, "", "password"], [8, 3, 1, "", "review_annotations"], [8, 3, 1, "", "set_credentials"], [8, 3, 1, "", "set_project_config"], [8, 2, 1, "", "ssl_verification"], [8, 3, 1, "", "upload_preannotations"], [8, 3, 1, "", "upload_tasks"], [8, 2, 1, "", "username"]], "sparknlp_jsl.annotator": [[9, 0, 0, "-", "annotation_converter"], [10, 0, 0, "-", "annotation_merger"], [74, 4, 1, "", "assertion"], [18, 0, 0, "-", "assertion"], [19, 0, 0, "-", "chunk2_token"], [74, 4, 1, "", "chunker"], [28, 0, 0, "-", "chunker"], [74, 4, 1, "", "classification"], [36, 0, 0, "-", "classification"], [74, 4, 1, "", "context"], [44, 0, 0, "-", "context"], [74, 4, 1, "", "deid"], [49, 0, 0, "-", "deid"], [74, 4, 1, "", "disambiguation"], [54, 0, 0, "-", "disambiguation"], [56, 0, 0, "-", "doc2_chunk_internal"], [57, 0, 0, "-", "document_filterer_by_classifier"], [58, 0, 0, "-", "document_filterer_by_ner"], [74, 4, 1, "", "embeddings"], [63, 0, 0, "-", "embeddings"], [65, 0, 0, "-", "er"], [66, 0, 0, "-", "feature_assembler"], [68, 0, 0, "-", "fhir"], [69, 0, 0, "-", "filtering_params"], [70, 0, 0, "-", "flattener"], [74, 4, 1, "", "generic_classifier"], [72, 0, 0, "-", "generic_classifier"], [73, 0, 0, "-", "handle_exception_params"], [74, 4, 1, "", "keyword"], [75, 0, 0, "-", "matcher"], [78, 0, 0, "-", "medical_llm"], [81, 0, 0, "-", "merge"], [83, 0, 0, "-", "metadata_annotation_converter"], [84, 0, 0, "-", "multi_chunk2_doc"], [85, 0, 0, "-", "ner"], [95, 0, 0, "-", "normalizer"], [96, 0, 0, "-", "params"], [98, 0, 0, "-", "parser"], [101, 0, 0, "-", "qa"], [105, 0, 0, "-", "rag"], [107, 0, 0, "-", "re"], [112, 0, 0, "-", "regex"], [114, 0, 0, "-", "resolution"], [117, 0, 0, "-", "resolution2_chunk"], [118, 0, 0, "-", "router"], [119, 0, 0, "-", "seq2seq"], [124, 0, 0, "-", "source_tracking_metadata_params"], [125, 0, 0, "-", "splitter"], [127, 0, 0, "-", "tf_graph_builder"], [128, 0, 0, "-", "white_black_list_params"], [129, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_converter": [[9, 1, 1, "", "AnnotationConverter"]], "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter": [[9, 3, 1, "", "clear"], [9, 3, 1, "", "copy"], [9, 3, 1, "", "explainParam"], [9, 3, 1, "", "explainParams"], [9, 3, 1, "", "extractParamMap"], [9, 2, 1, "", "functionStr"], [9, 3, 1, "", "getInputCol"], [9, 3, 1, "", "getOrDefault"], [9, 3, 1, "", "getOutputAnnotatorType"], [9, 3, 1, "", "getOutputCol"], [9, 3, 1, "", "getParam"], [9, 3, 1, "", "getParamValue"], [9, 2, 1, "", "getter_attrs"], [9, 3, 1, "", "hasDefault"], [9, 3, 1, "", "hasParam"], [9, 2, 1, "", "inputCol"], [9, 3, 1, "", "isDefined"], [9, 3, 1, "", "isSet"], [9, 3, 1, "", "load"], [9, 2, 1, "", "name"], [9, 2, 1, "", "outputAnnotatorType"], [9, 2, 1, "", "outputCol"], [9, 3, 1, "", "read"], [9, 3, 1, "", "save"], [9, 3, 1, "", "set"], [9, 3, 1, "", "setInputCol"], [9, 3, 1, "", "setOutputAnnotatorType"], [9, 3, 1, "", "setOutputCol"], [9, 3, 1, "", "setParamValue"], [9, 3, 1, "", "setParams"], [9, 3, 1, "", "transform"], [9, 2, 1, "", "uid"], [9, 3, 1, "", "write"]], "sparknlp_jsl.annotator.annotation_merger": [[10, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[10, 3, 1, "", "clear"], [10, 3, 1, "", "copy"], [10, 3, 1, "", "explainParam"], [10, 3, 1, "", "explainParams"], [10, 3, 1, "", "extractParamMap"], [10, 3, 1, "", "getInputCols"], [10, 3, 1, "", "getLazyAnnotator"], [10, 3, 1, "", "getOrDefault"], [10, 3, 1, "", "getOutputCol"], [10, 3, 1, "", "getParam"], [10, 3, 1, "", "getParamValue"], [10, 2, 1, "", "getter_attrs"], [10, 3, 1, "", "hasDefault"], [10, 3, 1, "", "hasParam"], [10, 2, 1, "", "inputAnnotatorTypes"], [10, 2, 1, "", "inputCols"], [10, 3, 1, "", "inputColsValidation"], [10, 2, 1, "", "inputType"], [10, 3, 1, "", "isDefined"], [10, 3, 1, "", "isSet"], [10, 2, 1, "", "lazyAnnotator"], [10, 3, 1, "", "load"], [10, 2, 1, "", "name"], [10, 2, 1, "", "optionalInputAnnotatorTypes"], [10, 2, 1, "", "outputAnnotatorType"], [10, 2, 1, "", "outputCol"], [10, 3, 1, "", "read"], [10, 3, 1, "", "save"], [10, 3, 1, "", "set"], [10, 3, 1, "", "setForceInputTypeValidation"], [10, 3, 1, "", "setInputCols"], [10, 3, 1, "", "setInputType"], [10, 3, 1, "", "setLazyAnnotator"], [10, 3, 1, "", "setOutputCol"], [10, 3, 1, "", "setParamValue"], [10, 3, 1, "", "setParams"], [10, 2, 1, "", "skipLPInputColsValidation"], [10, 3, 1, "", "transform"], [10, 2, 1, "", "uid"], [10, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion": [[11, 0, 0, "-", "assertionDL"], [12, 0, 0, "-", "assertion_chunk_converter"], [13, 0, 0, "-", "assertion_dl_reg"], [14, 0, 0, "-", "assertion_merger"], [15, 0, 0, "-", "bert_for_assertion_classification"], [16, 0, 0, "-", "contextual_assertion"], [17, 0, 0, "-", "fewshot_assertion_sentence_converter"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[11, 1, 1, "", "AssertionDLApproach"], [11, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[11, 2, 1, "", "batchSize"], [11, 2, 1, "", "blackList"], [11, 2, 1, "", "caseSensitive"], [11, 3, 1, "", "clear"], [11, 2, 1, "", "configProtoBytes"], [11, 3, 1, "", "copy"], [11, 2, 1, "", "datasetInfo"], [11, 2, 1, "", "doExceptionHandling"], [11, 2, 1, "", "dropout"], [11, 2, 1, "", "enableOutputLogs"], [11, 2, 1, "", "endCol"], [11, 2, 1, "", "engine"], [11, 2, 1, "", "epochs"], [11, 3, 1, "", "explainParam"], [11, 3, 1, "", "explainParams"], [11, 3, 1, "", "extractParamMap"], [11, 3, 1, "", "fit"], [11, 3, 1, "", "fitMultiple"], [11, 3, 1, "", "getEngine"], [11, 3, 1, "", "getInputCols"], [11, 3, 1, "", "getLazyAnnotator"], [11, 3, 1, "", "getOrDefault"], [11, 3, 1, "", "getOutputCol"], [11, 3, 1, "", "getParam"], [11, 3, 1, "", "getParamValue"], [11, 2, 1, "", "getter_attrs"], [11, 2, 1, "", "graphFile"], [11, 2, 1, "", "graphFolder"], [11, 3, 1, "", "hasDefault"], [11, 3, 1, "", "hasParam"], [11, 2, 1, "", "includeConfidence"], [11, 2, 1, "", "inputAnnotatorTypes"], [11, 2, 1, "", "inputCols"], [11, 3, 1, "", "inputColsValidation"], [11, 3, 1, "", "isDefined"], [11, 3, 1, "", "isSet"], [11, 2, 1, "", "label"], [11, 2, 1, "", "lazyAnnotator"], [11, 2, 1, "", "learningRate"], [11, 3, 1, "", "load"], [11, 2, 1, "", "maxSentLen"], [11, 2, 1, "", "optionalInputAnnotatorTypes"], [11, 2, 1, "", "outputAnnotatorType"], [11, 2, 1, "", "outputCol"], [11, 2, 1, "", "outputLogsPath"], [11, 3, 1, "", "read"], [11, 3, 1, "", "save"], [11, 2, 1, "", "scopeWindow"], [11, 3, 1, "", "set"], [11, 3, 1, "", "setBatchSize"], [11, 3, 1, "", "setBlackList"], [11, 3, 1, "", "setCaseSensitive"], [11, 3, 1, "", "setConfigProtoBytes"], [11, 3, 1, "", "setDatasetInfo"], [11, 3, 1, "", "setDenyList"], [11, 3, 1, "", "setDoExceptionHandling"], [11, 3, 1, "", "setDropout"], [11, 3, 1, "", "setEnableOutputLogs"], [11, 3, 1, "", "setEndCol"], [11, 3, 1, "", "setEpochs"], [11, 3, 1, "", "setForceInputTypeValidation"], [11, 3, 1, "", "setGraphFile"], [11, 3, 1, "", "setGraphFolder"], [11, 3, 1, "", "setIncludeConfidence"], [11, 3, 1, "", "setInputCols"], [11, 3, 1, "", "setLabelCol"], [11, 3, 1, "", "setLazyAnnotator"], [11, 3, 1, "", "setLearningRate"], [11, 3, 1, "", "setMaxSentLen"], [11, 3, 1, "", "setOutputCol"], [11, 3, 1, "", "setOutputLogsPath"], [11, 3, 1, "", "setParamValue"], [11, 3, 1, "", "setScopeWindow"], [11, 3, 1, "", "setStartCol"], [11, 3, 1, "", "setTestDataset"], [11, 3, 1, "", "setValidationSplit"], [11, 3, 1, "", "setVerbose"], [11, 3, 1, "", "setWhiteList"], [11, 2, 1, "", "skipLPInputColsValidation"], [11, 2, 1, "", "startCol"], [11, 2, 1, "", "testDataset"], [11, 2, 1, "", "uid"], [11, 2, 1, "", "validationSplit"], [11, 2, 1, "", "verbose"], [11, 2, 1, "", "whiteList"], [11, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[11, 2, 1, "", "classes"], [11, 3, 1, "", "clear"], [11, 2, 1, "", "configProtoBytes"], [11, 3, 1, "", "copy"], [11, 2, 1, "", "datasetInfo"], [11, 2, 1, "", "entityAssertionCaseSensitive"], [11, 3, 1, "", "explainParam"], [11, 3, 1, "", "explainParams"], [11, 3, 1, "", "extractParamMap"], [11, 3, 1, "", "getEntityAssertion"], [11, 3, 1, "", "getInputCols"], [11, 3, 1, "", "getLazyAnnotator"], [11, 3, 1, "", "getOrDefault"], [11, 3, 1, "", "getOutputCol"], [11, 3, 1, "", "getParam"], [11, 3, 1, "", "getParamValue"], [11, 3, 1, "", "getReplaceLabels"], [11, 3, 1, "", "getStorageRef"], [11, 2, 1, "", "getter_attrs"], [11, 3, 1, "", "hasDefault"], [11, 3, 1, "", "hasParam"], [11, 2, 1, "", "includeConfidence"], [11, 2, 1, "", "inputAnnotatorTypes"], [11, 2, 1, "", "inputCols"], [11, 3, 1, "", "inputColsValidation"], [11, 3, 1, "", "isDefined"], [11, 3, 1, "", "isSet"], [11, 2, 1, "", "lazyAnnotator"], [11, 3, 1, "", "load"], [11, 2, 1, "", "maxSentLen"], [11, 2, 1, "", "name"], [11, 2, 1, "", "optionalInputAnnotatorTypes"], [11, 2, 1, "", "outputAnnotatorType"], [11, 2, 1, "", "outputCol"], [11, 3, 1, "", "pretrained"], [11, 3, 1, "", "read"], [11, 3, 1, "", "save"], [11, 2, 1, "", "scopeWindow"], [11, 3, 1, "", "set"], [11, 3, 1, "", "setConfigProtoBytes"], [11, 3, 1, "", "setDatasetInfo"], [11, 3, 1, "", "setEntityAssertion"], [11, 3, 1, "", "setEntityAssertionCaseSensitive"], [11, 3, 1, "", "setForceInputTypeValidation"], [11, 3, 1, "", "setIncludeConfidence"], [11, 3, 1, "", "setInputCols"], [11, 3, 1, "", "setLazyAnnotator"], [11, 3, 1, "", "setOutputCol"], [11, 3, 1, "", "setParamValue"], [11, 3, 1, "", "setParams"], [11, 3, 1, "", "setReplaceLabels"], [11, 3, 1, "", "setScopeWindow"], [11, 3, 1, "", "setStorageRef"], [11, 2, 1, "", "skipLPInputColsValidation"], [11, 2, 1, "", "storageRef"], [11, 2, 1, "", "targetNerLabels"], [11, 3, 1, "", "transform"], [11, 2, 1, "", "uid"], [11, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[12, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[12, 2, 1, "", "chunkBeginCol"], [12, 2, 1, "", "chunkEndCol"], [12, 2, 1, "", "chunkTextCol"], [12, 3, 1, "", "clear"], [12, 3, 1, "", "copy"], [12, 3, 1, "", "explainParam"], [12, 3, 1, "", "explainParams"], [12, 3, 1, "", "extractParamMap"], [12, 3, 1, "", "getOrDefault"], [12, 3, 1, "", "getParam"], [12, 3, 1, "", "getParamValue"], [12, 2, 1, "", "getter_attrs"], [12, 3, 1, "", "hasDefault"], [12, 3, 1, "", "hasParam"], [12, 2, 1, "", "inputAnnotatorTypes"], [12, 2, 1, "", "inputCols"], [12, 3, 1, "", "isDefined"], [12, 3, 1, "", "isSet"], [12, 3, 1, "", "load"], [12, 2, 1, "", "name"], [12, 2, 1, "", "outputAnnotatorType"], [12, 2, 1, "", "outputCol"], [12, 2, 1, "", "outputTokenBeginCol"], [12, 2, 1, "", "outputTokenEndCol"], [12, 3, 1, "", "read"], [12, 3, 1, "", "save"], [12, 3, 1, "", "set"], [12, 3, 1, "", "setChunkBeginCol"], [12, 3, 1, "", "setChunkEndCol"], [12, 3, 1, "", "setChunkTextCol"], [12, 3, 1, "", "setInputCols"], [12, 3, 1, "", "setMetadataFields"], [12, 3, 1, "", "setOutputCol"], [12, 3, 1, "", "setOutputTokenBeginCol"], [12, 3, 1, "", "setOutputTokenEndCol"], [12, 3, 1, "", "setParamValue"], [12, 3, 1, "", "setParams"], [12, 3, 1, "", "transform"], [12, 2, 1, "", "uid"], [12, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[13, 1, 1, "", "AssertionLogRegApproach"], [13, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[13, 2, 1, "", "afterParam"], [13, 2, 1, "", "beforeParam"], [13, 3, 1, "", "clear"], [13, 3, 1, "", "copy"], [13, 2, 1, "", "eNetParam"], [13, 2, 1, "", "endCol"], [13, 3, 1, "", "explainParam"], [13, 3, 1, "", "explainParams"], [13, 3, 1, "", "extractParamMap"], [13, 3, 1, "", "fit"], [13, 3, 1, "", "fitMultiple"], [13, 3, 1, "", "getInputCols"], [13, 3, 1, "", "getLazyAnnotator"], [13, 3, 1, "", "getOrDefault"], [13, 3, 1, "", "getOutputCol"], [13, 3, 1, "", "getParam"], [13, 3, 1, "", "getParamValue"], [13, 2, 1, "", "getter_attrs"], [13, 3, 1, "", "hasDefault"], [13, 3, 1, "", "hasParam"], [13, 2, 1, "", "inputAnnotatorTypes"], [13, 2, 1, "", "inputCols"], [13, 3, 1, "", "inputColsValidation"], [13, 3, 1, "", "isDefined"], [13, 3, 1, "", "isSet"], [13, 2, 1, "", "label"], [13, 2, 1, "", "lazyAnnotator"], [13, 3, 1, "", "load"], [13, 2, 1, "", "maxIter"], [13, 2, 1, "", "nerCol"], [13, 2, 1, "", "optionalInputAnnotatorTypes"], [13, 2, 1, "", "outputAnnotatorType"], [13, 2, 1, "", "outputCol"], [13, 3, 1, "", "read"], [13, 2, 1, "", "regParam"], [13, 3, 1, "", "save"], [13, 3, 1, "", "set"], [13, 3, 1, "", "setAfter"], [13, 3, 1, "", "setBefore"], [13, 3, 1, "", "setEndCol"], [13, 3, 1, "", "setEnet"], [13, 3, 1, "", "setForceInputTypeValidation"], [13, 3, 1, "", "setInputCols"], [13, 3, 1, "", "setLabelCol"], [13, 3, 1, "", "setLazyAnnotator"], [13, 3, 1, "", "setMaxIter"], [13, 3, 1, "", "setNerCol"], [13, 3, 1, "", "setOutputCol"], [13, 3, 1, "", "setParamValue"], [13, 3, 1, "", "setReg"], [13, 3, 1, "", "setStartCol"], [13, 3, 1, "", "setTargetNerLabels"], [13, 2, 1, "", "skipLPInputColsValidation"], [13, 2, 1, "", "startCol"], [13, 2, 1, "", "targetNerLabels"], [13, 2, 1, "", "uid"], [13, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[13, 2, 1, "", "afterParam"], [13, 2, 1, "", "beforeParam"], [13, 3, 1, "", "clear"], [13, 3, 1, "", "copy"], [13, 2, 1, "", "endCol"], [13, 3, 1, "", "explainParam"], [13, 3, 1, "", "explainParams"], [13, 3, 1, "", "extractParamMap"], [13, 3, 1, "", "getInputCols"], [13, 3, 1, "", "getLazyAnnotator"], [13, 3, 1, "", "getOrDefault"], [13, 3, 1, "", "getOutputCol"], [13, 3, 1, "", "getParam"], [13, 3, 1, "", "getParamValue"], [13, 3, 1, "", "getStorageRef"], [13, 2, 1, "", "getter_attrs"], [13, 3, 1, "", "hasDefault"], [13, 3, 1, "", "hasParam"], [13, 2, 1, "", "inputAnnotatorTypes"], [13, 2, 1, "", "inputCols"], [13, 3, 1, "", "inputColsValidation"], [13, 3, 1, "", "isDefined"], [13, 3, 1, "", "isSet"], [13, 2, 1, "", "lazyAnnotator"], [13, 3, 1, "", "load"], [13, 2, 1, "", "name"], [13, 2, 1, "", "nerCol"], [13, 2, 1, "", "optionalInputAnnotatorTypes"], [13, 2, 1, "", "outputAnnotatorType"], [13, 2, 1, "", "outputCol"], [13, 3, 1, "", "pretrained"], [13, 3, 1, "", "read"], [13, 3, 1, "", "save"], [13, 3, 1, "", "set"], [13, 3, 1, "", "setForceInputTypeValidation"], [13, 3, 1, "", "setInputCols"], [13, 3, 1, "", "setLazyAnnotator"], [13, 3, 1, "", "setOutputCol"], [13, 3, 1, "", "setParamValue"], [13, 3, 1, "", "setParams"], [13, 3, 1, "", "setStorageRef"], [13, 2, 1, "", "skipLPInputColsValidation"], [13, 2, 1, "", "startCol"], [13, 2, 1, "", "storageRef"], [13, 2, 1, "", "targetNerLabels"], [13, 3, 1, "", "transform"], [13, 2, 1, "", "uid"], [13, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[14, 1, 1, "", "AssertionMerger"]], "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger": [[14, 2, 1, "", "applyFilterBeforeMerge"], [14, 2, 1, "", "assertionSourcePrecedence"], [14, 2, 1, "", "blackList"], [14, 2, 1, "", "caseSensitive"], [14, 3, 1, "", "clear"], [14, 3, 1, "", "copy"], [14, 2, 1, "", "defaultConfidence"], [14, 3, 1, "", "explainParam"], [14, 3, 1, "", "explainParams"], [14, 3, 1, "", "extractParamMap"], [14, 3, 1, "", "getInputCols"], [14, 3, 1, "", "getLazyAnnotator"], [14, 3, 1, "", "getOrDefault"], [14, 3, 1, "", "getOutputCol"], [14, 3, 1, "", "getParam"], [14, 3, 1, "", "getParamValue"], [14, 2, 1, "", "getter_attrs"], [14, 3, 1, "", "hasDefault"], [14, 3, 1, "", "hasParam"], [14, 2, 1, "", "inputAnnotatorTypes"], [14, 2, 1, "", "inputCols"], [14, 3, 1, "", "inputColsValidation"], [14, 3, 1, "", "isDefined"], [14, 3, 1, "", "isSet"], [14, 2, 1, "", "lazyAnnotator"], [14, 3, 1, "", "load"], [14, 2, 1, "", "majorityVoting"], [14, 2, 1, "", "mergeOverlapping"], [14, 2, 1, "", "name"], [14, 2, 1, "", "optionalInputAnnotatorTypes"], [14, 2, 1, "", "orderingFeatures"], [14, 2, 1, "", "outputAnnotatorType"], [14, 2, 1, "", "outputCol"], [14, 3, 1, "", "read"], [14, 3, 1, "", "save"], [14, 2, 1, "", "selectionStrategy"], [14, 3, 1, "", "set"], [14, 3, 1, "", "setApplyFilterBeforeMerge"], [14, 3, 1, "", "setAssertionSourcePrecedence"], [14, 3, 1, "", "setAssertionsConfidence"], [14, 3, 1, "", "setBlackList"], [14, 3, 1, "", "setCaseSensitive"], [14, 3, 1, "", "setDefaultConfidence"], [14, 3, 1, "", "setDenyList"], [14, 3, 1, "", "setForceInputTypeValidation"], [14, 3, 1, "", "setInputCols"], [14, 3, 1, "", "setLazyAnnotator"], [14, 3, 1, "", "setMajorityVoting"], [14, 3, 1, "", "setMergeOverlapping"], [14, 3, 1, "", "setOrderingFeatures"], [14, 3, 1, "", "setOutputCol"], [14, 3, 1, "", "setParamValue"], [14, 3, 1, "", "setParams"], [14, 3, 1, "", "setSelectionStrategy"], [14, 3, 1, "", "setSortByBegin"], [14, 3, 1, "", "setWhiteList"], [14, 2, 1, "", "skipLPInputColsValidation"], [14, 2, 1, "", "sortByBegin"], [14, 3, 1, "", "transform"], [14, 2, 1, "", "uid"], [14, 2, 1, "", "whiteList"], [14, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification": [[15, 1, 1, "", "BertForAssertionClassification"]], "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification": [[15, 2, 1, "", "blackList"], [15, 2, 1, "", "caseSensitive"], [15, 2, 1, "", "classificationCaseSensitive"], [15, 3, 1, "", "clear"], [15, 2, 1, "", "configProtoBytes"], [15, 3, 1, "", "copy"], [15, 2, 1, "", "engine"], [15, 3, 1, "", "explainParam"], [15, 3, 1, "", "explainParams"], [15, 3, 1, "", "extractParamMap"], [15, 3, 1, "", "getClasses"], [15, 3, 1, "", "getEngine"], [15, 3, 1, "", "getInputCols"], [15, 3, 1, "", "getLazyAnnotator"], [15, 3, 1, "", "getOrDefault"], [15, 3, 1, "", "getOutputCol"], [15, 3, 1, "", "getParam"], [15, 3, 1, "", "getParamValue"], [15, 2, 1, "", "getter_attrs"], [15, 3, 1, "", "hasDefault"], [15, 3, 1, "", "hasParam"], [15, 2, 1, "", "inputAnnotatorTypes"], [15, 2, 1, "", "inputCols"], [15, 3, 1, "", "inputColsValidation"], [15, 3, 1, "", "isDefined"], [15, 3, 1, "", "isSet"], [15, 2, 1, "", "lazyAnnotator"], [15, 3, 1, "", "load"], [15, 3, 1, "", "loadSavedModel"], [15, 2, 1, "", "name"], [15, 2, 1, "", "optionalInputAnnotatorTypes"], [15, 2, 1, "", "outputAnnotatorType"], [15, 2, 1, "", "outputCol"], [15, 3, 1, "", "pretrained"], [15, 3, 1, "", "read"], [15, 3, 1, "", "save"], [15, 3, 1, "", "set"], [15, 3, 1, "", "setBlackList"], [15, 3, 1, "", "setCaseSensitive"], [15, 3, 1, "", "setClassificationCaseSensitive"], [15, 3, 1, "", "setConfigProtoBytes"], [15, 3, 1, "", "setDenyList"], [15, 3, 1, "", "setForceInputTypeValidation"], [15, 3, 1, "", "setInputCols"], [15, 3, 1, "", "setLazyAnnotator"], [15, 3, 1, "", "setOutputCol"], [15, 3, 1, "", "setParamValue"], [15, 3, 1, "", "setParams"], [15, 3, 1, "", "setWhiteList"], [15, 2, 1, "", "skipLPInputColsValidation"], [15, 3, 1, "", "transform"], [15, 2, 1, "", "uid"], [15, 2, 1, "", "whiteList"], [15, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[16, 1, 1, "", "ContextualAssertion"]], "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion": [[16, 3, 1, "", "addPrefixKeywords"], [16, 3, 1, "", "addSuffixKeywords"], [16, 2, 1, "", "assertion"], [16, 2, 1, "", "caseSensitive"], [16, 3, 1, "", "clear"], [16, 2, 1, "", "confidenceCalculationDirection"], [16, 3, 1, "", "copy"], [16, 2, 1, "", "doExceptionHandling"], [16, 3, 1, "", "explainParam"], [16, 3, 1, "", "explainParams"], [16, 3, 1, "", "extractParamMap"], [16, 3, 1, "", "getInputCols"], [16, 3, 1, "", "getLazyAnnotator"], [16, 3, 1, "", "getOrDefault"], [16, 3, 1, "", "getOutputCol"], [16, 3, 1, "", "getParam"], [16, 3, 1, "", "getParamValue"], [16, 2, 1, "", "getter_attrs"], [16, 3, 1, "", "hasDefault"], [16, 3, 1, "", "hasParam"], [16, 2, 1, "", "includeChunkToScope"], [16, 2, 1, "", "inputAnnotatorTypes"], [16, 2, 1, "", "inputCols"], [16, 3, 1, "", "inputColsValidation"], [16, 3, 1, "", "isDefined"], [16, 3, 1, "", "isSet"], [16, 2, 1, "", "lazyAnnotator"], [16, 3, 1, "", "load"], [16, 2, 1, "", "name"], [16, 2, 1, "", "optionalInputAnnotatorTypes"], [16, 2, 1, "", "outputAnnotatorType"], [16, 2, 1, "", "outputCol"], [16, 2, 1, "", "prefixAndSuffixMatch"], [16, 3, 1, "", "pretrained"], [16, 3, 1, "", "read"], [16, 3, 1, "", "save"], [16, 2, 1, "", "scopeWindow"], [16, 2, 1, "", "scopeWindowDelimiters"], [16, 3, 1, "", "set"], [16, 3, 1, "", "setAssertion"], [16, 3, 1, "", "setCaseSensitive"], [16, 3, 1, "", "setConfidenceCalculationDirection"], [16, 3, 1, "", "setDoExceptionHandling"], [16, 3, 1, "", "setExceptionKeywords"], [16, 3, 1, "", "setExceptionRegexPatterns"], [16, 3, 1, "", "setForceInputTypeValidation"], [16, 3, 1, "", "setIncludeChunkToScope"], [16, 3, 1, "", "setInputCols"], [16, 3, 1, "", "setLazyAnnotator"], [16, 3, 1, "", "setOutputCol"], [16, 3, 1, "", "setParamValue"], [16, 3, 1, "", "setParams"], [16, 3, 1, "", "setPrefixAndSuffixMatch"], [16, 3, 1, "", "setPrefixKeywords"], [16, 3, 1, "", "setPrefixRegexPatterns"], [16, 3, 1, "", "setScopeWindow"], [16, 3, 1, "", "setScopeWindowDelimiters"], [16, 3, 1, "", "setSuffixKeywords"], [16, 3, 1, "", "setSuffixRegexPatterns"], [16, 2, 1, "", "skipLPInputColsValidation"], [16, 3, 1, "", "transform"], [16, 2, 1, "", "uid"], [16, 3, 1, "", "write"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[17, 1, 1, "", "FewShotAssertionSentenceConverter"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter": [[17, 3, 1, "", "clear"], [17, 3, 1, "", "copy"], [17, 3, 1, "", "explainParam"], [17, 3, 1, "", "explainParams"], [17, 3, 1, "", "extractParamMap"], [17, 3, 1, "", "getOrDefault"], [17, 3, 1, "", "getParam"], [17, 3, 1, "", "getParamValue"], [17, 2, 1, "", "getter_attrs"], [17, 3, 1, "", "hasDefault"], [17, 3, 1, "", "hasParam"], [17, 2, 1, "", "inputAnnotatorTypes"], [17, 2, 1, "", "inputCols"], [17, 3, 1, "", "isDefined"], [17, 3, 1, "", "isSet"], [17, 3, 1, "", "load"], [17, 2, 1, "", "name"], [17, 2, 1, "", "outputAnnotatorType"], [17, 2, 1, "", "outputCol"], [17, 3, 1, "", "read"], [17, 3, 1, "", "save"], [17, 2, 1, "", "scopeWindow"], [17, 3, 1, "", "set"], [17, 3, 1, "", "setParamValue"], [17, 3, 1, "", "setParams"], [17, 3, 1, "", "setScopeWindow"], [17, 3, 1, "", "transform"], [17, 2, 1, "", "uid"], [17, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunk2_token": [[19, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[19, 3, 1, "", "clear"], [19, 3, 1, "", "copy"], [19, 3, 1, "", "explainParam"], [19, 3, 1, "", "explainParams"], [19, 3, 1, "", "extractParamMap"], [19, 3, 1, "", "getInputCols"], [19, 3, 1, "", "getLazyAnnotator"], [19, 3, 1, "", "getOrDefault"], [19, 3, 1, "", "getOutputCol"], [19, 3, 1, "", "getParam"], [19, 3, 1, "", "getParamValue"], [19, 2, 1, "", "getter_attrs"], [19, 3, 1, "", "hasDefault"], [19, 3, 1, "", "hasParam"], [19, 2, 1, "", "inputAnnotatorTypes"], [19, 2, 1, "", "inputCols"], [19, 3, 1, "", "inputColsValidation"], [19, 3, 1, "", "isDefined"], [19, 3, 1, "", "isSet"], [19, 2, 1, "", "lazyAnnotator"], [19, 3, 1, "", "load"], [19, 2, 1, "", "name"], [19, 2, 1, "", "optionalInputAnnotatorTypes"], [19, 2, 1, "", "outputAnnotatorType"], [19, 2, 1, "", "outputCol"], [19, 3, 1, "", "read"], [19, 3, 1, "", "save"], [19, 3, 1, "", "set"], [19, 3, 1, "", "setForceInputTypeValidation"], [19, 3, 1, "", "setInputCols"], [19, 3, 1, "", "setLazyAnnotator"], [19, 3, 1, "", "setOutputCol"], [19, 3, 1, "", "setParamValue"], [19, 3, 1, "", "setParams"], [19, 2, 1, "", "skipLPInputColsValidation"], [19, 3, 1, "", "transform"], [19, 2, 1, "", "uid"], [19, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker": [[20, 0, 0, "-", "assertion_filterer"], [21, 0, 0, "-", "chunk_converter"], [22, 0, 0, "-", "chunk_key_phrase_extraction"], [23, 0, 0, "-", "chunk_sentence_splitter"], [24, 0, 0, "-", "chunker_filterer"], [25, 0, 0, "-", "chunkmapper"], [26, 0, 0, "-", "chunkmapper_filterer"], [27, 0, 0, "-", "docmapper"], [29, 0, 0, "-", "mapper2_chunk"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[20, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[20, 2, 1, "", "blackList"], [20, 2, 1, "", "caseSensitive"], [20, 3, 1, "", "clear"], [20, 3, 1, "", "copy"], [20, 2, 1, "", "criteria"], [20, 3, 1, "", "explainParam"], [20, 3, 1, "", "explainParams"], [20, 3, 1, "", "extractParamMap"], [20, 2, 1, "", "filterValue"], [20, 3, 1, "", "getInputCols"], [20, 3, 1, "", "getLazyAnnotator"], [20, 3, 1, "", "getOrDefault"], [20, 3, 1, "", "getOutputCol"], [20, 3, 1, "", "getParam"], [20, 3, 1, "", "getParamValue"], [20, 2, 1, "", "getter_attrs"], [20, 3, 1, "", "hasDefault"], [20, 3, 1, "", "hasParam"], [20, 2, 1, "", "inputAnnotatorTypes"], [20, 2, 1, "", "inputCols"], [20, 3, 1, "", "inputColsValidation"], [20, 3, 1, "", "isDefined"], [20, 3, 1, "", "isSet"], [20, 2, 1, "", "lazyAnnotator"], [20, 3, 1, "", "load"], [20, 2, 1, "", "name"], [20, 2, 1, "", "optionalInputAnnotatorTypes"], [20, 2, 1, "", "outputAnnotatorType"], [20, 2, 1, "", "outputCol"], [20, 3, 1, "", "read"], [20, 2, 1, "", "regex"], [20, 3, 1, "", "save"], [20, 3, 1, "", "set"], [20, 3, 1, "", "setBlackList"], [20, 3, 1, "", "setCaseSensitive"], [20, 3, 1, "", "setCriteria"], [20, 3, 1, "", "setDenyList"], [20, 3, 1, "", "setFilterValue"], [20, 3, 1, "", "setForceInputTypeValidation"], [20, 3, 1, "", "setInputCols"], [20, 3, 1, "", "setLazyAnnotator"], [20, 3, 1, "", "setOutputCol"], [20, 3, 1, "", "setParamValue"], [20, 3, 1, "", "setParams"], [20, 3, 1, "", "setRegex"], [20, 3, 1, "", "setWhiteList"], [20, 2, 1, "", "skipLPInputColsValidation"], [20, 3, 1, "", "transform"], [20, 2, 1, "", "uid"], [20, 2, 1, "", "whiteList"], [20, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[21, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[21, 2, 1, "", "allPossibleFieldsToStandardize"], [21, 3, 1, "", "clear"], [21, 3, 1, "", "copy"], [21, 3, 1, "", "explainParam"], [21, 3, 1, "", "explainParams"], [21, 3, 1, "", "extractParamMap"], [21, 3, 1, "", "getInputCols"], [21, 3, 1, "", "getLazyAnnotator"], [21, 3, 1, "", "getOrDefault"], [21, 3, 1, "", "getOutputCol"], [21, 3, 1, "", "getParam"], [21, 3, 1, "", "getParamValue"], [21, 2, 1, "", "getter_attrs"], [21, 3, 1, "", "hasDefault"], [21, 3, 1, "", "hasParam"], [21, 2, 1, "", "includeOutputColumn"], [21, 2, 1, "", "includeStandardField"], [21, 2, 1, "", "inputAnnotatorTypes"], [21, 2, 1, "", "inputCols"], [21, 3, 1, "", "inputColsValidation"], [21, 3, 1, "", "isDefined"], [21, 3, 1, "", "isSet"], [21, 2, 1, "", "lazyAnnotator"], [21, 3, 1, "", "load"], [21, 2, 1, "", "name"], [21, 2, 1, "", "optionalInputAnnotatorTypes"], [21, 2, 1, "", "outputAnnotatorType"], [21, 2, 1, "", "outputCol"], [21, 2, 1, "", "outputColumnKey"], [21, 3, 1, "", "read"], [21, 2, 1, "", "resetSentenceIndices"], [21, 3, 1, "", "save"], [21, 3, 1, "", "set"], [21, 3, 1, "", "setAllPossibleFieldsToStandardize"], [21, 3, 1, "", "setForceInputTypeValidation"], [21, 3, 1, "", "setIncludeOutputColumn"], [21, 3, 1, "", "setIncludeStandardField"], [21, 3, 1, "", "setInputCols"], [21, 3, 1, "", "setLazyAnnotator"], [21, 3, 1, "", "setOutputCol"], [21, 3, 1, "", "setOutputColumnKey"], [21, 3, 1, "", "setParamValue"], [21, 3, 1, "", "setParams"], [21, 3, 1, "", "setResetSentenceIndices"], [21, 3, 1, "", "setStandardFieldKey"], [21, 2, 1, "", "skipLPInputColsValidation"], [21, 2, 1, "", "standardFieldKey"], [21, 3, 1, "", "transform"], [21, 2, 1, "", "uid"], [21, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[22, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[22, 2, 1, "", "batchSize"], [22, 2, 1, "", "caseSensitive"], [22, 3, 1, "", "clear"], [22, 2, 1, "", "concatenateSentences"], [22, 2, 1, "", "configProtoBytes"], [22, 3, 1, "", "copy"], [22, 2, 1, "", "dimension"], [22, 2, 1, "", "divergence"], [22, 2, 1, "", "documentLevelProcessing"], [22, 2, 1, "", "dropPunctuation"], [22, 3, 1, "", "explainParam"], [22, 3, 1, "", "explainParams"], [22, 3, 1, "", "extractParamMap"], [22, 3, 1, "", "getBatchSize"], [22, 3, 1, "", "getCaseSensitive"], [22, 3, 1, "", "getDimension"], [22, 3, 1, "", "getInputCols"], [22, 3, 1, "", "getLazyAnnotator"], [22, 3, 1, "", "getOrDefault"], [22, 3, 1, "", "getOutputCol"], [22, 3, 1, "", "getParam"], [22, 3, 1, "", "getParamValue"], [22, 3, 1, "", "getStorageRef"], [22, 2, 1, "", "getter_attrs"], [22, 3, 1, "", "hasDefault"], [22, 3, 1, "", "hasParam"], [22, 2, 1, "", "inputAnnotatorTypes"], [22, 2, 1, "", "inputCols"], [22, 3, 1, "", "inputColsValidation"], [22, 3, 1, "", "isDefined"], [22, 2, 1, "", "isLong"], [22, 3, 1, "", "isSet"], [22, 2, 1, "", "lazyAnnotator"], [22, 3, 1, "", "load"], [22, 3, 1, "", "loadSavedModel"], [22, 2, 1, "", "name"], [22, 2, 1, "", "optionalInputAnnotatorTypes"], [22, 2, 1, "", "outputAnnotatorType"], [22, 2, 1, "", "outputCol"], [22, 3, 1, "", "pretrained"], [22, 3, 1, "", "read"], [22, 3, 1, "", "save"], [22, 2, 1, "", "selectMostDifferent"], [22, 3, 1, "", "set"], [22, 3, 1, "", "setBatchSize"], [22, 3, 1, "", "setCaseSensitive"], [22, 3, 1, "", "setConcatenateSentences"], [22, 3, 1, "", "setConfigProtoBytes"], [22, 3, 1, "", "setDimension"], [22, 3, 1, "", "setDivergence"], [22, 3, 1, "", "setDocumentLevelProcessing"], [22, 3, 1, "", "setDropPunctuation"], [22, 3, 1, "", "setInputCols"], [22, 3, 1, "", "setIsLong"], [22, 3, 1, "", "setLazyAnnotator"], [22, 3, 1, "", "setOutputCol"], [22, 3, 1, "", "setParamValue"], [22, 3, 1, "", "setParams"], [22, 3, 1, "", "setSelectMostDifferent"], [22, 3, 1, "", "setStorageRef"], [22, 3, 1, "", "setTopN"], [22, 2, 1, "", "storageRef"], [22, 2, 1, "", "topN"], [22, 3, 1, "", "transform"], [22, 2, 1, "", "uid"], [22, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[23, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[23, 3, 1, "", "clear"], [23, 3, 1, "", "copy"], [23, 2, 1, "", "defaultEntity"], [23, 3, 1, "", "explainParam"], [23, 3, 1, "", "explainParams"], [23, 3, 1, "", "extractParamMap"], [23, 3, 1, "", "getInputCols"], [23, 3, 1, "", "getLazyAnnotator"], [23, 3, 1, "", "getOrDefault"], [23, 3, 1, "", "getOutputCol"], [23, 3, 1, "", "getParam"], [23, 3, 1, "", "getParamValue"], [23, 2, 1, "", "getter_attrs"], [23, 2, 1, "", "groupBySentences"], [23, 3, 1, "", "hasDefault"], [23, 3, 1, "", "hasParam"], [23, 2, 1, "", "inputAnnotatorTypes"], [23, 2, 1, "", "inputCols"], [23, 3, 1, "", "inputColsValidation"], [23, 2, 1, "", "insertChunk"], [23, 3, 1, "", "isDefined"], [23, 3, 1, "", "isSet"], [23, 2, 1, "", "lazyAnnotator"], [23, 3, 1, "", "load"], [23, 2, 1, "", "name"], [23, 2, 1, "", "optionalInputAnnotatorTypes"], [23, 2, 1, "", "outputAnnotatorType"], [23, 2, 1, "", "outputCol"], [23, 3, 1, "", "read"], [23, 3, 1, "", "save"], [23, 3, 1, "", "set"], [23, 3, 1, "", "setDefaultEntity"], [23, 3, 1, "", "setForceInputTypeValidation"], [23, 3, 1, "", "setGroupBySentences"], [23, 3, 1, "", "setInputCols"], [23, 3, 1, "", "setInsertChunk"], [23, 3, 1, "", "setLazyAnnotator"], [23, 3, 1, "", "setOutputCol"], [23, 3, 1, "", "setParamValue"], [23, 3, 1, "", "setParams"], [23, 2, 1, "", "skipLPInputColsValidation"], [23, 3, 1, "", "transform"], [23, 2, 1, "", "uid"], [23, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[24, 1, 1, "", "ChunkFilterer"], [24, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[24, 2, 1, "", "blackList"], [24, 2, 1, "", "caseSensitive"], [24, 3, 1, "", "clear"], [24, 3, 1, "", "copy"], [24, 2, 1, "", "criteria"], [24, 2, 1, "", "entitiesConfidence"], [24, 3, 1, "", "explainParam"], [24, 3, 1, "", "explainParams"], [24, 3, 1, "", "extractParamMap"], [24, 2, 1, "", "filterValue"], [24, 3, 1, "", "getInputCols"], [24, 3, 1, "", "getLazyAnnotator"], [24, 3, 1, "", "getOrDefault"], [24, 3, 1, "", "getOutputCol"], [24, 3, 1, "", "getParam"], [24, 3, 1, "", "getParamValue"], [24, 2, 1, "", "getter_attrs"], [24, 3, 1, "", "hasDefault"], [24, 3, 1, "", "hasParam"], [24, 2, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "inputCols"], [24, 3, 1, "", "inputColsValidation"], [24, 3, 1, "", "isDefined"], [24, 3, 1, "", "isSet"], [24, 2, 1, "", "lazyAnnotator"], [24, 3, 1, "", "load"], [24, 2, 1, "", "name"], [24, 2, 1, "", "optionalInputAnnotatorTypes"], [24, 2, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "outputCol"], [24, 3, 1, "", "read"], [24, 2, 1, "", "regex"], [24, 3, 1, "", "save"], [24, 3, 1, "", "set"], [24, 3, 1, "", "setBlackList"], [24, 3, 1, "", "setCaseSensitive"], [24, 3, 1, "", "setCriteria"], [24, 3, 1, "", "setDenyList"], [24, 3, 1, "", "setEntitiesConfidence"], [24, 3, 1, "", "setFilterEntity"], [24, 3, 1, "", "setFilterValue"], [24, 3, 1, "", "setForceInputTypeValidation"], [24, 3, 1, "", "setInputCols"], [24, 3, 1, "", "setLazyAnnotator"], [24, 3, 1, "", "setOutputCol"], [24, 3, 1, "", "setParamValue"], [24, 3, 1, "", "setParams"], [24, 3, 1, "", "setRegex"], [24, 3, 1, "", "setWhiteList"], [24, 2, 1, "", "skipLPInputColsValidation"], [24, 3, 1, "", "transform"], [24, 2, 1, "", "uid"], [24, 2, 1, "", "whiteList"], [24, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[24, 2, 1, "", "blackList"], [24, 2, 1, "", "caseSensitive"], [24, 3, 1, "", "clear"], [24, 3, 1, "", "copy"], [24, 2, 1, "", "criteria"], [24, 2, 1, "", "doExceptionHandling"], [24, 2, 1, "", "entitiesConfidenceResource"], [24, 2, 1, "", "entitiesConfidenceResourceAsJsonString"], [24, 3, 1, "", "explainParam"], [24, 3, 1, "", "explainParams"], [24, 3, 1, "", "extractParamMap"], [24, 2, 1, "", "filterValue"], [24, 3, 1, "", "fit"], [24, 3, 1, "", "fitMultiple"], [24, 3, 1, "", "getInputCols"], [24, 3, 1, "", "getLazyAnnotator"], [24, 3, 1, "", "getOrDefault"], [24, 3, 1, "", "getOutputCol"], [24, 3, 1, "", "getParam"], [24, 3, 1, "", "getParamValue"], [24, 2, 1, "", "getter_attrs"], [24, 3, 1, "", "hasDefault"], [24, 3, 1, "", "hasParam"], [24, 2, 1, "", "inputAnnotatorTypes"], [24, 2, 1, "", "inputCols"], [24, 3, 1, "", "inputColsValidation"], [24, 3, 1, "", "isDefined"], [24, 3, 1, "", "isSet"], [24, 2, 1, "", "lazyAnnotator"], [24, 3, 1, "", "load"], [24, 2, 1, "", "name"], [24, 2, 1, "", "optionalInputAnnotatorTypes"], [24, 2, 1, "", "outputAnnotatorType"], [24, 2, 1, "", "outputCol"], [24, 3, 1, "", "read"], [24, 2, 1, "", "regex"], [24, 3, 1, "", "save"], [24, 3, 1, "", "set"], [24, 3, 1, "", "setBlackList"], [24, 3, 1, "", "setCaseSensitive"], [24, 3, 1, "", "setCriteria"], [24, 3, 1, "", "setDenyList"], [24, 3, 1, "", "setDoExceptionHandling"], [24, 3, 1, "", "setEntitiesConfidenceResource"], [24, 3, 1, "", "setEntitiesConfidenceResourceAsJsonString"], [24, 3, 1, "", "setFilterEntity"], [24, 3, 1, "", "setFilterValue"], [24, 3, 1, "", "setForceInputTypeValidation"], [24, 3, 1, "", "setInputCols"], [24, 3, 1, "", "setLazyAnnotator"], [24, 3, 1, "", "setOutputCol"], [24, 3, 1, "", "setParamValue"], [24, 3, 1, "", "setRegex"], [24, 3, 1, "", "setWhiteList"], [24, 2, 1, "", "skipLPInputColsValidation"], [24, 2, 1, "", "uid"], [24, 2, 1, "", "whiteList"], [24, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[25, 1, 1, "", "ChunkMapperApproach"], [25, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [25, 1, 1, "", "ChunkMapperModel"], [25, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[25, 2, 1, "", "allowMultiTokenChunk"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "copy"], [25, 2, 1, "", "dictionary"], [25, 2, 1, "", "doExceptionHandling"], [25, 2, 1, "", "enableCharFingerprintMatching"], [25, 2, 1, "", "enableFuzzyMatching"], [25, 2, 1, "", "enableTokenFingerprintMatching"], [25, 3, 1, "", "explainParam"], [25, 3, 1, "", "explainParams"], [25, 3, 1, "", "extractParamMap"], [25, 3, 1, "", "fit"], [25, 3, 1, "", "fitMultiple"], [25, 2, 1, "", "fuzzyDistanceScalingMode"], [25, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [25, 2, 1, "", "fuzzyMatchingDistances"], [25, 3, 1, "", "getInputCols"], [25, 3, 1, "", "getLazyAnnotator"], [25, 3, 1, "", "getOrDefault"], [25, 3, 1, "", "getOutputCol"], [25, 3, 1, "", "getParam"], [25, 3, 1, "", "getParamValue"], [25, 2, 1, "", "getter_attrs"], [25, 3, 1, "", "hasDefault"], [25, 3, 1, "", "hasParam"], [25, 2, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "inputCols"], [25, 3, 1, "", "inputColsValidation"], [25, 3, 1, "", "isDefined"], [25, 3, 1, "", "isSet"], [25, 2, 1, "", "lazyAnnotator"], [25, 3, 1, "", "load"], [25, 2, 1, "", "lowerCase"], [25, 2, 1, "", "maxCharNgramFingerprint"], [25, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [25, 2, 1, "", "maxTokenNgramDroppingOperator"], [25, 2, 1, "", "maxTokenNgramDroppingTokens"], [25, 2, 1, "", "maxTokenNgramFingerprint"], [25, 2, 1, "", "minCharNgramFingerprint"], [25, 2, 1, "", "minTokenNgramFingerprint"], [25, 2, 1, "", "multivaluesRelations"], [25, 2, 1, "", "name"], [25, 2, 1, "", "optionalInputAnnotatorTypes"], [25, 2, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "outputCol"], [25, 3, 1, "", "read"], [25, 2, 1, "", "rel"], [25, 2, 1, "", "rels"], [25, 3, 1, "", "save"], [25, 3, 1, "", "set"], [25, 3, 1, "", "setAllowMultiTokenChunk"], [25, 3, 1, "", "setDictionary"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setEnableCharFingerprintMatching"], [25, 3, 1, "", "setEnableFuzzyMatching"], [25, 3, 1, "", "setEnableTokenFingerprintMatching"], [25, 3, 1, "", "setForceInputTypeValidation"], [25, 3, 1, "", "setFuzzyDistanceScalingMode"], [25, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [25, 3, 1, "", "setFuzzyMatchingDistances"], [25, 3, 1, "", "setInputCols"], [25, 3, 1, "", "setLazyAnnotator"], [25, 3, 1, "", "setLowerCase"], [25, 3, 1, "", "setMaxCharNgramFingerprint"], [25, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [25, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [25, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [25, 3, 1, "", "setMaxTokenNgramFingerprint"], [25, 3, 1, "", "setMinCharNgramFingerprint"], [25, 3, 1, "", "setMinTokenNgramFingerprint"], [25, 3, 1, "", "setMultivaluesRelations"], [25, 3, 1, "", "setOutputCol"], [25, 3, 1, "", "setParamValue"], [25, 3, 1, "", "setRel"], [25, 3, 1, "", "setRels"], [25, 2, 1, "", "skipLPInputColsValidation"], [25, 2, 1, "", "uid"], [25, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[25, 2, 1, "", "enableCharFingerprintMatching"], [25, 2, 1, "", "enableFuzzyMatching"], [25, 2, 1, "", "enableTokenFingerprintMatching"], [25, 2, 1, "", "fuzzyDistanceScalingMode"], [25, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [25, 2, 1, "", "fuzzyMatchingDistances"], [25, 2, 1, "", "maxCharNgramFingerprint"], [25, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [25, 2, 1, "", "maxTokenNgramDroppingOperator"], [25, 2, 1, "", "maxTokenNgramDroppingTokens"], [25, 2, 1, "", "maxTokenNgramFingerprint"], [25, 2, 1, "", "minCharNgramFingerprint"], [25, 2, 1, "", "minTokenNgramFingerprint"], [25, 3, 1, "", "setEnableCharFingerprintMatching"], [25, 3, 1, "", "setEnableFuzzyMatching"], [25, 3, 1, "", "setEnableTokenFingerprintMatching"], [25, 3, 1, "", "setFuzzyDistanceScalingMode"], [25, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [25, 3, 1, "", "setFuzzyMatchingDistances"], [25, 3, 1, "", "setMaxCharNgramFingerprint"], [25, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [25, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [25, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [25, 3, 1, "", "setMaxTokenNgramFingerprint"], [25, 3, 1, "", "setMinCharNgramFingerprint"], [25, 3, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[25, 2, 1, "", "allowMultiTokenChunk"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "copy"], [25, 2, 1, "", "doExceptionHandling"], [25, 3, 1, "", "explainParam"], [25, 3, 1, "", "explainParams"], [25, 3, 1, "", "extractParamMap"], [25, 3, 1, "", "getInputCols"], [25, 3, 1, "", "getLazyAnnotator"], [25, 3, 1, "", "getOrDefault"], [25, 3, 1, "", "getOutputCol"], [25, 3, 1, "", "getParam"], [25, 3, 1, "", "getParamValue"], [25, 2, 1, "", "getter_attrs"], [25, 3, 1, "", "hasDefault"], [25, 3, 1, "", "hasParam"], [25, 2, 1, "", "inputAnnotatorTypes"], [25, 2, 1, "", "inputCols"], [25, 3, 1, "", "inputColsValidation"], [25, 3, 1, "", "isDefined"], [25, 3, 1, "", "isSet"], [25, 2, 1, "", "lazyAnnotator"], [25, 3, 1, "", "load"], [25, 2, 1, "", "lowerCase"], [25, 2, 1, "", "multivaluesRelations"], [25, 2, 1, "", "name"], [25, 2, 1, "", "optionalInputAnnotatorTypes"], [25, 2, 1, "", "outputAnnotatorType"], [25, 2, 1, "", "outputCol"], [25, 3, 1, "", "pretrained"], [25, 3, 1, "", "read"], [25, 2, 1, "", "rel"], [25, 2, 1, "", "rels"], [25, 3, 1, "", "save"], [25, 3, 1, "", "set"], [25, 3, 1, "", "setAllowMultiTokenChunk"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setForceInputTypeValidation"], [25, 3, 1, "", "setInputCols"], [25, 3, 1, "", "setLazyAnnotator"], [25, 3, 1, "", "setLowerCase"], [25, 3, 1, "", "setMultivaluesRelations"], [25, 3, 1, "", "setOutputCol"], [25, 3, 1, "", "setParamValue"], [25, 3, 1, "", "setParams"], [25, 3, 1, "", "setRel"], [25, 3, 1, "", "setRels"], [25, 2, 1, "", "skipLPInputColsValidation"], [25, 3, 1, "", "transform"], [25, 2, 1, "", "uid"], [25, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[25, 2, 1, "", "allowMultiTokenChunk"], [25, 2, 1, "", "doExceptionHandling"], [25, 2, 1, "", "lowerCase"], [25, 2, 1, "", "multivaluesRelations"], [25, 2, 1, "", "rel"], [25, 2, 1, "", "rels"], [25, 3, 1, "", "setAllowMultiTokenChunk"], [25, 3, 1, "", "setDoExceptionHandling"], [25, 3, 1, "", "setLowerCase"], [25, 3, 1, "", "setMultivaluesRelations"], [25, 3, 1, "", "setRel"], [25, 3, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[26, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[26, 2, 1, "", "blackList"], [26, 2, 1, "", "caseSensitive"], [26, 3, 1, "", "clear"], [26, 3, 1, "", "copy"], [26, 3, 1, "", "explainParam"], [26, 3, 1, "", "explainParams"], [26, 3, 1, "", "extractParamMap"], [26, 3, 1, "", "getInputCols"], [26, 3, 1, "", "getLazyAnnotator"], [26, 3, 1, "", "getOrDefault"], [26, 3, 1, "", "getOutputCol"], [26, 3, 1, "", "getParam"], [26, 3, 1, "", "getParamValue"], [26, 2, 1, "", "getter_attrs"], [26, 3, 1, "", "hasDefault"], [26, 3, 1, "", "hasParam"], [26, 2, 1, "", "inputAnnotatorTypes"], [26, 2, 1, "", "inputCols"], [26, 3, 1, "", "inputColsValidation"], [26, 3, 1, "", "isDefined"], [26, 3, 1, "", "isSet"], [26, 2, 1, "", "lazyAnnotator"], [26, 3, 1, "", "load"], [26, 2, 1, "", "name"], [26, 2, 1, "", "optionalInputAnnotatorTypes"], [26, 2, 1, "", "outputAnnotatorType"], [26, 2, 1, "", "outputCol"], [26, 3, 1, "", "read"], [26, 2, 1, "", "returnCriteria"], [26, 3, 1, "", "save"], [26, 3, 1, "", "set"], [26, 3, 1, "", "setBlackList"], [26, 3, 1, "", "setCaseSensitive"], [26, 3, 1, "", "setDenyList"], [26, 3, 1, "", "setForceInputTypeValidation"], [26, 3, 1, "", "setInputCols"], [26, 3, 1, "", "setLazyAnnotator"], [26, 3, 1, "", "setOutputCol"], [26, 3, 1, "", "setParamValue"], [26, 3, 1, "", "setParams"], [26, 3, 1, "", "setReturnCriteria"], [26, 3, 1, "", "setWhiteList"], [26, 2, 1, "", "skipLPInputColsValidation"], [26, 3, 1, "", "transform"], [26, 2, 1, "", "uid"], [26, 2, 1, "", "whiteList"], [26, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.docmapper": [[27, 1, 1, "", "DocMapperApproach"], [27, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[27, 2, 1, "", "allowMultiTokenChunk"], [27, 3, 1, "", "clear"], [27, 3, 1, "", "copy"], [27, 2, 1, "", "dictionary"], [27, 2, 1, "", "doExceptionHandling"], [27, 2, 1, "", "enableCharFingerprintMatching"], [27, 2, 1, "", "enableFuzzyMatching"], [27, 2, 1, "", "enableTokenFingerprintMatching"], [27, 3, 1, "", "explainParam"], [27, 3, 1, "", "explainParams"], [27, 3, 1, "", "extractParamMap"], [27, 3, 1, "", "fit"], [27, 3, 1, "", "fitMultiple"], [27, 2, 1, "", "fuzzyDistanceScalingMode"], [27, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [27, 2, 1, "", "fuzzyMatchingDistances"], [27, 3, 1, "", "getInputCols"], [27, 3, 1, "", "getLazyAnnotator"], [27, 3, 1, "", "getOrDefault"], [27, 3, 1, "", "getOutputCol"], [27, 3, 1, "", "getParam"], [27, 3, 1, "", "getParamValue"], [27, 2, 1, "", "getter_attrs"], [27, 3, 1, "", "hasDefault"], [27, 3, 1, "", "hasParam"], [27, 2, 1, "", "inputAnnotatorTypes"], [27, 2, 1, "", "inputCols"], [27, 3, 1, "", "inputColsValidation"], [27, 3, 1, "", "isDefined"], [27, 3, 1, "", "isSet"], [27, 2, 1, "", "lazyAnnotator"], [27, 3, 1, "", "load"], [27, 2, 1, "", "lowerCase"], [27, 2, 1, "", "maxCharNgramFingerprint"], [27, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [27, 2, 1, "", "maxTokenNgramDroppingOperator"], [27, 2, 1, "", "maxTokenNgramDroppingTokens"], [27, 2, 1, "", "maxTokenNgramFingerprint"], [27, 2, 1, "", "minCharNgramFingerprint"], [27, 2, 1, "", "minTokenNgramFingerprint"], [27, 2, 1, "", "multivaluesRelations"], [27, 2, 1, "", "name"], [27, 2, 1, "", "optionalInputAnnotatorTypes"], [27, 2, 1, "", "outputAnnotatorType"], [27, 2, 1, "", "outputCol"], [27, 3, 1, "", "read"], [27, 2, 1, "", "rel"], [27, 2, 1, "", "rels"], [27, 3, 1, "", "save"], [27, 3, 1, "", "set"], [27, 3, 1, "", "setAllowMultiTokenChunk"], [27, 3, 1, "", "setDictionary"], [27, 3, 1, "", "setDoExceptionHandling"], [27, 3, 1, "", "setEnableCharFingerprintMatching"], [27, 3, 1, "", "setEnableFuzzyMatching"], [27, 3, 1, "", "setEnableTokenFingerprintMatching"], [27, 3, 1, "", "setForceInputTypeValidation"], [27, 3, 1, "", "setFuzzyDistanceScalingMode"], [27, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [27, 3, 1, "", "setFuzzyMatchingDistances"], [27, 3, 1, "", "setInputCols"], [27, 3, 1, "", "setLazyAnnotator"], [27, 3, 1, "", "setLowerCase"], [27, 3, 1, "", "setMaxCharNgramFingerprint"], [27, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [27, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [27, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [27, 3, 1, "", "setMaxTokenNgramFingerprint"], [27, 3, 1, "", "setMinCharNgramFingerprint"], [27, 3, 1, "", "setMinTokenNgramFingerprint"], [27, 3, 1, "", "setMultivaluesRelations"], [27, 3, 1, "", "setOutputCol"], [27, 3, 1, "", "setParamValue"], [27, 3, 1, "", "setRel"], [27, 3, 1, "", "setRels"], [27, 2, 1, "", "skipLPInputColsValidation"], [27, 2, 1, "", "uid"], [27, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[27, 2, 1, "", "allowMultiTokenChunk"], [27, 3, 1, "", "clear"], [27, 3, 1, "", "copy"], [27, 2, 1, "", "doExceptionHandling"], [27, 3, 1, "", "explainParam"], [27, 3, 1, "", "explainParams"], [27, 3, 1, "", "extractParamMap"], [27, 3, 1, "", "getInputCols"], [27, 3, 1, "", "getLazyAnnotator"], [27, 3, 1, "", "getOrDefault"], [27, 3, 1, "", "getOutputCol"], [27, 3, 1, "", "getParam"], [27, 3, 1, "", "getParamValue"], [27, 2, 1, "", "getter_attrs"], [27, 3, 1, "", "hasDefault"], [27, 3, 1, "", "hasParam"], [27, 2, 1, "", "inputAnnotatorTypes"], [27, 2, 1, "", "inputCols"], [27, 3, 1, "", "inputColsValidation"], [27, 3, 1, "", "isDefined"], [27, 3, 1, "", "isSet"], [27, 2, 1, "", "lazyAnnotator"], [27, 3, 1, "", "load"], [27, 2, 1, "", "lowerCase"], [27, 2, 1, "", "multivaluesRelations"], [27, 2, 1, "", "name"], [27, 2, 1, "", "optionalInputAnnotatorTypes"], [27, 2, 1, "", "outputAnnotatorType"], [27, 2, 1, "", "outputCol"], [27, 3, 1, "", "pretrained"], [27, 3, 1, "", "read"], [27, 2, 1, "", "rel"], [27, 2, 1, "", "rels"], [27, 3, 1, "", "save"], [27, 3, 1, "", "set"], [27, 3, 1, "", "setAllowMultiTokenChunk"], [27, 3, 1, "", "setDoExceptionHandling"], [27, 3, 1, "", "setForceInputTypeValidation"], [27, 3, 1, "", "setInputCols"], [27, 3, 1, "", "setLazyAnnotator"], [27, 3, 1, "", "setLowerCase"], [27, 3, 1, "", "setMultivaluesRelations"], [27, 3, 1, "", "setOutputCol"], [27, 3, 1, "", "setParamValue"], [27, 3, 1, "", "setParams"], [27, 3, 1, "", "setRel"], [27, 3, 1, "", "setRels"], [27, 2, 1, "", "skipLPInputColsValidation"], [27, 3, 1, "", "transform"], [27, 2, 1, "", "uid"], [27, 3, 1, "", "write"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[29, 1, 1, "", "Mapper2Chunk"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk": [[29, 3, 1, "", "clear"], [29, 3, 1, "", "copy"], [29, 3, 1, "", "explainParam"], [29, 3, 1, "", "explainParams"], [29, 3, 1, "", "extractParamMap"], [29, 2, 1, "", "filterNoneValues"], [29, 3, 1, "", "getOrDefault"], [29, 3, 1, "", "getParam"], [29, 3, 1, "", "getParamValue"], [29, 2, 1, "", "getter_attrs"], [29, 3, 1, "", "hasDefault"], [29, 3, 1, "", "hasParam"], [29, 2, 1, "", "inputAnnotatorTypes"], [29, 3, 1, "", "isDefined"], [29, 3, 1, "", "isSet"], [29, 3, 1, "", "load"], [29, 2, 1, "", "name"], [29, 2, 1, "", "outputAnnotatorType"], [29, 3, 1, "", "read"], [29, 3, 1, "", "save"], [29, 3, 1, "", "set"], [29, 3, 1, "", "setFilterNoneValues"], [29, 3, 1, "", "setParamValue"], [29, 3, 1, "", "setParams"], [29, 3, 1, "", "transform"], [29, 2, 1, "", "uid"], [29, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification": [[30, 0, 0, "-", "document_log_classifier"], [31, 0, 0, "-", "document_ml_classifier"], [32, 0, 0, "-", "few_shot_assertion_classifier"], [33, 0, 0, "-", "few_shot_classifier"], [34, 0, 0, "-", "generic_log_reg_classifier"], [35, 0, 0, "-", "generic_svm_classifier"], [37, 0, 0, "-", "large_few_shot_classifier"], [38, 0, 0, "-", "medical_bert_for_sequence_classification"], [39, 0, 0, "-", "medical_bert_for_token_classifier"], [40, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[30, 1, 1, "", "DocumentLogRegClassifierApproach"], [30, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[30, 2, 1, "", "classificationModelPath"], [30, 3, 1, "", "clear"], [30, 3, 1, "", "copy"], [30, 3, 1, "", "explainParam"], [30, 3, 1, "", "explainParams"], [30, 3, 1, "", "extractParamMap"], [30, 3, 1, "", "fit"], [30, 2, 1, "", "fitIntercept"], [30, 3, 1, "", "fitMultiple"], [30, 3, 1, "", "getInputCols"], [30, 3, 1, "", "getLazyAnnotator"], [30, 3, 1, "", "getOrDefault"], [30, 3, 1, "", "getOutputCol"], [30, 3, 1, "", "getParam"], [30, 3, 1, "", "getParamValue"], [30, 2, 1, "", "getter_attrs"], [30, 3, 1, "", "hasDefault"], [30, 3, 1, "", "hasParam"], [30, 2, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "inputCols"], [30, 3, 1, "", "inputColsValidation"], [30, 3, 1, "", "isDefined"], [30, 3, 1, "", "isSet"], [30, 2, 1, "", "labelCol"], [30, 2, 1, "", "labels"], [30, 2, 1, "", "lazyAnnotator"], [30, 3, 1, "", "load"], [30, 2, 1, "", "maxIter"], [30, 2, 1, "", "optionalInputAnnotatorTypes"], [30, 2, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "outputCol"], [30, 3, 1, "", "read"], [30, 3, 1, "", "save"], [30, 3, 1, "", "set"], [30, 3, 1, "", "setClassificationModelPath"], [30, 3, 1, "", "setFitIntercept"], [30, 3, 1, "", "setForceInputTypeValidation"], [30, 3, 1, "", "setInputCols"], [30, 3, 1, "", "setLabelColumn"], [30, 3, 1, "", "setLabels"], [30, 3, 1, "", "setLazyAnnotator"], [30, 3, 1, "", "setMaxIter"], [30, 3, 1, "", "setOutputCol"], [30, 3, 1, "", "setParamValue"], [30, 3, 1, "", "setTol"], [30, 3, 1, "", "setVectorizationModelPath"], [30, 2, 1, "", "skipLPInputColsValidation"], [30, 2, 1, "", "tol"], [30, 2, 1, "", "uid"], [30, 2, 1, "", "vectorizationModelPath"], [30, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[30, 2, 1, "", "classificationModel"], [30, 3, 1, "", "clear"], [30, 3, 1, "", "copy"], [30, 3, 1, "", "explainParam"], [30, 3, 1, "", "explainParams"], [30, 3, 1, "", "extractParamMap"], [30, 3, 1, "", "getInputCols"], [30, 3, 1, "", "getLazyAnnotator"], [30, 3, 1, "", "getOrDefault"], [30, 3, 1, "", "getOutputCol"], [30, 3, 1, "", "getParam"], [30, 3, 1, "", "getParamValue"], [30, 2, 1, "", "getter_attrs"], [30, 3, 1, "", "hasDefault"], [30, 3, 1, "", "hasParam"], [30, 2, 1, "", "inputAnnotatorTypes"], [30, 2, 1, "", "inputCols"], [30, 3, 1, "", "inputColsValidation"], [30, 3, 1, "", "isDefined"], [30, 3, 1, "", "isSet"], [30, 2, 1, "", "labels"], [30, 2, 1, "", "lazyAnnotator"], [30, 3, 1, "", "load"], [30, 2, 1, "", "mergeChunks"], [30, 2, 1, "", "name"], [30, 2, 1, "", "optionalInputAnnotatorTypes"], [30, 2, 1, "", "outputAnnotatorType"], [30, 2, 1, "", "outputCol"], [30, 3, 1, "", "pretrained"], [30, 3, 1, "", "read"], [30, 3, 1, "", "save"], [30, 3, 1, "", "set"], [30, 3, 1, "", "setClassificationModel"], [30, 3, 1, "", "setForceInputTypeValidation"], [30, 3, 1, "", "setInputCols"], [30, 3, 1, "", "setLabels"], [30, 3, 1, "", "setLazyAnnotator"], [30, 3, 1, "", "setMergeChunks"], [30, 3, 1, "", "setOutputCol"], [30, 3, 1, "", "setParamValue"], [30, 3, 1, "", "setParams"], [30, 3, 1, "", "setVectorizationModel"], [30, 2, 1, "", "skipLPInputColsValidation"], [30, 3, 1, "", "transform"], [30, 2, 1, "", "uid"], [30, 2, 1, "", "vectorizationModel"], [30, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[31, 1, 1, "", "DocumentMLClassifierApproach"], [31, 1, 1, "", "DocumentMLClassifierModel"], [31, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[31, 2, 1, "", "classificationModelClass"], [31, 2, 1, "", "classificationModelPath"], [31, 3, 1, "", "clear"], [31, 3, 1, "", "copy"], [31, 3, 1, "", "explainParam"], [31, 3, 1, "", "explainParams"], [31, 3, 1, "", "extractParamMap"], [31, 3, 1, "", "fit"], [31, 2, 1, "", "fitIntercept"], [31, 3, 1, "", "fitMultiple"], [31, 3, 1, "", "getInputCols"], [31, 3, 1, "", "getLazyAnnotator"], [31, 3, 1, "", "getOrDefault"], [31, 3, 1, "", "getOutputCol"], [31, 3, 1, "", "getParam"], [31, 3, 1, "", "getParamValue"], [31, 2, 1, "", "getter_attrs"], [31, 3, 1, "", "hasDefault"], [31, 3, 1, "", "hasParam"], [31, 2, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "inputCols"], [31, 3, 1, "", "inputColsValidation"], [31, 3, 1, "", "isDefined"], [31, 3, 1, "", "isSet"], [31, 2, 1, "", "labelCol"], [31, 2, 1, "", "labels"], [31, 2, 1, "", "lazyAnnotator"], [31, 3, 1, "", "load"], [31, 2, 1, "", "maxIter"], [31, 2, 1, "", "maxTokenNgram"], [31, 2, 1, "", "mergeChunks"], [31, 2, 1, "", "minTokenNgram"], [31, 2, 1, "", "optionalInputAnnotatorTypes"], [31, 2, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "outputCol"], [31, 3, 1, "", "read"], [31, 3, 1, "", "save"], [31, 3, 1, "", "set"], [31, 3, 1, "", "setClassificationModelClass"], [31, 3, 1, "", "setClassificationModelPath"], [31, 3, 1, "", "setFitIntercept"], [31, 3, 1, "", "setForceInputTypeValidation"], [31, 3, 1, "", "setInputCols"], [31, 3, 1, "", "setLabelCol"], [31, 3, 1, "", "setLabels"], [31, 3, 1, "", "setLazyAnnotator"], [31, 3, 1, "", "setMaxIter"], [31, 3, 1, "", "setMaxTokenNgram"], [31, 3, 1, "", "setMergeChunks"], [31, 3, 1, "", "setMinTokenNgram"], [31, 3, 1, "", "setOutputCol"], [31, 3, 1, "", "setParamValue"], [31, 3, 1, "", "setTol"], [31, 3, 1, "", "setVectorizationModelPath"], [31, 2, 1, "", "skipLPInputColsValidation"], [31, 2, 1, "", "tol"], [31, 2, 1, "", "uid"], [31, 2, 1, "", "vectorizationModelPath"], [31, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[31, 2, 1, "", "classificationModel"], [31, 3, 1, "", "clear"], [31, 3, 1, "", "copy"], [31, 3, 1, "", "explainParam"], [31, 3, 1, "", "explainParams"], [31, 3, 1, "", "extractParamMap"], [31, 3, 1, "", "getInputCols"], [31, 3, 1, "", "getLazyAnnotator"], [31, 3, 1, "", "getOrDefault"], [31, 3, 1, "", "getOutputCol"], [31, 3, 1, "", "getParam"], [31, 3, 1, "", "getParamValue"], [31, 2, 1, "", "getter_attrs"], [31, 3, 1, "", "hasDefault"], [31, 3, 1, "", "hasParam"], [31, 2, 1, "", "inputAnnotatorTypes"], [31, 2, 1, "", "inputCols"], [31, 3, 1, "", "inputColsValidation"], [31, 3, 1, "", "isDefined"], [31, 3, 1, "", "isSet"], [31, 2, 1, "", "labels"], [31, 2, 1, "", "lazyAnnotator"], [31, 3, 1, "", "load"], [31, 2, 1, "", "maxTokenNgram"], [31, 2, 1, "", "mergeChunks"], [31, 2, 1, "", "minTokenNgram"], [31, 2, 1, "", "name"], [31, 2, 1, "", "optionalInputAnnotatorTypes"], [31, 2, 1, "", "outputAnnotatorType"], [31, 2, 1, "", "outputCol"], [31, 3, 1, "", "pretrained"], [31, 3, 1, "", "read"], [31, 3, 1, "", "save"], [31, 3, 1, "", "set"], [31, 3, 1, "", "setClassificationModel"], [31, 3, 1, "", "setForceInputTypeValidation"], [31, 3, 1, "", "setInputCols"], [31, 3, 1, "", "setLabels"], [31, 3, 1, "", "setLazyAnnotator"], [31, 3, 1, "", "setMergeChunks"], [31, 3, 1, "", "setOutputCol"], [31, 3, 1, "", "setParamValue"], [31, 3, 1, "", "setParams"], [31, 3, 1, "", "setVectorizationModel"], [31, 2, 1, "", "skipLPInputColsValidation"], [31, 3, 1, "", "transform"], [31, 2, 1, "", "uid"], [31, 2, 1, "", "vectorizationModel"], [31, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[31, 2, 1, "", "labels"], [31, 2, 1, "", "maxTokenNgram"], [31, 2, 1, "", "mergeChunks"], [31, 2, 1, "", "minTokenNgram"], [31, 3, 1, "", "setLabels"], [31, 3, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[32, 1, 1, "", "FewShotAssertionClassifierApproach"], [32, 1, 1, "", "FewShotAssertionClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach": [[32, 2, 1, "", "batchSize"], [32, 2, 1, "", "blackList"], [32, 2, 1, "", "caseSensitive"], [32, 3, 1, "", "clear"], [32, 3, 1, "", "copy"], [32, 2, 1, "", "datasetInfo"], [32, 2, 1, "", "doExceptionHandling"], [32, 2, 1, "", "dropout"], [32, 2, 1, "", "engine"], [32, 2, 1, "", "epochsN"], [32, 3, 1, "", "explainParam"], [32, 3, 1, "", "explainParams"], [32, 3, 1, "", "extractParamMap"], [32, 2, 1, "", "featureScaling"], [32, 3, 1, "", "fit"], [32, 3, 1, "", "fitMultiple"], [32, 2, 1, "", "fixImbalance"], [32, 3, 1, "", "getEngine"], [32, 3, 1, "", "getInputCols"], [32, 3, 1, "", "getLazyAnnotator"], [32, 3, 1, "", "getOrDefault"], [32, 3, 1, "", "getOutputCol"], [32, 3, 1, "", "getParam"], [32, 3, 1, "", "getParamValue"], [32, 2, 1, "", "getter_attrs"], [32, 3, 1, "", "hasDefault"], [32, 3, 1, "", "hasParam"], [32, 2, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "inputCols"], [32, 3, 1, "", "inputColsValidation"], [32, 3, 1, "", "isDefined"], [32, 3, 1, "", "isSet"], [32, 2, 1, "", "labelColumn"], [32, 2, 1, "", "lazyAnnotator"], [32, 2, 1, "", "learningRate"], [32, 3, 1, "", "load"], [32, 2, 1, "", "modelFile"], [32, 2, 1, "", "multiClass"], [32, 2, 1, "", "name"], [32, 2, 1, "", "optionalInputAnnotatorTypes"], [32, 2, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "outputCol"], [32, 2, 1, "", "outputLogsPath"], [32, 3, 1, "", "read"], [32, 3, 1, "", "save"], [32, 3, 1, "", "set"], [32, 3, 1, "", "setBatchSize"], [32, 3, 1, "", "setBlackList"], [32, 3, 1, "", "setCaseSensitive"], [32, 3, 1, "", "setDatasetInfo"], [32, 3, 1, "", "setDenyList"], [32, 3, 1, "", "setDoExceptionHandling"], [32, 3, 1, "", "setDropout"], [32, 3, 1, "", "setEpochsNumber"], [32, 3, 1, "", "setFeatureScaling"], [32, 3, 1, "", "setFixImbalance"], [32, 3, 1, "", "setForceInputTypeValidation"], [32, 3, 1, "", "setInputCols"], [32, 3, 1, "", "setLabelCol"], [32, 3, 1, "", "setLazyAnnotator"], [32, 3, 1, "", "setLearningRate"], [32, 3, 1, "", "setModelFile"], [32, 3, 1, "", "setMultiClass"], [32, 3, 1, "", "setOutputCol"], [32, 3, 1, "", "setOutputLogsPath"], [32, 3, 1, "", "setParamValue"], [32, 3, 1, "", "setValidationSplit"], [32, 3, 1, "", "setWhiteList"], [32, 2, 1, "", "skipLPInputColsValidation"], [32, 2, 1, "", "uid"], [32, 2, 1, "", "validationSplit"], [32, 2, 1, "", "whiteList"], [32, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel": [[32, 2, 1, "", "classes"], [32, 3, 1, "", "clear"], [32, 3, 1, "", "copy"], [32, 2, 1, "", "datasetInfo"], [32, 2, 1, "", "doExceptionHandling"], [32, 3, 1, "", "explainParam"], [32, 3, 1, "", "explainParams"], [32, 3, 1, "", "extractParamMap"], [32, 2, 1, "", "featureScaling"], [32, 3, 1, "", "getInputCols"], [32, 3, 1, "", "getLazyAnnotator"], [32, 3, 1, "", "getOrDefault"], [32, 3, 1, "", "getOutputCol"], [32, 3, 1, "", "getParam"], [32, 3, 1, "", "getParamValue"], [32, 2, 1, "", "getter_attrs"], [32, 3, 1, "", "hasDefault"], [32, 3, 1, "", "hasParam"], [32, 2, 1, "", "inputAnnotatorTypes"], [32, 2, 1, "", "inputCols"], [32, 3, 1, "", "inputColsValidation"], [32, 3, 1, "", "isDefined"], [32, 3, 1, "", "isSet"], [32, 2, 1, "", "lazyAnnotator"], [32, 3, 1, "", "load"], [32, 3, 1, "", "loadSavedModel"], [32, 2, 1, "", "multiClass"], [32, 2, 1, "", "name"], [32, 2, 1, "", "optionalInputAnnotatorTypes"], [32, 2, 1, "", "outputAnnotatorType"], [32, 2, 1, "", "outputCol"], [32, 3, 1, "", "pretrained"], [32, 3, 1, "", "read"], [32, 3, 1, "", "save"], [32, 3, 1, "", "set"], [32, 3, 1, "", "setDatasetInfo"], [32, 3, 1, "", "setDoExceptionHandling"], [32, 3, 1, "", "setFeatureScaling"], [32, 3, 1, "", "setForceInputTypeValidation"], [32, 3, 1, "", "setInputCols"], [32, 3, 1, "", "setLazyAnnotator"], [32, 3, 1, "", "setMultiClass"], [32, 3, 1, "", "setOutputCol"], [32, 3, 1, "", "setParamValue"], [32, 3, 1, "", "setParams"], [32, 2, 1, "", "skipLPInputColsValidation"], [32, 3, 1, "", "transform"], [32, 2, 1, "", "uid"], [32, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[33, 1, 1, "", "FewShotClassifierApproach"], [33, 1, 1, "", "FewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach": [[33, 2, 1, "", "batchSize"], [33, 3, 1, "", "clear"], [33, 3, 1, "", "copy"], [33, 2, 1, "", "datasetInfo"], [33, 2, 1, "", "doExceptionHandling"], [33, 2, 1, "", "dropout"], [33, 2, 1, "", "engine"], [33, 2, 1, "", "epochsN"], [33, 3, 1, "", "explainParam"], [33, 3, 1, "", "explainParams"], [33, 3, 1, "", "extractParamMap"], [33, 2, 1, "", "featureScaling"], [33, 3, 1, "", "fit"], [33, 3, 1, "", "fitMultiple"], [33, 2, 1, "", "fixImbalance"], [33, 3, 1, "", "getEngine"], [33, 3, 1, "", "getInputCols"], [33, 3, 1, "", "getLazyAnnotator"], [33, 3, 1, "", "getOrDefault"], [33, 3, 1, "", "getOutputCol"], [33, 3, 1, "", "getParam"], [33, 3, 1, "", "getParamValue"], [33, 2, 1, "", "getter_attrs"], [33, 3, 1, "", "hasDefault"], [33, 3, 1, "", "hasParam"], [33, 2, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "inputCols"], [33, 3, 1, "", "inputColsValidation"], [33, 3, 1, "", "isDefined"], [33, 3, 1, "", "isSet"], [33, 2, 1, "", "labelColumn"], [33, 2, 1, "", "lazyAnnotator"], [33, 2, 1, "", "learningRate"], [33, 3, 1, "", "load"], [33, 2, 1, "", "modelFile"], [33, 2, 1, "", "multiClass"], [33, 2, 1, "", "name"], [33, 2, 1, "", "optionalInputAnnotatorTypes"], [33, 2, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "outputCol"], [33, 2, 1, "", "outputLogsPath"], [33, 3, 1, "", "read"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set"], [33, 3, 1, "", "setBatchSize"], [33, 3, 1, "", "setDatasetInfo"], [33, 3, 1, "", "setDoExceptionHandling"], [33, 3, 1, "", "setDropout"], [33, 3, 1, "", "setEpochsNumber"], [33, 3, 1, "", "setFeatureScaling"], [33, 3, 1, "", "setFixImbalance"], [33, 3, 1, "", "setForceInputTypeValidation"], [33, 3, 1, "", "setInputCols"], [33, 3, 1, "", "setLabelCol"], [33, 3, 1, "", "setLazyAnnotator"], [33, 3, 1, "", "setLearningRate"], [33, 3, 1, "", "setModelFile"], [33, 3, 1, "", "setMultiClass"], [33, 3, 1, "", "setOutputCol"], [33, 3, 1, "", "setOutputLogsPath"], [33, 3, 1, "", "setParamValue"], [33, 3, 1, "", "setValidationSplit"], [33, 2, 1, "", "skipLPInputColsValidation"], [33, 2, 1, "", "uid"], [33, 2, 1, "", "validationSplit"], [33, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel": [[33, 2, 1, "", "classes"], [33, 3, 1, "", "clear"], [33, 3, 1, "", "copy"], [33, 2, 1, "", "datasetInfo"], [33, 2, 1, "", "doExceptionHandling"], [33, 3, 1, "", "explainParam"], [33, 3, 1, "", "explainParams"], [33, 3, 1, "", "extractParamMap"], [33, 2, 1, "", "featureScaling"], [33, 3, 1, "", "getInputCols"], [33, 3, 1, "", "getLazyAnnotator"], [33, 3, 1, "", "getOrDefault"], [33, 3, 1, "", "getOutputCol"], [33, 3, 1, "", "getParam"], [33, 3, 1, "", "getParamValue"], [33, 2, 1, "", "getter_attrs"], [33, 3, 1, "", "hasDefault"], [33, 3, 1, "", "hasParam"], [33, 2, 1, "", "inputAnnotatorTypes"], [33, 2, 1, "", "inputCols"], [33, 3, 1, "", "inputColsValidation"], [33, 3, 1, "", "isDefined"], [33, 3, 1, "", "isSet"], [33, 2, 1, "", "lazyAnnotator"], [33, 3, 1, "", "load"], [33, 2, 1, "", "multiClass"], [33, 2, 1, "", "name"], [33, 2, 1, "", "optionalInputAnnotatorTypes"], [33, 2, 1, "", "outputAnnotatorType"], [33, 2, 1, "", "outputCol"], [33, 3, 1, "", "pretrained"], [33, 3, 1, "", "read"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set"], [33, 3, 1, "", "setDatasetInfo"], [33, 3, 1, "", "setDoExceptionHandling"], [33, 3, 1, "", "setFeatureScaling"], [33, 3, 1, "", "setForceInputTypeValidation"], [33, 3, 1, "", "setInputCols"], [33, 3, 1, "", "setLazyAnnotator"], [33, 3, 1, "", "setMultiClass"], [33, 3, 1, "", "setOutputCol"], [33, 3, 1, "", "setParamValue"], [33, 3, 1, "", "setParams"], [33, 2, 1, "", "skipLPInputColsValidation"], [33, 3, 1, "", "transform"], [33, 2, 1, "", "uid"], [33, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[34, 1, 1, "", "GenericLogRegClassifierApproach"], [34, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[34, 2, 1, "", "batchSize"], [34, 3, 1, "", "clear"], [34, 3, 1, "", "copy"], [34, 2, 1, "", "datasetInfo"], [34, 2, 1, "", "doExceptionHandling"], [34, 2, 1, "", "dropout"], [34, 2, 1, "", "engine"], [34, 2, 1, "", "epochsN"], [34, 3, 1, "", "explainParam"], [34, 3, 1, "", "explainParams"], [34, 3, 1, "", "extractParamMap"], [34, 2, 1, "", "featureScaling"], [34, 3, 1, "", "fit"], [34, 3, 1, "", "fitMultiple"], [34, 2, 1, "", "fixImbalance"], [34, 3, 1, "", "getEngine"], [34, 3, 1, "", "getInputCols"], [34, 3, 1, "", "getLazyAnnotator"], [34, 3, 1, "", "getOrDefault"], [34, 3, 1, "", "getOutputCol"], [34, 3, 1, "", "getParam"], [34, 3, 1, "", "getParamValue"], [34, 2, 1, "", "getter_attrs"], [34, 3, 1, "", "hasDefault"], [34, 3, 1, "", "hasParam"], [34, 2, 1, "", "inputAnnotatorTypes"], [34, 2, 1, "", "inputCols"], [34, 3, 1, "", "inputColsValidation"], [34, 3, 1, "", "isDefined"], [34, 3, 1, "", "isSet"], [34, 2, 1, "", "labelColumn"], [34, 2, 1, "", "lazyAnnotator"], [34, 2, 1, "", "learningRate"], [34, 3, 1, "", "load"], [34, 2, 1, "", "modelFile"], [34, 2, 1, "", "multiClass"], [34, 2, 1, "", "name"], [34, 2, 1, "", "optionalInputAnnotatorTypes"], [34, 2, 1, "", "outputAnnotatorType"], [34, 2, 1, "", "outputCol"], [34, 2, 1, "", "outputLogsPath"], [34, 3, 1, "", "read"], [34, 3, 1, "", "save"], [34, 3, 1, "", "set"], [34, 3, 1, "", "setBatchSize"], [34, 3, 1, "", "setDatasetInfo"], [34, 3, 1, "", "setDoExceptionHandling"], [34, 3, 1, "", "setDropout"], [34, 3, 1, "", "setEpochsNumber"], [34, 3, 1, "", "setFeatureScaling"], [34, 3, 1, "", "setFixImbalance"], [34, 3, 1, "", "setForceInputTypeValidation"], [34, 3, 1, "", "setInputCols"], [34, 3, 1, "", "setLabelCol"], [34, 3, 1, "", "setLazyAnnotator"], [34, 3, 1, "", "setLearningRate"], [34, 3, 1, "", "setModelFile"], [34, 3, 1, "", "setMultiClass"], [34, 3, 1, "", "setOutputCol"], [34, 3, 1, "", "setOutputLogsPath"], [34, 3, 1, "", "setParamValue"], [34, 3, 1, "", "setValidationSplit"], [34, 2, 1, "", "skipLPInputColsValidation"], [34, 2, 1, "", "uid"], [34, 2, 1, "", "validationSplit"], [34, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[34, 2, 1, "", "classes"], [34, 3, 1, "", "clear"], [34, 3, 1, "", "copy"], [34, 2, 1, "", "datasetInfo"], [34, 2, 1, "", "doExceptionHandling"], [34, 3, 1, "", "explainParam"], [34, 3, 1, "", "explainParams"], [34, 3, 1, "", "extractParamMap"], [34, 2, 1, "", "featureScaling"], [34, 3, 1, "", "getInputCols"], [34, 3, 1, "", "getLazyAnnotator"], [34, 3, 1, "", "getOrDefault"], [34, 3, 1, "", "getOutputCol"], [34, 3, 1, "", "getParam"], [34, 3, 1, "", "getParamValue"], [34, 2, 1, "", "getter_attrs"], [34, 3, 1, "", "hasDefault"], [34, 3, 1, "", "hasParam"], [34, 2, 1, "", "inputAnnotatorTypes"], [34, 2, 1, "", "inputCols"], [34, 3, 1, "", "inputColsValidation"], [34, 3, 1, "", "isDefined"], [34, 3, 1, "", "isSet"], [34, 2, 1, "", "lazyAnnotator"], [34, 3, 1, "", "load"], [34, 2, 1, "", "multiClass"], [34, 2, 1, "", "name"], [34, 2, 1, "", "optionalInputAnnotatorTypes"], [34, 2, 1, "", "outputAnnotatorType"], [34, 2, 1, "", "outputCol"], [34, 3, 1, "", "pretrained"], [34, 3, 1, "", "read"], [34, 3, 1, "", "save"], [34, 3, 1, "", "set"], [34, 3, 1, "", "setDatasetInfo"], [34, 3, 1, "", "setDoExceptionHandling"], [34, 3, 1, "", "setFeatureScaling"], [34, 3, 1, "", "setForceInputTypeValidation"], [34, 3, 1, "", "setInputCols"], [34, 3, 1, "", "setLazyAnnotator"], [34, 3, 1, "", "setMultiClass"], [34, 3, 1, "", "setOutputCol"], [34, 3, 1, "", "setParamValue"], [34, 3, 1, "", "setParams"], [34, 2, 1, "", "skipLPInputColsValidation"], [34, 3, 1, "", "transform"], [34, 2, 1, "", "uid"], [34, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[35, 1, 1, "", "GenericSVMClassifierApproach"], [35, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[35, 2, 1, "", "batchSize"], [35, 3, 1, "", "clear"], [35, 3, 1, "", "copy"], [35, 2, 1, "", "datasetInfo"], [35, 2, 1, "", "doExceptionHandling"], [35, 2, 1, "", "dropout"], [35, 2, 1, "", "engine"], [35, 2, 1, "", "epochsN"], [35, 3, 1, "", "explainParam"], [35, 3, 1, "", "explainParams"], [35, 3, 1, "", "extractParamMap"], [35, 2, 1, "", "featureScaling"], [35, 3, 1, "", "fit"], [35, 3, 1, "", "fitMultiple"], [35, 2, 1, "", "fixImbalance"], [35, 3, 1, "", "getEngine"], [35, 3, 1, "", "getInputCols"], [35, 3, 1, "", "getLazyAnnotator"], [35, 3, 1, "", "getOrDefault"], [35, 3, 1, "", "getOutputCol"], [35, 3, 1, "", "getParam"], [35, 3, 1, "", "getParamValue"], [35, 2, 1, "", "getter_attrs"], [35, 3, 1, "", "hasDefault"], [35, 3, 1, "", "hasParam"], [35, 2, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "inputCols"], [35, 3, 1, "", "inputColsValidation"], [35, 3, 1, "", "isDefined"], [35, 3, 1, "", "isSet"], [35, 2, 1, "", "labelColumn"], [35, 2, 1, "", "lazyAnnotator"], [35, 2, 1, "", "learningRate"], [35, 3, 1, "", "load"], [35, 2, 1, "", "modelFile"], [35, 2, 1, "", "multiClass"], [35, 2, 1, "", "name"], [35, 2, 1, "", "optionalInputAnnotatorTypes"], [35, 2, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "outputCol"], [35, 2, 1, "", "outputLogsPath"], [35, 3, 1, "", "read"], [35, 3, 1, "", "save"], [35, 3, 1, "", "set"], [35, 3, 1, "", "setBatchSize"], [35, 3, 1, "", "setDatasetInfo"], [35, 3, 1, "", "setDoExceptionHandling"], [35, 3, 1, "", "setDropout"], [35, 3, 1, "", "setEpochsNumber"], [35, 3, 1, "", "setFeatureScaling"], [35, 3, 1, "", "setFixImbalance"], [35, 3, 1, "", "setForceInputTypeValidation"], [35, 3, 1, "", "setInputCols"], [35, 3, 1, "", "setLabelCol"], [35, 3, 1, "", "setLazyAnnotator"], [35, 3, 1, "", "setLearningRate"], [35, 3, 1, "", "setModelFile"], [35, 3, 1, "", "setMultiClass"], [35, 3, 1, "", "setOutputCol"], [35, 3, 1, "", "setOutputLogsPath"], [35, 3, 1, "", "setParamValue"], [35, 3, 1, "", "setValidationSplit"], [35, 2, 1, "", "skipLPInputColsValidation"], [35, 2, 1, "", "uid"], [35, 2, 1, "", "validationSplit"], [35, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[35, 2, 1, "", "classes"], [35, 3, 1, "", "clear"], [35, 3, 1, "", "copy"], [35, 2, 1, "", "datasetInfo"], [35, 2, 1, "", "doExceptionHandling"], [35, 3, 1, "", "explainParam"], [35, 3, 1, "", "explainParams"], [35, 3, 1, "", "extractParamMap"], [35, 2, 1, "", "featureScaling"], [35, 3, 1, "", "getInputCols"], [35, 3, 1, "", "getLazyAnnotator"], [35, 3, 1, "", "getOrDefault"], [35, 3, 1, "", "getOutputCol"], [35, 3, 1, "", "getParam"], [35, 3, 1, "", "getParamValue"], [35, 2, 1, "", "getter_attrs"], [35, 3, 1, "", "hasDefault"], [35, 3, 1, "", "hasParam"], [35, 2, 1, "", "inputAnnotatorTypes"], [35, 2, 1, "", "inputCols"], [35, 3, 1, "", "inputColsValidation"], [35, 3, 1, "", "isDefined"], [35, 3, 1, "", "isSet"], [35, 2, 1, "", "lazyAnnotator"], [35, 3, 1, "", "load"], [35, 2, 1, "", "multiClass"], [35, 2, 1, "", "name"], [35, 2, 1, "", "optionalInputAnnotatorTypes"], [35, 2, 1, "", "outputAnnotatorType"], [35, 2, 1, "", "outputCol"], [35, 3, 1, "", "pretrained"], [35, 3, 1, "", "read"], [35, 3, 1, "", "save"], [35, 3, 1, "", "set"], [35, 3, 1, "", "setDatasetInfo"], [35, 3, 1, "", "setDoExceptionHandling"], [35, 3, 1, "", "setFeatureScaling"], [35, 3, 1, "", "setForceInputTypeValidation"], [35, 3, 1, "", "setInputCols"], [35, 3, 1, "", "setLazyAnnotator"], [35, 3, 1, "", "setMultiClass"], [35, 3, 1, "", "setOutputCol"], [35, 3, 1, "", "setParamValue"], [35, 3, 1, "", "setParams"], [35, 2, 1, "", "skipLPInputColsValidation"], [35, 3, 1, "", "transform"], [35, 2, 1, "", "uid"], [35, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[37, 1, 1, "", "LargeFewShotClassifierModel"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel": [[37, 2, 1, "", "caseSensitive"], [37, 3, 1, "", "clear"], [37, 3, 1, "", "copy"], [37, 3, 1, "", "explainParam"], [37, 3, 1, "", "explainParams"], [37, 3, 1, "", "extractParamMap"], [37, 3, 1, "", "getCaseSensitive"], [37, 3, 1, "", "getClasses"], [37, 3, 1, "", "getInputCols"], [37, 3, 1, "", "getLazyAnnotator"], [37, 3, 1, "", "getOrDefault"], [37, 3, 1, "", "getOutputCol"], [37, 3, 1, "", "getParam"], [37, 3, 1, "", "getParamValue"], [37, 2, 1, "", "getter_attrs"], [37, 3, 1, "", "hasDefault"], [37, 2, 1, "", "hasDifferentiableHead"], [37, 3, 1, "", "hasParam"], [37, 2, 1, "", "inputAnnotatorTypes"], [37, 2, 1, "", "inputCols"], [37, 3, 1, "", "inputColsValidation"], [37, 3, 1, "", "isDefined"], [37, 3, 1, "", "isSet"], [37, 2, 1, "", "lazyAnnotator"], [37, 3, 1, "", "load"], [37, 3, 1, "", "loadSavedModel"], [37, 2, 1, "", "modelArchitecture"], [37, 2, 1, "", "name"], [37, 2, 1, "", "optionalInputAnnotatorTypes"], [37, 2, 1, "", "outputAnnotatorType"], [37, 2, 1, "", "outputCol"], [37, 3, 1, "", "pretrained"], [37, 3, 1, "", "read"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set"], [37, 3, 1, "", "setCaseSensitive"], [37, 3, 1, "", "setForceInputTypeValidation"], [37, 3, 1, "", "setInputCols"], [37, 3, 1, "", "setLazyAnnotator"], [37, 3, 1, "", "setOutputCol"], [37, 3, 1, "", "setParamValue"], [37, 3, 1, "", "setParams"], [37, 2, 1, "", "skipLPInputColsValidation"], [37, 3, 1, "", "transform"], [37, 2, 1, "", "uid"], [37, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[38, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[38, 2, 1, "", "caseSensitive"], [38, 3, 1, "", "clear"], [38, 2, 1, "", "coalesceSentences"], [38, 2, 1, "", "configProtoBytes"], [38, 3, 1, "", "copy"], [38, 3, 1, "", "explainParam"], [38, 3, 1, "", "explainParams"], [38, 3, 1, "", "extractParamMap"], [38, 3, 1, "", "getCaseSensitive"], [38, 3, 1, "", "getClasses"], [38, 3, 1, "", "getInputCols"], [38, 3, 1, "", "getLazyAnnotator"], [38, 3, 1, "", "getOrDefault"], [38, 3, 1, "", "getOutputCol"], [38, 3, 1, "", "getParam"], [38, 3, 1, "", "getParamValue"], [38, 2, 1, "", "getter_attrs"], [38, 3, 1, "", "hasDefault"], [38, 3, 1, "", "hasParam"], [38, 2, 1, "", "inputAnnotatorTypes"], [38, 2, 1, "", "inputCols"], [38, 3, 1, "", "inputColsValidation"], [38, 3, 1, "", "isDefined"], [38, 3, 1, "", "isSet"], [38, 2, 1, "", "lazyAnnotator"], [38, 3, 1, "", "load"], [38, 3, 1, "", "loadSavedModel"], [38, 3, 1, "", "loadSavedModelOpenSource"], [38, 2, 1, "", "maxSentenceLength"], [38, 2, 1, "", "name"], [38, 2, 1, "", "optionalInputAnnotatorTypes"], [38, 2, 1, "", "outputAnnotatorType"], [38, 2, 1, "", "outputCol"], [38, 3, 1, "", "pretrained"], [38, 3, 1, "", "read"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set"], [38, 3, 1, "", "setCaseSensitive"], [38, 3, 1, "", "setCoalesceSentences"], [38, 3, 1, "", "setConfigProtoBytes"], [38, 3, 1, "", "setForceInputTypeValidation"], [38, 3, 1, "", "setInputCols"], [38, 3, 1, "", "setLazyAnnotator"], [38, 3, 1, "", "setMaxSentenceLength"], [38, 3, 1, "", "setOutputCol"], [38, 3, 1, "", "setParamValue"], [38, 3, 1, "", "setParams"], [38, 2, 1, "", "skipLPInputColsValidation"], [38, 3, 1, "", "transform"], [38, 2, 1, "", "uid"], [38, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[39, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[39, 2, 1, "", "caseSensitive"], [39, 3, 1, "", "clear"], [39, 2, 1, "", "configProtoBytes"], [39, 3, 1, "", "copy"], [39, 3, 1, "", "explainParam"], [39, 3, 1, "", "explainParams"], [39, 3, 1, "", "extractParamMap"], [39, 3, 1, "", "getCaseSensitive"], [39, 3, 1, "", "getClasses"], [39, 3, 1, "", "getInputCols"], [39, 3, 1, "", "getLazyAnnotator"], [39, 3, 1, "", "getOrDefault"], [39, 3, 1, "", "getOutputCol"], [39, 3, 1, "", "getParam"], [39, 3, 1, "", "getParamValue"], [39, 2, 1, "", "getter_attrs"], [39, 3, 1, "", "hasDefault"], [39, 3, 1, "", "hasParam"], [39, 2, 1, "", "inputAnnotatorTypes"], [39, 2, 1, "", "inputCols"], [39, 3, 1, "", "inputColsValidation"], [39, 3, 1, "", "isDefined"], [39, 3, 1, "", "isSet"], [39, 2, 1, "", "lazyAnnotator"], [39, 3, 1, "", "load"], [39, 3, 1, "", "loadSavedModel"], [39, 3, 1, "", "loadSavedModelOpenSource"], [39, 2, 1, "", "maxSentenceLength"], [39, 2, 1, "", "name"], [39, 2, 1, "", "optionalInputAnnotatorTypes"], [39, 2, 1, "", "outputAnnotatorType"], [39, 2, 1, "", "outputCol"], [39, 3, 1, "", "pretrained"], [39, 3, 1, "", "read"], [39, 3, 1, "", "save"], [39, 3, 1, "", "set"], [39, 3, 1, "", "setCaseSensitive"], [39, 3, 1, "", "setConfigProtoBytes"], [39, 3, 1, "", "setForceInputTypeValidation"], [39, 3, 1, "", "setInputCols"], [39, 3, 1, "", "setLazyAnnotator"], [39, 3, 1, "", "setMaxSentenceLength"], [39, 3, 1, "", "setOutputCol"], [39, 3, 1, "", "setParamValue"], [39, 3, 1, "", "setParams"], [39, 2, 1, "", "skipLPInputColsValidation"], [39, 3, 1, "", "transform"], [39, 2, 1, "", "uid"], [39, 3, 1, "", "write"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[40, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[40, 2, 1, "", "caseSensitive"], [40, 3, 1, "", "clear"], [40, 2, 1, "", "coalesceSentences"], [40, 2, 1, "", "configProtoBytes"], [40, 3, 1, "", "copy"], [40, 3, 1, "", "explainParam"], [40, 3, 1, "", "explainParams"], [40, 3, 1, "", "extractParamMap"], [40, 3, 1, "", "getCaseSensitive"], [40, 3, 1, "", "getClasses"], [40, 3, 1, "", "getInputCols"], [40, 3, 1, "", "getLazyAnnotator"], [40, 3, 1, "", "getOrDefault"], [40, 3, 1, "", "getOutputCol"], [40, 3, 1, "", "getParam"], [40, 3, 1, "", "getParamValue"], [40, 2, 1, "", "getter_attrs"], [40, 3, 1, "", "hasDefault"], [40, 3, 1, "", "hasParam"], [40, 2, 1, "", "inputAnnotatorTypes"], [40, 2, 1, "", "inputCols"], [40, 3, 1, "", "inputColsValidation"], [40, 3, 1, "", "isDefined"], [40, 3, 1, "", "isSet"], [40, 2, 1, "", "lazyAnnotator"], [40, 3, 1, "", "load"], [40, 3, 1, "", "loadSavedModel"], [40, 3, 1, "", "loadSavedModelOpenSource"], [40, 2, 1, "", "maxSentenceLength"], [40, 2, 1, "", "name"], [40, 2, 1, "", "optionalInputAnnotatorTypes"], [40, 2, 1, "", "outputAnnotatorType"], [40, 2, 1, "", "outputCol"], [40, 3, 1, "", "pretrained"], [40, 3, 1, "", "read"], [40, 3, 1, "", "save"], [40, 3, 1, "", "set"], [40, 3, 1, "", "setCaseSensitive"], [40, 3, 1, "", "setCoalesceSentences"], [40, 3, 1, "", "setConfigProtoBytes"], [40, 3, 1, "", "setForceInputTypeValidation"], [40, 3, 1, "", "setInputCols"], [40, 3, 1, "", "setLazyAnnotator"], [40, 3, 1, "", "setMaxSentenceLength"], [40, 3, 1, "", "setOutputCol"], [40, 3, 1, "", "setParamValue"], [40, 3, 1, "", "setParams"], [40, 2, 1, "", "skipLPInputColsValidation"], [40, 3, 1, "", "transform"], [40, 2, 1, "", "uid"], [40, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context": [[41, 0, 0, "-", "contextual_entity_filterer"], [42, 0, 0, "-", "contextual_entity_ruler"], [43, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_entity_filterer": [[41, 1, 1, "", "ContextualEntityFilterer"]], "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer": [[41, 2, 1, "", "caseSensitive"], [41, 3, 1, "", "clear"], [41, 3, 1, "", "copy"], [41, 2, 1, "", "doExceptionHandling"], [41, 3, 1, "", "explainParam"], [41, 3, 1, "", "explainParams"], [41, 3, 1, "", "extractParamMap"], [41, 3, 1, "", "getInputCols"], [41, 3, 1, "", "getLazyAnnotator"], [41, 3, 1, "", "getOrDefault"], [41, 3, 1, "", "getOutputCol"], [41, 3, 1, "", "getParam"], [41, 3, 1, "", "getParamValue"], [41, 2, 1, "", "getter_attrs"], [41, 3, 1, "", "hasDefault"], [41, 3, 1, "", "hasParam"], [41, 2, 1, "", "inputAnnotatorTypes"], [41, 2, 1, "", "inputCols"], [41, 3, 1, "", "inputColsValidation"], [41, 3, 1, "", "isDefined"], [41, 3, 1, "", "isSet"], [41, 2, 1, "", "lazyAnnotator"], [41, 3, 1, "", "load"], [41, 2, 1, "", "name"], [41, 2, 1, "", "optionalInputAnnotatorTypes"], [41, 2, 1, "", "outputAnnotatorType"], [41, 2, 1, "", "outputCol"], [41, 3, 1, "", "read"], [41, 2, 1, "", "ruleScope"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set"], [41, 3, 1, "", "setCaseSensitive"], [41, 3, 1, "", "setDoExceptionHandling"], [41, 3, 1, "", "setForceInputTypeValidation"], [41, 3, 1, "", "setInputCols"], [41, 3, 1, "", "setLazyAnnotator"], [41, 3, 1, "", "setOutputCol"], [41, 3, 1, "", "setParamValue"], [41, 3, 1, "", "setParams"], [41, 3, 1, "", "setRuleScope"], [41, 3, 1, "", "setRules"], [41, 3, 1, "", "setRulesAsStr"], [41, 2, 1, "", "skipLPInputColsValidation"], [41, 3, 1, "", "transform"], [41, 2, 1, "", "uid"], [41, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context.contextual_entity_ruler": [[42, 1, 1, "", "ContextualEntityRuler"]], "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler": [[42, 2, 1, "", "allowPunctuationInBetween"], [42, 2, 1, "", "allowTokensInBetween"], [42, 2, 1, "", "caseSensitive"], [42, 3, 1, "", "clear"], [42, 3, 1, "", "copy"], [42, 2, 1, "", "doExceptionHandling"], [42, 2, 1, "", "dropEmptyChunks"], [42, 3, 1, "", "explainParam"], [42, 3, 1, "", "explainParams"], [42, 3, 1, "", "extractParamMap"], [42, 3, 1, "", "getInputCols"], [42, 3, 1, "", "getLazyAnnotator"], [42, 3, 1, "", "getOrDefault"], [42, 3, 1, "", "getOutputCol"], [42, 3, 1, "", "getParam"], [42, 3, 1, "", "getParamValue"], [42, 2, 1, "", "getter_attrs"], [42, 3, 1, "", "hasDefault"], [42, 3, 1, "", "hasParam"], [42, 2, 1, "", "inputAnnotatorTypes"], [42, 2, 1, "", "inputCols"], [42, 3, 1, "", "inputColsValidation"], [42, 3, 1, "", "isDefined"], [42, 3, 1, "", "isSet"], [42, 2, 1, "", "lazyAnnotator"], [42, 3, 1, "", "load"], [42, 2, 1, "", "mergeOverlapping"], [42, 2, 1, "", "name"], [42, 2, 1, "", "optionalInputAnnotatorTypes"], [42, 2, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "outputCol"], [42, 3, 1, "", "read"], [42, 3, 1, "", "save"], [42, 3, 1, "", "set"], [42, 3, 1, "", "setAllowPunctuationInBetween"], [42, 3, 1, "", "setAllowTokensInBetween"], [42, 3, 1, "", "setCaseSensitive"], [42, 3, 1, "", "setDoExceptionHandling"], [42, 3, 1, "", "setDropEmptyEntities"], [42, 3, 1, "", "setForceInputTypeValidation"], [42, 3, 1, "", "setInputCols"], [42, 3, 1, "", "setLazyAnnotator"], [42, 3, 1, "", "setMergeOverlapping"], [42, 3, 1, "", "setOutputCol"], [42, 3, 1, "", "setParamValue"], [42, 3, 1, "", "setParams"], [42, 3, 1, "", "setRules"], [42, 3, 1, "", "setRulesAsStr"], [42, 2, 1, "", "skipLPInputColsValidation"], [42, 3, 1, "", "transform"], [42, 2, 1, "", "uid"], [42, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context.contextual_parser": [[43, 1, 1, "", "ContextualParserApproach"], [43, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[43, 2, 1, "", "caseSensitive"], [43, 3, 1, "", "clear"], [43, 2, 1, "", "completeContextMatch"], [43, 3, 1, "", "copy"], [43, 2, 1, "", "dictionary"], [43, 2, 1, "", "doExceptionHandling"], [43, 3, 1, "", "explainParam"], [43, 3, 1, "", "explainParams"], [43, 3, 1, "", "extractParamMap"], [43, 3, 1, "", "fit"], [43, 3, 1, "", "fitMultiple"], [43, 3, 1, "", "getInputCols"], [43, 3, 1, "", "getLazyAnnotator"], [43, 3, 1, "", "getOrDefault"], [43, 3, 1, "", "getOutputCol"], [43, 3, 1, "", "getParam"], [43, 3, 1, "", "getParamValue"], [43, 2, 1, "", "getter_attrs"], [43, 3, 1, "", "hasDefault"], [43, 3, 1, "", "hasParam"], [43, 2, 1, "", "inputAnnotatorTypes"], [43, 2, 1, "", "inputCols"], [43, 3, 1, "", "inputColsValidation"], [43, 3, 1, "", "isDefined"], [43, 3, 1, "", "isSet"], [43, 2, 1, "", "jsonPath"], [43, 2, 1, "", "lazyAnnotator"], [43, 3, 1, "", "load"], [43, 2, 1, "", "optionalContextRules"], [43, 2, 1, "", "optionalInputAnnotatorTypes"], [43, 2, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "outputCol"], [43, 2, 1, "", "prefixAndSuffixMatch"], [43, 3, 1, "", "read"], [43, 3, 1, "", "save"], [43, 3, 1, "", "set"], [43, 3, 1, "", "setCaseSensitive"], [43, 3, 1, "", "setCompleteContextMatch"], [43, 3, 1, "", "setDictionary"], [43, 3, 1, "", "setDoExceptionHandling"], [43, 3, 1, "", "setForceInputTypeValidation"], [43, 3, 1, "", "setInputCols"], [43, 3, 1, "", "setJsonPath"], [43, 3, 1, "", "setLazyAnnotator"], [43, 3, 1, "", "setOptionalContextRules"], [43, 3, 1, "", "setOutputCol"], [43, 3, 1, "", "setParamValue"], [43, 3, 1, "", "setPrefixAndSuffixMatch"], [43, 3, 1, "", "setShortestContextMatch"], [43, 2, 1, "", "shortestContextMatch"], [43, 2, 1, "", "skipLPInputColsValidation"], [43, 2, 1, "", "uid"], [43, 3, 1, "", "write"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[43, 2, 1, "", "caseSensitive"], [43, 3, 1, "", "clear"], [43, 3, 1, "", "copy"], [43, 2, 1, "", "doExceptionHandling"], [43, 3, 1, "", "explainParam"], [43, 3, 1, "", "explainParams"], [43, 3, 1, "", "extractParamMap"], [43, 3, 1, "", "getInputCols"], [43, 3, 1, "", "getLazyAnnotator"], [43, 3, 1, "", "getOrDefault"], [43, 3, 1, "", "getOutputCol"], [43, 3, 1, "", "getParam"], [43, 3, 1, "", "getParamValue"], [43, 2, 1, "", "getter_attrs"], [43, 3, 1, "", "hasDefault"], [43, 3, 1, "", "hasParam"], [43, 2, 1, "", "inputAnnotatorTypes"], [43, 2, 1, "", "inputCols"], [43, 3, 1, "", "inputColsValidation"], [43, 3, 1, "", "isDefined"], [43, 3, 1, "", "isSet"], [43, 2, 1, "", "lazyAnnotator"], [43, 3, 1, "", "load"], [43, 2, 1, "", "name"], [43, 2, 1, "", "optionalContextRules"], [43, 2, 1, "", "optionalInputAnnotatorTypes"], [43, 2, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "outputCol"], [43, 2, 1, "", "prefixAndSuffixMatch"], [43, 3, 1, "", "pretrained"], [43, 3, 1, "", "read"], [43, 3, 1, "", "save"], [43, 3, 1, "", "set"], [43, 3, 1, "", "setCaseSensitive"], [43, 3, 1, "", "setDoExceptionHandling"], [43, 3, 1, "", "setForceInputTypeValidation"], [43, 3, 1, "", "setInputCols"], [43, 3, 1, "", "setLazyAnnotator"], [43, 3, 1, "", "setOptionalContextRules"], [43, 3, 1, "", "setOutputCol"], [43, 3, 1, "", "setParamValue"], [43, 3, 1, "", "setParams"], [43, 3, 1, "", "setPrefixAndSuffixMatch"], [43, 3, 1, "", "setShortestContextMatch"], [43, 2, 1, "", "shortestContextMatch"], [43, 2, 1, "", "skipLPInputColsValidation"], [43, 3, 1, "", "transform"], [43, 2, 1, "", "uid"], [43, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid": [[45, 0, 0, "-", "base_deidentification_params"], [46, 0, 0, "-", "deIdentification"], [47, 0, 0, "-", "deidentication_params"], [48, 0, 0, "-", "doccument_hashcoder"], [50, 0, 0, "-", "light_deIdentification"], [51, 0, 0, "-", "name_obfuscator"], [52, 0, 0, "-", "reIdentification"], [53, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.base_deidentification_params": [[45, 1, 1, "", "BaseDeIdentificationParams"]], "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams": [[45, 2, 1, "", "additionalDateFormats"], [45, 2, 1, "", "ageRanges"], [45, 2, 1, "", "ageRangesByHipaa"], [45, 2, 1, "", "consistentAcrossNameParts"], [45, 2, 1, "", "countryObfuscation"], [45, 2, 1, "", "dateEntities"], [45, 2, 1, "", "dateFormats"], [45, 2, 1, "", "days"], [45, 2, 1, "", "enableDefaultObfuscationEquivalents"], [45, 2, 1, "", "fakerLengthOffset"], [45, 2, 1, "", "fixedMaskLength"], [45, 2, 1, "", "genderAwareness"], [45, 2, 1, "", "geoConsistency"], [45, 3, 1, "", "getDefaultObfuscationEquivalents"], [45, 3, 1, "", "getSelectiveObfuscateRefSource"], [45, 2, 1, "", "keepMonth"], [45, 2, 1, "", "keepTextSizeForObfuscation"], [45, 2, 1, "", "keepYear"], [45, 2, 1, "", "language"], [45, 2, 1, "", "maskingPolicy"], [45, 2, 1, "", "mode"], [45, 2, 1, "", "obfuscateDate"], [45, 2, 1, "", "obfuscateRefSource"], [45, 2, 1, "", "region"], [45, 2, 1, "", "sameLengthFormattedEntities"], [45, 2, 1, "", "seed"], [45, 3, 1, "", "setAdditionalDateFormats"], [45, 3, 1, "", "setAgeRanges"], [45, 3, 1, "", "setAgeRangesByHipaa"], [45, 3, 1, "", "setConsistentAcrossNameParts"], [45, 3, 1, "", "setCountryObfuscation"], [45, 3, 1, "", "setDateEntities"], [45, 3, 1, "", "setDateFormats"], [45, 3, 1, "", "setDays"], [45, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [45, 3, 1, "", "setFakerLengthOffset"], [45, 3, 1, "", "setFixedMaskLength"], [45, 3, 1, "", "setGenderAwareness"], [45, 3, 1, "", "setGeoConsistency"], [45, 3, 1, "", "setKeepMonth"], [45, 3, 1, "", "setKeepTextSizeForObfuscation"], [45, 3, 1, "", "setKeepYear"], [45, 3, 1, "", "setLanguage"], [45, 3, 1, "", "setMaskingPolicy"], [45, 3, 1, "", "setMode"], [45, 3, 1, "", "setObfuscateDate"], [45, 3, 1, "", "setObfuscateRefSource"], [45, 3, 1, "", "setObfuscationEquivalents"], [45, 3, 1, "", "setRegion"], [45, 3, 1, "", "setSameLengthFormattedEntities"], [45, 3, 1, "", "setSeed"], [45, 3, 1, "", "setSelectiveObfuscateRefSource"], [45, 3, 1, "", "setSelectiveObfuscationModes"], [45, 3, 1, "", "setStaticObfuscationPairs"], [45, 3, 1, "", "setUnnormalizedDateMode"], [45, 3, 1, "", "setUseShiftDays"], [45, 2, 1, "", "unnormalizedDateMode"], [45, 2, 1, "", "useShiftDays"]], "sparknlp_jsl.annotator.deid.deIdentification": [[46, 1, 1, "", "DeIdentification"], [46, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[46, 2, 1, "", "additionalDateFormats"], [46, 2, 1, "", "ageRanges"], [46, 2, 1, "", "ageRangesByHipaa"], [46, 2, 1, "", "blackList"], [46, 2, 1, "", "blackListEntities"], [46, 3, 1, "", "clear"], [46, 2, 1, "", "combineRegexPatterns"], [46, 2, 1, "", "consistentAcrossNameParts"], [46, 2, 1, "", "consistentObfuscation"], [46, 3, 1, "", "copy"], [46, 2, 1, "", "countryObfuscation"], [46, 2, 1, "", "dateEntities"], [46, 2, 1, "", "dateFormats"], [46, 2, 1, "", "dateTag"], [46, 2, 1, "", "dateToYear"], [46, 2, 1, "", "days"], [46, 2, 1, "", "doExceptionHandling"], [46, 2, 1, "", "enableDefaultObfuscationEquivalents"], [46, 2, 1, "", "entityCasingModesPath"], [46, 3, 1, "", "explainParam"], [46, 3, 1, "", "explainParams"], [46, 3, 1, "", "extractParamMap"], [46, 2, 1, "", "fakerLengthOffset"], [46, 3, 1, "", "fit"], [46, 3, 1, "", "fitMultiple"], [46, 2, 1, "", "fixedMaskLength"], [46, 2, 1, "", "genderAwareness"], [46, 2, 1, "", "geoConsistency"], [46, 3, 1, "", "getChunkMatching"], [46, 3, 1, "", "getDefaultObfuscationEquivalents"], [46, 3, 1, "", "getInputCols"], [46, 3, 1, "", "getLazyAnnotator"], [46, 3, 1, "", "getOrDefault"], [46, 3, 1, "", "getOutputCol"], [46, 3, 1, "", "getParam"], [46, 3, 1, "", "getParamValue"], [46, 3, 1, "", "getSelectiveObfuscateRefSource"], [46, 3, 1, "", "getUseShiftDays"], [46, 2, 1, "", "getter_attrs"], [46, 2, 1, "", "groupByCol"], [46, 3, 1, "", "hasDefault"], [46, 3, 1, "", "hasParam"], [46, 2, 1, "", "ignoreRegex"], [46, 2, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "inputCols"], [46, 3, 1, "", "inputColsValidation"], [46, 3, 1, "", "isDefined"], [46, 2, 1, "", "isRandomDateDisplacement"], [46, 3, 1, "", "isSet"], [46, 2, 1, "", "keepMonth"], [46, 2, 1, "", "keepTextSizeForObfuscation"], [46, 2, 1, "", "keepYear"], [46, 2, 1, "", "language"], [46, 2, 1, "", "lazyAnnotator"], [46, 3, 1, "", "load"], [46, 2, 1, "", "mappingsColumn"], [46, 2, 1, "", "maskingPolicy"], [46, 2, 1, "", "metadataMaskingPolicy"], [46, 2, 1, "", "minYear"], [46, 2, 1, "", "mode"], [46, 2, 1, "", "name"], [46, 2, 1, "", "obfuscateByAgeGroups"], [46, 2, 1, "", "obfuscateDate"], [46, 2, 1, "", "obfuscateRefFile"], [46, 2, 1, "", "obfuscateRefSource"], [46, 2, 1, "", "obfuscationEquivalentsResource"], [46, 2, 1, "", "obfuscationStrategyOnException"], [46, 2, 1, "", "optionalInputAnnotatorTypes"], [46, 2, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "outputAsDocument"], [46, 2, 1, "", "outputCol"], [46, 3, 1, "", "read"], [46, 2, 1, "", "refFileFormat"], [46, 2, 1, "", "refSep"], [46, 2, 1, "", "regexOverride"], [46, 2, 1, "", "regexPatternsDictionary"], [46, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [46, 2, 1, "", "region"], [46, 2, 1, "", "returnEntityMappings"], [46, 2, 1, "", "sameEntityThreshold"], [46, 2, 1, "", "sameLengthFormattedEntities"], [46, 3, 1, "", "save"], [46, 2, 1, "", "seed"], [46, 2, 1, "", "selectiveObfuscationModesPath"], [46, 3, 1, "", "set"], [46, 3, 1, "", "setAdditionalDateFormats"], [46, 3, 1, "", "setAgeGroups"], [46, 3, 1, "", "setAgeRanges"], [46, 3, 1, "", "setAgeRangesByHipaa"], [46, 3, 1, "", "setBlackList"], [46, 3, 1, "", "setBlackListEntities"], [46, 3, 1, "", "setChunkMatching"], [46, 3, 1, "", "setCombineRegexPatterns"], [46, 3, 1, "", "setConsistentAcrossNameParts"], [46, 3, 1, "", "setConsistentObfuscation"], [46, 3, 1, "", "setCountryObfuscation"], [46, 3, 1, "", "setDateEntities"], [46, 3, 1, "", "setDateFormats"], [46, 3, 1, "", "setDateTag"], [46, 3, 1, "", "setDateToYear"], [46, 3, 1, "", "setDays"], [46, 3, 1, "", "setDoExceptionHandling"], [46, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [46, 3, 1, "", "setEntityCasingModes"], [46, 3, 1, "", "setFakerLengthOffset"], [46, 3, 1, "", "setFixedMaskLength"], [46, 3, 1, "", "setForceInputTypeValidation"], [46, 3, 1, "", "setGenderAwareness"], [46, 3, 1, "", "setGeoConsistency"], [46, 3, 1, "", "setGroupByCol"], [46, 3, 1, "", "setIgnoreRegex"], [46, 3, 1, "", "setInputCols"], [46, 3, 1, "", "setIsRandomDateDisplacement"], [46, 3, 1, "", "setKeepMonth"], [46, 3, 1, "", "setKeepTextSizeForObfuscation"], [46, 3, 1, "", "setKeepYear"], [46, 3, 1, "", "setLanguage"], [46, 3, 1, "", "setLazyAnnotator"], [46, 3, 1, "", "setMappingsColumn"], [46, 3, 1, "", "setMaskingPolicy"], [46, 3, 1, "", "setMetadataMaskingPolicy"], [46, 3, 1, "", "setMinYear"], [46, 3, 1, "", "setMode"], [46, 3, 1, "", "setObfuscateByAgeGroups"], [46, 3, 1, "", "setObfuscateDate"], [46, 3, 1, "", "setObfuscateRefFile"], [46, 3, 1, "", "setObfuscateRefSource"], [46, 3, 1, "", "setObfuscationEquivalents"], [46, 3, 1, "", "setObfuscationEquivalentsResource"], [46, 3, 1, "", "setObfuscationStrategyOnException"], [46, 3, 1, "", "setOutputAsDocument"], [46, 3, 1, "", "setOutputCol"], [46, 3, 1, "", "setParamValue"], [46, 3, 1, "", "setRefFileFormat"], [46, 3, 1, "", "setRefSep"], [46, 3, 1, "", "setRegexOverride"], [46, 3, 1, "", "setRegexPatternsDictionary"], [46, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [46, 3, 1, "", "setRegion"], [46, 3, 1, "", "setReturnEntityMappings"], [46, 3, 1, "", "setSameEntityThreshold"], [46, 3, 1, "", "setSameLengthFormattedEntities"], [46, 3, 1, "", "setSeed"], [46, 3, 1, "", "setSelectiveObfuscateRefSource"], [46, 3, 1, "", "setSelectiveObfuscationModes"], [46, 3, 1, "", "setStaticObfuscationPairs"], [46, 3, 1, "", "setStaticObfuscationPairsResource"], [46, 3, 1, "", "setUnnormalizedDateMode"], [46, 3, 1, "", "setUseShifDays"], [46, 3, 1, "", "setUseShiftDays"], [46, 3, 1, "", "setZipCodeTag"], [46, 2, 1, "", "skipLPInputColsValidation"], [46, 2, 1, "", "staticObfuscationPairsResource"], [46, 2, 1, "", "uid"], [46, 2, 1, "", "unnormalizedDateMode"], [46, 2, 1, "", "useShifDays"], [46, 2, 1, "", "useShiftDays"], [46, 3, 1, "", "write"], [46, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[46, 2, 1, "", "additionalDateFormats"], [46, 2, 1, "", "ageRanges"], [46, 2, 1, "", "ageRangesByHipaa"], [46, 2, 1, "", "blackList"], [46, 2, 1, "", "blackListEntities"], [46, 3, 1, "", "clear"], [46, 2, 1, "", "consistentAcrossNameParts"], [46, 2, 1, "", "consistentObfuscation"], [46, 3, 1, "", "copy"], [46, 2, 1, "", "countryObfuscation"], [46, 2, 1, "", "dateEntities"], [46, 2, 1, "", "dateFormats"], [46, 2, 1, "", "dateTag"], [46, 2, 1, "", "dateToYear"], [46, 2, 1, "", "days"], [46, 2, 1, "", "enableDefaultObfuscationEquivalents"], [46, 3, 1, "", "explainParam"], [46, 3, 1, "", "explainParams"], [46, 3, 1, "", "extractParamMap"], [46, 2, 1, "", "fakerLengthOffset"], [46, 2, 1, "", "fixedMaskLength"], [46, 2, 1, "", "genderAwareness"], [46, 2, 1, "", "geoConsistency"], [46, 3, 1, "", "getChunkMatching"], [46, 3, 1, "", "getDefaultObfuscationEquivalents"], [46, 3, 1, "", "getInputCols"], [46, 3, 1, "", "getLazyAnnotator"], [46, 3, 1, "", "getOrDefault"], [46, 3, 1, "", "getOutputCol"], [46, 3, 1, "", "getParam"], [46, 3, 1, "", "getParamValue"], [46, 3, 1, "", "getRegexEntities"], [46, 3, 1, "", "getSelectiveObfuscateRefSource"], [46, 3, 1, "", "getUseShiftDays"], [46, 2, 1, "", "getter_attrs"], [46, 2, 1, "", "groupByCol"], [46, 3, 1, "", "hasDefault"], [46, 3, 1, "", "hasParam"], [46, 2, 1, "", "ignoreRegex"], [46, 2, 1, "", "inputAnnotatorTypes"], [46, 2, 1, "", "inputCols"], [46, 3, 1, "", "inputColsValidation"], [46, 3, 1, "", "isDefined"], [46, 2, 1, "", "isRandomDateDisplacement"], [46, 3, 1, "", "isSet"], [46, 2, 1, "", "keepMonth"], [46, 2, 1, "", "keepTextSizeForObfuscation"], [46, 2, 1, "", "keepYear"], [46, 2, 1, "", "language"], [46, 2, 1, "", "lazyAnnotator"], [46, 3, 1, "", "load"], [46, 2, 1, "", "mappingsColumn"], [46, 2, 1, "", "maskingPolicy"], [46, 2, 1, "", "metadataMaskingPolicy"], [46, 2, 1, "", "minYear"], [46, 2, 1, "", "mode"], [46, 2, 1, "", "name"], [46, 2, 1, "", "obfuscateByAgeGroups"], [46, 2, 1, "", "obfuscateDate"], [46, 2, 1, "", "obfuscateRefSource"], [46, 2, 1, "", "obfuscationStrategyOnException"], [46, 2, 1, "", "optionalInputAnnotatorTypes"], [46, 2, 1, "", "outputAnnotatorType"], [46, 2, 1, "", "outputAsDocument"], [46, 2, 1, "", "outputCol"], [46, 3, 1, "", "pretrained"], [46, 3, 1, "", "read"], [46, 2, 1, "", "regexEntities"], [46, 2, 1, "", "regexOverride"], [46, 2, 1, "", "region"], [46, 2, 1, "", "returnEntityMappings"], [46, 2, 1, "", "sameEntityThreshold"], [46, 2, 1, "", "sameLengthFormattedEntities"], [46, 3, 1, "", "save"], [46, 2, 1, "", "seed"], [46, 3, 1, "", "set"], [46, 3, 1, "", "setAdditionalDateFormats"], [46, 3, 1, "", "setAgeGroups"], [46, 3, 1, "", "setAgeRanges"], [46, 3, 1, "", "setAgeRangesByHipaa"], [46, 3, 1, "", "setBlackList"], [46, 3, 1, "", "setBlackListEntities"], [46, 3, 1, "", "setChunkMatching"], [46, 3, 1, "", "setConsistentAcrossNameParts"], [46, 3, 1, "", "setConsistentObfuscation"], [46, 3, 1, "", "setCountryObfuscation"], [46, 3, 1, "", "setDateEntities"], [46, 3, 1, "", "setDateFormats"], [46, 3, 1, "", "setDateTag"], [46, 3, 1, "", "setDateToYear"], [46, 3, 1, "", "setDays"], [46, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [46, 3, 1, "", "setFakerLengthOffset"], [46, 3, 1, "", "setFixedMaskLength"], [46, 3, 1, "", "setForceInputTypeValidation"], [46, 3, 1, "", "setGenderAwareness"], [46, 3, 1, "", "setGeoConsistency"], [46, 3, 1, "", "setGroupByCol"], [46, 3, 1, "", "setIgnoreRegex"], [46, 3, 1, "", "setInputCols"], [46, 3, 1, "", "setIsRandomDateDisplacement"], [46, 3, 1, "", "setKeepMonth"], [46, 3, 1, "", "setKeepTextSizeForObfuscation"], [46, 3, 1, "", "setKeepYear"], [46, 3, 1, "", "setLanguage"], [46, 3, 1, "", "setLazyAnnotator"], [46, 3, 1, "", "setMappingsColumn"], [46, 3, 1, "", "setMaskingPolicy"], [46, 3, 1, "", "setMetadataMaskingPolicy"], [46, 3, 1, "", "setMinYear"], [46, 3, 1, "", "setMode"], [46, 3, 1, "", "setObfuscateByAgeGroups"], [46, 3, 1, "", "setObfuscateDate"], [46, 3, 1, "", "setObfuscateRefSource"], [46, 3, 1, "", "setObfuscationEquivalents"], [46, 3, 1, "", "setObfuscationStrategyOnException"], [46, 3, 1, "", "setOutputAsDocument"], [46, 3, 1, "", "setOutputCol"], [46, 3, 1, "", "setParamValue"], [46, 3, 1, "", "setParams"], [46, 3, 1, "", "setRegexOverride"], [46, 3, 1, "", "setRegion"], [46, 3, 1, "", "setReturnEntityMappings"], [46, 3, 1, "", "setSameEntityThreshold"], [46, 3, 1, "", "setSameLengthFormattedEntities"], [46, 3, 1, "", "setSeed"], [46, 3, 1, "", "setSelectiveObfuscateRefSource"], [46, 3, 1, "", "setSelectiveObfuscationModes"], [46, 3, 1, "", "setStaticObfuscationPairs"], [46, 3, 1, "", "setUnnormalizedDateMode"], [46, 3, 1, "", "setUseShifDays"], [46, 3, 1, "", "setUseShiftDays"], [46, 3, 1, "", "setZipCodeTag"], [46, 2, 1, "", "skipLPInputColsValidation"], [46, 3, 1, "", "transform"], [46, 2, 1, "", "uid"], [46, 2, 1, "", "unnormalizedDateMode"], [46, 2, 1, "", "useShifDays"], [46, 2, 1, "", "useShiftDays"], [46, 3, 1, "", "write"], [46, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[47, 1, 1, "", "DeIdentificationParams"]], "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams": [[47, 2, 1, "", "additionalDateFormats"], [47, 2, 1, "", "ageRanges"], [47, 2, 1, "", "ageRangesByHipaa"], [47, 2, 1, "", "blackList"], [47, 2, 1, "", "blackListEntities"], [47, 2, 1, "", "consistentAcrossNameParts"], [47, 2, 1, "", "consistentObfuscation"], [47, 2, 1, "", "countryObfuscation"], [47, 2, 1, "", "dateEntities"], [47, 2, 1, "", "dateFormats"], [47, 2, 1, "", "dateTag"], [47, 2, 1, "", "dateToYear"], [47, 2, 1, "", "days"], [47, 2, 1, "", "enableDefaultObfuscationEquivalents"], [47, 2, 1, "", "fakerLengthOffset"], [47, 2, 1, "", "fixedMaskLength"], [47, 2, 1, "", "genderAwareness"], [47, 2, 1, "", "geoConsistency"], [47, 3, 1, "", "getChunkMatching"], [47, 3, 1, "", "getDefaultObfuscationEquivalents"], [47, 3, 1, "", "getSelectiveObfuscateRefSource"], [47, 3, 1, "", "getUseShiftDays"], [47, 2, 1, "", "groupByCol"], [47, 2, 1, "", "ignoreRegex"], [47, 2, 1, "", "isRandomDateDisplacement"], [47, 2, 1, "", "keepMonth"], [47, 2, 1, "", "keepTextSizeForObfuscation"], [47, 2, 1, "", "keepYear"], [47, 2, 1, "", "language"], [47, 2, 1, "", "mappingsColumn"], [47, 2, 1, "", "maskingPolicy"], [47, 2, 1, "", "metadataMaskingPolicy"], [47, 2, 1, "", "minYear"], [47, 2, 1, "", "mode"], [47, 2, 1, "", "obfuscateByAgeGroups"], [47, 2, 1, "", "obfuscateDate"], [47, 2, 1, "", "obfuscateRefSource"], [47, 2, 1, "", "obfuscationStrategyOnException"], [47, 2, 1, "", "outputAsDocument"], [47, 2, 1, "", "regexOverride"], [47, 2, 1, "", "region"], [47, 2, 1, "", "returnEntityMappings"], [47, 2, 1, "", "sameEntityThreshold"], [47, 2, 1, "", "sameLengthFormattedEntities"], [47, 2, 1, "", "seed"], [47, 3, 1, "", "setAdditionalDateFormats"], [47, 3, 1, "", "setAgeGroups"], [47, 3, 1, "", "setAgeRanges"], [47, 3, 1, "", "setAgeRangesByHipaa"], [47, 3, 1, "", "setBlackList"], [47, 3, 1, "", "setBlackListEntities"], [47, 3, 1, "", "setChunkMatching"], [47, 3, 1, "", "setConsistentAcrossNameParts"], [47, 3, 1, "", "setConsistentObfuscation"], [47, 3, 1, "", "setCountryObfuscation"], [47, 3, 1, "", "setDateEntities"], [47, 3, 1, "", "setDateFormats"], [47, 3, 1, "", "setDateTag"], [47, 3, 1, "", "setDateToYear"], [47, 3, 1, "", "setDays"], [47, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [47, 3, 1, "", "setFakerLengthOffset"], [47, 3, 1, "", "setFixedMaskLength"], [47, 3, 1, "", "setGenderAwareness"], [47, 3, 1, "", "setGeoConsistency"], [47, 3, 1, "", "setGroupByCol"], [47, 3, 1, "", "setIgnoreRegex"], [47, 3, 1, "", "setIsRandomDateDisplacement"], [47, 3, 1, "", "setKeepMonth"], [47, 3, 1, "", "setKeepTextSizeForObfuscation"], [47, 3, 1, "", "setKeepYear"], [47, 3, 1, "", "setLanguage"], [47, 3, 1, "", "setMappingsColumn"], [47, 3, 1, "", "setMaskingPolicy"], [47, 3, 1, "", "setMetadataMaskingPolicy"], [47, 3, 1, "", "setMinYear"], [47, 3, 1, "", "setMode"], [47, 3, 1, "", "setObfuscateByAgeGroups"], [47, 3, 1, "", "setObfuscateDate"], [47, 3, 1, "", "setObfuscateRefSource"], [47, 3, 1, "", "setObfuscationEquivalents"], [47, 3, 1, "", "setObfuscationStrategyOnException"], [47, 3, 1, "", "setOutputAsDocument"], [47, 3, 1, "", "setRegexOverride"], [47, 3, 1, "", "setRegion"], [47, 3, 1, "", "setReturnEntityMappings"], [47, 3, 1, "", "setSameEntityThreshold"], [47, 3, 1, "", "setSameLengthFormattedEntities"], [47, 3, 1, "", "setSeed"], [47, 3, 1, "", "setSelectiveObfuscateRefSource"], [47, 3, 1, "", "setSelectiveObfuscationModes"], [47, 3, 1, "", "setStaticObfuscationPairs"], [47, 3, 1, "", "setUnnormalizedDateMode"], [47, 3, 1, "", "setUseShifDays"], [47, 3, 1, "", "setUseShiftDays"], [47, 3, 1, "", "setZipCodeTag"], [47, 2, 1, "", "unnormalizedDateMode"], [47, 2, 1, "", "useShifDays"], [47, 2, 1, "", "useShiftDays"], [47, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[48, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[48, 3, 1, "", "clear"], [48, 3, 1, "", "copy"], [48, 2, 1, "", "dateShiftColumn"], [48, 3, 1, "", "explainParam"], [48, 3, 1, "", "explainParams"], [48, 3, 1, "", "extractParamMap"], [48, 3, 1, "", "getInputCols"], [48, 3, 1, "", "getLazyAnnotator"], [48, 3, 1, "", "getOrDefault"], [48, 3, 1, "", "getOutputCol"], [48, 3, 1, "", "getParam"], [48, 3, 1, "", "getParamValue"], [48, 2, 1, "", "getter_attrs"], [48, 3, 1, "", "hasDefault"], [48, 3, 1, "", "hasParam"], [48, 2, 1, "", "inputAnnotatorTypes"], [48, 2, 1, "", "inputCols"], [48, 3, 1, "", "inputColsValidation"], [48, 3, 1, "", "isDefined"], [48, 3, 1, "", "isSet"], [48, 2, 1, "", "lazyAnnotator"], [48, 3, 1, "", "load"], [48, 2, 1, "", "name"], [48, 2, 1, "", "newDateShift"], [48, 2, 1, "", "optionalInputAnnotatorTypes"], [48, 2, 1, "", "outputAnnotatorType"], [48, 2, 1, "", "outputCol"], [48, 2, 1, "", "patientIdColumn"], [48, 2, 1, "", "rangeDays"], [48, 3, 1, "", "read"], [48, 3, 1, "", "save"], [48, 2, 1, "", "seed"], [48, 3, 1, "", "set"], [48, 3, 1, "", "setDateShiftColumn"], [48, 3, 1, "", "setInputCols"], [48, 3, 1, "", "setLazyAnnotator"], [48, 3, 1, "", "setNewDateShift"], [48, 3, 1, "", "setOutputCol"], [48, 3, 1, "", "setParamValue"], [48, 3, 1, "", "setParams"], [48, 3, 1, "", "setPatientIdColumn"], [48, 3, 1, "", "setRangeDays"], [48, 3, 1, "", "setSeed"], [48, 3, 1, "", "transform"], [48, 2, 1, "", "uid"], [48, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.light_deIdentification": [[50, 1, 1, "", "LightDeIdentification"]], "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification": [[50, 2, 1, "", "additionalDateFormats"], [50, 2, 1, "", "ageRanges"], [50, 2, 1, "", "ageRangesByHipaa"], [50, 3, 1, "", "clear"], [50, 2, 1, "", "consistentAcrossNameParts"], [50, 3, 1, "", "copy"], [50, 2, 1, "", "countryObfuscation"], [50, 2, 1, "", "dateEntities"], [50, 2, 1, "", "dateFormats"], [50, 2, 1, "", "days"], [50, 2, 1, "", "enableDefaultObfuscationEquivalents"], [50, 3, 1, "", "explainParam"], [50, 3, 1, "", "explainParams"], [50, 3, 1, "", "extractParamMap"], [50, 2, 1, "", "fakerLengthOffset"], [50, 2, 1, "", "fixedMaskLength"], [50, 2, 1, "", "genderAwareness"], [50, 2, 1, "", "geoConsistency"], [50, 3, 1, "", "getDefaultObfuscationEquivalents"], [50, 3, 1, "", "getInputCols"], [50, 3, 1, "", "getLazyAnnotator"], [50, 3, 1, "", "getOrDefault"], [50, 3, 1, "", "getOutputCol"], [50, 3, 1, "", "getParam"], [50, 3, 1, "", "getParamValue"], [50, 3, 1, "", "getSelectiveObfuscateRefSource"], [50, 2, 1, "", "getter_attrs"], [50, 3, 1, "", "hasDefault"], [50, 3, 1, "", "hasParam"], [50, 2, 1, "", "inputAnnotatorTypes"], [50, 2, 1, "", "inputCols"], [50, 3, 1, "", "inputColsValidation"], [50, 3, 1, "", "isDefined"], [50, 3, 1, "", "isSet"], [50, 2, 1, "", "keepMonth"], [50, 2, 1, "", "keepTextSizeForObfuscation"], [50, 2, 1, "", "keepYear"], [50, 2, 1, "", "language"], [50, 2, 1, "", "lazyAnnotator"], [50, 3, 1, "", "load"], [50, 2, 1, "", "maskingPolicy"], [50, 2, 1, "", "mode"], [50, 2, 1, "", "name"], [50, 2, 1, "", "obfuscateDate"], [50, 2, 1, "", "obfuscateRefSource"], [50, 2, 1, "", "optionalInputAnnotatorTypes"], [50, 2, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "outputCol"], [50, 3, 1, "", "read"], [50, 2, 1, "", "region"], [50, 2, 1, "", "sameLengthFormattedEntities"], [50, 3, 1, "", "save"], [50, 2, 1, "", "seed"], [50, 3, 1, "", "set"], [50, 3, 1, "", "setAdditionalDateFormats"], [50, 3, 1, "", "setAgeRanges"], [50, 3, 1, "", "setAgeRangesByHipaa"], [50, 3, 1, "", "setConsistentAcrossNameParts"], [50, 3, 1, "", "setCountryObfuscation"], [50, 3, 1, "", "setCustomFakers"], [50, 3, 1, "", "setDateEntities"], [50, 3, 1, "", "setDateFormats"], [50, 3, 1, "", "setDays"], [50, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [50, 3, 1, "", "setFakerLengthOffset"], [50, 3, 1, "", "setFixedMaskLength"], [50, 3, 1, "", "setForceInputTypeValidation"], [50, 3, 1, "", "setGenderAwareness"], [50, 3, 1, "", "setGeoConsistency"], [50, 3, 1, "", "setInputCols"], [50, 3, 1, "", "setKeepMonth"], [50, 3, 1, "", "setKeepTextSizeForObfuscation"], [50, 3, 1, "", "setKeepYear"], [50, 3, 1, "", "setLanguage"], [50, 3, 1, "", "setLazyAnnotator"], [50, 3, 1, "", "setMaskingPolicy"], [50, 3, 1, "", "setMode"], [50, 3, 1, "", "setObfuscateDate"], [50, 3, 1, "", "setObfuscateRefSource"], [50, 3, 1, "", "setObfuscationEquivalents"], [50, 3, 1, "", "setOutputCol"], [50, 3, 1, "", "setParamValue"], [50, 3, 1, "", "setParams"], [50, 3, 1, "", "setRegion"], [50, 3, 1, "", "setSameLengthFormattedEntities"], [50, 3, 1, "", "setSeed"], [50, 3, 1, "", "setSelectiveObfuscateRefSource"], [50, 3, 1, "", "setSelectiveObfuscationModes"], [50, 3, 1, "", "setStaticObfuscationPairs"], [50, 3, 1, "", "setUnnormalizedDateMode"], [50, 3, 1, "", "setUseShiftDays"], [50, 2, 1, "", "skipLPInputColsValidation"], [50, 3, 1, "", "transform"], [50, 2, 1, "", "uid"], [50, 2, 1, "", "unnormalizedDateMode"], [50, 2, 1, "", "useShiftDays"], [50, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[51, 1, 1, "", "NameChunkObfuscator"], [51, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[51, 3, 1, "", "clear"], [51, 3, 1, "", "copy"], [51, 3, 1, "", "explainParam"], [51, 3, 1, "", "explainParams"], [51, 3, 1, "", "extractParamMap"], [51, 2, 1, "", "genderAwareness"], [51, 3, 1, "", "getInputCols"], [51, 3, 1, "", "getLazyAnnotator"], [51, 3, 1, "", "getOrDefault"], [51, 3, 1, "", "getOutputCol"], [51, 3, 1, "", "getParam"], [51, 3, 1, "", "getParamValue"], [51, 2, 1, "", "getter_attrs"], [51, 3, 1, "", "hasDefault"], [51, 3, 1, "", "hasParam"], [51, 2, 1, "", "inputAnnotatorTypes"], [51, 2, 1, "", "inputCols"], [51, 3, 1, "", "inputColsValidation"], [51, 3, 1, "", "isDefined"], [51, 3, 1, "", "isSet"], [51, 2, 1, "", "language"], [51, 2, 1, "", "lazyAnnotator"], [51, 3, 1, "", "load"], [51, 2, 1, "", "nameEntities"], [51, 2, 1, "", "obfuscateRefSource"], [51, 2, 1, "", "optionalInputAnnotatorTypes"], [51, 2, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "outputCol"], [51, 3, 1, "", "read"], [51, 2, 1, "", "sameLength"], [51, 3, 1, "", "save"], [51, 2, 1, "", "seed"], [51, 3, 1, "", "set"], [51, 3, 1, "", "setForceInputTypeValidation"], [51, 3, 1, "", "setGenderAwareness"], [51, 3, 1, "", "setInputCols"], [51, 3, 1, "", "setLanguage"], [51, 3, 1, "", "setLazyAnnotator"], [51, 3, 1, "", "setNameEntities"], [51, 3, 1, "", "setObfuscateRefSource"], [51, 3, 1, "", "setOutputCol"], [51, 3, 1, "", "setParamValue"], [51, 3, 1, "", "setParams"], [51, 3, 1, "", "setSameLength"], [51, 3, 1, "", "setSeed"], [51, 2, 1, "", "skipLPInputColsValidation"], [51, 3, 1, "", "transform"], [51, 2, 1, "", "uid"], [51, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[51, 3, 1, "", "clear"], [51, 3, 1, "", "copy"], [51, 3, 1, "", "explainParam"], [51, 3, 1, "", "explainParams"], [51, 3, 1, "", "extractParamMap"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "fitMultiple"], [51, 2, 1, "", "genderAwareness"], [51, 3, 1, "", "getInputCols"], [51, 3, 1, "", "getLazyAnnotator"], [51, 3, 1, "", "getOrDefault"], [51, 3, 1, "", "getOutputCol"], [51, 3, 1, "", "getParam"], [51, 3, 1, "", "getParamValue"], [51, 2, 1, "", "getter_attrs"], [51, 3, 1, "", "hasDefault"], [51, 3, 1, "", "hasParam"], [51, 2, 1, "", "inputAnnotatorTypes"], [51, 2, 1, "", "inputCols"], [51, 3, 1, "", "inputColsValidation"], [51, 3, 1, "", "isDefined"], [51, 3, 1, "", "isSet"], [51, 2, 1, "", "language"], [51, 2, 1, "", "lazyAnnotator"], [51, 3, 1, "", "load"], [51, 2, 1, "", "nameEntities"], [51, 2, 1, "", "obfuscateRefFile"], [51, 2, 1, "", "obfuscateRefSource"], [51, 2, 1, "", "optionalInputAnnotatorTypes"], [51, 2, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "outputCol"], [51, 3, 1, "", "read"], [51, 2, 1, "", "refFileFormat"], [51, 2, 1, "", "refSep"], [51, 2, 1, "", "sameLength"], [51, 3, 1, "", "save"], [51, 2, 1, "", "seed"], [51, 3, 1, "", "set"], [51, 3, 1, "", "setForceInputTypeValidation"], [51, 3, 1, "", "setGenderAwareness"], [51, 3, 1, "", "setInputCols"], [51, 3, 1, "", "setLanguage"], [51, 3, 1, "", "setLazyAnnotator"], [51, 3, 1, "", "setNameEntities"], [51, 3, 1, "", "setObfuscateRefFile"], [51, 3, 1, "", "setObfuscateRefSource"], [51, 3, 1, "", "setOutputCol"], [51, 3, 1, "", "setParamValue"], [51, 3, 1, "", "setRefFileFormat"], [51, 3, 1, "", "setRefSep"], [51, 3, 1, "", "setSameLength"], [51, 3, 1, "", "setSeed"], [51, 2, 1, "", "skipLPInputColsValidation"], [51, 2, 1, "", "uid"], [51, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.reIdentification": [[52, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[52, 3, 1, "", "clear"], [52, 3, 1, "", "copy"], [52, 3, 1, "", "explainParam"], [52, 3, 1, "", "explainParams"], [52, 3, 1, "", "extractParamMap"], [52, 3, 1, "", "getInputCols"], [52, 3, 1, "", "getLazyAnnotator"], [52, 3, 1, "", "getOrDefault"], [52, 3, 1, "", "getOutputCol"], [52, 3, 1, "", "getParam"], [52, 3, 1, "", "getParamValue"], [52, 2, 1, "", "getter_attrs"], [52, 3, 1, "", "hasDefault"], [52, 3, 1, "", "hasParam"], [52, 2, 1, "", "inputAnnotatorTypes"], [52, 2, 1, "", "inputCols"], [52, 3, 1, "", "inputColsValidation"], [52, 3, 1, "", "isDefined"], [52, 3, 1, "", "isSet"], [52, 2, 1, "", "lazyAnnotator"], [52, 3, 1, "", "load"], [52, 2, 1, "", "name"], [52, 2, 1, "", "optionalInputAnnotatorTypes"], [52, 2, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "outputCol"], [52, 3, 1, "", "read"], [52, 3, 1, "", "save"], [52, 3, 1, "", "set"], [52, 3, 1, "", "setForceInputTypeValidation"], [52, 3, 1, "", "setInputCols"], [52, 3, 1, "", "setLazyAnnotator"], [52, 3, 1, "", "setOutputCol"], [52, 3, 1, "", "setParamValue"], [52, 3, 1, "", "setParams"], [52, 2, 1, "", "skipLPInputColsValidation"], [52, 3, 1, "", "transform"], [52, 2, 1, "", "uid"], [52, 3, 1, "", "write"]], "sparknlp_jsl.annotator.deid.replacer": [[53, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[53, 3, 1, "", "clear"], [53, 3, 1, "", "copy"], [53, 3, 1, "", "explainParam"], [53, 3, 1, "", "explainParams"], [53, 3, 1, "", "extractParamMap"], [53, 3, 1, "", "getInputCols"], [53, 3, 1, "", "getLazyAnnotator"], [53, 3, 1, "", "getOrDefault"], [53, 3, 1, "", "getOutputCol"], [53, 3, 1, "", "getParam"], [53, 3, 1, "", "getParamValue"], [53, 3, 1, "", "getStaticEntityMappings"], [53, 3, 1, "", "getUseReplacement"], [53, 2, 1, "", "getter_attrs"], [53, 3, 1, "", "hasDefault"], [53, 3, 1, "", "hasParam"], [53, 2, 1, "", "inputAnnotatorTypes"], [53, 2, 1, "", "inputCols"], [53, 3, 1, "", "inputColsValidation"], [53, 3, 1, "", "isDefined"], [53, 3, 1, "", "isSet"], [53, 2, 1, "", "lazyAnnotator"], [53, 3, 1, "", "load"], [53, 2, 1, "id0", "mappingsColumn"], [53, 2, 1, "", "name"], [53, 2, 1, "id1", "noneValuesTo"], [53, 2, 1, "", "optionalInputAnnotatorTypes"], [53, 2, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "outputCol"], [53, 2, 1, "id2", "placeHolder"], [53, 2, 1, "id3", "placeHolderDelimiters"], [53, 3, 1, "", "read"], [53, 2, 1, "id4", "returnEntityMappings"], [53, 3, 1, "", "save"], [53, 3, 1, "", "set"], [53, 3, 1, "", "setForceInputTypeValidation"], [53, 3, 1, "", "setInputCols"], [53, 3, 1, "", "setLazyAnnotator"], [53, 3, 1, "", "setMappingsColumn"], [53, 3, 1, "", "setNoneValuesTo"], [53, 3, 1, "", "setOutputCol"], [53, 3, 1, "", "setParamValue"], [53, 3, 1, "", "setParams"], [53, 3, 1, "", "setPlaceHolder"], [53, 3, 1, "", "setPlaceHolderDelimiters"], [53, 3, 1, "", "setReturnEntityMappings"], [53, 3, 1, "", "setStaticEntityMappings"], [53, 3, 1, "", "setStaticEntityMappingsFallback"], [53, 3, 1, "", "setUseReplacement"], [53, 2, 1, "", "skipLPInputColsValidation"], [53, 2, 1, "", "staticEntityMappings"], [53, 2, 1, "id5", "staticEntityMappingsFallback"], [53, 3, 1, "", "transform"], [53, 2, 1, "", "uid"], [53, 2, 1, "id6", "useReplacement"], [53, 3, 1, "", "write"]], "sparknlp_jsl.annotator.disambiguation": [[55, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[55, 1, 1, "", "NerDisambiguator"], [55, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[55, 3, 1, "", "clear"], [55, 3, 1, "", "copy"], [55, 2, 1, "", "embeddingTypeParam"], [55, 3, 1, "", "explainParam"], [55, 3, 1, "", "explainParams"], [55, 3, 1, "", "extractParamMap"], [55, 3, 1, "", "fit"], [55, 3, 1, "", "fitMultiple"], [55, 3, 1, "", "getInputCols"], [55, 3, 1, "", "getLazyAnnotator"], [55, 3, 1, "", "getOrDefault"], [55, 3, 1, "", "getOutputCol"], [55, 3, 1, "", "getParam"], [55, 3, 1, "", "getParamValue"], [55, 2, 1, "", "getter_attrs"], [55, 3, 1, "", "hasDefault"], [55, 3, 1, "", "hasParam"], [55, 2, 1, "", "inputAnnotatorTypes"], [55, 2, 1, "", "inputCols"], [55, 3, 1, "", "inputColsValidation"], [55, 3, 1, "", "isDefined"], [55, 3, 1, "", "isSet"], [55, 2, 1, "", "lazyAnnotator"], [55, 2, 1, "", "levenshteinDistanceThresholdParam"], [55, 3, 1, "", "load"], [55, 2, 1, "", "narrowWithApproximateMatching"], [55, 2, 1, "", "nearMatchingGapParam"], [55, 2, 1, "", "numFirstChars"], [55, 2, 1, "", "optionalInputAnnotatorTypes"], [55, 2, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "outputCol"], [55, 2, 1, "", "predictionsLimit"], [55, 3, 1, "", "read"], [55, 2, 1, "", "s3KnowledgeBaseName"], [55, 3, 1, "", "save"], [55, 3, 1, "", "set"], [55, 3, 1, "", "setEmbeddingType"], [55, 3, 1, "", "setForceInputTypeValidation"], [55, 3, 1, "", "setInputCols"], [55, 3, 1, "", "setLazyAnnotator"], [55, 3, 1, "", "setLevenshteinDistanceThresholdParam"], [55, 3, 1, "", "setNarrowWithApproximateMatching"], [55, 3, 1, "", "setNearMatchingGapParam"], [55, 3, 1, "", "setNumFirstChars"], [55, 3, 1, "", "setOutputCol"], [55, 3, 1, "", "setParamValue"], [55, 3, 1, "", "setPredictionLimit"], [55, 3, 1, "", "setS3KnowledgeBaseName"], [55, 3, 1, "", "setTokenSearch"], [55, 2, 1, "", "skipLPInputColsValidation"], [55, 2, 1, "", "tokenSearch"], [55, 2, 1, "", "uid"], [55, 3, 1, "", "write"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[55, 3, 1, "", "clear"], [55, 3, 1, "", "copy"], [55, 2, 1, "", "embeddingTypeParam"], [55, 3, 1, "", "explainParam"], [55, 3, 1, "", "explainParams"], [55, 3, 1, "", "extractParamMap"], [55, 3, 1, "", "getInputCols"], [55, 3, 1, "", "getLazyAnnotator"], [55, 3, 1, "", "getOrDefault"], [55, 3, 1, "", "getOutputCol"], [55, 3, 1, "", "getParam"], [55, 3, 1, "", "getParamValue"], [55, 2, 1, "", "getter_attrs"], [55, 3, 1, "", "hasDefault"], [55, 3, 1, "", "hasParam"], [55, 2, 1, "", "inputAnnotatorTypes"], [55, 2, 1, "", "inputCols"], [55, 3, 1, "", "inputColsValidation"], [55, 3, 1, "", "isDefined"], [55, 3, 1, "", "isSet"], [55, 2, 1, "", "lazyAnnotator"], [55, 2, 1, "", "levenshteinDistanceThresholdParam"], [55, 3, 1, "", "load"], [55, 2, 1, "", "name"], [55, 2, 1, "", "narrowWithApproximateMatching"], [55, 2, 1, "", "nearMatchingGapParam"], [55, 2, 1, "", "numFirstChars"], [55, 2, 1, "", "optionalInputAnnotatorTypes"], [55, 2, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "outputCol"], [55, 2, 1, "", "predictionsLimit"], [55, 3, 1, "", "pretrained"], [55, 3, 1, "", "read"], [55, 3, 1, "", "save"], [55, 3, 1, "", "set"], [55, 3, 1, "", "setEmbeddingType"], [55, 3, 1, "", "setForceInputTypeValidation"], [55, 3, 1, "", "setInputCols"], [55, 3, 1, "", "setLazyAnnotator"], [55, 3, 1, "", "setLevenshteinDistanceThresholdParam"], [55, 3, 1, "", "setNarrowWithApproximateMatching"], [55, 3, 1, "", "setNearMatchingGapParam"], [55, 3, 1, "", "setNumFirstChars"], [55, 3, 1, "", "setOutputCol"], [55, 3, 1, "", "setParamValue"], [55, 3, 1, "", "setParams"], [55, 3, 1, "", "setPredictionLimit"], [55, 3, 1, "", "setTokenSearch"], [55, 2, 1, "", "skipLPInputColsValidation"], [55, 2, 1, "", "tokenSearch"], [55, 3, 1, "", "transform"], [55, 2, 1, "", "uid"], [55, 3, 1, "", "write"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[56, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[56, 2, 1, "", "chunkCol"], [56, 3, 1, "", "clear"], [56, 3, 1, "", "copy"], [56, 3, 1, "", "explainParam"], [56, 3, 1, "", "explainParams"], [56, 3, 1, "", "extractParamMap"], [56, 2, 1, "", "failOnMissing"], [56, 3, 1, "", "getInputCols"], [56, 3, 1, "", "getLazyAnnotator"], [56, 3, 1, "", "getOrDefault"], [56, 3, 1, "", "getOutputCol"], [56, 3, 1, "", "getParam"], [56, 3, 1, "", "getParamValue"], [56, 2, 1, "", "getter_attrs"], [56, 3, 1, "", "hasDefault"], [56, 3, 1, "", "hasParam"], [56, 2, 1, "", "inputAnnotatorTypes"], [56, 2, 1, "", "inputCols"], [56, 3, 1, "", "inputColsValidation"], [56, 2, 1, "", "isArray"], [56, 3, 1, "", "isDefined"], [56, 3, 1, "", "isSet"], [56, 2, 1, "", "lazyAnnotator"], [56, 3, 1, "", "load"], [56, 2, 1, "", "lowerCase"], [56, 2, 1, "", "name"], [56, 2, 1, "", "optionalInputAnnotatorTypes"], [56, 2, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "outputCol"], [56, 3, 1, "", "read"], [56, 3, 1, "", "save"], [56, 3, 1, "", "set"], [56, 3, 1, "", "setChunkCol"], [56, 3, 1, "", "setFailOnMissing"], [56, 3, 1, "", "setInputCols"], [56, 3, 1, "", "setIsArray"], [56, 3, 1, "", "setLazyAnnotator"], [56, 3, 1, "", "setLowerCase"], [56, 3, 1, "", "setOutputCol"], [56, 3, 1, "", "setParamValue"], [56, 3, 1, "", "setParams"], [56, 3, 1, "", "setStartCol"], [56, 3, 1, "", "setStartColByTokenIndex"], [56, 2, 1, "", "startCol"], [56, 2, 1, "", "startColByTokenIndex"], [56, 3, 1, "", "transform"], [56, 2, 1, "", "uid"], [56, 3, 1, "", "write"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[57, 1, 1, "", "DocumentFiltererByClassifier"]], "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier": [[57, 2, 1, "", "blackList"], [57, 2, 1, "", "caseSensitive"], [57, 3, 1, "", "clear"], [57, 3, 1, "", "copy"], [57, 3, 1, "", "explainParam"], [57, 3, 1, "", "explainParams"], [57, 3, 1, "", "extractParamMap"], [57, 3, 1, "", "getInputCols"], [57, 3, 1, "", "getLazyAnnotator"], [57, 3, 1, "", "getOrDefault"], [57, 3, 1, "", "getOutputCol"], [57, 3, 1, "", "getParam"], [57, 3, 1, "", "getParamValue"], [57, 2, 1, "", "getter_attrs"], [57, 3, 1, "", "hasDefault"], [57, 3, 1, "", "hasParam"], [57, 2, 1, "", "inputAnnotatorTypes"], [57, 2, 1, "", "inputCols"], [57, 3, 1, "", "inputColsValidation"], [57, 3, 1, "", "isDefined"], [57, 3, 1, "", "isSet"], [57, 2, 1, "", "lazyAnnotator"], [57, 3, 1, "", "load"], [57, 2, 1, "", "name"], [57, 2, 1, "", "optionalInputAnnotatorTypes"], [57, 2, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "outputCol"], [57, 3, 1, "", "read"], [57, 3, 1, "", "save"], [57, 3, 1, "", "set"], [57, 3, 1, "", "setBlackList"], [57, 3, 1, "", "setCaseSensitive"], [57, 3, 1, "", "setDenyList"], [57, 3, 1, "", "setForceInputTypeValidation"], [57, 3, 1, "", "setInputCols"], [57, 3, 1, "", "setLazyAnnotator"], [57, 3, 1, "", "setOutputCol"], [57, 3, 1, "", "setParamValue"], [57, 3, 1, "", "setParams"], [57, 3, 1, "", "setWhiteList"], [57, 2, 1, "", "skipLPInputColsValidation"], [57, 3, 1, "", "transform"], [57, 2, 1, "", "uid"], [57, 2, 1, "", "whiteList"], [57, 3, 1, "", "write"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[58, 1, 1, "", "DocumentFiltererByNER"]], "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER": [[58, 2, 1, "", "blackList"], [58, 2, 1, "", "caseSensitive"], [58, 3, 1, "", "clear"], [58, 3, 1, "", "copy"], [58, 3, 1, "", "explainParam"], [58, 3, 1, "", "explainParams"], [58, 3, 1, "", "extractParamMap"], [58, 3, 1, "", "getInputCols"], [58, 3, 1, "", "getLazyAnnotator"], [58, 3, 1, "", "getOrDefault"], [58, 3, 1, "", "getOutputCol"], [58, 3, 1, "", "getParam"], [58, 3, 1, "", "getParamValue"], [58, 2, 1, "", "getter_attrs"], [58, 3, 1, "", "hasDefault"], [58, 3, 1, "", "hasParam"], [58, 2, 1, "", "inputAnnotatorTypes"], [58, 2, 1, "", "inputCols"], [58, 3, 1, "", "inputColsValidation"], [58, 3, 1, "", "isDefined"], [58, 3, 1, "", "isSet"], [58, 2, 1, "", "joinString"], [58, 2, 1, "", "lazyAnnotator"], [58, 3, 1, "", "load"], [58, 2, 1, "", "name"], [58, 2, 1, "", "optionalInputAnnotatorTypes"], [58, 2, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "outputAsDocument"], [58, 2, 1, "", "outputCol"], [58, 3, 1, "", "read"], [58, 3, 1, "", "save"], [58, 3, 1, "", "set"], [58, 3, 1, "", "setBlackList"], [58, 3, 1, "", "setCaseSensitive"], [58, 3, 1, "", "setDenyList"], [58, 3, 1, "", "setForceInputTypeValidation"], [58, 3, 1, "", "setInputCols"], [58, 3, 1, "", "setLazyAnnotator"], [58, 3, 1, "", "setOutputCol"], [58, 3, 1, "", "setParamValue"], [58, 3, 1, "", "setParams"], [58, 3, 1, "", "setWhiteList"], [58, 2, 1, "", "skipLPInputColsValidation"], [58, 3, 1, "", "transform"], [58, 2, 1, "", "uid"], [58, 2, 1, "", "whiteList"], [58, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings": [[59, 0, 0, "-", "average_embeddings"], [60, 0, 0, "-", "bert_sentence_embeddings"], [61, 0, 0, "-", "entity_chunk_embeddings"], [62, 0, 0, "-", "extractive_summarization"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[59, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[59, 3, 1, "", "clear"], [59, 3, 1, "", "copy"], [59, 3, 1, "", "explainParam"], [59, 3, 1, "", "explainParams"], [59, 3, 1, "", "extractParamMap"], [59, 3, 1, "", "getInputCols"], [59, 3, 1, "", "getLazyAnnotator"], [59, 3, 1, "", "getOrDefault"], [59, 3, 1, "", "getOutputCol"], [59, 3, 1, "", "getParam"], [59, 3, 1, "", "getParamValue"], [59, 2, 1, "", "getter_attrs"], [59, 3, 1, "", "hasDefault"], [59, 3, 1, "", "hasParam"], [59, 2, 1, "", "inputAnnotatorTypes"], [59, 2, 1, "", "inputCols"], [59, 3, 1, "", "inputColsValidation"], [59, 3, 1, "", "isDefined"], [59, 3, 1, "", "isSet"], [59, 2, 1, "", "lazyAnnotator"], [59, 3, 1, "", "load"], [59, 2, 1, "", "name"], [59, 2, 1, "", "optionalInputAnnotatorTypes"], [59, 2, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "outputCol"], [59, 3, 1, "", "read"], [59, 3, 1, "", "save"], [59, 3, 1, "", "set"], [59, 3, 1, "", "setForceInputTypeValidation"], [59, 3, 1, "", "setInputCols"], [59, 3, 1, "", "setLazyAnnotator"], [59, 3, 1, "", "setOutputCol"], [59, 3, 1, "", "setParamValue"], [59, 3, 1, "", "setParams"], [59, 2, 1, "", "skipLPInputColsValidation"], [59, 3, 1, "", "transform"], [59, 2, 1, "", "uid"], [59, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[60, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[60, 2, 1, "", "batchSize"], [60, 2, 1, "", "caseSensitive"], [60, 2, 1, "", "chunkWeight"], [60, 3, 1, "", "clear"], [60, 2, 1, "", "configProtoBytes"], [60, 3, 1, "", "copy"], [60, 2, 1, "", "dimension"], [60, 3, 1, "", "explainParam"], [60, 3, 1, "", "explainParams"], [60, 3, 1, "", "extractParamMap"], [60, 3, 1, "", "getBatchSize"], [60, 3, 1, "", "getCaseSensitive"], [60, 3, 1, "", "getDimension"], [60, 3, 1, "", "getInputCols"], [60, 3, 1, "", "getLazyAnnotator"], [60, 3, 1, "", "getOrDefault"], [60, 3, 1, "", "getOutputCol"], [60, 3, 1, "", "getParam"], [60, 3, 1, "", "getParamValue"], [60, 3, 1, "", "getStorageRef"], [60, 2, 1, "", "getter_attrs"], [60, 3, 1, "", "hasDefault"], [60, 3, 1, "", "hasParam"], [60, 2, 1, "", "inputAnnotatorTypes"], [60, 2, 1, "", "inputCols"], [60, 3, 1, "", "inputColsValidation"], [60, 3, 1, "", "isDefined"], [60, 2, 1, "", "isLong"], [60, 3, 1, "", "isSet"], [60, 2, 1, "", "lazyAnnotator"], [60, 3, 1, "", "load"], [60, 3, 1, "", "loadSavedModel"], [60, 2, 1, "", "name"], [60, 2, 1, "", "optionalInputAnnotatorTypes"], [60, 2, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "outputCol"], [60, 3, 1, "", "pretrained"], [60, 3, 1, "", "read"], [60, 3, 1, "", "save"], [60, 2, 1, "", "scopeWindow"], [60, 3, 1, "", "set"], [60, 3, 1, "", "setBatchSize"], [60, 3, 1, "", "setCaseSensitive"], [60, 3, 1, "", "setChunkWeight"], [60, 3, 1, "", "setConfigProtoBytes"], [60, 3, 1, "", "setDimension"], [60, 3, 1, "", "setInputCols"], [60, 3, 1, "", "setIsLong"], [60, 3, 1, "", "setLazyAnnotator"], [60, 3, 1, "", "setOutputCol"], [60, 3, 1, "", "setParamValue"], [60, 3, 1, "", "setParams"], [60, 3, 1, "", "setScopeWindow"], [60, 3, 1, "", "setStorageRef"], [60, 3, 1, "", "setStrategy"], [60, 2, 1, "", "storageRef"], [60, 2, 1, "", "strategy"], [60, 3, 1, "", "transform"], [60, 2, 1, "", "uid"], [60, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[61, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[61, 2, 1, "", "batchSize"], [61, 2, 1, "", "caseSensitive"], [61, 3, 1, "", "clear"], [61, 2, 1, "", "configProtoBytes"], [61, 3, 1, "", "copy"], [61, 2, 1, "", "dimension"], [61, 2, 1, "", "entityWeights"], [61, 3, 1, "", "explainParam"], [61, 3, 1, "", "explainParams"], [61, 3, 1, "", "extractParamMap"], [61, 3, 1, "", "getBatchSize"], [61, 3, 1, "", "getCaseSensitive"], [61, 3, 1, "", "getDimension"], [61, 3, 1, "", "getInputCols"], [61, 3, 1, "", "getLazyAnnotator"], [61, 3, 1, "", "getOrDefault"], [61, 3, 1, "", "getOutputCol"], [61, 3, 1, "", "getParam"], [61, 3, 1, "", "getParamValue"], [61, 3, 1, "", "getStorageRef"], [61, 2, 1, "", "getter_attrs"], [61, 3, 1, "", "hasDefault"], [61, 3, 1, "", "hasParam"], [61, 2, 1, "", "inputAnnotatorTypes"], [61, 2, 1, "", "inputCols"], [61, 3, 1, "", "inputColsValidation"], [61, 3, 1, "", "isDefined"], [61, 2, 1, "", "isLong"], [61, 3, 1, "", "isSet"], [61, 2, 1, "", "lazyAnnotator"], [61, 3, 1, "", "load"], [61, 3, 1, "", "loadSavedModel"], [61, 2, 1, "", "maxSyntacticDistance"], [61, 2, 1, "", "name"], [61, 2, 1, "", "optionalInputAnnotatorTypes"], [61, 2, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "outputCol"], [61, 3, 1, "", "pretrained"], [61, 3, 1, "", "read"], [61, 3, 1, "", "save"], [61, 3, 1, "", "set"], [61, 3, 1, "", "setBatchSize"], [61, 3, 1, "", "setCaseSensitive"], [61, 3, 1, "", "setConfigProtoBytes"], [61, 3, 1, "", "setDimension"], [61, 3, 1, "", "setEntityWeights"], [61, 3, 1, "", "setInputCols"], [61, 3, 1, "", "setIsLong"], [61, 3, 1, "", "setLazyAnnotator"], [61, 3, 1, "", "setMaxSyntacticDistance"], [61, 3, 1, "", "setOutputCol"], [61, 3, 1, "", "setParamValue"], [61, 3, 1, "", "setParams"], [61, 3, 1, "", "setStorageRef"], [61, 3, 1, "", "setTargetEntities"], [61, 2, 1, "", "storageRef"], [61, 2, 1, "", "targetEntities"], [61, 3, 1, "", "transform"], [61, 2, 1, "", "uid"], [61, 3, 1, "", "write"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[62, 1, 1, "", "ExtractiveSummarization"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization": [[62, 3, 1, "", "clear"], [62, 3, 1, "", "copy"], [62, 3, 1, "", "explainParam"], [62, 3, 1, "", "explainParams"], [62, 3, 1, "", "extractParamMap"], [62, 3, 1, "", "getInputCols"], [62, 3, 1, "", "getLazyAnnotator"], [62, 3, 1, "", "getOrDefault"], [62, 3, 1, "", "getOutputCol"], [62, 3, 1, "", "getParam"], [62, 3, 1, "", "getParamValue"], [62, 2, 1, "", "getter_attrs"], [62, 3, 1, "", "hasDefault"], [62, 3, 1, "", "hasParam"], [62, 2, 1, "", "inputAnnotatorTypes"], [62, 2, 1, "", "inputCols"], [62, 3, 1, "", "inputColsValidation"], [62, 3, 1, "", "isDefined"], [62, 3, 1, "", "isSet"], [62, 2, 1, "", "lazyAnnotator"], [62, 3, 1, "", "load"], [62, 2, 1, "", "name"], [62, 2, 1, "", "optionalInputAnnotatorTypes"], [62, 2, 1, "", "outputAnnotatorType"], [62, 2, 1, "", "outputCol"], [62, 3, 1, "", "read"], [62, 2, 1, "", "returnSingleDocument"], [62, 3, 1, "", "save"], [62, 3, 1, "", "set"], [62, 3, 1, "", "setForceInputTypeValidation"], [62, 3, 1, "", "setInputCols"], [62, 3, 1, "", "setLazyAnnotator"], [62, 3, 1, "", "setOutputCol"], [62, 3, 1, "", "setParamValue"], [62, 3, 1, "", "setParams"], [62, 3, 1, "", "setReturnSingleDocument"], [62, 3, 1, "", "setSimilarityThreshold"], [62, 3, 1, "", "setSummarySize"], [62, 2, 1, "", "similarityThreshold"], [62, 2, 1, "", "skipLPInputColsValidation"], [62, 2, 1, "", "summarySize"], [62, 3, 1, "", "transform"], [62, 2, 1, "", "uid"], [62, 3, 1, "", "write"]], "sparknlp_jsl.annotator.er": [[64, 0, 0, "-", "entity_ruler_internal"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[64, 1, 1, "", "EntityRulerInternalApproach"], [64, 1, 1, "", "EntityRulerInternalModel"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach": [[64, 2, 1, "", "alphabet"], [64, 2, 1, "", "caseSensitive"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "copy"], [64, 2, 1, "", "enableInMemoryStorage"], [64, 3, 1, "", "explainParam"], [64, 3, 1, "", "explainParams"], [64, 3, 1, "", "extractParamMap"], [64, 3, 1, "", "fit"], [64, 3, 1, "", "fitMultiple"], [64, 3, 1, "", "getCaseSensitive"], [64, 3, 1, "", "getEnableInMemoryStorage"], [64, 3, 1, "", "getIncludeStorage"], [64, 3, 1, "", "getInputCols"], [64, 3, 1, "", "getLazyAnnotator"], [64, 3, 1, "", "getOrDefault"], [64, 3, 1, "", "getOutputCol"], [64, 3, 1, "", "getParam"], [64, 3, 1, "", "getParamValue"], [64, 3, 1, "", "getStoragePath"], [64, 3, 1, "", "getStorageRef"], [64, 2, 1, "", "getter_attrs"], [64, 3, 1, "", "hasDefault"], [64, 3, 1, "", "hasParam"], [64, 2, 1, "", "includeStorage"], [64, 2, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "inputCols"], [64, 3, 1, "", "inputColsValidation"], [64, 3, 1, "", "isDefined"], [64, 3, 1, "", "isSet"], [64, 2, 1, "", "lazyAnnotator"], [64, 3, 1, "", "load"], [64, 2, 1, "", "name"], [64, 2, 1, "", "optionalInputAnnotatorTypes"], [64, 2, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "outputCol"], [64, 2, 1, "", "patternsResource"], [64, 3, 1, "", "read"], [64, 3, 1, "", "save"], [64, 2, 1, "", "sentenceMatch"], [64, 3, 1, "", "set"], [64, 3, 1, "", "setAlphabetResource"], [64, 3, 1, "", "setCaseSensitive"], [64, 3, 1, "", "setEnableInMemoryStorage"], [64, 3, 1, "", "setForceInputTypeValidation"], [64, 3, 1, "", "setIncludeStorage"], [64, 3, 1, "", "setInputCols"], [64, 3, 1, "", "setLazyAnnotator"], [64, 3, 1, "", "setOutputCol"], [64, 3, 1, "", "setParamValue"], [64, 3, 1, "", "setPatternsResource"], [64, 3, 1, "", "setSentenceMatch"], [64, 3, 1, "", "setStoragePath"], [64, 3, 1, "", "setStorageRef"], [64, 3, 1, "", "setUseStorage"], [64, 2, 1, "", "skipLPInputColsValidation"], [64, 2, 1, "", "storagePath"], [64, 2, 1, "", "storageRef"], [64, 2, 1, "", "uid"], [64, 2, 1, "", "useStorage"], [64, 3, 1, "", "write"]], "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel": [[64, 2, 1, "", "caseSensitive"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "copy"], [64, 2, 1, "", "database"], [64, 3, 1, "", "explainParam"], [64, 3, 1, "", "explainParams"], [64, 3, 1, "", "extractParamMap"], [64, 3, 1, "", "getCaseSensitive"], [64, 3, 1, "", "getInputCols"], [64, 3, 1, "", "getLazyAnnotator"], [64, 3, 1, "", "getOrDefault"], [64, 3, 1, "", "getOutputCol"], [64, 3, 1, "", "getParam"], [64, 3, 1, "", "getParamValue"], [64, 3, 1, "", "getStorageRef"], [64, 2, 1, "", "getter_attrs"], [64, 3, 1, "", "hasDefault"], [64, 3, 1, "", "hasParam"], [64, 2, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "inputCols"], [64, 3, 1, "", "inputColsValidation"], [64, 3, 1, "", "isDefined"], [64, 3, 1, "", "isSet"], [64, 2, 1, "", "lazyAnnotator"], [64, 3, 1, "", "load"], [64, 3, 1, "", "loadStorage"], [64, 3, 1, "", "loadStorages"], [64, 2, 1, "", "name"], [64, 2, 1, "", "optionalInputAnnotatorTypes"], [64, 2, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "outputCol"], [64, 3, 1, "", "pretrained"], [64, 3, 1, "", "read"], [64, 3, 1, "", "save"], [64, 3, 1, "", "saveStorage"], [64, 3, 1, "", "set"], [64, 3, 1, "", "setCaseSensitive"], [64, 3, 1, "", "setForceInputTypeValidation"], [64, 3, 1, "", "setInputCols"], [64, 3, 1, "", "setLazyAnnotator"], [64, 3, 1, "", "setOutputCol"], [64, 3, 1, "", "setParamValue"], [64, 3, 1, "", "setParams"], [64, 3, 1, "", "setStorageRef"], [64, 2, 1, "", "skipLPInputColsValidation"], [64, 2, 1, "", "storageRef"], [64, 3, 1, "", "transform"], [64, 2, 1, "", "uid"], [64, 3, 1, "", "write"]], "sparknlp_jsl.annotator.feature_assembler": [[66, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[66, 3, 1, "", "clear"], [66, 3, 1, "", "copy"], [66, 3, 1, "", "explainParam"], [66, 3, 1, "", "explainParams"], [66, 3, 1, "", "extractParamMap"], [66, 3, 1, "", "getInputCols"], [66, 3, 1, "", "getLazyAnnotator"], [66, 3, 1, "", "getOrDefault"], [66, 3, 1, "", "getOutputCol"], [66, 3, 1, "", "getParam"], [66, 3, 1, "", "getParamValue"], [66, 2, 1, "", "getter_attrs"], [66, 3, 1, "", "hasDefault"], [66, 3, 1, "", "hasParam"], [66, 2, 1, "", "inputAnnotatorTypes"], [66, 2, 1, "", "inputCols"], [66, 3, 1, "", "inputColsValidation"], [66, 3, 1, "", "isDefined"], [66, 3, 1, "", "isSet"], [66, 2, 1, "", "lazyAnnotator"], [66, 3, 1, "", "load"], [66, 2, 1, "", "name"], [66, 2, 1, "", "optionalInputAnnotatorTypes"], [66, 2, 1, "", "outputAnnotatorType"], [66, 2, 1, "", "outputCol"], [66, 3, 1, "", "read"], [66, 3, 1, "", "save"], [66, 3, 1, "", "set"], [66, 3, 1, "", "setForceInputTypeValidation"], [66, 3, 1, "", "setInputCols"], [66, 3, 1, "", "setLazyAnnotator"], [66, 3, 1, "", "setOutputCol"], [66, 3, 1, "", "setParamValue"], [66, 3, 1, "", "setParams"], [66, 2, 1, "", "skipLPInputColsValidation"], [66, 3, 1, "", "transform"], [66, 2, 1, "", "uid"], [66, 3, 1, "", "write"]], "sparknlp_jsl.annotator.fhir": [[67, 0, 0, "-", "fhir_deIdentification"]], "sparknlp_jsl.annotator.fhir.fhir_deIdentification": [[67, 1, 1, "", "FhirDeIdentification"]], "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification": [[67, 2, 1, "", "ageRanges"], [67, 3, 1, "", "clear"], [67, 3, 1, "", "copy"], [67, 2, 1, "", "dateEntities"], [67, 2, 1, "", "dateFormats"], [67, 2, 1, "", "days"], [67, 3, 1, "", "deidentify"], [67, 3, 1, "", "deidentify_list"], [67, 3, 1, "", "deidentify_str"], [67, 3, 1, "", "explainParam"], [67, 3, 1, "", "explainParams"], [67, 3, 1, "", "extractParamMap"], [67, 2, 1, "", "fhirVersion"], [67, 2, 1, "", "fixedMaskLength"], [67, 2, 1, "", "genderAwareness"], [67, 3, 1, "", "getInputCol"], [67, 3, 1, "", "getMappingRules"], [67, 3, 1, "", "getOrDefault"], [67, 3, 1, "", "getOutputCol"], [67, 3, 1, "", "getParam"], [67, 3, 1, "", "getParamValue"], [67, 2, 1, "", "getter_attrs"], [67, 3, 1, "", "hasDefault"], [67, 3, 1, "", "hasParam"], [67, 2, 1, "", "inputCol"], [67, 3, 1, "", "isDefined"], [67, 3, 1, "", "isSet"], [67, 2, 1, "", "keepMonth"], [67, 2, 1, "", "keepYear"], [67, 2, 1, "", "language"], [67, 3, 1, "", "load"], [67, 2, 1, "", "maskingPolicy"], [67, 2, 1, "", "mode"], [67, 2, 1, "", "name"], [67, 2, 1, "", "obfuscateRefSource"], [67, 2, 1, "", "outputAnnotatorType"], [67, 2, 1, "", "outputCol"], [67, 2, 1, "", "parserType"], [67, 3, 1, "", "pretrained"], [67, 3, 1, "", "read"], [67, 2, 1, "", "sameLengthFormattedEntities"], [67, 3, 1, "", "save"], [67, 2, 1, "", "seed"], [67, 3, 1, "", "set"], [67, 3, 1, "", "setAgeRanges"], [67, 3, 1, "", "setCustomFakers"], [67, 3, 1, "", "setDateEntities"], [67, 3, 1, "", "setDateFormats"], [67, 3, 1, "", "setDays"], [67, 3, 1, "", "setFhirVersion"], [67, 3, 1, "", "setFixedMaskLength"], [67, 3, 1, "", "setGenderAwareness"], [67, 3, 1, "", "setInputCol"], [67, 3, 1, "", "setKeepMonth"], [67, 3, 1, "", "setKeepYear"], [67, 3, 1, "", "setLanguage"], [67, 3, 1, "", "setMappingRules"], [67, 3, 1, "", "setMaskingPolicy"], [67, 3, 1, "", "setMode"], [67, 3, 1, "", "setObfuscateRefSource"], [67, 3, 1, "", "setOutputCol"], [67, 3, 1, "", "setParamValue"], [67, 3, 1, "", "setParams"], [67, 3, 1, "", "setParserType"], [67, 3, 1, "", "setSameLengthFormattedEntities"], [67, 3, 1, "", "setSeed"], [67, 3, 1, "", "setSelectiveObfuscationModes"], [67, 3, 1, "", "setUnnormalizedDateMode"], [67, 3, 1, "", "transform"], [67, 2, 1, "", "uid"], [67, 2, 1, "", "unnormalizedDateMode"], [67, 3, 1, "", "write"]], "sparknlp_jsl.annotator.filtering_params": [[69, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[69, 2, 1, "", "blackList"], [69, 2, 1, "", "caseSensitive"], [69, 2, 1, "", "criteria"], [69, 2, 1, "", "filterValue"], [69, 2, 1, "", "regex"], [69, 3, 1, "", "setBlackList"], [69, 3, 1, "", "setCaseSensitive"], [69, 3, 1, "", "setCriteria"], [69, 3, 1, "", "setDenyList"], [69, 3, 1, "", "setFilterValue"], [69, 3, 1, "", "setRegex"], [69, 3, 1, "", "setWhiteList"], [69, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.flattener": [[70, 1, 1, "", "Flattener"]], "sparknlp_jsl.annotator.flattener.Flattener": [[70, 2, 1, "", "cleanAnnotations"], [70, 3, 1, "", "clear"], [70, 3, 1, "", "copy"], [70, 3, 1, "", "explainParam"], [70, 3, 1, "", "explainParams"], [70, 3, 1, "", "extractParamMap"], [70, 2, 1, "", "flattenExplodedColumns"], [70, 3, 1, "", "getInputCols"], [70, 3, 1, "", "getOrDefault"], [70, 3, 1, "", "getParam"], [70, 3, 1, "", "getParamValue"], [70, 2, 1, "", "getter_attrs"], [70, 3, 1, "", "hasDefault"], [70, 3, 1, "", "hasParam"], [70, 2, 1, "", "inputCols"], [70, 3, 1, "", "isDefined"], [70, 3, 1, "", "isSet"], [70, 2, 1, "", "keepOriginalColumns"], [70, 3, 1, "", "load"], [70, 2, 1, "", "name"], [70, 2, 1, "", "orderByColumn"], [70, 2, 1, "", "orderDescending"], [70, 2, 1, "", "outputAnnotatorType"], [70, 3, 1, "", "read"], [70, 3, 1, "", "save"], [70, 3, 1, "", "set"], [70, 3, 1, "", "setCleanAnnotations"], [70, 3, 1, "", "setExplodeSelectedFields"], [70, 3, 1, "", "setFlattenExplodedColumns"], [70, 3, 1, "", "setInputCols"], [70, 3, 1, "", "setKeepOriginalColumns"], [70, 3, 1, "", "setOrderByColumn"], [70, 3, 1, "", "setOrderDescending"], [70, 3, 1, "", "setParamValue"], [70, 3, 1, "", "setParams"], [70, 3, 1, "", "transform"], [70, 2, 1, "", "uid"], [70, 3, 1, "", "write"]], "sparknlp_jsl.annotator.generic_classifier": [[71, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[71, 1, 1, "", "GenericClassifierApproach"], [71, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[71, 2, 1, "", "batchSize"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "copy"], [71, 2, 1, "", "datasetInfo"], [71, 2, 1, "", "doExceptionHandling"], [71, 2, 1, "", "dropout"], [71, 2, 1, "", "engine"], [71, 2, 1, "", "epochsN"], [71, 3, 1, "", "explainParam"], [71, 3, 1, "", "explainParams"], [71, 3, 1, "", "extractParamMap"], [71, 2, 1, "", "featureScaling"], [71, 3, 1, "", "fit"], [71, 3, 1, "", "fitMultiple"], [71, 2, 1, "", "fixImbalance"], [71, 3, 1, "", "getEngine"], [71, 3, 1, "", "getInputCols"], [71, 3, 1, "", "getLazyAnnotator"], [71, 3, 1, "", "getOrDefault"], [71, 3, 1, "", "getOutputCol"], [71, 3, 1, "", "getParam"], [71, 3, 1, "", "getParamValue"], [71, 2, 1, "", "getter_attrs"], [71, 3, 1, "", "hasDefault"], [71, 3, 1, "", "hasParam"], [71, 2, 1, "", "inputAnnotatorTypes"], [71, 2, 1, "", "inputCols"], [71, 3, 1, "", "inputColsValidation"], [71, 3, 1, "", "isDefined"], [71, 3, 1, "", "isSet"], [71, 2, 1, "", "labelColumn"], [71, 2, 1, "", "lazyAnnotator"], [71, 2, 1, "", "learningRate"], [71, 3, 1, "", "load"], [71, 2, 1, "", "modelFile"], [71, 2, 1, "", "multiClass"], [71, 2, 1, "", "optionalInputAnnotatorTypes"], [71, 2, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "outputCol"], [71, 2, 1, "", "outputLogsPath"], [71, 3, 1, "", "read"], [71, 3, 1, "", "save"], [71, 3, 1, "", "set"], [71, 3, 1, "", "setBatchSize"], [71, 3, 1, "", "setDatasetInfo"], [71, 3, 1, "", "setDoExceptionHandling"], [71, 3, 1, "", "setDropout"], [71, 3, 1, "", "setEpochsNumber"], [71, 3, 1, "", "setFeatureScaling"], [71, 3, 1, "", "setFixImbalance"], [71, 3, 1, "", "setForceInputTypeValidation"], [71, 3, 1, "", "setInputCols"], [71, 3, 1, "", "setLabelCol"], [71, 3, 1, "", "setLazyAnnotator"], [71, 3, 1, "", "setLearningRate"], [71, 3, 1, "", "setModelFile"], [71, 3, 1, "", "setMultiClass"], [71, 3, 1, "", "setOutputCol"], [71, 3, 1, "", "setOutputLogsPath"], [71, 3, 1, "", "setParamValue"], [71, 3, 1, "", "setValidationSplit"], [71, 2, 1, "", "skipLPInputColsValidation"], [71, 2, 1, "", "uid"], [71, 2, 1, "", "validationSplit"], [71, 3, 1, "", "write"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[71, 2, 1, "", "classes"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "copy"], [71, 2, 1, "", "datasetInfo"], [71, 2, 1, "", "doExceptionHandling"], [71, 3, 1, "", "explainParam"], [71, 3, 1, "", "explainParams"], [71, 3, 1, "", "extractParamMap"], [71, 2, 1, "", "featureScaling"], [71, 3, 1, "", "getInputCols"], [71, 3, 1, "", "getLazyAnnotator"], [71, 3, 1, "", "getOrDefault"], [71, 3, 1, "", "getOutputCol"], [71, 3, 1, "", "getParam"], [71, 3, 1, "", "getParamValue"], [71, 2, 1, "", "getter_attrs"], [71, 3, 1, "", "hasDefault"], [71, 3, 1, "", "hasParam"], [71, 2, 1, "", "inputAnnotatorTypes"], [71, 2, 1, "", "inputCols"], [71, 3, 1, "", "inputColsValidation"], [71, 3, 1, "", "isDefined"], [71, 3, 1, "", "isSet"], [71, 2, 1, "", "lazyAnnotator"], [71, 3, 1, "", "load"], [71, 2, 1, "", "multiClass"], [71, 2, 1, "", "name"], [71, 2, 1, "", "optionalInputAnnotatorTypes"], [71, 2, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "outputCol"], [71, 3, 1, "", "pretrained"], [71, 3, 1, "", "read"], [71, 3, 1, "", "save"], [71, 3, 1, "", "set"], [71, 3, 1, "", "setDatasetInfo"], [71, 3, 1, "", "setDoExceptionHandling"], [71, 3, 1, "", "setFeatureScaling"], [71, 3, 1, "", "setForceInputTypeValidation"], [71, 3, 1, "", "setInputCols"], [71, 3, 1, "", "setLazyAnnotator"], [71, 3, 1, "", "setMultiClass"], [71, 3, 1, "", "setOutputCol"], [71, 3, 1, "", "setParamValue"], [71, 3, 1, "", "setParams"], [71, 2, 1, "", "skipLPInputColsValidation"], [71, 3, 1, "", "transform"], [71, 2, 1, "", "uid"], [71, 3, 1, "", "write"]], "sparknlp_jsl.annotator.handle_exception_params": [[73, 1, 1, "", "HandleExceptionParams"]], "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams": [[73, 2, 1, "", "doExceptionHandling"], [73, 3, 1, "", "setDoExceptionHandling"]], "sparknlp_jsl.annotator.matcher": [[76, 0, 0, "-", "text_matcher_internal"], [77, 0, 0, "-", "text_matcher_params"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[76, 1, 1, "", "TextMatcherInternal"], [76, 1, 1, "", "TextMatcherInternalModel"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal": [[76, 2, 1, "", "buildFromTokens"], [76, 2, 1, "", "caseSensitive"], [76, 2, 1, "", "cleanKeywords"], [76, 2, 1, "", "cleanStopWords"], [76, 3, 1, "", "clear"], [76, 3, 1, "", "copy"], [76, 2, 1, "", "delimiter"], [76, 2, 1, "", "enableLemmatizer"], [76, 2, 1, "", "enableStemmer"], [76, 2, 1, "", "entities"], [76, 2, 1, "", "entityValue"], [76, 2, 1, "", "excludePunctuation"], [76, 2, 1, "", "excludeRegexPatterns"], [76, 3, 1, "", "explainParam"], [76, 3, 1, "", "explainParams"], [76, 3, 1, "", "extractParamMap"], [76, 3, 1, "", "fit"], [76, 3, 1, "", "fitMultiple"], [76, 3, 1, "", "getCleanKeywords"], [76, 3, 1, "", "getExcludeRegexPatterns"], [76, 3, 1, "", "getInputCols"], [76, 3, 1, "", "getLazyAnnotator"], [76, 3, 1, "", "getOrDefault"], [76, 3, 1, "", "getOutputCol"], [76, 3, 1, "", "getParam"], [76, 3, 1, "", "getParamValue"], [76, 3, 1, "", "getReturnChunks"], [76, 3, 1, "", "getSafeKeywords"], [76, 3, 1, "", "getStopWords"], [76, 2, 1, "", "getter_attrs"], [76, 3, 1, "", "hasDefault"], [76, 3, 1, "", "hasParam"], [76, 2, 1, "", "inputAnnotatorTypes"], [76, 2, 1, "", "inputCols"], [76, 3, 1, "", "inputColsValidation"], [76, 3, 1, "", "isDefined"], [76, 3, 1, "", "isSet"], [76, 2, 1, "", "lazyAnnotator"], [76, 2, 1, "", "lemmatizerDictionary"], [76, 3, 1, "", "load"], [76, 2, 1, "", "mergeOverlapping"], [76, 2, 1, "", "optionalInputAnnotatorTypes"], [76, 2, 1, "", "outputAnnotatorType"], [76, 2, 1, "", "outputCol"], [76, 3, 1, "", "read"], [76, 2, 1, "", "returnChunks"], [76, 2, 1, "", "safeKeywords"], [76, 3, 1, "", "save"], [76, 3, 1, "", "set"], [76, 3, 1, "", "setBuildFromTokens"], [76, 3, 1, "", "setCaseSensitive"], [76, 3, 1, "", "setCleanKeywords"], [76, 3, 1, "", "setCleanStopWords"], [76, 3, 1, "", "setDelimiter"], [76, 3, 1, "", "setEnableLemmatizer"], [76, 3, 1, "", "setEnableStemmer"], [76, 3, 1, "", "setEntities"], [76, 3, 1, "", "setEntityValue"], [76, 3, 1, "", "setExcludePunctuation"], [76, 3, 1, "", "setExcludeRegexPatterns"], [76, 3, 1, "", "setForceInputTypeValidation"], [76, 3, 1, "", "setInputCols"], [76, 3, 1, "", "setLazyAnnotator"], [76, 3, 1, "", "setLemmatizerDictionary"], [76, 3, 1, "", "setMergeOverlapping"], [76, 3, 1, "", "setOutputCol"], [76, 3, 1, "", "setParamValue"], [76, 3, 1, "", "setReturnChunks"], [76, 3, 1, "", "setSafeKeywords"], [76, 3, 1, "", "setShuffleEntitySubTokens"], [76, 3, 1, "", "setSkipMatcherAugmentation"], [76, 3, 1, "", "setSkipSourceTextAugmentation"], [76, 3, 1, "", "setStopWords"], [76, 2, 1, "", "shuffleEntitySubTokens"], [76, 2, 1, "", "skipLPInputColsValidation"], [76, 2, 1, "", "skipMatcherAugmentation"], [76, 2, 1, "", "skipSourceTextAugmentation"], [76, 2, 1, "", "stopWords"], [76, 2, 1, "", "uid"], [76, 3, 1, "", "write"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel": [[76, 2, 1, "", "buildFromTokens"], [76, 2, 1, "", "caseSensitive"], [76, 2, 1, "", "cleanKeywords"], [76, 2, 1, "", "cleanStopWords"], [76, 3, 1, "", "clear"], [76, 3, 1, "", "copy"], [76, 2, 1, "", "delimiter"], [76, 2, 1, "", "enableLemmatizer"], [76, 2, 1, "", "enableStemmer"], [76, 2, 1, "", "entityValue"], [76, 2, 1, "", "excludePunctuation"], [76, 2, 1, "", "excludeRegexPatterns"], [76, 3, 1, "", "explainParam"], [76, 3, 1, "", "explainParams"], [76, 3, 1, "", "extractParamMap"], [76, 3, 1, "", "getCaseSensitive"], [76, 3, 1, "", "getCleanKeywords"], [76, 3, 1, "", "getDelimiter"], [76, 3, 1, "", "getExcludeRegexPatterns"], [76, 3, 1, "", "getInputCols"], [76, 3, 1, "", "getLazyAnnotator"], [76, 3, 1, "", "getOrDefault"], [76, 3, 1, "", "getOutputCol"], [76, 3, 1, "", "getParam"], [76, 3, 1, "", "getParamValue"], [76, 3, 1, "", "getReturnChunks"], [76, 3, 1, "", "getSafeKeywords"], [76, 3, 1, "", "getStopWords"], [76, 2, 1, "", "getter_attrs"], [76, 3, 1, "", "hasDefault"], [76, 3, 1, "", "hasParam"], [76, 2, 1, "", "inputAnnotatorTypes"], [76, 2, 1, "", "inputCols"], [76, 3, 1, "", "inputColsValidation"], [76, 3, 1, "", "isDefined"], [76, 3, 1, "", "isSet"], [76, 2, 1, "", "lazyAnnotator"], [76, 3, 1, "", "load"], [76, 2, 1, "", "mergeOverlapping"], [76, 2, 1, "", "name"], [76, 2, 1, "", "optionalInputAnnotatorTypes"], [76, 2, 1, "", "outputAnnotatorType"], [76, 2, 1, "", "outputCol"], [76, 3, 1, "", "pretrained"], [76, 3, 1, "", "read"], [76, 2, 1, "", "returnChunks"], [76, 2, 1, "", "safeKeywords"], [76, 3, 1, "", "save"], [76, 2, 1, "", "searchTrie"], [76, 2, 1, "", "searchTrieInternal"], [76, 3, 1, "", "set"], [76, 3, 1, "", "setBuildFromTokens"], [76, 3, 1, "", "setCleanKeywords"], [76, 3, 1, "", "setCleanStopWords"], [76, 3, 1, "", "setDelimiter"], [76, 3, 1, "", "setEnableLemmatizer"], [76, 3, 1, "", "setEnableStemmer"], [76, 3, 1, "", "setEntityValue"], [76, 3, 1, "", "setExcludePunctuation"], [76, 3, 1, "", "setExcludeRegexPatterns"], [76, 3, 1, "", "setForceInputTypeValidation"], [76, 3, 1, "", "setInputCols"], [76, 3, 1, "", "setLazyAnnotator"], [76, 3, 1, "", "setMergeOverlapping"], [76, 3, 1, "", "setOutputCol"], [76, 3, 1, "", "setParamValue"], [76, 3, 1, "", "setParams"], [76, 3, 1, "", "setReturnChunks"], [76, 3, 1, "", "setSafeKeywords"], [76, 3, 1, "", "setSkipMatcherAugmentation"], [76, 3, 1, "", "setSkipSourceTextAugmentation"], [76, 3, 1, "", "setStopWords"], [76, 2, 1, "", "skipLPInputColsValidation"], [76, 2, 1, "", "skipMatcherAugmentation"], [76, 2, 1, "", "skipSourceTextAugmentation"], [76, 2, 1, "", "stopWords"], [76, 3, 1, "", "transform"], [76, 2, 1, "", "uid"], [76, 3, 1, "", "write"]], "sparknlp_jsl.annotator.matcher.text_matcher_params": [[77, 1, 1, "", "TextMatcherParams"]], "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams": [[77, 2, 1, "", "cleanKeywords"], [77, 2, 1, "", "cleanStopWords"], [77, 2, 1, "", "enableLemmatizer"], [77, 2, 1, "", "enableStemmer"], [77, 2, 1, "", "excludePunctuation"], [77, 2, 1, "", "excludeRegexPatterns"], [77, 3, 1, "", "getCleanKeywords"], [77, 3, 1, "", "getExcludeRegexPatterns"], [77, 3, 1, "", "getReturnChunks"], [77, 3, 1, "", "getSafeKeywords"], [77, 3, 1, "", "getStopWords"], [77, 2, 1, "", "returnChunks"], [77, 2, 1, "", "safeKeywords"], [77, 3, 1, "", "setCleanKeywords"], [77, 3, 1, "", "setCleanStopWords"], [77, 3, 1, "", "setEnableLemmatizer"], [77, 3, 1, "", "setEnableStemmer"], [77, 3, 1, "", "setExcludePunctuation"], [77, 3, 1, "", "setExcludeRegexPatterns"], [77, 3, 1, "", "setReturnChunks"], [77, 3, 1, "", "setSafeKeywords"], [77, 3, 1, "", "setSkipMatcherAugmentation"], [77, 3, 1, "", "setSkipSourceTextAugmentation"], [77, 3, 1, "", "setStopWords"], [77, 2, 1, "", "skipMatcherAugmentation"], [77, 2, 1, "", "skipSourceTextAugmentation"], [77, 2, 1, "", "stopWords"]], "sparknlp_jsl.annotator.medical_llm": [[79, 0, 0, "-", "medical_llm"]], "sparknlp_jsl.annotator.medical_llm.medical_llm": [[79, 1, 1, "", "MedicalLLM"]], "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM": [[79, 2, 1, "", "batchSize"], [79, 2, 1, "", "cachePrompt"], [79, 2, 1, "", "chatTemplate"], [79, 3, 1, "", "clear"], [79, 3, 1, "", "copy"], [79, 2, 1, "", "defragmentationThreshold"], [79, 2, 1, "", "disableTokenIds"], [79, 2, 1, "", "dynamicTemperatureExponent"], [79, 2, 1, "", "dynamicTemperatureRange"], [79, 2, 1, "", "embedding"], [79, 3, 1, "", "explainParam"], [79, 3, 1, "", "explainParams"], [79, 3, 1, "", "extractParamMap"], [79, 2, 1, "", "flashAttention"], [79, 2, 1, "", "frequencyPenalty"], [79, 3, 1, "", "getBatchSize"], [79, 3, 1, "", "getInputCols"], [79, 3, 1, "", "getLazyAnnotator"], [79, 3, 1, "", "getMetadata"], [79, 3, 1, "", "getOrDefault"], [79, 3, 1, "", "getOutputCol"], [79, 3, 1, "", "getParam"], [79, 3, 1, "", "getParamValue"], [79, 2, 1, "", "getter_attrs"], [79, 2, 1, "", "gpuSplitMode"], [79, 2, 1, "", "grammar"], [79, 2, 1, "", "grpAttnN"], [79, 2, 1, "", "grpAttnW"], [79, 3, 1, "", "hasDefault"], [79, 3, 1, "", "hasParam"], [79, 2, 1, "", "ignoreEos"], [79, 2, 1, "", "inputAnnotatorTypes"], [79, 2, 1, "", "inputCols"], [79, 3, 1, "", "inputColsValidation"], [79, 2, 1, "", "inputPrefix"], [79, 2, 1, "", "inputPrefixBos"], [79, 2, 1, "", "inputSuffix"], [79, 3, 1, "", "isDefined"], [79, 3, 1, "", "isSet"], [79, 2, 1, "", "lazyAnnotator"], [79, 3, 1, "", "load"], [79, 3, 1, "", "loadSavedModel"], [79, 2, 1, "", "lookupCacheDynamicFilePath"], [79, 2, 1, "", "lookupCacheStaticFilePath"], [79, 2, 1, "", "mainGpu"], [79, 2, 1, "", "minKeep"], [79, 2, 1, "", "minP"], [79, 2, 1, "", "miroStat"], [79, 2, 1, "", "miroStatEta"], [79, 2, 1, "", "miroStatTau"], [79, 2, 1, "", "modelAlias"], [79, 2, 1, "", "modelDraft"], [79, 2, 1, "", "nBatch"], [79, 2, 1, "", "nChunks"], [79, 2, 1, "", "nCtx"], [79, 2, 1, "", "nDraft"], [79, 2, 1, "", "nGpuLayers"], [79, 2, 1, "", "nGpuLayersDraft"], [79, 2, 1, "", "nKeep"], [79, 2, 1, "", "nPredict"], [79, 2, 1, "", "nProbs"], [79, 2, 1, "", "nSequences"], [79, 2, 1, "", "nThreads"], [79, 2, 1, "", "nThreadsBatch"], [79, 2, 1, "", "nThreadsBatchDraft"], [79, 2, 1, "", "nThreadsDraft"], [79, 2, 1, "", "nUbatch"], [79, 2, 1, "", "name"], [79, 2, 1, "", "noKvOffload"], [79, 2, 1, "", "numaStrategy"], [79, 2, 1, "", "optionalInputAnnotatorTypes"], [79, 2, 1, "", "outputAnnotatorType"], [79, 2, 1, "", "outputCol"], [79, 2, 1, "", "pSplit"], [79, 2, 1, "", "penalizeNl"], [79, 2, 1, "", "penaltyPrompt"], [79, 2, 1, "", "poolingType"], [79, 2, 1, "", "presencePenalty"], [79, 3, 1, "", "pretrained"], [79, 3, 1, "", "read"], [79, 2, 1, "", "repeatLastN"], [79, 2, 1, "", "repeatPenalty"], [79, 2, 1, "", "ropeFreqBase"], [79, 2, 1, "", "ropeFreqScale"], [79, 2, 1, "", "ropeScalingType"], [79, 2, 1, "", "samplers"], [79, 3, 1, "", "save"], [79, 2, 1, "", "seed"], [79, 3, 1, "", "set"], [79, 3, 1, "", "setBatchSize"], [79, 3, 1, "", "setCachePrompt"], [79, 3, 1, "", "setChatTemplate"], [79, 3, 1, "", "setDefragmentationThreshold"], [79, 3, 1, "", "setDisableTokenIds"], [79, 3, 1, "", "setDynamicTemperatureExponent"], [79, 3, 1, "", "setDynamicTemperatureRange"], [79, 3, 1, "", "setEmbedding"], [79, 3, 1, "", "setFlashAttention"], [79, 3, 1, "", "setFrequencyPenalty"], [79, 3, 1, "", "setGpuSplitMode"], [79, 3, 1, "", "setGrammar"], [79, 3, 1, "", "setGrpAttnN"], [79, 3, 1, "", "setGrpAttnW"], [79, 3, 1, "", "setIgnoreEos"], [79, 3, 1, "", "setInputCols"], [79, 3, 1, "", "setInputPrefix"], [79, 3, 1, "", "setInputPrefixBos"], [79, 3, 1, "", "setInputSuffix"], [79, 3, 1, "", "setLazyAnnotator"], [79, 3, 1, "", "setLookupCacheDynamicFilePath"], [79, 3, 1, "", "setLookupCacheStaticFilePath"], [79, 3, 1, "", "setLoraAdapters"], [79, 3, 1, "", "setMainGpu"], [79, 3, 1, "", "setMinKeep"], [79, 3, 1, "", "setMinP"], [79, 3, 1, "", "setMiroStat"], [79, 3, 1, "", "setMiroStatEta"], [79, 3, 1, "", "setMiroStatTau"], [79, 3, 1, "", "setModelAlias"], [79, 3, 1, "", "setModelDraft"], [79, 3, 1, "", "setNBatch"], [79, 3, 1, "", "setNChunks"], [79, 3, 1, "", "setNCtx"], [79, 3, 1, "", "setNDraft"], [79, 3, 1, "", "setNGpuLayers"], [79, 3, 1, "", "setNGpuLayersDraft"], [79, 3, 1, "", "setNKeep"], [79, 3, 1, "", "setNParallel"], [79, 3, 1, "", "setNPredict"], [79, 3, 1, "", "setNProbs"], [79, 3, 1, "", "setNSequences"], [79, 3, 1, "", "setNThreads"], [79, 3, 1, "", "setNThreadsBatch"], [79, 3, 1, "", "setNThreadsBatchDraft"], [79, 3, 1, "", "setNThreadsDraft"], [79, 3, 1, "", "setNUbatch"], [79, 3, 1, "", "setNoKvOffload"], [79, 3, 1, "", "setNumaStrategy"], [79, 3, 1, "", "setOutputCol"], [79, 3, 1, "", "setPSplit"], [79, 3, 1, "", "setParamValue"], [79, 3, 1, "", "setParams"], [79, 3, 1, "", "setPenalizeNl"], [79, 3, 1, "", "setPenaltyPrompt"], [79, 3, 1, "", "setPoolingType"], [79, 3, 1, "", "setPresencePenalty"], [79, 3, 1, "", "setRepeatLastN"], [79, 3, 1, "", "setRepeatPenalty"], [79, 3, 1, "", "setRopeFreqBase"], [79, 3, 1, "", "setRopeFreqScale"], [79, 3, 1, "", "setRopeScalingType"], [79, 3, 1, "", "setSamplers"], [79, 3, 1, "", "setSeed"], [79, 3, 1, "", "setStopStrings"], [79, 3, 1, "", "setSystemPrompt"], [79, 3, 1, "", "setTemperature"], [79, 3, 1, "", "setTensorSplit"], [79, 3, 1, "", "setTfsZ"], [79, 3, 1, "", "setTokenBias"], [79, 3, 1, "", "setTokenIdBias"], [79, 3, 1, "", "setTopK"], [79, 3, 1, "", "setTopP"], [79, 3, 1, "", "setTypicalP"], [79, 3, 1, "", "setUseChatTemplate"], [79, 3, 1, "", "setUseMlock"], [79, 3, 1, "", "setUseMmap"], [79, 3, 1, "", "setYarnAttnFactor"], [79, 3, 1, "", "setYarnBetaFast"], [79, 3, 1, "", "setYarnBetaSlow"], [79, 3, 1, "", "setYarnExtFactor"], [79, 3, 1, "", "setYarnOrigCtx"], [79, 2, 1, "", "stopStrings"], [79, 2, 1, "", "systemPrompt"], [79, 2, 1, "", "temperature"], [79, 2, 1, "", "tensorSplit"], [79, 2, 1, "", "tfsZ"], [79, 2, 1, "", "topK"], [79, 2, 1, "", "topP"], [79, 3, 1, "", "transform"], [79, 2, 1, "", "typicalP"], [79, 2, 1, "", "uid"], [79, 2, 1, "", "useChatTemplate"], [79, 2, 1, "", "useMlock"], [79, 2, 1, "", "useMmap"], [79, 3, 1, "", "write"], [79, 2, 1, "", "yarnAttnFactor"], [79, 2, 1, "", "yarnBetaFast"], [79, 2, 1, "", "yarnBetaSlow"], [79, 2, 1, "", "yarnExtFactor"], [79, 2, 1, "", "yarnOrigCtx"]], "sparknlp_jsl.annotator.merge": [[80, 0, 0, "-", "chunk_merge"], [82, 0, 0, "-", "re_chunk_merger"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[80, 1, 1, "", "ChunkMergeApproach"], [80, 1, 1, "", "ChunkMergeModel"], [80, 1, 1, "", "MergeCommonParams"], [80, 1, 1, "", "MergeFeatureParams"], [80, 1, 1, "", "MergePrioritizationParams"], [80, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[80, 2, 1, "", "blackList"], [80, 2, 1, "", "caseSensitive"], [80, 2, 1, "", "chunkPrecedence"], [80, 2, 1, "", "chunkPrecedenceValuePrioritization"], [80, 3, 1, "", "clear"], [80, 3, 1, "", "copy"], [80, 2, 1, "", "criteria"], [80, 2, 1, "", "defaultConfidence"], [80, 2, 1, "", "doExceptionHandling"], [80, 2, 1, "", "entitiesConfidenceResource"], [80, 3, 1, "", "explainParam"], [80, 3, 1, "", "explainParams"], [80, 3, 1, "", "extractParamMap"], [80, 2, 1, "", "falsePositivesResource"], [80, 2, 1, "", "filterValue"], [80, 3, 1, "", "fit"], [80, 3, 1, "", "fitMultiple"], [80, 3, 1, "", "getInputCols"], [80, 3, 1, "", "getLazyAnnotator"], [80, 3, 1, "", "getOrDefault"], [80, 3, 1, "", "getOutputCol"], [80, 3, 1, "", "getParam"], [80, 3, 1, "", "getParamValue"], [80, 2, 1, "", "getter_attrs"], [80, 3, 1, "", "hasDefault"], [80, 3, 1, "", "hasParam"], [80, 2, 1, "", "inputAnnotatorTypes"], [80, 2, 1, "", "inputCols"], [80, 3, 1, "", "inputColsValidation"], [80, 3, 1, "", "isDefined"], [80, 3, 1, "", "isSet"], [80, 2, 1, "", "lazyAnnotator"], [80, 3, 1, "", "load"], [80, 2, 1, "", "mergeOverlapping"], [80, 2, 1, "", "name"], [80, 2, 1, "", "optionalInputAnnotatorTypes"], [80, 2, 1, "", "orderingFeatures"], [80, 2, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "outputCol"], [80, 3, 1, "", "read"], [80, 2, 1, "", "regex"], [80, 2, 1, "", "replaceDictResource"], [80, 2, 1, "", "resetSentenceIndices"], [80, 3, 1, "", "save"], [80, 2, 1, "", "selectionStrategy"], [80, 3, 1, "", "set"], [80, 3, 1, "", "setBlackList"], [80, 3, 1, "", "setCaseSensitive"], [80, 3, 1, "", "setChunkPrecedence"], [80, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [80, 3, 1, "", "setCriteria"], [80, 3, 1, "", "setDefaultConfidence"], [80, 3, 1, "", "setDenyList"], [80, 3, 1, "", "setDoExceptionHandling"], [80, 3, 1, "", "setEntitiesConfidence"], [80, 3, 1, "", "setEntitiesConfidenceResource"], [80, 3, 1, "", "setFalsePositivesResource"], [80, 3, 1, "", "setFilterValue"], [80, 3, 1, "", "setForceInputTypeValidation"], [80, 3, 1, "", "setInputCols"], [80, 3, 1, "", "setLazyAnnotator"], [80, 3, 1, "", "setMergeOverlapping"], [80, 3, 1, "", "setOrderingFeatures"], [80, 3, 1, "", "setOutputCol"], [80, 3, 1, "", "setParamValue"], [80, 3, 1, "", "setRegex"], [80, 3, 1, "", "setReplaceDictResource"], [80, 3, 1, "", "setResetSentenceIndices"], [80, 3, 1, "", "setSelectionStrategy"], [80, 3, 1, "", "setWhiteList"], [80, 2, 1, "", "skipLPInputColsValidation"], [80, 2, 1, "", "uid"], [80, 2, 1, "", "whiteList"], [80, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[80, 2, 1, "", "blackList"], [80, 2, 1, "", "caseSensitive"], [80, 2, 1, "", "chunkPrecedence"], [80, 2, 1, "", "chunkPrecedenceValuePrioritization"], [80, 3, 1, "", "clear"], [80, 3, 1, "", "copy"], [80, 2, 1, "", "criteria"], [80, 2, 1, "", "defaultConfidence"], [80, 3, 1, "", "explainParam"], [80, 3, 1, "", "explainParams"], [80, 3, 1, "", "extractParamMap"], [80, 2, 1, "", "filterValue"], [80, 3, 1, "", "getInputCols"], [80, 3, 1, "", "getLazyAnnotator"], [80, 3, 1, "", "getOrDefault"], [80, 3, 1, "", "getOutputCol"], [80, 3, 1, "", "getParam"], [80, 3, 1, "", "getParamValue"], [80, 2, 1, "", "getter_attrs"], [80, 3, 1, "", "hasDefault"], [80, 3, 1, "", "hasParam"], [80, 2, 1, "", "inputAnnotatorTypes"], [80, 2, 1, "", "inputCols"], [80, 3, 1, "", "inputColsValidation"], [80, 3, 1, "", "isDefined"], [80, 3, 1, "", "isSet"], [80, 2, 1, "", "lazyAnnotator"], [80, 3, 1, "", "load"], [80, 2, 1, "", "mergeOverlapping"], [80, 2, 1, "", "name"], [80, 2, 1, "", "optionalInputAnnotatorTypes"], [80, 2, 1, "", "orderingFeatures"], [80, 2, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "outputCol"], [80, 3, 1, "", "pretrained"], [80, 3, 1, "", "read"], [80, 2, 1, "", "regex"], [80, 3, 1, "", "save"], [80, 2, 1, "", "selectionStrategy"], [80, 3, 1, "", "set"], [80, 3, 1, "", "setBlackList"], [80, 3, 1, "", "setCaseSensitive"], [80, 3, 1, "", "setChunkPrecedence"], [80, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [80, 3, 1, "", "setCriteria"], [80, 3, 1, "", "setDefaultConfidence"], [80, 3, 1, "", "setDenyList"], [80, 3, 1, "", "setFilterValue"], [80, 3, 1, "", "setForceInputTypeValidation"], [80, 3, 1, "", "setInputCols"], [80, 3, 1, "", "setLazyAnnotator"], [80, 3, 1, "", "setMergeOverlapping"], [80, 3, 1, "", "setOrderingFeatures"], [80, 3, 1, "", "setOutputCol"], [80, 3, 1, "", "setParamValue"], [80, 3, 1, "", "setParams"], [80, 3, 1, "", "setRegex"], [80, 3, 1, "", "setSelectionStrategy"], [80, 3, 1, "", "setWhiteList"], [80, 2, 1, "", "skipLPInputColsValidation"], [80, 3, 1, "", "transform"], [80, 2, 1, "", "uid"], [80, 2, 1, "", "whiteList"], [80, 3, 1, "", "write"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[80, 2, 1, "", "mergeOverlapping"], [80, 3, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams": [[80, 3, 1, "", "getReplaceDict"], [80, 3, 1, "", "setFalsePositives"], [80, 3, 1, "", "setReplaceDict"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[80, 2, 1, "", "chunkPrecedence"], [80, 2, 1, "", "chunkPrecedenceValuePrioritization"], [80, 2, 1, "", "defaultConfidence"], [80, 2, 1, "", "orderingFeatures"], [80, 2, 1, "", "selectionStrategy"], [80, 3, 1, "", "setChunkPrecedence"], [80, 3, 1, "", "setChunkPrecedenceValuePrioritization"], [80, 3, 1, "", "setDefaultConfidence"], [80, 3, 1, "", "setOrderingFeatures"], [80, 3, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[80, 2, 1, "", "entitiesConfidenceResource"], [80, 2, 1, "", "falsePositivesResource"], [80, 2, 1, "", "replaceDictResource"], [80, 3, 1, "", "setEntitiesConfidenceResource"], [80, 3, 1, "", "setFalsePositivesResource"], [80, 3, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.merge.re_chunk_merger": [[82, 1, 1, "", "REChunkMerger"]], "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger": [[82, 3, 1, "", "clear"], [82, 3, 1, "", "copy"], [82, 3, 1, "", "explainParam"], [82, 3, 1, "", "explainParams"], [82, 3, 1, "", "extractParamMap"], [82, 3, 1, "", "getInputCols"], [82, 3, 1, "", "getLazyAnnotator"], [82, 3, 1, "", "getOrDefault"], [82, 3, 1, "", "getOutputCol"], [82, 3, 1, "", "getParam"], [82, 3, 1, "", "getParamValue"], [82, 2, 1, "", "getter_attrs"], [82, 3, 1, "", "hasDefault"], [82, 3, 1, "", "hasParam"], [82, 2, 1, "", "inputAnnotatorTypes"], [82, 2, 1, "", "inputCols"], [82, 3, 1, "", "inputColsValidation"], [82, 3, 1, "", "isDefined"], [82, 3, 1, "", "isSet"], [82, 2, 1, "", "lazyAnnotator"], [82, 3, 1, "", "load"], [82, 2, 1, "", "name"], [82, 2, 1, "", "optionalInputAnnotatorTypes"], [82, 2, 1, "", "outputAnnotatorType"], [82, 2, 1, "", "outputCol"], [82, 3, 1, "", "read"], [82, 3, 1, "", "save"], [82, 2, 1, "", "separator"], [82, 3, 1, "", "set"], [82, 3, 1, "", "setForceInputTypeValidation"], [82, 3, 1, "", "setInputCols"], [82, 3, 1, "", "setLazyAnnotator"], [82, 3, 1, "", "setOutputCol"], [82, 3, 1, "", "setParamValue"], [82, 3, 1, "", "setParams"], [82, 3, 1, "", "setSeparator"], [82, 2, 1, "", "skipLPInputColsValidation"], [82, 3, 1, "", "transform"], [82, 2, 1, "", "uid"], [82, 3, 1, "", "write"]], "sparknlp_jsl.annotator.metadata_annotation_converter": [[83, 1, 1, "", "MetadataAnnotationConverter"]], "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter": [[83, 2, 1, "", "beginField"], [83, 3, 1, "", "clear"], [83, 3, 1, "", "copy"], [83, 2, 1, "", "endField"], [83, 3, 1, "", "explainParam"], [83, 3, 1, "", "explainParams"], [83, 3, 1, "", "extractParamMap"], [83, 3, 1, "", "getInputCols"], [83, 3, 1, "", "getLazyAnnotator"], [83, 3, 1, "", "getOrDefault"], [83, 3, 1, "", "getOutputCol"], [83, 3, 1, "", "getParam"], [83, 3, 1, "", "getParamValue"], [83, 2, 1, "", "getter_attrs"], [83, 3, 1, "", "hasDefault"], [83, 3, 1, "", "hasParam"], [83, 2, 1, "", "inputAnnotatorTypes"], [83, 2, 1, "", "inputCols"], [83, 3, 1, "", "inputColsValidation"], [83, 2, 1, "", "inputType"], [83, 3, 1, "", "isDefined"], [83, 3, 1, "", "isSet"], [83, 2, 1, "", "lazyAnnotator"], [83, 3, 1, "", "load"], [83, 2, 1, "", "name"], [83, 2, 1, "", "optionalInputAnnotatorTypes"], [83, 2, 1, "", "outputAnnotatorType"], [83, 2, 1, "", "outputCol"], [83, 3, 1, "", "read"], [83, 2, 1, "", "resultField"], [83, 3, 1, "", "save"], [83, 3, 1, "", "set"], [83, 3, 1, "", "setBeginField"], [83, 3, 1, "", "setEndField"], [83, 3, 1, "", "setForceInputTypeValidation"], [83, 3, 1, "", "setInputCols"], [83, 3, 1, "", "setInputType"], [83, 3, 1, "", "setLazyAnnotator"], [83, 3, 1, "", "setOutputCol"], [83, 3, 1, "", "setParamValue"], [83, 3, 1, "", "setParams"], [83, 3, 1, "", "setResultField"], [83, 2, 1, "", "skipLPInputColsValidation"], [83, 3, 1, "", "transform"], [83, 2, 1, "", "uid"], [83, 3, 1, "", "write"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[84, 1, 1, "", "MultiChunk2Doc"]], "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc": [[84, 2, 1, "", "blackList"], [84, 2, 1, "", "caseSensitive"], [84, 3, 1, "", "clear"], [84, 3, 1, "", "copy"], [84, 3, 1, "", "explainParam"], [84, 3, 1, "", "explainParams"], [84, 3, 1, "", "extractParamMap"], [84, 3, 1, "", "getInputCols"], [84, 3, 1, "", "getLazyAnnotator"], [84, 3, 1, "", "getOrDefault"], [84, 3, 1, "", "getOutputCol"], [84, 3, 1, "", "getParam"], [84, 3, 1, "", "getParamValue"], [84, 2, 1, "", "getter_attrs"], [84, 3, 1, "", "hasDefault"], [84, 3, 1, "", "hasParam"], [84, 2, 1, "", "inputAnnotatorTypes"], [84, 2, 1, "", "inputCols"], [84, 3, 1, "", "inputColsValidation"], [84, 3, 1, "", "isDefined"], [84, 3, 1, "", "isSet"], [84, 2, 1, "", "lazyAnnotator"], [84, 3, 1, "", "load"], [84, 2, 1, "", "name"], [84, 2, 1, "", "optionalInputAnnotatorTypes"], [84, 2, 1, "", "outputAnnotatorType"], [84, 2, 1, "", "outputCol"], [84, 2, 1, "", "prefix"], [84, 3, 1, "", "read"], [84, 3, 1, "", "save"], [84, 2, 1, "", "separator"], [84, 3, 1, "", "set"], [84, 3, 1, "", "setBlackList"], [84, 3, 1, "", "setCaseSensitive"], [84, 3, 1, "", "setDenyList"], [84, 3, 1, "", "setForceInputTypeValidation"], [84, 3, 1, "", "setInputCols"], [84, 3, 1, "", "setLazyAnnotator"], [84, 3, 1, "", "setOutputCol"], [84, 3, 1, "", "setParamValue"], [84, 3, 1, "", "setParams"], [84, 3, 1, "", "setPrefix"], [84, 3, 1, "", "setSeparator"], [84, 3, 1, "", "setSuffix"], [84, 3, 1, "", "setWhiteList"], [84, 2, 1, "", "skipLPInputColsValidation"], [84, 2, 1, "", "suffix"], [84, 3, 1, "", "transform"], [84, 2, 1, "", "uid"], [84, 2, 1, "", "whiteList"], [84, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner": [[86, 0, 0, "-", "iob_tagger"], [87, 0, 0, "-", "medical_ner"], [88, 0, 0, "-", "ner_chunker"], [89, 0, 0, "-", "ner_converter_internal"], [90, 0, 0, "-", "ner_template_render"], [91, 0, 0, "-", "pretrained_zero_shot_ner"], [92, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[86, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[86, 3, 1, "", "clear"], [86, 3, 1, "", "copy"], [86, 3, 1, "", "explainParam"], [86, 3, 1, "", "explainParams"], [86, 3, 1, "", "extractParamMap"], [86, 3, 1, "", "getInputCols"], [86, 3, 1, "", "getLazyAnnotator"], [86, 3, 1, "", "getOrDefault"], [86, 3, 1, "", "getOutputCol"], [86, 3, 1, "", "getParam"], [86, 3, 1, "", "getParamValue"], [86, 2, 1, "", "getter_attrs"], [86, 3, 1, "", "hasDefault"], [86, 3, 1, "", "hasParam"], [86, 2, 1, "", "inputAnnotatorTypes"], [86, 2, 1, "", "inputCols"], [86, 3, 1, "", "inputColsValidation"], [86, 3, 1, "", "isDefined"], [86, 3, 1, "", "isSet"], [86, 2, 1, "", "lazyAnnotator"], [86, 3, 1, "", "load"], [86, 2, 1, "", "name"], [86, 2, 1, "", "optionalInputAnnotatorTypes"], [86, 2, 1, "", "outputAnnotatorType"], [86, 2, 1, "", "outputCol"], [86, 3, 1, "", "read"], [86, 3, 1, "", "save"], [86, 2, 1, "", "scheme"], [86, 3, 1, "", "set"], [86, 3, 1, "", "setForceInputTypeValidation"], [86, 3, 1, "", "setInputCols"], [86, 3, 1, "", "setLazyAnnotator"], [86, 3, 1, "", "setOutputCol"], [86, 3, 1, "", "setParamValue"], [86, 3, 1, "", "setParams"], [86, 3, 1, "", "setScheme"], [86, 2, 1, "", "skipLPInputColsValidation"], [86, 3, 1, "", "transform"], [86, 2, 1, "", "uid"], [86, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.medical_ner": [[87, 1, 1, "", "MedicalNerApproach"], [87, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[87, 2, 1, "", "batchSize"], [87, 3, 1, "", "clear"], [87, 2, 1, "", "configProtoBytes"], [87, 3, 1, "", "copy"], [87, 2, 1, "", "datasetInfo"], [87, 2, 1, "", "dropout"], [87, 2, 1, "", "earlyStoppingCriterion"], [87, 2, 1, "", "earlyStoppingPatience"], [87, 2, 1, "", "enableMemoryOptimizer"], [87, 2, 1, "", "enableOutputLogs"], [87, 2, 1, "", "engine"], [87, 2, 1, "", "entities"], [87, 2, 1, "", "evaluationLogExtended"], [87, 3, 1, "", "explainParam"], [87, 3, 1, "", "explainParams"], [87, 3, 1, "", "extractParamMap"], [87, 3, 1, "", "fit"], [87, 3, 1, "", "fitMultiple"], [87, 3, 1, "", "getEngine"], [87, 3, 1, "", "getInputCols"], [87, 3, 1, "", "getLabelColumn"], [87, 3, 1, "", "getLazyAnnotator"], [87, 3, 1, "", "getOrDefault"], [87, 3, 1, "", "getOutputCol"], [87, 3, 1, "", "getParam"], [87, 3, 1, "", "getParamValue"], [87, 2, 1, "", "getter_attrs"], [87, 2, 1, "", "graphFile"], [87, 2, 1, "", "graphFolder"], [87, 3, 1, "", "hasDefault"], [87, 3, 1, "", "hasParam"], [87, 2, 1, "", "includeAllConfidenceScores"], [87, 2, 1, "", "includeConfidence"], [87, 2, 1, "", "inputAnnotatorTypes"], [87, 2, 1, "", "inputCols"], [87, 3, 1, "", "inputColsValidation"], [87, 3, 1, "", "isDefined"], [87, 3, 1, "", "isSet"], [87, 2, 1, "", "labelColumn"], [87, 2, 1, "", "lazyAnnotator"], [87, 3, 1, "", "load"], [87, 2, 1, "", "logPrefix"], [87, 2, 1, "", "lr"], [87, 2, 1, "", "maxEpochs"], [87, 2, 1, "", "minEpochs"], [87, 2, 1, "", "optionalInputAnnotatorTypes"], [87, 2, 1, "", "outputAnnotatorType"], [87, 2, 1, "", "outputCol"], [87, 2, 1, "", "outputLogsPath"], [87, 2, 1, "", "overrideExistingTags"], [87, 2, 1, "", "po"], [87, 2, 1, "", "pretrainedModelPath"], [87, 2, 1, "", "randomSeed"], [87, 2, 1, "", "randomValidationSplitPerEpoch"], [87, 3, 1, "", "read"], [87, 3, 1, "", "save"], [87, 2, 1, "", "sentenceTokenIndex"], [87, 3, 1, "", "set"], [87, 3, 1, "", "setBatchSize"], [87, 3, 1, "", "setConfigProtoBytes"], [87, 3, 1, "", "setDatasetInfo"], [87, 3, 1, "", "setDoExceptionHandling"], [87, 3, 1, "", "setDropout"], [87, 3, 1, "", "setEarlyStoppingCriterion"], [87, 3, 1, "", "setEarlyStoppingPatience"], [87, 3, 1, "", "setEnableMemoryOptimizer"], [87, 3, 1, "", "setEnableOutputLogs"], [87, 3, 1, "", "setEntities"], [87, 3, 1, "", "setEvaluationLogExtended"], [87, 3, 1, "", "setForceInputTypeValidation"], [87, 3, 1, "", "setGraphFile"], [87, 3, 1, "", "setGraphFolder"], [87, 3, 1, "", "setIncludeAllConfidenceScores"], [87, 3, 1, "", "setIncludeConfidence"], [87, 3, 1, "", "setInputCols"], [87, 3, 1, "", "setLabelColumn"], [87, 3, 1, "", "setLazyAnnotator"], [87, 3, 1, "", "setLogPrefix"], [87, 3, 1, "", "setLr"], [87, 3, 1, "", "setMaxEpochs"], [87, 3, 1, "", "setMinEpochs"], [87, 3, 1, "", "setOutputCol"], [87, 3, 1, "", "setOutputLogsPath"], [87, 3, 1, "", "setOverrideExistingTags"], [87, 3, 1, "", "setParamValue"], [87, 3, 1, "", "setPo"], [87, 3, 1, "", "setPretrainedModelPath"], [87, 3, 1, "", "setRandomSeed"], [87, 3, 1, "", "setRandomValidationSplitPerEpoch"], [87, 3, 1, "", "setSentenceTokenIndex"], [87, 3, 1, "", "setTagsMapping"], [87, 3, 1, "", "setTestDataset"], [87, 3, 1, "", "setUseBestModel"], [87, 3, 1, "", "setUseContrib"], [87, 3, 1, "", "setValidationSplit"], [87, 3, 1, "", "setVerbose"], [87, 2, 1, "", "skipLPInputColsValidation"], [87, 2, 1, "", "testDataset"], [87, 2, 1, "", "uid"], [87, 2, 1, "", "useBestModel"], [87, 2, 1, "", "useContrib"], [87, 2, 1, "", "validationSplit"], [87, 2, 1, "", "verbose"], [87, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[87, 2, 1, "", "classes"], [87, 3, 1, "", "clear"], [87, 2, 1, "", "configProtoBytes"], [87, 3, 1, "", "copy"], [87, 2, 1, "", "datasetInfo"], [87, 2, 1, "", "doExceptionHandling"], [87, 3, 1, "", "explainParam"], [87, 3, 1, "", "explainParams"], [87, 3, 1, "", "extractParamMap"], [87, 3, 1, "", "getClasses"], [87, 3, 1, "", "getInputCols"], [87, 3, 1, "", "getLazyAnnotator"], [87, 3, 1, "", "getOrDefault"], [87, 3, 1, "", "getOutputCol"], [87, 3, 1, "", "getParam"], [87, 3, 1, "", "getParamValue"], [87, 3, 1, "", "getStorageRef"], [87, 3, 1, "", "getTrainingClassDistribution"], [87, 2, 1, "", "getter_attrs"], [87, 3, 1, "", "hasDefault"], [87, 3, 1, "", "hasParam"], [87, 2, 1, "", "includeAllConfidenceScores"], [87, 2, 1, "", "includeConfidence"], [87, 2, 1, "", "inferenceBatchSize"], [87, 2, 1, "", "inputAnnotatorTypes"], [87, 2, 1, "", "inputCols"], [87, 3, 1, "", "inputColsValidation"], [87, 3, 1, "", "isDefined"], [87, 3, 1, "", "isSet"], [87, 2, 1, "", "labelCasing"], [87, 2, 1, "", "lazyAnnotator"], [87, 3, 1, "", "load"], [87, 3, 1, "", "loadSavedModel"], [87, 2, 1, "", "name"], [87, 2, 1, "", "optionalInputAnnotatorTypes"], [87, 2, 1, "", "outputAnnotatorType"], [87, 2, 1, "", "outputCol"], [87, 3, 1, "", "pretrained"], [87, 3, 1, "", "read"], [87, 3, 1, "", "save"], [87, 2, 1, "", "sentenceTokenIndex"], [87, 3, 1, "", "set"], [87, 3, 1, "", "setConfigProtoBytes"], [87, 3, 1, "", "setDatasetInfo"], [87, 3, 1, "", "setForceInputTypeValidation"], [87, 3, 1, "", "setIncludeConfidence"], [87, 3, 1, "", "setInferenceBatchSize"], [87, 3, 1, "", "setInputCols"], [87, 3, 1, "", "setLabelCasing"], [87, 3, 1, "", "setLazyAnnotator"], [87, 3, 1, "", "setOutputCol"], [87, 3, 1, "", "setParamValue"], [87, 3, 1, "", "setParams"], [87, 3, 1, "", "setSentenceTokenIndex"], [87, 3, 1, "", "setStorageRef"], [87, 2, 1, "", "skipLPInputColsValidation"], [87, 2, 1, "", "storageRef"], [87, 2, 1, "", "trainingClassDistribution"], [87, 3, 1, "", "transform"], [87, 2, 1, "", "uid"], [87, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[88, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[88, 3, 1, "", "clear"], [88, 3, 1, "", "copy"], [88, 3, 1, "", "explainParam"], [88, 3, 1, "", "explainParams"], [88, 3, 1, "", "extractParamMap"], [88, 3, 1, "", "getInputCols"], [88, 3, 1, "", "getLazyAnnotator"], [88, 3, 1, "", "getOrDefault"], [88, 3, 1, "", "getOutputCol"], [88, 3, 1, "", "getParam"], [88, 3, 1, "", "getParamValue"], [88, 2, 1, "", "getter_attrs"], [88, 3, 1, "", "hasDefault"], [88, 3, 1, "", "hasParam"], [88, 2, 1, "", "inputAnnotatorTypes"], [88, 2, 1, "", "inputCols"], [88, 3, 1, "", "inputColsValidation"], [88, 3, 1, "", "isDefined"], [88, 3, 1, "", "isSet"], [88, 2, 1, "", "lazyAnnotator"], [88, 3, 1, "", "load"], [88, 2, 1, "", "name"], [88, 2, 1, "", "optionalInputAnnotatorTypes"], [88, 2, 1, "", "outputAnnotatorType"], [88, 2, 1, "", "outputCol"], [88, 3, 1, "", "read"], [88, 2, 1, "", "regexParsers"], [88, 3, 1, "", "save"], [88, 3, 1, "", "set"], [88, 3, 1, "", "setForceInputTypeValidation"], [88, 3, 1, "", "setInputCols"], [88, 3, 1, "", "setLazyAnnotator"], [88, 3, 1, "", "setOutputCol"], [88, 3, 1, "", "setParamValue"], [88, 3, 1, "", "setParams"], [88, 3, 1, "", "setRegexParsers"], [88, 2, 1, "", "skipLPInputColsValidation"], [88, 3, 1, "", "transform"], [88, 2, 1, "", "uid"], [88, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[89, 1, 1, "", "CommonNerConverterInternalParams"], [89, 1, 1, "", "NerConverterInternal"], [89, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[89, 2, 1, "", "blackList"], [89, 2, 1, "", "caseSensitive"], [89, 2, 1, "", "criteria"], [89, 2, 1, "", "doExceptionHandling"], [89, 2, 1, "", "filterValue"], [89, 2, 1, "", "greedyMode"], [89, 2, 1, "", "ignoreStopWords"], [89, 2, 1, "", "preservePosition"], [89, 2, 1, "", "regex"], [89, 3, 1, "", "setAllowList"], [89, 3, 1, "", "setBlackList"], [89, 3, 1, "", "setCaseSensitive"], [89, 3, 1, "", "setCriteria"], [89, 3, 1, "", "setDenyList"], [89, 3, 1, "", "setDoExceptionHandling"], [89, 3, 1, "", "setFilterValue"], [89, 3, 1, "", "setGreedyMode"], [89, 3, 1, "", "setIgnoreStopWords"], [89, 3, 1, "", "setPreservePosition"], [89, 3, 1, "", "setRegex"], [89, 3, 1, "", "setThreshold"], [89, 3, 1, "", "setWhiteList"], [89, 2, 1, "", "threshold"], [89, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[89, 2, 1, "", "allPossibleFieldsToStandardize"], [89, 2, 1, "", "blackList"], [89, 2, 1, "", "caseSensitive"], [89, 3, 1, "", "clear"], [89, 3, 1, "", "copy"], [89, 2, 1, "", "criteria"], [89, 2, 1, "", "doExceptionHandling"], [89, 3, 1, "", "explainParam"], [89, 3, 1, "", "explainParams"], [89, 3, 1, "", "extractParamMap"], [89, 2, 1, "", "filterValue"], [89, 3, 1, "", "fit"], [89, 3, 1, "", "fitMultiple"], [89, 3, 1, "", "getInputCols"], [89, 3, 1, "", "getLazyAnnotator"], [89, 3, 1, "", "getOrDefault"], [89, 3, 1, "", "getOutputCol"], [89, 3, 1, "", "getParam"], [89, 3, 1, "", "getParamValue"], [89, 2, 1, "", "getter_attrs"], [89, 2, 1, "", "greedyMode"], [89, 3, 1, "", "hasDefault"], [89, 3, 1, "", "hasParam"], [89, 2, 1, "", "ignoreStopWords"], [89, 2, 1, "", "includeOutputColumn"], [89, 2, 1, "", "includeStandardField"], [89, 2, 1, "", "inputAnnotatorTypes"], [89, 2, 1, "", "inputCols"], [89, 3, 1, "", "inputColsValidation"], [89, 3, 1, "", "isDefined"], [89, 3, 1, "", "isSet"], [89, 2, 1, "", "lazyAnnotator"], [89, 3, 1, "", "load"], [89, 2, 1, "", "name"], [89, 2, 1, "", "optionalInputAnnotatorTypes"], [89, 2, 1, "", "outputAnnotatorType"], [89, 2, 1, "", "outputCol"], [89, 2, 1, "", "outputColumnKey"], [89, 2, 1, "", "preservePosition"], [89, 3, 1, "", "read"], [89, 2, 1, "", "regex"], [89, 2, 1, "", "replaceDictResource"], [89, 2, 1, "", "replaceLabels"], [89, 2, 1, "", "resetSentenceIndices"], [89, 3, 1, "", "save"], [89, 3, 1, "", "set"], [89, 3, 1, "", "setAllPossibleFieldsToStandardize"], [89, 3, 1, "", "setAllowList"], [89, 3, 1, "", "setBlackList"], [89, 3, 1, "", "setCaseSensitive"], [89, 3, 1, "", "setCriteria"], [89, 3, 1, "", "setDenyList"], [89, 3, 1, "", "setDoExceptionHandling"], [89, 3, 1, "", "setFilterValue"], [89, 3, 1, "", "setGreedyMode"], [89, 3, 1, "", "setIgnoreStopWords"], [89, 3, 1, "", "setIncludeOutputColumn"], [89, 3, 1, "", "setIncludeStandardField"], [89, 3, 1, "", "setInputCols"], [89, 3, 1, "", "setLazyAnnotator"], [89, 3, 1, "", "setOutputCol"], [89, 3, 1, "", "setOutputColumnKey"], [89, 3, 1, "", "setParamValue"], [89, 3, 1, "", "setPreservePosition"], [89, 3, 1, "", "setRegex"], [89, 3, 1, "", "setReplaceDictResource"], [89, 3, 1, "", "setReplaceLabels"], [89, 3, 1, "", "setResetSentenceIndices"], [89, 3, 1, "", "setStandardFieldKey"], [89, 3, 1, "", "setThreshold"], [89, 3, 1, "", "setWhiteList"], [89, 2, 1, "", "standardFieldKey"], [89, 2, 1, "", "threshold"], [89, 2, 1, "", "uid"], [89, 2, 1, "", "whiteList"], [89, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[89, 2, 1, "", "blackList"], [89, 2, 1, "", "caseSensitive"], [89, 3, 1, "", "clear"], [89, 3, 1, "", "copy"], [89, 2, 1, "", "criteria"], [89, 2, 1, "", "doExceptionHandling"], [89, 3, 1, "", "explainParam"], [89, 3, 1, "", "explainParams"], [89, 3, 1, "", "extractParamMap"], [89, 2, 1, "", "filterValue"], [89, 3, 1, "", "getInputCols"], [89, 3, 1, "", "getLazyAnnotator"], [89, 3, 1, "", "getOrDefault"], [89, 3, 1, "", "getOutputCol"], [89, 3, 1, "", "getParam"], [89, 3, 1, "", "getParamValue"], [89, 2, 1, "", "getter_attrs"], [89, 2, 1, "", "greedyMode"], [89, 3, 1, "", "hasDefault"], [89, 3, 1, "", "hasParam"], [89, 2, 1, "", "ignoreStopWords"], [89, 2, 1, "", "inputAnnotatorTypes"], [89, 2, 1, "", "inputCols"], [89, 3, 1, "", "inputColsValidation"], [89, 3, 1, "", "isDefined"], [89, 3, 1, "", "isSet"], [89, 2, 1, "", "lazyAnnotator"], [89, 3, 1, "", "load"], [89, 2, 1, "", "name"], [89, 2, 1, "", "optionalInputAnnotatorTypes"], [89, 2, 1, "", "outputAnnotatorType"], [89, 2, 1, "", "outputCol"], [89, 2, 1, "", "preservePosition"], [89, 3, 1, "", "read"], [89, 2, 1, "", "regex"], [89, 3, 1, "", "save"], [89, 3, 1, "", "set"], [89, 3, 1, "", "setAllowList"], [89, 3, 1, "", "setBlackList"], [89, 3, 1, "", "setCaseSensitive"], [89, 3, 1, "", "setCriteria"], [89, 3, 1, "", "setDenyList"], [89, 3, 1, "", "setDoExceptionHandling"], [89, 3, 1, "", "setFilterValue"], [89, 3, 1, "", "setForceInputTypeValidation"], [89, 3, 1, "", "setGreedyMode"], [89, 3, 1, "", "setIgnoreStopWords"], [89, 3, 1, "", "setInputCols"], [89, 3, 1, "", "setLazyAnnotator"], [89, 3, 1, "", "setOutputCol"], [89, 3, 1, "", "setParamValue"], [89, 3, 1, "", "setParams"], [89, 3, 1, "", "setPreservePosition"], [89, 3, 1, "", "setRegex"], [89, 3, 1, "", "setThreshold"], [89, 3, 1, "", "setWhiteList"], [89, 2, 1, "", "skipLPInputColsValidation"], [89, 2, 1, "", "threshold"], [89, 3, 1, "", "transform"], [89, 2, 1, "", "uid"], [89, 2, 1, "", "whiteList"], [89, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[90, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[90, 3, 1, "", "clear"], [90, 2, 1, "", "combineEntities"], [90, 3, 1, "", "copy"], [90, 2, 1, "", "entityScopes"], [90, 3, 1, "", "explainParam"], [90, 3, 1, "", "explainParams"], [90, 3, 1, "", "extractParamMap"], [90, 3, 1, "", "getInputCols"], [90, 3, 1, "", "getLazyAnnotator"], [90, 3, 1, "", "getOrDefault"], [90, 3, 1, "", "getOutputCol"], [90, 3, 1, "", "getParam"], [90, 3, 1, "", "getParamValue"], [90, 2, 1, "", "getter_attrs"], [90, 3, 1, "", "hasDefault"], [90, 3, 1, "", "hasParam"], [90, 2, 1, "", "inputAnnotatorTypes"], [90, 2, 1, "", "inputCols"], [90, 3, 1, "", "inputColsValidation"], [90, 3, 1, "", "isDefined"], [90, 3, 1, "", "isSet"], [90, 2, 1, "", "lazyAnnotator"], [90, 3, 1, "", "load"], [90, 2, 1, "", "optionalInputAnnotatorTypes"], [90, 2, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "outputCol"], [90, 2, 1, "", "permuteEntities"], [90, 3, 1, "", "pretrained"], [90, 2, 1, "", "randomSeed"], [90, 3, 1, "", "read"], [90, 2, 1, "", "resampleEntities"], [90, 3, 1, "", "save"], [90, 3, 1, "", "set"], [90, 3, 1, "", "setCombineEntities"], [90, 3, 1, "", "setEntityScopes"], [90, 3, 1, "", "setForceInputTypeValidation"], [90, 3, 1, "", "setInputCols"], [90, 3, 1, "", "setLazyAnnotator"], [90, 3, 1, "", "setOutputCol"], [90, 3, 1, "", "setParamValue"], [90, 3, 1, "", "setParams"], [90, 3, 1, "", "setPermuteEntities"], [90, 3, 1, "", "setRandomSeed"], [90, 3, 1, "", "setResampleEntities"], [90, 3, 1, "", "setTemplates"], [90, 2, 1, "", "skipLPInputColsValidation"], [90, 2, 1, "", "templates"], [90, 3, 1, "", "transform"], [90, 2, 1, "", "uid"], [90, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner": [[91, 1, 1, "", "PretrainedZeroShotNER"]], "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER": [[91, 2, 1, "", "batchSize"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "copy"], [91, 3, 1, "", "explainParam"], [91, 3, 1, "", "explainParams"], [91, 3, 1, "", "extractParamMap"], [91, 3, 1, "", "getBatchSize"], [91, 3, 1, "", "getInputCols"], [91, 3, 1, "", "getLabels"], [91, 3, 1, "", "getLazyAnnotator"], [91, 3, 1, "", "getOrDefault"], [91, 3, 1, "", "getOutputCol"], [91, 3, 1, "", "getParam"], [91, 3, 1, "", "getParamValue"], [91, 2, 1, "", "getter_attrs"], [91, 3, 1, "", "hasDefault"], [91, 3, 1, "", "hasParam"], [91, 2, 1, "", "inputAnnotatorTypes"], [91, 2, 1, "", "inputCols"], [91, 3, 1, "", "inputColsValidation"], [91, 3, 1, "", "isDefined"], [91, 3, 1, "", "isSet"], [91, 2, 1, "", "labels"], [91, 2, 1, "", "lazyAnnotator"], [91, 3, 1, "", "load"], [91, 3, 1, "", "loadSavedModel"], [91, 2, 1, "", "name"], [91, 2, 1, "", "optionalInputAnnotatorTypes"], [91, 2, 1, "", "outputAnnotatorType"], [91, 2, 1, "", "outputCol"], [91, 2, 1, "", "predictionThreshold"], [91, 3, 1, "", "pretrained"], [91, 3, 1, "", "read"], [91, 3, 1, "", "save"], [91, 3, 1, "", "set"], [91, 3, 1, "", "setBatchSize"], [91, 3, 1, "", "setForceInputTypeValidation"], [91, 3, 1, "", "setInputCols"], [91, 3, 1, "", "setLabels"], [91, 3, 1, "", "setLazyAnnotator"], [91, 3, 1, "", "setOutputCol"], [91, 3, 1, "", "setParamValue"], [91, 3, 1, "", "setParams"], [91, 3, 1, "", "setPredictionThreshold"], [91, 2, 1, "", "skipLPInputColsValidation"], [91, 3, 1, "", "transform"], [91, 2, 1, "", "uid"], [91, 3, 1, "", "write"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[92, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[92, 2, 1, "", "batchSize"], [92, 2, 1, "", "caseSensitive"], [92, 3, 1, "", "clear"], [92, 2, 1, "", "coalesceSentences"], [92, 2, 1, "", "configProtoBytes"], [92, 3, 1, "", "copy"], [92, 2, 1, "", "engine"], [92, 3, 1, "", "explainParam"], [92, 3, 1, "", "explainParams"], [92, 3, 1, "", "extractParamMap"], [92, 3, 1, "", "getBatchSize"], [92, 3, 1, "", "getCaseSensitive"], [92, 3, 1, "", "getClasses"], [92, 3, 1, "", "getEngine"], [92, 3, 1, "", "getInputCols"], [92, 3, 1, "", "getLazyAnnotator"], [92, 3, 1, "", "getMaxSentenceLength"], [92, 3, 1, "", "getOrDefault"], [92, 3, 1, "", "getOutputCol"], [92, 3, 1, "", "getParam"], [92, 3, 1, "", "getParamValue"], [92, 2, 1, "", "getter_attrs"], [92, 3, 1, "", "hasDefault"], [92, 3, 1, "", "hasParam"], [92, 2, 1, "", "ignoreEntities"], [92, 2, 1, "", "inputAnnotatorTypes"], [92, 2, 1, "", "inputCols"], [92, 3, 1, "", "inputColsValidation"], [92, 3, 1, "", "isDefined"], [92, 3, 1, "", "isSet"], [92, 2, 1, "", "lazyAnnotator"], [92, 3, 1, "", "load"], [92, 3, 1, "", "loadSavedModel"], [92, 2, 1, "", "maxSentenceLength"], [92, 2, 1, "", "max_length_limit"], [92, 2, 1, "", "name"], [92, 2, 1, "", "optionalInputAnnotatorTypes"], [92, 2, 1, "", "outputAnnotatorType"], [92, 2, 1, "", "outputCol"], [92, 2, 1, "", "predictionThreshold"], [92, 3, 1, "", "pretrained"], [92, 3, 1, "", "read"], [92, 3, 1, "", "save"], [92, 3, 1, "", "set"], [92, 3, 1, "", "setBatchSize"], [92, 3, 1, "", "setCaseSensitive"], [92, 3, 1, "", "setConfigProtoBytes"], [92, 3, 1, "", "setEntityDefinitions"], [92, 3, 1, "", "setInputCols"], [92, 3, 1, "", "setLazyAnnotator"], [92, 3, 1, "", "setMaxSentenceLength"], [92, 3, 1, "", "setOutputCol"], [92, 3, 1, "", "setParamValue"], [92, 3, 1, "", "setParams"], [92, 3, 1, "", "setPredictionThreshold"], [92, 3, 1, "", "transform"], [92, 2, 1, "", "uid"], [92, 3, 1, "", "write"]], "sparknlp_jsl.annotator.normalizer": [[93, 0, 0, "-", "date_normalizer"], [94, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[93, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[93, 2, 1, "", "anchorDateDay"], [93, 2, 1, "", "anchorDateMonth"], [93, 2, 1, "", "anchorDateYear"], [93, 3, 1, "", "clear"], [93, 3, 1, "", "copy"], [93, 2, 1, "", "defaultReplacementDay"], [93, 2, 1, "", "defaultReplacementMonth"], [93, 2, 1, "", "defaultReplacementYear"], [93, 3, 1, "", "explainParam"], [93, 3, 1, "", "explainParams"], [93, 3, 1, "", "extractParamMap"], [93, 3, 1, "", "getInputCols"], [93, 3, 1, "", "getLazyAnnotator"], [93, 3, 1, "", "getOrDefault"], [93, 3, 1, "", "getOutputCol"], [93, 3, 1, "", "getParam"], [93, 3, 1, "", "getParamValue"], [93, 2, 1, "", "getter_attrs"], [93, 3, 1, "", "hasDefault"], [93, 3, 1, "", "hasParam"], [93, 2, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "inputCols"], [93, 3, 1, "", "inputColsValidation"], [93, 3, 1, "", "isDefined"], [93, 3, 1, "", "isSet"], [93, 2, 1, "", "lazyAnnotator"], [93, 3, 1, "", "load"], [93, 2, 1, "", "name"], [93, 2, 1, "", "optionalInputAnnotatorTypes"], [93, 2, 1, "", "outputAnnotatorType"], [93, 2, 1, "", "outputCol"], [93, 2, 1, "", "outputDateFormat"], [93, 3, 1, "", "read"], [93, 3, 1, "", "save"], [93, 3, 1, "", "set"], [93, 3, 1, "", "setAnchorDateDay"], [93, 3, 1, "", "setAnchorDateMonth"], [93, 3, 1, "", "setAnchorDateYear"], [93, 3, 1, "", "setDefaultReplacementDay"], [93, 3, 1, "", "setDefaultReplacementMonth"], [93, 3, 1, "", "setDefaultReplacementYear"], [93, 3, 1, "", "setForceInputTypeValidation"], [93, 3, 1, "", "setInputCols"], [93, 3, 1, "", "setLazyAnnotator"], [93, 3, 1, "", "setOutputCol"], [93, 3, 1, "", "setOutputDateformat"], [93, 3, 1, "", "setParamValue"], [93, 3, 1, "", "setParams"], [93, 2, 1, "", "skipLPInputColsValidation"], [93, 3, 1, "", "transform"], [93, 2, 1, "", "uid"], [93, 3, 1, "", "write"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[94, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[94, 3, 1, "", "clear"], [94, 3, 1, "", "copy"], [94, 3, 1, "", "explainParam"], [94, 3, 1, "", "explainParams"], [94, 3, 1, "", "extractParamMap"], [94, 3, 1, "", "getInputCols"], [94, 3, 1, "", "getLazyAnnotator"], [94, 3, 1, "", "getOrDefault"], [94, 3, 1, "", "getOutputCol"], [94, 3, 1, "", "getParam"], [94, 3, 1, "", "getParamValue"], [94, 2, 1, "", "getter_attrs"], [94, 3, 1, "", "hasDefault"], [94, 3, 1, "", "hasParam"], [94, 2, 1, "", "inputAnnotatorTypes"], [94, 2, 1, "", "inputCols"], [94, 3, 1, "", "inputColsValidation"], [94, 3, 1, "", "isDefined"], [94, 3, 1, "", "isSet"], [94, 2, 1, "", "lazyAnnotator"], [94, 3, 1, "", "load"], [94, 2, 1, "", "lowercase"], [94, 2, 1, "", "optionalInputAnnotatorTypes"], [94, 2, 1, "", "outputAnnotatorType"], [94, 2, 1, "", "outputCol"], [94, 2, 1, "", "policy"], [94, 3, 1, "", "read"], [94, 3, 1, "", "save"], [94, 3, 1, "", "set"], [94, 3, 1, "", "setForceInputTypeValidation"], [94, 3, 1, "", "setInputCols"], [94, 3, 1, "", "setLazyAnnotator"], [94, 3, 1, "", "setLowercase"], [94, 3, 1, "", "setOutputCol"], [94, 3, 1, "", "setParamValue"], [94, 3, 1, "", "setParams"], [94, 3, 1, "", "setPolicy"], [94, 2, 1, "", "skipLPInputColsValidation"], [94, 3, 1, "", "transform"], [94, 2, 1, "", "uid"], [94, 3, 1, "", "write"]], "sparknlp_jsl.annotator.params": [[97, 0, 0, "-", "reset_sentence_indices_param"]], "sparknlp_jsl.annotator.params.reset_sentence_indices_param": [[97, 1, 1, "", "ResetSentenceIndicesParam"]], "sparknlp_jsl.annotator.params.reset_sentence_indices_param.ResetSentenceIndicesParam": [[97, 2, 1, "", "resetSentenceIndices"], [97, 3, 1, "", "setResetSentenceIndices"]], "sparknlp_jsl.annotator.parser": [[99, 0, 0, "-", "structured_json_converter"]], "sparknlp_jsl.annotator.parser.structured_json_converter": [[99, 1, 1, "", "StructuredJsonConverter"]], "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter": [[99, 2, 1, "", "cleanAnnotations"], [99, 3, 1, "", "clear"], [99, 3, 1, "", "copy"], [99, 3, 1, "", "explainParam"], [99, 3, 1, "", "explainParams"], [99, 3, 1, "", "extractParamMap"], [99, 3, 1, "", "getOrDefault"], [99, 3, 1, "", "getParam"], [99, 3, 1, "", "getParamValue"], [99, 2, 1, "", "getter_attrs"], [99, 3, 1, "", "hasDefault"], [99, 3, 1, "", "hasParam"], [99, 3, 1, "", "isDefined"], [99, 3, 1, "", "isSet"], [99, 3, 1, "", "load"], [99, 2, 1, "", "name"], [99, 2, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "outputAsStr"], [99, 2, 1, "", "outputCol"], [99, 2, 1, "", "parentSource"], [99, 3, 1, "", "read"], [99, 2, 1, "", "returnRelationEntities"], [99, 3, 1, "", "save"], [99, 2, 1, "", "sentenceColumn"], [99, 3, 1, "", "set"], [99, 3, 1, "", "setCleanAnnotations"], [99, 3, 1, "", "setConverterSchema"], [99, 3, 1, "", "setConverterSchemaAsStr"], [99, 3, 1, "", "setOutputAsStr"], [99, 3, 1, "", "setOutputCol"], [99, 3, 1, "", "setParamValue"], [99, 3, 1, "", "setParams"], [99, 3, 1, "", "setParentSource"], [99, 3, 1, "", "setReturnRelationEntities"], [99, 3, 1, "", "setSentenceColumn"], [99, 3, 1, "", "transform"], [99, 2, 1, "", "uid"], [99, 3, 1, "", "write"]], "sparknlp_jsl.annotator.qa": [[100, 0, 0, "-", "beam_search_params"], [102, 0, 0, "-", "medical_qa"], [103, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[100, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[100, 2, 1, "", "doSample"], [100, 2, 1, "", "ignoreTokenIds"], [100, 2, 1, "", "maxContextLength"], [100, 2, 1, "", "maxNewTokens"], [100, 2, 1, "", "noRepeatNgramSize"], [100, 3, 1, "", "setDoSample"], [100, 3, 1, "", "setIgnoreTokenIds"], [100, 3, 1, "", "setMaxContextLength"], [100, 3, 1, "", "setMaxNewTokens"], [100, 3, 1, "", "setNoRepeatNgramSize"], [100, 3, 1, "", "setRandomSeed"], [100, 3, 1, "", "setTopK"], [100, 2, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[102, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[102, 2, 1, "", "batchSize"], [102, 3, 1, "", "clear"], [102, 2, 1, "", "configProtoBytes"], [102, 3, 1, "", "copy"], [102, 2, 1, "", "customPrompt"], [102, 2, 1, "", "doSample"], [102, 3, 1, "", "explainParam"], [102, 3, 1, "", "explainParams"], [102, 3, 1, "", "extractParamMap"], [102, 3, 1, "", "getBatchSize"], [102, 3, 1, "", "getInputCols"], [102, 3, 1, "", "getLazyAnnotator"], [102, 3, 1, "", "getOrDefault"], [102, 3, 1, "", "getOutputCol"], [102, 3, 1, "", "getParam"], [102, 3, 1, "", "getParamValue"], [102, 3, 1, "", "getQuestionTypes"], [102, 2, 1, "", "getter_attrs"], [102, 3, 1, "", "hasDefault"], [102, 3, 1, "", "hasParam"], [102, 2, 1, "", "ignoreTokenIds"], [102, 2, 1, "", "inputAnnotatorTypes"], [102, 2, 1, "", "inputCols"], [102, 3, 1, "", "inputColsValidation"], [102, 3, 1, "", "isDefined"], [102, 3, 1, "", "isSet"], [102, 2, 1, "", "lazyAnnotator"], [102, 3, 1, "", "load"], [102, 3, 1, "", "loadMedicalTextGenerator"], [102, 3, 1, "", "loadSavedModel"], [102, 2, 1, "", "maxContextLength"], [102, 2, 1, "", "maxNewTokens"], [102, 2, 1, "", "mlFrameworkType"], [102, 2, 1, "", "modelType"], [102, 2, 1, "", "name"], [102, 2, 1, "", "noRepeatNgramSize"], [102, 2, 1, "", "optionalInputAnnotatorTypes"], [102, 2, 1, "", "outputAnnotatorType"], [102, 2, 1, "", "outputCol"], [102, 3, 1, "", "pretrained"], [102, 2, 1, "", "questionType"], [102, 3, 1, "", "read"], [102, 3, 1, "", "save"], [102, 3, 1, "", "set"], [102, 3, 1, "", "setBatchSize"], [102, 3, 1, "", "setConfigProtoBytes"], [102, 3, 1, "", "setCustomPrompt"], [102, 3, 1, "", "setDoSample"], [102, 3, 1, "", "setForceInputTypeValidation"], [102, 3, 1, "", "setIgnoreTokenIds"], [102, 3, 1, "", "setInputCols"], [102, 3, 1, "", "setLazyAnnotator"], [102, 3, 1, "", "setMaxContextLength"], [102, 3, 1, "", "setMaxNewTokens"], [102, 3, 1, "", "setNoRepeatNgramSize"], [102, 3, 1, "", "setOutputCol"], [102, 3, 1, "", "setParamValue"], [102, 3, 1, "", "setParams"], [102, 3, 1, "", "setQuestionAnswerTerminals"], [102, 3, 1, "", "setQuestionPrompts"], [102, 3, 1, "", "setQuestionSkipLastToken"], [102, 3, 1, "", "setQuestionType"], [102, 3, 1, "", "setRandomSeed"], [102, 3, 1, "", "setTopK"], [102, 3, 1, "", "setUseCache"], [102, 2, 1, "", "skipLPInputColsValidation"], [102, 2, 1, "", "topK"], [102, 3, 1, "", "transform"], [102, 2, 1, "", "uid"], [102, 2, 1, "", "useCache"], [102, 3, 1, "", "write"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[103, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[103, 3, 1, "", "clear"], [103, 3, 1, "", "copy"], [103, 2, 1, "", "entities1"], [103, 2, 1, "", "entities2"], [103, 3, 1, "", "explainParam"], [103, 3, 1, "", "explainParams"], [103, 3, 1, "", "extractParamMap"], [103, 3, 1, "", "getInputCols"], [103, 3, 1, "", "getLazyAnnotator"], [103, 3, 1, "", "getOrDefault"], [103, 3, 1, "", "getOutputCol"], [103, 3, 1, "", "getParam"], [103, 3, 1, "", "getParamValue"], [103, 2, 1, "", "getter_attrs"], [103, 3, 1, "", "hasDefault"], [103, 3, 1, "", "hasParam"], [103, 2, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "inputCols"], [103, 3, 1, "", "inputColsValidation"], [103, 3, 1, "", "isDefined"], [103, 3, 1, "", "isSet"], [103, 2, 1, "", "lazyAnnotator"], [103, 3, 1, "", "load"], [103, 2, 1, "", "name"], [103, 2, 1, "", "optionalInputAnnotatorTypes"], [103, 2, 1, "", "outputAnnotatorType"], [103, 2, 1, "", "outputCol"], [103, 2, 1, "", "questionMark"], [103, 2, 1, "", "questionPronoun"], [103, 3, 1, "", "read"], [103, 3, 1, "", "save"], [103, 3, 1, "", "set"], [103, 3, 1, "", "setEntities1"], [103, 3, 1, "", "setEntities2"], [103, 3, 1, "", "setForceInputTypeValidation"], [103, 3, 1, "", "setInputCols"], [103, 3, 1, "", "setLazyAnnotator"], [103, 3, 1, "", "setOutputCol"], [103, 3, 1, "", "setParamValue"], [103, 3, 1, "", "setParams"], [103, 3, 1, "", "setQuestionMark"], [103, 3, 1, "", "setQuestionPronoun"], [103, 3, 1, "", "setStrategyType"], [103, 2, 1, "", "skipLPInputColsValidation"], [103, 2, 1, "", "strategyType"], [103, 3, 1, "", "transform"], [103, 2, 1, "", "uid"], [103, 3, 1, "", "write"]], "sparknlp_jsl.annotator.rag": [[104, 0, 0, "-", "context_split_assembler"], [106, 0, 0, "-", "vectordb_post_processor"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[104, 1, 1, "", "ContextSplitAssembler"]], "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler": [[104, 3, 1, "", "clear"], [104, 3, 1, "", "copy"], [104, 3, 1, "", "explainParam"], [104, 3, 1, "", "explainParams"], [104, 2, 1, "", "explodeSplits"], [104, 3, 1, "", "extractParamMap"], [104, 3, 1, "", "getInputCols"], [104, 3, 1, "", "getLazyAnnotator"], [104, 3, 1, "", "getOrDefault"], [104, 3, 1, "", "getOutputCol"], [104, 3, 1, "", "getParam"], [104, 3, 1, "", "getParamValue"], [104, 2, 1, "", "getter_attrs"], [104, 3, 1, "", "hasDefault"], [104, 3, 1, "", "hasParam"], [104, 2, 1, "", "inputAnnotatorTypes"], [104, 2, 1, "", "inputCols"], [104, 3, 1, "", "inputColsValidation"], [104, 3, 1, "", "isDefined"], [104, 3, 1, "", "isSet"], [104, 2, 1, "", "joinString"], [104, 2, 1, "", "lazyAnnotator"], [104, 3, 1, "", "load"], [104, 2, 1, "", "name"], [104, 2, 1, "", "optionalInputAnnotatorTypes"], [104, 2, 1, "", "outputAnnotatorType"], [104, 2, 1, "", "outputCol"], [104, 3, 1, "", "read"], [104, 3, 1, "", "save"], [104, 3, 1, "", "set"], [104, 3, 1, "", "setExplodeSplits"], [104, 3, 1, "", "setForceInputTypeValidation"], [104, 3, 1, "", "setInputCols"], [104, 3, 1, "", "setJoinString"], [104, 3, 1, "", "setLazyAnnotator"], [104, 3, 1, "", "setOutputCol"], [104, 3, 1, "", "setParamValue"], [104, 3, 1, "", "setParams"], [104, 2, 1, "", "skipLPInputColsValidation"], [104, 3, 1, "", "transform"], [104, 2, 1, "", "uid"], [104, 3, 1, "", "write"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[106, 1, 1, "", "VectorDBPostProcessor"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor": [[106, 2, 1, "", "allowZeroContentAfterFiltering"], [106, 2, 1, "", "caseSensitive"], [106, 3, 1, "", "clear"], [106, 3, 1, "", "copy"], [106, 2, 1, "", "diversityThreshold"], [106, 3, 1, "", "explainParam"], [106, 3, 1, "", "explainParams"], [106, 3, 1, "", "extractParamMap"], [106, 2, 1, "", "filterBy"], [106, 3, 1, "", "getInputCols"], [106, 3, 1, "", "getLazyAnnotator"], [106, 3, 1, "", "getOrDefault"], [106, 3, 1, "", "getOutputCol"], [106, 3, 1, "", "getParam"], [106, 3, 1, "", "getParamValue"], [106, 2, 1, "", "getter_attrs"], [106, 3, 1, "", "hasDefault"], [106, 3, 1, "", "hasParam"], [106, 2, 1, "", "inputAnnotatorTypes"], [106, 2, 1, "", "inputCols"], [106, 3, 1, "", "inputColsValidation"], [106, 3, 1, "", "isDefined"], [106, 3, 1, "", "isSet"], [106, 2, 1, "", "lazyAnnotator"], [106, 3, 1, "", "load"], [106, 2, 1, "", "maxTopKAfterFiltering"], [106, 2, 1, "", "name"], [106, 2, 1, "", "optionalInputAnnotatorTypes"], [106, 2, 1, "", "outputAnnotatorType"], [106, 2, 1, "", "outputCol"], [106, 3, 1, "", "read"], [106, 3, 1, "", "save"], [106, 3, 1, "", "set"], [106, 3, 1, "", "setAllowZeroContentAfterFiltering"], [106, 3, 1, "", "setCaseSensitive"], [106, 3, 1, "", "setDiversityThreshold"], [106, 3, 1, "", "setFilterBy"], [106, 3, 1, "", "setForceInputTypeValidation"], [106, 3, 1, "", "setInputCols"], [106, 3, 1, "", "setLazyAnnotator"], [106, 3, 1, "", "setMaxTopKAfterFiltering"], [106, 3, 1, "", "setMetadataCriteria"], [106, 3, 1, "", "setMetadataCriteriaAsStr"], [106, 3, 1, "", "setOutputCol"], [106, 3, 1, "", "setParamValue"], [106, 3, 1, "", "setParams"], [106, 3, 1, "", "setSortBy"], [106, 2, 1, "", "skipLPInputColsValidation"], [106, 2, 1, "", "sortBy"], [106, 3, 1, "", "transform"], [106, 2, 1, "", "uid"], [106, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re": [[108, 0, 0, "-", "relation_extraction"], [109, 0, 0, "-", "relation_extraction_dl"], [110, 0, 0, "-", "relation_ner_chunk_filter"], [111, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[108, 1, 1, "", "GenericREModel"], [108, 1, 1, "", "PosologyREModel"], [108, 1, 1, "", "RelationExtractionApproach"], [108, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel": [[108, 2, 1, "", "classes"], [108, 3, 1, "", "clear"], [108, 3, 1, "", "copy"], [108, 2, 1, "", "customLabels"], [108, 2, 1, "", "datasetInfo"], [108, 2, 1, "", "directionSensitive"], [108, 2, 1, "", "doExceptionHandling"], [108, 3, 1, "", "explainParam"], [108, 3, 1, "", "explainParams"], [108, 3, 1, "", "extractParamMap"], [108, 2, 1, "", "featureScaling"], [108, 2, 1, "", "filterByTokenDistance"], [108, 3, 1, "", "getClasses"], [108, 3, 1, "", "getInputCols"], [108, 3, 1, "", "getLazyAnnotator"], [108, 3, 1, "", "getOrDefault"], [108, 3, 1, "", "getOutputCol"], [108, 3, 1, "", "getParam"], [108, 3, 1, "", "getParamValue"], [108, 3, 1, "", "getRelationTypePerPair"], [108, 2, 1, "", "getter_attrs"], [108, 3, 1, "", "hasDefault"], [108, 3, 1, "", "hasParam"], [108, 2, 1, "", "inputAnnotatorTypes"], [108, 2, 1, "", "inputCols"], [108, 3, 1, "", "inputColsValidation"], [108, 3, 1, "", "isDefined"], [108, 3, 1, "", "isSet"], [108, 2, 1, "", "lazyAnnotator"], [108, 3, 1, "", "load"], [108, 2, 1, "", "maxSyntacticDistance"], [108, 2, 1, "", "multiClass"], [108, 2, 1, "", "name"], [108, 2, 1, "", "optionalInputAnnotatorTypes"], [108, 2, 1, "", "outputAnnotatorType"], [108, 2, 1, "", "outputCol"], [108, 2, 1, "", "predictionThreshold"], [108, 3, 1, "", "pretrained"], [108, 3, 1, "", "read"], [108, 2, 1, "", "relationPairs"], [108, 2, 1, "", "relationPairsCaseSensitive"], [108, 3, 1, "", "save"], [108, 2, 1, "", "scopeWindow"], [108, 3, 1, "", "set"], [108, 3, 1, "", "setCustomLabels"], [108, 3, 1, "", "setDatasetInfo"], [108, 3, 1, "", "setDirectionSensitive"], [108, 3, 1, "", "setDoExceptionHandling"], [108, 3, 1, "", "setFeatureScaling"], [108, 3, 1, "", "setFilterByTokenDistance"], [108, 3, 1, "", "setForceInputTypeValidation"], [108, 3, 1, "", "setInputCols"], [108, 3, 1, "", "setLazyAnnotator"], [108, 3, 1, "", "setMaxSyntacticDistance"], [108, 3, 1, "", "setMultiClass"], [108, 3, 1, "", "setOutputCol"], [108, 3, 1, "", "setParamValue"], [108, 3, 1, "", "setParams"], [108, 3, 1, "", "setPredictionThreshold"], [108, 3, 1, "", "setRelationPairs"], [108, 3, 1, "", "setRelationPairsCaseSensitive"], [108, 3, 1, "", "setRelationTypePerPair"], [108, 3, 1, "", "setScopeWindow"], [108, 2, 1, "", "skipLPInputColsValidation"], [108, 3, 1, "", "transform"], [108, 2, 1, "", "uid"], [108, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel": [[108, 2, 1, "", "classes"], [108, 3, 1, "", "clear"], [108, 3, 1, "", "copy"], [108, 2, 1, "", "customLabels"], [108, 2, 1, "", "datasetInfo"], [108, 2, 1, "", "directionSensitive"], [108, 2, 1, "", "doExceptionHandling"], [108, 3, 1, "", "explainParam"], [108, 3, 1, "", "explainParams"], [108, 3, 1, "", "extractParamMap"], [108, 2, 1, "", "featureScaling"], [108, 2, 1, "", "filterByTokenDistance"], [108, 3, 1, "", "getClasses"], [108, 3, 1, "", "getInputCols"], [108, 3, 1, "", "getLazyAnnotator"], [108, 3, 1, "", "getOrDefault"], [108, 3, 1, "", "getOutputCol"], [108, 3, 1, "", "getParam"], [108, 3, 1, "", "getParamValue"], [108, 3, 1, "", "getRelationTypePerPair"], [108, 2, 1, "", "getter_attrs"], [108, 3, 1, "", "hasDefault"], [108, 3, 1, "", "hasParam"], [108, 2, 1, "", "inputAnnotatorTypes"], [108, 2, 1, "", "inputCols"], [108, 3, 1, "", "inputColsValidation"], [108, 3, 1, "", "isDefined"], [108, 3, 1, "", "isSet"], [108, 2, 1, "", "lazyAnnotator"], [108, 3, 1, "", "load"], [108, 2, 1, "", "maxSyntacticDistance"], [108, 2, 1, "", "multiClass"], [108, 2, 1, "", "name"], [108, 2, 1, "", "optionalInputAnnotatorTypes"], [108, 2, 1, "", "outputAnnotatorType"], [108, 2, 1, "", "outputCol"], [108, 2, 1, "", "predictionThreshold"], [108, 3, 1, "", "pretrained"], [108, 3, 1, "", "read"], [108, 2, 1, "", "relationPairs"], [108, 2, 1, "", "relationPairsCaseSensitive"], [108, 3, 1, "", "save"], [108, 2, 1, "", "scopeWindow"], [108, 3, 1, "", "set"], [108, 3, 1, "", "setCustomLabels"], [108, 3, 1, "", "setDatasetInfo"], [108, 3, 1, "", "setDirectionSensitive"], [108, 3, 1, "", "setDoExceptionHandling"], [108, 3, 1, "", "setFeatureScaling"], [108, 3, 1, "", "setFilterByTokenDistance"], [108, 3, 1, "", "setForceInputTypeValidation"], [108, 3, 1, "", "setInputCols"], [108, 3, 1, "", "setLazyAnnotator"], [108, 3, 1, "", "setMaxSyntacticDistance"], [108, 3, 1, "", "setMultiClass"], [108, 3, 1, "", "setOutputCol"], [108, 3, 1, "", "setParamValue"], [108, 3, 1, "", "setParams"], [108, 3, 1, "", "setPredictionThreshold"], [108, 3, 1, "", "setRelationPairs"], [108, 3, 1, "", "setRelationPairsCaseSensitive"], [108, 3, 1, "", "setRelationTypePerPair"], [108, 3, 1, "", "setScopeWindow"], [108, 2, 1, "", "skipLPInputColsValidation"], [108, 3, 1, "", "transform"], [108, 2, 1, "", "uid"], [108, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[108, 2, 1, "", "batchSize"], [108, 3, 1, "", "clear"], [108, 3, 1, "", "copy"], [108, 2, 1, "", "customLabels"], [108, 2, 1, "", "datasetInfo"], [108, 2, 1, "", "directionSensitive"], [108, 2, 1, "", "doExceptionHandling"], [108, 2, 1, "", "dropout"], [108, 2, 1, "", "engine"], [108, 2, 1, "", "epochsN"], [108, 3, 1, "", "explainParam"], [108, 3, 1, "", "explainParams"], [108, 3, 1, "", "extractParamMap"], [108, 2, 1, "", "featureScaling"], [108, 2, 1, "", "filterByTokenDistance"], [108, 3, 1, "", "fit"], [108, 3, 1, "", "fitMultiple"], [108, 2, 1, "", "fixImbalance"], [108, 2, 1, "", "fromEntityBeginCol"], [108, 2, 1, "", "fromEntityEndCol"], [108, 2, 1, "", "fromEntityLabelCol"], [108, 3, 1, "", "getEngine"], [108, 3, 1, "", "getInputCols"], [108, 3, 1, "", "getLazyAnnotator"], [108, 3, 1, "", "getOrDefault"], [108, 3, 1, "", "getOutputCol"], [108, 3, 1, "", "getParam"], [108, 3, 1, "", "getParamValue"], [108, 2, 1, "", "getter_attrs"], [108, 3, 1, "", "hasDefault"], [108, 3, 1, "", "hasParam"], [108, 2, 1, "", "inputAnnotatorTypes"], [108, 2, 1, "", "inputCols"], [108, 3, 1, "", "inputColsValidation"], [108, 3, 1, "", "isDefined"], [108, 3, 1, "", "isSet"], [108, 2, 1, "", "labelColumn"], [108, 2, 1, "", "lazyAnnotator"], [108, 2, 1, "", "learningRate"], [108, 3, 1, "", "load"], [108, 2, 1, "", "maxSyntacticDistance"], [108, 2, 1, "", "modelFile"], [108, 2, 1, "", "multiClass"], [108, 2, 1, "", "name"], [108, 2, 1, "", "optionalInputAnnotatorTypes"], [108, 2, 1, "", "outputAnnotatorType"], [108, 2, 1, "", "outputCol"], [108, 2, 1, "", "outputLogsPath"], [108, 2, 1, "", "overrideExistingLabels"], [108, 2, 1, "", "pretrainedModelPath"], [108, 3, 1, "", "read"], [108, 2, 1, "", "relationDirectionCol"], [108, 3, 1, "", "save"], [108, 2, 1, "", "scopeWindow"], [108, 3, 1, "", "set"], [108, 3, 1, "", "setBatchSize"], [108, 3, 1, "", "setCustomLabels"], [108, 3, 1, "", "setDatasetInfo"], [108, 3, 1, "", "setDirectionSensitive"], [108, 3, 1, "", "setDoExceptionHandling"], [108, 3, 1, "", "setDropout"], [108, 3, 1, "", "setEpochsNumber"], [108, 3, 1, "", "setFeatureScaling"], [108, 3, 1, "", "setFilterByTokenDistance"], [108, 3, 1, "", "setFixImbalance"], [108, 3, 1, "", "setForceInputTypeValidation"], [108, 3, 1, "", "setFromEntity"], [108, 3, 1, "", "setInputCols"], [108, 3, 1, "", "setLabelCol"], [108, 3, 1, "", "setLazyAnnotator"], [108, 3, 1, "", "setLearningRate"], [108, 3, 1, "", "setMaxSyntacticDistance"], [108, 3, 1, "", "setModelFile"], [108, 3, 1, "", "setMultiClass"], [108, 3, 1, "", "setOutputCol"], [108, 3, 1, "", "setOutputLogsPath"], [108, 3, 1, "", "setParamValue"], [108, 3, 1, "", "setPretrainedModelPath"], [108, 3, 1, "", "setRelationDirectionCol"], [108, 3, 1, "", "setScopeWindow"], [108, 3, 1, "", "setToEntity"], [108, 3, 1, "", "setValidationSplit"], [108, 3, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [108, 2, 1, "", "skipLPInputColsValidation"], [108, 2, 1, "", "toEntityBeginCol"], [108, 2, 1, "", "toEntityEndCol"], [108, 2, 1, "", "toEntityLabelCol"], [108, 2, 1, "", "uid"], [108, 2, 1, "", "validationSplit"], [108, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[108, 2, 1, "", "classes"], [108, 3, 1, "", "clear"], [108, 3, 1, "", "copy"], [108, 2, 1, "", "customLabels"], [108, 2, 1, "", "datasetInfo"], [108, 2, 1, "", "directionSensitive"], [108, 2, 1, "", "doExceptionHandling"], [108, 3, 1, "", "explainParam"], [108, 3, 1, "", "explainParams"], [108, 3, 1, "", "extractParamMap"], [108, 2, 1, "", "featureScaling"], [108, 2, 1, "", "filterByTokenDistance"], [108, 3, 1, "", "getClasses"], [108, 3, 1, "", "getInputCols"], [108, 3, 1, "", "getLazyAnnotator"], [108, 3, 1, "", "getOrDefault"], [108, 3, 1, "", "getOutputCol"], [108, 3, 1, "", "getParam"], [108, 3, 1, "", "getParamValue"], [108, 3, 1, "", "getRelationTypePerPair"], [108, 2, 1, "", "getter_attrs"], [108, 3, 1, "", "hasDefault"], [108, 3, 1, "", "hasParam"], [108, 2, 1, "", "inputAnnotatorTypes"], [108, 2, 1, "", "inputCols"], [108, 3, 1, "", "inputColsValidation"], [108, 3, 1, "", "isDefined"], [108, 3, 1, "", "isSet"], [108, 2, 1, "", "lazyAnnotator"], [108, 3, 1, "", "load"], [108, 2, 1, "", "maxSyntacticDistance"], [108, 2, 1, "", "multiClass"], [108, 2, 1, "", "name"], [108, 2, 1, "", "optionalInputAnnotatorTypes"], [108, 2, 1, "", "outputAnnotatorType"], [108, 2, 1, "", "outputCol"], [108, 2, 1, "", "predictionThreshold"], [108, 3, 1, "", "pretrained"], [108, 3, 1, "", "read"], [108, 2, 1, "", "relationPairs"], [108, 2, 1, "", "relationPairsCaseSensitive"], [108, 3, 1, "", "save"], [108, 2, 1, "", "scopeWindow"], [108, 3, 1, "", "set"], [108, 3, 1, "", "setCustomLabels"], [108, 3, 1, "", "setDatasetInfo"], [108, 3, 1, "", "setDirectionSensitive"], [108, 3, 1, "", "setDoExceptionHandling"], [108, 3, 1, "", "setFeatureScaling"], [108, 3, 1, "", "setFilterByTokenDistance"], [108, 3, 1, "", "setForceInputTypeValidation"], [108, 3, 1, "", "setInputCols"], [108, 3, 1, "", "setLazyAnnotator"], [108, 3, 1, "", "setMaxSyntacticDistance"], [108, 3, 1, "", "setMultiClass"], [108, 3, 1, "", "setOutputCol"], [108, 3, 1, "", "setParamValue"], [108, 3, 1, "", "setParams"], [108, 3, 1, "", "setPredictionThreshold"], [108, 3, 1, "", "setRelationPairs"], [108, 3, 1, "", "setRelationPairsCaseSensitive"], [108, 3, 1, "", "setRelationTypePerPair"], [108, 3, 1, "", "setScopeWindow"], [108, 2, 1, "", "skipLPInputColsValidation"], [108, 3, 1, "", "transform"], [108, 2, 1, "", "uid"], [108, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[109, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[109, 2, 1, "", "batchSize"], [109, 2, 1, "", "classes"], [109, 3, 1, "", "clear"], [109, 3, 1, "", "copy"], [109, 2, 1, "", "customLabels"], [109, 2, 1, "", "doExceptionHandling"], [109, 3, 1, "", "explainParam"], [109, 3, 1, "", "explainParams"], [109, 3, 1, "", "extractParamMap"], [109, 3, 1, "", "getClasses"], [109, 3, 1, "", "getInputCols"], [109, 3, 1, "", "getLazyAnnotator"], [109, 3, 1, "", "getOrDefault"], [109, 3, 1, "", "getOutputCol"], [109, 3, 1, "", "getParam"], [109, 3, 1, "", "getParamValue"], [109, 3, 1, "", "getRelationTypePerPair"], [109, 2, 1, "", "getter_attrs"], [109, 3, 1, "", "hasDefault"], [109, 3, 1, "", "hasParam"], [109, 2, 1, "", "inputAnnotatorTypes"], [109, 2, 1, "", "inputCols"], [109, 3, 1, "", "inputColsValidation"], [109, 3, 1, "", "isDefined"], [109, 3, 1, "", "isSet"], [109, 2, 1, "", "lazyAnnotator"], [109, 3, 1, "", "load"], [109, 3, 1, "", "loadSavedModel"], [109, 2, 1, "", "name"], [109, 2, 1, "", "optionalInputAnnotatorTypes"], [109, 2, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "outputCol"], [109, 2, 1, "", "predictionThreshold"], [109, 3, 1, "", "pretrained"], [109, 3, 1, "", "read"], [109, 2, 1, "", "relationPairsCaseSensitive"], [109, 3, 1, "", "save"], [109, 3, 1, "", "set"], [109, 3, 1, "", "setBatchSize"], [109, 3, 1, "", "setCaseSensitive"], [109, 3, 1, "", "setCustomLabels"], [109, 3, 1, "", "setDoExceptionHandling"], [109, 3, 1, "", "setForceInputTypeValidation"], [109, 3, 1, "", "setInputCols"], [109, 3, 1, "", "setLazyAnnotator"], [109, 3, 1, "", "setOutputCol"], [109, 3, 1, "", "setParamValue"], [109, 3, 1, "", "setParams"], [109, 3, 1, "", "setPredictionThreshold"], [109, 3, 1, "", "setRelationPairsCaseSensitive"], [109, 3, 1, "", "setRelationTypePerPair"], [109, 2, 1, "", "skipLPInputColsValidation"], [109, 3, 1, "", "transform"], [109, 2, 1, "", "uid"], [109, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[110, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[110, 3, 1, "", "clear"], [110, 3, 1, "", "copy"], [110, 2, 1, "", "directionSensitive"], [110, 2, 1, "", "docLevelRelations"], [110, 3, 1, "", "explainParam"], [110, 3, 1, "", "explainParams"], [110, 3, 1, "", "extractParamMap"], [110, 2, 1, "", "filterByTokenDistance"], [110, 3, 1, "", "getInputCols"], [110, 3, 1, "", "getLazyAnnotator"], [110, 3, 1, "", "getOrDefault"], [110, 3, 1, "", "getOutputCol"], [110, 3, 1, "", "getParam"], [110, 3, 1, "", "getParamValue"], [110, 2, 1, "", "getter_attrs"], [110, 3, 1, "", "hasDefault"], [110, 3, 1, "", "hasParam"], [110, 2, 1, "", "inputAnnotatorTypes"], [110, 2, 1, "", "inputCols"], [110, 3, 1, "", "inputColsValidation"], [110, 3, 1, "", "isDefined"], [110, 3, 1, "", "isSet"], [110, 2, 1, "", "lazyAnnotator"], [110, 3, 1, "", "load"], [110, 2, 1, "", "maxSyntacticDistance"], [110, 2, 1, "", "name"], [110, 2, 1, "", "optionalInputAnnotatorTypes"], [110, 2, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "outputCol"], [110, 3, 1, "", "read"], [110, 2, 1, "", "relationPairs"], [110, 2, 1, "", "relationPairsCaseSensitive"], [110, 3, 1, "", "save"], [110, 3, 1, "", "set"], [110, 3, 1, "", "setDirectionSensitive"], [110, 3, 1, "", "setDocLevelRelations"], [110, 3, 1, "", "setFilterByTokenDistance"], [110, 3, 1, "", "setInputCols"], [110, 3, 1, "", "setLazyAnnotator"], [110, 3, 1, "", "setMaxSyntacticDistance"], [110, 3, 1, "", "setOutputCol"], [110, 3, 1, "", "setParamValue"], [110, 3, 1, "", "setParams"], [110, 3, 1, "", "setRelationPairs"], [110, 3, 1, "", "setRelationPairsCaseSensitive"], [110, 3, 1, "", "transform"], [110, 2, 1, "", "uid"], [110, 3, 1, "", "write"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[111, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[111, 2, 1, "", "caseSensitive"], [111, 3, 1, "", "clear"], [111, 2, 1, "", "coalesceSentences"], [111, 2, 1, "", "configProtoBytes"], [111, 3, 1, "", "copy"], [111, 3, 1, "", "explainParam"], [111, 3, 1, "", "explainParams"], [111, 3, 1, "", "extractParamMap"], [111, 3, 1, "", "getCaseSensitive"], [111, 3, 1, "", "getClasses"], [111, 3, 1, "", "getInputCols"], [111, 3, 1, "", "getLazyAnnotator"], [111, 3, 1, "", "getOrDefault"], [111, 3, 1, "", "getOutputCol"], [111, 3, 1, "", "getParam"], [111, 3, 1, "", "getParamValue"], [111, 2, 1, "", "getter_attrs"], [111, 3, 1, "", "hasDefault"], [111, 3, 1, "", "hasParam"], [111, 2, 1, "", "inputAnnotatorTypes"], [111, 2, 1, "", "inputCols"], [111, 3, 1, "", "inputColsValidation"], [111, 3, 1, "", "isDefined"], [111, 3, 1, "", "isSet"], [111, 2, 1, "", "lazyAnnotator"], [111, 3, 1, "", "load"], [111, 3, 1, "", "loadSavedModel"], [111, 3, 1, "", "loadSavedModelOpenSource"], [111, 2, 1, "", "maxSentenceLength"], [111, 2, 1, "", "multiLabel"], [111, 2, 1, "", "name"], [111, 2, 1, "", "negativeRelationships"], [111, 2, 1, "", "optionalInputAnnotatorTypes"], [111, 2, 1, "", "outputAnnotatorType"], [111, 2, 1, "", "outputCol"], [111, 2, 1, "", "predictionThreshold"], [111, 3, 1, "", "pretrained"], [111, 3, 1, "", "read"], [111, 3, 1, "", "save"], [111, 3, 1, "", "set"], [111, 3, 1, "", "setCaseSensitive"], [111, 3, 1, "", "setCoalesceSentences"], [111, 3, 1, "", "setConfigProtoBytes"], [111, 3, 1, "", "setForceInputTypeValidation"], [111, 3, 1, "", "setInputCols"], [111, 3, 1, "", "setLazyAnnotator"], [111, 3, 1, "", "setMaxSentenceLength"], [111, 3, 1, "", "setNegativeRelationships"], [111, 3, 1, "", "setOutputCol"], [111, 3, 1, "", "setParamValue"], [111, 3, 1, "", "setParams"], [111, 3, 1, "", "setRelationalCategories"], [111, 2, 1, "", "skipLPInputColsValidation"], [111, 3, 1, "", "transform"], [111, 2, 1, "", "uid"], [111, 3, 1, "", "write"]], "sparknlp_jsl.annotator.regex": [[113, 0, 0, "-", "regex_matcher"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[113, 1, 1, "", "RegexMatcherInternal"], [113, 1, 1, "", "RegexMatcherInternalModel"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal": [[113, 3, 1, "", "clear"], [113, 3, 1, "", "copy"], [113, 2, 1, "", "delimiter"], [113, 3, 1, "", "explainParam"], [113, 3, 1, "", "explainParams"], [113, 2, 1, "", "externalRules"], [113, 3, 1, "", "extractParamMap"], [113, 3, 1, "", "fit"], [113, 3, 1, "", "fitMultiple"], [113, 3, 1, "", "getInputCols"], [113, 3, 1, "", "getLazyAnnotator"], [113, 3, 1, "", "getOrDefault"], [113, 3, 1, "", "getOutputCol"], [113, 3, 1, "", "getParam"], [113, 3, 1, "", "getParamValue"], [113, 2, 1, "", "getter_attrs"], [113, 3, 1, "", "hasDefault"], [113, 3, 1, "", "hasParam"], [113, 2, 1, "", "inputAnnotatorTypes"], [113, 2, 1, "", "inputCols"], [113, 3, 1, "", "inputColsValidation"], [113, 3, 1, "", "isDefined"], [113, 3, 1, "", "isSet"], [113, 2, 1, "", "lazyAnnotator"], [113, 3, 1, "", "load"], [113, 2, 1, "", "mergeOverlapping"], [113, 2, 1, "", "optionalInputAnnotatorTypes"], [113, 2, 1, "", "outputAnnotatorType"], [113, 2, 1, "", "outputCol"], [113, 3, 1, "", "read"], [113, 2, 1, "", "rules"], [113, 3, 1, "", "save"], [113, 3, 1, "", "set"], [113, 3, 1, "", "setDelimiter"], [113, 3, 1, "", "setExternalRules"], [113, 3, 1, "", "setForceInputTypeValidation"], [113, 3, 1, "", "setInputCols"], [113, 3, 1, "", "setLazyAnnotator"], [113, 3, 1, "", "setMergeOverlapping"], [113, 3, 1, "", "setOutputCol"], [113, 3, 1, "", "setParamValue"], [113, 3, 1, "", "setRules"], [113, 3, 1, "", "setStrategy"], [113, 2, 1, "", "skipLPInputColsValidation"], [113, 2, 1, "", "strategy"], [113, 2, 1, "", "uid"], [113, 3, 1, "", "write"]], "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel": [[113, 3, 1, "", "clear"], [113, 3, 1, "", "copy"], [113, 3, 1, "", "explainParam"], [113, 3, 1, "", "explainParams"], [113, 3, 1, "", "extractParamMap"], [113, 3, 1, "", "getInputCols"], [113, 3, 1, "", "getLazyAnnotator"], [113, 3, 1, "", "getOrDefault"], [113, 3, 1, "", "getOutputCol"], [113, 3, 1, "", "getParam"], [113, 3, 1, "", "getParamValue"], [113, 2, 1, "", "getter_attrs"], [113, 3, 1, "", "hasDefault"], [113, 3, 1, "", "hasParam"], [113, 2, 1, "", "inputAnnotatorTypes"], [113, 2, 1, "", "inputCols"], [113, 3, 1, "", "inputColsValidation"], [113, 3, 1, "", "isDefined"], [113, 3, 1, "", "isSet"], [113, 2, 1, "", "lazyAnnotator"], [113, 3, 1, "", "load"], [113, 2, 1, "", "mergeOverlapping"], [113, 2, 1, "", "name"], [113, 2, 1, "", "optionalInputAnnotatorTypes"], [113, 2, 1, "", "outputAnnotatorType"], [113, 2, 1, "", "outputCol"], [113, 3, 1, "", "pretrained"], [113, 3, 1, "", "read"], [113, 3, 1, "", "save"], [113, 3, 1, "", "set"], [113, 3, 1, "", "setInputCols"], [113, 3, 1, "", "setLazyAnnotator"], [113, 3, 1, "", "setMergeOverlapping"], [113, 3, 1, "", "setOutputCol"], [113, 3, 1, "", "setParamValue"], [113, 3, 1, "", "setParams"], [113, 3, 1, "", "transform"], [113, 2, 1, "", "uid"], [113, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution": [[115, 0, 0, "-", "resolver_merger"], [116, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[115, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[115, 3, 1, "", "clear"], [115, 3, 1, "", "copy"], [115, 3, 1, "", "explainParam"], [115, 3, 1, "", "explainParams"], [115, 3, 1, "", "extractParamMap"], [115, 3, 1, "", "getInputCols"], [115, 3, 1, "", "getLazyAnnotator"], [115, 3, 1, "", "getOrDefault"], [115, 3, 1, "", "getOutputCol"], [115, 3, 1, "", "getParam"], [115, 3, 1, "", "getParamValue"], [115, 2, 1, "", "getter_attrs"], [115, 3, 1, "", "hasDefault"], [115, 3, 1, "", "hasParam"], [115, 2, 1, "", "inputAnnotatorTypes"], [115, 2, 1, "", "inputCols"], [115, 3, 1, "", "inputColsValidation"], [115, 3, 1, "", "isDefined"], [115, 3, 1, "", "isSet"], [115, 2, 1, "", "lazyAnnotator"], [115, 3, 1, "", "load"], [115, 2, 1, "", "name"], [115, 2, 1, "", "optionalInputAnnotatorTypes"], [115, 2, 1, "", "outputAnnotatorType"], [115, 2, 1, "", "outputCol"], [115, 3, 1, "", "read"], [115, 3, 1, "", "save"], [115, 3, 1, "", "set"], [115, 3, 1, "", "setForceInputTypeValidation"], [115, 3, 1, "", "setInputCols"], [115, 3, 1, "", "setLazyAnnotator"], [115, 3, 1, "", "setOutputCol"], [115, 3, 1, "", "setParamValue"], [115, 3, 1, "", "setParams"], [115, 2, 1, "", "skipLPInputColsValidation"], [115, 3, 1, "", "transform"], [115, 2, 1, "", "uid"], [115, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[116, 1, 1, "", "SentenceEntityResolverApproach"], [116, 1, 1, "", "SentenceEntityResolverModel"], [116, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[116, 2, 1, "", "aux_label_col"], [116, 2, 1, "", "caseSensitive"], [116, 3, 1, "", "clear"], [116, 2, 1, "", "confidenceFunction"], [116, 3, 1, "", "copy"], [116, 2, 1, "", "datasetInfo"], [116, 2, 1, "", "distanceFunction"], [116, 2, 1, "", "doExceptionHandling"], [116, 2, 1, "", "dropCodesList"], [116, 2, 1, "", "engine"], [116, 3, 1, "", "explainParam"], [116, 3, 1, "", "explainParams"], [116, 3, 1, "", "extractParamMap"], [116, 3, 1, "", "fit"], [116, 3, 1, "", "fitMultiple"], [116, 3, 1, "", "getCaseSensitive"], [116, 3, 1, "", "getEngine"], [116, 3, 1, "", "getInputCols"], [116, 3, 1, "", "getLazyAnnotator"], [116, 3, 1, "", "getOrDefault"], [116, 3, 1, "", "getOutputCol"], [116, 3, 1, "", "getParam"], [116, 3, 1, "", "getParamValue"], [116, 2, 1, "", "getter_attrs"], [116, 3, 1, "", "hasDefault"], [116, 3, 1, "", "hasParam"], [116, 2, 1, "", "inputAnnotatorTypes"], [116, 2, 1, "", "inputCols"], [116, 3, 1, "", "inputColsValidation"], [116, 3, 1, "", "isDefined"], [116, 3, 1, "", "isSet"], [116, 2, 1, "", "labelCol"], [116, 2, 1, "", "lazyAnnotator"], [116, 3, 1, "", "load"], [116, 2, 1, "", "missAsEmpty"], [116, 2, 1, "", "neighbours"], [116, 2, 1, "", "normalizedCol"], [116, 2, 1, "", "optionalInputAnnotatorTypes"], [116, 2, 1, "", "outputAnnotatorType"], [116, 2, 1, "", "outputCol"], [116, 2, 1, "", "overrideExistingCodes"], [116, 2, 1, "", "pretrainedModelPath"], [116, 3, 1, "", "read"], [116, 2, 1, "", "returnCosineDistances"], [116, 2, 1, "", "returnResolvedTextEmbeddings"], [116, 3, 1, "", "save"], [116, 3, 1, "", "set"], [116, 3, 1, "", "setAuxLabelCol"], [116, 3, 1, "", "setCaseSensitive"], [116, 3, 1, "", "setConfidenceFunction"], [116, 3, 1, "", "setDatasetInfo"], [116, 3, 1, "", "setDistanceFunction"], [116, 3, 1, "", "setDoExceptionHandling"], [116, 3, 1, "", "setDropCodesList"], [116, 3, 1, "", "setExtractCosineDistances"], [116, 3, 1, "", "setForceInputTypeValidation"], [116, 3, 1, "", "setInputCols"], [116, 3, 1, "", "setLabelCol"], [116, 3, 1, "", "setLazyAnnotator"], [116, 3, 1, "", "setMissAsEmpty"], [116, 3, 1, "", "setNeighbours"], [116, 3, 1, "", "setNormalizedCol"], [116, 3, 1, "", "setOutputCol"], [116, 3, 1, "", "setOverrideExistingCodes"], [116, 3, 1, "", "setParamValue"], [116, 3, 1, "", "setPretrainedModelPath"], [116, 3, 1, "", "setReturnResolvedTextEmbeddings"], [116, 3, 1, "", "setThreshold"], [116, 3, 1, "", "setUseAuxLabel"], [116, 2, 1, "", "skipLPInputColsValidation"], [116, 2, 1, "", "threshold"], [116, 2, 1, "", "uid"], [116, 2, 1, "", "useAuxLabel"], [116, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[116, 3, 1, "", "clear"], [116, 3, 1, "", "copy"], [116, 2, 1, "", "dimension"], [116, 3, 1, "", "explainParam"], [116, 3, 1, "", "explainParams"], [116, 3, 1, "", "extractParamMap"], [116, 3, 1, "", "getDimension"], [116, 3, 1, "", "getInputCols"], [116, 3, 1, "", "getLazyAnnotator"], [116, 3, 1, "", "getOrDefault"], [116, 3, 1, "", "getOutputCol"], [116, 3, 1, "", "getParam"], [116, 3, 1, "", "getParamValue"], [116, 2, 1, "", "getter_attrs"], [116, 3, 1, "", "hasDefault"], [116, 3, 1, "", "hasParam"], [116, 2, 1, "", "inputAnnotatorTypes"], [116, 2, 1, "", "inputCols"], [116, 3, 1, "", "inputColsValidation"], [116, 3, 1, "", "isDefined"], [116, 3, 1, "", "isSet"], [116, 2, 1, "", "lazyAnnotator"], [116, 3, 1, "", "load"], [116, 2, 1, "", "name"], [116, 2, 1, "", "optionalInputAnnotatorTypes"], [116, 2, 1, "", "outputAnnotatorType"], [116, 2, 1, "", "outputCol"], [116, 3, 1, "", "pretrained"], [116, 3, 1, "", "read"], [116, 2, 1, "", "returnCosineDistances"], [116, 3, 1, "", "save"], [116, 2, 1, "", "searchTree"], [116, 3, 1, "", "set"], [116, 3, 1, "", "setDimension"], [116, 3, 1, "", "setForceInputTypeValidation"], [116, 3, 1, "", "setInputCols"], [116, 3, 1, "", "setLazyAnnotator"], [116, 3, 1, "", "setOutputCol"], [116, 3, 1, "", "setParamValue"], [116, 3, 1, "", "setParams"], [116, 3, 1, "", "setSearchTree"], [116, 3, 1, "", "setUseAuxLabel"], [116, 2, 1, "", "skipLPInputColsValidation"], [116, 3, 1, "", "transform"], [116, 2, 1, "", "uid"], [116, 2, 1, "", "useAuxLabel"], [116, 3, 1, "", "write"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[116, 2, 1, "", "caseSensitive"], [116, 2, 1, "", "confidenceFunction"], [116, 2, 1, "", "datasetInfo"], [116, 2, 1, "", "distanceFunction"], [116, 2, 1, "", "doExceptionHandling"], [116, 3, 1, "", "getCaseSensitive"], [116, 2, 1, "", "inputAnnotatorTypes"], [116, 2, 1, "", "missAsEmpty"], [116, 2, 1, "", "neighbours"], [116, 2, 1, "", "returnResolvedTextEmbeddings"], [116, 3, 1, "", "setCaseSensitive"], [116, 3, 1, "", "setConfidenceFunction"], [116, 3, 1, "", "setDatasetInfo"], [116, 3, 1, "", "setDistanceFunction"], [116, 3, 1, "", "setDoExceptionHandling"], [116, 3, 1, "", "setMissAsEmpty"], [116, 3, 1, "", "setNeighbours"], [116, 3, 1, "", "setReturnResolvedTextEmbeddings"], [116, 3, 1, "", "setThreshold"], [116, 2, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[117, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[117, 3, 1, "", "clear"], [117, 3, 1, "", "copy"], [117, 3, 1, "", "explainParam"], [117, 3, 1, "", "explainParams"], [117, 3, 1, "", "extractParamMap"], [117, 3, 1, "", "getInputCols"], [117, 3, 1, "", "getLazyAnnotator"], [117, 3, 1, "", "getOrDefault"], [117, 3, 1, "", "getOutputCol"], [117, 3, 1, "", "getParam"], [117, 3, 1, "", "getParamValue"], [117, 2, 1, "", "getter_attrs"], [117, 3, 1, "", "hasDefault"], [117, 3, 1, "", "hasParam"], [117, 2, 1, "", "inputAnnotatorTypes"], [117, 2, 1, "", "inputCols"], [117, 3, 1, "", "inputColsValidation"], [117, 3, 1, "", "isDefined"], [117, 3, 1, "", "isSet"], [117, 2, 1, "", "lazyAnnotator"], [117, 3, 1, "", "load"], [117, 2, 1, "", "name"], [117, 2, 1, "", "optionalInputAnnotatorTypes"], [117, 2, 1, "", "outputAnnotatorType"], [117, 2, 1, "", "outputCol"], [117, 3, 1, "", "read"], [117, 3, 1, "", "save"], [117, 3, 1, "", "set"], [117, 3, 1, "", "setInputCols"], [117, 3, 1, "", "setLazyAnnotator"], [117, 3, 1, "", "setOutputCol"], [117, 3, 1, "", "setParamValue"], [117, 3, 1, "", "setParams"], [117, 3, 1, "", "transform"], [117, 2, 1, "", "uid"], [117, 3, 1, "", "write"]], "sparknlp_jsl.annotator.router": [[118, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[118, 3, 1, "", "clear"], [118, 3, 1, "", "copy"], [118, 3, 1, "", "explainParam"], [118, 3, 1, "", "explainParams"], [118, 3, 1, "", "extractParamMap"], [118, 2, 1, "", "filterFieldsElements"], [118, 3, 1, "", "getInputCols"], [118, 3, 1, "", "getLazyAnnotator"], [118, 3, 1, "", "getOrDefault"], [118, 3, 1, "", "getOutputCol"], [118, 3, 1, "", "getParam"], [118, 3, 1, "", "getParamValue"], [118, 2, 1, "", "getter_attrs"], [118, 3, 1, "", "hasDefault"], [118, 3, 1, "", "hasParam"], [118, 2, 1, "", "inputAnnotatorTypes"], [118, 2, 1, "", "inputCols"], [118, 3, 1, "", "inputColsValidation"], [118, 2, 1, "", "inputType"], [118, 3, 1, "", "isDefined"], [118, 3, 1, "", "isSet"], [118, 2, 1, "", "lazyAnnotator"], [118, 3, 1, "", "load"], [118, 2, 1, "", "metadataField"], [118, 2, 1, "", "name"], [118, 2, 1, "", "optionalInputAnnotatorTypes"], [118, 2, 1, "", "outputAnnotatorType"], [118, 2, 1, "", "outputCol"], [118, 3, 1, "", "read"], [118, 3, 1, "", "save"], [118, 3, 1, "", "set"], [118, 3, 1, "", "setFilterFieldsElements"], [118, 3, 1, "", "setForceInputTypeValidation"], [118, 3, 1, "", "setInputCols"], [118, 3, 1, "", "setInputType"], [118, 3, 1, "", "setLazyAnnotator"], [118, 3, 1, "", "setMetadataField"], [118, 3, 1, "", "setOutputCol"], [118, 3, 1, "", "setParamValue"], [118, 3, 1, "", "setParams"], [118, 2, 1, "", "skipLPInputColsValidation"], [118, 3, 1, "", "transform"], [118, 2, 1, "", "uid"], [118, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq": [[120, 0, 0, "-", "medical_encoder_decoder"], [121, 0, 0, "-", "medical_summarizer"], [122, 0, 0, "-", "medical_text_generator"], [123, 0, 0, "-", "text2sql"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[120, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[120, 2, 1, "", "batchSize"], [120, 3, 1, "", "clear"], [120, 2, 1, "", "configProtoBytes"], [120, 3, 1, "", "copy"], [120, 2, 1, "", "doSample"], [120, 3, 1, "", "explainParam"], [120, 3, 1, "", "explainParams"], [120, 3, 1, "", "extractParamMap"], [120, 3, 1, "", "getBatchSize"], [120, 3, 1, "", "getInputCols"], [120, 3, 1, "", "getLazyAnnotator"], [120, 3, 1, "", "getOrDefault"], [120, 3, 1, "", "getOutputCol"], [120, 3, 1, "", "getParam"], [120, 3, 1, "", "getParamValue"], [120, 2, 1, "", "getter_attrs"], [120, 3, 1, "", "hasDefault"], [120, 3, 1, "", "hasParam"], [120, 2, 1, "", "ignoreTokenIds"], [120, 2, 1, "", "inputAnnotatorTypes"], [120, 2, 1, "", "inputCols"], [120, 3, 1, "", "inputColsValidation"], [120, 3, 1, "", "isDefined"], [120, 3, 1, "", "isSet"], [120, 2, 1, "", "lazyAnnotator"], [120, 3, 1, "", "load"], [120, 2, 1, "", "maxNewTokens"], [120, 2, 1, "", "maxTextLength"], [120, 2, 1, "", "mlFrameworkType"], [120, 2, 1, "", "name"], [120, 2, 1, "", "noRepeatNgramSize"], [120, 2, 1, "", "optionalInputAnnotatorTypes"], [120, 2, 1, "", "outputAnnotatorType"], [120, 2, 1, "", "outputCol"], [120, 2, 1, "", "randomSeed"], [120, 3, 1, "", "read"], [120, 2, 1, "", "refineChunkSize"], [120, 2, 1, "", "refineMaxAttempts"], [120, 2, 1, "", "refineSummary"], [120, 2, 1, "", "refineSummaryTargetLength"], [120, 3, 1, "", "save"], [120, 3, 1, "", "set"], [120, 3, 1, "", "setBatchSize"], [120, 3, 1, "", "setConfigProtoBytes"], [120, 3, 1, "", "setDoSample"], [120, 3, 1, "", "setForceInputTypeValidation"], [120, 3, 1, "", "setIgnoreTokenIds"], [120, 3, 1, "", "setInputCols"], [120, 3, 1, "", "setLazyAnnotator"], [120, 3, 1, "", "setMaxNewTokens"], [120, 3, 1, "", "setMaxTextLength"], [120, 3, 1, "", "setNoRepeatNgramSize"], [120, 3, 1, "", "setOutputCol"], [120, 3, 1, "", "setParamValue"], [120, 3, 1, "", "setParams"], [120, 3, 1, "", "setRandomSeed"], [120, 3, 1, "", "setRefineChunkSize"], [120, 3, 1, "", "setRefineMaxAttempts"], [120, 3, 1, "", "setRefineSummary"], [120, 3, 1, "", "setRefineSummaryTargetLength"], [120, 3, 1, "", "setStopAtEos"], [120, 3, 1, "", "setTopK"], [120, 2, 1, "", "skipLPInputColsValidation"], [120, 2, 1, "", "stopAtEos"], [120, 2, 1, "", "task"], [120, 2, 1, "", "topK"], [120, 3, 1, "", "transform"], [120, 2, 1, "", "uid"], [120, 2, 1, "", "useCache"], [120, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[121, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[121, 2, 1, "", "batchSize"], [121, 3, 1, "", "clear"], [121, 2, 1, "", "configProtoBytes"], [121, 3, 1, "", "copy"], [121, 2, 1, "", "doSample"], [121, 3, 1, "", "explainParam"], [121, 3, 1, "", "explainParams"], [121, 3, 1, "", "extractParamMap"], [121, 3, 1, "", "getBatchSize"], [121, 3, 1, "", "getInputCols"], [121, 3, 1, "", "getLazyAnnotator"], [121, 3, 1, "", "getOrDefault"], [121, 3, 1, "", "getOutputCol"], [121, 3, 1, "", "getParam"], [121, 3, 1, "", "getParamValue"], [121, 2, 1, "", "getter_attrs"], [121, 3, 1, "", "hasDefault"], [121, 3, 1, "", "hasParam"], [121, 2, 1, "", "ignoreTokenIds"], [121, 2, 1, "", "inputAnnotatorTypes"], [121, 2, 1, "", "inputCols"], [121, 3, 1, "", "inputColsValidation"], [121, 3, 1, "", "isDefined"], [121, 3, 1, "", "isSet"], [121, 2, 1, "", "lazyAnnotator"], [121, 3, 1, "", "load"], [121, 3, 1, "", "loadSavedModel"], [121, 2, 1, "", "maxNewTokens"], [121, 2, 1, "", "maxTextLength"], [121, 2, 1, "", "mlFrameworkType"], [121, 2, 1, "", "name"], [121, 2, 1, "", "noRepeatNgramSize"], [121, 2, 1, "", "optionalInputAnnotatorTypes"], [121, 2, 1, "", "outputAnnotatorType"], [121, 2, 1, "", "outputCol"], [121, 3, 1, "", "pretrained"], [121, 2, 1, "", "randomSeed"], [121, 3, 1, "", "read"], [121, 2, 1, "", "refineChunkSize"], [121, 2, 1, "", "refineMaxAttempts"], [121, 2, 1, "", "refineSummary"], [121, 2, 1, "", "refineSummaryTargetLength"], [121, 3, 1, "", "save"], [121, 3, 1, "", "set"], [121, 3, 1, "", "setBatchSize"], [121, 3, 1, "", "setConfigProtoBytes"], [121, 3, 1, "", "setDoSample"], [121, 3, 1, "", "setForceInputTypeValidation"], [121, 3, 1, "", "setIgnoreTokenIds"], [121, 3, 1, "", "setInputCols"], [121, 3, 1, "", "setLazyAnnotator"], [121, 3, 1, "", "setMaxNewTokens"], [121, 3, 1, "", "setMaxTextLength"], [121, 3, 1, "", "setNoRepeatNgramSize"], [121, 3, 1, "", "setOutputCol"], [121, 3, 1, "", "setParamValue"], [121, 3, 1, "", "setParams"], [121, 3, 1, "", "setRandomSeed"], [121, 3, 1, "", "setRefineChunkSize"], [121, 3, 1, "", "setRefineMaxAttempts"], [121, 3, 1, "", "setRefineSummary"], [121, 3, 1, "", "setRefineSummaryTargetLength"], [121, 3, 1, "", "setStopAtEos"], [121, 3, 1, "", "setTopK"], [121, 2, 1, "", "skipLPInputColsValidation"], [121, 2, 1, "", "stopAtEos"], [121, 2, 1, "", "task"], [121, 2, 1, "", "topK"], [121, 3, 1, "", "transform"], [121, 2, 1, "", "uid"], [121, 2, 1, "", "useCache"], [121, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[122, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[122, 2, 1, "", "batchSize"], [122, 3, 1, "", "clear"], [122, 2, 1, "", "configProtoBytes"], [122, 3, 1, "", "copy"], [122, 2, 1, "", "customPrompt"], [122, 2, 1, "", "doSample"], [122, 3, 1, "", "explainParam"], [122, 3, 1, "", "explainParams"], [122, 3, 1, "", "extractParamMap"], [122, 3, 1, "", "getAdditionalTokens"], [122, 3, 1, "", "getBatchSize"], [122, 3, 1, "", "getInputCols"], [122, 3, 1, "", "getLazyAnnotator"], [122, 3, 1, "", "getOrDefault"], [122, 3, 1, "", "getOutputCol"], [122, 3, 1, "", "getParam"], [122, 3, 1, "", "getParamValue"], [122, 2, 1, "", "getter_attrs"], [122, 3, 1, "", "hasDefault"], [122, 3, 1, "", "hasParam"], [122, 2, 1, "", "ignoreTokenIds"], [122, 2, 1, "", "inputAnnotatorTypes"], [122, 2, 1, "", "inputCols"], [122, 3, 1, "", "inputColsValidation"], [122, 3, 1, "", "isDefined"], [122, 3, 1, "", "isSet"], [122, 2, 1, "", "lazyAnnotator"], [122, 3, 1, "", "load"], [122, 3, 1, "", "loadSavedModel"], [122, 2, 1, "", "maxContextLength"], [122, 2, 1, "", "maxNewTokens"], [122, 2, 1, "", "maxTextLength"], [122, 2, 1, "", "mlFrameworkType"], [122, 2, 1, "", "modelType"], [122, 2, 1, "", "name"], [122, 2, 1, "", "noRepeatNgramSize"], [122, 2, 1, "", "optionalInputAnnotatorTypes"], [122, 2, 1, "", "outputAnnotatorType"], [122, 2, 1, "", "outputCol"], [122, 3, 1, "", "pretrained"], [122, 3, 1, "", "read"], [122, 3, 1, "", "save"], [122, 3, 1, "", "set"], [122, 3, 1, "", "setAdditionalTokens"], [122, 3, 1, "", "setBatchSize"], [122, 3, 1, "", "setConfigProtoBytes"], [122, 3, 1, "", "setCustomPrompt"], [122, 3, 1, "", "setDoSample"], [122, 3, 1, "", "setForceInputTypeValidation"], [122, 3, 1, "", "setIgnoreTokenIds"], [122, 3, 1, "", "setInputCols"], [122, 3, 1, "", "setLazyAnnotator"], [122, 3, 1, "", "setMaxContextLength"], [122, 3, 1, "", "setMaxNewTokens"], [122, 3, 1, "", "setMaxTextLength"], [122, 3, 1, "", "setNoRepeatNgramSize"], [122, 3, 1, "", "setOutputCol"], [122, 3, 1, "", "setParamValue"], [122, 3, 1, "", "setParams"], [122, 3, 1, "", "setRandomSeed"], [122, 3, 1, "", "setStopAtEos"], [122, 3, 1, "", "setTopK"], [122, 3, 1, "", "setUseCache"], [122, 2, 1, "", "skipLPInputColsValidation"], [122, 2, 1, "", "stopAtEos"], [122, 2, 1, "", "topK"], [122, 3, 1, "", "transform"], [122, 2, 1, "", "uid"], [122, 2, 1, "", "useCache"], [122, 3, 1, "", "write"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[123, 1, 1, "", "Text2SQL"]], "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL": [[123, 2, 1, "", "batchSize"], [123, 3, 1, "", "clear"], [123, 2, 1, "", "configProtoBytes"], [123, 3, 1, "", "copy"], [123, 2, 1, "", "customPrompt"], [123, 2, 1, "", "doSample"], [123, 3, 1, "", "explainParam"], [123, 3, 1, "", "explainParams"], [123, 3, 1, "", "extractParamMap"], [123, 3, 1, "", "getAdditionalTokens"], [123, 3, 1, "", "getBatchSize"], [123, 3, 1, "", "getInputCols"], [123, 3, 1, "", "getLazyAnnotator"], [123, 3, 1, "", "getOrDefault"], [123, 3, 1, "", "getOutputCol"], [123, 3, 1, "", "getParam"], [123, 3, 1, "", "getParamValue"], [123, 3, 1, "", "getPostProcessingSubstitutions"], [123, 3, 1, "", "getSchema"], [123, 2, 1, "", "getter_attrs"], [123, 3, 1, "", "hasDefault"], [123, 3, 1, "", "hasParam"], [123, 2, 1, "", "ignoreTokenIds"], [123, 2, 1, "", "inputAnnotatorTypes"], [123, 2, 1, "", "inputCols"], [123, 3, 1, "", "inputColsValidation"], [123, 3, 1, "", "isDefined"], [123, 3, 1, "", "isSet"], [123, 2, 1, "", "lazyAnnotator"], [123, 3, 1, "", "load"], [123, 3, 1, "", "loadSavedModel"], [123, 2, 1, "", "maxContextLength"], [123, 2, 1, "", "maxNewTokens"], [123, 2, 1, "", "maxTextLength"], [123, 2, 1, "", "mlFrameworkType"], [123, 2, 1, "", "modelType"], [123, 2, 1, "", "name"], [123, 2, 1, "", "noRepeatNgramSize"], [123, 2, 1, "", "optionalInputAnnotatorTypes"], [123, 2, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "outputCol"], [123, 3, 1, "", "pretrained"], [123, 3, 1, "", "read"], [123, 3, 1, "", "save"], [123, 3, 1, "", "set"], [123, 3, 1, "", "setAdditionalTokens"], [123, 3, 1, "", "setBatchSize"], [123, 3, 1, "", "setConfigProtoBytes"], [123, 3, 1, "", "setCustomPrompt"], [123, 3, 1, "", "setDoSample"], [123, 3, 1, "", "setForceInputTypeValidation"], [123, 3, 1, "", "setIgnoreTokenIds"], [123, 3, 1, "", "setInputCols"], [123, 3, 1, "", "setLazyAnnotator"], [123, 3, 1, "", "setMaxContextLength"], [123, 3, 1, "", "setMaxNewTokens"], [123, 3, 1, "", "setMaxTextLength"], [123, 3, 1, "", "setNoRepeatNgramSize"], [123, 3, 1, "", "setOutputCol"], [123, 3, 1, "", "setParamValue"], [123, 3, 1, "", "setParams"], [123, 3, 1, "", "setPostProcessingSubstitutions"], [123, 3, 1, "", "setRandomSeed"], [123, 3, 1, "", "setSchema"], [123, 3, 1, "", "setStopAtEos"], [123, 3, 1, "", "setTableLimit"], [123, 3, 1, "", "setTopK"], [123, 3, 1, "", "setUseCache"], [123, 2, 1, "", "skipLPInputColsValidation"], [123, 2, 1, "", "stopAtEos"], [123, 2, 1, "", "tableLimit"], [123, 2, 1, "", "topK"], [123, 3, 1, "", "transform"], [123, 2, 1, "", "uid"], [123, 2, 1, "", "useCache"], [123, 3, 1, "", "write"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[124, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[124, 2, 1, "", "allPossibleFieldsToStandardize"], [124, 2, 1, "", "includeOutputColumn"], [124, 2, 1, "", "includeStandardField"], [124, 2, 1, "", "outputColumnKey"], [124, 2, 1, "", "resetSentenceIndices"], [124, 3, 1, "", "setAllPossibleFieldsToStandardize"], [124, 3, 1, "", "setIncludeOutputColumn"], [124, 3, 1, "", "setIncludeStandardField"], [124, 3, 1, "", "setOutputColumnKey"], [124, 3, 1, "", "setResetSentenceIndices"], [124, 3, 1, "", "setStandardFieldKey"], [124, 2, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[126, 0, 0, "-", "internal_document_splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[126, 1, 1, "", "InternalDocumentSplitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter": [[126, 2, 1, "", "caseSensitive"], [126, 2, 1, "", "chunkOverlap"], [126, 2, 1, "", "chunkSize"], [126, 3, 1, "", "clear"], [126, 3, 1, "", "copy"], [126, 2, 1, "", "customBoundsStrategy"], [126, 2, 1, "", "enableSentenceIncrement"], [126, 3, 1, "", "explainParam"], [126, 3, 1, "", "explainParams"], [126, 2, 1, "", "explodeSplits"], [126, 3, 1, "", "extractParamMap"], [126, 3, 1, "", "getInputCols"], [126, 3, 1, "", "getLazyAnnotator"], [126, 3, 1, "", "getOrDefault"], [126, 3, 1, "", "getOutputCol"], [126, 3, 1, "", "getParam"], [126, 3, 1, "", "getParamValue"], [126, 2, 1, "", "getter_attrs"], [126, 3, 1, "", "hasDefault"], [126, 3, 1, "", "hasParam"], [126, 2, 1, "", "inputAnnotatorTypes"], [126, 2, 1, "", "inputCols"], [126, 3, 1, "", "inputColsValidation"], [126, 3, 1, "", "isDefined"], [126, 3, 1, "", "isSet"], [126, 2, 1, "", "keepSeparators"], [126, 2, 1, "", "lazyAnnotator"], [126, 3, 1, "", "load"], [126, 2, 1, "", "maxLength"], [126, 2, 1, "", "metaDataFields"], [126, 2, 1, "", "name"], [126, 2, 1, "", "optionalInputAnnotatorTypes"], [126, 2, 1, "", "outputAnnotatorType"], [126, 2, 1, "", "outputCol"], [126, 2, 1, "", "patternsAreRegex"], [126, 3, 1, "", "pretrained"], [126, 3, 1, "", "read"], [126, 3, 1, "", "save"], [126, 2, 1, "", "sentenceAwareness"], [126, 3, 1, "", "set"], [126, 3, 1, "", "setCaseSensitive"], [126, 3, 1, "", "setChunkOverlap"], [126, 3, 1, "", "setChunkSize"], [126, 3, 1, "", "setCustomBoundsStrategy"], [126, 3, 1, "", "setEnableSentenceIncrement"], [126, 3, 1, "", "setExplodeSplits"], [126, 3, 1, "", "setForceInputTypeValidation"], [126, 3, 1, "", "setInputCols"], [126, 3, 1, "", "setKeepSeparators"], [126, 3, 1, "", "setLazyAnnotator"], [126, 3, 1, "", "setMaxLength"], [126, 3, 1, "", "setMetaDataFields"], [126, 3, 1, "", "setOutputCol"], [126, 3, 1, "", "setParamValue"], [126, 3, 1, "", "setParams"], [126, 3, 1, "", "setPatternsAreRegex"], [126, 3, 1, "", "setSentenceAwareness"], [126, 3, 1, "", "setSplitMode"], [126, 3, 1, "", "setSplitPatterns"], [126, 3, 1, "", "setTrimWhitespace"], [126, 2, 1, "", "skipLPInputColsValidation"], [126, 2, 1, "", "splitMode"], [126, 2, 1, "", "splitPatterns"], [126, 3, 1, "", "transform"], [126, 2, 1, "", "trimWhitespace"], [126, 2, 1, "", "uid"], [126, 3, 1, "", "write"]], "sparknlp_jsl.annotator.tf_graph_builder": [[127, 1, 1, "", "TFGraphBuilder"], [127, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[127, 2, 1, "", "batchNorm"], [127, 3, 1, "", "clear"], [127, 3, 1, "", "copy"], [127, 3, 1, "", "explainParam"], [127, 3, 1, "", "explainParams"], [127, 3, 1, "", "extractParamMap"], [127, 3, 1, "", "fit"], [127, 3, 1, "", "fitMultiple"], [127, 3, 1, "", "getBatchNorm"], [127, 3, 1, "", "getGraphFile"], [127, 3, 1, "", "getGraphFolder"], [127, 3, 1, "", "getHiddenAct"], [127, 3, 1, "", "getHiddenActL2"], [127, 3, 1, "", "getHiddenLayers"], [127, 3, 1, "", "getHiddenUnitsNumber"], [127, 3, 1, "", "getHiddenWeightsL2"], [127, 3, 1, "", "getInputCols"], [127, 3, 1, "", "getIsLicensed"], [127, 3, 1, "", "getLabelColumn"], [127, 3, 1, "", "getMaxSequenceLength"], [127, 3, 1, "", "getModelName"], [127, 3, 1, "", "getOrDefault"], [127, 3, 1, "", "getOutputAct"], [127, 3, 1, "", "getParam"], [127, 3, 1, "", "getUseRelationDirection"], [127, 2, 1, "", "graphFile"], [127, 2, 1, "", "graphFolder"], [127, 3, 1, "", "hasDefault"], [127, 3, 1, "", "hasParam"], [127, 2, 1, "", "hiddenAct"], [127, 2, 1, "", "hiddenActL2"], [127, 2, 1, "", "hiddenLayers"], [127, 2, 1, "", "hiddenUnitsNumber"], [127, 2, 1, "", "hiddenWeightsL2"], [127, 2, 1, "", "inputCols"], [127, 3, 1, "", "isDefined"], [127, 2, 1, "", "isLicensed"], [127, 3, 1, "", "isSet"], [127, 2, 1, "", "labelColumn"], [127, 3, 1, "", "load"], [127, 2, 1, "", "maxSequenceLength"], [127, 2, 1, "", "modelName"], [127, 2, 1, "", "outputAct"], [127, 3, 1, "", "read"], [127, 3, 1, "", "save"], [127, 3, 1, "", "set"], [127, 3, 1, "", "setBatchNorm"], [127, 3, 1, "", "setGraphFile"], [127, 3, 1, "", "setGraphFolder"], [127, 3, 1, "", "setHiddenAct"], [127, 3, 1, "", "setHiddenActL2"], [127, 3, 1, "", "setHiddenLayers"], [127, 3, 1, "", "setHiddenUnitsNumber"], [127, 3, 1, "", "setHiddenWeightsL2"], [127, 3, 1, "", "setInputCols"], [127, 3, 1, "", "setIsLicensed"], [127, 3, 1, "", "setLabelColumn"], [127, 3, 1, "", "setMaxSequenceLength"], [127, 3, 1, "", "setModelName"], [127, 3, 1, "", "setUseRelationDirection"], [127, 3, 1, "", "settOutputAct"], [127, 2, 1, "", "uid"], [127, 2, 1, "", "useRelationDirection"], [127, 3, 1, "", "write"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel": [[127, 3, 1, "", "clear"], [127, 3, 1, "", "copy"], [127, 3, 1, "", "explainParam"], [127, 3, 1, "", "explainParams"], [127, 3, 1, "", "extractParamMap"], [127, 3, 1, "", "getOrDefault"], [127, 3, 1, "", "getParam"], [127, 3, 1, "", "hasDefault"], [127, 3, 1, "", "hasParam"], [127, 3, 1, "", "isDefined"], [127, 3, 1, "", "isSet"], [127, 3, 1, "", "load"], [127, 3, 1, "", "read"], [127, 3, 1, "", "save"], [127, 3, 1, "", "set"], [127, 3, 1, "", "transform"], [127, 2, 1, "", "uid"], [127, 3, 1, "", "write"]], "sparknlp_jsl.annotator.white_black_list_params": [[128, 1, 1, "", "WhiteBlackListParams"]], "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams": [[128, 2, 1, "", "blackList"], [128, 2, 1, "", "caseSensitive"], [128, 3, 1, "", "setBlackList"], [128, 3, 1, "", "setCaseSensitive"], [128, 3, 1, "", "setDenyList"], [128, 3, 1, "", "setWhiteList"], [128, 2, 1, "", "whiteList"]], "sparknlp_jsl.annotator.windowed": [[130, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[130, 1, 1, "", "WindowedParams"], [130, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[130, 2, 1, "", "glueString"], [130, 3, 1, "", "setGlueString"], [130, 3, 1, "", "setWindowSize"], [130, 2, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[130, 3, 1, "", "clear"], [130, 3, 1, "", "copy"], [130, 3, 1, "", "explainParam"], [130, 3, 1, "", "explainParams"], [130, 3, 1, "", "extractParamMap"], [130, 3, 1, "", "getInputCols"], [130, 3, 1, "", "getLazyAnnotator"], [130, 3, 1, "", "getOrDefault"], [130, 3, 1, "", "getOutputCol"], [130, 3, 1, "", "getParam"], [130, 3, 1, "", "getParamValue"], [130, 2, 1, "", "getter_attrs"], [130, 2, 1, "", "glueString"], [130, 3, 1, "", "hasDefault"], [130, 3, 1, "", "hasParam"], [130, 2, 1, "", "inputAnnotatorTypes"], [130, 2, 1, "", "inputCols"], [130, 3, 1, "", "inputColsValidation"], [130, 3, 1, "", "isDefined"], [130, 3, 1, "", "isSet"], [130, 2, 1, "", "lazyAnnotator"], [130, 3, 1, "", "load"], [130, 2, 1, "", "optionalInputAnnotatorTypes"], [130, 2, 1, "", "outputAnnotatorType"], [130, 2, 1, "", "outputCol"], [130, 3, 1, "", "read"], [130, 3, 1, "", "save"], [130, 3, 1, "", "set"], [130, 3, 1, "", "setForceInputTypeValidation"], [130, 3, 1, "", "setGlueString"], [130, 3, 1, "", "setInputCols"], [130, 3, 1, "", "setLazyAnnotator"], [130, 3, 1, "", "setOutputCol"], [130, 3, 1, "", "setParamValue"], [130, 3, 1, "", "setParams"], [130, 3, 1, "", "setWindowSize"], [130, 2, 1, "", "skipLPInputColsValidation"], [130, 3, 1, "", "transform"], [130, 2, 1, "", "uid"], [130, 2, 1, "", "windowSize"], [130, 3, 1, "", "write"]], "sparknlp_jsl.common": [[132, 0, 0, "-", "annotator_approach_internal"], [133, 0, 0, "-", "annotator_model_internal"], [134, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[132, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[132, 3, 1, "", "clear"], [132, 3, 1, "", "copy"], [132, 3, 1, "", "explainParam"], [132, 3, 1, "", "explainParams"], [132, 3, 1, "", "extractParamMap"], [132, 3, 1, "", "fit"], [132, 3, 1, "", "fitMultiple"], [132, 3, 1, "", "getInputCols"], [132, 3, 1, "", "getLazyAnnotator"], [132, 3, 1, "", "getOrDefault"], [132, 3, 1, "", "getOutputCol"], [132, 3, 1, "", "getParam"], [132, 3, 1, "", "getParamValue"], [132, 2, 1, "", "getter_attrs"], [132, 3, 1, "", "hasDefault"], [132, 3, 1, "", "hasParam"], [132, 2, 1, "", "inputAnnotatorTypes"], [132, 2, 1, "", "inputCols"], [132, 3, 1, "", "inputColsValidation"], [132, 3, 1, "", "isDefined"], [132, 3, 1, "", "isSet"], [132, 2, 1, "", "lazyAnnotator"], [132, 3, 1, "", "load"], [132, 2, 1, "", "optionalInputAnnotatorTypes"], [132, 2, 1, "", "outputAnnotatorType"], [132, 2, 1, "", "outputCol"], [132, 3, 1, "", "read"], [132, 3, 1, "", "save"], [132, 3, 1, "", "set"], [132, 3, 1, "", "setForceInputTypeValidation"], [132, 3, 1, "", "setInputCols"], [132, 3, 1, "", "setLazyAnnotator"], [132, 3, 1, "", "setOutputCol"], [132, 3, 1, "", "setParamValue"], [132, 2, 1, "", "skipLPInputColsValidation"], [132, 2, 1, "", "uid"], [132, 3, 1, "", "write"]], "sparknlp_jsl.common.annotator_model_internal": [[133, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[133, 3, 1, "", "clear"], [133, 3, 1, "", "copy"], [133, 3, 1, "", "explainParam"], [133, 3, 1, "", "explainParams"], [133, 3, 1, "", "extractParamMap"], [133, 3, 1, "", "getInputCols"], [133, 3, 1, "", "getLazyAnnotator"], [133, 3, 1, "", "getOrDefault"], [133, 3, 1, "", "getOutputCol"], [133, 3, 1, "", "getParam"], [133, 3, 1, "", "getParamValue"], [133, 2, 1, "", "getter_attrs"], [133, 3, 1, "", "hasDefault"], [133, 3, 1, "", "hasParam"], [133, 2, 1, "", "inputAnnotatorTypes"], [133, 2, 1, "", "inputCols"], [133, 3, 1, "", "inputColsValidation"], [133, 3, 1, "", "isDefined"], [133, 3, 1, "", "isSet"], [133, 2, 1, "", "lazyAnnotator"], [133, 3, 1, "", "load"], [133, 2, 1, "", "optionalInputAnnotatorTypes"], [133, 2, 1, "", "outputAnnotatorType"], [133, 2, 1, "", "outputCol"], [133, 3, 1, "", "read"], [133, 3, 1, "", "save"], [133, 3, 1, "", "set"], [133, 3, 1, "", "setForceInputTypeValidation"], [133, 3, 1, "", "setInputCols"], [133, 3, 1, "", "setLazyAnnotator"], [133, 3, 1, "", "setOutputCol"], [133, 3, 1, "", "setParamValue"], [133, 3, 1, "", "setParams"], [133, 2, 1, "", "skipLPInputColsValidation"], [133, 3, 1, "", "transform"], [133, 2, 1, "", "uid"], [133, 3, 1, "", "write"]], "sparknlp_jsl.common.annotator_properties_internal": [[134, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[134, 3, 1, "", "clear"], [134, 3, 1, "", "copy"], [134, 3, 1, "", "explainParam"], [134, 3, 1, "", "explainParams"], [134, 3, 1, "", "extractParamMap"], [134, 3, 1, "", "getInputCols"], [134, 3, 1, "", "getLazyAnnotator"], [134, 3, 1, "", "getOrDefault"], [134, 3, 1, "", "getOutputCol"], [134, 3, 1, "", "getParam"], [134, 3, 1, "", "hasDefault"], [134, 3, 1, "", "hasParam"], [134, 2, 1, "", "inputAnnotatorTypes"], [134, 2, 1, "", "inputCols"], [134, 3, 1, "", "inputColsValidation"], [134, 3, 1, "", "isDefined"], [134, 3, 1, "", "isSet"], [134, 2, 1, "", "lazyAnnotator"], [134, 2, 1, "", "optionalInputAnnotatorTypes"], [134, 2, 1, "", "outputAnnotatorType"], [134, 2, 1, "", "outputCol"], [134, 3, 1, "", "set"], [134, 3, 1, "", "setForceInputTypeValidation"], [134, 3, 1, "", "setInputCols"], [134, 3, 1, "", "setLazyAnnotator"], [134, 3, 1, "", "setOutputCol"], [134, 2, 1, "", "uid"]], "sparknlp_jsl.compatibility": [[136, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[136, 3, 1, "", "findVersion"], [136, 2, 1, "", "instance"], [136, 3, 1, "", "showVersion"], [136, 2, 1, "", "spark"]], "sparknlp_jsl.custom_transformer": [[137, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[137, 3, 1, "", "clear"], [137, 3, 1, "", "copy"], [137, 3, 1, "", "explainParam"], [137, 3, 1, "", "explainParams"], [137, 3, 1, "", "extractParamMap"], [137, 2, 1, "", "f"], [137, 3, 1, "", "getInputCol"], [137, 3, 1, "", "getOrDefault"], [137, 3, 1, "", "getOutputCol"], [137, 3, 1, "", "getParam"], [137, 3, 1, "", "hasDefault"], [137, 3, 1, "", "hasParam"], [137, 2, 1, "", "inputCol"], [137, 3, 1, "", "isDefined"], [137, 3, 1, "", "isSet"], [137, 3, 1, "", "load"], [137, 2, 1, "", "outputCol"], [137, 3, 1, "", "read"], [137, 3, 1, "", "save"], [137, 3, 1, "", "set"], [137, 3, 1, "", "setInputCol"], [137, 3, 1, "", "setOutputCol"], [137, 3, 1, "", "transform"], [137, 2, 1, "", "uid"], [137, 3, 1, "", "write"]], "sparknlp_jsl.deidentification_module": [[138, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[138, 2, 1, "", "age_group_obfuscation"], [138, 2, 1, "", "age_ranges"], [138, 2, 1, "", "custom_pipeline"], [138, 2, 1, "", "date_shift_column_name"], [138, 2, 1, "", "date_tag"], [138, 3, 1, "", "deid_with_custom_pipeline"], [138, 3, 1, "", "deid_with_pretrained_pipeline"], [138, 3, 1, "", "deidentify"], [138, 2, 1, "", "document"], [138, 2, 1, "", "documenthashcoder_col_name"], [138, 2, 1, "", "domain"], [138, 2, 1, "", "fields"], [138, 2, 1, "", "fixed_mask_length"], [138, 2, 1, "", "id_column_name"], [138, 2, 1, "", "input_file_path"], [138, 2, 1, "", "language"], [138, 2, 1, "", "masking_policy"], [138, 2, 1, "", "multi_mode_file_path"], [138, 2, 1, "", "ner_chunk"], [138, 2, 1, "", "number_of_days"], [138, 2, 1, "", "obfuscate_date"], [138, 2, 1, "", "obfuscate_ref_file_path"], [138, 2, 1, "", "obfuscate_ref_source"], [138, 2, 1, "", "output_file_path"], [138, 2, 1, "", "region"], [138, 2, 1, "", "sentence"], [138, 2, 1, "", "separator"], [138, 2, 1, "", "shift_days"], [138, 2, 1, "", "spark"], [138, 2, 1, "", "token"], [138, 2, 1, "", "unnormalized_date"], [138, 2, 1, "", "unnormalized_mode"]], "sparknlp_jsl.eval": [[139, 1, 1, "", "NerCrfEvaluation"], [139, 1, 1, "", "NerDLEvaluation"], [139, 1, 1, "", "NerDLMetrics"], [139, 1, 1, "", "NorvigSpellEvaluation"], [139, 1, 1, "", "POSEvaluation"], [139, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[139, 3, 1, "", "apply"], [139, 3, 1, "", "computeAccuracyAnnotator"], [139, 3, 1, "", "computeAccuracyModel"], [139, 3, 1, "", "getDataFrame"], [139, 2, 1, "", "java_obj"], [139, 3, 1, "", "new_java_array"], [139, 3, 1, "", "new_java_array_integer"], [139, 3, 1, "", "new_java_array_string"], [139, 3, 1, "", "new_java_obj"], [139, 2, 1, "", "sc"], [139, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NerDLEvaluation": [[139, 3, 1, "", "apply"], [139, 3, 1, "", "computeAccuracyAnnotator"], [139, 3, 1, "", "computeAccuracyModel"], [139, 3, 1, "", "getDataFrame"], [139, 2, 1, "", "java_obj"], [139, 3, 1, "", "new_java_array"], [139, 3, 1, "", "new_java_array_integer"], [139, 3, 1, "", "new_java_array_string"], [139, 3, 1, "", "new_java_obj"], [139, 2, 1, "", "sc"], [139, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NerDLMetrics": [[139, 3, 1, "", "apply"], [139, 3, 1, "", "computeMetricsFromDF"], [139, 3, 1, "", "getDataFrame"], [139, 2, 1, "", "java_obj"], [139, 3, 1, "", "new_java_array"], [139, 3, 1, "", "new_java_array_integer"], [139, 3, 1, "", "new_java_array_string"], [139, 3, 1, "", "new_java_obj"], [139, 2, 1, "", "sc"], [139, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[139, 3, 1, "", "apply"], [139, 3, 1, "", "computeAccuracyAnnotator"], [139, 3, 1, "", "computeAccuracyModel"], [139, 3, 1, "", "getDataFrame"], [139, 2, 1, "", "java_obj"], [139, 3, 1, "", "new_java_array"], [139, 3, 1, "", "new_java_array_integer"], [139, 3, 1, "", "new_java_array_string"], [139, 3, 1, "", "new_java_obj"], [139, 2, 1, "", "sc"], [139, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.POSEvaluation": [[139, 3, 1, "", "apply"], [139, 3, 1, "", "computeAccuracyAnnotator"], [139, 3, 1, "", "computeAccuracyModel"], [139, 3, 1, "", "getDataFrame"], [139, 2, 1, "", "java_obj"], [139, 3, 1, "", "new_java_array"], [139, 3, 1, "", "new_java_array_integer"], [139, 3, 1, "", "new_java_array_string"], [139, 3, 1, "", "new_java_obj"], [139, 2, 1, "", "sc"], [139, 3, 1, "", "spark_version"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[139, 3, 1, "", "apply"], [139, 3, 1, "", "computeAccuracyAnnotator"], [139, 3, 1, "", "computeAccuracyModel"], [139, 3, 1, "", "getDataFrame"], [139, 2, 1, "", "java_obj"], [139, 3, 1, "", "new_java_array"], [139, 3, 1, "", "new_java_array_integer"], [139, 3, 1, "", "new_java_array_string"], [139, 3, 1, "", "new_java_obj"], [139, 2, 1, "", "sc"], [139, 3, 1, "", "spark_version"]], "sparknlp_jsl.finance": [[145, 0, 0, "-", "chunk_classification"], [150, 0, 0, "-", "graph"], [159, 0, 0, "-", "sequence_classification"], [164, 0, 0, "-", "sequence_generation"], [166, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[141, 0, 0, "-", "assertion"], [144, 0, 0, "-", "deid"], [148, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[140, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[140, 1, 1, "", "AssertionDLApproach"], [140, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach": [[140, 2, 1, "", "batchSize"], [140, 2, 1, "", "blackList"], [140, 2, 1, "", "caseSensitive"], [140, 3, 1, "", "clear"], [140, 2, 1, "", "configProtoBytes"], [140, 3, 1, "", "copy"], [140, 2, 1, "", "datasetInfo"], [140, 2, 1, "", "doExceptionHandling"], [140, 2, 1, "", "dropout"], [140, 2, 1, "", "enableOutputLogs"], [140, 2, 1, "", "endCol"], [140, 2, 1, "", "engine"], [140, 2, 1, "", "epochs"], [140, 3, 1, "", "explainParam"], [140, 3, 1, "", "explainParams"], [140, 3, 1, "", "extractParamMap"], [140, 3, 1, "", "fit"], [140, 3, 1, "", "fitMultiple"], [140, 3, 1, "", "getEngine"], [140, 3, 1, "", "getInputCols"], [140, 3, 1, "", "getLazyAnnotator"], [140, 3, 1, "", "getOrDefault"], [140, 3, 1, "", "getOutputCol"], [140, 3, 1, "", "getParam"], [140, 3, 1, "", "getParamValue"], [140, 2, 1, "", "getter_attrs"], [140, 2, 1, "", "graphFile"], [140, 2, 1, "", "graphFolder"], [140, 3, 1, "", "hasDefault"], [140, 3, 1, "", "hasParam"], [140, 2, 1, "", "includeConfidence"], [140, 2, 1, "", "inputAnnotatorTypes"], [140, 2, 1, "", "inputCols"], [140, 3, 1, "", "inputColsValidation"], [140, 3, 1, "", "isDefined"], [140, 3, 1, "", "isSet"], [140, 2, 1, "", "label"], [140, 2, 1, "", "lazyAnnotator"], [140, 2, 1, "", "learningRate"], [140, 3, 1, "", "load"], [140, 2, 1, "", "maxSentLen"], [140, 2, 1, "", "optionalInputAnnotatorTypes"], [140, 2, 1, "", "outputAnnotatorType"], [140, 2, 1, "", "outputCol"], [140, 2, 1, "", "outputLogsPath"], [140, 3, 1, "", "read"], [140, 3, 1, "", "save"], [140, 2, 1, "", "scopeWindow"], [140, 3, 1, "", "set"], [140, 3, 1, "", "setBatchSize"], [140, 3, 1, "", "setBlackList"], [140, 3, 1, "", "setCaseSensitive"], [140, 3, 1, "", "setConfigProtoBytes"], [140, 3, 1, "", "setDatasetInfo"], [140, 3, 1, "", "setDenyList"], [140, 3, 1, "", "setDoExceptionHandling"], [140, 3, 1, "", "setDropout"], [140, 3, 1, "", "setEnableOutputLogs"], [140, 3, 1, "", "setEndCol"], [140, 3, 1, "", "setEpochs"], [140, 3, 1, "", "setForceInputTypeValidation"], [140, 3, 1, "", "setGraphFile"], [140, 3, 1, "", "setGraphFolder"], [140, 3, 1, "", "setIncludeConfidence"], [140, 3, 1, "", "setInputCols"], [140, 3, 1, "", "setLabelCol"], [140, 3, 1, "", "setLazyAnnotator"], [140, 3, 1, "", "setLearningRate"], [140, 3, 1, "", "setMaxSentLen"], [140, 3, 1, "", "setOutputCol"], [140, 3, 1, "", "setOutputLogsPath"], [140, 3, 1, "", "setParamValue"], [140, 3, 1, "", "setScopeWindow"], [140, 3, 1, "", "setStartCol"], [140, 3, 1, "", "setTestDataset"], [140, 3, 1, "", "setValidationSplit"], [140, 3, 1, "", "setVerbose"], [140, 3, 1, "", "setWhiteList"], [140, 2, 1, "", "skipLPInputColsValidation"], [140, 2, 1, "", "startCol"], [140, 2, 1, "", "testDataset"], [140, 2, 1, "", "uid"], [140, 2, 1, "", "validationSplit"], [140, 2, 1, "", "verbose"], [140, 2, 1, "", "whiteList"], [140, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[140, 2, 1, "", "classes"], [140, 3, 1, "", "clear"], [140, 2, 1, "", "configProtoBytes"], [140, 3, 1, "", "copy"], [140, 2, 1, "", "datasetInfo"], [140, 2, 1, "", "entityAssertionCaseSensitive"], [140, 3, 1, "", "explainParam"], [140, 3, 1, "", "explainParams"], [140, 3, 1, "", "extractParamMap"], [140, 3, 1, "", "getEntityAssertion"], [140, 3, 1, "", "getInputCols"], [140, 3, 1, "", "getLazyAnnotator"], [140, 3, 1, "", "getOrDefault"], [140, 3, 1, "", "getOutputCol"], [140, 3, 1, "", "getParam"], [140, 3, 1, "", "getParamValue"], [140, 3, 1, "", "getReplaceLabels"], [140, 3, 1, "", "getStorageRef"], [140, 2, 1, "", "getter_attrs"], [140, 3, 1, "", "hasDefault"], [140, 3, 1, "", "hasParam"], [140, 2, 1, "", "includeConfidence"], [140, 2, 1, "", "inputAnnotatorTypes"], [140, 2, 1, "", "inputCols"], [140, 3, 1, "", "inputColsValidation"], [140, 3, 1, "", "isDefined"], [140, 3, 1, "", "isSet"], [140, 2, 1, "", "lazyAnnotator"], [140, 3, 1, "", "load"], [140, 2, 1, "", "maxSentLen"], [140, 2, 1, "", "name"], [140, 2, 1, "", "optionalInputAnnotatorTypes"], [140, 2, 1, "", "outputAnnotatorType"], [140, 2, 1, "", "outputCol"], [140, 3, 1, "", "pretrained"], [140, 3, 1, "", "read"], [140, 3, 1, "", "save"], [140, 2, 1, "", "scopeWindow"], [140, 3, 1, "", "set"], [140, 3, 1, "", "setConfigProtoBytes"], [140, 3, 1, "", "setDatasetInfo"], [140, 3, 1, "", "setEntityAssertion"], [140, 3, 1, "", "setEntityAssertionCaseSensitive"], [140, 3, 1, "", "setForceInputTypeValidation"], [140, 3, 1, "", "setIncludeConfidence"], [140, 3, 1, "", "setInputCols"], [140, 3, 1, "", "setLazyAnnotator"], [140, 3, 1, "", "setOutputCol"], [140, 3, 1, "", "setParamValue"], [140, 3, 1, "", "setParams"], [140, 3, 1, "", "setReplaceLabels"], [140, 3, 1, "", "setScopeWindow"], [140, 3, 1, "", "setStorageRef"], [140, 2, 1, "", "skipLPInputColsValidation"], [140, 2, 1, "", "storageRef"], [140, 2, 1, "", "targetNerLabels"], [140, 3, 1, "", "transform"], [140, 2, 1, "", "uid"], [140, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.deid": [[142, 0, 0, "-", "deIdentification"], [143, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[142, 1, 1, "", "DeIdentification"], [142, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[142, 2, 1, "", "additionalDateFormats"], [142, 2, 1, "", "ageRanges"], [142, 2, 1, "", "ageRangesByHipaa"], [142, 2, 1, "", "blackList"], [142, 2, 1, "", "blackListEntities"], [142, 3, 1, "", "clear"], [142, 2, 1, "", "combineRegexPatterns"], [142, 2, 1, "", "consistentAcrossNameParts"], [142, 2, 1, "", "consistentObfuscation"], [142, 3, 1, "", "copy"], [142, 2, 1, "", "countryObfuscation"], [142, 2, 1, "", "dateEntities"], [142, 2, 1, "", "dateFormats"], [142, 2, 1, "", "dateTag"], [142, 2, 1, "", "dateToYear"], [142, 2, 1, "", "days"], [142, 2, 1, "", "doExceptionHandling"], [142, 2, 1, "", "enableDefaultObfuscationEquivalents"], [142, 2, 1, "", "entityCasingModesPath"], [142, 3, 1, "", "explainParam"], [142, 3, 1, "", "explainParams"], [142, 3, 1, "", "extractParamMap"], [142, 2, 1, "", "fakerLengthOffset"], [142, 3, 1, "", "fit"], [142, 3, 1, "", "fitMultiple"], [142, 2, 1, "", "fixedMaskLength"], [142, 2, 1, "", "genderAwareness"], [142, 2, 1, "", "geoConsistency"], [142, 3, 1, "", "getChunkMatching"], [142, 3, 1, "", "getDefaultObfuscationEquivalents"], [142, 3, 1, "", "getInputCols"], [142, 3, 1, "", "getLazyAnnotator"], [142, 3, 1, "", "getOrDefault"], [142, 3, 1, "", "getOutputCol"], [142, 3, 1, "", "getParam"], [142, 3, 1, "", "getParamValue"], [142, 3, 1, "", "getSelectiveObfuscateRefSource"], [142, 3, 1, "", "getUseShiftDays"], [142, 2, 1, "", "getter_attrs"], [142, 2, 1, "", "groupByCol"], [142, 3, 1, "", "hasDefault"], [142, 3, 1, "", "hasParam"], [142, 2, 1, "", "ignoreRegex"], [142, 2, 1, "", "inputAnnotatorTypes"], [142, 2, 1, "", "inputCols"], [142, 3, 1, "", "inputColsValidation"], [142, 3, 1, "", "isDefined"], [142, 2, 1, "", "isRandomDateDisplacement"], [142, 3, 1, "", "isSet"], [142, 2, 1, "", "keepMonth"], [142, 2, 1, "", "keepTextSizeForObfuscation"], [142, 2, 1, "", "keepYear"], [142, 2, 1, "", "language"], [142, 2, 1, "", "lazyAnnotator"], [142, 3, 1, "", "load"], [142, 2, 1, "", "mappingsColumn"], [142, 2, 1, "", "maskingPolicy"], [142, 2, 1, "", "metadataMaskingPolicy"], [142, 2, 1, "", "minYear"], [142, 2, 1, "", "mode"], [142, 2, 1, "", "name"], [142, 2, 1, "", "obfuscateByAgeGroups"], [142, 2, 1, "", "obfuscateDate"], [142, 2, 1, "", "obfuscateRefFile"], [142, 2, 1, "", "obfuscateRefSource"], [142, 2, 1, "", "obfuscationEquivalentsResource"], [142, 2, 1, "", "obfuscationStrategyOnException"], [142, 2, 1, "", "optionalInputAnnotatorTypes"], [142, 2, 1, "", "outputAnnotatorType"], [142, 2, 1, "", "outputAsDocument"], [142, 2, 1, "", "outputCol"], [142, 3, 1, "", "read"], [142, 2, 1, "", "refFileFormat"], [142, 2, 1, "", "refSep"], [142, 2, 1, "", "regexOverride"], [142, 2, 1, "", "regexPatternsDictionary"], [142, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [142, 2, 1, "", "region"], [142, 2, 1, "", "returnEntityMappings"], [142, 2, 1, "", "sameEntityThreshold"], [142, 2, 1, "", "sameLengthFormattedEntities"], [142, 3, 1, "", "save"], [142, 2, 1, "", "seed"], [142, 2, 1, "", "selectiveObfuscationModesPath"], [142, 3, 1, "", "set"], [142, 3, 1, "", "setAdditionalDateFormats"], [142, 3, 1, "", "setAgeGroups"], [142, 3, 1, "", "setAgeRanges"], [142, 3, 1, "", "setAgeRangesByHipaa"], [142, 3, 1, "", "setBlackList"], [142, 3, 1, "", "setBlackListEntities"], [142, 3, 1, "", "setChunkMatching"], [142, 3, 1, "", "setCombineRegexPatterns"], [142, 3, 1, "", "setConsistentAcrossNameParts"], [142, 3, 1, "", "setConsistentObfuscation"], [142, 3, 1, "", "setCountryObfuscation"], [142, 3, 1, "", "setDateEntities"], [142, 3, 1, "", "setDateFormats"], [142, 3, 1, "", "setDateTag"], [142, 3, 1, "", "setDateToYear"], [142, 3, 1, "", "setDays"], [142, 3, 1, "", "setDoExceptionHandling"], [142, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [142, 3, 1, "", "setEntityCasingModes"], [142, 3, 1, "", "setFakerLengthOffset"], [142, 3, 1, "", "setFixedMaskLength"], [142, 3, 1, "", "setForceInputTypeValidation"], [142, 3, 1, "", "setGenderAwareness"], [142, 3, 1, "", "setGeoConsistency"], [142, 3, 1, "", "setGroupByCol"], [142, 3, 1, "", "setIgnoreRegex"], [142, 3, 1, "", "setInputCols"], [142, 3, 1, "", "setIsRandomDateDisplacement"], [142, 3, 1, "", "setKeepMonth"], [142, 3, 1, "", "setKeepTextSizeForObfuscation"], [142, 3, 1, "", "setKeepYear"], [142, 3, 1, "", "setLanguage"], [142, 3, 1, "", "setLazyAnnotator"], [142, 3, 1, "", "setMappingsColumn"], [142, 3, 1, "", "setMaskingPolicy"], [142, 3, 1, "", "setMetadataMaskingPolicy"], [142, 3, 1, "", "setMinYear"], [142, 3, 1, "", "setMode"], [142, 3, 1, "", "setObfuscateByAgeGroups"], [142, 3, 1, "", "setObfuscateDate"], [142, 3, 1, "", "setObfuscateRefFile"], [142, 3, 1, "", "setObfuscateRefSource"], [142, 3, 1, "", "setObfuscationEquivalents"], [142, 3, 1, "", "setObfuscationEquivalentsResource"], [142, 3, 1, "", "setObfuscationStrategyOnException"], [142, 3, 1, "", "setOutputAsDocument"], [142, 3, 1, "", "setOutputCol"], [142, 3, 1, "", "setParamValue"], [142, 3, 1, "", "setRefFileFormat"], [142, 3, 1, "", "setRefSep"], [142, 3, 1, "", "setRegexOverride"], [142, 3, 1, "", "setRegexPatternsDictionary"], [142, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [142, 3, 1, "", "setRegion"], [142, 3, 1, "", "setReturnEntityMappings"], [142, 3, 1, "", "setSameEntityThreshold"], [142, 3, 1, "", "setSameLengthFormattedEntities"], [142, 3, 1, "", "setSeed"], [142, 3, 1, "", "setSelectiveObfuscateRefSource"], [142, 3, 1, "", "setSelectiveObfuscationModes"], [142, 3, 1, "", "setStaticObfuscationPairs"], [142, 3, 1, "", "setStaticObfuscationPairsResource"], [142, 3, 1, "", "setUnnormalizedDateMode"], [142, 3, 1, "", "setUseShifDays"], [142, 3, 1, "", "setUseShiftDays"], [142, 3, 1, "", "setZipCodeTag"], [142, 2, 1, "", "skipLPInputColsValidation"], [142, 2, 1, "", "staticObfuscationPairsResource"], [142, 2, 1, "", "uid"], [142, 2, 1, "", "unnormalizedDateMode"], [142, 2, 1, "", "useShifDays"], [142, 2, 1, "", "useShiftDays"], [142, 3, 1, "", "write"], [142, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[142, 2, 1, "", "additionalDateFormats"], [142, 2, 1, "", "ageRanges"], [142, 2, 1, "", "ageRangesByHipaa"], [142, 2, 1, "", "blackList"], [142, 2, 1, "", "blackListEntities"], [142, 3, 1, "", "clear"], [142, 2, 1, "", "consistentAcrossNameParts"], [142, 2, 1, "", "consistentObfuscation"], [142, 3, 1, "", "copy"], [142, 2, 1, "", "countryObfuscation"], [142, 2, 1, "", "dateEntities"], [142, 2, 1, "", "dateFormats"], [142, 2, 1, "", "dateTag"], [142, 2, 1, "", "dateToYear"], [142, 2, 1, "", "days"], [142, 2, 1, "", "enableDefaultObfuscationEquivalents"], [142, 3, 1, "", "explainParam"], [142, 3, 1, "", "explainParams"], [142, 3, 1, "", "extractParamMap"], [142, 2, 1, "", "fakerLengthOffset"], [142, 2, 1, "", "fixedMaskLength"], [142, 2, 1, "", "genderAwareness"], [142, 2, 1, "", "geoConsistency"], [142, 3, 1, "", "getChunkMatching"], [142, 3, 1, "", "getDefaultObfuscationEquivalents"], [142, 3, 1, "", "getInputCols"], [142, 3, 1, "", "getLazyAnnotator"], [142, 3, 1, "", "getOrDefault"], [142, 3, 1, "", "getOutputCol"], [142, 3, 1, "", "getParam"], [142, 3, 1, "", "getParamValue"], [142, 3, 1, "", "getRegexEntities"], [142, 3, 1, "", "getSelectiveObfuscateRefSource"], [142, 3, 1, "", "getUseShiftDays"], [142, 2, 1, "", "getter_attrs"], [142, 2, 1, "", "groupByCol"], [142, 3, 1, "", "hasDefault"], [142, 3, 1, "", "hasParam"], [142, 2, 1, "", "ignoreRegex"], [142, 2, 1, "", "inputAnnotatorTypes"], [142, 2, 1, "", "inputCols"], [142, 3, 1, "", "inputColsValidation"], [142, 3, 1, "", "isDefined"], [142, 2, 1, "", "isRandomDateDisplacement"], [142, 3, 1, "", "isSet"], [142, 2, 1, "", "keepMonth"], [142, 2, 1, "", "keepTextSizeForObfuscation"], [142, 2, 1, "", "keepYear"], [142, 2, 1, "", "language"], [142, 2, 1, "", "lazyAnnotator"], [142, 3, 1, "", "load"], [142, 2, 1, "", "mappingsColumn"], [142, 2, 1, "", "maskingPolicy"], [142, 2, 1, "", "metadataMaskingPolicy"], [142, 2, 1, "", "minYear"], [142, 2, 1, "", "mode"], [142, 2, 1, "", "name"], [142, 2, 1, "", "obfuscateByAgeGroups"], [142, 2, 1, "", "obfuscateDate"], [142, 2, 1, "", "obfuscateRefSource"], [142, 2, 1, "", "obfuscationStrategyOnException"], [142, 2, 1, "", "optionalInputAnnotatorTypes"], [142, 2, 1, "", "outputAnnotatorType"], [142, 2, 1, "", "outputAsDocument"], [142, 2, 1, "", "outputCol"], [142, 3, 1, "", "pretrained"], [142, 3, 1, "", "read"], [142, 2, 1, "", "regexEntities"], [142, 2, 1, "", "regexOverride"], [142, 2, 1, "", "region"], [142, 2, 1, "", "returnEntityMappings"], [142, 2, 1, "", "sameEntityThreshold"], [142, 2, 1, "", "sameLengthFormattedEntities"], [142, 3, 1, "", "save"], [142, 2, 1, "", "seed"], [142, 3, 1, "", "set"], [142, 3, 1, "", "setAdditionalDateFormats"], [142, 3, 1, "", "setAgeGroups"], [142, 3, 1, "", "setAgeRanges"], [142, 3, 1, "", "setAgeRangesByHipaa"], [142, 3, 1, "", "setBlackList"], [142, 3, 1, "", "setBlackListEntities"], [142, 3, 1, "", "setChunkMatching"], [142, 3, 1, "", "setConsistentAcrossNameParts"], [142, 3, 1, "", "setConsistentObfuscation"], [142, 3, 1, "", "setCountryObfuscation"], [142, 3, 1, "", "setDateEntities"], [142, 3, 1, "", "setDateFormats"], [142, 3, 1, "", "setDateTag"], [142, 3, 1, "", "setDateToYear"], [142, 3, 1, "", "setDays"], [142, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [142, 3, 1, "", "setFakerLengthOffset"], [142, 3, 1, "", "setFixedMaskLength"], [142, 3, 1, "", "setForceInputTypeValidation"], [142, 3, 1, "", "setGenderAwareness"], [142, 3, 1, "", "setGeoConsistency"], [142, 3, 1, "", "setGroupByCol"], [142, 3, 1, "", "setIgnoreRegex"], [142, 3, 1, "", "setInputCols"], [142, 3, 1, "", "setIsRandomDateDisplacement"], [142, 3, 1, "", "setKeepMonth"], [142, 3, 1, "", "setKeepTextSizeForObfuscation"], [142, 3, 1, "", "setKeepYear"], [142, 3, 1, "", "setLanguage"], [142, 3, 1, "", "setLazyAnnotator"], [142, 3, 1, "", "setMappingsColumn"], [142, 3, 1, "", "setMaskingPolicy"], [142, 3, 1, "", "setMetadataMaskingPolicy"], [142, 3, 1, "", "setMinYear"], [142, 3, 1, "", "setMode"], [142, 3, 1, "", "setObfuscateByAgeGroups"], [142, 3, 1, "", "setObfuscateDate"], [142, 3, 1, "", "setObfuscateRefSource"], [142, 3, 1, "", "setObfuscationEquivalents"], [142, 3, 1, "", "setObfuscationStrategyOnException"], [142, 3, 1, "", "setOutputAsDocument"], [142, 3, 1, "", "setOutputCol"], [142, 3, 1, "", "setParamValue"], [142, 3, 1, "", "setParams"], [142, 3, 1, "", "setRegexOverride"], [142, 3, 1, "", "setRegion"], [142, 3, 1, "", "setReturnEntityMappings"], [142, 3, 1, "", "setSameEntityThreshold"], [142, 3, 1, "", "setSameLengthFormattedEntities"], [142, 3, 1, "", "setSeed"], [142, 3, 1, "", "setSelectiveObfuscateRefSource"], [142, 3, 1, "", "setSelectiveObfuscationModes"], [142, 3, 1, "", "setStaticObfuscationPairs"], [142, 3, 1, "", "setUnnormalizedDateMode"], [142, 3, 1, "", "setUseShifDays"], [142, 3, 1, "", "setUseShiftDays"], [142, 3, 1, "", "setZipCodeTag"], [142, 2, 1, "", "skipLPInputColsValidation"], [142, 3, 1, "", "transform"], [142, 2, 1, "", "uid"], [142, 2, 1, "", "unnormalizedDateMode"], [142, 2, 1, "", "useShifDays"], [142, 2, 1, "", "useShiftDays"], [142, 3, 1, "", "write"], [142, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[143, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[143, 3, 1, "", "clear"], [143, 3, 1, "", "copy"], [143, 2, 1, "", "dateShiftColumn"], [143, 3, 1, "", "explainParam"], [143, 3, 1, "", "explainParams"], [143, 3, 1, "", "extractParamMap"], [143, 3, 1, "", "getInputCols"], [143, 3, 1, "", "getLazyAnnotator"], [143, 3, 1, "", "getOrDefault"], [143, 3, 1, "", "getOutputCol"], [143, 3, 1, "", "getParam"], [143, 3, 1, "", "getParamValue"], [143, 2, 1, "", "getter_attrs"], [143, 3, 1, "", "hasDefault"], [143, 3, 1, "", "hasParam"], [143, 2, 1, "", "inputAnnotatorTypes"], [143, 2, 1, "", "inputCols"], [143, 3, 1, "", "inputColsValidation"], [143, 3, 1, "", "isDefined"], [143, 3, 1, "", "isSet"], [143, 2, 1, "", "lazyAnnotator"], [143, 3, 1, "", "load"], [143, 2, 1, "", "name"], [143, 2, 1, "", "newDateShift"], [143, 2, 1, "", "optionalInputAnnotatorTypes"], [143, 2, 1, "", "outputAnnotatorType"], [143, 2, 1, "", "outputCol"], [143, 2, 1, "", "patientIdColumn"], [143, 2, 1, "", "rangeDays"], [143, 3, 1, "", "read"], [143, 3, 1, "", "save"], [143, 2, 1, "", "seed"], [143, 3, 1, "", "set"], [143, 3, 1, "", "setDateShiftColumn"], [143, 3, 1, "", "setIdColumn"], [143, 3, 1, "", "setInputCols"], [143, 3, 1, "", "setLazyAnnotator"], [143, 3, 1, "", "setNewDateShift"], [143, 3, 1, "", "setOutputCol"], [143, 3, 1, "", "setParamValue"], [143, 3, 1, "", "setParams"], [143, 3, 1, "", "setPatientIdColumn"], [143, 3, 1, "", "setRangeDays"], [143, 3, 1, "", "setSeed"], [143, 3, 1, "", "transform"], [143, 2, 1, "", "uid"], [143, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[146, 0, 0, "-", "chunkmapper"], [147, 0, 0, "-", "docmapper"], [149, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[146, 1, 1, "", "ChunkMapperApproach"], [146, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[146, 2, 1, "", "allowMultiTokenChunk"], [146, 3, 1, "", "clear"], [146, 3, 1, "", "copy"], [146, 2, 1, "", "dictionary"], [146, 2, 1, "", "doExceptionHandling"], [146, 2, 1, "", "enableCharFingerprintMatching"], [146, 2, 1, "", "enableFuzzyMatching"], [146, 2, 1, "", "enableTokenFingerprintMatching"], [146, 3, 1, "", "explainParam"], [146, 3, 1, "", "explainParams"], [146, 3, 1, "", "extractParamMap"], [146, 3, 1, "", "fit"], [146, 3, 1, "", "fitMultiple"], [146, 2, 1, "", "fuzzyDistanceScalingMode"], [146, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [146, 2, 1, "", "fuzzyMatchingDistances"], [146, 3, 1, "", "getInputCols"], [146, 3, 1, "", "getLazyAnnotator"], [146, 3, 1, "", "getOrDefault"], [146, 3, 1, "", "getOutputCol"], [146, 3, 1, "", "getParam"], [146, 3, 1, "", "getParamValue"], [146, 2, 1, "", "getter_attrs"], [146, 3, 1, "", "hasDefault"], [146, 3, 1, "", "hasParam"], [146, 2, 1, "", "inputAnnotatorTypes"], [146, 2, 1, "", "inputCols"], [146, 3, 1, "", "inputColsValidation"], [146, 3, 1, "", "isDefined"], [146, 3, 1, "", "isSet"], [146, 2, 1, "", "lazyAnnotator"], [146, 3, 1, "", "load"], [146, 2, 1, "", "lowerCase"], [146, 2, 1, "", "maxCharNgramFingerprint"], [146, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [146, 2, 1, "", "maxTokenNgramDroppingOperator"], [146, 2, 1, "", "maxTokenNgramDroppingTokens"], [146, 2, 1, "", "maxTokenNgramFingerprint"], [146, 2, 1, "", "minCharNgramFingerprint"], [146, 2, 1, "", "minTokenNgramFingerprint"], [146, 2, 1, "", "multivaluesRelations"], [146, 2, 1, "", "name"], [146, 2, 1, "", "optionalInputAnnotatorTypes"], [146, 2, 1, "", "outputAnnotatorType"], [146, 2, 1, "", "outputCol"], [146, 3, 1, "", "read"], [146, 2, 1, "", "rel"], [146, 2, 1, "", "rels"], [146, 3, 1, "", "save"], [146, 3, 1, "", "set"], [146, 3, 1, "", "setAllowMultiTokenChunk"], [146, 3, 1, "", "setDictionary"], [146, 3, 1, "", "setDoExceptionHandling"], [146, 3, 1, "", "setEnableCharFingerprintMatching"], [146, 3, 1, "", "setEnableFuzzyMatching"], [146, 3, 1, "", "setEnableTokenFingerprintMatching"], [146, 3, 1, "", "setForceInputTypeValidation"], [146, 3, 1, "", "setFuzzyDistanceScalingMode"], [146, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [146, 3, 1, "", "setFuzzyMatchingDistances"], [146, 3, 1, "", "setInputCols"], [146, 3, 1, "", "setLazyAnnotator"], [146, 3, 1, "", "setLowerCase"], [146, 3, 1, "", "setMaxCharNgramFingerprint"], [146, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [146, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [146, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [146, 3, 1, "", "setMaxTokenNgramFingerprint"], [146, 3, 1, "", "setMinCharNgramFingerprint"], [146, 3, 1, "", "setMinTokenNgramFingerprint"], [146, 3, 1, "", "setMultivaluesRelations"], [146, 3, 1, "", "setOutputCol"], [146, 3, 1, "", "setParamValue"], [146, 3, 1, "", "setRel"], [146, 3, 1, "", "setRels"], [146, 2, 1, "", "skipLPInputColsValidation"], [146, 2, 1, "", "uid"], [146, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[146, 2, 1, "", "allowMultiTokenChunk"], [146, 3, 1, "", "clear"], [146, 3, 1, "", "copy"], [146, 2, 1, "", "doExceptionHandling"], [146, 3, 1, "", "explainParam"], [146, 3, 1, "", "explainParams"], [146, 3, 1, "", "extractParamMap"], [146, 3, 1, "", "getInputCols"], [146, 3, 1, "", "getLazyAnnotator"], [146, 3, 1, "", "getOrDefault"], [146, 3, 1, "", "getOutputCol"], [146, 3, 1, "", "getParam"], [146, 3, 1, "", "getParamValue"], [146, 2, 1, "", "getter_attrs"], [146, 3, 1, "", "hasDefault"], [146, 3, 1, "", "hasParam"], [146, 2, 1, "", "inputAnnotatorTypes"], [146, 2, 1, "", "inputCols"], [146, 3, 1, "", "inputColsValidation"], [146, 3, 1, "", "isDefined"], [146, 3, 1, "", "isSet"], [146, 2, 1, "", "lazyAnnotator"], [146, 3, 1, "", "load"], [146, 2, 1, "", "lowerCase"], [146, 2, 1, "", "multivaluesRelations"], [146, 2, 1, "", "name"], [146, 2, 1, "", "optionalInputAnnotatorTypes"], [146, 2, 1, "", "outputAnnotatorType"], [146, 2, 1, "", "outputCol"], [146, 3, 1, "", "pretrained"], [146, 3, 1, "", "read"], [146, 2, 1, "", "rel"], [146, 2, 1, "", "rels"], [146, 3, 1, "", "save"], [146, 3, 1, "", "set"], [146, 3, 1, "", "setAllowMultiTokenChunk"], [146, 3, 1, "", "setDoExceptionHandling"], [146, 3, 1, "", "setForceInputTypeValidation"], [146, 3, 1, "", "setInputCols"], [146, 3, 1, "", "setLazyAnnotator"], [146, 3, 1, "", "setLowerCase"], [146, 3, 1, "", "setMultivaluesRelations"], [146, 3, 1, "", "setOutputCol"], [146, 3, 1, "", "setParamValue"], [146, 3, 1, "", "setParams"], [146, 3, 1, "", "setRel"], [146, 3, 1, "", "setRels"], [146, 2, 1, "", "skipLPInputColsValidation"], [146, 3, 1, "", "transform"], [146, 2, 1, "", "uid"], [146, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[147, 1, 1, "", "DocMapperApproach"], [147, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[147, 2, 1, "", "allowMultiTokenChunk"], [147, 3, 1, "", "clear"], [147, 3, 1, "", "copy"], [147, 2, 1, "", "dictionary"], [147, 2, 1, "", "doExceptionHandling"], [147, 2, 1, "", "enableCharFingerprintMatching"], [147, 2, 1, "", "enableFuzzyMatching"], [147, 2, 1, "", "enableTokenFingerprintMatching"], [147, 3, 1, "", "explainParam"], [147, 3, 1, "", "explainParams"], [147, 3, 1, "", "extractParamMap"], [147, 3, 1, "", "fit"], [147, 3, 1, "", "fitMultiple"], [147, 2, 1, "", "fuzzyDistanceScalingMode"], [147, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [147, 2, 1, "", "fuzzyMatchingDistances"], [147, 3, 1, "", "getInputCols"], [147, 3, 1, "", "getLazyAnnotator"], [147, 3, 1, "", "getOrDefault"], [147, 3, 1, "", "getOutputCol"], [147, 3, 1, "", "getParam"], [147, 3, 1, "", "getParamValue"], [147, 2, 1, "", "getter_attrs"], [147, 3, 1, "", "hasDefault"], [147, 3, 1, "", "hasParam"], [147, 2, 1, "", "inputAnnotatorTypes"], [147, 2, 1, "", "inputCols"], [147, 3, 1, "", "inputColsValidation"], [147, 3, 1, "", "isDefined"], [147, 3, 1, "", "isSet"], [147, 2, 1, "", "lazyAnnotator"], [147, 3, 1, "", "load"], [147, 2, 1, "", "lowerCase"], [147, 2, 1, "", "maxCharNgramFingerprint"], [147, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [147, 2, 1, "", "maxTokenNgramDroppingOperator"], [147, 2, 1, "", "maxTokenNgramDroppingTokens"], [147, 2, 1, "", "maxTokenNgramFingerprint"], [147, 2, 1, "", "minCharNgramFingerprint"], [147, 2, 1, "", "minTokenNgramFingerprint"], [147, 2, 1, "", "multivaluesRelations"], [147, 2, 1, "", "name"], [147, 2, 1, "", "optionalInputAnnotatorTypes"], [147, 2, 1, "", "outputAnnotatorType"], [147, 2, 1, "", "outputCol"], [147, 3, 1, "", "read"], [147, 2, 1, "", "rel"], [147, 2, 1, "", "rels"], [147, 3, 1, "", "save"], [147, 3, 1, "", "set"], [147, 3, 1, "", "setAllowMultiTokenChunk"], [147, 3, 1, "", "setDictionary"], [147, 3, 1, "", "setDoExceptionHandling"], [147, 3, 1, "", "setEnableCharFingerprintMatching"], [147, 3, 1, "", "setEnableFuzzyMatching"], [147, 3, 1, "", "setEnableTokenFingerprintMatching"], [147, 3, 1, "", "setForceInputTypeValidation"], [147, 3, 1, "", "setFuzzyDistanceScalingMode"], [147, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [147, 3, 1, "", "setFuzzyMatchingDistances"], [147, 3, 1, "", "setInputCols"], [147, 3, 1, "", "setLazyAnnotator"], [147, 3, 1, "", "setLowerCase"], [147, 3, 1, "", "setMaxCharNgramFingerprint"], [147, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [147, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [147, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [147, 3, 1, "", "setMaxTokenNgramFingerprint"], [147, 3, 1, "", "setMinCharNgramFingerprint"], [147, 3, 1, "", "setMinTokenNgramFingerprint"], [147, 3, 1, "", "setMultivaluesRelations"], [147, 3, 1, "", "setOutputCol"], [147, 3, 1, "", "setParamValue"], [147, 3, 1, "", "setRel"], [147, 3, 1, "", "setRels"], [147, 2, 1, "", "skipLPInputColsValidation"], [147, 2, 1, "", "uid"], [147, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[147, 2, 1, "", "allowMultiTokenChunk"], [147, 3, 1, "", "clear"], [147, 3, 1, "", "copy"], [147, 2, 1, "", "doExceptionHandling"], [147, 3, 1, "", "explainParam"], [147, 3, 1, "", "explainParams"], [147, 3, 1, "", "extractParamMap"], [147, 3, 1, "", "getInputCols"], [147, 3, 1, "", "getLazyAnnotator"], [147, 3, 1, "", "getOrDefault"], [147, 3, 1, "", "getOutputCol"], [147, 3, 1, "", "getParam"], [147, 3, 1, "", "getParamValue"], [147, 2, 1, "", "getter_attrs"], [147, 3, 1, "", "hasDefault"], [147, 3, 1, "", "hasParam"], [147, 2, 1, "", "inputAnnotatorTypes"], [147, 2, 1, "", "inputCols"], [147, 3, 1, "", "inputColsValidation"], [147, 3, 1, "", "isDefined"], [147, 3, 1, "", "isSet"], [147, 2, 1, "", "lazyAnnotator"], [147, 3, 1, "", "load"], [147, 2, 1, "", "lowerCase"], [147, 2, 1, "", "multivaluesRelations"], [147, 2, 1, "", "name"], [147, 2, 1, "", "optionalInputAnnotatorTypes"], [147, 2, 1, "", "outputAnnotatorType"], [147, 2, 1, "", "outputCol"], [147, 3, 1, "", "pretrained"], [147, 3, 1, "", "read"], [147, 2, 1, "", "rel"], [147, 2, 1, "", "rels"], [147, 3, 1, "", "save"], [147, 3, 1, "", "set"], [147, 3, 1, "", "setAllowMultiTokenChunk"], [147, 3, 1, "", "setDoExceptionHandling"], [147, 3, 1, "", "setForceInputTypeValidation"], [147, 3, 1, "", "setInputCols"], [147, 3, 1, "", "setLazyAnnotator"], [147, 3, 1, "", "setLowerCase"], [147, 3, 1, "", "setMultivaluesRelations"], [147, 3, 1, "", "setOutputCol"], [147, 3, 1, "", "setParamValue"], [147, 3, 1, "", "setParams"], [147, 3, 1, "", "setRel"], [147, 3, 1, "", "setRels"], [147, 2, 1, "", "skipLPInputColsValidation"], [147, 3, 1, "", "transform"], [147, 2, 1, "", "uid"], [147, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[149, 1, 1, "", "SentenceEntityResolverApproach"], [149, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[149, 2, 1, "", "aux_label_col"], [149, 2, 1, "", "caseSensitive"], [149, 3, 1, "", "clear"], [149, 2, 1, "", "confidenceFunction"], [149, 3, 1, "", "copy"], [149, 2, 1, "", "datasetInfo"], [149, 2, 1, "", "distanceFunction"], [149, 2, 1, "", "doExceptionHandling"], [149, 2, 1, "", "dropCodesList"], [149, 2, 1, "", "engine"], [149, 3, 1, "", "explainParam"], [149, 3, 1, "", "explainParams"], [149, 3, 1, "", "extractParamMap"], [149, 3, 1, "", "fit"], [149, 3, 1, "", "fitMultiple"], [149, 3, 1, "", "getCaseSensitive"], [149, 3, 1, "", "getEngine"], [149, 3, 1, "", "getInputCols"], [149, 3, 1, "", "getLazyAnnotator"], [149, 3, 1, "", "getOrDefault"], [149, 3, 1, "", "getOutputCol"], [149, 3, 1, "", "getParam"], [149, 3, 1, "", "getParamValue"], [149, 2, 1, "", "getter_attrs"], [149, 3, 1, "", "hasDefault"], [149, 3, 1, "", "hasParam"], [149, 2, 1, "", "inputAnnotatorTypes"], [149, 2, 1, "", "inputCols"], [149, 3, 1, "", "inputColsValidation"], [149, 3, 1, "", "isDefined"], [149, 3, 1, "", "isSet"], [149, 2, 1, "", "labelCol"], [149, 2, 1, "", "lazyAnnotator"], [149, 3, 1, "", "load"], [149, 2, 1, "", "missAsEmpty"], [149, 2, 1, "", "neighbours"], [149, 2, 1, "", "normalizedCol"], [149, 2, 1, "", "optionalInputAnnotatorTypes"], [149, 2, 1, "", "outputAnnotatorType"], [149, 2, 1, "", "outputCol"], [149, 2, 1, "", "overrideExistingCodes"], [149, 2, 1, "", "pretrainedModelPath"], [149, 3, 1, "", "read"], [149, 2, 1, "", "returnCosineDistances"], [149, 2, 1, "", "returnResolvedTextEmbeddings"], [149, 3, 1, "", "save"], [149, 3, 1, "", "set"], [149, 3, 1, "", "setAuxLabelCol"], [149, 3, 1, "", "setCaseSensitive"], [149, 3, 1, "", "setConfidenceFunction"], [149, 3, 1, "", "setDatasetInfo"], [149, 3, 1, "", "setDistanceFunction"], [149, 3, 1, "", "setDoExceptionHandling"], [149, 3, 1, "", "setDropCodesList"], [149, 3, 1, "", "setExtractCosineDistances"], [149, 3, 1, "", "setForceInputTypeValidation"], [149, 3, 1, "", "setInputCols"], [149, 3, 1, "", "setLabelCol"], [149, 3, 1, "", "setLazyAnnotator"], [149, 3, 1, "", "setMissAsEmpty"], [149, 3, 1, "", "setNeighbours"], [149, 3, 1, "", "setNormalizedCol"], [149, 3, 1, "", "setOutputCol"], [149, 3, 1, "", "setOverrideExistingCodes"], [149, 3, 1, "", "setParamValue"], [149, 3, 1, "", "setPretrainedModelPath"], [149, 3, 1, "", "setReturnResolvedTextEmbeddings"], [149, 3, 1, "", "setThreshold"], [149, 3, 1, "", "setUseAuxLabel"], [149, 2, 1, "", "skipLPInputColsValidation"], [149, 2, 1, "", "threshold"], [149, 2, 1, "", "uid"], [149, 2, 1, "", "useAuxLabel"], [149, 3, 1, "", "write"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[149, 3, 1, "", "clear"], [149, 3, 1, "", "copy"], [149, 2, 1, "", "dimension"], [149, 3, 1, "", "explainParam"], [149, 3, 1, "", "explainParams"], [149, 3, 1, "", "extractParamMap"], [149, 3, 1, "", "getDimension"], [149, 3, 1, "", "getInputCols"], [149, 3, 1, "", "getLazyAnnotator"], [149, 3, 1, "", "getOrDefault"], [149, 3, 1, "", "getOutputCol"], [149, 3, 1, "", "getParam"], [149, 3, 1, "", "getParamValue"], [149, 2, 1, "", "getter_attrs"], [149, 3, 1, "", "hasDefault"], [149, 3, 1, "", "hasParam"], [149, 2, 1, "", "inputAnnotatorTypes"], [149, 2, 1, "", "inputCols"], [149, 3, 1, "", "inputColsValidation"], [149, 3, 1, "", "isDefined"], [149, 3, 1, "", "isSet"], [149, 2, 1, "", "lazyAnnotator"], [149, 3, 1, "", "load"], [149, 2, 1, "", "name"], [149, 2, 1, "", "optionalInputAnnotatorTypes"], [149, 2, 1, "", "outputAnnotatorType"], [149, 2, 1, "", "outputCol"], [149, 3, 1, "", "pretrained"], [149, 3, 1, "", "read"], [149, 2, 1, "", "returnCosineDistances"], [149, 3, 1, "", "save"], [149, 2, 1, "", "searchTree"], [149, 3, 1, "", "set"], [149, 3, 1, "", "setDimension"], [149, 3, 1, "", "setForceInputTypeValidation"], [149, 3, 1, "", "setInputCols"], [149, 3, 1, "", "setLazyAnnotator"], [149, 3, 1, "", "setOutputCol"], [149, 3, 1, "", "setParamValue"], [149, 3, 1, "", "setParams"], [149, 3, 1, "", "setSearchTree"], [149, 3, 1, "", "setUseAuxLabel"], [149, 2, 1, "", "skipLPInputColsValidation"], [149, 3, 1, "", "transform"], [149, 2, 1, "", "uid"], [149, 2, 1, "", "useAuxLabel"], [149, 3, 1, "", "write"]], "sparknlp_jsl.finance.graph": [[151, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[152, 0, 0, "-", "relation_extraction_dl"], [153, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[152, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[152, 2, 1, "", "batchSize"], [152, 2, 1, "", "classes"], [152, 3, 1, "", "clear"], [152, 3, 1, "", "copy"], [152, 2, 1, "", "customLabels"], [152, 2, 1, "", "doExceptionHandling"], [152, 3, 1, "", "explainParam"], [152, 3, 1, "", "explainParams"], [152, 3, 1, "", "extractParamMap"], [152, 3, 1, "", "getClasses"], [152, 3, 1, "", "getInputCols"], [152, 3, 1, "", "getLazyAnnotator"], [152, 3, 1, "", "getOrDefault"], [152, 3, 1, "", "getOutputCol"], [152, 3, 1, "", "getParam"], [152, 3, 1, "", "getParamValue"], [152, 3, 1, "", "getRelationTypePerPair"], [152, 2, 1, "", "getter_attrs"], [152, 3, 1, "", "hasDefault"], [152, 3, 1, "", "hasParam"], [152, 2, 1, "", "inputAnnotatorTypes"], [152, 2, 1, "", "inputCols"], [152, 3, 1, "", "inputColsValidation"], [152, 3, 1, "", "isDefined"], [152, 3, 1, "", "isSet"], [152, 2, 1, "", "lazyAnnotator"], [152, 3, 1, "", "load"], [152, 3, 1, "", "loadSavedModel"], [152, 2, 1, "", "name"], [152, 2, 1, "", "optionalInputAnnotatorTypes"], [152, 2, 1, "", "outputAnnotatorType"], [152, 2, 1, "", "outputCol"], [152, 2, 1, "", "predictionThreshold"], [152, 3, 1, "", "pretrained"], [152, 3, 1, "", "read"], [152, 2, 1, "", "relationPairsCaseSensitive"], [152, 3, 1, "", "save"], [152, 3, 1, "", "set"], [152, 3, 1, "", "setBatchSize"], [152, 3, 1, "", "setCaseSensitive"], [152, 3, 1, "", "setCustomLabels"], [152, 3, 1, "", "setDoExceptionHandling"], [152, 3, 1, "", "setForceInputTypeValidation"], [152, 3, 1, "", "setInputCols"], [152, 3, 1, "", "setLazyAnnotator"], [152, 3, 1, "", "setOutputCol"], [152, 3, 1, "", "setParamValue"], [152, 3, 1, "", "setParams"], [152, 3, 1, "", "setPredictionThreshold"], [152, 3, 1, "", "setRelationPairsCaseSensitive"], [152, 3, 1, "", "setRelationTypePerPair"], [152, 2, 1, "", "skipLPInputColsValidation"], [152, 3, 1, "", "transform"], [152, 2, 1, "", "uid"], [152, 3, 1, "", "write"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[153, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[153, 2, 1, "", "caseSensitive"], [153, 3, 1, "", "clear"], [153, 2, 1, "", "coalesceSentences"], [153, 2, 1, "", "configProtoBytes"], [153, 3, 1, "", "copy"], [153, 3, 1, "", "explainParam"], [153, 3, 1, "", "explainParams"], [153, 3, 1, "", "extractParamMap"], [153, 3, 1, "", "getCaseSensitive"], [153, 3, 1, "", "getClasses"], [153, 3, 1, "", "getInputCols"], [153, 3, 1, "", "getLazyAnnotator"], [153, 3, 1, "", "getOrDefault"], [153, 3, 1, "", "getOutputCol"], [153, 3, 1, "", "getParam"], [153, 3, 1, "", "getParamValue"], [153, 2, 1, "", "getter_attrs"], [153, 3, 1, "", "hasDefault"], [153, 3, 1, "", "hasParam"], [153, 2, 1, "", "inputAnnotatorTypes"], [153, 2, 1, "", "inputCols"], [153, 3, 1, "", "inputColsValidation"], [153, 3, 1, "", "isDefined"], [153, 3, 1, "", "isSet"], [153, 2, 1, "", "lazyAnnotator"], [153, 3, 1, "", "load"], [153, 3, 1, "", "loadSavedModel"], [153, 3, 1, "", "loadSavedModelOpenSource"], [153, 2, 1, "", "maxSentenceLength"], [153, 2, 1, "", "multiLabel"], [153, 2, 1, "", "name"], [153, 2, 1, "", "negativeRelationships"], [153, 2, 1, "", "optionalInputAnnotatorTypes"], [153, 2, 1, "", "outputAnnotatorType"], [153, 2, 1, "", "outputCol"], [153, 2, 1, "", "predictionThreshold"], [153, 3, 1, "", "pretrained"], [153, 3, 1, "", "read"], [153, 3, 1, "", "save"], [153, 3, 1, "", "set"], [153, 3, 1, "", "setCaseSensitive"], [153, 3, 1, "", "setCoalesceSentences"], [153, 3, 1, "", "setConfigProtoBytes"], [153, 3, 1, "", "setForceInputTypeValidation"], [153, 3, 1, "", "setInputCols"], [153, 3, 1, "", "setLazyAnnotator"], [153, 3, 1, "", "setMaxSentenceLength"], [153, 3, 1, "", "setNegativeRelationships"], [153, 3, 1, "", "setOutputCol"], [153, 3, 1, "", "setParamValue"], [153, 3, 1, "", "setParams"], [153, 3, 1, "", "setRelationalCategories"], [153, 2, 1, "", "skipLPInputColsValidation"], [153, 3, 1, "", "transform"], [153, 2, 1, "", "uid"], [153, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification": [[155, 0, 0, "-", "finance_bert_for_sequence_classification"], [156, 0, 0, "-", "finance_classifier_dl"], [157, 0, 0, "-", "finance_document_ml_classifier"], [158, 0, 0, "-", "finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[155, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[155, 2, 1, "", "caseSensitive"], [155, 3, 1, "", "clear"], [155, 2, 1, "", "coalesceSentences"], [155, 2, 1, "", "configProtoBytes"], [155, 3, 1, "", "copy"], [155, 3, 1, "", "explainParam"], [155, 3, 1, "", "explainParams"], [155, 3, 1, "", "extractParamMap"], [155, 3, 1, "", "getCaseSensitive"], [155, 3, 1, "", "getClasses"], [155, 3, 1, "", "getInputCols"], [155, 3, 1, "", "getLazyAnnotator"], [155, 3, 1, "", "getOrDefault"], [155, 3, 1, "", "getOutputCol"], [155, 3, 1, "", "getParam"], [155, 3, 1, "", "getParamValue"], [155, 2, 1, "", "getter_attrs"], [155, 3, 1, "", "hasDefault"], [155, 3, 1, "", "hasParam"], [155, 2, 1, "", "inputAnnotatorTypes"], [155, 2, 1, "", "inputCols"], [155, 3, 1, "", "inputColsValidation"], [155, 3, 1, "", "isDefined"], [155, 3, 1, "", "isSet"], [155, 2, 1, "", "lazyAnnotator"], [155, 3, 1, "", "load"], [155, 3, 1, "", "loadSavedModel"], [155, 3, 1, "", "loadSavedModelOpenSource"], [155, 2, 1, "", "maxSentenceLength"], [155, 2, 1, "", "name"], [155, 2, 1, "", "optionalInputAnnotatorTypes"], [155, 2, 1, "", "outputAnnotatorType"], [155, 2, 1, "", "outputCol"], [155, 3, 1, "", "pretrained"], [155, 3, 1, "", "read"], [155, 3, 1, "", "save"], [155, 3, 1, "", "set"], [155, 3, 1, "", "setCaseSensitive"], [155, 3, 1, "", "setCoalesceSentences"], [155, 3, 1, "", "setConfigProtoBytes"], [155, 3, 1, "", "setForceInputTypeValidation"], [155, 3, 1, "", "setInputCols"], [155, 3, 1, "", "setLazyAnnotator"], [155, 3, 1, "", "setMaxSentenceLength"], [155, 3, 1, "", "setOutputCol"], [155, 3, 1, "", "setParamValue"], [155, 3, 1, "", "setParams"], [155, 2, 1, "", "skipLPInputColsValidation"], [155, 3, 1, "", "transform"], [155, 2, 1, "", "uid"], [155, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[156, 1, 1, "", "FinanceClassifierDLApproach"], [156, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach": [[156, 2, 1, "", "batchSize"], [156, 3, 1, "", "clear"], [156, 2, 1, "", "configProtoBytes"], [156, 3, 1, "", "copy"], [156, 2, 1, "", "dropout"], [156, 2, 1, "", "enableOutputLogs"], [156, 2, 1, "", "evaluationLogExtended"], [156, 3, 1, "", "explainParam"], [156, 3, 1, "", "explainParams"], [156, 3, 1, "", "extractParamMap"], [156, 3, 1, "", "fit"], [156, 3, 1, "", "fitMultiple"], [156, 3, 1, "", "getInputCols"], [156, 3, 1, "", "getLazyAnnotator"], [156, 3, 1, "", "getOrDefault"], [156, 3, 1, "", "getOutputCol"], [156, 3, 1, "", "getParam"], [156, 3, 1, "", "getParamValue"], [156, 2, 1, "", "getter_attrs"], [156, 3, 1, "", "hasDefault"], [156, 3, 1, "", "hasParam"], [156, 2, 1, "", "inputAnnotatorTypes"], [156, 2, 1, "", "inputCols"], [156, 3, 1, "", "inputColsValidation"], [156, 3, 1, "", "isDefined"], [156, 3, 1, "", "isSet"], [156, 2, 1, "", "labelColumn"], [156, 2, 1, "", "lazyAnnotator"], [156, 3, 1, "", "load"], [156, 2, 1, "", "lr"], [156, 2, 1, "", "maxEpochs"], [156, 2, 1, "", "optionalInputAnnotatorTypes"], [156, 2, 1, "", "outputAnnotatorType"], [156, 2, 1, "", "outputCol"], [156, 2, 1, "", "outputLogsPath"], [156, 2, 1, "", "randomSeed"], [156, 3, 1, "", "read"], [156, 3, 1, "", "save"], [156, 3, 1, "", "set"], [156, 3, 1, "", "setBatchSize"], [156, 3, 1, "", "setConfigProtoBytes"], [156, 3, 1, "", "setDropout"], [156, 3, 1, "", "setEnableOutputLogs"], [156, 3, 1, "", "setEvaluationLogExtended"], [156, 3, 1, "", "setInputCols"], [156, 3, 1, "", "setLabelColumn"], [156, 3, 1, "", "setLazyAnnotator"], [156, 3, 1, "", "setLr"], [156, 3, 1, "", "setMaxEpochs"], [156, 3, 1, "", "setOutputCol"], [156, 3, 1, "", "setOutputLogsPath"], [156, 3, 1, "", "setParamValue"], [156, 3, 1, "", "setRandomSeed"], [156, 3, 1, "", "setTestDataset"], [156, 3, 1, "", "setValidationSplit"], [156, 3, 1, "", "setVerbose"], [156, 2, 1, "", "testDataset"], [156, 2, 1, "", "uid"], [156, 2, 1, "", "validationSplit"], [156, 2, 1, "", "verbose"], [156, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[156, 2, 1, "", "classes"], [156, 3, 1, "", "clear"], [156, 2, 1, "", "configProtoBytes"], [156, 3, 1, "", "copy"], [156, 2, 1, "", "engine"], [156, 3, 1, "", "explainParam"], [156, 3, 1, "", "explainParams"], [156, 3, 1, "", "extractParamMap"], [156, 3, 1, "", "getEngine"], [156, 3, 1, "", "getInputCols"], [156, 3, 1, "", "getLazyAnnotator"], [156, 3, 1, "", "getOrDefault"], [156, 3, 1, "", "getOutputCol"], [156, 3, 1, "", "getParam"], [156, 3, 1, "", "getParamValue"], [156, 3, 1, "", "getStorageRef"], [156, 2, 1, "", "getter_attrs"], [156, 3, 1, "", "hasDefault"], [156, 3, 1, "", "hasParam"], [156, 2, 1, "", "inputAnnotatorTypes"], [156, 2, 1, "", "inputCols"], [156, 3, 1, "", "inputColsValidation"], [156, 3, 1, "", "isDefined"], [156, 3, 1, "", "isSet"], [156, 2, 1, "", "lazyAnnotator"], [156, 3, 1, "", "load"], [156, 2, 1, "", "name"], [156, 2, 1, "", "optionalInputAnnotatorTypes"], [156, 2, 1, "", "outputAnnotatorType"], [156, 2, 1, "", "outputCol"], [156, 3, 1, "", "pretrained"], [156, 3, 1, "", "read"], [156, 3, 1, "", "save"], [156, 3, 1, "", "set"], [156, 3, 1, "", "setConfigProtoBytes"], [156, 3, 1, "", "setInputCols"], [156, 3, 1, "", "setLazyAnnotator"], [156, 3, 1, "", "setOutputCol"], [156, 3, 1, "", "setParamValue"], [156, 3, 1, "", "setParams"], [156, 3, 1, "", "setStorageRef"], [156, 2, 1, "", "storageRef"], [156, 3, 1, "", "transform"], [156, 2, 1, "", "uid"], [156, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[157, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [157, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach": [[157, 2, 1, "", "classificationModelClass"], [157, 2, 1, "", "classificationModelPath"], [157, 3, 1, "", "clear"], [157, 3, 1, "", "copy"], [157, 3, 1, "", "explainParam"], [157, 3, 1, "", "explainParams"], [157, 3, 1, "", "extractParamMap"], [157, 3, 1, "", "fit"], [157, 2, 1, "", "fitIntercept"], [157, 3, 1, "", "fitMultiple"], [157, 3, 1, "", "getInputCols"], [157, 3, 1, "", "getLazyAnnotator"], [157, 3, 1, "", "getOrDefault"], [157, 3, 1, "", "getOutputCol"], [157, 3, 1, "", "getParam"], [157, 3, 1, "", "getParamValue"], [157, 2, 1, "", "getter_attrs"], [157, 3, 1, "", "hasDefault"], [157, 3, 1, "", "hasParam"], [157, 2, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "inputCols"], [157, 3, 1, "", "inputColsValidation"], [157, 3, 1, "", "isDefined"], [157, 3, 1, "", "isSet"], [157, 2, 1, "", "labelCol"], [157, 2, 1, "", "labels"], [157, 2, 1, "", "lazyAnnotator"], [157, 3, 1, "", "load"], [157, 2, 1, "", "maxIter"], [157, 2, 1, "", "maxTokenNgram"], [157, 2, 1, "", "mergeChunks"], [157, 2, 1, "", "minTokenNgram"], [157, 2, 1, "", "optionalInputAnnotatorTypes"], [157, 2, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "outputCol"], [157, 3, 1, "", "read"], [157, 3, 1, "", "save"], [157, 3, 1, "", "set"], [157, 3, 1, "", "setClassificationModelClass"], [157, 3, 1, "", "setClassificationModelPath"], [157, 3, 1, "", "setFitIntercept"], [157, 3, 1, "", "setForceInputTypeValidation"], [157, 3, 1, "", "setInputCols"], [157, 3, 1, "", "setLabelCol"], [157, 3, 1, "", "setLabels"], [157, 3, 1, "", "setLazyAnnotator"], [157, 3, 1, "", "setMaxIter"], [157, 3, 1, "", "setMaxTokenNgram"], [157, 3, 1, "", "setMergeChunks"], [157, 3, 1, "", "setMinTokenNgram"], [157, 3, 1, "", "setOutputCol"], [157, 3, 1, "", "setParamValue"], [157, 3, 1, "", "setTol"], [157, 3, 1, "", "setVectorizationModelPath"], [157, 2, 1, "", "skipLPInputColsValidation"], [157, 2, 1, "", "tol"], [157, 2, 1, "", "uid"], [157, 2, 1, "", "vectorizationModelPath"], [157, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[157, 2, 1, "", "classificationModel"], [157, 3, 1, "", "clear"], [157, 3, 1, "", "copy"], [157, 3, 1, "", "explainParam"], [157, 3, 1, "", "explainParams"], [157, 3, 1, "", "extractParamMap"], [157, 3, 1, "", "getInputCols"], [157, 3, 1, "", "getLazyAnnotator"], [157, 3, 1, "", "getOrDefault"], [157, 3, 1, "", "getOutputCol"], [157, 3, 1, "", "getParam"], [157, 3, 1, "", "getParamValue"], [157, 2, 1, "", "getter_attrs"], [157, 3, 1, "", "hasDefault"], [157, 3, 1, "", "hasParam"], [157, 2, 1, "", "inputAnnotatorTypes"], [157, 2, 1, "", "inputCols"], [157, 3, 1, "", "inputColsValidation"], [157, 3, 1, "", "isDefined"], [157, 3, 1, "", "isSet"], [157, 2, 1, "", "labels"], [157, 2, 1, "", "lazyAnnotator"], [157, 3, 1, "", "load"], [157, 2, 1, "", "maxTokenNgram"], [157, 2, 1, "", "mergeChunks"], [157, 2, 1, "", "minTokenNgram"], [157, 2, 1, "", "name"], [157, 2, 1, "", "optionalInputAnnotatorTypes"], [157, 2, 1, "", "outputAnnotatorType"], [157, 2, 1, "", "outputCol"], [157, 3, 1, "", "pretrained"], [157, 3, 1, "", "read"], [157, 3, 1, "", "save"], [157, 3, 1, "", "set"], [157, 3, 1, "", "setClassificationModel"], [157, 3, 1, "", "setForceInputTypeValidation"], [157, 3, 1, "", "setInputCols"], [157, 3, 1, "", "setLabels"], [157, 3, 1, "", "setLazyAnnotator"], [157, 3, 1, "", "setMergeChunks"], [157, 3, 1, "", "setOutputCol"], [157, 3, 1, "", "setParamValue"], [157, 3, 1, "", "setParams"], [157, 3, 1, "", "setVectorizationModel"], [157, 2, 1, "", "skipLPInputColsValidation"], [157, 3, 1, "", "transform"], [157, 2, 1, "", "uid"], [157, 2, 1, "", "vectorizationModel"], [157, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[158, 1, 1, "", "FinanceFewShotClassifierApproach"], [158, 1, 1, "", "FinanceFewShotClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach": [[158, 2, 1, "", "batchSize"], [158, 3, 1, "", "clear"], [158, 3, 1, "", "copy"], [158, 2, 1, "", "datasetInfo"], [158, 2, 1, "", "doExceptionHandling"], [158, 2, 1, "", "dropout"], [158, 2, 1, "", "engine"], [158, 2, 1, "", "epochsN"], [158, 3, 1, "", "explainParam"], [158, 3, 1, "", "explainParams"], [158, 3, 1, "", "extractParamMap"], [158, 2, 1, "", "featureScaling"], [158, 3, 1, "", "fit"], [158, 3, 1, "", "fitMultiple"], [158, 2, 1, "", "fixImbalance"], [158, 3, 1, "", "getEngine"], [158, 3, 1, "", "getInputCols"], [158, 3, 1, "", "getLazyAnnotator"], [158, 3, 1, "", "getOrDefault"], [158, 3, 1, "", "getOutputCol"], [158, 3, 1, "", "getParam"], [158, 3, 1, "", "getParamValue"], [158, 2, 1, "", "getter_attrs"], [158, 3, 1, "", "hasDefault"], [158, 3, 1, "", "hasParam"], [158, 2, 1, "", "inputAnnotatorTypes"], [158, 2, 1, "", "inputCols"], [158, 3, 1, "", "inputColsValidation"], [158, 3, 1, "", "isDefined"], [158, 3, 1, "", "isSet"], [158, 2, 1, "", "labelColumn"], [158, 2, 1, "", "lazyAnnotator"], [158, 2, 1, "", "learningRate"], [158, 3, 1, "", "load"], [158, 2, 1, "", "modelFile"], [158, 2, 1, "", "multiClass"], [158, 2, 1, "", "name"], [158, 2, 1, "", "optionalInputAnnotatorTypes"], [158, 2, 1, "", "outputAnnotatorType"], [158, 2, 1, "", "outputCol"], [158, 2, 1, "", "outputLogsPath"], [158, 3, 1, "", "read"], [158, 3, 1, "", "save"], [158, 3, 1, "", "set"], [158, 3, 1, "", "setBatchSize"], [158, 3, 1, "", "setDatasetInfo"], [158, 3, 1, "", "setDoExceptionHandling"], [158, 3, 1, "", "setDropout"], [158, 3, 1, "", "setEpochsNumber"], [158, 3, 1, "", "setFeatureScaling"], [158, 3, 1, "", "setFixImbalance"], [158, 3, 1, "", "setForceInputTypeValidation"], [158, 3, 1, "", "setInputCols"], [158, 3, 1, "", "setLabelCol"], [158, 3, 1, "", "setLazyAnnotator"], [158, 3, 1, "", "setLearningRate"], [158, 3, 1, "", "setModelFile"], [158, 3, 1, "", "setMultiClass"], [158, 3, 1, "", "setOutputCol"], [158, 3, 1, "", "setOutputLogsPath"], [158, 3, 1, "", "setParamValue"], [158, 3, 1, "", "setValidationSplit"], [158, 2, 1, "", "skipLPInputColsValidation"], [158, 2, 1, "", "uid"], [158, 2, 1, "", "validationSplit"], [158, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel": [[158, 2, 1, "", "classes"], [158, 3, 1, "", "clear"], [158, 3, 1, "", "copy"], [158, 2, 1, "", "datasetInfo"], [158, 2, 1, "", "doExceptionHandling"], [158, 3, 1, "", "explainParam"], [158, 3, 1, "", "explainParams"], [158, 3, 1, "", "extractParamMap"], [158, 2, 1, "", "featureScaling"], [158, 3, 1, "", "getInputCols"], [158, 3, 1, "", "getLazyAnnotator"], [158, 3, 1, "", "getOrDefault"], [158, 3, 1, "", "getOutputCol"], [158, 3, 1, "", "getParam"], [158, 3, 1, "", "getParamValue"], [158, 2, 1, "", "getter_attrs"], [158, 3, 1, "", "hasDefault"], [158, 3, 1, "", "hasParam"], [158, 2, 1, "", "inputAnnotatorTypes"], [158, 2, 1, "", "inputCols"], [158, 3, 1, "", "inputColsValidation"], [158, 3, 1, "", "isDefined"], [158, 3, 1, "", "isSet"], [158, 2, 1, "", "lazyAnnotator"], [158, 3, 1, "", "load"], [158, 2, 1, "", "multiClass"], [158, 2, 1, "", "name"], [158, 2, 1, "", "optionalInputAnnotatorTypes"], [158, 2, 1, "", "outputAnnotatorType"], [158, 2, 1, "", "outputCol"], [158, 3, 1, "", "pretrained"], [158, 3, 1, "", "read"], [158, 3, 1, "", "save"], [158, 3, 1, "", "set"], [158, 3, 1, "", "setDatasetInfo"], [158, 3, 1, "", "setDoExceptionHandling"], [158, 3, 1, "", "setFeatureScaling"], [158, 3, 1, "", "setForceInputTypeValidation"], [158, 3, 1, "", "setInputCols"], [158, 3, 1, "", "setLazyAnnotator"], [158, 3, 1, "", "setMultiClass"], [158, 3, 1, "", "setOutputCol"], [158, 3, 1, "", "setParamValue"], [158, 3, 1, "", "setParams"], [158, 2, 1, "", "skipLPInputColsValidation"], [158, 3, 1, "", "transform"], [158, 2, 1, "", "uid"], [158, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation": [[160, 0, 0, "-", "finance_encoder_decoder"], [161, 0, 0, "-", "finance_qa"], [162, 0, 0, "-", "finance_summarizer"], [163, 0, 0, "-", "finance_text_generator"], [165, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[160, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[160, 2, 1, "", "batchSize"], [160, 3, 1, "", "clear"], [160, 2, 1, "", "configProtoBytes"], [160, 3, 1, "", "copy"], [160, 2, 1, "", "doSample"], [160, 3, 1, "", "explainParam"], [160, 3, 1, "", "explainParams"], [160, 3, 1, "", "extractParamMap"], [160, 3, 1, "", "getBatchSize"], [160, 3, 1, "", "getInputCols"], [160, 3, 1, "", "getLazyAnnotator"], [160, 3, 1, "", "getOrDefault"], [160, 3, 1, "", "getOutputCol"], [160, 3, 1, "", "getParam"], [160, 3, 1, "", "getParamValue"], [160, 2, 1, "", "getter_attrs"], [160, 3, 1, "", "hasDefault"], [160, 3, 1, "", "hasParam"], [160, 2, 1, "", "ignoreTokenIds"], [160, 2, 1, "", "inputAnnotatorTypes"], [160, 2, 1, "", "inputCols"], [160, 3, 1, "", "inputColsValidation"], [160, 3, 1, "", "isDefined"], [160, 3, 1, "", "isSet"], [160, 2, 1, "", "lazyAnnotator"], [160, 3, 1, "", "load"], [160, 2, 1, "", "maxNewTokens"], [160, 2, 1, "", "maxTextLength"], [160, 2, 1, "", "mlFrameworkType"], [160, 2, 1, "", "name"], [160, 2, 1, "", "noRepeatNgramSize"], [160, 2, 1, "", "optionalInputAnnotatorTypes"], [160, 2, 1, "", "outputAnnotatorType"], [160, 2, 1, "", "outputCol"], [160, 2, 1, "", "randomSeed"], [160, 3, 1, "", "read"], [160, 2, 1, "", "refineChunkSize"], [160, 2, 1, "", "refineMaxAttempts"], [160, 2, 1, "", "refineSummary"], [160, 2, 1, "", "refineSummaryTargetLength"], [160, 3, 1, "", "save"], [160, 3, 1, "", "set"], [160, 3, 1, "", "setBatchSize"], [160, 3, 1, "", "setConfigProtoBytes"], [160, 3, 1, "", "setDoSample"], [160, 3, 1, "", "setForceInputTypeValidation"], [160, 3, 1, "", "setIgnoreTokenIds"], [160, 3, 1, "", "setInputCols"], [160, 3, 1, "", "setLazyAnnotator"], [160, 3, 1, "", "setMaxNewTokens"], [160, 3, 1, "", "setMaxTextLength"], [160, 3, 1, "", "setNoRepeatNgramSize"], [160, 3, 1, "", "setOutputCol"], [160, 3, 1, "", "setParamValue"], [160, 3, 1, "", "setParams"], [160, 3, 1, "", "setRandomSeed"], [160, 3, 1, "", "setRefineChunkSize"], [160, 3, 1, "", "setRefineMaxAttempts"], [160, 3, 1, "", "setRefineSummary"], [160, 3, 1, "", "setRefineSummaryTargetLength"], [160, 3, 1, "", "setStopAtEos"], [160, 3, 1, "", "setTopK"], [160, 2, 1, "", "skipLPInputColsValidation"], [160, 2, 1, "", "stopAtEos"], [160, 2, 1, "", "task"], [160, 2, 1, "", "topK"], [160, 3, 1, "", "transform"], [160, 2, 1, "", "uid"], [160, 2, 1, "", "useCache"], [160, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[161, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[161, 2, 1, "", "batchSize"], [161, 3, 1, "", "clear"], [161, 2, 1, "", "configProtoBytes"], [161, 3, 1, "", "copy"], [161, 2, 1, "", "customPrompt"], [161, 2, 1, "", "doSample"], [161, 3, 1, "", "explainParam"], [161, 3, 1, "", "explainParams"], [161, 3, 1, "", "extractParamMap"], [161, 3, 1, "", "getBatchSize"], [161, 3, 1, "", "getInputCols"], [161, 3, 1, "", "getLazyAnnotator"], [161, 3, 1, "", "getOrDefault"], [161, 3, 1, "", "getOutputCol"], [161, 3, 1, "", "getParam"], [161, 3, 1, "", "getParamValue"], [161, 3, 1, "", "getQuestionTypes"], [161, 2, 1, "", "getter_attrs"], [161, 3, 1, "", "hasDefault"], [161, 3, 1, "", "hasParam"], [161, 2, 1, "", "ignoreTokenIds"], [161, 2, 1, "", "inputAnnotatorTypes"], [161, 2, 1, "", "inputCols"], [161, 3, 1, "", "inputColsValidation"], [161, 3, 1, "", "isDefined"], [161, 3, 1, "", "isSet"], [161, 2, 1, "", "lazyAnnotator"], [161, 3, 1, "", "load"], [161, 3, 1, "", "loadMedicalTextGenerator"], [161, 3, 1, "", "loadSavedModel"], [161, 2, 1, "", "maxContextLength"], [161, 2, 1, "", "maxNewTokens"], [161, 2, 1, "", "mlFrameworkType"], [161, 2, 1, "", "modelType"], [161, 2, 1, "", "name"], [161, 2, 1, "", "noRepeatNgramSize"], [161, 2, 1, "", "optionalInputAnnotatorTypes"], [161, 2, 1, "", "outputAnnotatorType"], [161, 2, 1, "", "outputCol"], [161, 3, 1, "", "pretrained"], [161, 2, 1, "", "questionType"], [161, 3, 1, "", "read"], [161, 3, 1, "", "save"], [161, 3, 1, "", "set"], [161, 3, 1, "", "setBatchSize"], [161, 3, 1, "", "setConfigProtoBytes"], [161, 3, 1, "", "setCustomPrompt"], [161, 3, 1, "", "setDoSample"], [161, 3, 1, "", "setForceInputTypeValidation"], [161, 3, 1, "", "setIgnoreTokenIds"], [161, 3, 1, "", "setInputCols"], [161, 3, 1, "", "setLazyAnnotator"], [161, 3, 1, "", "setMaxContextLength"], [161, 3, 1, "", "setMaxNewTokens"], [161, 3, 1, "", "setNoRepeatNgramSize"], [161, 3, 1, "", "setOutputCol"], [161, 3, 1, "", "setParamValue"], [161, 3, 1, "", "setParams"], [161, 3, 1, "", "setQuestionAnswerTerminals"], [161, 3, 1, "", "setQuestionPrompts"], [161, 3, 1, "", "setQuestionSkipLastToken"], [161, 3, 1, "", "setQuestionType"], [161, 3, 1, "", "setRandomSeed"], [161, 3, 1, "", "setTopK"], [161, 3, 1, "", "setUseCache"], [161, 2, 1, "", "skipLPInputColsValidation"], [161, 2, 1, "", "topK"], [161, 3, 1, "", "transform"], [161, 2, 1, "", "uid"], [161, 2, 1, "", "useCache"], [161, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[162, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[162, 2, 1, "", "batchSize"], [162, 3, 1, "", "clear"], [162, 2, 1, "", "configProtoBytes"], [162, 3, 1, "", "copy"], [162, 2, 1, "", "doSample"], [162, 3, 1, "", "explainParam"], [162, 3, 1, "", "explainParams"], [162, 3, 1, "", "extractParamMap"], [162, 3, 1, "", "getBatchSize"], [162, 3, 1, "", "getInputCols"], [162, 3, 1, "", "getLazyAnnotator"], [162, 3, 1, "", "getOrDefault"], [162, 3, 1, "", "getOutputCol"], [162, 3, 1, "", "getParam"], [162, 3, 1, "", "getParamValue"], [162, 2, 1, "", "getter_attrs"], [162, 3, 1, "", "hasDefault"], [162, 3, 1, "", "hasParam"], [162, 2, 1, "", "ignoreTokenIds"], [162, 2, 1, "", "inputAnnotatorTypes"], [162, 2, 1, "", "inputCols"], [162, 3, 1, "", "inputColsValidation"], [162, 3, 1, "", "isDefined"], [162, 3, 1, "", "isSet"], [162, 2, 1, "", "lazyAnnotator"], [162, 3, 1, "", "load"], [162, 3, 1, "", "loadSavedModel"], [162, 2, 1, "", "maxNewTokens"], [162, 2, 1, "", "maxTextLength"], [162, 2, 1, "", "mlFrameworkType"], [162, 2, 1, "", "name"], [162, 2, 1, "", "noRepeatNgramSize"], [162, 2, 1, "", "optionalInputAnnotatorTypes"], [162, 2, 1, "", "outputAnnotatorType"], [162, 2, 1, "", "outputCol"], [162, 3, 1, "", "pretrained"], [162, 2, 1, "", "randomSeed"], [162, 3, 1, "", "read"], [162, 2, 1, "", "refineChunkSize"], [162, 2, 1, "", "refineMaxAttempts"], [162, 2, 1, "", "refineSummary"], [162, 2, 1, "", "refineSummaryTargetLength"], [162, 3, 1, "", "save"], [162, 3, 1, "", "set"], [162, 3, 1, "", "setBatchSize"], [162, 3, 1, "", "setConfigProtoBytes"], [162, 3, 1, "", "setDoSample"], [162, 3, 1, "", "setForceInputTypeValidation"], [162, 3, 1, "", "setIgnoreTokenIds"], [162, 3, 1, "", "setInputCols"], [162, 3, 1, "", "setLazyAnnotator"], [162, 3, 1, "", "setMaxNewTokens"], [162, 3, 1, "", "setMaxTextLength"], [162, 3, 1, "", "setNoRepeatNgramSize"], [162, 3, 1, "", "setOutputCol"], [162, 3, 1, "", "setParamValue"], [162, 3, 1, "", "setParams"], [162, 3, 1, "", "setRandomSeed"], [162, 3, 1, "", "setRefineChunkSize"], [162, 3, 1, "", "setRefineMaxAttempts"], [162, 3, 1, "", "setRefineSummary"], [162, 3, 1, "", "setRefineSummaryTargetLength"], [162, 3, 1, "", "setStopAtEos"], [162, 3, 1, "", "setTopK"], [162, 2, 1, "", "skipLPInputColsValidation"], [162, 2, 1, "", "stopAtEos"], [162, 2, 1, "", "task"], [162, 2, 1, "", "topK"], [162, 3, 1, "", "transform"], [162, 2, 1, "", "uid"], [162, 2, 1, "", "useCache"], [162, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[163, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[163, 2, 1, "", "batchSize"], [163, 3, 1, "", "clear"], [163, 2, 1, "", "configProtoBytes"], [163, 3, 1, "", "copy"], [163, 2, 1, "", "customPrompt"], [163, 2, 1, "", "doSample"], [163, 3, 1, "", "explainParam"], [163, 3, 1, "", "explainParams"], [163, 3, 1, "", "extractParamMap"], [163, 3, 1, "", "getAdditionalTokens"], [163, 3, 1, "", "getBatchSize"], [163, 3, 1, "", "getInputCols"], [163, 3, 1, "", "getLazyAnnotator"], [163, 3, 1, "", "getOrDefault"], [163, 3, 1, "", "getOutputCol"], [163, 3, 1, "", "getParam"], [163, 3, 1, "", "getParamValue"], [163, 2, 1, "", "getter_attrs"], [163, 3, 1, "", "hasDefault"], [163, 3, 1, "", "hasParam"], [163, 2, 1, "", "ignoreTokenIds"], [163, 2, 1, "", "inputAnnotatorTypes"], [163, 2, 1, "", "inputCols"], [163, 3, 1, "", "inputColsValidation"], [163, 3, 1, "", "isDefined"], [163, 3, 1, "", "isSet"], [163, 2, 1, "", "lazyAnnotator"], [163, 3, 1, "", "load"], [163, 3, 1, "", "loadSavedModel"], [163, 2, 1, "", "maxContextLength"], [163, 2, 1, "", "maxNewTokens"], [163, 2, 1, "", "maxTextLength"], [163, 2, 1, "", "mlFrameworkType"], [163, 2, 1, "", "modelType"], [163, 2, 1, "", "name"], [163, 2, 1, "", "noRepeatNgramSize"], [163, 2, 1, "", "optionalInputAnnotatorTypes"], [163, 2, 1, "", "outputAnnotatorType"], [163, 2, 1, "", "outputCol"], [163, 3, 1, "", "pretrained"], [163, 3, 1, "", "read"], [163, 3, 1, "", "save"], [163, 3, 1, "", "set"], [163, 3, 1, "", "setAdditionalTokens"], [163, 3, 1, "", "setBatchSize"], [163, 3, 1, "", "setConfigProtoBytes"], [163, 3, 1, "", "setCustomPrompt"], [163, 3, 1, "", "setDoSample"], [163, 3, 1, "", "setForceInputTypeValidation"], [163, 3, 1, "", "setIgnoreTokenIds"], [163, 3, 1, "", "setInputCols"], [163, 3, 1, "", "setLazyAnnotator"], [163, 3, 1, "", "setMaxContextLength"], [163, 3, 1, "", "setMaxNewTokens"], [163, 3, 1, "", "setMaxTextLength"], [163, 3, 1, "", "setNoRepeatNgramSize"], [163, 3, 1, "", "setOutputCol"], [163, 3, 1, "", "setParamValue"], [163, 3, 1, "", "setParams"], [163, 3, 1, "", "setRandomSeed"], [163, 3, 1, "", "setStopAtEos"], [163, 3, 1, "", "setTopK"], [163, 3, 1, "", "setUseCache"], [163, 2, 1, "", "skipLPInputColsValidation"], [163, 2, 1, "", "stopAtEos"], [163, 2, 1, "", "topK"], [163, 3, 1, "", "transform"], [163, 2, 1, "", "uid"], [163, 2, 1, "", "useCache"], [163, 3, 1, "", "write"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[165, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator": [[165, 3, 1, "", "clear"], [165, 3, 1, "", "copy"], [165, 2, 1, "", "entities1"], [165, 2, 1, "", "entities2"], [165, 3, 1, "", "explainParam"], [165, 3, 1, "", "explainParams"], [165, 3, 1, "", "extractParamMap"], [165, 3, 1, "", "getInputCols"], [165, 3, 1, "", "getLazyAnnotator"], [165, 3, 1, "", "getOrDefault"], [165, 3, 1, "", "getOutputCol"], [165, 3, 1, "", "getParam"], [165, 3, 1, "", "getParamValue"], [165, 2, 1, "", "getter_attrs"], [165, 3, 1, "", "hasDefault"], [165, 3, 1, "", "hasParam"], [165, 2, 1, "", "inputAnnotatorTypes"], [165, 2, 1, "", "inputCols"], [165, 3, 1, "", "inputColsValidation"], [165, 3, 1, "", "isDefined"], [165, 3, 1, "", "isSet"], [165, 2, 1, "", "lazyAnnotator"], [165, 3, 1, "", "load"], [165, 2, 1, "", "name"], [165, 2, 1, "", "optionalInputAnnotatorTypes"], [165, 2, 1, "", "outputAnnotatorType"], [165, 2, 1, "", "outputCol"], [165, 2, 1, "", "questionMark"], [165, 2, 1, "", "questionPronoun"], [165, 3, 1, "", "read"], [165, 3, 1, "", "save"], [165, 3, 1, "", "set"], [165, 3, 1, "", "setEntities1"], [165, 3, 1, "", "setEntities2"], [165, 3, 1, "", "setForceInputTypeValidation"], [165, 3, 1, "", "setInputCols"], [165, 3, 1, "", "setLazyAnnotator"], [165, 3, 1, "", "setOutputCol"], [165, 3, 1, "", "setParamValue"], [165, 3, 1, "", "setParams"], [165, 3, 1, "", "setQuestionMark"], [165, 3, 1, "", "setQuestionPronoun"], [165, 3, 1, "", "setStrategyType"], [165, 2, 1, "", "skipLPInputColsValidation"], [165, 2, 1, "", "strategyType"], [165, 3, 1, "", "transform"], [165, 2, 1, "", "uid"], [165, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification": [[169, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[167, 0, 0, "-", "finance_bert_for_token_classifier"], [168, 0, 0, "-", "finance_ner"], [170, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[167, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[167, 2, 1, "", "caseSensitive"], [167, 3, 1, "", "clear"], [167, 2, 1, "", "configProtoBytes"], [167, 3, 1, "", "copy"], [167, 3, 1, "", "explainParam"], [167, 3, 1, "", "explainParams"], [167, 3, 1, "", "extractParamMap"], [167, 3, 1, "", "getCaseSensitive"], [167, 3, 1, "", "getClasses"], [167, 3, 1, "", "getInputCols"], [167, 3, 1, "", "getLazyAnnotator"], [167, 3, 1, "", "getOrDefault"], [167, 3, 1, "", "getOutputCol"], [167, 3, 1, "", "getParam"], [167, 3, 1, "", "getParamValue"], [167, 2, 1, "", "getter_attrs"], [167, 3, 1, "", "hasDefault"], [167, 3, 1, "", "hasParam"], [167, 2, 1, "", "inputAnnotatorTypes"], [167, 2, 1, "", "inputCols"], [167, 3, 1, "", "inputColsValidation"], [167, 3, 1, "", "isDefined"], [167, 3, 1, "", "isSet"], [167, 2, 1, "", "lazyAnnotator"], [167, 3, 1, "", "load"], [167, 3, 1, "", "loadSavedModel"], [167, 3, 1, "", "loadSavedModelOpenSource"], [167, 2, 1, "", "maxSentenceLength"], [167, 2, 1, "", "name"], [167, 2, 1, "", "optionalInputAnnotatorTypes"], [167, 2, 1, "", "outputAnnotatorType"], [167, 2, 1, "", "outputCol"], [167, 3, 1, "", "pretrained"], [167, 3, 1, "", "read"], [167, 3, 1, "", "save"], [167, 3, 1, "", "set"], [167, 3, 1, "", "setCaseSensitive"], [167, 3, 1, "", "setConfigProtoBytes"], [167, 3, 1, "", "setForceInputTypeValidation"], [167, 3, 1, "", "setInputCols"], [167, 3, 1, "", "setLazyAnnotator"], [167, 3, 1, "", "setMaxSentenceLength"], [167, 3, 1, "", "setOutputCol"], [167, 3, 1, "", "setParamValue"], [167, 3, 1, "", "setParams"], [167, 2, 1, "", "skipLPInputColsValidation"], [167, 3, 1, "", "transform"], [167, 2, 1, "", "uid"], [167, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[168, 1, 1, "", "FinanceNerApproach"], [168, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach": [[168, 2, 1, "", "batchSize"], [168, 3, 1, "", "clear"], [168, 2, 1, "", "configProtoBytes"], [168, 3, 1, "", "copy"], [168, 2, 1, "", "datasetInfo"], [168, 2, 1, "", "dropout"], [168, 2, 1, "", "earlyStoppingCriterion"], [168, 2, 1, "", "earlyStoppingPatience"], [168, 2, 1, "", "enableMemoryOptimizer"], [168, 2, 1, "", "enableOutputLogs"], [168, 2, 1, "", "engine"], [168, 2, 1, "", "entities"], [168, 2, 1, "", "evaluationLogExtended"], [168, 3, 1, "", "explainParam"], [168, 3, 1, "", "explainParams"], [168, 3, 1, "", "extractParamMap"], [168, 3, 1, "", "fit"], [168, 3, 1, "", "fitMultiple"], [168, 3, 1, "", "getEngine"], [168, 3, 1, "", "getInputCols"], [168, 3, 1, "", "getLabelColumn"], [168, 3, 1, "", "getLazyAnnotator"], [168, 3, 1, "", "getOrDefault"], [168, 3, 1, "", "getOutputCol"], [168, 3, 1, "", "getParam"], [168, 3, 1, "", "getParamValue"], [168, 2, 1, "", "getter_attrs"], [168, 2, 1, "", "graphFile"], [168, 2, 1, "", "graphFolder"], [168, 3, 1, "", "hasDefault"], [168, 3, 1, "", "hasParam"], [168, 2, 1, "", "includeAllConfidenceScores"], [168, 2, 1, "", "includeConfidence"], [168, 2, 1, "", "inputAnnotatorTypes"], [168, 2, 1, "", "inputCols"], [168, 3, 1, "", "inputColsValidation"], [168, 3, 1, "", "isDefined"], [168, 3, 1, "", "isSet"], [168, 2, 1, "", "labelColumn"], [168, 2, 1, "", "lazyAnnotator"], [168, 3, 1, "", "load"], [168, 2, 1, "", "logPrefix"], [168, 2, 1, "", "lr"], [168, 2, 1, "", "maxEpochs"], [168, 2, 1, "", "minEpochs"], [168, 2, 1, "", "optionalInputAnnotatorTypes"], [168, 2, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "outputCol"], [168, 2, 1, "", "outputLogsPath"], [168, 2, 1, "", "overrideExistingTags"], [168, 2, 1, "", "po"], [168, 2, 1, "", "pretrainedModelPath"], [168, 2, 1, "", "randomSeed"], [168, 2, 1, "", "randomValidationSplitPerEpoch"], [168, 3, 1, "", "read"], [168, 3, 1, "", "save"], [168, 2, 1, "", "sentenceTokenIndex"], [168, 3, 1, "", "set"], [168, 3, 1, "", "setBatchSize"], [168, 3, 1, "", "setConfigProtoBytes"], [168, 3, 1, "", "setDatasetInfo"], [168, 3, 1, "", "setDoExceptionHandling"], [168, 3, 1, "", "setDropout"], [168, 3, 1, "", "setEarlyStoppingCriterion"], [168, 3, 1, "", "setEarlyStoppingPatience"], [168, 3, 1, "", "setEnableMemoryOptimizer"], [168, 3, 1, "", "setEnableOutputLogs"], [168, 3, 1, "", "setEntities"], [168, 3, 1, "", "setEvaluationLogExtended"], [168, 3, 1, "", "setForceInputTypeValidation"], [168, 3, 1, "", "setGraphFile"], [168, 3, 1, "", "setGraphFolder"], [168, 3, 1, "", "setIncludeAllConfidenceScores"], [168, 3, 1, "", "setIncludeConfidence"], [168, 3, 1, "", "setInputCols"], [168, 3, 1, "", "setLabelColumn"], [168, 3, 1, "", "setLazyAnnotator"], [168, 3, 1, "", "setLogPrefix"], [168, 3, 1, "", "setLr"], [168, 3, 1, "", "setMaxEpochs"], [168, 3, 1, "", "setMinEpochs"], [168, 3, 1, "", "setOutputCol"], [168, 3, 1, "", "setOutputLogsPath"], [168, 3, 1, "", "setOverrideExistingTags"], [168, 3, 1, "", "setParamValue"], [168, 3, 1, "", "setPo"], [168, 3, 1, "", "setPretrainedModelPath"], [168, 3, 1, "", "setRandomSeed"], [168, 3, 1, "", "setRandomValidationSplitPerEpoch"], [168, 3, 1, "", "setSentenceTokenIndex"], [168, 3, 1, "", "setTagsMapping"], [168, 3, 1, "", "setTestDataset"], [168, 3, 1, "", "setUseBestModel"], [168, 3, 1, "", "setUseContrib"], [168, 3, 1, "", "setValidationSplit"], [168, 3, 1, "", "setVerbose"], [168, 2, 1, "", "skipLPInputColsValidation"], [168, 2, 1, "", "testDataset"], [168, 2, 1, "", "uid"], [168, 2, 1, "", "useBestModel"], [168, 2, 1, "", "useContrib"], [168, 2, 1, "", "validationSplit"], [168, 2, 1, "", "verbose"], [168, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[168, 2, 1, "", "classes"], [168, 3, 1, "", "clear"], [168, 2, 1, "", "configProtoBytes"], [168, 3, 1, "", "copy"], [168, 2, 1, "", "datasetInfo"], [168, 2, 1, "", "doExceptionHandling"], [168, 3, 1, "", "explainParam"], [168, 3, 1, "", "explainParams"], [168, 3, 1, "", "extractParamMap"], [168, 3, 1, "", "getClasses"], [168, 3, 1, "", "getInputCols"], [168, 3, 1, "", "getLazyAnnotator"], [168, 3, 1, "", "getOrDefault"], [168, 3, 1, "", "getOutputCol"], [168, 3, 1, "", "getParam"], [168, 3, 1, "", "getParamValue"], [168, 3, 1, "", "getStorageRef"], [168, 3, 1, "", "getTrainingClassDistribution"], [168, 2, 1, "", "getter_attrs"], [168, 3, 1, "", "hasDefault"], [168, 3, 1, "", "hasParam"], [168, 2, 1, "", "includeAllConfidenceScores"], [168, 2, 1, "", "includeConfidence"], [168, 2, 1, "", "inferenceBatchSize"], [168, 2, 1, "", "inputAnnotatorTypes"], [168, 2, 1, "", "inputCols"], [168, 3, 1, "", "inputColsValidation"], [168, 3, 1, "", "isDefined"], [168, 3, 1, "", "isSet"], [168, 2, 1, "", "labelCasing"], [168, 2, 1, "", "lazyAnnotator"], [168, 3, 1, "", "load"], [168, 3, 1, "", "loadSavedModel"], [168, 2, 1, "", "name"], [168, 2, 1, "", "optionalInputAnnotatorTypes"], [168, 2, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "outputCol"], [168, 3, 1, "", "pretrained"], [168, 3, 1, "", "read"], [168, 3, 1, "", "save"], [168, 2, 1, "", "sentenceTokenIndex"], [168, 3, 1, "", "set"], [168, 3, 1, "", "setConfigProtoBytes"], [168, 3, 1, "", "setDatasetInfo"], [168, 3, 1, "", "setForceInputTypeValidation"], [168, 3, 1, "", "setIncludeConfidence"], [168, 3, 1, "", "setInferenceBatchSize"], [168, 3, 1, "", "setInputCols"], [168, 3, 1, "", "setLabelCasing"], [168, 3, 1, "", "setLazyAnnotator"], [168, 3, 1, "", "setOutputCol"], [168, 3, 1, "", "setParamValue"], [168, 3, 1, "", "setParams"], [168, 3, 1, "", "setSentenceTokenIndex"], [168, 3, 1, "", "setStorageRef"], [168, 2, 1, "", "skipLPInputColsValidation"], [168, 2, 1, "", "storageRef"], [168, 2, 1, "", "trainingClassDistribution"], [168, 3, 1, "", "transform"], [168, 2, 1, "", "uid"], [168, 3, 1, "", "write"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[170, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[170, 2, 1, "", "batchSize"], [170, 2, 1, "", "caseSensitive"], [170, 3, 1, "", "clear"], [170, 2, 1, "", "coalesceSentences"], [170, 2, 1, "", "configProtoBytes"], [170, 3, 1, "", "copy"], [170, 2, 1, "", "engine"], [170, 3, 1, "", "explainParam"], [170, 3, 1, "", "explainParams"], [170, 3, 1, "", "extractParamMap"], [170, 3, 1, "", "getBatchSize"], [170, 3, 1, "", "getCaseSensitive"], [170, 3, 1, "", "getClasses"], [170, 3, 1, "", "getEngine"], [170, 3, 1, "", "getInputCols"], [170, 3, 1, "", "getLazyAnnotator"], [170, 3, 1, "", "getMaxSentenceLength"], [170, 3, 1, "", "getOrDefault"], [170, 3, 1, "", "getOutputCol"], [170, 3, 1, "", "getParam"], [170, 3, 1, "", "getParamValue"], [170, 2, 1, "", "getter_attrs"], [170, 3, 1, "", "hasDefault"], [170, 3, 1, "", "hasParam"], [170, 2, 1, "", "ignoreEntities"], [170, 2, 1, "", "inputAnnotatorTypes"], [170, 2, 1, "", "inputCols"], [170, 3, 1, "", "inputColsValidation"], [170, 3, 1, "", "isDefined"], [170, 3, 1, "", "isSet"], [170, 2, 1, "", "lazyAnnotator"], [170, 3, 1, "", "load"], [170, 3, 1, "", "loadSavedModel"], [170, 2, 1, "", "maxSentenceLength"], [170, 2, 1, "", "max_length_limit"], [170, 2, 1, "", "name"], [170, 2, 1, "", "optionalInputAnnotatorTypes"], [170, 2, 1, "", "outputAnnotatorType"], [170, 2, 1, "", "outputCol"], [170, 2, 1, "", "predictionThreshold"], [170, 3, 1, "", "pretrained"], [170, 3, 1, "", "read"], [170, 3, 1, "", "save"], [170, 3, 1, "", "set"], [170, 3, 1, "", "setBatchSize"], [170, 3, 1, "", "setCaseSensitive"], [170, 3, 1, "", "setConfigProtoBytes"], [170, 3, 1, "", "setEntityDefinitions"], [170, 3, 1, "", "setInputCols"], [170, 3, 1, "", "setLazyAnnotator"], [170, 3, 1, "", "setMaxSentenceLength"], [170, 3, 1, "", "setOutputCol"], [170, 3, 1, "", "setParamValue"], [170, 3, 1, "", "setParams"], [170, 3, 1, "", "setPredictionThreshold"], [170, 3, 1, "", "transform"], [170, 2, 1, "", "uid"], [170, 3, 1, "", "write"]], "sparknlp_jsl.functions": [[171, 5, 1, "", "profile"], [171, 5, 1, "", "profileESRDV21Y19"], [171, 5, 1, "", "profileRxHCCV05Y20"], [171, 5, 1, "", "profileRxHCCV05Y21"], [171, 5, 1, "", "profileRxHCCV05Y22"], [171, 5, 1, "", "profileRxHCCV05Y23"], [171, 5, 1, "", "profileRxHCCV08Y22"], [171, 5, 1, "", "profileRxHCCV08Y23"], [171, 5, 1, "", "profileV22"], [171, 5, 1, "", "profileV22Y17"], [171, 5, 1, "", "profileV22Y18"], [171, 5, 1, "", "profileV22Y19"], [171, 5, 1, "", "profileV22Y20"], [171, 5, 1, "", "profileV22Y21"], [171, 5, 1, "", "profileV22Y22"], [171, 5, 1, "", "profileV23"], [171, 5, 1, "", "profileV23Y18"], [171, 5, 1, "", "profileV23Y19"], [171, 5, 1, "", "profileV24"], [171, 5, 1, "", "profileV24Y19"], [171, 5, 1, "", "profileV24Y20"], [171, 5, 1, "", "profileV24Y21"], [171, 5, 1, "", "profileV24Y22"], [171, 5, 1, "", "profileV28"], [171, 5, 1, "", "profileV28Y24"]], "sparknlp_jsl.internal": [[173, 5, 1, "", "CustomLabels"], [173, 5, 1, "", "EntityWeights"], [173, 5, 1, "", "RelationalCategories"], [173, 5, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[179, 0, 0, "-", "chunk_classification"], [184, 0, 0, "-", "graph"], [189, 0, 0, "-", "sequence_classification"], [194, 0, 0, "-", "sequence_generation"], [200, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[175, 0, 0, "-", "assertion"], [178, 0, 0, "-", "deid"], [182, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[174, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[174, 1, 1, "", "AssertionDLApproach"], [174, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach": [[174, 2, 1, "", "batchSize"], [174, 2, 1, "", "blackList"], [174, 2, 1, "", "caseSensitive"], [174, 3, 1, "", "clear"], [174, 2, 1, "", "configProtoBytes"], [174, 3, 1, "", "copy"], [174, 2, 1, "", "datasetInfo"], [174, 2, 1, "", "doExceptionHandling"], [174, 2, 1, "", "dropout"], [174, 2, 1, "", "enableOutputLogs"], [174, 2, 1, "", "endCol"], [174, 2, 1, "", "engine"], [174, 2, 1, "", "epochs"], [174, 3, 1, "", "explainParam"], [174, 3, 1, "", "explainParams"], [174, 3, 1, "", "extractParamMap"], [174, 3, 1, "", "fit"], [174, 3, 1, "", "fitMultiple"], [174, 3, 1, "", "getEngine"], [174, 3, 1, "", "getInputCols"], [174, 3, 1, "", "getLazyAnnotator"], [174, 3, 1, "", "getOrDefault"], [174, 3, 1, "", "getOutputCol"], [174, 3, 1, "", "getParam"], [174, 3, 1, "", "getParamValue"], [174, 2, 1, "", "getter_attrs"], [174, 2, 1, "", "graphFile"], [174, 2, 1, "", "graphFolder"], [174, 3, 1, "", "hasDefault"], [174, 3, 1, "", "hasParam"], [174, 2, 1, "", "includeConfidence"], [174, 2, 1, "", "inputAnnotatorTypes"], [174, 2, 1, "", "inputCols"], [174, 3, 1, "", "inputColsValidation"], [174, 3, 1, "", "isDefined"], [174, 3, 1, "", "isSet"], [174, 2, 1, "", "label"], [174, 2, 1, "", "lazyAnnotator"], [174, 2, 1, "", "learningRate"], [174, 3, 1, "", "load"], [174, 2, 1, "", "maxSentLen"], [174, 2, 1, "", "optionalInputAnnotatorTypes"], [174, 2, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "outputCol"], [174, 2, 1, "", "outputLogsPath"], [174, 3, 1, "", "read"], [174, 3, 1, "", "save"], [174, 2, 1, "", "scopeWindow"], [174, 3, 1, "", "set"], [174, 3, 1, "", "setBatchSize"], [174, 3, 1, "", "setBlackList"], [174, 3, 1, "", "setCaseSensitive"], [174, 3, 1, "", "setConfigProtoBytes"], [174, 3, 1, "", "setDatasetInfo"], [174, 3, 1, "", "setDenyList"], [174, 3, 1, "", "setDoExceptionHandling"], [174, 3, 1, "", "setDropout"], [174, 3, 1, "", "setEnableOutputLogs"], [174, 3, 1, "", "setEndCol"], [174, 3, 1, "", "setEpochs"], [174, 3, 1, "", "setForceInputTypeValidation"], [174, 3, 1, "", "setGraphFile"], [174, 3, 1, "", "setGraphFolder"], [174, 3, 1, "", "setIncludeConfidence"], [174, 3, 1, "", "setInputCols"], [174, 3, 1, "", "setLabelCol"], [174, 3, 1, "", "setLazyAnnotator"], [174, 3, 1, "", "setLearningRate"], [174, 3, 1, "", "setMaxSentLen"], [174, 3, 1, "", "setOutputCol"], [174, 3, 1, "", "setOutputLogsPath"], [174, 3, 1, "", "setParamValue"], [174, 3, 1, "", "setScopeWindow"], [174, 3, 1, "", "setStartCol"], [174, 3, 1, "", "setTestDataset"], [174, 3, 1, "", "setValidationSplit"], [174, 3, 1, "", "setVerbose"], [174, 3, 1, "", "setWhiteList"], [174, 2, 1, "", "skipLPInputColsValidation"], [174, 2, 1, "", "startCol"], [174, 2, 1, "", "testDataset"], [174, 2, 1, "", "uid"], [174, 2, 1, "", "validationSplit"], [174, 2, 1, "", "verbose"], [174, 2, 1, "", "whiteList"], [174, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[174, 2, 1, "", "classes"], [174, 3, 1, "", "clear"], [174, 2, 1, "", "configProtoBytes"], [174, 3, 1, "", "copy"], [174, 2, 1, "", "datasetInfo"], [174, 2, 1, "", "entityAssertionCaseSensitive"], [174, 3, 1, "", "explainParam"], [174, 3, 1, "", "explainParams"], [174, 3, 1, "", "extractParamMap"], [174, 3, 1, "", "getEntityAssertion"], [174, 3, 1, "", "getInputCols"], [174, 3, 1, "", "getLazyAnnotator"], [174, 3, 1, "", "getOrDefault"], [174, 3, 1, "", "getOutputCol"], [174, 3, 1, "", "getParam"], [174, 3, 1, "", "getParamValue"], [174, 3, 1, "", "getReplaceLabels"], [174, 3, 1, "", "getStorageRef"], [174, 2, 1, "", "getter_attrs"], [174, 3, 1, "", "hasDefault"], [174, 3, 1, "", "hasParam"], [174, 2, 1, "", "includeConfidence"], [174, 2, 1, "", "inputAnnotatorTypes"], [174, 2, 1, "", "inputCols"], [174, 3, 1, "", "inputColsValidation"], [174, 3, 1, "", "isDefined"], [174, 3, 1, "", "isSet"], [174, 2, 1, "", "lazyAnnotator"], [174, 3, 1, "", "load"], [174, 2, 1, "", "maxSentLen"], [174, 2, 1, "", "name"], [174, 2, 1, "", "optionalInputAnnotatorTypes"], [174, 2, 1, "", "outputAnnotatorType"], [174, 2, 1, "", "outputCol"], [174, 3, 1, "", "pretrained"], [174, 3, 1, "", "read"], [174, 3, 1, "", "save"], [174, 2, 1, "", "scopeWindow"], [174, 3, 1, "", "set"], [174, 3, 1, "", "setConfigProtoBytes"], [174, 3, 1, "", "setDatasetInfo"], [174, 3, 1, "", "setEntityAssertion"], [174, 3, 1, "", "setEntityAssertionCaseSensitive"], [174, 3, 1, "", "setForceInputTypeValidation"], [174, 3, 1, "", "setIncludeConfidence"], [174, 3, 1, "", "setInputCols"], [174, 3, 1, "", "setLazyAnnotator"], [174, 3, 1, "", "setOutputCol"], [174, 3, 1, "", "setParamValue"], [174, 3, 1, "", "setParams"], [174, 3, 1, "", "setReplaceLabels"], [174, 3, 1, "", "setScopeWindow"], [174, 3, 1, "", "setStorageRef"], [174, 2, 1, "", "skipLPInputColsValidation"], [174, 2, 1, "", "storageRef"], [174, 2, 1, "", "targetNerLabels"], [174, 3, 1, "", "transform"], [174, 2, 1, "", "uid"], [174, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.deid": [[176, 0, 0, "-", "deIdentification"], [177, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[176, 1, 1, "", "DeIdentification"], [176, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[176, 2, 1, "", "additionalDateFormats"], [176, 2, 1, "", "ageRanges"], [176, 2, 1, "", "ageRangesByHipaa"], [176, 2, 1, "", "blackList"], [176, 2, 1, "", "blackListEntities"], [176, 3, 1, "", "clear"], [176, 2, 1, "", "combineRegexPatterns"], [176, 2, 1, "", "consistentAcrossNameParts"], [176, 2, 1, "", "consistentObfuscation"], [176, 3, 1, "", "copy"], [176, 2, 1, "", "countryObfuscation"], [176, 2, 1, "", "dateEntities"], [176, 2, 1, "", "dateFormats"], [176, 2, 1, "", "dateTag"], [176, 2, 1, "", "dateToYear"], [176, 2, 1, "", "days"], [176, 2, 1, "", "doExceptionHandling"], [176, 2, 1, "", "enableDefaultObfuscationEquivalents"], [176, 2, 1, "", "entityCasingModesPath"], [176, 3, 1, "", "explainParam"], [176, 3, 1, "", "explainParams"], [176, 3, 1, "", "extractParamMap"], [176, 2, 1, "", "fakerLengthOffset"], [176, 3, 1, "", "fit"], [176, 3, 1, "", "fitMultiple"], [176, 2, 1, "", "fixedMaskLength"], [176, 2, 1, "", "genderAwareness"], [176, 2, 1, "", "geoConsistency"], [176, 3, 1, "", "getChunkMatching"], [176, 3, 1, "", "getDefaultObfuscationEquivalents"], [176, 3, 1, "", "getInputCols"], [176, 3, 1, "", "getLazyAnnotator"], [176, 3, 1, "", "getOrDefault"], [176, 3, 1, "", "getOutputCol"], [176, 3, 1, "", "getParam"], [176, 3, 1, "", "getParamValue"], [176, 3, 1, "", "getSelectiveObfuscateRefSource"], [176, 3, 1, "", "getUseShiftDays"], [176, 2, 1, "", "getter_attrs"], [176, 2, 1, "", "groupByCol"], [176, 3, 1, "", "hasDefault"], [176, 3, 1, "", "hasParam"], [176, 2, 1, "", "ignoreRegex"], [176, 2, 1, "", "inputAnnotatorTypes"], [176, 2, 1, "", "inputCols"], [176, 3, 1, "", "inputColsValidation"], [176, 3, 1, "", "isDefined"], [176, 2, 1, "", "isRandomDateDisplacement"], [176, 3, 1, "", "isSet"], [176, 2, 1, "", "keepMonth"], [176, 2, 1, "", "keepTextSizeForObfuscation"], [176, 2, 1, "", "keepYear"], [176, 2, 1, "", "language"], [176, 2, 1, "", "lazyAnnotator"], [176, 3, 1, "", "load"], [176, 2, 1, "", "mappingsColumn"], [176, 2, 1, "", "maskingPolicy"], [176, 2, 1, "", "metadataMaskingPolicy"], [176, 2, 1, "", "minYear"], [176, 2, 1, "", "mode"], [176, 2, 1, "", "name"], [176, 2, 1, "", "obfuscateByAgeGroups"], [176, 2, 1, "", "obfuscateDate"], [176, 2, 1, "", "obfuscateRefFile"], [176, 2, 1, "", "obfuscateRefSource"], [176, 2, 1, "", "obfuscationEquivalentsResource"], [176, 2, 1, "", "obfuscationStrategyOnException"], [176, 2, 1, "", "optionalInputAnnotatorTypes"], [176, 2, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "outputAsDocument"], [176, 2, 1, "", "outputCol"], [176, 3, 1, "", "read"], [176, 2, 1, "", "refFileFormat"], [176, 2, 1, "", "refSep"], [176, 2, 1, "", "regexOverride"], [176, 2, 1, "", "regexPatternsDictionary"], [176, 2, 1, "", "regexPatternsDictionaryAsJsonString"], [176, 2, 1, "", "region"], [176, 2, 1, "", "returnEntityMappings"], [176, 2, 1, "", "sameEntityThreshold"], [176, 2, 1, "", "sameLengthFormattedEntities"], [176, 3, 1, "", "save"], [176, 2, 1, "", "seed"], [176, 2, 1, "", "selectiveObfuscationModesPath"], [176, 3, 1, "", "set"], [176, 3, 1, "", "setAdditionalDateFormats"], [176, 3, 1, "", "setAgeGroups"], [176, 3, 1, "", "setAgeRanges"], [176, 3, 1, "", "setAgeRangesByHipaa"], [176, 3, 1, "", "setBlackList"], [176, 3, 1, "", "setBlackListEntities"], [176, 3, 1, "", "setChunkMatching"], [176, 3, 1, "", "setCombineRegexPatterns"], [176, 3, 1, "", "setConsistentAcrossNameParts"], [176, 3, 1, "", "setConsistentObfuscation"], [176, 3, 1, "", "setCountryObfuscation"], [176, 3, 1, "", "setDateEntities"], [176, 3, 1, "", "setDateFormats"], [176, 3, 1, "", "setDateTag"], [176, 3, 1, "", "setDateToYear"], [176, 3, 1, "", "setDays"], [176, 3, 1, "", "setDoExceptionHandling"], [176, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [176, 3, 1, "", "setEntityCasingModes"], [176, 3, 1, "", "setFakerLengthOffset"], [176, 3, 1, "", "setFixedMaskLength"], [176, 3, 1, "", "setForceInputTypeValidation"], [176, 3, 1, "", "setGenderAwareness"], [176, 3, 1, "", "setGeoConsistency"], [176, 3, 1, "", "setGroupByCol"], [176, 3, 1, "", "setIgnoreRegex"], [176, 3, 1, "", "setInputCols"], [176, 3, 1, "", "setIsRandomDateDisplacement"], [176, 3, 1, "", "setKeepMonth"], [176, 3, 1, "", "setKeepTextSizeForObfuscation"], [176, 3, 1, "", "setKeepYear"], [176, 3, 1, "", "setLanguage"], [176, 3, 1, "", "setLazyAnnotator"], [176, 3, 1, "", "setMappingsColumn"], [176, 3, 1, "", "setMaskingPolicy"], [176, 3, 1, "", "setMetadataMaskingPolicy"], [176, 3, 1, "", "setMinYear"], [176, 3, 1, "", "setMode"], [176, 3, 1, "", "setObfuscateByAgeGroups"], [176, 3, 1, "", "setObfuscateDate"], [176, 3, 1, "", "setObfuscateRefFile"], [176, 3, 1, "", "setObfuscateRefSource"], [176, 3, 1, "", "setObfuscationEquivalents"], [176, 3, 1, "", "setObfuscationEquivalentsResource"], [176, 3, 1, "", "setObfuscationStrategyOnException"], [176, 3, 1, "", "setOutputAsDocument"], [176, 3, 1, "", "setOutputCol"], [176, 3, 1, "", "setParamValue"], [176, 3, 1, "", "setRefFileFormat"], [176, 3, 1, "", "setRefSep"], [176, 3, 1, "", "setRegexOverride"], [176, 3, 1, "", "setRegexPatternsDictionary"], [176, 3, 1, "", "setRegexPatternsDictionaryAsJsonString"], [176, 3, 1, "", "setRegion"], [176, 3, 1, "", "setReturnEntityMappings"], [176, 3, 1, "", "setSameEntityThreshold"], [176, 3, 1, "", "setSameLengthFormattedEntities"], [176, 3, 1, "", "setSeed"], [176, 3, 1, "", "setSelectiveObfuscateRefSource"], [176, 3, 1, "", "setSelectiveObfuscationModes"], [176, 3, 1, "", "setStaticObfuscationPairs"], [176, 3, 1, "", "setStaticObfuscationPairsResource"], [176, 3, 1, "", "setUnnormalizedDateMode"], [176, 3, 1, "", "setUseShifDays"], [176, 3, 1, "", "setUseShiftDays"], [176, 3, 1, "", "setZipCodeTag"], [176, 2, 1, "", "skipLPInputColsValidation"], [176, 2, 1, "", "staticObfuscationPairsResource"], [176, 2, 1, "", "uid"], [176, 2, 1, "", "unnormalizedDateMode"], [176, 2, 1, "", "useShifDays"], [176, 2, 1, "", "useShiftDays"], [176, 3, 1, "", "write"], [176, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[176, 2, 1, "", "additionalDateFormats"], [176, 2, 1, "", "ageRanges"], [176, 2, 1, "", "ageRangesByHipaa"], [176, 2, 1, "", "blackList"], [176, 2, 1, "", "blackListEntities"], [176, 3, 1, "", "clear"], [176, 2, 1, "", "consistentAcrossNameParts"], [176, 2, 1, "", "consistentObfuscation"], [176, 3, 1, "", "copy"], [176, 2, 1, "", "countryObfuscation"], [176, 2, 1, "", "dateEntities"], [176, 2, 1, "", "dateFormats"], [176, 2, 1, "", "dateTag"], [176, 2, 1, "", "dateToYear"], [176, 2, 1, "", "days"], [176, 2, 1, "", "enableDefaultObfuscationEquivalents"], [176, 3, 1, "", "explainParam"], [176, 3, 1, "", "explainParams"], [176, 3, 1, "", "extractParamMap"], [176, 2, 1, "", "fakerLengthOffset"], [176, 2, 1, "", "fixedMaskLength"], [176, 2, 1, "", "genderAwareness"], [176, 2, 1, "", "geoConsistency"], [176, 3, 1, "", "getChunkMatching"], [176, 3, 1, "", "getDefaultObfuscationEquivalents"], [176, 3, 1, "", "getInputCols"], [176, 3, 1, "", "getLazyAnnotator"], [176, 3, 1, "", "getOrDefault"], [176, 3, 1, "", "getOutputCol"], [176, 3, 1, "", "getParam"], [176, 3, 1, "", "getParamValue"], [176, 3, 1, "", "getRegexEntities"], [176, 3, 1, "", "getSelectiveObfuscateRefSource"], [176, 3, 1, "", "getUseShiftDays"], [176, 2, 1, "", "getter_attrs"], [176, 2, 1, "", "groupByCol"], [176, 3, 1, "", "hasDefault"], [176, 3, 1, "", "hasParam"], [176, 2, 1, "", "ignoreRegex"], [176, 2, 1, "", "inputAnnotatorTypes"], [176, 2, 1, "", "inputCols"], [176, 3, 1, "", "inputColsValidation"], [176, 3, 1, "", "isDefined"], [176, 2, 1, "", "isRandomDateDisplacement"], [176, 3, 1, "", "isSet"], [176, 2, 1, "", "keepMonth"], [176, 2, 1, "", "keepTextSizeForObfuscation"], [176, 2, 1, "", "keepYear"], [176, 2, 1, "", "language"], [176, 2, 1, "", "lazyAnnotator"], [176, 3, 1, "", "load"], [176, 2, 1, "", "mappingsColumn"], [176, 2, 1, "", "maskingPolicy"], [176, 2, 1, "", "metadataMaskingPolicy"], [176, 2, 1, "", "minYear"], [176, 2, 1, "", "mode"], [176, 2, 1, "", "name"], [176, 2, 1, "", "obfuscateByAgeGroups"], [176, 2, 1, "", "obfuscateDate"], [176, 2, 1, "", "obfuscateRefSource"], [176, 2, 1, "", "obfuscationStrategyOnException"], [176, 2, 1, "", "optionalInputAnnotatorTypes"], [176, 2, 1, "", "outputAnnotatorType"], [176, 2, 1, "", "outputAsDocument"], [176, 2, 1, "", "outputCol"], [176, 3, 1, "", "pretrained"], [176, 3, 1, "", "read"], [176, 2, 1, "", "regexEntities"], [176, 2, 1, "", "regexOverride"], [176, 2, 1, "", "region"], [176, 2, 1, "", "returnEntityMappings"], [176, 2, 1, "", "sameEntityThreshold"], [176, 2, 1, "", "sameLengthFormattedEntities"], [176, 3, 1, "", "save"], [176, 2, 1, "", "seed"], [176, 3, 1, "", "set"], [176, 3, 1, "", "setAdditionalDateFormats"], [176, 3, 1, "", "setAgeGroups"], [176, 3, 1, "", "setAgeRanges"], [176, 3, 1, "", "setAgeRangesByHipaa"], [176, 3, 1, "", "setBlackList"], [176, 3, 1, "", "setBlackListEntities"], [176, 3, 1, "", "setChunkMatching"], [176, 3, 1, "", "setConsistentAcrossNameParts"], [176, 3, 1, "", "setConsistentObfuscation"], [176, 3, 1, "", "setCountryObfuscation"], [176, 3, 1, "", "setDateEntities"], [176, 3, 1, "", "setDateFormats"], [176, 3, 1, "", "setDateTag"], [176, 3, 1, "", "setDateToYear"], [176, 3, 1, "", "setDays"], [176, 3, 1, "", "setEnableDefaultObfuscationEquivalents"], [176, 3, 1, "", "setFakerLengthOffset"], [176, 3, 1, "", "setFixedMaskLength"], [176, 3, 1, "", "setForceInputTypeValidation"], [176, 3, 1, "", "setGenderAwareness"], [176, 3, 1, "", "setGeoConsistency"], [176, 3, 1, "", "setGroupByCol"], [176, 3, 1, "", "setIgnoreRegex"], [176, 3, 1, "", "setInputCols"], [176, 3, 1, "", "setIsRandomDateDisplacement"], [176, 3, 1, "", "setKeepMonth"], [176, 3, 1, "", "setKeepTextSizeForObfuscation"], [176, 3, 1, "", "setKeepYear"], [176, 3, 1, "", "setLanguage"], [176, 3, 1, "", "setLazyAnnotator"], [176, 3, 1, "", "setMappingsColumn"], [176, 3, 1, "", "setMaskingPolicy"], [176, 3, 1, "", "setMetadataMaskingPolicy"], [176, 3, 1, "", "setMinYear"], [176, 3, 1, "", "setMode"], [176, 3, 1, "", "setObfuscateByAgeGroups"], [176, 3, 1, "", "setObfuscateDate"], [176, 3, 1, "", "setObfuscateRefSource"], [176, 3, 1, "", "setObfuscationEquivalents"], [176, 3, 1, "", "setObfuscationStrategyOnException"], [176, 3, 1, "", "setOutputAsDocument"], [176, 3, 1, "", "setOutputCol"], [176, 3, 1, "", "setParamValue"], [176, 3, 1, "", "setParams"], [176, 3, 1, "", "setRegexOverride"], [176, 3, 1, "", "setRegion"], [176, 3, 1, "", "setReturnEntityMappings"], [176, 3, 1, "", "setSameEntityThreshold"], [176, 3, 1, "", "setSameLengthFormattedEntities"], [176, 3, 1, "", "setSeed"], [176, 3, 1, "", "setSelectiveObfuscateRefSource"], [176, 3, 1, "", "setSelectiveObfuscationModes"], [176, 3, 1, "", "setStaticObfuscationPairs"], [176, 3, 1, "", "setUnnormalizedDateMode"], [176, 3, 1, "", "setUseShifDays"], [176, 3, 1, "", "setUseShiftDays"], [176, 3, 1, "", "setZipCodeTag"], [176, 2, 1, "", "skipLPInputColsValidation"], [176, 3, 1, "", "transform"], [176, 2, 1, "", "uid"], [176, 2, 1, "", "unnormalizedDateMode"], [176, 2, 1, "", "useShifDays"], [176, 2, 1, "", "useShiftDays"], [176, 3, 1, "", "write"], [176, 2, 1, "", "zipCodeTag"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[177, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[177, 3, 1, "", "clear"], [177, 3, 1, "", "copy"], [177, 2, 1, "", "dateShiftColumn"], [177, 3, 1, "", "explainParam"], [177, 3, 1, "", "explainParams"], [177, 3, 1, "", "extractParamMap"], [177, 3, 1, "", "getInputCols"], [177, 3, 1, "", "getLazyAnnotator"], [177, 3, 1, "", "getOrDefault"], [177, 3, 1, "", "getOutputCol"], [177, 3, 1, "", "getParam"], [177, 3, 1, "", "getParamValue"], [177, 2, 1, "", "getter_attrs"], [177, 3, 1, "", "hasDefault"], [177, 3, 1, "", "hasParam"], [177, 2, 1, "", "inputAnnotatorTypes"], [177, 2, 1, "", "inputCols"], [177, 3, 1, "", "inputColsValidation"], [177, 3, 1, "", "isDefined"], [177, 3, 1, "", "isSet"], [177, 2, 1, "", "lazyAnnotator"], [177, 3, 1, "", "load"], [177, 2, 1, "", "name"], [177, 2, 1, "", "newDateShift"], [177, 2, 1, "", "optionalInputAnnotatorTypes"], [177, 2, 1, "", "outputAnnotatorType"], [177, 2, 1, "", "outputCol"], [177, 2, 1, "", "patientIdColumn"], [177, 2, 1, "", "rangeDays"], [177, 3, 1, "", "read"], [177, 3, 1, "", "save"], [177, 2, 1, "", "seed"], [177, 3, 1, "", "set"], [177, 3, 1, "", "setDateShiftColumn"], [177, 3, 1, "", "setIdColumn"], [177, 3, 1, "", "setInputCols"], [177, 3, 1, "", "setLazyAnnotator"], [177, 3, 1, "", "setNewDateShift"], [177, 3, 1, "", "setOutputCol"], [177, 3, 1, "", "setParamValue"], [177, 3, 1, "", "setParams"], [177, 3, 1, "", "setPatientIdColumn"], [177, 3, 1, "", "setRangeDays"], [177, 3, 1, "", "setSeed"], [177, 3, 1, "", "transform"], [177, 2, 1, "", "uid"], [177, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[180, 0, 0, "-", "chunkmapper"], [181, 0, 0, "-", "docmapper"], [183, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[180, 1, 1, "", "ChunkMapperApproach"], [180, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[180, 2, 1, "", "allowMultiTokenChunk"], [180, 3, 1, "", "clear"], [180, 3, 1, "", "copy"], [180, 2, 1, "", "dictionary"], [180, 2, 1, "", "doExceptionHandling"], [180, 2, 1, "", "enableCharFingerprintMatching"], [180, 2, 1, "", "enableFuzzyMatching"], [180, 2, 1, "", "enableTokenFingerprintMatching"], [180, 3, 1, "", "explainParam"], [180, 3, 1, "", "explainParams"], [180, 3, 1, "", "extractParamMap"], [180, 3, 1, "", "fit"], [180, 3, 1, "", "fitMultiple"], [180, 2, 1, "", "fuzzyDistanceScalingMode"], [180, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [180, 2, 1, "", "fuzzyMatchingDistances"], [180, 3, 1, "", "getInputCols"], [180, 3, 1, "", "getLazyAnnotator"], [180, 3, 1, "", "getOrDefault"], [180, 3, 1, "", "getOutputCol"], [180, 3, 1, "", "getParam"], [180, 3, 1, "", "getParamValue"], [180, 2, 1, "", "getter_attrs"], [180, 3, 1, "", "hasDefault"], [180, 3, 1, "", "hasParam"], [180, 2, 1, "", "inputAnnotatorTypes"], [180, 2, 1, "", "inputCols"], [180, 3, 1, "", "inputColsValidation"], [180, 3, 1, "", "isDefined"], [180, 3, 1, "", "isSet"], [180, 2, 1, "", "lazyAnnotator"], [180, 3, 1, "", "load"], [180, 2, 1, "", "lowerCase"], [180, 2, 1, "", "maxCharNgramFingerprint"], [180, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [180, 2, 1, "", "maxTokenNgramDroppingOperator"], [180, 2, 1, "", "maxTokenNgramDroppingTokens"], [180, 2, 1, "", "maxTokenNgramFingerprint"], [180, 2, 1, "", "minCharNgramFingerprint"], [180, 2, 1, "", "minTokenNgramFingerprint"], [180, 2, 1, "", "multivaluesRelations"], [180, 2, 1, "", "name"], [180, 2, 1, "", "optionalInputAnnotatorTypes"], [180, 2, 1, "", "outputAnnotatorType"], [180, 2, 1, "", "outputCol"], [180, 3, 1, "", "read"], [180, 2, 1, "", "rel"], [180, 2, 1, "", "rels"], [180, 3, 1, "", "save"], [180, 3, 1, "", "set"], [180, 3, 1, "", "setAllowMultiTokenChunk"], [180, 3, 1, "", "setDictionary"], [180, 3, 1, "", "setDoExceptionHandling"], [180, 3, 1, "", "setEnableCharFingerprintMatching"], [180, 3, 1, "", "setEnableFuzzyMatching"], [180, 3, 1, "", "setEnableTokenFingerprintMatching"], [180, 3, 1, "", "setForceInputTypeValidation"], [180, 3, 1, "", "setFuzzyDistanceScalingMode"], [180, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [180, 3, 1, "", "setFuzzyMatchingDistances"], [180, 3, 1, "", "setInputCols"], [180, 3, 1, "", "setLazyAnnotator"], [180, 3, 1, "", "setLowerCase"], [180, 3, 1, "", "setMaxCharNgramFingerprint"], [180, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [180, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [180, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [180, 3, 1, "", "setMaxTokenNgramFingerprint"], [180, 3, 1, "", "setMinCharNgramFingerprint"], [180, 3, 1, "", "setMinTokenNgramFingerprint"], [180, 3, 1, "", "setMultivaluesRelations"], [180, 3, 1, "", "setOutputCol"], [180, 3, 1, "", "setParamValue"], [180, 3, 1, "", "setRel"], [180, 3, 1, "", "setRels"], [180, 2, 1, "", "skipLPInputColsValidation"], [180, 2, 1, "", "uid"], [180, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[180, 2, 1, "", "allowMultiTokenChunk"], [180, 3, 1, "", "clear"], [180, 3, 1, "", "copy"], [180, 2, 1, "", "doExceptionHandling"], [180, 3, 1, "", "explainParam"], [180, 3, 1, "", "explainParams"], [180, 3, 1, "", "extractParamMap"], [180, 3, 1, "", "getInputCols"], [180, 3, 1, "", "getLazyAnnotator"], [180, 3, 1, "", "getOrDefault"], [180, 3, 1, "", "getOutputCol"], [180, 3, 1, "", "getParam"], [180, 3, 1, "", "getParamValue"], [180, 2, 1, "", "getter_attrs"], [180, 3, 1, "", "hasDefault"], [180, 3, 1, "", "hasParam"], [180, 2, 1, "", "inputAnnotatorTypes"], [180, 2, 1, "", "inputCols"], [180, 3, 1, "", "inputColsValidation"], [180, 3, 1, "", "isDefined"], [180, 3, 1, "", "isSet"], [180, 2, 1, "", "lazyAnnotator"], [180, 3, 1, "", "load"], [180, 2, 1, "", "lowerCase"], [180, 2, 1, "", "multivaluesRelations"], [180, 2, 1, "", "name"], [180, 2, 1, "", "optionalInputAnnotatorTypes"], [180, 2, 1, "", "outputAnnotatorType"], [180, 2, 1, "", "outputCol"], [180, 3, 1, "", "pretrained"], [180, 3, 1, "", "read"], [180, 2, 1, "", "rel"], [180, 2, 1, "", "rels"], [180, 3, 1, "", "save"], [180, 3, 1, "", "set"], [180, 3, 1, "", "setAllowMultiTokenChunk"], [180, 3, 1, "", "setDoExceptionHandling"], [180, 3, 1, "", "setForceInputTypeValidation"], [180, 3, 1, "", "setInputCols"], [180, 3, 1, "", "setLazyAnnotator"], [180, 3, 1, "", "setLowerCase"], [180, 3, 1, "", "setMultivaluesRelations"], [180, 3, 1, "", "setOutputCol"], [180, 3, 1, "", "setParamValue"], [180, 3, 1, "", "setParams"], [180, 3, 1, "", "setRel"], [180, 3, 1, "", "setRels"], [180, 2, 1, "", "skipLPInputColsValidation"], [180, 3, 1, "", "transform"], [180, 2, 1, "", "uid"], [180, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[181, 1, 1, "", "DocMapperApproach"], [181, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[181, 2, 1, "", "allowMultiTokenChunk"], [181, 3, 1, "", "clear"], [181, 3, 1, "", "copy"], [181, 2, 1, "", "dictionary"], [181, 2, 1, "", "doExceptionHandling"], [181, 2, 1, "", "enableCharFingerprintMatching"], [181, 2, 1, "", "enableFuzzyMatching"], [181, 2, 1, "", "enableTokenFingerprintMatching"], [181, 3, 1, "", "explainParam"], [181, 3, 1, "", "explainParams"], [181, 3, 1, "", "extractParamMap"], [181, 3, 1, "", "fit"], [181, 3, 1, "", "fitMultiple"], [181, 2, 1, "", "fuzzyDistanceScalingMode"], [181, 2, 1, "", "fuzzyMatchingDistanceThresholds"], [181, 2, 1, "", "fuzzyMatchingDistances"], [181, 3, 1, "", "getInputCols"], [181, 3, 1, "", "getLazyAnnotator"], [181, 3, 1, "", "getOrDefault"], [181, 3, 1, "", "getOutputCol"], [181, 3, 1, "", "getParam"], [181, 3, 1, "", "getParamValue"], [181, 2, 1, "", "getter_attrs"], [181, 3, 1, "", "hasDefault"], [181, 3, 1, "", "hasParam"], [181, 2, 1, "", "inputAnnotatorTypes"], [181, 2, 1, "", "inputCols"], [181, 3, 1, "", "inputColsValidation"], [181, 3, 1, "", "isDefined"], [181, 3, 1, "", "isSet"], [181, 2, 1, "", "lazyAnnotator"], [181, 3, 1, "", "load"], [181, 2, 1, "", "lowerCase"], [181, 2, 1, "", "maxCharNgramFingerprint"], [181, 2, 1, "", "maxTokenNgramDroppingCharsRatio"], [181, 2, 1, "", "maxTokenNgramDroppingOperator"], [181, 2, 1, "", "maxTokenNgramDroppingTokens"], [181, 2, 1, "", "maxTokenNgramFingerprint"], [181, 2, 1, "", "minCharNgramFingerprint"], [181, 2, 1, "", "minTokenNgramFingerprint"], [181, 2, 1, "", "multivaluesRelations"], [181, 2, 1, "", "name"], [181, 2, 1, "", "optionalInputAnnotatorTypes"], [181, 2, 1, "", "outputAnnotatorType"], [181, 2, 1, "", "outputCol"], [181, 3, 1, "", "read"], [181, 2, 1, "", "rel"], [181, 2, 1, "", "rels"], [181, 3, 1, "", "save"], [181, 3, 1, "", "set"], [181, 3, 1, "", "setAllowMultiTokenChunk"], [181, 3, 1, "", "setDictionary"], [181, 3, 1, "", "setDoExceptionHandling"], [181, 3, 1, "", "setEnableCharFingerprintMatching"], [181, 3, 1, "", "setEnableFuzzyMatching"], [181, 3, 1, "", "setEnableTokenFingerprintMatching"], [181, 3, 1, "", "setForceInputTypeValidation"], [181, 3, 1, "", "setFuzzyDistanceScalingMode"], [181, 3, 1, "", "setFuzzyMatchingDistanceThresholds"], [181, 3, 1, "", "setFuzzyMatchingDistances"], [181, 3, 1, "", "setInputCols"], [181, 3, 1, "", "setLazyAnnotator"], [181, 3, 1, "", "setLowerCase"], [181, 3, 1, "", "setMaxCharNgramFingerprint"], [181, 3, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [181, 3, 1, "", "setMaxTokenNgramDroppingOperator"], [181, 3, 1, "", "setMaxTokenNgramDroppingTokens"], [181, 3, 1, "", "setMaxTokenNgramFingerprint"], [181, 3, 1, "", "setMinCharNgramFingerprint"], [181, 3, 1, "", "setMinTokenNgramFingerprint"], [181, 3, 1, "", "setMultivaluesRelations"], [181, 3, 1, "", "setOutputCol"], [181, 3, 1, "", "setParamValue"], [181, 3, 1, "", "setRel"], [181, 3, 1, "", "setRels"], [181, 2, 1, "", "skipLPInputColsValidation"], [181, 2, 1, "", "uid"], [181, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[181, 2, 1, "", "allowMultiTokenChunk"], [181, 3, 1, "", "clear"], [181, 3, 1, "", "copy"], [181, 2, 1, "", "doExceptionHandling"], [181, 3, 1, "", "explainParam"], [181, 3, 1, "", "explainParams"], [181, 3, 1, "", "extractParamMap"], [181, 3, 1, "", "getInputCols"], [181, 3, 1, "", "getLazyAnnotator"], [181, 3, 1, "", "getOrDefault"], [181, 3, 1, "", "getOutputCol"], [181, 3, 1, "", "getParam"], [181, 3, 1, "", "getParamValue"], [181, 2, 1, "", "getter_attrs"], [181, 3, 1, "", "hasDefault"], [181, 3, 1, "", "hasParam"], [181, 2, 1, "", "inputAnnotatorTypes"], [181, 2, 1, "", "inputCols"], [181, 3, 1, "", "inputColsValidation"], [181, 3, 1, "", "isDefined"], [181, 3, 1, "", "isSet"], [181, 2, 1, "", "lazyAnnotator"], [181, 3, 1, "", "load"], [181, 2, 1, "", "lowerCase"], [181, 2, 1, "", "multivaluesRelations"], [181, 2, 1, "", "name"], [181, 2, 1, "", "optionalInputAnnotatorTypes"], [181, 2, 1, "", "outputAnnotatorType"], [181, 2, 1, "", "outputCol"], [181, 3, 1, "", "pretrained"], [181, 3, 1, "", "read"], [181, 2, 1, "", "rel"], [181, 2, 1, "", "rels"], [181, 3, 1, "", "save"], [181, 3, 1, "", "set"], [181, 3, 1, "", "setAllowMultiTokenChunk"], [181, 3, 1, "", "setDoExceptionHandling"], [181, 3, 1, "", "setForceInputTypeValidation"], [181, 3, 1, "", "setInputCols"], [181, 3, 1, "", "setLazyAnnotator"], [181, 3, 1, "", "setLowerCase"], [181, 3, 1, "", "setMultivaluesRelations"], [181, 3, 1, "", "setOutputCol"], [181, 3, 1, "", "setParamValue"], [181, 3, 1, "", "setParams"], [181, 3, 1, "", "setRel"], [181, 3, 1, "", "setRels"], [181, 2, 1, "", "skipLPInputColsValidation"], [181, 3, 1, "", "transform"], [181, 2, 1, "", "uid"], [181, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[183, 1, 1, "", "SentenceEntityResolverApproach"], [183, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[183, 2, 1, "", "aux_label_col"], [183, 2, 1, "", "caseSensitive"], [183, 3, 1, "", "clear"], [183, 2, 1, "", "confidenceFunction"], [183, 3, 1, "", "copy"], [183, 2, 1, "", "datasetInfo"], [183, 2, 1, "", "distanceFunction"], [183, 2, 1, "", "doExceptionHandling"], [183, 2, 1, "", "dropCodesList"], [183, 2, 1, "", "engine"], [183, 3, 1, "", "explainParam"], [183, 3, 1, "", "explainParams"], [183, 3, 1, "", "extractParamMap"], [183, 3, 1, "", "fit"], [183, 3, 1, "", "fitMultiple"], [183, 3, 1, "", "getCaseSensitive"], [183, 3, 1, "", "getEngine"], [183, 3, 1, "", "getInputCols"], [183, 3, 1, "", "getLazyAnnotator"], [183, 3, 1, "", "getOrDefault"], [183, 3, 1, "", "getOutputCol"], [183, 3, 1, "", "getParam"], [183, 3, 1, "", "getParamValue"], [183, 2, 1, "", "getter_attrs"], [183, 3, 1, "", "hasDefault"], [183, 3, 1, "", "hasParam"], [183, 2, 1, "", "inputAnnotatorTypes"], [183, 2, 1, "", "inputCols"], [183, 3, 1, "", "inputColsValidation"], [183, 3, 1, "", "isDefined"], [183, 3, 1, "", "isSet"], [183, 2, 1, "", "labelCol"], [183, 2, 1, "", "lazyAnnotator"], [183, 3, 1, "", "load"], [183, 2, 1, "", "missAsEmpty"], [183, 2, 1, "", "neighbours"], [183, 2, 1, "", "normalizedCol"], [183, 2, 1, "", "optionalInputAnnotatorTypes"], [183, 2, 1, "", "outputAnnotatorType"], [183, 2, 1, "", "outputCol"], [183, 2, 1, "", "overrideExistingCodes"], [183, 2, 1, "", "pretrainedModelPath"], [183, 3, 1, "", "read"], [183, 2, 1, "", "returnCosineDistances"], [183, 2, 1, "", "returnResolvedTextEmbeddings"], [183, 3, 1, "", "save"], [183, 3, 1, "", "set"], [183, 3, 1, "", "setAuxLabelCol"], [183, 3, 1, "", "setCaseSensitive"], [183, 3, 1, "", "setConfidenceFunction"], [183, 3, 1, "", "setDatasetInfo"], [183, 3, 1, "", "setDistanceFunction"], [183, 3, 1, "", "setDoExceptionHandling"], [183, 3, 1, "", "setDropCodesList"], [183, 3, 1, "", "setExtractCosineDistances"], [183, 3, 1, "", "setForceInputTypeValidation"], [183, 3, 1, "", "setInputCols"], [183, 3, 1, "", "setLabelCol"], [183, 3, 1, "", "setLazyAnnotator"], [183, 3, 1, "", "setMissAsEmpty"], [183, 3, 1, "", "setNeighbours"], [183, 3, 1, "", "setNormalizedCol"], [183, 3, 1, "", "setOutputCol"], [183, 3, 1, "", "setOverrideExistingCodes"], [183, 3, 1, "", "setParamValue"], [183, 3, 1, "", "setPretrainedModelPath"], [183, 3, 1, "", "setReturnResolvedTextEmbeddings"], [183, 3, 1, "", "setThreshold"], [183, 3, 1, "", "setUseAuxLabel"], [183, 2, 1, "", "skipLPInputColsValidation"], [183, 2, 1, "", "threshold"], [183, 2, 1, "", "uid"], [183, 2, 1, "", "useAuxLabel"], [183, 3, 1, "", "write"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[183, 3, 1, "", "clear"], [183, 3, 1, "", "copy"], [183, 2, 1, "", "dimension"], [183, 3, 1, "", "explainParam"], [183, 3, 1, "", "explainParams"], [183, 3, 1, "", "extractParamMap"], [183, 3, 1, "", "getDimension"], [183, 3, 1, "", "getInputCols"], [183, 3, 1, "", "getLazyAnnotator"], [183, 3, 1, "", "getOrDefault"], [183, 3, 1, "", "getOutputCol"], [183, 3, 1, "", "getParam"], [183, 3, 1, "", "getParamValue"], [183, 2, 1, "", "getter_attrs"], [183, 3, 1, "", "hasDefault"], [183, 3, 1, "", "hasParam"], [183, 2, 1, "", "inputAnnotatorTypes"], [183, 2, 1, "", "inputCols"], [183, 3, 1, "", "inputColsValidation"], [183, 3, 1, "", "isDefined"], [183, 3, 1, "", "isSet"], [183, 2, 1, "", "lazyAnnotator"], [183, 3, 1, "", "load"], [183, 2, 1, "", "name"], [183, 2, 1, "", "optionalInputAnnotatorTypes"], [183, 2, 1, "", "outputAnnotatorType"], [183, 2, 1, "", "outputCol"], [183, 3, 1, "", "pretrained"], [183, 3, 1, "", "read"], [183, 2, 1, "", "returnCosineDistances"], [183, 3, 1, "", "save"], [183, 2, 1, "", "searchTree"], [183, 3, 1, "", "set"], [183, 3, 1, "", "setDimension"], [183, 3, 1, "", "setForceInputTypeValidation"], [183, 3, 1, "", "setInputCols"], [183, 3, 1, "", "setLazyAnnotator"], [183, 3, 1, "", "setOutputCol"], [183, 3, 1, "", "setParamValue"], [183, 3, 1, "", "setParams"], [183, 3, 1, "", "setSearchTree"], [183, 3, 1, "", "setUseAuxLabel"], [183, 2, 1, "", "skipLPInputColsValidation"], [183, 3, 1, "", "transform"], [183, 2, 1, "", "uid"], [183, 2, 1, "", "useAuxLabel"], [183, 3, 1, "", "write"]], "sparknlp_jsl.legal.graph": [[185, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[186, 0, 0, "-", "relation_extraction_dl"], [187, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[186, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[186, 2, 1, "", "batchSize"], [186, 2, 1, "", "classes"], [186, 3, 1, "", "clear"], [186, 3, 1, "", "copy"], [186, 2, 1, "", "customLabels"], [186, 2, 1, "", "doExceptionHandling"], [186, 3, 1, "", "explainParam"], [186, 3, 1, "", "explainParams"], [186, 3, 1, "", "extractParamMap"], [186, 3, 1, "", "getClasses"], [186, 3, 1, "", "getInputCols"], [186, 3, 1, "", "getLazyAnnotator"], [186, 3, 1, "", "getOrDefault"], [186, 3, 1, "", "getOutputCol"], [186, 3, 1, "", "getParam"], [186, 3, 1, "", "getParamValue"], [186, 3, 1, "", "getRelationTypePerPair"], [186, 2, 1, "", "getter_attrs"], [186, 3, 1, "", "hasDefault"], [186, 3, 1, "", "hasParam"], [186, 2, 1, "", "inputAnnotatorTypes"], [186, 2, 1, "", "inputCols"], [186, 3, 1, "", "inputColsValidation"], [186, 3, 1, "", "isDefined"], [186, 3, 1, "", "isSet"], [186, 2, 1, "", "lazyAnnotator"], [186, 3, 1, "", "load"], [186, 3, 1, "", "loadSavedModel"], [186, 2, 1, "", "name"], [186, 2, 1, "", "optionalInputAnnotatorTypes"], [186, 2, 1, "", "outputAnnotatorType"], [186, 2, 1, "", "outputCol"], [186, 2, 1, "", "predictionThreshold"], [186, 3, 1, "", "pretrained"], [186, 3, 1, "", "read"], [186, 2, 1, "", "relationPairsCaseSensitive"], [186, 3, 1, "", "save"], [186, 3, 1, "", "set"], [186, 3, 1, "", "setBatchSize"], [186, 3, 1, "", "setCaseSensitive"], [186, 3, 1, "", "setCustomLabels"], [186, 3, 1, "", "setDoExceptionHandling"], [186, 3, 1, "", "setForceInputTypeValidation"], [186, 3, 1, "", "setInputCols"], [186, 3, 1, "", "setLazyAnnotator"], [186, 3, 1, "", "setOutputCol"], [186, 3, 1, "", "setParamValue"], [186, 3, 1, "", "setParams"], [186, 3, 1, "", "setPredictionThreshold"], [186, 3, 1, "", "setRelationPairsCaseSensitive"], [186, 3, 1, "", "setRelationTypePerPair"], [186, 2, 1, "", "skipLPInputColsValidation"], [186, 3, 1, "", "transform"], [186, 2, 1, "", "uid"], [186, 3, 1, "", "write"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[187, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[187, 2, 1, "", "caseSensitive"], [187, 3, 1, "", "clear"], [187, 2, 1, "", "coalesceSentences"], [187, 2, 1, "", "configProtoBytes"], [187, 3, 1, "", "copy"], [187, 3, 1, "", "explainParam"], [187, 3, 1, "", "explainParams"], [187, 3, 1, "", "extractParamMap"], [187, 3, 1, "", "getCaseSensitive"], [187, 3, 1, "", "getClasses"], [187, 3, 1, "", "getInputCols"], [187, 3, 1, "", "getLazyAnnotator"], [187, 3, 1, "", "getOrDefault"], [187, 3, 1, "", "getOutputCol"], [187, 3, 1, "", "getParam"], [187, 3, 1, "", "getParamValue"], [187, 2, 1, "", "getter_attrs"], [187, 3, 1, "", "hasDefault"], [187, 3, 1, "", "hasParam"], [187, 2, 1, "", "inputAnnotatorTypes"], [187, 2, 1, "", "inputCols"], [187, 3, 1, "", "inputColsValidation"], [187, 3, 1, "", "isDefined"], [187, 3, 1, "", "isSet"], [187, 2, 1, "", "lazyAnnotator"], [187, 3, 1, "", "load"], [187, 3, 1, "", "loadSavedModel"], [187, 3, 1, "", "loadSavedModelOpenSource"], [187, 2, 1, "", "maxSentenceLength"], [187, 2, 1, "", "multiLabel"], [187, 2, 1, "", "name"], [187, 2, 1, "", "negativeRelationships"], [187, 2, 1, "", "optionalInputAnnotatorTypes"], [187, 2, 1, "", "outputAnnotatorType"], [187, 2, 1, "", "outputCol"], [187, 2, 1, "", "predictionThreshold"], [187, 3, 1, "", "pretrained"], [187, 3, 1, "", "read"], [187, 3, 1, "", "save"], [187, 3, 1, "", "set"], [187, 3, 1, "", "setCaseSensitive"], [187, 3, 1, "", "setCoalesceSentences"], [187, 3, 1, "", "setConfigProtoBytes"], [187, 3, 1, "", "setForceInputTypeValidation"], [187, 3, 1, "", "setInputCols"], [187, 3, 1, "", "setLazyAnnotator"], [187, 3, 1, "", "setMaxSentenceLength"], [187, 3, 1, "", "setNegativeRelationships"], [187, 3, 1, "", "setOutputCol"], [187, 3, 1, "", "setParamValue"], [187, 3, 1, "", "setParams"], [187, 3, 1, "", "setRelationalCategories"], [187, 2, 1, "", "skipLPInputColsValidation"], [187, 3, 1, "", "transform"], [187, 2, 1, "", "uid"], [187, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification": [[190, 0, 0, "-", "legal_bert_for_sequence_classification"], [191, 0, 0, "-", "legal_classifier_dl"], [192, 0, 0, "-", "legal_document_ml_classifier"], [193, 0, 0, "-", "legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[190, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[190, 2, 1, "", "caseSensitive"], [190, 3, 1, "", "clear"], [190, 2, 1, "", "coalesceSentences"], [190, 2, 1, "", "configProtoBytes"], [190, 3, 1, "", "copy"], [190, 3, 1, "", "explainParam"], [190, 3, 1, "", "explainParams"], [190, 3, 1, "", "extractParamMap"], [190, 3, 1, "", "getCaseSensitive"], [190, 3, 1, "", "getClasses"], [190, 3, 1, "", "getInputCols"], [190, 3, 1, "", "getLazyAnnotator"], [190, 3, 1, "", "getOrDefault"], [190, 3, 1, "", "getOutputCol"], [190, 3, 1, "", "getParam"], [190, 3, 1, "", "getParamValue"], [190, 2, 1, "", "getter_attrs"], [190, 3, 1, "", "hasDefault"], [190, 3, 1, "", "hasParam"], [190, 2, 1, "", "inputAnnotatorTypes"], [190, 2, 1, "", "inputCols"], [190, 3, 1, "", "inputColsValidation"], [190, 3, 1, "", "isDefined"], [190, 3, 1, "", "isSet"], [190, 2, 1, "", "lazyAnnotator"], [190, 3, 1, "", "load"], [190, 3, 1, "", "loadSavedModel"], [190, 3, 1, "", "loadSavedModelOpenSource"], [190, 2, 1, "", "maxSentenceLength"], [190, 2, 1, "", "name"], [190, 2, 1, "", "optionalInputAnnotatorTypes"], [190, 2, 1, "", "outputAnnotatorType"], [190, 2, 1, "", "outputCol"], [190, 3, 1, "", "pretrained"], [190, 3, 1, "", "read"], [190, 3, 1, "", "save"], [190, 3, 1, "", "set"], [190, 3, 1, "", "setCaseSensitive"], [190, 3, 1, "", "setCoalesceSentences"], [190, 3, 1, "", "setConfigProtoBytes"], [190, 3, 1, "", "setForceInputTypeValidation"], [190, 3, 1, "", "setInputCols"], [190, 3, 1, "", "setLazyAnnotator"], [190, 3, 1, "", "setMaxSentenceLength"], [190, 3, 1, "", "setOutputCol"], [190, 3, 1, "", "setParamValue"], [190, 3, 1, "", "setParams"], [190, 2, 1, "", "skipLPInputColsValidation"], [190, 3, 1, "", "transform"], [190, 2, 1, "", "uid"], [190, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[191, 1, 1, "", "LegalClassifierDLApproach"], [191, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach": [[191, 2, 1, "", "batchSize"], [191, 3, 1, "", "clear"], [191, 2, 1, "", "configProtoBytes"], [191, 3, 1, "", "copy"], [191, 2, 1, "", "dropout"], [191, 2, 1, "", "enableOutputLogs"], [191, 2, 1, "", "evaluationLogExtended"], [191, 3, 1, "", "explainParam"], [191, 3, 1, "", "explainParams"], [191, 3, 1, "", "extractParamMap"], [191, 3, 1, "", "fit"], [191, 3, 1, "", "fitMultiple"], [191, 3, 1, "", "getInputCols"], [191, 3, 1, "", "getLazyAnnotator"], [191, 3, 1, "", "getOrDefault"], [191, 3, 1, "", "getOutputCol"], [191, 3, 1, "", "getParam"], [191, 3, 1, "", "getParamValue"], [191, 2, 1, "", "getter_attrs"], [191, 3, 1, "", "hasDefault"], [191, 3, 1, "", "hasParam"], [191, 2, 1, "", "inputAnnotatorTypes"], [191, 2, 1, "", "inputCols"], [191, 3, 1, "", "inputColsValidation"], [191, 3, 1, "", "isDefined"], [191, 3, 1, "", "isSet"], [191, 2, 1, "", "labelColumn"], [191, 2, 1, "", "lazyAnnotator"], [191, 3, 1, "", "load"], [191, 2, 1, "", "lr"], [191, 2, 1, "", "maxEpochs"], [191, 2, 1, "", "optionalInputAnnotatorTypes"], [191, 2, 1, "", "outputAnnotatorType"], [191, 2, 1, "", "outputCol"], [191, 2, 1, "", "outputLogsPath"], [191, 2, 1, "", "randomSeed"], [191, 3, 1, "", "read"], [191, 3, 1, "", "save"], [191, 3, 1, "", "set"], [191, 3, 1, "", "setBatchSize"], [191, 3, 1, "", "setConfigProtoBytes"], [191, 3, 1, "", "setDropout"], [191, 3, 1, "", "setEnableOutputLogs"], [191, 3, 1, "", "setEvaluationLogExtended"], [191, 3, 1, "", "setInputCols"], [191, 3, 1, "", "setLabelColumn"], [191, 3, 1, "", "setLazyAnnotator"], [191, 3, 1, "", "setLr"], [191, 3, 1, "", "setMaxEpochs"], [191, 3, 1, "", "setOutputCol"], [191, 3, 1, "", "setOutputLogsPath"], [191, 3, 1, "", "setParamValue"], [191, 3, 1, "", "setRandomSeed"], [191, 3, 1, "", "setTestDataset"], [191, 3, 1, "", "setValidationSplit"], [191, 3, 1, "", "setVerbose"], [191, 2, 1, "", "testDataset"], [191, 2, 1, "", "uid"], [191, 2, 1, "", "validationSplit"], [191, 2, 1, "", "verbose"], [191, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[191, 2, 1, "", "classes"], [191, 3, 1, "", "clear"], [191, 2, 1, "", "configProtoBytes"], [191, 3, 1, "", "copy"], [191, 2, 1, "", "engine"], [191, 3, 1, "", "explainParam"], [191, 3, 1, "", "explainParams"], [191, 3, 1, "", "extractParamMap"], [191, 3, 1, "", "getEngine"], [191, 3, 1, "", "getInputCols"], [191, 3, 1, "", "getLazyAnnotator"], [191, 3, 1, "", "getOrDefault"], [191, 3, 1, "", "getOutputCol"], [191, 3, 1, "", "getParam"], [191, 3, 1, "", "getParamValue"], [191, 3, 1, "", "getStorageRef"], [191, 2, 1, "", "getter_attrs"], [191, 3, 1, "", "hasDefault"], [191, 3, 1, "", "hasParam"], [191, 2, 1, "", "inputAnnotatorTypes"], [191, 2, 1, "", "inputCols"], [191, 3, 1, "", "inputColsValidation"], [191, 3, 1, "", "isDefined"], [191, 3, 1, "", "isSet"], [191, 2, 1, "", "lazyAnnotator"], [191, 3, 1, "", "load"], [191, 2, 1, "", "name"], [191, 2, 1, "", "optionalInputAnnotatorTypes"], [191, 2, 1, "", "outputAnnotatorType"], [191, 2, 1, "", "outputCol"], [191, 3, 1, "", "pretrained"], [191, 3, 1, "", "read"], [191, 3, 1, "", "save"], [191, 3, 1, "", "set"], [191, 3, 1, "", "setConfigProtoBytes"], [191, 3, 1, "", "setInputCols"], [191, 3, 1, "", "setLazyAnnotator"], [191, 3, 1, "", "setOutputCol"], [191, 3, 1, "", "setParamValue"], [191, 3, 1, "", "setParams"], [191, 3, 1, "", "setStorageRef"], [191, 2, 1, "", "storageRef"], [191, 3, 1, "", "transform"], [191, 2, 1, "", "uid"], [191, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[192, 1, 1, "", "LegalDocumentMLClassifierApproach"], [192, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach": [[192, 2, 1, "", "classificationModelClass"], [192, 2, 1, "", "classificationModelPath"], [192, 3, 1, "", "clear"], [192, 3, 1, "", "copy"], [192, 3, 1, "", "explainParam"], [192, 3, 1, "", "explainParams"], [192, 3, 1, "", "extractParamMap"], [192, 3, 1, "", "fit"], [192, 2, 1, "", "fitIntercept"], [192, 3, 1, "", "fitMultiple"], [192, 3, 1, "", "getInputCols"], [192, 3, 1, "", "getLazyAnnotator"], [192, 3, 1, "", "getOrDefault"], [192, 3, 1, "", "getOutputCol"], [192, 3, 1, "", "getParam"], [192, 3, 1, "", "getParamValue"], [192, 2, 1, "", "getter_attrs"], [192, 3, 1, "", "hasDefault"], [192, 3, 1, "", "hasParam"], [192, 2, 1, "", "inputAnnotatorTypes"], [192, 2, 1, "", "inputCols"], [192, 3, 1, "", "inputColsValidation"], [192, 3, 1, "", "isDefined"], [192, 3, 1, "", "isSet"], [192, 2, 1, "", "labelCol"], [192, 2, 1, "", "labels"], [192, 2, 1, "", "lazyAnnotator"], [192, 3, 1, "", "load"], [192, 2, 1, "", "maxIter"], [192, 2, 1, "", "maxTokenNgram"], [192, 2, 1, "", "mergeChunks"], [192, 2, 1, "", "minTokenNgram"], [192, 2, 1, "", "optionalInputAnnotatorTypes"], [192, 2, 1, "", "outputAnnotatorType"], [192, 2, 1, "", "outputCol"], [192, 3, 1, "", "read"], [192, 3, 1, "", "save"], [192, 3, 1, "", "set"], [192, 3, 1, "", "setClassificationModelClass"], [192, 3, 1, "", "setClassificationModelPath"], [192, 3, 1, "", "setFitIntercept"], [192, 3, 1, "", "setForceInputTypeValidation"], [192, 3, 1, "", "setInputCols"], [192, 3, 1, "", "setLabelCol"], [192, 3, 1, "", "setLabels"], [192, 3, 1, "", "setLazyAnnotator"], [192, 3, 1, "", "setMaxIter"], [192, 3, 1, "", "setMaxTokenNgram"], [192, 3, 1, "", "setMergeChunks"], [192, 3, 1, "", "setMinTokenNgram"], [192, 3, 1, "", "setOutputCol"], [192, 3, 1, "", "setParamValue"], [192, 3, 1, "", "setTol"], [192, 3, 1, "", "setVectorizationModelPath"], [192, 2, 1, "", "skipLPInputColsValidation"], [192, 2, 1, "", "tol"], [192, 2, 1, "", "uid"], [192, 2, 1, "", "vectorizationModelPath"], [192, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[192, 2, 1, "", "classificationModel"], [192, 3, 1, "", "clear"], [192, 3, 1, "", "copy"], [192, 3, 1, "", "explainParam"], [192, 3, 1, "", "explainParams"], [192, 3, 1, "", "extractParamMap"], [192, 3, 1, "", "getInputCols"], [192, 3, 1, "", "getLazyAnnotator"], [192, 3, 1, "", "getOrDefault"], [192, 3, 1, "", "getOutputCol"], [192, 3, 1, "", "getParam"], [192, 3, 1, "", "getParamValue"], [192, 2, 1, "", "getter_attrs"], [192, 3, 1, "", "hasDefault"], [192, 3, 1, "", "hasParam"], [192, 2, 1, "", "inputAnnotatorTypes"], [192, 2, 1, "", "inputCols"], [192, 3, 1, "", "inputColsValidation"], [192, 3, 1, "", "isDefined"], [192, 3, 1, "", "isSet"], [192, 2, 1, "", "labels"], [192, 2, 1, "", "lazyAnnotator"], [192, 3, 1, "", "load"], [192, 2, 1, "", "maxTokenNgram"], [192, 2, 1, "", "mergeChunks"], [192, 2, 1, "", "minTokenNgram"], [192, 2, 1, "", "name"], [192, 2, 1, "", "optionalInputAnnotatorTypes"], [192, 2, 1, "", "outputAnnotatorType"], [192, 2, 1, "", "outputCol"], [192, 3, 1, "", "pretrained"], [192, 3, 1, "", "read"], [192, 3, 1, "", "save"], [192, 3, 1, "", "set"], [192, 3, 1, "", "setClassificationModel"], [192, 3, 1, "", "setForceInputTypeValidation"], [192, 3, 1, "", "setInputCols"], [192, 3, 1, "", "setLabels"], [192, 3, 1, "", "setLazyAnnotator"], [192, 3, 1, "", "setMergeChunks"], [192, 3, 1, "", "setOutputCol"], [192, 3, 1, "", "setParamValue"], [192, 3, 1, "", "setParams"], [192, 3, 1, "", "setVectorizationModel"], [192, 2, 1, "", "skipLPInputColsValidation"], [192, 3, 1, "", "transform"], [192, 2, 1, "", "uid"], [192, 2, 1, "", "vectorizationModel"], [192, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[193, 1, 1, "", "LegalFewShotClassifierApproach"], [193, 1, 1, "", "LegalFewShotClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach": [[193, 2, 1, "", "batchSize"], [193, 3, 1, "", "clear"], [193, 3, 1, "", "copy"], [193, 2, 1, "", "datasetInfo"], [193, 2, 1, "", "doExceptionHandling"], [193, 2, 1, "", "dropout"], [193, 2, 1, "", "engine"], [193, 2, 1, "", "epochsN"], [193, 3, 1, "", "explainParam"], [193, 3, 1, "", "explainParams"], [193, 3, 1, "", "extractParamMap"], [193, 2, 1, "", "featureScaling"], [193, 3, 1, "", "fit"], [193, 3, 1, "", "fitMultiple"], [193, 2, 1, "", "fixImbalance"], [193, 3, 1, "", "getEngine"], [193, 3, 1, "", "getInputCols"], [193, 3, 1, "", "getLazyAnnotator"], [193, 3, 1, "", "getOrDefault"], [193, 3, 1, "", "getOutputCol"], [193, 3, 1, "", "getParam"], [193, 3, 1, "", "getParamValue"], [193, 2, 1, "", "getter_attrs"], [193, 3, 1, "", "hasDefault"], [193, 3, 1, "", "hasParam"], [193, 2, 1, "", "inputAnnotatorTypes"], [193, 2, 1, "", "inputCols"], [193, 3, 1, "", "inputColsValidation"], [193, 3, 1, "", "isDefined"], [193, 3, 1, "", "isSet"], [193, 2, 1, "", "labelColumn"], [193, 2, 1, "", "lazyAnnotator"], [193, 2, 1, "", "learningRate"], [193, 3, 1, "", "load"], [193, 2, 1, "", "modelFile"], [193, 2, 1, "", "multiClass"], [193, 2, 1, "", "name"], [193, 2, 1, "", "optionalInputAnnotatorTypes"], [193, 2, 1, "", "outputAnnotatorType"], [193, 2, 1, "", "outputCol"], [193, 2, 1, "", "outputLogsPath"], [193, 3, 1, "", "read"], [193, 3, 1, "", "save"], [193, 3, 1, "", "set"], [193, 3, 1, "", "setBatchSize"], [193, 3, 1, "", "setDatasetInfo"], [193, 3, 1, "", "setDoExceptionHandling"], [193, 3, 1, "", "setDropout"], [193, 3, 1, "", "setEpochsNumber"], [193, 3, 1, "", "setFeatureScaling"], [193, 3, 1, "", "setFixImbalance"], [193, 3, 1, "", "setForceInputTypeValidation"], [193, 3, 1, "", "setInputCols"], [193, 3, 1, "", "setLabelCol"], [193, 3, 1, "", "setLazyAnnotator"], [193, 3, 1, "", "setLearningRate"], [193, 3, 1, "", "setModelFile"], [193, 3, 1, "", "setMultiClass"], [193, 3, 1, "", "setOutputCol"], [193, 3, 1, "", "setOutputLogsPath"], [193, 3, 1, "", "setParamValue"], [193, 3, 1, "", "setValidationSplit"], [193, 2, 1, "", "skipLPInputColsValidation"], [193, 2, 1, "", "uid"], [193, 2, 1, "", "validationSplit"], [193, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel": [[193, 2, 1, "", "classes"], [193, 3, 1, "", "clear"], [193, 3, 1, "", "copy"], [193, 2, 1, "", "datasetInfo"], [193, 2, 1, "", "doExceptionHandling"], [193, 3, 1, "", "explainParam"], [193, 3, 1, "", "explainParams"], [193, 3, 1, "", "extractParamMap"], [193, 2, 1, "", "featureScaling"], [193, 3, 1, "", "getInputCols"], [193, 3, 1, "", "getLazyAnnotator"], [193, 3, 1, "", "getOrDefault"], [193, 3, 1, "", "getOutputCol"], [193, 3, 1, "", "getParam"], [193, 3, 1, "", "getParamValue"], [193, 2, 1, "", "getter_attrs"], [193, 3, 1, "", "hasDefault"], [193, 3, 1, "", "hasParam"], [193, 2, 1, "", "inputAnnotatorTypes"], [193, 2, 1, "", "inputCols"], [193, 3, 1, "", "inputColsValidation"], [193, 3, 1, "", "isDefined"], [193, 3, 1, "", "isSet"], [193, 2, 1, "", "lazyAnnotator"], [193, 3, 1, "", "load"], [193, 2, 1, "", "multiClass"], [193, 2, 1, "", "name"], [193, 2, 1, "", "optionalInputAnnotatorTypes"], [193, 2, 1, "", "outputAnnotatorType"], [193, 2, 1, "", "outputCol"], [193, 3, 1, "", "pretrained"], [193, 3, 1, "", "read"], [193, 3, 1, "", "save"], [193, 3, 1, "", "set"], [193, 3, 1, "", "setDatasetInfo"], [193, 3, 1, "", "setDoExceptionHandling"], [193, 3, 1, "", "setFeatureScaling"], [193, 3, 1, "", "setForceInputTypeValidation"], [193, 3, 1, "", "setInputCols"], [193, 3, 1, "", "setLazyAnnotator"], [193, 3, 1, "", "setMultiClass"], [193, 3, 1, "", "setOutputCol"], [193, 3, 1, "", "setParamValue"], [193, 3, 1, "", "setParams"], [193, 2, 1, "", "skipLPInputColsValidation"], [193, 3, 1, "", "transform"], [193, 2, 1, "", "uid"], [193, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation": [[195, 0, 0, "-", "legal_encoder_decoder"], [196, 0, 0, "-", "legal_qa"], [197, 0, 0, "-", "legal_summarizer"], [198, 0, 0, "-", "legal_text_generator"], [199, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[195, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[195, 2, 1, "", "batchSize"], [195, 3, 1, "", "clear"], [195, 2, 1, "", "configProtoBytes"], [195, 3, 1, "", "copy"], [195, 2, 1, "", "doSample"], [195, 3, 1, "", "explainParam"], [195, 3, 1, "", "explainParams"], [195, 3, 1, "", "extractParamMap"], [195, 3, 1, "", "getBatchSize"], [195, 3, 1, "", "getInputCols"], [195, 3, 1, "", "getLazyAnnotator"], [195, 3, 1, "", "getOrDefault"], [195, 3, 1, "", "getOutputCol"], [195, 3, 1, "", "getParam"], [195, 3, 1, "", "getParamValue"], [195, 2, 1, "", "getter_attrs"], [195, 3, 1, "", "hasDefault"], [195, 3, 1, "", "hasParam"], [195, 2, 1, "", "ignoreTokenIds"], [195, 2, 1, "", "inputAnnotatorTypes"], [195, 2, 1, "", "inputCols"], [195, 3, 1, "", "inputColsValidation"], [195, 3, 1, "", "isDefined"], [195, 3, 1, "", "isSet"], [195, 2, 1, "", "lazyAnnotator"], [195, 3, 1, "", "load"], [195, 2, 1, "", "maxNewTokens"], [195, 2, 1, "", "maxTextLength"], [195, 2, 1, "", "mlFrameworkType"], [195, 2, 1, "", "name"], [195, 2, 1, "", "noRepeatNgramSize"], [195, 2, 1, "", "optionalInputAnnotatorTypes"], [195, 2, 1, "", "outputAnnotatorType"], [195, 2, 1, "", "outputCol"], [195, 2, 1, "", "randomSeed"], [195, 3, 1, "", "read"], [195, 2, 1, "", "refineChunkSize"], [195, 2, 1, "", "refineMaxAttempts"], [195, 2, 1, "", "refineSummary"], [195, 2, 1, "", "refineSummaryTargetLength"], [195, 3, 1, "", "save"], [195, 3, 1, "", "set"], [195, 3, 1, "", "setBatchSize"], [195, 3, 1, "", "setConfigProtoBytes"], [195, 3, 1, "", "setDoSample"], [195, 3, 1, "", "setForceInputTypeValidation"], [195, 3, 1, "", "setIgnoreTokenIds"], [195, 3, 1, "", "setInputCols"], [195, 3, 1, "", "setLazyAnnotator"], [195, 3, 1, "", "setMaxNewTokens"], [195, 3, 1, "", "setMaxTextLength"], [195, 3, 1, "", "setNoRepeatNgramSize"], [195, 3, 1, "", "setOutputCol"], [195, 3, 1, "", "setParamValue"], [195, 3, 1, "", "setParams"], [195, 3, 1, "", "setRandomSeed"], [195, 3, 1, "", "setRefineChunkSize"], [195, 3, 1, "", "setRefineMaxAttempts"], [195, 3, 1, "", "setRefineSummary"], [195, 3, 1, "", "setRefineSummaryTargetLength"], [195, 3, 1, "", "setStopAtEos"], [195, 3, 1, "", "setTopK"], [195, 2, 1, "", "skipLPInputColsValidation"], [195, 2, 1, "", "stopAtEos"], [195, 2, 1, "", "task"], [195, 2, 1, "", "topK"], [195, 3, 1, "", "transform"], [195, 2, 1, "", "uid"], [195, 2, 1, "", "useCache"], [195, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[196, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[196, 2, 1, "", "batchSize"], [196, 3, 1, "", "clear"], [196, 2, 1, "", "configProtoBytes"], [196, 3, 1, "", "copy"], [196, 2, 1, "", "customPrompt"], [196, 2, 1, "", "doSample"], [196, 3, 1, "", "explainParam"], [196, 3, 1, "", "explainParams"], [196, 3, 1, "", "extractParamMap"], [196, 3, 1, "", "getBatchSize"], [196, 3, 1, "", "getInputCols"], [196, 3, 1, "", "getLazyAnnotator"], [196, 3, 1, "", "getOrDefault"], [196, 3, 1, "", "getOutputCol"], [196, 3, 1, "", "getParam"], [196, 3, 1, "", "getParamValue"], [196, 3, 1, "", "getQuestionTypes"], [196, 2, 1, "", "getter_attrs"], [196, 3, 1, "", "hasDefault"], [196, 3, 1, "", "hasParam"], [196, 2, 1, "", "ignoreTokenIds"], [196, 2, 1, "", "inputAnnotatorTypes"], [196, 2, 1, "", "inputCols"], [196, 3, 1, "", "inputColsValidation"], [196, 3, 1, "", "isDefined"], [196, 3, 1, "", "isSet"], [196, 2, 1, "", "lazyAnnotator"], [196, 3, 1, "", "load"], [196, 3, 1, "", "loadMedicalTextGenerator"], [196, 3, 1, "", "loadSavedModel"], [196, 2, 1, "", "maxContextLength"], [196, 2, 1, "", "maxNewTokens"], [196, 2, 1, "", "mlFrameworkType"], [196, 2, 1, "", "modelType"], [196, 2, 1, "", "name"], [196, 2, 1, "", "noRepeatNgramSize"], [196, 2, 1, "", "optionalInputAnnotatorTypes"], [196, 2, 1, "", "outputAnnotatorType"], [196, 2, 1, "", "outputCol"], [196, 3, 1, "", "pretrained"], [196, 2, 1, "", "questionType"], [196, 3, 1, "", "read"], [196, 3, 1, "", "save"], [196, 3, 1, "", "set"], [196, 3, 1, "", "setBatchSize"], [196, 3, 1, "", "setConfigProtoBytes"], [196, 3, 1, "", "setCustomPrompt"], [196, 3, 1, "", "setDoSample"], [196, 3, 1, "", "setForceInputTypeValidation"], [196, 3, 1, "", "setIgnoreTokenIds"], [196, 3, 1, "", "setInputCols"], [196, 3, 1, "", "setLazyAnnotator"], [196, 3, 1, "", "setMaxContextLength"], [196, 3, 1, "", "setMaxNewTokens"], [196, 3, 1, "", "setNoRepeatNgramSize"], [196, 3, 1, "", "setOutputCol"], [196, 3, 1, "", "setParamValue"], [196, 3, 1, "", "setParams"], [196, 3, 1, "", "setQuestionAnswerTerminals"], [196, 3, 1, "", "setQuestionPrompts"], [196, 3, 1, "", "setQuestionSkipLastToken"], [196, 3, 1, "", "setQuestionType"], [196, 3, 1, "", "setRandomSeed"], [196, 3, 1, "", "setTopK"], [196, 3, 1, "", "setUseCache"], [196, 2, 1, "", "skipLPInputColsValidation"], [196, 2, 1, "", "topK"], [196, 3, 1, "", "transform"], [196, 2, 1, "", "uid"], [196, 2, 1, "", "useCache"], [196, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[197, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[197, 2, 1, "", "batchSize"], [197, 3, 1, "", "clear"], [197, 2, 1, "", "configProtoBytes"], [197, 3, 1, "", "copy"], [197, 2, 1, "", "doSample"], [197, 3, 1, "", "explainParam"], [197, 3, 1, "", "explainParams"], [197, 3, 1, "", "extractParamMap"], [197, 3, 1, "", "getBatchSize"], [197, 3, 1, "", "getInputCols"], [197, 3, 1, "", "getLazyAnnotator"], [197, 3, 1, "", "getOrDefault"], [197, 3, 1, "", "getOutputCol"], [197, 3, 1, "", "getParam"], [197, 3, 1, "", "getParamValue"], [197, 2, 1, "", "getter_attrs"], [197, 3, 1, "", "hasDefault"], [197, 3, 1, "", "hasParam"], [197, 2, 1, "", "ignoreTokenIds"], [197, 2, 1, "", "inputAnnotatorTypes"], [197, 2, 1, "", "inputCols"], [197, 3, 1, "", "inputColsValidation"], [197, 3, 1, "", "isDefined"], [197, 3, 1, "", "isSet"], [197, 2, 1, "", "lazyAnnotator"], [197, 3, 1, "", "load"], [197, 3, 1, "", "loadSavedModel"], [197, 2, 1, "", "maxNewTokens"], [197, 2, 1, "", "maxTextLength"], [197, 2, 1, "", "mlFrameworkType"], [197, 2, 1, "", "name"], [197, 2, 1, "", "noRepeatNgramSize"], [197, 2, 1, "", "optionalInputAnnotatorTypes"], [197, 2, 1, "", "outputAnnotatorType"], [197, 2, 1, "", "outputCol"], [197, 3, 1, "", "pretrained"], [197, 2, 1, "", "randomSeed"], [197, 3, 1, "", "read"], [197, 2, 1, "", "refineChunkSize"], [197, 2, 1, "", "refineMaxAttempts"], [197, 2, 1, "", "refineSummary"], [197, 2, 1, "", "refineSummaryTargetLength"], [197, 3, 1, "", "save"], [197, 3, 1, "", "set"], [197, 3, 1, "", "setBatchSize"], [197, 3, 1, "", "setConfigProtoBytes"], [197, 3, 1, "", "setDoSample"], [197, 3, 1, "", "setForceInputTypeValidation"], [197, 3, 1, "", "setIgnoreTokenIds"], [197, 3, 1, "", "setInputCols"], [197, 3, 1, "", "setLazyAnnotator"], [197, 3, 1, "", "setMaxNewTokens"], [197, 3, 1, "", "setMaxTextLength"], [197, 3, 1, "", "setNoRepeatNgramSize"], [197, 3, 1, "", "setOutputCol"], [197, 3, 1, "", "setParamValue"], [197, 3, 1, "", "setParams"], [197, 3, 1, "", "setRandomSeed"], [197, 3, 1, "", "setRefineChunkSize"], [197, 3, 1, "", "setRefineMaxAttempts"], [197, 3, 1, "", "setRefineSummary"], [197, 3, 1, "", "setRefineSummaryTargetLength"], [197, 3, 1, "", "setStopAtEos"], [197, 3, 1, "", "setTopK"], [197, 2, 1, "", "skipLPInputColsValidation"], [197, 2, 1, "", "stopAtEos"], [197, 2, 1, "", "task"], [197, 2, 1, "", "topK"], [197, 3, 1, "", "transform"], [197, 2, 1, "", "uid"], [197, 2, 1, "", "useCache"], [197, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[198, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[198, 2, 1, "", "batchSize"], [198, 3, 1, "", "clear"], [198, 2, 1, "", "configProtoBytes"], [198, 3, 1, "", "copy"], [198, 2, 1, "", "customPrompt"], [198, 2, 1, "", "doSample"], [198, 3, 1, "", "explainParam"], [198, 3, 1, "", "explainParams"], [198, 3, 1, "", "extractParamMap"], [198, 3, 1, "", "getAdditionalTokens"], [198, 3, 1, "", "getBatchSize"], [198, 3, 1, "", "getInputCols"], [198, 3, 1, "", "getLazyAnnotator"], [198, 3, 1, "", "getOrDefault"], [198, 3, 1, "", "getOutputCol"], [198, 3, 1, "", "getParam"], [198, 3, 1, "", "getParamValue"], [198, 2, 1, "", "getter_attrs"], [198, 3, 1, "", "hasDefault"], [198, 3, 1, "", "hasParam"], [198, 2, 1, "", "ignoreTokenIds"], [198, 2, 1, "", "inputAnnotatorTypes"], [198, 2, 1, "", "inputCols"], [198, 3, 1, "", "inputColsValidation"], [198, 3, 1, "", "isDefined"], [198, 3, 1, "", "isSet"], [198, 2, 1, "", "lazyAnnotator"], [198, 3, 1, "", "load"], [198, 3, 1, "", "loadSavedModel"], [198, 2, 1, "", "maxContextLength"], [198, 2, 1, "", "maxNewTokens"], [198, 2, 1, "", "maxTextLength"], [198, 2, 1, "", "mlFrameworkType"], [198, 2, 1, "", "modelType"], [198, 2, 1, "", "name"], [198, 2, 1, "", "noRepeatNgramSize"], [198, 2, 1, "", "optionalInputAnnotatorTypes"], [198, 2, 1, "", "outputAnnotatorType"], [198, 2, 1, "", "outputCol"], [198, 3, 1, "", "pretrained"], [198, 3, 1, "", "read"], [198, 3, 1, "", "save"], [198, 3, 1, "", "set"], [198, 3, 1, "", "setAdditionalTokens"], [198, 3, 1, "", "setBatchSize"], [198, 3, 1, "", "setConfigProtoBytes"], [198, 3, 1, "", "setCustomPrompt"], [198, 3, 1, "", "setDoSample"], [198, 3, 1, "", "setForceInputTypeValidation"], [198, 3, 1, "", "setIgnoreTokenIds"], [198, 3, 1, "", "setInputCols"], [198, 3, 1, "", "setLazyAnnotator"], [198, 3, 1, "", "setMaxContextLength"], [198, 3, 1, "", "setMaxNewTokens"], [198, 3, 1, "", "setMaxTextLength"], [198, 3, 1, "", "setNoRepeatNgramSize"], [198, 3, 1, "", "setOutputCol"], [198, 3, 1, "", "setParamValue"], [198, 3, 1, "", "setParams"], [198, 3, 1, "", "setRandomSeed"], [198, 3, 1, "", "setStopAtEos"], [198, 3, 1, "", "setTopK"], [198, 3, 1, "", "setUseCache"], [198, 2, 1, "", "skipLPInputColsValidation"], [198, 2, 1, "", "stopAtEos"], [198, 2, 1, "", "topK"], [198, 3, 1, "", "transform"], [198, 2, 1, "", "uid"], [198, 2, 1, "", "useCache"], [198, 3, 1, "", "write"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[199, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator": [[199, 3, 1, "", "clear"], [199, 3, 1, "", "copy"], [199, 2, 1, "", "entities1"], [199, 2, 1, "", "entities2"], [199, 3, 1, "", "explainParam"], [199, 3, 1, "", "explainParams"], [199, 3, 1, "", "extractParamMap"], [199, 3, 1, "", "getInputCols"], [199, 3, 1, "", "getLazyAnnotator"], [199, 3, 1, "", "getOrDefault"], [199, 3, 1, "", "getOutputCol"], [199, 3, 1, "", "getParam"], [199, 3, 1, "", "getParamValue"], [199, 2, 1, "", "getter_attrs"], [199, 3, 1, "", "hasDefault"], [199, 3, 1, "", "hasParam"], [199, 2, 1, "", "inputAnnotatorTypes"], [199, 2, 1, "", "inputCols"], [199, 3, 1, "", "inputColsValidation"], [199, 3, 1, "", "isDefined"], [199, 3, 1, "", "isSet"], [199, 2, 1, "", "lazyAnnotator"], [199, 3, 1, "", "load"], [199, 2, 1, "", "name"], [199, 2, 1, "", "optionalInputAnnotatorTypes"], [199, 2, 1, "", "outputAnnotatorType"], [199, 2, 1, "", "outputCol"], [199, 2, 1, "", "questionMark"], [199, 2, 1, "", "questionPronoun"], [199, 3, 1, "", "read"], [199, 3, 1, "", "save"], [199, 3, 1, "", "set"], [199, 3, 1, "", "setEntities1"], [199, 3, 1, "", "setEntities2"], [199, 3, 1, "", "setForceInputTypeValidation"], [199, 3, 1, "", "setInputCols"], [199, 3, 1, "", "setLazyAnnotator"], [199, 3, 1, "", "setOutputCol"], [199, 3, 1, "", "setParamValue"], [199, 3, 1, "", "setParams"], [199, 3, 1, "", "setQuestionMark"], [199, 3, 1, "", "setQuestionPronoun"], [199, 3, 1, "", "setStrategyType"], [199, 2, 1, "", "skipLPInputColsValidation"], [199, 2, 1, "", "strategyType"], [199, 3, 1, "", "transform"], [199, 2, 1, "", "uid"], [199, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification": [[201, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[202, 0, 0, "-", "legal_bert_for_token_classifier"], [203, 0, 0, "-", "legal_ner"], [204, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[202, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[202, 2, 1, "", "caseSensitive"], [202, 3, 1, "", "clear"], [202, 2, 1, "", "configProtoBytes"], [202, 3, 1, "", "copy"], [202, 3, 1, "", "explainParam"], [202, 3, 1, "", "explainParams"], [202, 3, 1, "", "extractParamMap"], [202, 3, 1, "", "getCaseSensitive"], [202, 3, 1, "", "getClasses"], [202, 3, 1, "", "getInputCols"], [202, 3, 1, "", "getLazyAnnotator"], [202, 3, 1, "", "getOrDefault"], [202, 3, 1, "", "getOutputCol"], [202, 3, 1, "", "getParam"], [202, 3, 1, "", "getParamValue"], [202, 2, 1, "", "getter_attrs"], [202, 3, 1, "", "hasDefault"], [202, 3, 1, "", "hasParam"], [202, 2, 1, "", "inputAnnotatorTypes"], [202, 2, 1, "", "inputCols"], [202, 3, 1, "", "inputColsValidation"], [202, 3, 1, "", "isDefined"], [202, 3, 1, "", "isSet"], [202, 2, 1, "", "lazyAnnotator"], [202, 3, 1, "", "load"], [202, 3, 1, "", "loadSavedModel"], [202, 3, 1, "", "loadSavedModelOpenSource"], [202, 2, 1, "", "maxSentenceLength"], [202, 2, 1, "", "name"], [202, 2, 1, "", "optionalInputAnnotatorTypes"], [202, 2, 1, "", "outputAnnotatorType"], [202, 2, 1, "", "outputCol"], [202, 3, 1, "", "pretrained"], [202, 3, 1, "", "read"], [202, 3, 1, "", "save"], [202, 3, 1, "", "set"], [202, 3, 1, "", "setCaseSensitive"], [202, 3, 1, "", "setConfigProtoBytes"], [202, 3, 1, "", "setForceInputTypeValidation"], [202, 3, 1, "", "setInputCols"], [202, 3, 1, "", "setLazyAnnotator"], [202, 3, 1, "", "setMaxSentenceLength"], [202, 3, 1, "", "setOutputCol"], [202, 3, 1, "", "setParamValue"], [202, 3, 1, "", "setParams"], [202, 2, 1, "", "skipLPInputColsValidation"], [202, 3, 1, "", "transform"], [202, 2, 1, "", "uid"], [202, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[203, 1, 1, "", "LegalNerApproach"], [203, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach": [[203, 2, 1, "", "batchSize"], [203, 3, 1, "", "clear"], [203, 2, 1, "", "configProtoBytes"], [203, 3, 1, "", "copy"], [203, 2, 1, "", "datasetInfo"], [203, 2, 1, "", "dropout"], [203, 2, 1, "", "earlyStoppingCriterion"], [203, 2, 1, "", "earlyStoppingPatience"], [203, 2, 1, "", "enableMemoryOptimizer"], [203, 2, 1, "", "enableOutputLogs"], [203, 2, 1, "", "engine"], [203, 2, 1, "", "entities"], [203, 2, 1, "", "evaluationLogExtended"], [203, 3, 1, "", "explainParam"], [203, 3, 1, "", "explainParams"], [203, 3, 1, "", "extractParamMap"], [203, 3, 1, "", "fit"], [203, 3, 1, "", "fitMultiple"], [203, 3, 1, "", "getEngine"], [203, 3, 1, "", "getInputCols"], [203, 3, 1, "", "getLabelColumn"], [203, 3, 1, "", "getLazyAnnotator"], [203, 3, 1, "", "getOrDefault"], [203, 3, 1, "", "getOutputCol"], [203, 3, 1, "", "getParam"], [203, 3, 1, "", "getParamValue"], [203, 2, 1, "", "getter_attrs"], [203, 2, 1, "", "graphFile"], [203, 2, 1, "", "graphFolder"], [203, 3, 1, "", "hasDefault"], [203, 3, 1, "", "hasParam"], [203, 2, 1, "", "includeAllConfidenceScores"], [203, 2, 1, "", "includeConfidence"], [203, 2, 1, "", "inputAnnotatorTypes"], [203, 2, 1, "", "inputCols"], [203, 3, 1, "", "inputColsValidation"], [203, 3, 1, "", "isDefined"], [203, 3, 1, "", "isSet"], [203, 2, 1, "", "labelColumn"], [203, 2, 1, "", "lazyAnnotator"], [203, 3, 1, "", "load"], [203, 2, 1, "", "logPrefix"], [203, 2, 1, "", "lr"], [203, 2, 1, "", "maxEpochs"], [203, 2, 1, "", "minEpochs"], [203, 2, 1, "", "optionalInputAnnotatorTypes"], [203, 2, 1, "", "outputAnnotatorType"], [203, 2, 1, "", "outputCol"], [203, 2, 1, "", "outputLogsPath"], [203, 2, 1, "", "overrideExistingTags"], [203, 2, 1, "", "po"], [203, 2, 1, "", "pretrainedModelPath"], [203, 2, 1, "", "randomSeed"], [203, 2, 1, "", "randomValidationSplitPerEpoch"], [203, 3, 1, "", "read"], [203, 3, 1, "", "save"], [203, 2, 1, "", "sentenceTokenIndex"], [203, 3, 1, "", "set"], [203, 3, 1, "", "setBatchSize"], [203, 3, 1, "", "setConfigProtoBytes"], [203, 3, 1, "", "setDatasetInfo"], [203, 3, 1, "", "setDoExceptionHandling"], [203, 3, 1, "", "setDropout"], [203, 3, 1, "", "setEarlyStoppingCriterion"], [203, 3, 1, "", "setEarlyStoppingPatience"], [203, 3, 1, "", "setEnableMemoryOptimizer"], [203, 3, 1, "", "setEnableOutputLogs"], [203, 3, 1, "", "setEntities"], [203, 3, 1, "", "setEvaluationLogExtended"], [203, 3, 1, "", "setForceInputTypeValidation"], [203, 3, 1, "", "setGraphFile"], [203, 3, 1, "", "setGraphFolder"], [203, 3, 1, "", "setIncludeAllConfidenceScores"], [203, 3, 1, "", "setIncludeConfidence"], [203, 3, 1, "", "setInputCols"], [203, 3, 1, "", "setLabelColumn"], [203, 3, 1, "", "setLazyAnnotator"], [203, 3, 1, "", "setLogPrefix"], [203, 3, 1, "", "setLr"], [203, 3, 1, "", "setMaxEpochs"], [203, 3, 1, "", "setMinEpochs"], [203, 3, 1, "", "setOutputCol"], [203, 3, 1, "", "setOutputLogsPath"], [203, 3, 1, "", "setOverrideExistingTags"], [203, 3, 1, "", "setParamValue"], [203, 3, 1, "", "setPo"], [203, 3, 1, "", "setPretrainedModelPath"], [203, 3, 1, "", "setRandomSeed"], [203, 3, 1, "", "setRandomValidationSplitPerEpoch"], [203, 3, 1, "", "setSentenceTokenIndex"], [203, 3, 1, "", "setTagsMapping"], [203, 3, 1, "", "setTestDataset"], [203, 3, 1, "", "setUseBestModel"], [203, 3, 1, "", "setUseContrib"], [203, 3, 1, "", "setValidationSplit"], [203, 3, 1, "", "setVerbose"], [203, 2, 1, "", "skipLPInputColsValidation"], [203, 2, 1, "", "testDataset"], [203, 2, 1, "", "uid"], [203, 2, 1, "", "useBestModel"], [203, 2, 1, "", "useContrib"], [203, 2, 1, "", "validationSplit"], [203, 2, 1, "", "verbose"], [203, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[203, 2, 1, "", "classes"], [203, 3, 1, "", "clear"], [203, 2, 1, "", "configProtoBytes"], [203, 3, 1, "", "copy"], [203, 2, 1, "", "datasetInfo"], [203, 2, 1, "", "doExceptionHandling"], [203, 3, 1, "", "explainParam"], [203, 3, 1, "", "explainParams"], [203, 3, 1, "", "extractParamMap"], [203, 3, 1, "", "getClasses"], [203, 3, 1, "", "getInputCols"], [203, 3, 1, "", "getLazyAnnotator"], [203, 3, 1, "", "getOrDefault"], [203, 3, 1, "", "getOutputCol"], [203, 3, 1, "", "getParam"], [203, 3, 1, "", "getParamValue"], [203, 3, 1, "", "getStorageRef"], [203, 3, 1, "", "getTrainingClassDistribution"], [203, 2, 1, "", "getter_attrs"], [203, 3, 1, "", "hasDefault"], [203, 3, 1, "", "hasParam"], [203, 2, 1, "", "includeAllConfidenceScores"], [203, 2, 1, "", "includeConfidence"], [203, 2, 1, "", "inferenceBatchSize"], [203, 2, 1, "", "inputAnnotatorTypes"], [203, 2, 1, "", "inputCols"], [203, 3, 1, "", "inputColsValidation"], [203, 3, 1, "", "isDefined"], [203, 3, 1, "", "isSet"], [203, 2, 1, "", "labelCasing"], [203, 2, 1, "", "lazyAnnotator"], [203, 3, 1, "", "load"], [203, 3, 1, "", "loadSavedModel"], [203, 2, 1, "", "name"], [203, 2, 1, "", "optionalInputAnnotatorTypes"], [203, 2, 1, "", "outputAnnotatorType"], [203, 2, 1, "", "outputCol"], [203, 3, 1, "", "pretrained"], [203, 3, 1, "", "read"], [203, 3, 1, "", "save"], [203, 2, 1, "", "sentenceTokenIndex"], [203, 3, 1, "", "set"], [203, 3, 1, "", "setConfigProtoBytes"], [203, 3, 1, "", "setDatasetInfo"], [203, 3, 1, "", "setForceInputTypeValidation"], [203, 3, 1, "", "setIncludeConfidence"], [203, 3, 1, "", "setInferenceBatchSize"], [203, 3, 1, "", "setInputCols"], [203, 3, 1, "", "setLabelCasing"], [203, 3, 1, "", "setLazyAnnotator"], [203, 3, 1, "", "setOutputCol"], [203, 3, 1, "", "setParamValue"], [203, 3, 1, "", "setParams"], [203, 3, 1, "", "setSentenceTokenIndex"], [203, 3, 1, "", "setStorageRef"], [203, 2, 1, "", "skipLPInputColsValidation"], [203, 2, 1, "", "storageRef"], [203, 2, 1, "", "trainingClassDistribution"], [203, 3, 1, "", "transform"], [203, 2, 1, "", "uid"], [203, 3, 1, "", "write"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[204, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[204, 2, 1, "", "batchSize"], [204, 2, 1, "", "caseSensitive"], [204, 3, 1, "", "clear"], [204, 2, 1, "", "coalesceSentences"], [204, 2, 1, "", "configProtoBytes"], [204, 3, 1, "", "copy"], [204, 2, 1, "", "engine"], [204, 3, 1, "", "explainParam"], [204, 3, 1, "", "explainParams"], [204, 3, 1, "", "extractParamMap"], [204, 3, 1, "", "getBatchSize"], [204, 3, 1, "", "getCaseSensitive"], [204, 3, 1, "", "getClasses"], [204, 3, 1, "", "getEngine"], [204, 3, 1, "", "getInputCols"], [204, 3, 1, "", "getLazyAnnotator"], [204, 3, 1, "", "getMaxSentenceLength"], [204, 3, 1, "", "getOrDefault"], [204, 3, 1, "", "getOutputCol"], [204, 3, 1, "", "getParam"], [204, 3, 1, "", "getParamValue"], [204, 2, 1, "", "getter_attrs"], [204, 3, 1, "", "hasDefault"], [204, 3, 1, "", "hasParam"], [204, 2, 1, "", "ignoreEntities"], [204, 2, 1, "", "inputAnnotatorTypes"], [204, 2, 1, "", "inputCols"], [204, 3, 1, "", "inputColsValidation"], [204, 3, 1, "", "isDefined"], [204, 3, 1, "", "isSet"], [204, 2, 1, "", "lazyAnnotator"], [204, 3, 1, "", "load"], [204, 3, 1, "", "loadSavedModel"], [204, 2, 1, "", "maxSentenceLength"], [204, 2, 1, "", "max_length_limit"], [204, 2, 1, "", "name"], [204, 2, 1, "", "optionalInputAnnotatorTypes"], [204, 2, 1, "", "outputAnnotatorType"], [204, 2, 1, "", "outputCol"], [204, 2, 1, "", "predictionThreshold"], [204, 3, 1, "", "pretrained"], [204, 3, 1, "", "read"], [204, 3, 1, "", "save"], [204, 3, 1, "", "set"], [204, 3, 1, "", "setBatchSize"], [204, 3, 1, "", "setCaseSensitive"], [204, 3, 1, "", "setConfigProtoBytes"], [204, 3, 1, "", "setEntityDefinitions"], [204, 3, 1, "", "setInputCols"], [204, 3, 1, "", "setLazyAnnotator"], [204, 3, 1, "", "setMaxSentenceLength"], [204, 3, 1, "", "setOutputCol"], [204, 3, 1, "", "setParamValue"], [204, 3, 1, "", "setParams"], [204, 3, 1, "", "setPredictionThreshold"], [204, 3, 1, "", "transform"], [204, 2, 1, "", "uid"], [204, 3, 1, "", "write"]], "sparknlp_jsl.llm": [[206, 0, 0, "-", "llm_loader"]], "sparknlp_jsl.llm.llm_loader": [[206, 1, 1, "", "LLMLoader"]], "sparknlp_jsl.llm.llm_loader.LLMLoader": [[206, 3, 1, "", "clear"], [206, 3, 1, "", "copy"], [206, 3, 1, "", "encodeModel"], [206, 3, 1, "", "explainParam"], [206, 3, 1, "", "explainParams"], [206, 3, 1, "", "extractParamMap"], [206, 3, 1, "", "generate"], [206, 3, 1, "", "getMetadata"], [206, 3, 1, "", "getMetadataEntry"], [206, 3, 1, "", "getOrDefault"], [206, 3, 1, "", "getParam"], [206, 3, 1, "", "hasDefault"], [206, 3, 1, "", "hasParam"], [206, 3, 1, "", "isDefined"], [206, 3, 1, "", "isSet"], [206, 3, 1, "", "load"], [206, 3, 1, "", "loadGGUF"], [206, 3, 1, "", "pretrained"], [206, 3, 1, "", "set"], [206, 3, 1, "", "setCachePrompt"], [206, 3, 1, "", "setDynamicTemperatureExponent"], [206, 3, 1, "", "setDynamicTemperatureRange"], [206, 3, 1, "", "setFrequencyPenalty"], [206, 3, 1, "", "setGrammar"], [206, 3, 1, "", "setIgnoreEos"], [206, 3, 1, "", "setInputPrefix"], [206, 3, 1, "", "setInputSuffix"], [206, 3, 1, "", "setMinKeep"], [206, 3, 1, "", "setMinP"], [206, 3, 1, "", "setMiroStatEta"], [206, 3, 1, "", "setMiroStatTau"], [206, 3, 1, "", "setNKeep"], [206, 3, 1, "", "setNPredict"], [206, 3, 1, "", "setNProbs"], [206, 3, 1, "", "setPenalizeNl"], [206, 3, 1, "", "setPenaltyPrompt"], [206, 3, 1, "", "setPresencePenalty"], [206, 3, 1, "", "setRepeatLastN"], [206, 3, 1, "", "setRepeatPenalty"], [206, 3, 1, "", "setSeed"], [206, 3, 1, "", "setStopStrings"], [206, 3, 1, "", "setTemperature"], [206, 3, 1, "", "setTfsZ"], [206, 3, 1, "", "setTopK"], [206, 3, 1, "", "setTopP"], [206, 3, 1, "", "setTypicalP"], [206, 3, 1, "", "setUseChatTemplate"], [206, 3, 1, "", "transform"], [206, 2, 1, "", "uid"]], "sparknlp_jsl.modelTracer": [[207, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[207, 3, 1, "", "addUidCols"]], "sparknlp_jsl.pipeline_output_parser": [[208, 1, 1, "", "PipelineOutputParser"]], "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser": [[208, 3, 1, "", "check_column_mapping_dict"], [208, 3, 1, "", "check_unique_id"], [208, 3, 1, "", "get_assertions"], [208, 3, 1, "", "get_classification"], [208, 3, 1, "", "get_deidentification"], [208, 3, 1, "", "get_documents"], [208, 3, 1, "", "get_entities"], [208, 3, 1, "", "get_relations"], [208, 3, 1, "", "get_resolutions"], [208, 3, 1, "", "get_summary"], [208, 3, 1, "", "get_unique_id"], [208, 3, 1, "", "run"], [208, 3, 1, "", "update_columns_maps"]], "sparknlp_jsl.pipeline_tracer": [[209, 1, 1, "", "PipelineStage"], [209, 1, 1, "", "PipelineTracer"], [209, 1, 1, "", "StageField"]], "sparknlp_jsl.pipeline_tracer.PipelineStage": [[209, 2, 1, "", "index"], [209, 2, 1, "", "inputAnnotatorType"], [209, 2, 1, "", "inputCol"], [209, 2, 1, "", "name"], [209, 2, 1, "", "outputAnnotatorType"], [209, 2, 1, "", "outputCol"], [209, 2, 1, "", "stage"], [209, 2, 1, "", "uid"]], "sparknlp_jsl.pipeline_tracer.PipelineTracer": [[209, 3, 1, "", "createParserDictionary"], [209, 3, 1, "", "getParserDictDirectly"], [209, 3, 1, "", "getPipelineStages"], [209, 3, 1, "", "getPossibleAssertions"], [209, 3, 1, "", "getPossibleEntities"], [209, 3, 1, "", "getPossibleRelations"], [209, 3, 1, "", "listAvailableModels"], [209, 3, 1, "", "printPipelineSchema"], [209, 3, 1, "", "showAvailableModels"]], "sparknlp_jsl.pipeline_tracer.StageField": [[209, 2, 1, "", "fieldType"], [209, 2, 1, "", "name"], [209, 2, 1, "", "value"]], "sparknlp_jsl.pretrained": [[210, 1, 1, "", "InternalResourceDownloader"], [210, 5, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[210, 3, 1, "", "downloadModel"], [210, 3, 1, "", "downloadModelDirectly"], [210, 3, 1, "", "returnPrivateModels"], [210, 3, 1, "", "returnPrivatePipelines"], [210, 3, 1, "", "showAvailableAnnotators"], [210, 3, 1, "", "showPrivateModels"], [210, 3, 1, "", "showPrivatePipelines"], [210, 3, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[211, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[211, 2, 1, "", "columns"], [211, 2, 1, "", "instance"], [211, 3, 1, "", "obfuscateColumns"], [211, 2, 1, "", "obfuscateRefFile"], [211, 2, 1, "", "spark"]], "sparknlp_jsl.text_to_documents_columns": [[212, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[212, 2, 1, "", "columns"], [212, 2, 1, "", "instance"], [212, 2, 1, "", "spark"], [212, 2, 1, "", "suffix"], [212, 3, 1, "", "toDocumentsColumns"], [212, 3, 1, "", "toDocumentsColumnsWithId"]], "sparknlp_jsl.training": [[213, 1, 1, "", "AnnotationToolJsonReader"], [213, 1, 1, "", "CantemistReader"], [213, 1, 1, "", "CodiEspReader"], [213, 1, 1, "", "REDatasetHelper"], [213, 1, 1, "", "SynonymAugmentationUMLS"], [213, 4, 1, "", "tf_graph"], [213, 4, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[213, 3, 1, "", "apply"], [213, 3, 1, "", "generateAssertionTrainSet"], [213, 3, 1, "", "generateConll"], [213, 3, 1, "", "generatePlainAssertionTrainSet"], [213, 3, 1, "", "getDataFrame"], [213, 2, 1, "", "java_obj"], [213, 3, 1, "", "new_java_array"], [213, 3, 1, "", "new_java_array_integer"], [213, 3, 1, "", "new_java_array_string"], [213, 3, 1, "", "new_java_obj"], [213, 3, 1, "", "readDataset"], [213, 2, 1, "", "sc"], [213, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.CantemistReader": [[213, 3, 1, "", "apply"], [213, 3, 1, "", "getDataFrame"], [213, 2, 1, "", "java_obj"], [213, 3, 1, "", "new_java_array"], [213, 3, 1, "", "new_java_array_integer"], [213, 3, 1, "", "new_java_array_string"], [213, 3, 1, "", "new_java_obj"], [213, 3, 1, "", "readDatasetTaskNer"], [213, 2, 1, "", "sc"], [213, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.CodiEspReader": [[213, 3, 1, "", "apply"], [213, 3, 1, "", "getDataFrame"], [213, 2, 1, "", "java_obj"], [213, 3, 1, "", "new_java_array"], [213, 3, 1, "", "new_java_array_integer"], [213, 3, 1, "", "new_java_array_string"], [213, 3, 1, "", "new_java_obj"], [213, 3, 1, "", "readDatasetTaskX"], [213, 2, 1, "", "sc"], [213, 3, 1, "", "spark_version"]], "sparknlp_jsl.training.REDatasetHelper": [[213, 2, 1, "", "annotation_schema"], [213, 3, 1, "", "create_annotation_column"], [213, 2, 1, "", "data"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[213, 3, 1, "", "apply"], [213, 3, 1, "", "augmentCsv"], [213, 3, 1, "", "augmentDataFrame"], [213, 3, 1, "", "getDataFrame"], [213, 2, 1, "", "java_obj"], [213, 3, 1, "", "new_java_array"], [213, 3, 1, "", "new_java_array_integer"], [213, 3, 1, "", "new_java_array_string"], [213, 3, 1, "", "new_java_obj"], [213, 2, 1, "", "sc"], [213, 3, 1, "", "spark_version"]], "sparknlp_jsl.training_log_parser": [[214, 1, 1, "", "assertion_log_parser"], [214, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[214, 3, 1, "", "get_best_f1_scores"], [214, 3, 1, "", "get_charts"], [214, 3, 1, "", "loss_plot"], [214, 3, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[214, 3, 1, "", "evaluate"], [214, 3, 1, "", "evaluate_conll_file"], [214, 3, 1, "", "get_best_f1_scores"], [214, 3, 1, "", "get_charts"], [214, 3, 1, "", "loss_plot"], [214, 3, 1, "", "parse_logfile"]], "sparknlp_jsl.transpiler": [[215, 0, 0, "-", "builder"], [216, 0, 0, "-", "class_names"], [217, 0, 0, "-", "converter"], [218, 0, 0, "-", "externalSources"], [220, 0, 0, "-", "nlu_2_python"], [221, 0, 0, "-", "python_2_scala"], [222, 0, 0, "-", "source_loader"], [223, 0, 0, "-", "uploader"]], "sparknlp_jsl.transpiler.builder": [[215, 5, 1, "", "build_python_code"], [215, 5, 1, "", "build_scala_code"], [215, 5, 1, "", "compile_scala_code"], [215, 5, 1, "", "prepare_python_code"]], "sparknlp_jsl.transpiler.class_names": [[216, 1, 1, "", "ClassNames"]], "sparknlp_jsl.transpiler.class_names.ClassNames": [[216, 2, 1, "", "classes"], [216, 2, 1, "", "internal_classes"], [216, 2, 1, "", "openSource_classes"]], "sparknlp_jsl.transpiler.converter": [[217, 5, 1, "", "run_converter"]], "sparknlp_jsl.transpiler.nlu_2_python": [[220, 5, 1, "", "bucket"], [220, 5, 1, "", "convert_nlu_component_to_python"], [220, 5, 1, "", "is_component_finance"], [220, 5, 1, "", "is_component_legal"], [220, 5, 1, "", "is_component_medical"], [220, 5, 1, "", "is_component_ocr"], [220, 5, 1, "", "is_component_open_source"], [220, 5, 1, "", "is_component_pretrained"], [220, 4, 1, "", "medical_annotators_set"], [220, 5, 1, "", "nlu_component_to_spark_nlp_code"], [220, 4, 1, "", "open_source_annotator_set_final"], [220, 5, 1, "", "starts_with_finance"], [220, 5, 1, "", "starts_with_legal"], [220, 5, 1, "", "starts_with_medical"], [220, 5, 1, "", "to_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[221, 5, 1, "", "anonymize_script"], [221, 5, 1, "", "break_line_after_backslash"], [221, 5, 1, "", "convert"], [221, 5, 1, "", "convert_class_name"], [221, 5, 1, "", "convert_python_dict_to_scala_script"], [221, 5, 1, "", "find_key_values"], [221, 5, 1, "", "get_data_dict"], [221, 5, 1, "", "get_import_section"], [221, 5, 1, "", "prepare_scala_code"], [221, 5, 1, "", "remove_blank_lines"], [221, 5, 1, "", "restore_sensitive_values"], [221, 5, 1, "", "run_transpiler"]], "sparknlp_jsl.transpiler.source_loader": [[222, 5, 1, "", "get_python_code_from_md"], [222, 5, 1, "", "get_scala_code_from_md"], [222, 5, 1, "", "load_file_as_dict"], [222, 5, 1, "", "process_python_code"], [222, 5, 1, "", "update_md_file"], [222, 5, 1, "", "update_md_file_for_working_scala_code"]], "sparknlp_jsl.transpiler.uploader": [[223, 5, 1, "", "apply_method_to_all_md_files"], [223, 4, 1, "", "generated_code_failed"], [223, 4, 1, "", "generated_code_works"], [223, 4, 1, "", "python_code_failed"], [223, 4, 1, "", "results_list"], [223, 4, 1, "", "scala_code_works"], [223, 4, 1, "", "scala_generated"], [223, 5, 1, "", "upload_scala_code_in_md_file"]], "sparknlp_jsl.updateModels": [[224, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[224, 3, 1, "", "updateCacheModels"], [224, 3, 1, "", "updateModels"]], "sparknlp_jsl.util": [[225, 5, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[226, 0, 0, "-", "alab_utils"], [227, 0, 0, "-", "conll_parse"], [228, 0, 0, "-", "database_deidentification"], [229, 0, 0, "-", "date_shift_filler"], [230, 0, 0, "-", "deidentification_utils"], [231, 0, 0, "-", "exception_handling_utils"], [232, 0, 0, "-", "imports"], [234, 0, 0, "-", "java_helper"], [235, 0, 0, "-", "licensed_annotator_type"], [236, 0, 0, "-", "log_parse"], [237, 0, 0, "-", "ner_utils"], [238, 0, 0, "-", "ocr_nlp_processor"], [239, 0, 0, "-", "ocr_utils"], [240, 0, 0, "-", "risk_adjustment_utils"], [241, 0, 0, "-", "run_transpiled_code"], [242, 0, 0, "-", "training_log_parser_utils"], [243, 0, 0, "-", "visualner_annotations_parser"]], "sparknlp_jsl.utils.alab_utils": [[226, 4, 1, "", "document_assembler"], [226, 4, 1, "", "empty_df"], [226, 5, 1, "", "get_doc_assembler"], [226, 5, 1, "", "get_empty_df"], [226, 5, 1, "", "get_ner_df"], [226, 5, 1, "", "get_ner_sentence_borders"], [226, 5, 1, "", "get_nlp_pos_pipeline"], [226, 5, 1, "", "get_nlp_token_pipeline"], [226, 5, 1, "", "get_pos"], [226, 5, 1, "", "get_regex_tokenizer"], [226, 5, 1, "", "get_regular_tokenizer"], [226, 5, 1, "", "get_rel_df"], [226, 5, 1, "", "get_sent_detector"], [226, 5, 1, "", "get_sentence_pipeline"], [226, 5, 1, "", "get_single_task_conll"], [226, 5, 1, "", "get_token_df"], [226, 4, 1, "", "nlp_pos_pipeline"], [226, 4, 1, "", "nlp_token_pipeline"], [226, 4, 1, "", "pos"], [226, 4, 1, "", "pos_pipeline_initialized"], [226, 5, 1, "", "read_conll"], [226, 4, 1, "", "regex_tokenizer"], [226, 4, 1, "", "regular_tokenizer"], [226, 4, 1, "", "sentence_detector"], [226, 5, 1, "", "strip_json_entities"], [226, 4, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.database_deidentification": [[228, 1, 1, "", "RelationalDBDeidentification"], [228, 5, 1, "", "create_obfuscate_age_udf"], [228, 5, 1, "", "obfuscate_age"]], "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification": [[228, 2, 1, "", "age_groups"], [228, 2, 1, "", "config"], [228, 3, 1, "", "connect_to_db"], [228, 2, 1, "", "days_to_shift"], [228, 3, 1, "", "deidentify"], [228, 3, 1, "", "detect_sensitive_columns"], [228, 3, 1, "", "get_all_tables"], [228, 3, 1, "", "get_schema_info"], [228, 3, 1, "", "mask_other_sensitive_columns"], [228, 3, 1, "", "obfuscate_ages"], [228, 3, 1, "", "obfuscate_dates"], [228, 3, 1, "", "obfuscate_primary_foreign_keys"], [228, 2, 1, "", "phi_keywords"], [228, 2, 1, "", "pk_fk_shift_value"], [228, 3, 1, "", "setup_logging"], [228, 2, 1, "", "spark"], [228, 2, 1, "", "use_hipaa"]], "sparknlp_jsl.utils.date_shift_filler": [[229, 1, 1, "", "DateShiftFiller"]], "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller": [[229, 3, 1, "", "fill_missing_shifts"], [229, 2, 1, "", "instance"], [229, 2, 1, "", "max_shift_days"], [229, 2, 1, "", "seed"], [229, 2, 1, "", "spark"]], "sparknlp_jsl.utils.deidentification_utils": [[230, 5, 1, "", "dict_to_annotation_converter"], [230, 5, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.exception_handling_utils": [[231, 5, 1, "", "apply_exception_handling"]], "sparknlp_jsl.utils.imports": [[232, 5, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.java_helper": [[234, 5, 1, "", "parse_str_to_dict"]], "sparknlp_jsl.utils.licensed_annotator_type": [[235, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[235, 2, 1, "", "ASSERTION"], [235, 2, 1, "", "DISAMBIGUATION"], [235, 2, 1, "", "FEATURE_VECTOR"], [235, 2, 1, "", "KEYWORD"], [235, 2, 1, "", "SELECTOR"], [235, 2, 1, "", "SQL"], [235, 2, 1, "", "VECTOR_SIMILARITY_RANKINGS"]], "sparknlp_jsl.utils.ner_utils": [[237, 5, 1, "", "evaluate"], [237, 5, 1, "", "evaluate_conll_file"], [237, 5, 1, "", "get_charts"], [237, 5, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[238, 4, 1, "", "colors"], [238, 5, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[239, 4, 1, "", "colors"], [239, 4, 1, "", "colors_rgb"], [239, 5, 1, "", "draw_boxes_on_image_handwritten_region"], [239, 5, 1, "", "get_handwritten_regions"], [239, 4, 1, "", "label2color"], [239, 4, 1, "", "label2rgb"], [239, 4, 1, "", "pretrained_model"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[240, 1, 1, "", "RiskAdjustmentUtil"]], "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil": [[240, 3, 1, "", "HCC_from_ICD"], [240, 3, 1, "", "HCC_labels"], [240, 3, 1, "", "diff_between_HCCs"]], "sparknlp_jsl.utils.run_transpiled_code": [[241, 1, 1, "", "RunTranspiledCode"]], "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode": [[241, 3, 1, "", "build_scala_code"], [241, 3, 1, "", "compile_scala_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[242, 5, 1, "", "aggregate_entities"], [242, 5, 1, "", "calc_metrics"], [242, 5, 1, "", "count_chunks"], [242, 5, 1, "", "get_result"], [242, 5, 1, "", "is_chunk_end"], [242, 5, 1, "", "is_chunk_start"], [242, 5, 1, "", "split_tag"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[243, 5, 1, "", "convert_to_CONLL"], [243, 5, 1, "", "get_tokens"], [243, 5, 1, "", "pdfs_to_visualner_to_conll"], [243, 5, 1, "", "visualner_annotations_to_conll"], [243, 5, 1, "", "write_CONLL"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"sparknlp_jsl": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "get": 1, "start": [1, 2], "requir": [1, 45, 46, 47, 50, 142, 176], "instal": 1, "spark": [1, 2], "nlp": [1, 2], "session": 1, "from": 1, "python": 1, "document": 2, "content": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243], "quick": 2, "annot": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "financ": [5, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "legal": [6, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "util": [7, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "alab": 8, "modul": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 171, 173, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244], "class": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 174, 176, 177, 180, 181, 183, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 224, 228, 229, 235, 240, 241], "annotation_convert": 9, "annotation_merg": 10, "assert": [11, 12, 13, 14, 15, 16, 17, 18, 140, 141, 174, 175], "assertiondl": [11, 140, 174], "assertion_chunk_convert": 12, "exampl": [12, 41, 42, 45, 46, 47, 50, 67, 106, 142, 176], "assertion_dl_reg": 13, "assertion_merg": 14, "bert_for_assertion_classif": 15, "contextual_assert": 16, "fewshot_assertion_sentence_convert": 17, "submodul": [18, 28, 36, 44, 49, 54, 63, 65, 68, 72, 74, 75, 78, 81, 85, 95, 96, 98, 101, 105, 107, 112, 114, 119, 125, 129, 135, 141, 144, 148, 151, 159, 164, 169, 172, 175, 178, 182, 185, 189, 194, 201, 205, 219, 233], "chunk2_token": 19, "chunker": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "assertion_filter": 20, "chunk_convert": 21, "chunk_key_phrase_extract": 22, "chunk_sentence_splitt": 23, "chunker_filter": 24, "chunkmapp": [25, 146, 180], "chunkmapper_filter": 26, "docmapp": [27, 147, 181], "mapper2_chunk": 29, "classif": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "document_log_classifi": 30, "document_ml_classifi": 31, "few_shot_assertion_classifi": 32, "few_shot_classifi": 33, "generic_log_reg_classifi": 34, "generic_svm_classifi": 35, "large_few_shot_classifi": 37, "medical_bert_for_sequence_classif": 38, "medical_bert_for_token_classifi": 39, "medical_distilbert_for_sequence_classif": 40, "context": [41, 42, 43, 44], "contextual_entity_filter": 41, "note": [41, 42, 106], "contextual_entity_rul": 42, "contextual_pars": 43, "deid": [45, 46, 47, 48, 49, 50, 51, 52, 53, 142, 143, 144, 176, 177, 178], "base_deidentification_param": 45, "function": [45, 46, 47, 50, 142, 171, 172, 173, 176, 210, 215, 217, 220, 221, 222, 223, 225, 226, 228, 230, 231, 232, 234, 237, 238, 239, 242, 243], "overview": [45, 46, 47, 50, 67, 142, 176], "support": [45, 46, 47, 50, 142, 176], "entiti": [45, 46, 47, 50, 142, 176], "type": [45, 46, 47, 50, 142, 176], "languag": [45, 46, 47, 50, 142, 176], "consist": [45, 46, 47, 50, 142, 176], "algorithm": [45, 46, 47, 50, 142, 176], "paramet": [45, 46, 47, 50, 142, 171, 176, 183, 209], "interact": [45, 46, 47, 50, 142, 176], "deidentif": [46, 142, 176], "default": [46, 47, 142, 176], "dictionari": [46, 47, 142, 176], "deidentication_param": 47, "doccument_hashcod": 48, "light_deidentif": 50, "name_obfusc": 51, "reidentif": 52, "replac": 53, "disambigu": [54, 55], "ner_disambigu": 55, "doc2_chunk_intern": 56, "document_filterer_by_classifi": 57, "document_filterer_by_n": 58, "embed": [59, 60, 61, 62, 63], "average_embed": 59, "bert_sentence_embed": 60, "entity_chunk_embed": 61, "extractive_summar": 62, "er": [64, 65], "entity_ruler_intern": 64, "feature_assembl": 66, "fhir": [67, 68], "fhir_deidentif": 67, "rule": 67, "format": 67, "filtering_param": 69, "flatten": 70, "generic_classifi": [71, 72], "handle_exception_param": 73, "subpackag": [74, 145, 150, 154, 166, 172, 179, 184, 188, 200, 219], "packag": [74, 172], "matcher": [75, 76, 77], "text_matcher_intern": 76, "text_matcher_param": 77, "medical_llm": [78, 79], "merg": [80, 81, 82], "chunk_merg": 80, "re_chunk_merg": 82, "metadata_annotation_convert": 83, "multi_chunk2_doc": 84, "ner": [85, 86, 87, 88, 89, 90, 91, 92, 167, 168, 169, 170, 201, 202, 203, 204], "iob_tagg": 86, "medical_n": 87, "ner_chunk": 88, "ner_converter_intern": 89, "ner_template_rend": 90, "pretrained_zero_shot_n": 91, "zero_shot_n": [92, 170, 204], "normal": [93, 94, 95], "date_norm": 93, "drug_norm": 94, "param": [96, 97], "reset_sentence_indices_param": 97, "parser": [98, 99], "structured_json_convert": 99, "qa": [100, 101, 102, 103], "beam_search_param": 100, "medical_qa": 102, "qa_ner_gener": [103, 165, 199], "rag": [104, 105, 106], "context_split_assembl": 104, "vectordb_post_processor": 106, "re": [107, 108, 109, 110, 111], "relation_extract": [108, 151, 152, 153, 185, 186, 187], "relation_extraction_dl": [109, 152, 186], "relation_ner_chunk_filt": 110, "zero_shot_relation_extract": [111, 153, 187], "regex": [112, 113], "regex_match": 113, "resolut": [114, 115, 116, 146, 147, 148, 149, 180, 181, 182, 183], "resolver_merg": 115, "sentence_entity_resolv": [116, 149, 183], "resolution2_chunk": 117, "router": 118, "seq2seq": [119, 120, 121, 122, 123], "medical_encoder_decod": 120, "medical_summar": 121, "medical_text_gener": 122, "text2sql": 123, "source_tracking_metadata_param": 124, "splitter": [125, 126], "internal_document_splitt": 126, "tf_graph_build": 127, "white_black_list_param": 128, "window": [129, 130], "windowed_sent": 130, "base": 131, "common": [132, 133, 134, 135], "annotator_approach_intern": 132, "annotator_model_intern": 133, "annotator_properties_intern": 134, "compat": 136, "custom_transform": 137, "deidentification_modul": 138, "eval": 139, "chunk_classif": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183], "document_hashcod": [143, 177], "graph": [150, 151, 152, 153, 184, 185, 186, 187], "sequence_classif": [155, 156, 157, 158, 159, 189, 190, 191, 192, 193], "finance_bert_for_sequence_classif": 155, "finance_classifier_dl": 156, "finance_document_ml_classifi": 157, "finance_few_shot_classifi": 158, "sequence_gener": [160, 161, 162, 163, 164, 165, 194, 195, 196, 197, 198, 199], "finance_encoder_decod": 160, "finance_qa": 161, "finance_summar": 162, "finance_text_gener": 163, "token_classif": [166, 167, 168, 169, 170, 200, 201, 202, 203, 204], "finance_bert_for_token_classifi": 167, "finance_n": 168, "input": 171, "output": 171, "attribut": [172, 213, 220, 223, 226, 238, 239], "intern": 173, "legal_bert_for_sequence_classif": 190, "legal_classifier_dl": 191, "legal_document_ml_classifi": 192, "legal_few_shot_classifi": 193, "legal_encoder_decod": 195, "legal_qa": 196, "legal_summar": 197, "legal_text_gener": 198, "legal_bert_for_token_classifi": 202, "legal_n": 203, "llm": [205, 206], "llm_loader": 206, "modeltrac": 207, "pipeline_output_pars": 208, "pipeline_trac": 209, "return": 209, "throw": 209, "pretrain": 210, "structured_deidentif": 211, "text_to_documents_column": 212, "train": 213, "training_log_pars": 214, "transpil": [215, 216, 217, 218, 219, 220, 221, 222, 223], "builder": 215, "class_nam": 216, "convert": 217, "externalsourc": 218, "nlu_2_python": 220, "python_2_scala": 221, "source_load": 222, "upload": 223, "updatemodel": 224, "alab_util": 226, "conll_pars": 227, "database_deidentif": 228, "date_shift_fil": 229, "deidentification_util": 230, "exception_handling_util": 231, "import": 232, "java_help": 234, "licensed_annotator_typ": 235, "log_pars": 236, "ner_util": 237, "ocr_nlp_processor": 238, "ocr_util": 239, "risk_adjustment_util": 240, "run_transpiled_cod": 241, "training_log_parser_util": 242, "visualner_annotations_pars": 243, "api": 244, "refer": 244}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"sparknlp_jsl": [[0, "module-sparknlp_jsl"], [3, "module-sparknlp_jsl"], [172, "module-sparknlp_jsl"]], "Getting Started": [[1, "getting-started"]], "Requirements": [[1, "requirements"]], "Installation": [[1, "installation"]], "Starting a Spark NLP Session from Python": [[1, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[2, "spark-nlp-documentation"]], "Content": [[2, "content"]], "Quick Start": [[2, "quick-start"]], "sparknlp_jsl.annotator": [[4, "module-sparknlp_jsl.annotator"], [74, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.finance": [[5, "module-sparknlp_jsl.finance"], [154, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.legal": [[6, "module-sparknlp_jsl.legal"], [188, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.utils": [[7, "module-sparknlp_jsl.utils"], [233, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.alab": [[8, "module-sparknlp_jsl.alab"]], "Module Contents": [[8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [97, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [142, "module-contents"], [143, "module-contents"], [146, "module-contents"], [147, "module-contents"], [149, "module-contents"], [152, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [186, "module-contents"], [187, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"]], "Classes": [[8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [64, "classes"], [66, "classes"], [67, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [97, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [152, "classes"], [153, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [165, "classes"], [167, "classes"], [168, "classes"], [170, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [186, "classes"], [187, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [216, "classes"], [224, "classes"], [228, "classes"], [229, "classes"], [235, "classes"], [240, "classes"], [241, "classes"]], "sparknlp_jsl.annotator.annotation_converter": [[9, "module-sparknlp_jsl.annotator.annotation_converter"]], "sparknlp_jsl.annotator.annotation_merger": [[10, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[11, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[12, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "Example:": [[12, "example"], [41, "example"], [42, "example"], [45, "example"], [45, "id9"], [45, "id10"], [45, "id11"], [46, "example"], [46, "id5"], [46, "id6"], [46, "id18"], [46, "id19"], [46, "id20"], [46, "id21"], [47, "example"], [47, "id5"], [47, "id6"], [47, "id7"], [50, "example"], [50, "id5"], [50, "id6"], [50, "id7"], [50, "id8"], [67, "example"], [67, "id13"], [106, "example"], [142, "example"], [142, "id9"], [142, "id10"], [142, "id25"], [142, "id26"], [142, "id27"], [142, "id28"], [176, "example"], [176, "id9"], [176, "id10"], [176, "id25"], [176, "id26"], [176, "id27"], [176, "id28"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[13, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[14, "module-sparknlp_jsl.annotator.assertion.assertion_merger"]], "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification": [[15, "module-sparknlp_jsl.annotator.assertion.bert_for_assertion_classification"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[16, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[17, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"]], "sparknlp_jsl.annotator.assertion": [[18, "module-sparknlp_jsl.annotator.assertion"]], "Submodules": [[18, "submodules"], [28, "submodules"], [36, "submodules"], [44, "submodules"], [49, "submodules"], [54, "submodules"], [63, "submodules"], [65, "submodules"], [68, "submodules"], [72, "submodules"], [74, "submodules"], [75, "submodules"], [78, "submodules"], [81, "submodules"], [85, "submodules"], [95, "submodules"], [96, "submodules"], [98, "submodules"], [101, "submodules"], [105, "submodules"], [107, "submodules"], [112, "submodules"], [114, "submodules"], [119, "submodules"], [125, "submodules"], [129, "submodules"], [135, "submodules"], [141, "submodules"], [144, "submodules"], [148, "submodules"], [151, "submodules"], [159, "submodules"], [164, "submodules"], [169, "submodules"], [172, "submodules"], [175, "submodules"], [178, "submodules"], [182, "submodules"], [185, "submodules"], [189, "submodules"], [194, "submodules"], [201, "submodules"], [205, "submodules"], [219, "submodules"], [233, "submodules"]], "sparknlp_jsl.annotator.chunk2_token": [[19, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[20, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[21, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[22, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[23, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[24, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[25, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[26, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[27, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[28, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[29, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[30, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[31, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[32, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[33, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[34, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[35, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[36, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[37, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[38, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[39, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[40, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_entity_filterer": [[41, "module-sparknlp_jsl.annotator.context.contextual_entity_filterer"]], "Notes:": [[41, "notes"], [41, "id29"], [42, "notes"], [42, "id1"], [106, "notes"], [106, "id1"]], "sparknlp_jsl.annotator.context.contextual_entity_ruler": [[42, "module-sparknlp_jsl.annotator.context.contextual_entity_ruler"]], "sparknlp_jsl.annotator.context.contextual_parser": [[43, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[44, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.base_deidentification_params": [[45, "module-sparknlp_jsl.annotator.deid.base_deidentification_params"]], "Functionality Overview": [[45, "functionality-overview"], [46, "functionality-overview"], [46, "id9"], [47, "functionality-overview"], [50, "functionality-overview"], [142, "functionality-overview"], [142, "id16"], [176, "functionality-overview"], [176, "id16"]], "Supported Entity Types": [[45, "supported-entity-types"], [46, "supported-entity-types"], [46, "id10"], [47, "supported-entity-types"], [50, "supported-entity-types"], [142, "supported-entity-types"], [142, "id17"], [176, "supported-entity-types"], [176, "id17"]], "Language Requirement": [[45, "language-requirement"], [46, "language-requirement"], [46, "id11"], [47, "language-requirement"], [50, "language-requirement"], [142, "language-requirement"], [142, "id18"], [176, "language-requirement"], [176, "id18"]], "Consistency Algorithm": [[45, "consistency-algorithm"], [46, "consistency-algorithm"], [46, "id12"], [47, "consistency-algorithm"], [50, "consistency-algorithm"], [142, "consistency-algorithm"], [142, "id19"], [176, "consistency-algorithm"], [176, "id19"]], "Parameter Interactions": [[45, "parameter-interactions"], [46, "parameter-interactions"], [46, "id13"], [47, "parameter-interactions"], [50, "parameter-interactions"], [142, "parameter-interactions"], [142, "id20"], [176, "parameter-interactions"], [176, "id20"]], "sparknlp_jsl.annotator.deid.deIdentification": [[46, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Default and example dictionary": [[46, "default-and-example-dictionary"], [46, "id8"], [47, "default-and-example-dictionary"], [142, "default-and-example-dictionary"], [142, "id15"], [176, "default-and-example-dictionary"], [176, "id15"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[47, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[48, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[49, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.light_deIdentification": [[50, "module-sparknlp_jsl.annotator.deid.light_deIdentification"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[51, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[52, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[53, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[54, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[55, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[56, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[57, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[58, "module-sparknlp_jsl.annotator.document_filterer_by_ner"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[59, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[60, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[61, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[62, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "sparknlp_jsl.annotator.embeddings": [[63, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[64, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "sparknlp_jsl.annotator.er": [[65, "module-sparknlp_jsl.annotator.er"]], "sparknlp_jsl.annotator.feature_assembler": [[66, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.fhir.fhir_deIdentification": [[67, "module-sparknlp_jsl.annotator.fhir.fhir_deIdentification"]], "Overview": [[67, "overview"]], "Rule Format": [[67, "rule-format"]], "sparknlp_jsl.annotator.fhir": [[68, "module-sparknlp_jsl.annotator.fhir"]], "sparknlp_jsl.annotator.filtering_params": [[69, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.flattener": [[70, "module-sparknlp_jsl.annotator.flattener"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[71, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[72, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator.handle_exception_params": [[73, "module-sparknlp_jsl.annotator.handle_exception_params"]], "Subpackages": [[74, "subpackages"], [145, "subpackages"], [150, "subpackages"], [154, "subpackages"], [166, "subpackages"], [172, "subpackages"], [179, "subpackages"], [184, "subpackages"], [188, "subpackages"], [200, "subpackages"], [219, "subpackages"]], "Package Contents": [[74, "package-contents"], [172, "package-contents"]], "sparknlp_jsl.annotator.matcher": [[75, "module-sparknlp_jsl.annotator.matcher"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[76, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "sparknlp_jsl.annotator.matcher.text_matcher_params": [[77, "module-sparknlp_jsl.annotator.matcher.text_matcher_params"]], "sparknlp_jsl.annotator.medical_llm": [[78, "module-sparknlp_jsl.annotator.medical_llm"]], "sparknlp_jsl.annotator.medical_llm.medical_llm": [[79, "module-sparknlp_jsl.annotator.medical_llm.medical_llm"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[80, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[81, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.merge.re_chunk_merger": [[82, "module-sparknlp_jsl.annotator.merge.re_chunk_merger"]], "sparknlp_jsl.annotator.metadata_annotation_converter": [[83, "module-sparknlp_jsl.annotator.metadata_annotation_converter"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[84, "module-sparknlp_jsl.annotator.multi_chunk2_doc"]], "sparknlp_jsl.annotator.ner": [[85, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[86, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[87, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[88, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[89, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[90, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner": [[91, "module-sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[92, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[93, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[94, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[95, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.params": [[96, "module-sparknlp_jsl.annotator.params"]], "sparknlp_jsl.annotator.params.reset_sentence_indices_param": [[97, "module-sparknlp_jsl.annotator.params.reset_sentence_indices_param"]], "sparknlp_jsl.annotator.parser": [[98, "module-sparknlp_jsl.annotator.parser"]], "sparknlp_jsl.annotator.parser.structured_json_converter": [[99, "module-sparknlp_jsl.annotator.parser.structured_json_converter"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[100, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[101, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[102, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[103, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[104, "module-sparknlp_jsl.annotator.rag.context_split_assembler"]], "sparknlp_jsl.annotator.rag": [[105, "module-sparknlp_jsl.annotator.rag"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[106, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"]], "sparknlp_jsl.annotator.re": [[107, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[108, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[109, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[110, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[111, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.regex": [[112, "module-sparknlp_jsl.annotator.regex"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[113, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "sparknlp_jsl.annotator.resolution": [[114, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[115, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[116, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[117, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[118, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[119, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[120, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[121, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[122, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[123, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[124, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.splitter": [[125, "module-sparknlp_jsl.annotator.splitter"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[126, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "sparknlp_jsl.annotator.tf_graph_builder": [[127, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.white_black_list_params": [[128, "module-sparknlp_jsl.annotator.white_black_list_params"]], "sparknlp_jsl.annotator.windowed": [[129, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[130, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[131, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[132, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[133, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[134, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[135, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[136, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[137, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[138, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[139, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[140, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[141, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[142, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[143, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[144, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[145, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[146, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[147, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[148, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[149, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[150, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[151, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[152, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[153, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[155, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[156, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[157, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[158, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[159, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[160, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[161, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[162, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[163, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[164, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[165, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[166, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[167, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[168, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[169, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[170, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[171, "module-sparknlp_jsl.functions"]], "Functions": [[171, "functions"], [172, "functions"], [173, "functions"], [210, "functions"], [215, "functions"], [217, "functions"], [220, "functions"], [221, "functions"], [222, "functions"], [223, "functions"], [225, "functions"], [226, "functions"], [228, "functions"], [230, "functions"], [231, "functions"], [232, "functions"], [234, "functions"], [237, "functions"], [238, "functions"], [239, "functions"], [242, "functions"], [243, "functions"]], "INPUT PARAMETERS": [[171, "input-parameters"], [171, "id1"], [171, "id3"], [171, "id5"], [171, "id7"], [171, "id9"], [171, "id11"], [171, "id13"], [171, "id15"], [171, "id17"], [171, "id19"], [171, "id21"], [171, "id23"], [171, "id25"], [171, "id27"], [171, "id29"], [171, "id31"], [171, "id33"], [171, "id35"], [171, "id37"], [171, "id39"], [171, "id41"], [171, "id43"], [171, "id45"], [171, "id47"]], "OUTPUT PARAMETERS": [[171, "output-parameters"], [171, "id2"], [171, "id4"], [171, "id6"], [171, "id8"], [171, "id10"], [171, "id12"], [171, "id14"], [171, "id16"], [171, "id18"], [171, "id20"], [171, "id22"], [171, "id24"], [171, "id26"], [171, "id28"], [171, "id30"], [171, "id32"], [171, "id34"], [171, "id36"], [171, "id38"], [171, "id40"], [171, "id42"], [171, "id44"], [171, "id46"], [171, "id48"]], "Attributes": [[172, "attributes"], [213, "attributes"], [220, "attributes"], [223, "attributes"], [226, "attributes"], [238, "attributes"], [239, "attributes"]], "sparknlp_jsl.internal": [[173, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[174, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[175, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[176, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[177, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[178, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[179, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[180, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[181, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[182, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[183, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "Parameters:": [[183, "parameters"], [209, "parameters"], [209, "id1"], [209, "id2"]], "sparknlp_jsl.legal.graph": [[184, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[185, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[186, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[187, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal.sequence_classification": [[189, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[190, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[191, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[192, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[193, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[194, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[195, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[196, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[197, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[198, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[199, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[200, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[201, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[202, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[203, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[204, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.llm": [[205, "module-sparknlp_jsl.llm"]], "sparknlp_jsl.llm.llm_loader": [[206, "module-sparknlp_jsl.llm.llm_loader"]], "sparknlp_jsl.modelTracer": [[207, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.pipeline_output_parser": [[208, "module-sparknlp_jsl.pipeline_output_parser"]], "sparknlp_jsl.pipeline_tracer": [[209, "module-sparknlp_jsl.pipeline_tracer"]], "Returns:": [[209, "returns"]], "Throws:": [[209, "throws"]], "sparknlp_jsl.pretrained": [[210, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[211, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[212, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[213, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[214, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.transpiler.builder": [[215, "module-sparknlp_jsl.transpiler.builder"]], "sparknlp_jsl.transpiler.class_names": [[216, "module-sparknlp_jsl.transpiler.class_names"]], "sparknlp_jsl.transpiler.converter": [[217, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalSources": [[218, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[219, "module-sparknlp_jsl.transpiler"]], "sparknlp_jsl.transpiler.nlu_2_python": [[220, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "sparknlp_jsl.transpiler.python_2_scala": [[221, "module-sparknlp_jsl.transpiler.python_2_scala"]], "sparknlp_jsl.transpiler.source_loader": [[222, "module-sparknlp_jsl.transpiler.source_loader"]], "sparknlp_jsl.transpiler.uploader": [[223, "module-sparknlp_jsl.transpiler.uploader"]], "sparknlp_jsl.updateModels": [[224, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[225, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[226, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[227, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.database_deidentification": [[228, "module-sparknlp_jsl.utils.database_deidentification"]], "sparknlp_jsl.utils.date_shift_filler": [[229, "module-sparknlp_jsl.utils.date_shift_filler"]], "sparknlp_jsl.utils.deidentification_utils": [[230, "module-sparknlp_jsl.utils.deidentification_utils"]], "sparknlp_jsl.utils.exception_handling_utils": [[231, "module-sparknlp_jsl.utils.exception_handling_utils"]], "sparknlp_jsl.utils.imports": [[232, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils.java_helper": [[234, "module-sparknlp_jsl.utils.java_helper"]], "sparknlp_jsl.utils.licensed_annotator_type": [[235, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[236, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[237, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[238, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[239, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[240, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "sparknlp_jsl.utils.run_transpiled_code": [[241, "module-sparknlp_jsl.utils.run_transpiled_code"]], "sparknlp_jsl.utils.training_log_parser_utils": [[242, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[243, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "API Reference": [[244, "api-reference"]], "Modules": [[244, "modules"]]}, "indexentries": {"get_credentials() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.get_credentials"], [3, "sparknlp_jsl.get_credentials"], [172, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.library_settings"], [3, "sparknlp_jsl.library_settings"], [172, "sparknlp_jsl.library_settings"]], "module": [[0, "module-sparknlp_jsl"], [3, "module-sparknlp_jsl"], [4, "module-sparknlp_jsl.annotator"], [5, "module-sparknlp_jsl.finance"], [6, "module-sparknlp_jsl.legal"], [7, "module-sparknlp_jsl.utils"], [8, "module-sparknlp_jsl.alab"], [9, "module-sparknlp_jsl.annotator.annotation_converter"], [10, "module-sparknlp_jsl.annotator.annotation_merger"], [11, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [12, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [13, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [14, "module-sparknlp_jsl.annotator.assertion.assertion_merger"], [15, "module-sparknlp_jsl.annotator.assertion.bert_for_assertion_classification"], [16, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"], [17, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"], [18, "module-sparknlp_jsl.annotator.assertion"], [19, "module-sparknlp_jsl.annotator.chunk2_token"], [20, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [21, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [22, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [23, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [24, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [25, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [26, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [27, "module-sparknlp_jsl.annotator.chunker.docmapper"], [28, "module-sparknlp_jsl.annotator.chunker"], [29, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"], [30, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [31, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [32, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"], [33, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"], [34, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [35, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [36, "module-sparknlp_jsl.annotator.classification"], [37, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"], [38, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [39, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [40, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [41, "module-sparknlp_jsl.annotator.context.contextual_entity_filterer"], [42, "module-sparknlp_jsl.annotator.context.contextual_entity_ruler"], [43, "module-sparknlp_jsl.annotator.context.contextual_parser"], [44, "module-sparknlp_jsl.annotator.context"], [45, "module-sparknlp_jsl.annotator.deid.base_deidentification_params"], [46, "module-sparknlp_jsl.annotator.deid.deIdentification"], [47, "module-sparknlp_jsl.annotator.deid.deidentication_params"], [48, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [49, "module-sparknlp_jsl.annotator.deid"], [50, "module-sparknlp_jsl.annotator.deid.light_deIdentification"], [51, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [52, "module-sparknlp_jsl.annotator.deid.reIdentification"], [53, "module-sparknlp_jsl.annotator.deid.replacer"], [54, "module-sparknlp_jsl.annotator.disambiguation"], [55, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [56, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [57, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"], [58, "module-sparknlp_jsl.annotator.document_filterer_by_ner"], [59, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [60, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [61, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [62, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"], [63, "module-sparknlp_jsl.annotator.embeddings"], [64, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"], [65, "module-sparknlp_jsl.annotator.er"], [66, "module-sparknlp_jsl.annotator.feature_assembler"], [67, "module-sparknlp_jsl.annotator.fhir.fhir_deIdentification"], [68, "module-sparknlp_jsl.annotator.fhir"], [69, "module-sparknlp_jsl.annotator.filtering_params"], [70, "module-sparknlp_jsl.annotator.flattener"], [71, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [72, "module-sparknlp_jsl.annotator.generic_classifier"], [73, "module-sparknlp_jsl.annotator.handle_exception_params"], [74, "module-sparknlp_jsl.annotator"], [75, "module-sparknlp_jsl.annotator.matcher"], [76, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"], [77, "module-sparknlp_jsl.annotator.matcher.text_matcher_params"], [78, "module-sparknlp_jsl.annotator.medical_llm"], [79, "module-sparknlp_jsl.annotator.medical_llm.medical_llm"], [80, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [81, "module-sparknlp_jsl.annotator.merge"], [82, "module-sparknlp_jsl.annotator.merge.re_chunk_merger"], [83, "module-sparknlp_jsl.annotator.metadata_annotation_converter"], [84, "module-sparknlp_jsl.annotator.multi_chunk2_doc"], [85, "module-sparknlp_jsl.annotator.ner"], [86, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [87, "module-sparknlp_jsl.annotator.ner.medical_ner"], [88, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [89, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [90, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [91, "module-sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner"], [92, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [93, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [94, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [95, "module-sparknlp_jsl.annotator.normalizer"], [96, "module-sparknlp_jsl.annotator.params"], [97, "module-sparknlp_jsl.annotator.params.reset_sentence_indices_param"], [98, "module-sparknlp_jsl.annotator.parser"], [99, "module-sparknlp_jsl.annotator.parser.structured_json_converter"], [100, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [101, "module-sparknlp_jsl.annotator.qa"], [102, "module-sparknlp_jsl.annotator.qa.medical_qa"], [103, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [104, "module-sparknlp_jsl.annotator.rag.context_split_assembler"], [105, "module-sparknlp_jsl.annotator.rag"], [106, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"], [107, "module-sparknlp_jsl.annotator.re"], [108, "module-sparknlp_jsl.annotator.re.relation_extraction"], [109, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [110, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [111, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [112, "module-sparknlp_jsl.annotator.regex"], [113, "module-sparknlp_jsl.annotator.regex.regex_matcher"], [114, "module-sparknlp_jsl.annotator.resolution"], [115, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [116, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [117, "module-sparknlp_jsl.annotator.resolution2_chunk"], [118, "module-sparknlp_jsl.annotator.router"], [119, "module-sparknlp_jsl.annotator.seq2seq"], [120, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [121, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [122, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [123, "module-sparknlp_jsl.annotator.seq2seq.text2sql"], [124, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [125, "module-sparknlp_jsl.annotator.splitter"], [126, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"], [127, "module-sparknlp_jsl.annotator.tf_graph_builder"], [128, "module-sparknlp_jsl.annotator.white_black_list_params"], [129, "module-sparknlp_jsl.annotator.windowed"], [130, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [131, "module-sparknlp_jsl.base"], [132, "module-sparknlp_jsl.common.annotator_approach_internal"], [133, "module-sparknlp_jsl.common.annotator_model_internal"], [134, "module-sparknlp_jsl.common.annotator_properties_internal"], [135, "module-sparknlp_jsl.common"], [136, "module-sparknlp_jsl.compatibility"], [137, "module-sparknlp_jsl.custom_transformer"], [138, "module-sparknlp_jsl.deidentification_module"], [139, "module-sparknlp_jsl.eval"], [140, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [141, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [142, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [143, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [144, "module-sparknlp_jsl.finance.chunk_classification.deid"], [145, "module-sparknlp_jsl.finance.chunk_classification"], [146, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [147, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [148, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [149, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [150, "module-sparknlp_jsl.finance.graph"], [151, "module-sparknlp_jsl.finance.graph.relation_extraction"], [152, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [153, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [154, "module-sparknlp_jsl.finance"], [155, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [156, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [157, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [158, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"], [159, "module-sparknlp_jsl.finance.sequence_classification"], [160, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [161, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [162, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [163, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [164, "module-sparknlp_jsl.finance.sequence_generation"], [165, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [166, "module-sparknlp_jsl.finance.token_classification"], [167, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [168, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [169, "module-sparknlp_jsl.finance.token_classification.ner"], [170, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [171, "module-sparknlp_jsl.functions"], [172, "module-sparknlp_jsl"], [173, "module-sparknlp_jsl.internal"], [174, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [175, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [176, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [177, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [178, "module-sparknlp_jsl.legal.chunk_classification.deid"], [179, "module-sparknlp_jsl.legal.chunk_classification"], [180, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [181, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [182, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [183, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [184, "module-sparknlp_jsl.legal.graph"], [185, "module-sparknlp_jsl.legal.graph.relation_extraction"], [186, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [187, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [188, "module-sparknlp_jsl.legal"], [189, "module-sparknlp_jsl.legal.sequence_classification"], [190, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [191, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [192, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [193, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"], [194, "module-sparknlp_jsl.legal.sequence_generation"], [195, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [196, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [197, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [198, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [199, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [200, "module-sparknlp_jsl.legal.token_classification"], [201, "module-sparknlp_jsl.legal.token_classification.ner"], [202, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [203, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [204, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [205, "module-sparknlp_jsl.llm"], [206, "module-sparknlp_jsl.llm.llm_loader"], [207, "module-sparknlp_jsl.modelTracer"], [208, "module-sparknlp_jsl.pipeline_output_parser"], [209, "module-sparknlp_jsl.pipeline_tracer"], [210, "module-sparknlp_jsl.pretrained"], [211, "module-sparknlp_jsl.structured_deidentification"], [212, "module-sparknlp_jsl.text_to_documents_columns"], [213, "module-sparknlp_jsl.training"], [214, "module-sparknlp_jsl.training_log_parser"], [215, "module-sparknlp_jsl.transpiler.builder"], [216, "module-sparknlp_jsl.transpiler.class_names"], [217, "module-sparknlp_jsl.transpiler.converter"], [218, "module-sparknlp_jsl.transpiler.externalSources"], [219, "module-sparknlp_jsl.transpiler"], [220, "module-sparknlp_jsl.transpiler.nlu_2_python"], [221, "module-sparknlp_jsl.transpiler.python_2_scala"], [222, "module-sparknlp_jsl.transpiler.source_loader"], [223, "module-sparknlp_jsl.transpiler.uploader"], [224, "module-sparknlp_jsl.updateModels"], [225, "module-sparknlp_jsl.util"], [226, "module-sparknlp_jsl.utils.alab_utils"], [227, "module-sparknlp_jsl.utils.conll_parse"], [228, "module-sparknlp_jsl.utils.database_deidentification"], [229, "module-sparknlp_jsl.utils.date_shift_filler"], [230, "module-sparknlp_jsl.utils.deidentification_utils"], [231, "module-sparknlp_jsl.utils.exception_handling_utils"], [232, "module-sparknlp_jsl.utils.imports"], [233, "module-sparknlp_jsl.utils"], [234, "module-sparknlp_jsl.utils.java_helper"], [235, "module-sparknlp_jsl.utils.licensed_annotator_type"], [236, "module-sparknlp_jsl.utils.log_parse"], [237, "module-sparknlp_jsl.utils.ner_utils"], [238, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [239, "module-sparknlp_jsl.utils.ocr_utils"], [240, "module-sparknlp_jsl.utils.risk_adjustment_utils"], [241, "module-sparknlp_jsl.utils.run_transpiled_code"], [242, "module-sparknlp_jsl.utils.training_log_parser_utils"], [243, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "pub_version() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.pub_version"], [3, "sparknlp_jsl.pub_version"], [172, "sparknlp_jsl.pub_version"]], "sparknlp_jsl": [[0, "module-sparknlp_jsl"], [3, "module-sparknlp_jsl"], [172, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.start"], [3, "sparknlp_jsl.start"], [172, "sparknlp_jsl.start"]], "version() (in module sparknlp_jsl)": [[0, "sparknlp_jsl.version"], [3, "sparknlp_jsl.version"], [172, "sparknlp_jsl.version"]], "sparknlp_jsl.annotator": [[4, "module-sparknlp_jsl.annotator"], [74, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.finance": [[5, "module-sparknlp_jsl.finance"], [154, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.legal": [[6, "module-sparknlp_jsl.legal"], [188, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.utils": [[7, "module-sparknlp_jsl.utils"], [233, "module-sparknlp_jsl.utils"]], "annotationlab (class in sparknlp_jsl.alab)": [[8, "sparknlp_jsl.alab.AnnotationLab"]], "base_url (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.base_url"]], "check_preannotations_summary() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.check_preannotations_summary"]], "client_id (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.client_id"]], "client_secret (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.client_secret"]], "cookies (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.cookies"]], "create_project() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_conll_data_from_visualner() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_conll_data_from_visualner"]], "get_project_config() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "http_success_codes (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.http_success_codes"]], "password (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.password"]], "review_annotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[8, "module-sparknlp_jsl.alab"]], "ssl_verification (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.ssl_verification"]], "upload_preannotations() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[8, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "username (annotationlab attribute)": [[8, "sparknlp_jsl.alab.AnnotationLab.username"]], "annotationconverter (class in sparknlp_jsl.annotator.annotation_converter)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter"]], "clear() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.clear"]], "copy() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.copy"]], "explainparam() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.explainParam"]], "explainparams() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.explainParams"]], "extractparammap() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.extractParamMap"]], "functionstr (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.functionStr"]], "getinputcol() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getInputCol"]], "getordefault() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getOrDefault"]], "getoutputannotatortype() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getOutputAnnotatorType"]], "getoutputcol() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getOutputCol"]], "getparam() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getParam"]], "getparamvalue() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getParamValue"]], "getter_attrs (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.getter_attrs"]], "hasdefault() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.hasDefault"]], "hasparam() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.hasParam"]], "inputcol (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.inputCol"]], "isdefined() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.isDefined"]], "isset() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.isSet"]], "load() (annotationconverter class method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.load"]], "name (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.name"]], "outputannotatortype (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.outputAnnotatorType"]], "outputcol (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.outputCol"]], "read() (annotationconverter class method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.read"]], "save() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.save"]], "set() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.set"]], "setinputcol() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.setInputCol"]], "setoutputannotatortype() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.setOutputAnnotatorType"]], "setoutputcol() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.setOutputCol"]], "setparamvalue() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.setParamValue"]], "setparams() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.setParams"]], "sparknlp_jsl.annotator.annotation_converter": [[9, "module-sparknlp_jsl.annotator.annotation_converter"]], "transform() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.transform"]], "uid (annotationconverter attribute)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.uid"]], "write() (annotationconverter method)": [[9, "sparknlp_jsl.annotator.annotation_converter.AnnotationConverter.write"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "clear() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.clear"]], "copy() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.copy"]], "explainparam() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.explainParam"]], "explainparams() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.explainParams"]], "extractparammap() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.extractParamMap"]], "getinputcols() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getInputCols"]], "getlazyannotator() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getLazyAnnotator"]], "getordefault() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getOrDefault"]], "getoutputcol() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getOutputCol"]], "getparam() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getParam"]], "getparamvalue() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getParamValue"]], "getter_attrs (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.getter_attrs"]], "hasdefault() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.hasDefault"]], "hasparam() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.hasParam"]], "inputannotatortypes (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputcols (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputCols"]], "inputcolsvalidation() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputColsValidation"]], "inputtype (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "isdefined() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.isDefined"]], "isset() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.isSet"]], "lazyannotator (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.lazyAnnotator"]], "load() (annotationmerger class method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.load"]], "name (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "optionalinputannotatortypes (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "outputcol (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputCol"]], "read() (annotationmerger class method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.read"]], "save() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.save"]], "set() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.set"]], "setforceinputtypevalidation() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setForceInputTypeValidation"]], "setinputcols() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "setlazyannotator() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setLazyAnnotator"]], "setoutputcol() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setOutputCol"]], "setparamvalue() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setParamValue"]], "setparams() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setParams"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[10, "module-sparknlp_jsl.annotator.annotation_merger"]], "transform() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.transform"]], "uid (annotationmerger attribute)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.uid"]], "write() (annotationmerger method)": [[10, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.write"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.batchSize"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.batchSize"]], "blacklist (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.blackList"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.blackList"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.blackList"]], "casesensitive (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.caseSensitive"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.caseSensitive"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.caseSensitive"]], "classes (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.classes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.classes"]], "clear() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.clear"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.clear"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.clear"]], "clear() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.clear"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.clear"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.clear"]], "configprotobytes (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.configProtoBytes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.configProtoBytes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "copy() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.copy"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.copy"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.copy"]], "copy() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.copy"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.copy"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.copy"]], "datasetinfo (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.datasetInfo"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.datasetInfo"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.datasetInfo"]], "datasetinfo (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.datasetInfo"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.datasetInfo"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.datasetInfo"]], "doexceptionhandling (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.doExceptionHandling"]], "dropout (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.dropout"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.endCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.endCol"]], "engine (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.engine"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.engine"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.engine"]], "entityassertioncasesensitive (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.entityAssertionCaseSensitive"]], "epochs (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.epochs"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.epochs"]], "explainparam() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.explainParam"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParam"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParam"]], "explainparam() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.explainParam"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParam"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParam"]], "explainparams() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.explainParams"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParams"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.explainParams"]], "explainparams() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.explainParams"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParams"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.explainParams"]], "extractparammap() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.extractParamMap"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.extractParamMap"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.extractParamMap"]], "extractparammap() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.extractParamMap"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.extractParamMap"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.extractParamMap"]], "fit() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.fit"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.fit"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.fit"]], "fitmultiple() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.fitMultiple"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.fitMultiple"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.fitMultiple"]], "getengine() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getEngine"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getEngine"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getEngine"]], "getentityassertion() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getEntityAssertion"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getEntityAssertion"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getEntityAssertion"]], "getinputcols() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getInputCols"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getInputCols"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getInputCols"]], "getinputcols() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getInputCols"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getInputCols"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getInputCols"]], "getlazyannotator() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getLazyAnnotator"]], "getlazyannotator() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getLazyAnnotator"]], "getordefault() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getOrDefault"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOrDefault"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOrDefault"]], "getordefault() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getOrDefault"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getOrDefault"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getOrDefault"]], "getoutputcol() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getOutputCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOutputCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getOutputCol"]], "getoutputcol() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getOutputCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getOutputCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getOutputCol"]], "getparam() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getParam"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParam"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParam"]], "getparam() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getParam"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getParam"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getParam"]], "getparamvalue() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getParamValue"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParamValue"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getParamValue"]], "getparamvalue() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getParamValue"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getParamValue"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getParamValue"]], "getreplacelabels() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getReplaceLabels"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getReplaceLabels"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getReplaceLabels"]], "getstorageref() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getStorageRef"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getStorageRef"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getStorageRef"]], "getter_attrs (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.getter_attrs"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.getter_attrs"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.getter_attrs"]], "getter_attrs (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.getter_attrs"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.getter_attrs"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.getter_attrs"]], "graphfile (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFile"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFolder"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "hasdefault() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.hasDefault"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasDefault"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasDefault"]], "hasdefault() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.hasDefault"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.hasDefault"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.hasDefault"]], "hasparam() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.hasParam"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasParam"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.hasParam"]], "hasparam() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.hasParam"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.hasParam"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.hasParam"]], "includeconfidence (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.includeConfidence"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.includeConfidence"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "inputcols (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputCols"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputCols"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputCols"]], "inputcols (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputCols"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputCols"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputCols"]], "inputcolsvalidation() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputColsValidation"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputColsValidation"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.inputColsValidation"]], "inputcolsvalidation() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputColsValidation"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.inputColsValidation"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.inputColsValidation"]], "isdefined() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.isDefined"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.isDefined"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.isDefined"]], "isdefined() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.isDefined"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.isDefined"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.isDefined"]], "isset() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.isSet"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.isSet"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.isSet"]], "isset() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.isSet"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.isSet"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.isSet"]], "label (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.label"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.label"]], "lazyannotator (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.lazyAnnotator"]], "lazyannotator (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.lazyAnnotator"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.lazyAnnotator"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.lazyAnnotator"]], "learningrate (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.learningRate"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.learningRate"]], "load() (assertiondlapproach class method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.load"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.load"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.load"]], "load() (assertiondlmodel class method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.load"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.load"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.load"]], "maxsentlen (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.maxSentLen"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.maxSentLen"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "optionalinputannotatortypes (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputcol (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputCol"]], "outputcol (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.outputCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.outputCol"]], "outputlogspath (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputLogsPath"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "read() (assertiondlapproach class method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.read"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.read"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.read"]], "read() (assertiondlmodel class method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.read"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.read"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.read"]], "save() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.save"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.save"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.save"]], "save() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.save"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.save"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.save"]], "scopewindow (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.scopeWindow"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.scopeWindow"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "set() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.set"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.set"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.set"]], "set() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.set"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.set"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.set"]], "setbatchsize() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBatchSize"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setblacklist() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBlackList"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBlackList"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setBlackList"]], "setcasesensitive() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setCaseSensitive"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setCaseSensitive"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setCaseSensitive"]], "setconfigprotobytes() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdatasetinfo() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDatasetInfo"]], "setdatasetinfo() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setDatasetInfo"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setDatasetInfo"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setDatasetInfo"]], "setdenylist() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDenyList"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDenyList"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDenyList"]], "setdoexceptionhandling() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDoExceptionHandling"]], "setdropout() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDropout"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEndCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setentityassertion() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertion"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertion"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertion"]], "setentityassertioncasesensitive() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setEntityAssertionCaseSensitive"]], "setepochs() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEpochs"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setforceinputtypevalidation() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setForceInputTypeValidation"]], "setgraphfile() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFile"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFolder"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setinputcols() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setInputCols"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setInputCols"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setInputCols"]], "setinputcols() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setInputCols"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setInputCols"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setInputCols"]], "setlabelcol() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLabelCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlazyannotator() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLazyAnnotator"]], "setlazyannotator() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setLazyAnnotator"]], "setlearningrate() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLearningRate"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputcol() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputCol"]], "setoutputcol() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setOutputCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setOutputCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setOutputCol"]], "setoutputlogspath() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setparamvalue() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setParamValue"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setParamValue"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setParamValue"]], "setparamvalue() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setParamValue"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setParamValue"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setParamValue"]], "setparams() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setParams"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setParams"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setParams"]], "setreplacelabels() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setReplaceLabels"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setReplaceLabels"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setReplaceLabels"]], "setscopewindow() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setScopeWindow"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setScopeWindow"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setStartCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "setstorageref() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setStorageRef"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.setStorageRef"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.setStorageRef"]], "settestdataset() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setTestDataset"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setValidationSplit"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setVerbose"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "setwhitelist() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setWhiteList"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.setWhiteList"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.setWhiteList"]], "skiplpinputcolsvalidation (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[11, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.startCol"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.startCol"]], "storageref (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.storageRef"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.storageRef"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.storageRef"]], "targetnerlabels (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.targetNerLabels"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.testDataset"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.testDataset"]], "transform() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.transform"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.transform"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.transform"]], "uid (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.uid"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.uid"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.uid"]], "uid (assertiondlmodel attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.uid"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.uid"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.uid"]], "validationsplit (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.validationSplit"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.verbose"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.verbose"]], "whitelist (assertiondlapproach attribute)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.whiteList"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.whiteList"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.whiteList"]], "write() (assertiondlapproach method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.write"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach.write"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach.write"]], "write() (assertiondlmodel method)": [[11, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.write"], [140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.write"], [174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.write"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "clear() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.clear"]], "copy() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.copy"]], "explainparam() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.explainParam"]], "explainparams() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.explainParams"]], "extractparammap() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.extractParamMap"]], "getordefault() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getOrDefault"]], "getparam() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getParam"]], "getparamvalue() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getParamValue"]], "getter_attrs (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.getter_attrs"]], "hasdefault() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.hasDefault"]], "hasparam() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.hasParam"]], "inputannotatortypes (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "isdefined() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.isDefined"]], "isset() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.isSet"]], "load() (assertionchunkconverter class method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.load"]], "name (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "read() (assertionchunkconverter class method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.read"]], "save() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.save"]], "set() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.set"]], "setchunkbegincol() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setmetadatafields() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setMetadataFields"]], "setoutputcol() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparamvalue() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParamValue"]], "setparams() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[12, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "transform() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.transform"]], "uid (assertionchunkconverter attribute)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.uid"]], "write() (assertionchunkconverter method)": [[12, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.write"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "clear() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.clear"]], "clear() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.clear"]], "copy() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.copy"]], "copy() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.copy"]], "enetparam (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "explainparam() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.explainParam"]], "explainparam() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.explainParam"]], "explainparams() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.explainParams"]], "explainparams() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.explainParams"]], "extractparammap() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.extractParamMap"]], "extractparammap() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.extractParamMap"]], "fit() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.fit"]], "fitmultiple() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.fitMultiple"]], "getinputcols() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getInputCols"]], "getinputcols() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getInputCols"]], "getlazyannotator() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getLazyAnnotator"]], "getlazyannotator() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getLazyAnnotator"]], "getordefault() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getOrDefault"]], "getordefault() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getOrDefault"]], "getoutputcol() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getOutputCol"]], "getoutputcol() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getOutputCol"]], "getparam() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getParam"]], "getparam() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getParam"]], "getparamvalue() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getParamValue"]], "getparamvalue() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getParamValue"]], "getstorageref() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getStorageRef"]], "getter_attrs (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.getter_attrs"]], "getter_attrs (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.getter_attrs"]], "hasdefault() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.hasDefault"]], "hasdefault() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.hasDefault"]], "hasparam() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.hasParam"]], "hasparam() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.hasParam"]], "inputannotatortypes (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "inputcols (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputCols"]], "inputcols (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputCols"]], "inputcolsvalidation() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputColsValidation"]], "inputcolsvalidation() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputColsValidation"]], "isdefined() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.isDefined"]], "isdefined() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.isDefined"]], "isset() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.isSet"]], "isset() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.isSet"]], "label (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "lazyannotator (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.lazyAnnotator"]], "lazyannotator (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.lazyAnnotator"]], "load() (assertionlogregapproach class method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.load"]], "load() (assertionlogregmodel class method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.load"]], "maxiter (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "optionalinputannotatortypes (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.optionalInputAnnotatorTypes"]], "outputannotatortype (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "outputcol (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputCol"]], "outputcol (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputCol"]], "pretrained() (assertionlogregmodel static method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "read() (assertionlogregapproach class method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.read"]], "read() (assertionlogregmodel class method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.read"]], "regparam (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "save() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.save"]], "save() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.save"]], "set() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.set"]], "set() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.set"]], "setafter() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setforceinputtypevalidation() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setForceInputTypeValidation"]], "setinputcols() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setInputCols"]], "setinputcols() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setInputCols"]], "setlabelcol() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setlazyannotator() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLazyAnnotator"]], "setlazyannotator() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setLazyAnnotator"]], "setmaxiter() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setoutputcol() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setOutputCol"]], "setoutputcol() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setOutputCol"]], "setparamvalue() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setParamValue"]], "setparamvalue() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setParamValue"]], "setparams() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setParams"]], "setreg() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "setstorageref() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.setStorageRef"]], "settargetnerlabels() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "skiplpinputcolsvalidation (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[13, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "storageref (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.storageRef"]], "targetnerlabels (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "transform() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.transform"]], "uid (assertionlogregapproach attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.uid"]], "uid (assertionlogregmodel attribute)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.uid"]], "write() (assertionlogregapproach method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.write"]], "write() (assertionlogregmodel method)": [[13, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.write"]], "assertionmerger (class in sparknlp_jsl.annotator.assertion.assertion_merger)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger"]], "applyfilterbeforemerge (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.applyFilterBeforeMerge"]], "assertionsourceprecedence (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.assertionSourcePrecedence"]], "blacklist (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.blackList"]], "casesensitive (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.caseSensitive"]], "clear() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.clear"]], "copy() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.copy"]], "defaultconfidence (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.defaultConfidence"]], "explainparam() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.explainParam"]], "explainparams() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.explainParams"]], "extractparammap() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.extractParamMap"]], "getinputcols() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getInputCols"]], "getlazyannotator() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getLazyAnnotator"]], "getordefault() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getOrDefault"]], "getoutputcol() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getOutputCol"]], "getparam() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getParam"]], "getparamvalue() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getParamValue"]], "getter_attrs (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.getter_attrs"]], "hasdefault() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.hasDefault"]], "hasparam() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.hasParam"]], "inputannotatortypes (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputAnnotatorTypes"]], "inputcols (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputCols"]], "inputcolsvalidation() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.inputColsValidation"]], "isdefined() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.isDefined"]], "isset() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.isSet"]], "lazyannotator (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.lazyAnnotator"]], "load() (assertionmerger class method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.load"]], "majorityvoting (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.majorityVoting"]], "mergeoverlapping (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.mergeOverlapping"]], "name (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.name"]], "optionalinputannotatortypes (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.optionalInputAnnotatorTypes"]], "orderingfeatures (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.orderingFeatures"]], "outputannotatortype (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.outputAnnotatorType"]], "outputcol (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.outputCol"]], "read() (assertionmerger class method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.read"]], "save() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.save"]], "selectionstrategy (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.selectionStrategy"]], "set() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.set"]], "setapplyfilterbeforemerge() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setApplyFilterBeforeMerge"]], "setassertionsourceprecedence() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setAssertionSourcePrecedence"]], "setassertionsconfidence() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setAssertionsConfidence"]], "setblacklist() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setBlackList"]], "setcasesensitive() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setCaseSensitive"]], "setdefaultconfidence() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setDefaultConfidence"]], "setdenylist() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setDenyList"]], "setforceinputtypevalidation() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setForceInputTypeValidation"]], "setinputcols() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setInputCols"]], "setlazyannotator() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setLazyAnnotator"]], "setmajorityvoting() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setMajorityVoting"]], "setmergeoverlapping() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setMergeOverlapping"]], "setorderingfeatures() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setOrderingFeatures"]], "setoutputcol() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setOutputCol"]], "setparamvalue() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setParamValue"]], "setparams() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setParams"]], "setselectionstrategy() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setSelectionStrategy"]], "setsortbybegin() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setSortByBegin"]], "setwhitelist() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.setWhiteList"]], "skiplpinputcolsvalidation (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.skipLPInputColsValidation"]], "sortbybegin (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.sortByBegin"]], "sparknlp_jsl.annotator.assertion.assertion_merger": [[14, "module-sparknlp_jsl.annotator.assertion.assertion_merger"]], "transform() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.transform"]], "uid (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.uid"]], "whitelist (assertionmerger attribute)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.whiteList"]], "write() (assertionmerger method)": [[14, "sparknlp_jsl.annotator.assertion.assertion_merger.AssertionMerger.write"]], "bertforassertionclassification (class in sparknlp_jsl.annotator.assertion.bert_for_assertion_classification)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification"]], "blacklist (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.blackList"]], "casesensitive (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.caseSensitive"]], "classificationcasesensitive (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.classificationCaseSensitive"]], "clear() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.clear"]], "configprotobytes (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.configProtoBytes"]], "copy() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.copy"]], "engine (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.engine"]], "explainparam() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.explainParam"]], "explainparams() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.explainParams"]], "extractparammap() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.extractParamMap"]], "getclasses() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getClasses"]], "getengine() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getEngine"]], "getinputcols() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getInputCols"]], "getlazyannotator() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getLazyAnnotator"]], "getordefault() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getOrDefault"]], "getoutputcol() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getOutputCol"]], "getparam() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getParam"]], "getparamvalue() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getParamValue"]], "getter_attrs (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.getter_attrs"]], "hasdefault() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.hasDefault"]], "hasparam() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.hasParam"]], "inputannotatortypes (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.inputAnnotatorTypes"]], "inputcols (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.inputCols"]], "inputcolsvalidation() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.inputColsValidation"]], "isdefined() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.isDefined"]], "isset() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.isSet"]], "lazyannotator (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.lazyAnnotator"]], "load() (bertforassertionclassification class method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.load"]], "loadsavedmodel() (bertforassertionclassification static method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.loadSavedModel"]], "name (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.name"]], "optionalinputannotatortypes (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.outputAnnotatorType"]], "outputcol (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.outputCol"]], "pretrained() (bertforassertionclassification static method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.pretrained"]], "read() (bertforassertionclassification class method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.read"]], "save() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.save"]], "set() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.set"]], "setblacklist() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setBlackList"]], "setcasesensitive() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setCaseSensitive"]], "setclassificationcasesensitive() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setClassificationCaseSensitive"]], "setconfigprotobytes() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setConfigProtoBytes"]], "setdenylist() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setDenyList"]], "setforceinputtypevalidation() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setForceInputTypeValidation"]], "setinputcols() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setInputCols"]], "setlazyannotator() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setLazyAnnotator"]], "setoutputcol() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setOutputCol"]], "setparamvalue() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setParamValue"]], "setparams() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setParams"]], "setwhitelist() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.setWhiteList"]], "skiplpinputcolsvalidation (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification": [[15, "module-sparknlp_jsl.annotator.assertion.bert_for_assertion_classification"]], "transform() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.transform"]], "uid (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.uid"]], "whitelist (bertforassertionclassification attribute)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.whiteList"]], "write() (bertforassertionclassification method)": [[15, "sparknlp_jsl.annotator.assertion.bert_for_assertion_classification.BertForAssertionClassification.write"]], "contextualassertion (class in sparknlp_jsl.annotator.assertion.contextual_assertion)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion"]], "addprefixkeywords() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.addPrefixKeywords"]], "addsuffixkeywords() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.addSuffixKeywords"]], "assertion (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.assertion"]], "casesensitive (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.caseSensitive"]], "clear() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.clear"]], "confidencecalculationdirection (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.confidenceCalculationDirection"]], "copy() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.copy"]], "doexceptionhandling (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.doExceptionHandling"]], "explainparam() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.explainParam"]], "explainparams() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.explainParams"]], "extractparammap() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.extractParamMap"]], "getinputcols() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getInputCols"]], "getlazyannotator() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getLazyAnnotator"]], "getordefault() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getOrDefault"]], "getoutputcol() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getOutputCol"]], "getparam() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getParam"]], "getparamvalue() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getParamValue"]], "getter_attrs (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.getter_attrs"]], "hasdefault() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.hasDefault"]], "hasparam() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.hasParam"]], "includechunktoscope (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.includeChunkToScope"]], "inputannotatortypes (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputAnnotatorTypes"]], "inputcols (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputCols"]], "inputcolsvalidation() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.inputColsValidation"]], "isdefined() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.isDefined"]], "isset() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.isSet"]], "lazyannotator (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.lazyAnnotator"]], "load() (contextualassertion class method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.load"]], "name (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.name"]], "optionalinputannotatortypes (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.outputAnnotatorType"]], "outputcol (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.outputCol"]], "prefixandsuffixmatch (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.prefixAndSuffixMatch"]], "pretrained() (contextualassertion static method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.pretrained"]], "read() (contextualassertion class method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.read"]], "save() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.save"]], "scopewindow (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.scopeWindow"]], "scopewindowdelimiters (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.scopeWindowDelimiters"]], "set() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.set"]], "setassertion() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setAssertion"]], "setcasesensitive() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setCaseSensitive"]], "setconfidencecalculationdirection() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setConfidenceCalculationDirection"]], "setdoexceptionhandling() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setDoExceptionHandling"]], "setexceptionkeywords() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setExceptionKeywords"]], "setexceptionregexpatterns() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setExceptionRegexPatterns"]], "setforceinputtypevalidation() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setForceInputTypeValidation"]], "setincludechunktoscope() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setIncludeChunkToScope"]], "setinputcols() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setInputCols"]], "setlazyannotator() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setLazyAnnotator"]], "setoutputcol() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setOutputCol"]], "setparamvalue() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setParamValue"]], "setparams() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setParams"]], "setprefixandsuffixmatch() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixAndSuffixMatch"]], "setprefixkeywords() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixKeywords"]], "setprefixregexpatterns() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setPrefixRegexPatterns"]], "setscopewindow() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setScopeWindow"]], "setscopewindowdelimiters() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setScopeWindowDelimiters"]], "setsuffixkeywords() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setSuffixKeywords"]], "setsuffixregexpatterns() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.setSuffixRegexPatterns"]], "skiplpinputcolsvalidation (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion.contextual_assertion": [[16, "module-sparknlp_jsl.annotator.assertion.contextual_assertion"]], "transform() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.transform"]], "uid (contextualassertion attribute)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.uid"]], "write() (contextualassertion method)": [[16, "sparknlp_jsl.annotator.assertion.contextual_assertion.ContextualAssertion.write"]], "fewshotassertionsentenceconverter (class in sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter"]], "clear() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.clear"]], "copy() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.copy"]], "explainparam() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.explainParam"]], "explainparams() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.explainParams"]], "extractparammap() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.extractParamMap"]], "getordefault() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getOrDefault"]], "getparam() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getParam"]], "getparamvalue() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getParamValue"]], "getter_attrs (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.getter_attrs"]], "hasdefault() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.hasDefault"]], "hasparam() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.hasParam"]], "inputannotatortypes (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.inputAnnotatorTypes"]], "inputcols (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.inputCols"]], "isdefined() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.isDefined"]], "isset() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.isSet"]], "load() (fewshotassertionsentenceconverter class method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.load"]], "name (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.name"]], "outputannotatortype (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.outputAnnotatorType"]], "outputcol (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.outputCol"]], "read() (fewshotassertionsentenceconverter class method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.read"]], "save() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.save"]], "scopewindow (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.scopeWindow"]], "set() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.set"]], "setparamvalue() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setParamValue"]], "setparams() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setParams"]], "setscopewindow() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.setScopeWindow"]], "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter": [[17, "module-sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter"]], "transform() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.transform"]], "uid (fewshotassertionsentenceconverter attribute)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.uid"]], "write() (fewshotassertionsentenceconverter method)": [[17, "sparknlp_jsl.annotator.assertion.fewshot_assertion_sentence_converter.FewShotAssertionSentenceConverter.write"]], "sparknlp_jsl.annotator.assertion": [[18, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "clear() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.clear"]], "copy() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.copy"]], "explainparam() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.explainParam"]], "explainparams() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.explainParams"]], "extractparammap() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.extractParamMap"]], "getinputcols() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getInputCols"]], "getlazyannotator() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getLazyAnnotator"]], "getordefault() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getOrDefault"]], "getoutputcol() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getOutputCol"]], "getparam() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getParam"]], "getparamvalue() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getParamValue"]], "getter_attrs (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.getter_attrs"]], "hasdefault() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.hasDefault"]], "hasparam() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.hasParam"]], "inputannotatortypes (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "inputcols (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputCols"]], "inputcolsvalidation() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputColsValidation"]], "isdefined() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.isDefined"]], "isset() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.isSet"]], "lazyannotator (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.lazyAnnotator"]], "load() (chunk2token class method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.load"]], "name (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "optionalinputannotatortypes (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.optionalInputAnnotatorTypes"]], "outputannotatortype (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "outputcol (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputCol"]], "read() (chunk2token class method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.read"]], "save() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.save"]], "set() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.set"]], "setforceinputtypevalidation() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setForceInputTypeValidation"]], "setinputcols() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setInputCols"]], "setlazyannotator() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setLazyAnnotator"]], "setoutputcol() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setOutputCol"]], "setparamvalue() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setParamValue"]], "setparams() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.setParams"]], "skiplpinputcolsvalidation (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunk2_token": [[19, "module-sparknlp_jsl.annotator.chunk2_token"]], "transform() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.transform"]], "uid (chunk2token attribute)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.uid"]], "write() (chunk2token method)": [[19, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.write"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "blacklist (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.blackList"]], "casesensitive (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "clear() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.clear"]], "copy() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.copy"]], "criteria (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "explainparam() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.explainParam"]], "explainparams() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.explainParams"]], "extractparammap() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.extractParamMap"]], "filtervalue (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.filterValue"]], "getinputcols() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getInputCols"]], "getlazyannotator() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getLazyAnnotator"]], "getordefault() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getOrDefault"]], "getoutputcol() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getOutputCol"]], "getparam() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getParam"]], "getparamvalue() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getParamValue"]], "getter_attrs (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.getter_attrs"]], "hasdefault() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.hasDefault"]], "hasparam() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.hasParam"]], "inputannotatortypes (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "inputcols (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputCols"]], "inputcolsvalidation() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputColsValidation"]], "isdefined() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.isDefined"]], "isset() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.isSet"]], "lazyannotator (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.lazyAnnotator"]], "load() (assertionfilterer class method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.load"]], "name (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "optionalinputannotatortypes (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "outputcol (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputCol"]], "read() (assertionfilterer class method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.read"]], "regex (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "save() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.save"]], "set() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.set"]], "setblacklist() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setBlackList"]], "setcasesensitive() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "setcriteria() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "setdenylist() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setDenyList"]], "setfiltervalue() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setFilterValue"]], "setforceinputtypevalidation() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setForceInputTypeValidation"]], "setinputcols() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setInputCols"]], "setlazyannotator() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setLazyAnnotator"]], "setoutputcol() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setOutputCol"]], "setparamvalue() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setParamValue"]], "setparams() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setParams"]], "setregex() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setRegex"]], "setwhitelist() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setWhiteList"]], "skiplpinputcolsvalidation (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[20, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "transform() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.transform"]], "uid (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.uid"]], "whitelist (assertionfilterer attribute)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "write() (assertionfilterer method)": [[20, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.write"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "allpossiblefieldstostandardize (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.allPossibleFieldsToStandardize"]], "clear() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.clear"]], "copy() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.copy"]], "explainparam() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.explainParam"]], "explainparams() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.explainParams"]], "extractparammap() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.extractParamMap"]], "getinputcols() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getInputCols"]], "getlazyannotator() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getLazyAnnotator"]], "getordefault() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getOrDefault"]], "getoutputcol() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getOutputCol"]], "getparam() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getParam"]], "getparamvalue() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getParamValue"]], "getter_attrs (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.getter_attrs"]], "hasdefault() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.hasDefault"]], "hasparam() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.hasParam"]], "includeoutputcolumn (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.includeOutputColumn"]], "includestandardfield (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.includeStandardField"]], "inputannotatortypes (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "inputcols (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputCols"]], "inputcolsvalidation() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputColsValidation"]], "isdefined() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.isDefined"]], "isset() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.isSet"]], "lazyannotator (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.lazyAnnotator"]], "load() (chunkconverter class method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.load"]], "name (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "optionalinputannotatortypes (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "outputcol (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputCol"]], "outputcolumnkey (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputColumnKey"]], "read() (chunkconverter class method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.read"]], "resetsentenceindices (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.resetSentenceIndices"]], "save() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.save"]], "set() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.set"]], "setallpossiblefieldstostandardize() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setAllPossibleFieldsToStandardize"]], "setforceinputtypevalidation() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setForceInputTypeValidation"]], "setincludeoutputcolumn() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setIncludeOutputColumn"]], "setincludestandardfield() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setIncludeStandardField"]], "setinputcols() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setInputCols"]], "setlazyannotator() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setLazyAnnotator"]], "setoutputcol() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setOutputCol"]], "setoutputcolumnkey() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setOutputColumnKey"]], "setparamvalue() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setParamValue"]], "setparams() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setParams"]], "setresetsentenceindices() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setResetSentenceIndices"]], "setstandardfieldkey() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.setStandardFieldKey"]], "skiplpinputcolsvalidation (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[21, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "standardfieldkey (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.standardFieldKey"]], "transform() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.transform"]], "uid (chunkconverter attribute)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.uid"]], "write() (chunkconverter method)": [[21, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.write"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "batchsize (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.batchSize"]], "casesensitive (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.caseSensitive"]], "clear() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.clear"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "configprotobytes (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.configProtoBytes"]], "copy() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.copy"]], "dimension (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dimension"]], "divergence (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "explainparam() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.explainParam"]], "explainparams() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.explainParams"]], "extractparammap() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.extractParamMap"]], "getbatchsize() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getBatchSize"]], "getcasesensitive() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getCaseSensitive"]], "getdimension() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getDimension"]], "getinputcols() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getInputCols"]], "getlazyannotator() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getLazyAnnotator"]], "getordefault() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getOrDefault"]], "getoutputcol() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getOutputCol"]], "getparam() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getParam"]], "getparamvalue() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getParamValue"]], "getstorageref() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getStorageRef"]], "getter_attrs (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.getter_attrs"]], "hasdefault() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.hasDefault"]], "hasparam() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.hasParam"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "inputcols (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputCols"]], "inputcolsvalidation() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputColsValidation"]], "isdefined() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isDefined"]], "islong (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isLong"]], "isset() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.isSet"]], "lazyannotator (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.lazyAnnotator"]], "load() (chunkkeyphraseextraction static method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.load"]], "loadsavedmodel() (chunkkeyphraseextraction static method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.loadSavedModel"]], "name (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "optionalinputannotatortypes (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "outputcol (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputCol"]], "pretrained() (chunkkeyphraseextraction static method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "read() (chunkkeyphraseextraction class method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.read"]], "save() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.save"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "set() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.set"]], "setbatchsize() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setBatchSize"]], "setcasesensitive() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setCaseSensitive"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setconfigprotobytes() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConfigProtoBytes"]], "setdimension() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDimension"]], "setdivergence() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setinputcols() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setInputCols"]], "setislong() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setIsLong"]], "setlazyannotator() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setLazyAnnotator"]], "setoutputcol() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setOutputCol"]], "setparamvalue() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setParamValue"]], "setparams() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setParams"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "setstorageref() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setStorageRef"]], "settopn() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[22, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "storageref (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.storageRef"]], "topn (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "transform() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.transform"]], "uid (chunkkeyphraseextraction attribute)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.uid"]], "write() (chunkkeyphraseextraction method)": [[22, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.write"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "clear() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.clear"]], "copy() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.copy"]], "defaultentity (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "explainparam() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.explainParam"]], "explainparams() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.explainParams"]], "extractparammap() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.extractParamMap"]], "getinputcols() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getInputCols"]], "getlazyannotator() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getLazyAnnotator"]], "getordefault() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getOrDefault"]], "getoutputcol() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getOutputCol"]], "getparam() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getParam"]], "getparamvalue() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getParamValue"]], "getter_attrs (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.getter_attrs"]], "groupbysentences (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "hasdefault() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.hasDefault"]], "hasparam() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.hasParam"]], "inputannotatortypes (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "inputcols (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputCols"]], "inputcolsvalidation() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputColsValidation"]], "insertchunk (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "isdefined() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.isDefined"]], "isset() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.isSet"]], "lazyannotator (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.lazyAnnotator"]], "load() (chunksentencesplitter class method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.load"]], "name (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "optionalinputannotatortypes (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "outputcol (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputCol"]], "read() (chunksentencesplitter class method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.read"]], "save() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.save"]], "set() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.set"]], "setdefaultentity() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setforceinputtypevalidation() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setForceInputTypeValidation"]], "setgroupbysentences() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinputcols() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInputCols"]], "setinsertchunk() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "setlazyannotator() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setLazyAnnotator"]], "setoutputcol() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setOutputCol"]], "setparamvalue() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setParamValue"]], "setparams() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setParams"]], "skiplpinputcolsvalidation (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[23, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "transform() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.transform"]], "uid (chunksentencesplitter attribute)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.uid"]], "write() (chunksentencesplitter method)": [[23, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.write"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "casesensitive (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.caseSensitive"]], "casesensitive (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.caseSensitive"]], "clear() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.clear"]], "clear() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.clear"]], "copy() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.copy"]], "copy() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.copy"]], "criteria (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "doexceptionhandling (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.doExceptionHandling"]], "entitiesconfidence (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.entitiesConfidence"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "entitiesconfidenceresourceasjsonstring (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResourceAsJsonString"]], "explainparam() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.explainParam"]], "explainparam() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.explainParam"]], "explainparams() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.explainParams"]], "explainparams() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.explainParams"]], "extractparammap() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.extractParamMap"]], "extractparammap() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.extractParamMap"]], "filtervalue (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "fit() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.fit"]], "fitmultiple() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.fitMultiple"]], "getinputcols() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getInputCols"]], "getinputcols() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getInputCols"]], "getlazyannotator() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getLazyAnnotator"]], "getlazyannotator() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getLazyAnnotator"]], "getordefault() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getOrDefault"]], "getordefault() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getOrDefault"]], "getoutputcol() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getOutputCol"]], "getoutputcol() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getOutputCol"]], "getparam() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getParam"]], "getparam() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getParam"]], "getparamvalue() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getParamValue"]], "getparamvalue() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getParamValue"]], "getter_attrs (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.getter_attrs"]], "getter_attrs (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.getter_attrs"]], "hasdefault() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.hasDefault"]], "hasdefault() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.hasDefault"]], "hasparam() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.hasParam"]], "hasparam() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.hasParam"]], "inputannotatortypes (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "inputcols (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputCols"]], "inputcols (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputCols"]], "inputcolsvalidation() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputColsValidation"]], "inputcolsvalidation() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputColsValidation"]], "isdefined() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.isDefined"]], "isdefined() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.isDefined"]], "isset() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.isSet"]], "isset() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.isSet"]], "lazyannotator (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.lazyAnnotator"]], "lazyannotator (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.lazyAnnotator"]], "load() (chunkfilterer class method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.load"]], "load() (chunkfiltererapproach class method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.load"]], "name (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "optionalinputannotatortypes (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "outputcol (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputCol"]], "outputcol (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputCol"]], "read() (chunkfilterer class method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.read"]], "read() (chunkfiltererapproach class method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.read"]], "regex (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "save() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.save"]], "save() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.save"]], "set() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.set"]], "set() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.set"]], "setblacklist() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcasesensitive() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCaseSensitive"]], "setcasesensitive() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCaseSensitive"]], "setcriteria() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setdenylist() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setDenyList"]], "setdenylist() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setDenyList"]], "setdoexceptionhandling() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setDoExceptionHandling"]], "setentitiesconfidence() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresourceasjsonstring() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResourceAsJsonString"]], "setfilterentity() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setfiltervalue() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterValue"]], "setfiltervalue() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterValue"]], "setforceinputtypevalidation() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setForceInputTypeValidation"]], "setinputcols() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setInputCols"]], "setinputcols() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setInputCols"]], "setlazyannotator() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setLazyAnnotator"]], "setlazyannotator() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setLazyAnnotator"]], "setoutputcol() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setOutputCol"]], "setoutputcol() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setOutputCol"]], "setparamvalue() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setParamValue"]], "setparamvalue() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setParamValue"]], "setparams() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setParams"]], "setregex() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "skiplpinputcolsvalidation (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[24, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "transform() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.transform"]], "uid (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.uid"]], "uid (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.uid"]], "whitelist (chunkfilterer attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "write() (chunkfilterer method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.write"]], "write() (chunkfiltererapproach method)": [[24, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.write"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.allowMultiTokenChunk"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "clear() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.clear"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.clear"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.clear"]], "clear() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.clear"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.clear"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.clear"]], "copy() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.copy"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.copy"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.copy"]], "copy() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.copy"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.copy"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.copy"]], "dictionary (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.dictionary"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.dictionary"]], "doexceptionhandling (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.doExceptionHandling"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.doExceptionHandling"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.doExceptionHandling"]], "doexceptionhandling (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.doExceptionHandling"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.doExceptionHandling"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.doExceptionHandling"]], "doexceptionhandling (commonchunkmapperparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.doExceptionHandling"]], "enablecharfingerprintmatching (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableCharFingerprintMatching"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableFuzzyMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.enableTokenFingerprintMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "explainparam() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.explainParam"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParam"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParam"]], "explainparam() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.explainParam"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParam"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParam"]], "explainparams() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.explainParams"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParams"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.explainParams"]], "explainparams() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.explainParams"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParams"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.explainParams"]], "extractparammap() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.extractParamMap"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.extractParamMap"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.extractParamMap"]], "extractparammap() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.extractParamMap"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.extractParamMap"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.extractParamMap"]], "fit() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fit"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fit"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fit"]], "fitmultiple() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fitMultiple"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fitMultiple"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fitMultiple"]], "fuzzydistancescalingmode (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyDistanceScalingMode"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.fuzzyMatchingDistances"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "getinputcols() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getInputCols"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getInputCols"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getInputCols"]], "getinputcols() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getInputCols"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getInputCols"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getInputCols"]], "getlazyannotator() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getLazyAnnotator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getLazyAnnotator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getLazyAnnotator"]], "getlazyannotator() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getLazyAnnotator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getLazyAnnotator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getLazyAnnotator"]], "getordefault() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getOrDefault"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOrDefault"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOrDefault"]], "getordefault() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getOrDefault"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOrDefault"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOrDefault"]], "getoutputcol() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getOutputCol"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOutputCol"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getOutputCol"]], "getoutputcol() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getOutputCol"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOutputCol"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getOutputCol"]], "getparam() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getParam"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParam"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParam"]], "getparam() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getParam"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParam"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParam"]], "getparamvalue() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getParamValue"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParamValue"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getParamValue"]], "getparamvalue() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getParamValue"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParamValue"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getParamValue"]], "getter_attrs (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.getter_attrs"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getter_attrs"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.getter_attrs"]], "getter_attrs (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.getter_attrs"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getter_attrs"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.getter_attrs"]], "hasdefault() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.hasDefault"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasDefault"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasDefault"]], "hasdefault() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.hasDefault"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasDefault"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasDefault"]], "hasparam() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.hasParam"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasParam"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.hasParam"]], "hasparam() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.hasParam"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasParam"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.hasParam"]], "inputannotatortypes (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "inputcols (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputCols"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputCols"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputCols"]], "inputcols (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputCols"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputCols"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputCols"]], "inputcolsvalidation() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputColsValidation"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputColsValidation"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.inputColsValidation"]], "inputcolsvalidation() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputColsValidation"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputColsValidation"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.inputColsValidation"]], "isdefined() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.isDefined"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isDefined"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isDefined"]], "isdefined() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.isDefined"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isDefined"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isDefined"]], "isset() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.isSet"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isSet"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.isSet"]], "isset() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.isSet"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isSet"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.isSet"]], "lazyannotator (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lazyAnnotator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lazyAnnotator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lazyAnnotator"]], "lazyannotator (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lazyAnnotator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lazyAnnotator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lazyAnnotator"]], "load() (chunkmapperapproach class method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.load"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.load"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.load"]], "load() (chunkmappermodel class method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.load"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.load"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.load"]], "lowercase (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.lowerCase"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lowerCase"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.lowerCase"]], "lowercase (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.lowerCase"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lowerCase"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.lowerCase"]], "lowercase (commonchunkmapperparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxCharNgramFingerprint"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramDroppingTokens"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.maxTokenNgramFingerprint"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minCharNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.minTokenNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.multivaluesRelations"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.multivaluesRelations"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.multivaluesRelations"]], "multivaluesrelations (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.multivaluesRelations"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.multivaluesRelations"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.multivaluesRelations"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "optionalinputannotatortypes (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputAnnotatorType"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputAnnotatorType"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "outputcol (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputCol"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputCol"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.outputCol"]], "outputcol (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputCol"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputCol"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.outputCol"]], "pretrained() (chunkmappermodel static method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "read() (chunkmapperapproach class method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.read"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.read"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.read"]], "read() (chunkmappermodel class method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.read"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.read"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.read"]], "rel (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rel"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rel"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rel"]], "rel (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rel"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rel"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rel"]], "rel (commonchunkmapperparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.rels"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rels"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.rels"]], "rels (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.rels"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rels"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.rels"]], "rels (commonchunkmapperparams attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "save() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.save"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.save"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.save"]], "save() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.save"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.save"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.save"]], "set() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.set"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.set"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.set"]], "set() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.set"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.set"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.set"]], "setallowmultitokenchunk() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDictionary"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDictionary"]], "setdoexceptionhandling() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setDoExceptionHandling"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setDoExceptionHandling"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setDoExceptionHandling"]], "setdoexceptionhandling() (commonchunkmapperparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setDoExceptionHandling"]], "setenablecharfingerprintmatching() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableCharFingerprintMatching"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableFuzzyMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setEnableTokenFingerprintMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setforceinputtypevalidation() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setForceInputTypeValidation"]], "setfuzzydistancescalingmode() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyDistanceScalingMode"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setFuzzyMatchingDistances"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setinputcols() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setInputCols"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setInputCols"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setInputCols"]], "setinputcols() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setInputCols"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setInputCols"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setInputCols"]], "setlazyannotator() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLazyAnnotator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLazyAnnotator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLazyAnnotator"]], "setlazyannotator() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLazyAnnotator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLazyAnnotator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLazyAnnotator"]], "setlowercase() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setLowerCase"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLowerCase"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setLowerCase"]], "setlowercase() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setLowerCase"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLowerCase"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setLowerCase"]], "setlowercase() (commonchunkmapperparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxCharNgramFingerprint"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMaxTokenNgramFingerprint"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinCharNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMinTokenNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setMultivaluesRelations"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMultivaluesRelations"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setMultivaluesRelations"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setoutputcol() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setOutputCol"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setOutputCol"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setOutputCol"]], "setoutputcol() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setOutputCol"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setOutputCol"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setOutputCol"]], "setparamvalue() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setParamValue"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setParamValue"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setParamValue"]], "setparamvalue() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setParamValue"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParamValue"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParamValue"]], "setparams() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setParams"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParams"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setParams"]], "setrel() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRel"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRel"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRel"]], "setrel() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRel"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRel"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRel"]], "setrel() (commonchunkmapperparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setRels"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRels"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.setRels"]], "setrels() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.setRels"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRels"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.setRels"]], "setrels() (commonchunkmapperparams method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[25, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "transform() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.transform"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.transform"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.transform"]], "uid (chunkmapperapproach attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.uid"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.uid"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.uid"]], "uid (chunkmappermodel attribute)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.uid"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.uid"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.uid"]], "write() (chunkmapperapproach method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.write"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.write"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.write"]], "write() (chunkmappermodel method)": [[25, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.write"], [146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.write"], [180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.write"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "blacklist (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.blackList"]], "casesensitive (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.caseSensitive"]], "clear() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.clear"]], "copy() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.copy"]], "explainparam() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.explainParam"]], "explainparams() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.explainParams"]], "extractparammap() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.extractParamMap"]], "getinputcols() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getInputCols"]], "getlazyannotator() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getLazyAnnotator"]], "getordefault() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getOrDefault"]], "getoutputcol() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getOutputCol"]], "getparam() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getParam"]], "getparamvalue() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getParamValue"]], "getter_attrs (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.getter_attrs"]], "hasdefault() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.hasDefault"]], "hasparam() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.hasParam"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "inputcols (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputCols"]], "inputcolsvalidation() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputColsValidation"]], "isdefined() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.isDefined"]], "isset() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.isSet"]], "lazyannotator (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.lazyAnnotator"]], "load() (chunkmapperfilterer class method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.load"]], "name (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "optionalinputannotatortypes (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "outputcol (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputCol"]], "read() (chunkmapperfilterer class method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.read"]], "returncriteria (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "save() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.save"]], "set() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.set"]], "setblacklist() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setBlackList"]], "setcasesensitive() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setCaseSensitive"]], "setdenylist() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setDenyList"]], "setforceinputtypevalidation() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setForceInputTypeValidation"]], "setinputcols() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setInputCols"]], "setlazyannotator() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setLazyAnnotator"]], "setoutputcol() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setOutputCol"]], "setparamvalue() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setParamValue"]], "setparams() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setParams"]], "setreturncriteria() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "setwhitelist() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setWhiteList"]], "skiplpinputcolsvalidation (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[26, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "transform() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.transform"]], "uid (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.uid"]], "whitelist (chunkmapperfilterer attribute)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.whiteList"]], "write() (chunkmapperfilterer method)": [[26, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.write"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "allowmultitokenchunk (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.allowMultiTokenChunk"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.allowMultiTokenChunk"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.allowMultiTokenChunk"]], "allowmultitokenchunk (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.allowMultiTokenChunk"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.allowMultiTokenChunk"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.allowMultiTokenChunk"]], "clear() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.clear"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.clear"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.clear"]], "clear() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.clear"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.clear"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.clear"]], "copy() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.copy"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.copy"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.copy"]], "copy() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.copy"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.copy"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.copy"]], "dictionary (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "doexceptionhandling (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.doExceptionHandling"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.doExceptionHandling"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.doExceptionHandling"]], "doexceptionhandling (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.doExceptionHandling"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.doExceptionHandling"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.doExceptionHandling"]], "enablecharfingerprintmatching (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableCharFingerprintMatching"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableCharFingerprintMatching"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableCharFingerprintMatching"]], "enablefuzzymatching (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableFuzzyMatching"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableFuzzyMatching"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableFuzzyMatching"]], "enabletokenfingerprintmatching (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.enableTokenFingerprintMatching"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.enableTokenFingerprintMatching"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.enableTokenFingerprintMatching"]], "explainparam() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.explainParam"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.explainParam"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.explainParam"]], "explainparam() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.explainParam"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.explainParam"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.explainParam"]], "explainparams() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.explainParams"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.explainParams"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.explainParams"]], "explainparams() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.explainParams"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.explainParams"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.explainParams"]], "extractparammap() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.extractParamMap"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.extractParamMap"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.extractParamMap"]], "extractparammap() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.extractParamMap"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.extractParamMap"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.extractParamMap"]], "fit() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fit"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fit"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fit"]], "fitmultiple() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fitMultiple"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fitMultiple"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fitMultiple"]], "fuzzydistancescalingmode (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.fuzzyMatchingDistances"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistances"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.fuzzyMatchingDistances"]], "getinputcols() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getInputCols"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getInputCols"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getInputCols"]], "getinputcols() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getInputCols"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getInputCols"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getInputCols"]], "getlazyannotator() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getLazyAnnotator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getLazyAnnotator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getLazyAnnotator"]], "getlazyannotator() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getLazyAnnotator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getLazyAnnotator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getLazyAnnotator"]], "getordefault() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getOrDefault"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getOrDefault"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getOrDefault"]], "getordefault() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getOrDefault"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getOrDefault"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getOrDefault"]], "getoutputcol() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getOutputCol"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getOutputCol"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getOutputCol"]], "getoutputcol() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getOutputCol"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getOutputCol"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getOutputCol"]], "getparam() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getParam"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getParam"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getParam"]], "getparam() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getParam"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getParam"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getParam"]], "getparamvalue() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getParamValue"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getParamValue"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getParamValue"]], "getparamvalue() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getParamValue"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getParamValue"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getParamValue"]], "getter_attrs (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.getter_attrs"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.getter_attrs"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.getter_attrs"]], "getter_attrs (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.getter_attrs"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.getter_attrs"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.getter_attrs"]], "hasdefault() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.hasDefault"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.hasDefault"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.hasDefault"]], "hasdefault() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.hasDefault"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.hasDefault"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.hasDefault"]], "hasparam() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.hasParam"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.hasParam"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.hasParam"]], "hasparam() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.hasParam"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.hasParam"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.hasParam"]], "inputannotatortypes (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "inputcols (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputCols"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputCols"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputCols"]], "inputcols (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputCols"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputCols"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputCols"]], "inputcolsvalidation() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputColsValidation"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputColsValidation"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputColsValidation"]], "inputcolsvalidation() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputColsValidation"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputColsValidation"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputColsValidation"]], "isdefined() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.isDefined"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.isDefined"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.isDefined"]], "isdefined() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.isDefined"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.isDefined"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.isDefined"]], "isset() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.isSet"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.isSet"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.isSet"]], "isset() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.isSet"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.isSet"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.isSet"]], "lazyannotator (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.lazyAnnotator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.lazyAnnotator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.lazyAnnotator"]], "lazyannotator (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.lazyAnnotator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.lazyAnnotator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.lazyAnnotator"]], "load() (docmapperapproach class method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.load"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.load"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.load"]], "load() (docmappermodel class method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.load"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.load"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.load"]], "lowercase (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.lowerCase"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.lowerCase"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.lowerCase"]], "lowercase (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.lowerCase"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.lowerCase"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.lowerCase"]], "maxcharngramfingerprint (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxCharNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxCharNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.maxTokenNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.maxTokenNgramFingerprint"]], "mincharngramfingerprint (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.minCharNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.minCharNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.minCharNgramFingerprint"]], "mintokenngramfingerprint (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.minTokenNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.minTokenNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.minTokenNgramFingerprint"]], "multivaluesrelations (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.multivaluesRelations"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.multivaluesRelations"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.multivaluesRelations"]], "multivaluesrelations (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.multivaluesRelations"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.multivaluesRelations"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.multivaluesRelations"]], "name (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "optionalinputannotatortypes (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.optionalInputAnnotatorTypes"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.optionalInputAnnotatorTypes"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.optionalInputAnnotatorTypes"]], "outputannotatortype (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "outputcol (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputCol"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputCol"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputCol"]], "outputcol (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputCol"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputCol"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputCol"]], "pretrained() (docmappermodel static method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "read() (docmapperapproach class method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.read"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.read"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.read"]], "read() (docmappermodel class method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.read"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.read"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.read"]], "rel (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.rel"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.rel"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.rel"]], "rel (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.rel"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.rel"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.rel"]], "rels (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.rels"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.rels"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.rels"]], "rels (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.rels"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.rels"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.rels"]], "save() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.save"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.save"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.save"]], "save() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.save"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.save"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.save"]], "set() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.set"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.set"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.set"]], "set() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.set"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.set"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.set"]], "setallowmultitokenchunk() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setAllowMultiTokenChunk"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setAllowMultiTokenChunk"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setAllowMultiTokenChunk"]], "setallowmultitokenchunk() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setAllowMultiTokenChunk"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setAllowMultiTokenChunk"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setAllowMultiTokenChunk"]], "setdictionary() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "setdoexceptionhandling() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDoExceptionHandling"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDoExceptionHandling"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setDoExceptionHandling"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setDoExceptionHandling"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setDoExceptionHandling"]], "setenablecharfingerprintmatching() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableFuzzyMatching"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableFuzzyMatching"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setEnableTokenFingerprintMatching"]], "setforceinputtypevalidation() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setForceInputTypeValidation"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setForceInputTypeValidation"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setForceInputTypeValidation"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setForceInputTypeValidation"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setForceInputTypeValidation"]], "setfuzzydistancescalingmode() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setFuzzyMatchingDistances"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistances"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setFuzzyMatchingDistances"]], "setinputcols() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setInputCols"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setInputCols"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setInputCols"]], "setinputcols() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setInputCols"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setInputCols"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setInputCols"]], "setlazyannotator() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setLazyAnnotator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setLazyAnnotator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setLazyAnnotator"]], "setlazyannotator() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setLazyAnnotator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setLazyAnnotator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setLazyAnnotator"]], "setlowercase() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setLowerCase"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setLowerCase"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setLowerCase"]], "setlowercase() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setLowerCase"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setLowerCase"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setLowerCase"]], "setmaxcharngramfingerprint() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMinCharNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMinCharNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setMultivaluesRelations"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setMultivaluesRelations"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setMultivaluesRelations"]], "setmultivaluesrelations() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setMultivaluesRelations"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setMultivaluesRelations"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setMultivaluesRelations"]], "setoutputcol() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setOutputCol"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setOutputCol"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setOutputCol"]], "setoutputcol() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setOutputCol"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setOutputCol"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setOutputCol"]], "setparamvalue() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setParamValue"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setParamValue"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setParamValue"]], "setparamvalue() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setParamValue"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setParamValue"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setParamValue"]], "setparams() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setParams"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setParams"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setParams"]], "setrel() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setRel"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setRel"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setRel"]], "setrel() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setRel"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setRel"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setRel"]], "setrels() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setRels"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setRels"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setRels"]], "setrels() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.setRels"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.setRels"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.setRels"]], "skiplpinputcolsvalidation (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.skipLPInputColsValidation"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.skipLPInputColsValidation"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.skipLPInputColsValidation"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.skipLPInputColsValidation"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.docmapper": [[27, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "transform() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.transform"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.transform"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.transform"]], "uid (docmapperapproach attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.uid"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.uid"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.uid"]], "uid (docmappermodel attribute)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.uid"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.uid"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.uid"]], "write() (docmapperapproach method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.write"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.write"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.write"]], "write() (docmappermodel method)": [[27, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.write"], [147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.write"], [181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.write"]], "sparknlp_jsl.annotator.chunker": [[28, "module-sparknlp_jsl.annotator.chunker"]], "mapper2chunk (class in sparknlp_jsl.annotator.chunker.mapper2_chunk)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk"]], "clear() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.clear"]], "copy() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.copy"]], "explainparam() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.explainParam"]], "explainparams() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.explainParams"]], "extractparammap() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.extractParamMap"]], "filternonevalues (mapper2chunk attribute)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.filterNoneValues"]], "getordefault() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getOrDefault"]], "getparam() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getParam"]], "getparamvalue() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getParamValue"]], "getter_attrs (mapper2chunk attribute)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.getter_attrs"]], "hasdefault() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.hasDefault"]], "hasparam() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.hasParam"]], "inputannotatortypes (mapper2chunk attribute)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.inputAnnotatorTypes"]], "isdefined() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.isDefined"]], "isset() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.isSet"]], "load() (mapper2chunk class method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.load"]], "name (mapper2chunk attribute)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.name"]], "outputannotatortype (mapper2chunk attribute)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.outputAnnotatorType"]], "read() (mapper2chunk class method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.read"]], "save() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.save"]], "set() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.set"]], "setfilternonevalues() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setFilterNoneValues"]], "setparamvalue() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setParamValue"]], "setparams() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.setParams"]], "sparknlp_jsl.annotator.chunker.mapper2_chunk": [[29, "module-sparknlp_jsl.annotator.chunker.mapper2_chunk"]], "transform() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.transform"]], "uid (mapper2chunk attribute)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.uid"]], "write() (mapper2chunk method)": [[29, "sparknlp_jsl.annotator.chunker.mapper2_chunk.Mapper2Chunk.write"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "clear() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.clear"]], "clear() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.clear"]], "copy() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.copy"]], "copy() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.copy"]], "explainparam() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.explainParam"]], "explainparam() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.explainParam"]], "explainparams() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.explainParams"]], "explainparams() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.explainParams"]], "extractparammap() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.extractParamMap"]], "extractparammap() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.extractParamMap"]], "fit() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fit"]], "fitintercept (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "fitmultiple() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitMultiple"]], "getinputcols() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getInputCols"]], "getinputcols() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getInputCols"]], "getlazyannotator() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getLazyAnnotator"]], "getordefault() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getOrDefault"]], "getordefault() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getOrDefault"]], "getoutputcol() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getOutputCol"]], "getoutputcol() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getOutputCol"]], "getparam() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getParam"]], "getparam() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getParam"]], "getparamvalue() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getParamValue"]], "getparamvalue() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getParamValue"]], "getter_attrs (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.getter_attrs"]], "getter_attrs (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.getter_attrs"]], "hasdefault() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.hasDefault"]], "hasdefault() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.hasDefault"]], "hasparam() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.hasParam"]], "hasparam() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.hasParam"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputAnnotatorTypes"]], "inputcols (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputCols"]], "inputcols (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputCols"]], "inputcolsvalidation() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.inputColsValidation"]], "isdefined() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.isDefined"]], "isdefined() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.isDefined"]], "isset() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.isSet"]], "isset() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.isSet"]], "labelcol (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "lazyannotator (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.lazyAnnotator"]], "lazyannotator (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.lazyAnnotator"]], "load() (documentlogregclassifierapproach class method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.load"]], "load() (documentlogregclassifiermodel class method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.load"]], "maxiter (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "optionalinputannotatortypes (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "outputcol (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputCol"]], "outputcol (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputCol"]], "pretrained() (documentlogregclassifiermodel static method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "read() (documentlogregclassifierapproach class method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.read"]], "read() (documentlogregclassifiermodel class method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.read"]], "save() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.save"]], "save() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.save"]], "set() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.set"]], "set() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.set"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setForceInputTypeValidation"]], "setinputcols() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setInputCols"]], "setinputcols() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setInputCols"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setlazyannotator() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLazyAnnotator"]], "setmaxiter() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "setoutputcol() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setOutputCol"]], "setoutputcol() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setOutputCol"]], "setparamvalue() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setParamValue"]], "setparamvalue() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setParamValue"]], "setparams() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setParams"]], "settol() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[30, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "transform() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.transform"]], "uid (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.uid"]], "uid (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.uid"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "write() (documentlogregclassifierapproach method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.write"]], "write() (documentlogregclassifiermodel method)": [[30, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.write"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "clear() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.clear"]], "clear() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.clear"]], "copy() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.copy"]], "copy() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.copy"]], "explainparam() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.explainParam"]], "explainparam() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.explainParam"]], "explainparams() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.explainParams"]], "explainparams() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.explainParams"]], "extractparammap() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.extractParamMap"]], "fit() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fit"]], "fitintercept (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getInputCols"]], "getinputcols() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getOrDefault"]], "getordefault() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getOutputCol"]], "getparam() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getParam"]], "getparam() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getParam"]], "getparamvalue() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getParamValue"]], "getter_attrs (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.getter_attrs"]], "hasdefault() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.hasDefault"]], "hasdefault() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.hasDefault"]], "hasparam() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.hasParam"]], "hasparam() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.hasParam"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputCols"]], "inputcols (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputColsValidation"]], "isdefined() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.isDefined"]], "isdefined() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.isDefined"]], "isset() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.isSet"]], "isset() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.isSet"]], "labelcol (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labels"]], "labels (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "lazyannotator (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.lazyAnnotator"]], "load() (documentmlclassifierapproach class method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.load"]], "load() (documentmlclassifiermodel class method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.load"]], "maxiter (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.maxTokenNgram"]], "maxtokenngram (documentmlclassifierparams attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.mergeChunks"]], "mergechunks (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.mergeChunks"]], "mergechunks (documentmlclassifierparams attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.minTokenNgram"]], "mintokenngram (documentmlclassifierparams attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "optionalinputannotatortypes (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputCol"]], "outputcol (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputCol"]], "pretrained() (documentmlclassifiermodel static method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "read() (documentmlclassifierapproach class method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.read"]], "read() (documentmlclassifiermodel class method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.read"]], "save() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.save"]], "save() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.save"]], "set() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.set"]], "set() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.set"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setInputCols"]], "setinputcols() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setInputCols"]], "setlabelcol() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabels"]], "setlabels() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setlazyannotator() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setMergeChunks"]], "setmergechunks() (documentmlclassifierparams method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setParamValue"]], "setparams() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setParams"]], "settol() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[31, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "transform() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.transform"]], "uid (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.uid"]], "uid (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.uid"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "write() (documentmlclassifierapproach method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.write"]], "write() (documentmlclassifiermodel method)": [[31, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.write"]], "fewshotassertionclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_assertion_classifier)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach"]], "fewshotassertionclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_assertion_classifier)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel"]], "batchsize (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.batchSize"]], "blacklist (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.blackList"]], "casesensitive (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.caseSensitive"]], "classes (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.classes"]], "clear() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.clear"]], "clear() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.clear"]], "copy() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.copy"]], "copy() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.copy"]], "datasetinfo (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.datasetInfo"]], "datasetinfo (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.datasetInfo"]], "doexceptionhandling (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.doExceptionHandling"]], "doexceptionhandling (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.doExceptionHandling"]], "dropout (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.dropout"]], "engine (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.engine"]], "epochsn (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.epochsN"]], "explainparam() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.explainParam"]], "explainparam() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.explainParam"]], "explainparams() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.explainParams"]], "explainparams() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.explainParams"]], "extractparammap() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.extractParamMap"]], "extractparammap() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.extractParamMap"]], "featurescaling (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.featureScaling"]], "featurescaling (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.featureScaling"]], "fit() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fit"]], "fitmultiple() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fitMultiple"]], "fiximbalance (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.fixImbalance"]], "getengine() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getEngine"]], "getinputcols() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getInputCols"]], "getinputcols() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getInputCols"]], "getlazyannotator() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getLazyAnnotator"]], "getordefault() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getOrDefault"]], "getordefault() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getOrDefault"]], "getoutputcol() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getOutputCol"]], "getoutputcol() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getOutputCol"]], "getparam() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getParam"]], "getparam() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getParam"]], "getparamvalue() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getParamValue"]], "getparamvalue() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getParamValue"]], "getter_attrs (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.getter_attrs"]], "getter_attrs (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.getter_attrs"]], "hasdefault() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.hasDefault"]], "hasdefault() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.hasDefault"]], "hasparam() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.hasParam"]], "hasparam() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.hasParam"]], "inputannotatortypes (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputAnnotatorTypes"]], "inputcols (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputCols"]], "inputcols (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputCols"]], "inputcolsvalidation() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.inputColsValidation"]], "isdefined() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.isDefined"]], "isdefined() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.isDefined"]], "isset() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.isSet"]], "isset() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.isSet"]], "labelcolumn (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.labelColumn"]], "lazyannotator (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.lazyAnnotator"]], "lazyannotator (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.lazyAnnotator"]], "learningrate (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.learningRate"]], "load() (fewshotassertionclassifierapproach class method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.load"]], "load() (fewshotassertionclassifiermodel class method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.load"]], "loadsavedmodel() (fewshotassertionclassifiermodel static method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.loadSavedModel"]], "modelfile (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.modelFile"]], "multiclass (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.multiClass"]], "multiclass (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.multiClass"]], "name (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.name"]], "name (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.name"]], "optionalinputannotatortypes (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.outputAnnotatorType"]], "outputcol (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputCol"]], "outputcol (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.outputCol"]], "outputlogspath (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.outputLogsPath"]], "pretrained() (fewshotassertionclassifiermodel static method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.pretrained"]], "read() (fewshotassertionclassifierapproach class method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.read"]], "read() (fewshotassertionclassifiermodel class method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.read"]], "save() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.save"]], "save() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.save"]], "set() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.set"]], "set() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.set"]], "setbatchsize() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setBatchSize"]], "setblacklist() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setBlackList"]], "setcasesensitive() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setCaseSensitive"]], "setdatasetinfo() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setDatasetInfo"]], "setdenylist() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDenyList"]], "setdoexceptionhandling() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setDoExceptionHandling"]], "setdropout() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setDropout"]], "setepochsnumber() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setFeatureScaling"]], "setfiximbalance() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setForceInputTypeValidation"]], "setinputcols() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setInputCols"]], "setinputcols() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setInputCols"]], "setlabelcol() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLabelCol"]], "setlazyannotator() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setLazyAnnotator"]], "setlearningrate() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setLearningRate"]], "setmodelfile() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setModelFile"]], "setmulticlass() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setMultiClass"]], "setmulticlass() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setMultiClass"]], "setoutputcol() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setOutputCol"]], "setoutputcol() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setOutputCol"]], "setoutputlogspath() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setOutputLogsPath"]], "setparamvalue() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setParamValue"]], "setparamvalue() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setParamValue"]], "setparams() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.setParams"]], "setvalidationsplit() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setValidationSplit"]], "setwhitelist() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.setWhiteList"]], "skiplpinputcolsvalidation (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier": [[32, "module-sparknlp_jsl.annotator.classification.few_shot_assertion_classifier"]], "transform() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.transform"]], "uid (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.uid"]], "uid (fewshotassertionclassifiermodel attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.uid"]], "validationsplit (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.validationSplit"]], "whitelist (fewshotassertionclassifierapproach attribute)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.whiteList"]], "write() (fewshotassertionclassifierapproach method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierApproach.write"]], "write() (fewshotassertionclassifiermodel method)": [[32, "sparknlp_jsl.annotator.classification.few_shot_assertion_classifier.FewShotAssertionClassifierModel.write"]], "fewshotclassifierapproach (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach"]], "fewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.few_shot_classifier)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel"]], "batchsize (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.batchSize"]], "classes (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.classes"]], "clear() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.clear"]], "clear() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.clear"]], "copy() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.copy"]], "copy() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.copy"]], "datasetinfo (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.datasetInfo"]], "datasetinfo (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.datasetInfo"]], "doexceptionhandling (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.doExceptionHandling"]], "dropout (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.dropout"]], "engine (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.engine"]], "epochsn (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.epochsN"]], "explainparam() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.explainParam"]], "explainparam() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.explainParam"]], "explainparams() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.explainParams"]], "explainparams() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.explainParams"]], "extractparammap() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.extractParamMap"]], "extractparammap() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.extractParamMap"]], "featurescaling (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.featureScaling"]], "featurescaling (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.featureScaling"]], "fit() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fit"]], "fitmultiple() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fitMultiple"]], "fiximbalance (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.fixImbalance"]], "getengine() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getEngine"]], "getinputcols() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getInputCols"]], "getinputcols() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getInputCols"]], "getlazyannotator() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getLazyAnnotator"]], "getordefault() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getOrDefault"]], "getordefault() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getOrDefault"]], "getoutputcol() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getOutputCol"]], "getoutputcol() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getOutputCol"]], "getparam() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getParam"]], "getparam() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getParam"]], "getparamvalue() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getParamValue"]], "getparamvalue() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getParamValue"]], "getter_attrs (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.getter_attrs"]], "getter_attrs (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.getter_attrs"]], "hasdefault() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.hasDefault"]], "hasdefault() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.hasDefault"]], "hasparam() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.hasParam"]], "hasparam() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.hasParam"]], "inputannotatortypes (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputCols"]], "inputcols (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputCols"]], "inputcolsvalidation() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.inputColsValidation"]], "isdefined() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.isDefined"]], "isdefined() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.isDefined"]], "isset() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.isSet"]], "isset() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.isSet"]], "labelcolumn (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.labelColumn"]], "lazyannotator (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.lazyAnnotator"]], "learningrate (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.learningRate"]], "load() (fewshotclassifierapproach class method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.load"]], "load() (fewshotclassifiermodel class method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.load"]], "modelfile (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.modelFile"]], "multiclass (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.multiClass"]], "multiclass (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.multiClass"]], "name (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.name"]], "name (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.name"]], "optionalinputannotatortypes (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputAnnotatorType"]], "outputcol (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputCol"]], "outputcol (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.outputCol"]], "outputlogspath (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.outputLogsPath"]], "pretrained() (fewshotclassifiermodel static method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.pretrained"]], "read() (fewshotclassifierapproach class method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.read"]], "read() (fewshotclassifiermodel class method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.read"]], "save() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.save"]], "save() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.save"]], "set() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.set"]], "set() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.set"]], "setbatchsize() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setDropout"]], "setepochsnumber() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setInputCols"]], "setinputcols() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setInputCols"]], "setlabelcol() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setLearningRate"]], "setmodelfile() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setModelFile"]], "setmulticlass() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setMultiClass"]], "setmulticlass() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setMultiClass"]], "setoutputcol() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setOutputCol"]], "setoutputcol() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setParamValue"]], "setparamvalue() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setParamValue"]], "setparams() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.setParams"]], "setvalidationsplit() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.few_shot_classifier": [[33, "module-sparknlp_jsl.annotator.classification.few_shot_classifier"]], "transform() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.transform"]], "uid (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.uid"]], "uid (fewshotclassifiermodel attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.uid"]], "validationsplit (fewshotclassifierapproach attribute)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.validationSplit"]], "write() (fewshotclassifierapproach method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierApproach.write"]], "write() (fewshotclassifiermodel method)": [[33, "sparknlp_jsl.annotator.classification.few_shot_classifier.FewShotClassifierModel.write"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "batchsize (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.batchSize"]], "classes (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.classes"]], "clear() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.clear"]], "clear() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.clear"]], "copy() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.copy"]], "copy() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.copy"]], "datasetinfo (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.datasetInfo"]], "datasetinfo (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.datasetInfo"]], "doexceptionhandling (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.doExceptionHandling"]], "dropout (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.dropout"]], "engine (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.engine"]], "epochsn (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.epochsN"]], "explainparam() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.explainParam"]], "explainparam() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.explainParam"]], "explainparams() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.explainParams"]], "explainparams() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.explainParams"]], "extractparammap() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.extractParamMap"]], "extractparammap() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.extractParamMap"]], "featurescaling (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.featureScaling"]], "featurescaling (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.featureScaling"]], "fit() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fit"]], "fitmultiple() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fitMultiple"]], "fiximbalance (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.fixImbalance"]], "getengine() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getEngine"]], "getinputcols() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getInputCols"]], "getinputcols() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getInputCols"]], "getlazyannotator() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getLazyAnnotator"]], "getordefault() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getOrDefault"]], "getordefault() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getOrDefault"]], "getoutputcol() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getOutputCol"]], "getoutputcol() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getOutputCol"]], "getparam() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getParam"]], "getparam() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getParam"]], "getparamvalue() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getParamValue"]], "getparamvalue() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getParamValue"]], "getter_attrs (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.getter_attrs"]], "getter_attrs (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.getter_attrs"]], "hasdefault() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.hasDefault"]], "hasdefault() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.hasDefault"]], "hasparam() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.hasParam"]], "hasparam() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.hasParam"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "inputcols (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputCols"]], "inputcols (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputCols"]], "inputcolsvalidation() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputColsValidation"]], "isdefined() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.isDefined"]], "isdefined() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.isDefined"]], "isset() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.isSet"]], "isset() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.isSet"]], "labelcolumn (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.labelColumn"]], "lazyannotator (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.lazyAnnotator"]], "lazyannotator (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.lazyAnnotator"]], "learningrate (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.learningRate"]], "load() (genericlogregclassifierapproach class method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.load"]], "load() (genericlogregclassifiermodel class method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.load"]], "modelfile (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.modelFile"]], "multiclass (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.multiClass"]], "multiclass (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.multiClass"]], "name (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "optionalinputannotatortypes (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "outputcol (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputCol"]], "outputcol (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputCol"]], "outputlogspath (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputLogsPath"]], "pretrained() (genericlogregclassifiermodel static method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "read() (genericlogregclassifierapproach class method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.read"]], "read() (genericlogregclassifiermodel class method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.read"]], "save() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.save"]], "save() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.save"]], "set() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.set"]], "set() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.set"]], "setbatchsize() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setDoExceptionHandling"]], "setdropout() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setDropout"]], "setepochsnumber() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setInputCols"]], "setinputcols() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setInputCols"]], "setlabelcol() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLabelCol"]], "setlazyannotator() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setLearningRate"]], "setmodelfile() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setModelFile"]], "setmulticlass() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setMultiClass"]], "setmulticlass() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setMultiClass"]], "setoutputcol() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setOutputCol"]], "setoutputcol() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setOutputCol"]], "setoutputlogspath() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setParamValue"]], "setparamvalue() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setParamValue"]], "setparams() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.setParams"]], "setvalidationsplit() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[34, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "transform() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.transform"]], "uid (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.uid"]], "uid (genericlogregclassifiermodel attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.uid"]], "validationsplit (genericlogregclassifierapproach attribute)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.validationSplit"]], "write() (genericlogregclassifierapproach method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.write"]], "write() (genericlogregclassifiermodel method)": [[34, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.write"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "batchsize (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.batchSize"]], "classes (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.classes"]], "clear() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.clear"]], "clear() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.clear"]], "copy() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.copy"]], "copy() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.copy"]], "datasetinfo (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.datasetInfo"]], "datasetinfo (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.datasetInfo"]], "doexceptionhandling (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.doExceptionHandling"]], "dropout (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.dropout"]], "engine (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.engine"]], "epochsn (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.epochsN"]], "explainparam() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.explainParam"]], "explainparam() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.explainParam"]], "explainparams() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.explainParams"]], "explainparams() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.explainParams"]], "extractparammap() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.extractParamMap"]], "extractparammap() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.extractParamMap"]], "featurescaling (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.featureScaling"]], "featurescaling (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.featureScaling"]], "fit() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fit"]], "fitmultiple() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fitMultiple"]], "fiximbalance (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.fixImbalance"]], "getengine() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getEngine"]], "getinputcols() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getInputCols"]], "getinputcols() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getInputCols"]], "getlazyannotator() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getLazyAnnotator"]], "getordefault() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getOrDefault"]], "getordefault() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getOrDefault"]], "getoutputcol() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getOutputCol"]], "getoutputcol() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getOutputCol"]], "getparam() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getParam"]], "getparam() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getParam"]], "getparamvalue() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getParamValue"]], "getparamvalue() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getParamValue"]], "getter_attrs (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.getter_attrs"]], "getter_attrs (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.getter_attrs"]], "hasdefault() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.hasDefault"]], "hasdefault() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.hasDefault"]], "hasparam() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.hasParam"]], "hasparam() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.hasParam"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "inputcols (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputCols"]], "inputcols (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputCols"]], "inputcolsvalidation() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputColsValidation"]], "isdefined() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.isDefined"]], "isdefined() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.isDefined"]], "isset() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.isSet"]], "isset() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.isSet"]], "labelcolumn (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.labelColumn"]], "lazyannotator (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.lazyAnnotator"]], "lazyannotator (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.lazyAnnotator"]], "learningrate (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.learningRate"]], "load() (genericsvmclassifierapproach class method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.load"]], "load() (genericsvmclassifiermodel class method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.load"]], "modelfile (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.modelFile"]], "multiclass (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.multiClass"]], "multiclass (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.multiClass"]], "name (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "optionalinputannotatortypes (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "outputcol (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputCol"]], "outputcol (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputCol"]], "outputlogspath (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputLogsPath"]], "pretrained() (genericsvmclassifiermodel static method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "read() (genericsvmclassifierapproach class method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.read"]], "read() (genericsvmclassifiermodel class method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.read"]], "save() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.save"]], "save() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.save"]], "set() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.set"]], "set() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.set"]], "setbatchsize() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setDoExceptionHandling"]], "setdropout() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setDropout"]], "setepochsnumber() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setInputCols"]], "setinputcols() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setInputCols"]], "setlabelcol() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLabelCol"]], "setlazyannotator() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setLearningRate"]], "setmodelfile() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setModelFile"]], "setmulticlass() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setMultiClass"]], "setmulticlass() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setMultiClass"]], "setoutputcol() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setOutputCol"]], "setoutputcol() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setOutputCol"]], "setoutputlogspath() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setParamValue"]], "setparamvalue() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setParamValue"]], "setparams() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.setParams"]], "setvalidationsplit() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[35, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "transform() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.transform"]], "uid (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.uid"]], "uid (genericsvmclassifiermodel attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.uid"]], "validationsplit (genericsvmclassifierapproach attribute)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.validationSplit"]], "write() (genericsvmclassifierapproach method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.write"]], "write() (genericsvmclassifiermodel method)": [[35, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.write"]], "sparknlp_jsl.annotator.classification": [[36, "module-sparknlp_jsl.annotator.classification"]], "largefewshotclassifiermodel (class in sparknlp_jsl.annotator.classification.large_few_shot_classifier)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel"]], "casesensitive (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.caseSensitive"]], "clear() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.clear"]], "copy() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.copy"]], "explainparam() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.explainParam"]], "explainparams() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.explainParams"]], "extractparammap() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.extractParamMap"]], "getcasesensitive() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getCaseSensitive"]], "getclasses() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getClasses"]], "getinputcols() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getInputCols"]], "getlazyannotator() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getOrDefault"]], "getoutputcol() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getOutputCol"]], "getparam() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getParam"]], "getparamvalue() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getParamValue"]], "getter_attrs (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.getter_attrs"]], "hasdefault() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasDefault"]], "hasdifferentiablehead (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasDifferentiableHead"]], "hasparam() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.hasParam"]], "inputannotatortypes (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.inputColsValidation"]], "isdefined() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.isDefined"]], "isset() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.isSet"]], "lazyannotator (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.lazyAnnotator"]], "load() (largefewshotclassifiermodel class method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.load"]], "loadsavedmodel() (largefewshotclassifiermodel static method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.loadSavedModel"]], "modelarchitecture (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.modelArchitecture"]], "name (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.name"]], "optionalinputannotatortypes (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.outputAnnotatorType"]], "outputcol (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.outputCol"]], "pretrained() (largefewshotclassifiermodel static method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.pretrained"]], "read() (largefewshotclassifiermodel class method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.read"]], "save() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.save"]], "set() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.set"]], "setcasesensitive() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setCaseSensitive"]], "setforceinputtypevalidation() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setInputCols"]], "setlazyannotator() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setLazyAnnotator"]], "setoutputcol() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setOutputCol"]], "setparamvalue() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setParamValue"]], "setparams() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.setParams"]], "skiplpinputcolsvalidation (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.large_few_shot_classifier": [[37, "module-sparknlp_jsl.annotator.classification.large_few_shot_classifier"]], "transform() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.transform"]], "uid (largefewshotclassifiermodel attribute)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.uid"]], "write() (largefewshotclassifiermodel method)": [[37, "sparknlp_jsl.annotator.classification.large_few_shot_classifier.LargeFewShotClassifierModel.write"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "casesensitive (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.caseSensitive"]], "clear() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.clear"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "copy() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.copy"]], "explainparam() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.explainParam"]], "explainparams() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.explainParams"]], "extractparammap() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getCaseSensitive"]], "getclasses() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "getinputcols() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getInputCols"]], "getlazyannotator() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getOrDefault"]], "getoutputcol() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getOutputCol"]], "getparam() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getParam"]], "getparamvalue() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getParamValue"]], "getter_attrs (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getter_attrs"]], "hasdefault() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.hasDefault"]], "hasparam() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.hasParam"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputColsValidation"]], "isdefined() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.isDefined"]], "isset() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.isSet"]], "lazyannotator (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.lazyAnnotator"]], "load() (medicalbertforsequenceclassification class method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.load"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "optionalinputannotatortypes (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "outputcol (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputCol"]], "pretrained() (medicalbertforsequenceclassification static method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "read() (medicalbertforsequenceclassification class method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.read"]], "save() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.save"]], "set() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.set"]], "setcasesensitive() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setInputCols"]], "setlazyannotator() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setOutputCol"]], "setparamvalue() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setParamValue"]], "setparams() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[38, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "transform() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.transform"]], "uid (medicalbertforsequenceclassification attribute)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.uid"]], "write() (medicalbertforsequenceclassification method)": [[38, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.write"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "casesensitive (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.caseSensitive"]], "clear() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.clear"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "copy() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.copy"]], "explainparam() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.explainParam"]], "explainparams() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.explainParams"]], "extractparammap() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.extractParamMap"]], "getcasesensitive() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getCaseSensitive"]], "getclasses() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "getinputcols() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getInputCols"]], "getlazyannotator() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getLazyAnnotator"]], "getordefault() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getOrDefault"]], "getoutputcol() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getOutputCol"]], "getparam() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getParam"]], "getparamvalue() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getParamValue"]], "getter_attrs (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getter_attrs"]], "hasdefault() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.hasDefault"]], "hasparam() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.hasParam"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "inputcols (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputCols"]], "inputcolsvalidation() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputColsValidation"]], "isdefined() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.isDefined"]], "isset() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.isSet"]], "lazyannotator (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.lazyAnnotator"]], "load() (medicalbertfortokenclassifier class method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.load"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "optionalinputannotatortypes (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "outputcol (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputCol"]], "pretrained() (medicalbertfortokenclassifier static method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "read() (medicalbertfortokenclassifier class method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.read"]], "save() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.save"]], "set() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.set"]], "setcasesensitive() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setCaseSensitive"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setForceInputTypeValidation"]], "setinputcols() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setInputCols"]], "setlazyannotator() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setLazyAnnotator"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "setoutputcol() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setOutputCol"]], "setparamvalue() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setParamValue"]], "setparams() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setParams"]], "skiplpinputcolsvalidation (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[39, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "transform() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.transform"]], "uid (medicalbertfortokenclassifier attribute)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.uid"]], "write() (medicalbertfortokenclassifier method)": [[39, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.write"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "casesensitive (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.caseSensitive"]], "clear() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.clear"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "copy() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.copy"]], "explainparam() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.explainParam"]], "explainparams() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.explainParams"]], "extractparammap() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getCaseSensitive"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "getinputcols() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getInputCols"]], "getlazyannotator() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getOrDefault"]], "getoutputcol() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getOutputCol"]], "getparam() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getParam"]], "getparamvalue() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getParamValue"]], "getter_attrs (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getter_attrs"]], "hasdefault() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.hasDefault"]], "hasparam() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.hasParam"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputColsValidation"]], "isdefined() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.isDefined"]], "isset() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.isSet"]], "lazyannotator (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.lazyAnnotator"]], "load() (medicaldistilbertforsequenceclassification class method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.load"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "optionalinputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "outputcol (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputCol"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "read() (medicaldistilbertforsequenceclassification class method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.read"]], "save() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.save"]], "set() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.set"]], "setcasesensitive() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setInputCols"]], "setlazyannotator() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setOutputCol"]], "setparamvalue() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setParamValue"]], "setparams() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[40, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "transform() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.transform"]], "uid (medicaldistilbertforsequenceclassification attribute)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.uid"]], "write() (medicaldistilbertforsequenceclassification method)": [[40, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.write"]], "contextualentityfilterer (class in sparknlp_jsl.annotator.context.contextual_entity_filterer)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer"]], "casesensitive (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.caseSensitive"]], "clear() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.clear"]], "copy() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.copy"]], "doexceptionhandling (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.doExceptionHandling"]], "explainparam() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.explainParam"]], "explainparams() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.explainParams"]], "extractparammap() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.extractParamMap"]], "getinputcols() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getInputCols"]], "getlazyannotator() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getLazyAnnotator"]], "getordefault() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getOrDefault"]], "getoutputcol() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getOutputCol"]], "getparam() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getParam"]], "getparamvalue() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getParamValue"]], "getter_attrs (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.getter_attrs"]], "hasdefault() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.hasDefault"]], "hasparam() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.hasParam"]], "inputannotatortypes (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.inputAnnotatorTypes"]], "inputcols (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.inputCols"]], "inputcolsvalidation() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.inputColsValidation"]], "isdefined() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.isDefined"]], "isset() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.isSet"]], "lazyannotator (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.lazyAnnotator"]], "load() (contextualentityfilterer class method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.load"]], "name (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.name"]], "optionalinputannotatortypes (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.outputAnnotatorType"]], "outputcol (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.outputCol"]], "read() (contextualentityfilterer class method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.read"]], "rulescope (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.ruleScope"]], "save() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.save"]], "set() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.set"]], "setcasesensitive() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setCaseSensitive"]], "setdoexceptionhandling() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setDoExceptionHandling"]], "setforceinputtypevalidation() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setForceInputTypeValidation"]], "setinputcols() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setInputCols"]], "setlazyannotator() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setLazyAnnotator"]], "setoutputcol() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setOutputCol"]], "setparamvalue() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setParamValue"]], "setparams() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setParams"]], "setrulescope() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setRuleScope"]], "setrules() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setRules"]], "setrulesasstr() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.setRulesAsStr"]], "skiplpinputcolsvalidation (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.context.contextual_entity_filterer": [[41, "module-sparknlp_jsl.annotator.context.contextual_entity_filterer"]], "transform() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.transform"]], "uid (contextualentityfilterer attribute)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.uid"]], "write() (contextualentityfilterer method)": [[41, "sparknlp_jsl.annotator.context.contextual_entity_filterer.ContextualEntityFilterer.write"]], "contextualentityruler (class in sparknlp_jsl.annotator.context.contextual_entity_ruler)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler"]], "allowpunctuationinbetween (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.allowPunctuationInBetween"]], "allowtokensinbetween (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.allowTokensInBetween"]], "casesensitive (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.caseSensitive"]], "clear() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.clear"]], "copy() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.copy"]], "doexceptionhandling (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.doExceptionHandling"]], "dropemptychunks (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.dropEmptyChunks"]], "explainparam() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.explainParam"]], "explainparams() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.explainParams"]], "extractparammap() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.extractParamMap"]], "getinputcols() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getInputCols"]], "getlazyannotator() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getLazyAnnotator"]], "getordefault() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getOrDefault"]], "getoutputcol() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getOutputCol"]], "getparam() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getParam"]], "getparamvalue() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getParamValue"]], "getter_attrs (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.getter_attrs"]], "hasdefault() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.hasDefault"]], "hasparam() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.hasParam"]], "inputannotatortypes (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.inputAnnotatorTypes"]], "inputcols (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.inputCols"]], "inputcolsvalidation() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.inputColsValidation"]], "isdefined() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.isDefined"]], "isset() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.isSet"]], "lazyannotator (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.lazyAnnotator"]], "load() (contextualentityruler class method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.load"]], "mergeoverlapping (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.mergeOverlapping"]], "name (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.name"]], "optionalinputannotatortypes (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.outputAnnotatorType"]], "outputcol (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.outputCol"]], "read() (contextualentityruler class method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.read"]], "save() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.save"]], "set() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.set"]], "setallowpunctuationinbetween() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setAllowPunctuationInBetween"]], "setallowtokensinbetween() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setAllowTokensInBetween"]], "setcasesensitive() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setCaseSensitive"]], "setdoexceptionhandling() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setDoExceptionHandling"]], "setdropemptyentities() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setDropEmptyEntities"]], "setforceinputtypevalidation() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setForceInputTypeValidation"]], "setinputcols() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setInputCols"]], "setlazyannotator() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setLazyAnnotator"]], "setmergeoverlapping() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setMergeOverlapping"]], "setoutputcol() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setOutputCol"]], "setparamvalue() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setParamValue"]], "setparams() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setParams"]], "setrules() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setRules"]], "setrulesasstr() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.setRulesAsStr"]], "skiplpinputcolsvalidation (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.context.contextual_entity_ruler": [[42, "module-sparknlp_jsl.annotator.context.contextual_entity_ruler"]], "transform() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.transform"]], "uid (contextualentityruler attribute)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.uid"]], "write() (contextualentityruler method)": [[42, "sparknlp_jsl.annotator.context.contextual_entity_ruler.ContextualEntityRuler.write"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "clear() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.clear"]], "clear() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.clear"]], "completecontextmatch (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "copy() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.copy"]], "copy() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.copy"]], "dictionary (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "doexceptionhandling (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.doExceptionHandling"]], "doexceptionhandling (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.doExceptionHandling"]], "explainparam() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.explainParam"]], "explainparam() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.explainParam"]], "explainparams() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.explainParams"]], "explainparams() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.explainParams"]], "extractparammap() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.extractParamMap"]], "extractparammap() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.extractParamMap"]], "fit() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.fit"]], "fitmultiple() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.fitMultiple"]], "getinputcols() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getInputCols"]], "getinputcols() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getInputCols"]], "getlazyannotator() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getLazyAnnotator"]], "getlazyannotator() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getLazyAnnotator"]], "getordefault() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getOrDefault"]], "getordefault() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getOrDefault"]], "getoutputcol() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getOutputCol"]], "getoutputcol() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getOutputCol"]], "getparam() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getParam"]], "getparam() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getParam"]], "getparamvalue() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getParamValue"]], "getparamvalue() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getParamValue"]], "getter_attrs (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.getter_attrs"]], "getter_attrs (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.getter_attrs"]], "hasdefault() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.hasDefault"]], "hasdefault() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.hasDefault"]], "hasparam() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.hasParam"]], "hasparam() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.hasParam"]], "inputannotatortypes (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "inputcols (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputCols"]], "inputcols (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputCols"]], "inputcolsvalidation() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputColsValidation"]], "inputcolsvalidation() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputColsValidation"]], "isdefined() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.isDefined"]], "isdefined() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.isDefined"]], "isset() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.isSet"]], "isset() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.isSet"]], "jsonpath (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "lazyannotator (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.lazyAnnotator"]], "lazyannotator (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.lazyAnnotator"]], "load() (contextualparserapproach class method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.load"]], "load() (contextualparsermodel class method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.load"]], "name (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.name"]], "optionalcontextrules (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "optionalinputannotatortypes (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalInputAnnotatorTypes"]], "outputannotatortype (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "outputcol (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputCol"]], "outputcol (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputCol"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "pretrained() (contextualparsermodel static method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.pretrained"]], "read() (contextualparserapproach class method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.read"]], "read() (contextualparsermodel class method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.read"]], "save() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.save"]], "save() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.save"]], "set() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.set"]], "set() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.set"]], "setcasesensitive() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setdoexceptionhandling() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setDoExceptionHandling"]], "setforceinputtypevalidation() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setForceInputTypeValidation"]], "setinputcols() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setInputCols"]], "setinputcols() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setInputCols"]], "setjsonpath() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setlazyannotator() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setLazyAnnotator"]], "setlazyannotator() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setLazyAnnotator"]], "setoptionalcontextrules() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setoutputcol() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOutputCol"]], "setoutputcol() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOutputCol"]], "setparamvalue() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setParamValue"]], "setparamvalue() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setParamValue"]], "setparams() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setParams"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "skiplpinputcolsvalidation (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.context.contextual_parser": [[43, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "transform() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.transform"]], "uid (contextualparserapproach attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.uid"]], "uid (contextualparsermodel attribute)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.uid"]], "write() (contextualparserapproach method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.write"]], "write() (contextualparsermodel method)": [[43, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.write"]], "sparknlp_jsl.annotator.context": [[44, "module-sparknlp_jsl.annotator.context"]], "basedeidentificationparams (class in sparknlp_jsl.annotator.deid.base_deidentification_params)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams"]], "additionaldateformats (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.additionalDateFormats"]], "ageranges (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.ageRanges"]], "agerangesbyhipaa (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.ageRangesByHipaa"]], "consistentacrossnameparts (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.consistentAcrossNameParts"]], "countryobfuscation (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.countryObfuscation"]], "dateentities (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.dateEntities"]], "dateformats (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.dateFormats"]], "days (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.days"]], "enabledefaultobfuscationequivalents (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.enableDefaultObfuscationEquivalents"]], "fakerlengthoffset (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.fakerLengthOffset"]], "fixedmasklength (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.fixedMaskLength"]], "genderawareness (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.genderAwareness"]], "geoconsistency (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.geoConsistency"]], "getdefaultobfuscationequivalents() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.getDefaultObfuscationEquivalents"]], "getselectiveobfuscaterefsource() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.getSelectiveObfuscateRefSource"]], "keepmonth (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.keepMonth"]], "keeptextsizeforobfuscation (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.keepTextSizeForObfuscation"]], "keepyear (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.keepYear"]], "language (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.language"]], "maskingpolicy (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.maskingPolicy"]], "mode (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.mode"]], "obfuscatedate (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.obfuscateDate"]], "obfuscaterefsource (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.obfuscateRefSource"]], "region (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.region"]], "samelengthformattedentities (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.sameLengthFormattedEntities"]], "seed (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.seed"]], "setadditionaldateformats() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setAdditionalDateFormats"]], "setageranges() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setAgeRanges"]], "setagerangesbyhipaa() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setAgeRangesByHipaa"]], "setconsistentacrossnameparts() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setConsistentAcrossNameParts"]], "setcountryobfuscation() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setCountryObfuscation"]], "setdateentities() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setDateEntities"]], "setdateformats() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setDateFormats"]], "setdays() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setDays"]], "setenabledefaultobfuscationequivalents() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setEnableDefaultObfuscationEquivalents"]], "setfakerlengthoffset() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setFakerLengthOffset"]], "setfixedmasklength() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setFixedMaskLength"]], "setgenderawareness() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setGenderAwareness"]], "setgeoconsistency() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setGeoConsistency"]], "setkeepmonth() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setKeepMonth"]], "setkeeptextsizeforobfuscation() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setKeepTextSizeForObfuscation"]], "setkeepyear() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setKeepYear"]], "setlanguage() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setLanguage"]], "setmaskingpolicy() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setMaskingPolicy"]], "setmode() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setMode"]], "setobfuscatedate() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setObfuscateDate"]], "setobfuscaterefsource() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setObfuscateRefSource"]], "setobfuscationequivalents() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setObfuscationEquivalents"]], "setregion() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setRegion"]], "setsamelengthformattedentities() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setSameLengthFormattedEntities"]], "setseed() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setSeed"]], "setselectiveobfuscaterefsource() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setSelectiveObfuscateRefSource"]], "setselectiveobfuscationmodes() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setSelectiveObfuscationModes"]], "setstaticobfuscationpairs() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setStaticObfuscationPairs"]], "setunnormalizeddatemode() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setUnnormalizedDateMode"]], "setuseshiftdays() (basedeidentificationparams method)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.setUseShiftDays"]], "sparknlp_jsl.annotator.deid.base_deidentification_params": [[45, "module-sparknlp_jsl.annotator.deid.base_deidentification_params"]], "unnormalizeddatemode (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.unnormalizedDateMode"]], "useshiftdays (basedeidentificationparams attribute)": [[45, "sparknlp_jsl.annotator.deid.base_deidentification_params.BaseDeIdentificationParams.useShiftDays"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "additionaldateformats (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.additionalDateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.additionalDateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.additionalDateFormats"]], "additionaldateformats (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.additionalDateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.additionalDateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.additionalDateFormats"]], "ageranges (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ageRanges"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRanges"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRanges"]], "agerangesbyhipaa (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRangesByHipaa"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ageRangesByHipaa"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ageRangesByHipaa"]], "agerangesbyhipaa (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ageRangesByHipaa"]], "blacklist (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.blackList"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.blackList"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.blackList"]], "blacklistentities (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackListEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.blackListEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.blackListEntities"]], "blacklistentities (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackListEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.blackListEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.blackListEntities"]], "clear() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.clear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.clear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.clear"]], "clear() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.clear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.clear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.clear"]], "combineregexpatterns (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.combineRegexPatterns"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.combineRegexPatterns"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.combineRegexPatterns"]], "consistentacrossnameparts (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentAcrossNameParts"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.consistentAcrossNameParts"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.consistentAcrossNameParts"]], "consistentacrossnameparts (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentAcrossNameParts"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentAcrossNameParts"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentAcrossNameParts"]], "consistentobfuscation (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.consistentObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "copy() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.copy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.copy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.copy"]], "copy() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.copy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.copy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.copy"]], "countryobfuscation (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.countryObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.countryObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.countryObfuscation"]], "countryobfuscation (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.countryObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.countryObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.countryObfuscation"]], "dateentities (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateEntities"]], "dateentities (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateEntities"]], "dateformats (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.dateToYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.dateToYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.days"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.days"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.days"]], "doexceptionhandling (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.doExceptionHandling"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.doExceptionHandling"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.doExceptionHandling"]], "enabledefaultobfuscationequivalents (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.enableDefaultObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.enableDefaultObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.enableDefaultObfuscationEquivalents"]], "enabledefaultobfuscationequivalents (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.enableDefaultObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.enableDefaultObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.enableDefaultObfuscationEquivalents"]], "entitycasingmodespath (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.entityCasingModesPath"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "explainparam() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.explainParam"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.explainParam"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.explainParam"]], "explainparam() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.explainParam"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParam"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParam"]], "explainparams() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.explainParams"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.explainParams"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.explainParams"]], "explainparams() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.explainParams"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParams"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.explainParams"]], "extractparammap() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.extractParamMap"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.extractParamMap"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.extractParamMap"]], "extractparammap() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.extractParamMap"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.extractParamMap"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.extractParamMap"]], "fakerlengthoffset (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fakerLengthOffset"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fakerLengthOffset"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fakerLengthOffset"]], "fakerlengthoffset (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fakerLengthOffset"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.fakerLengthOffset"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.fakerLengthOffset"]], "fit() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fit"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fit"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fit"]], "fitmultiple() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fitMultiple"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fitMultiple"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fitMultiple"]], "fixedmasklength (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.fixedMaskLength"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.fixedMaskLength"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "genderawareness (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.genderAwareness"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.genderAwareness"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.genderAwareness"]], "genderawareness (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.genderAwareness"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.genderAwareness"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.genderAwareness"]], "geoconsistency (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.geoConsistency"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.geoConsistency"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.geoConsistency"]], "geoconsistency (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.geoConsistency"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.geoConsistency"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.geoConsistency"]], "getchunkmatching() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getChunkMatching"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getChunkMatching"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getChunkMatching"]], "getchunkmatching() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getChunkMatching"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getChunkMatching"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getChunkMatching"]], "getdefaultobfuscationequivalents() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getDefaultObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getDefaultObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getDefaultObfuscationEquivalents"]], "getdefaultobfuscationequivalents() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getDefaultObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getDefaultObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getDefaultObfuscationEquivalents"]], "getinputcols() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getInputCols"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getInputCols"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getInputCols"]], "getinputcols() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getInputCols"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getInputCols"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getInputCols"]], "getlazyannotator() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getLazyAnnotator"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getLazyAnnotator"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getLazyAnnotator"]], "getlazyannotator() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getLazyAnnotator"]], "getordefault() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getOrDefault"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getOrDefault"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getOrDefault"]], "getordefault() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getOrDefault"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getOrDefault"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getOrDefault"]], "getoutputcol() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getOutputCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getOutputCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getOutputCol"]], "getoutputcol() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getOutputCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getOutputCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getOutputCol"]], "getparam() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getParam"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getParam"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getParam"]], "getparam() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getParam"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getParam"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getParam"]], "getparamvalue() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getParamValue"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getParamValue"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getParamValue"]], "getparamvalue() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getParamValue"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getParamValue"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getParamValue"]], "getregexentities() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getRegexEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "getselectiveobfuscaterefsource() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getSelectiveObfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getSelectiveObfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getSelectiveObfuscateRefSource"]], "getselectiveobfuscaterefsource() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getSelectiveObfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getSelectiveObfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getSelectiveObfuscateRefSource"]], "getuseshiftdays() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getUseShiftDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getUseShiftDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getUseShiftDays"]], "getuseshiftdays() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getUseShiftDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getUseShiftDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getUseShiftDays"]], "getter_attrs (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getter_attrs"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.getter_attrs"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.getter_attrs"]], "getter_attrs (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getter_attrs"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.getter_attrs"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.getter_attrs"]], "groupbycol (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.groupByCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.groupByCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.groupByCol"]], "groupbycol (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.groupByCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.groupByCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.groupByCol"]], "hasdefault() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.hasDefault"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.hasDefault"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.hasDefault"]], "hasdefault() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.hasDefault"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.hasDefault"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.hasDefault"]], "hasparam() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.hasParam"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.hasParam"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.hasParam"]], "hasparam() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.hasParam"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.hasParam"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.hasParam"]], "ignoreregex (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.ignoreRegex"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.ignoreRegex"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputAnnotatorTypes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "inputcols (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputCols"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputCols"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputCols"]], "inputcols (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputCols"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputCols"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputCols"]], "inputcolsvalidation() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputColsValidation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.inputColsValidation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.inputColsValidation"]], "inputcolsvalidation() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputColsValidation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.inputColsValidation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.inputColsValidation"]], "isdefined() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isDefined"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isDefined"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isDefined"]], "isdefined() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isDefined"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isDefined"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isDefined"]], "israndomdatedisplacement (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isRandomDateDisplacement"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "isset() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isSet"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.isSet"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.isSet"]], "isset() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isSet"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.isSet"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.isSet"]], "keepmonth (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.keepMonth"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.keepMonth"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.keepMonth"]], "keepmonth (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.keepMonth"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.keepMonth"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.keepMonth"]], "keeptextsizeforobfuscation (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.keepTextSizeForObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.keepTextSizeForObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.keepTextSizeForObfuscation"]], "keeptextsizeforobfuscation (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.keepTextSizeForObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.keepTextSizeForObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.keepTextSizeForObfuscation"]], "keepyear (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.keepYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.keepYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.keepYear"]], "keepyear (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.keepYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.keepYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.keepYear"]], "language (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.language"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.language"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.language"]], "lazyannotator (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.lazyAnnotator"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.lazyAnnotator"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.lazyAnnotator"]], "lazyannotator (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.lazyAnnotator"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.lazyAnnotator"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.lazyAnnotator"]], "load() (deidentification class method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.load"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.load"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.load"]], "load() (deidentificationmodel class method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.load"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.load"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.load"]], "mappingscolumn (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.mappingsColumn"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.mappingsColumn"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.maskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.maskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "metadatamaskingpolicy (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.metadataMaskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.metadataMaskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.metadataMaskingPolicy"]], "metadatamaskingpolicy (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.metadataMaskingPolicy"]], "minyear (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.minYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.minYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.mode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.mode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatebyagegroups (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateByAgeGroups"]], "obfuscatebyagegroups (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateByAgeGroups"]], "obfuscatedate (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateDate"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateDate"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefFile"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "obfuscationequivalentsresource (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscationEquivalentsResource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscationEquivalentsResource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscationEquivalentsResource"]], "obfuscationstrategyonexception (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.obfuscationStrategyOnException"]], "obfuscationstrategyonexception (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.obfuscationStrategyOnException"]], "optionalinputannotatortypes (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.optionalInputAnnotatorTypes"]], "outputannotatortype (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputAnnotatorType"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputAsDocument"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAsDocument"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "outputcol (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.outputCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.outputCol"]], "outputcol (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.outputCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.outputCol"]], "pretrained() (deidentificationmodel static method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "read() (deidentification class method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.read"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.read"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.read"]], "read() (deidentificationmodel class method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.read"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.read"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.read"]], "reffileformat (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.refFileFormat"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.refSep"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.regexEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexOverride"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.regexOverride"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionary"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "regexpatternsdictionaryasjsonstring (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.regexPatternsDictionaryAsJsonString"]], "region (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.region"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.region"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.returnEntityMappings"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.returnEntityMappings"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.sameEntityThreshold"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "samelengthformattedentities (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"]], "samelengthformattedentities (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"]], "save() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.save"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.save"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.save"]], "save() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.save"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.save"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.save"]], "seed (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.seed"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.seed"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.seed"]], "selectiveobfuscationmodespath (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "set() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.set"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.set"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.set"]], "set() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.set"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.set"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.set"]], "setadditionaldateformats() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAdditionalDateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAdditionalDateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAdditionalDateFormats"]], "setadditionaldateformats() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAdditionalDateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAdditionalDateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAdditionalDateFormats"]], "setagegroups() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeGroups"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeGroups"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeGroups"]], "setagegroups() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeGroups"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeGroups"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeGroups"]], "setageranges() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeRanges"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRanges"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setagerangesbyhipaa() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setAgeRangesByHipaa"]], "setagerangesbyhipaa() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setAgeRangesByHipaa"]], "setblacklist() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setBlackList"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackList"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setblacklistentities() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackListEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setBlackListEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setBlackListEntities"]], "setblacklistentities() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackListEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackListEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setBlackListEntities"]], "setchunkmatching() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setChunkMatching"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setChunkMatching"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setChunkMatching"]], "setchunkmatching() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setChunkMatching"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setChunkMatching"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setChunkMatching"]], "setcombineregexpatterns() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setCombineRegexPatterns"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setCombineRegexPatterns"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setCombineRegexPatterns"]], "setconsistentacrossnameparts() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentAcrossNameParts"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setConsistentAcrossNameParts"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setConsistentAcrossNameParts"]], "setconsistentacrossnameparts() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentAcrossNameParts"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentAcrossNameParts"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentAcrossNameParts"]], "setconsistentobfuscation() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setConsistentObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setcountryobfuscation() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setCountryObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setCountryObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setCountryObfuscation"]], "setcountryobfuscation() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setCountryObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setCountryObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setCountryObfuscation"]], "setdateentities() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateEntities"]], "setdateentities() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateEntities"]], "setdateformats() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateFormats"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDateToYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateToYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setDays"]], "setdoexceptionhandling() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDoExceptionHandling"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setDoExceptionHandling"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setDoExceptionHandling"]], "setenabledefaultobfuscationequivalents() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEnableDefaultObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setEnableDefaultObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setEnableDefaultObfuscationEquivalents"]], "setenabledefaultobfuscationequivalents() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setEnableDefaultObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setEnableDefaultObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setEnableDefaultObfuscationEquivalents"]], "setentitycasingmodes() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setEntityCasingModes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setfakerlengthoffset() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFakerLengthOffset"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setFakerLengthOffset"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setFakerLengthOffset"]], "setfakerlengthoffset() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFakerLengthOffset"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setFakerLengthOffset"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setFakerLengthOffset"]], "setfixedmasklength() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setFixedMaskLength"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setforceinputtypevalidation() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setForceInputTypeValidation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setForceInputTypeValidation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setForceInputTypeValidation"]], "setforceinputtypevalidation() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setForceInputTypeValidation"]], "setgenderawareness() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGenderAwareness"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setGenderAwareness"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setGenderAwareness"]], "setgenderawareness() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGenderAwareness"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setGenderAwareness"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setGenderAwareness"]], "setgeoconsistency() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGeoConsistency"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setGeoConsistency"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setGeoConsistency"]], "setgeoconsistency() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGeoConsistency"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setGeoConsistency"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setGeoConsistency"]], "setgroupbycol() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGroupByCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setGroupByCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setGroupByCol"]], "setgroupbycol() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGroupByCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setGroupByCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setGroupByCol"]], "setignoreregex() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setIgnoreRegex"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setinputcols() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setInputCols"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setInputCols"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setInputCols"]], "setinputcols() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setInputCols"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setInputCols"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setInputCols"]], "setisrandomdatedisplacement() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setkeepmonth() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setKeepMonth"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setKeepMonth"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setKeepMonth"]], "setkeepmonth() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setKeepMonth"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepMonth"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepMonth"]], "setkeeptextsizeforobfuscation() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setKeepTextSizeForObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setKeepTextSizeForObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setKeepTextSizeForObfuscation"]], "setkeeptextsizeforobfuscation() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setKeepTextSizeForObfuscation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepTextSizeForObfuscation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepTextSizeForObfuscation"]], "setkeepyear() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setKeepYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setKeepYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setKeepYear"]], "setkeepyear() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setKeepYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setKeepYear"]], "setlanguage() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setLanguage"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setLanguage"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setlazyannotator() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLazyAnnotator"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setLazyAnnotator"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setLazyAnnotator"]], "setlazyannotator() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setLazyAnnotator"]], "setmappingscolumn() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMappingsColumn"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMappingsColumn"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMaskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMetadataMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMetadataMaskingPolicy"]], "setminyear() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMinYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMinYear"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setMode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setMode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatebyagegroups() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateByAgeGroups"]], "setobfuscatebyagegroups() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateByAgeGroups"]], "setobfuscatedate() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateDate"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateDate"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefFile"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setobfuscationequivalents() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationEquivalents"]], "setobfuscationequivalents() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscationEquivalents"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationEquivalents"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationEquivalents"]], "setobfuscationequivalentsresource() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscationEquivalentsResource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationEquivalentsResource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationEquivalentsResource"]], "setobfuscationstrategyonexception() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setObfuscationStrategyOnException"]], "setobfuscationstrategyonexception() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setOutputAsDocument"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setoutputcol() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setOutputCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setOutputCol"]], "setoutputcol() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputCol"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputCol"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setOutputCol"]], "setparamvalue() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setParamValue"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setParamValue"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setParamValue"]], "setparamvalue() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setParamValue"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setParamValue"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setParamValue"]], "setparams() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setParams"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setParams"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setParams"]], "setreffileformat() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRefFileFormat"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRefSep"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexOverride"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegexOverride"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregexpatternsdictionaryasjsonstring() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegexPatternsDictionaryAsJsonString"]], "setregion() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setRegion"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegion"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setReturnEntityMappings"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSameEntityThreshold"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"]], "setsamelengthformattedentities() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"]], "setseed() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSeed"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSeed"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSeed"]], "setselectiveobfuscaterefsource() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscateRefSource"]], "setselectiveobfuscaterefsource() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSelectiveObfuscateRefSource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSelectiveObfuscateRefSource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSelectiveObfuscateRefSource"]], "setselectiveobfuscationmodes() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "setselectiveobfuscationmodes() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSelectiveObfuscationModes"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setSelectiveObfuscationModes"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setSelectiveObfuscationModes"]], "setstaticobfuscationpairs() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setStaticObfuscationPairs"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setStaticObfuscationPairs"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setStaticObfuscationPairs"]], "setstaticobfuscationpairs() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setStaticObfuscationPairs"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setStaticObfuscationPairs"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setStaticObfuscationPairs"]], "setstaticobfuscationpairsresource() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setStaticObfuscationPairsResource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setStaticObfuscationPairsResource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setStaticObfuscationPairsResource"]], "setunnormalizeddatemode() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUseShifDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShifDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setuseshiftdays() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShiftDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setUseShiftDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setUseShiftDays"]], "setuseshiftdays() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShiftDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShiftDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setUseShiftDays"]], "setzipcodetag() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.setZipCodeTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.setZipCodeTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "skiplpinputcolsvalidation (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.skipLPInputColsValidation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.skipLPInputColsValidation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.deidentification": [[46, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "staticobfuscationpairsresource (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.staticObfuscationPairsResource"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.staticObfuscationPairsResource"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.staticObfuscationPairsResource"]], "transform() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.transform"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.transform"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.transform"]], "uid (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.uid"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.uid"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.uid"]], "uid (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.uid"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.uid"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.uid"]], "unnormalizeddatemode (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.unnormalizedDateMode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.useShifDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.useShifDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.useShifDays"]], "useshiftdays (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShiftDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.useShiftDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.useShiftDays"]], "useshiftdays (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShiftDays"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.useShiftDays"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.useShiftDays"]], "write() (deidentification method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.write"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.write"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.write"]], "write() (deidentificationmodel method)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.write"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.write"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.write"]], "zipcodetag (deidentification attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.zipCodeTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[46, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"], [142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.zipCodeTag"], [176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "deidentificationparams (class in sparknlp_jsl.annotator.deid.deidentication_params)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams"]], "additionaldateformats (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.additionalDateFormats"]], "ageranges (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRanges"]], "agerangesbyhipaa (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ageRangesByHipaa"]], "blacklist (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackList"]], "blacklistentities (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.blackListEntities"]], "consistentacrossnameparts (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.consistentAcrossNameParts"]], "consistentobfuscation (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.consistentObfuscation"]], "countryobfuscation (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.countryObfuscation"]], "dateentities (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateEntities"]], "dateformats (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateFormats"]], "datetag (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateTag"]], "datetoyear (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.dateToYear"]], "days (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.days"]], "enabledefaultobfuscationequivalents (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.enableDefaultObfuscationEquivalents"]], "fakerlengthoffset (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.fakerLengthOffset"]], "fixedmasklength (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.fixedMaskLength"]], "genderawareness (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.genderAwareness"]], "geoconsistency (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.geoConsistency"]], "getchunkmatching() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getChunkMatching"]], "getdefaultobfuscationequivalents() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getDefaultObfuscationEquivalents"]], "getselectiveobfuscaterefsource() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getSelectiveObfuscateRefSource"]], "getuseshiftdays() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.getUseShiftDays"]], "groupbycol (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.groupByCol"]], "ignoreregex (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.ignoreRegex"]], "israndomdatedisplacement (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.isRandomDateDisplacement"]], "keepmonth (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.keepMonth"]], "keeptextsizeforobfuscation (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.keepTextSizeForObfuscation"]], "keepyear (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.keepYear"]], "language (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.language"]], "mappingscolumn (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mappingsColumn"]], "maskingpolicy (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.maskingPolicy"]], "metadatamaskingpolicy (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.metadataMaskingPolicy"]], "minyear (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.minYear"]], "mode (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.mode"]], "obfuscatebyagegroups (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateByAgeGroups"]], "obfuscatedate (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateDate"]], "obfuscaterefsource (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscateRefSource"]], "obfuscationstrategyonexception (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.obfuscationStrategyOnException"]], "outputasdocument (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.outputAsDocument"]], "regexoverride (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.regexOverride"]], "region (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.region"]], "returnentitymappings (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.returnEntityMappings"]], "sameentitythreshold (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameEntityThreshold"]], "samelengthformattedentities (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.sameLengthFormattedEntities"]], "seed (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.seed"]], "setadditionaldateformats() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAdditionalDateFormats"]], "setagegroups() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeGroups"]], "setageranges() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRanges"]], "setagerangesbyhipaa() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setAgeRangesByHipaa"]], "setblacklist() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackList"]], "setblacklistentities() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setBlackListEntities"]], "setchunkmatching() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setChunkMatching"]], "setconsistentacrossnameparts() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setConsistentAcrossNameParts"]], "setconsistentobfuscation() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setConsistentObfuscation"]], "setcountryobfuscation() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setCountryObfuscation"]], "setdateentities() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateEntities"]], "setdateformats() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateFormats"]], "setdatetag() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateTag"]], "setdatetoyear() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDateToYear"]], "setdays() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setDays"]], "setenabledefaultobfuscationequivalents() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setEnableDefaultObfuscationEquivalents"]], "setfakerlengthoffset() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setFakerLengthOffset"]], "setfixedmasklength() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setFixedMaskLength"]], "setgenderawareness() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGenderAwareness"]], "setgeoconsistency() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGeoConsistency"]], "setgroupbycol() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setGroupByCol"]], "setignoreregex() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setIsRandomDateDisplacement"]], "setkeepmonth() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setKeepMonth"]], "setkeeptextsizeforobfuscation() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setKeepTextSizeForObfuscation"]], "setkeepyear() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setKeepYear"]], "setlanguage() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setLanguage"]], "setmappingscolumn() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMappingsColumn"]], "setmaskingpolicy() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMaskingPolicy"]], "setmetadatamaskingpolicy() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMetadataMaskingPolicy"]], "setminyear() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMinYear"]], "setmode() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setMode"]], "setobfuscatebyagegroups() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateByAgeGroups"]], "setobfuscatedate() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateDate"]], "setobfuscaterefsource() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscateRefSource"]], "setobfuscationequivalents() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscationEquivalents"]], "setobfuscationstrategyonexception() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setObfuscationStrategyOnException"]], "setoutputasdocument() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setOutputAsDocument"]], "setregexoverride() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegexOverride"]], "setregion() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setRegion"]], "setreturnentitymappings() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setReturnEntityMappings"]], "setsameentitythreshold() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSameLengthFormattedEntities"]], "setseed() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSeed"]], "setselectiveobfuscaterefsource() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSelectiveObfuscateRefSource"]], "setselectiveobfuscationmodes() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setSelectiveObfuscationModes"]], "setstaticobfuscationpairs() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setStaticObfuscationPairs"]], "setunnormalizeddatemode() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUnnormalizedDateMode"]], "setuseshifdays() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShifDays"]], "setuseshiftdays() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setUseShiftDays"]], "setzipcodetag() (deidentificationparams method)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentication_params": [[47, "module-sparknlp_jsl.annotator.deid.deidentication_params"]], "unnormalizeddatemode (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.unnormalizedDateMode"]], "useshifdays (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.useShifDays"]], "useshiftdays (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.useShiftDays"]], "zipcodetag (deidentificationparams attribute)": [[47, "sparknlp_jsl.annotator.deid.deidentication_params.DeIdentificationParams.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "clear() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.clear"]], "copy() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.copy"]], "dateshiftcolumn (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "explainparam() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.explainParam"]], "explainparams() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.explainParams"]], "extractparammap() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.extractParamMap"]], "getinputcols() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getInputCols"]], "getlazyannotator() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getLazyAnnotator"]], "getordefault() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getOrDefault"]], "getoutputcol() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getOutputCol"]], "getparam() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getParam"]], "getparamvalue() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getParamValue"]], "getter_attrs (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.getter_attrs"]], "hasdefault() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.hasDefault"]], "hasparam() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.hasParam"]], "inputannotatortypes (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "inputcols (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputCols"]], "inputcolsvalidation() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputColsValidation"]], "isdefined() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.isDefined"]], "isset() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.isSet"]], "lazyannotator (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.lazyAnnotator"]], "load() (documenthashcoder class method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.load"]], "name (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "outputcol (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputCol"]], "patientidcolumn (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "read() (documenthashcoder class method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.read"]], "save() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.save"]], "seed (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "set() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.set"]], "setdateshiftcolumn() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setinputcols() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setInputCols"]], "setlazyannotator() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setoutputcol() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setOutputCol"]], "setparamvalue() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParamValue"]], "setparams() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[48, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "transform() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.transform"]], "uid (documenthashcoder attribute)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.uid"]], "write() (documenthashcoder method)": [[48, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.write"]], "sparknlp_jsl.annotator.deid": [[49, "module-sparknlp_jsl.annotator.deid"]], "lightdeidentification (class in sparknlp_jsl.annotator.deid.light_deidentification)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification"]], "additionaldateformats (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.additionalDateFormats"]], "ageranges (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.ageRanges"]], "agerangesbyhipaa (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.ageRangesByHipaa"]], "clear() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.clear"]], "consistentacrossnameparts (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.consistentAcrossNameParts"]], "copy() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.copy"]], "countryobfuscation (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.countryObfuscation"]], "dateentities (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.dateEntities"]], "dateformats (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.dateFormats"]], "days (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.days"]], "enabledefaultobfuscationequivalents (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.enableDefaultObfuscationEquivalents"]], "explainparam() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.explainParam"]], "explainparams() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.explainParams"]], "extractparammap() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.extractParamMap"]], "fakerlengthoffset (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.fakerLengthOffset"]], "fixedmasklength (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.fixedMaskLength"]], "genderawareness (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.genderAwareness"]], "geoconsistency (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.geoConsistency"]], "getdefaultobfuscationequivalents() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getDefaultObfuscationEquivalents"]], "getinputcols() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getInputCols"]], "getlazyannotator() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getLazyAnnotator"]], "getordefault() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getOrDefault"]], "getoutputcol() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getOutputCol"]], "getparam() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getParam"]], "getparamvalue() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getParamValue"]], "getselectiveobfuscaterefsource() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getSelectiveObfuscateRefSource"]], "getter_attrs (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.getter_attrs"]], "hasdefault() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.hasDefault"]], "hasparam() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.hasParam"]], "inputannotatortypes (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputAnnotatorTypes"]], "inputcols (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputCols"]], "inputcolsvalidation() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.inputColsValidation"]], "isdefined() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.isDefined"]], "isset() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.isSet"]], "keepmonth (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.keepMonth"]], "keeptextsizeforobfuscation (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.keepTextSizeForObfuscation"]], "keepyear (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.keepYear"]], "language (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.language"]], "lazyannotator (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.lazyAnnotator"]], "load() (lightdeidentification class method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.load"]], "maskingpolicy (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.maskingPolicy"]], "mode (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.mode"]], "name (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.name"]], "obfuscatedate (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.obfuscateDate"]], "obfuscaterefsource (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.obfuscateRefSource"]], "optionalinputannotatortypes (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.optionalInputAnnotatorTypes"]], "outputannotatortype (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.outputAnnotatorType"]], "outputcol (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.outputCol"]], "read() (lightdeidentification class method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.read"]], "region (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.region"]], "samelengthformattedentities (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.sameLengthFormattedEntities"]], "save() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.save"]], "seed (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.seed"]], "set() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.set"]], "setadditionaldateformats() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setAdditionalDateFormats"]], "setageranges() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setAgeRanges"]], "setagerangesbyhipaa() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setAgeRangesByHipaa"]], "setconsistentacrossnameparts() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setConsistentAcrossNameParts"]], "setcountryobfuscation() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setCountryObfuscation"]], "setcustomfakers() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setCustomFakers"]], "setdateentities() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDateEntities"]], "setdateformats() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDateFormats"]], "setdays() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setDays"]], "setenabledefaultobfuscationequivalents() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setEnableDefaultObfuscationEquivalents"]], "setfakerlengthoffset() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setFakerLengthOffset"]], "setfixedmasklength() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setFixedMaskLength"]], "setforceinputtypevalidation() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setForceInputTypeValidation"]], "setgenderawareness() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setGenderAwareness"]], "setgeoconsistency() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setGeoConsistency"]], "setinputcols() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setInputCols"]], "setkeepmonth() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setKeepMonth"]], "setkeeptextsizeforobfuscation() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setKeepTextSizeForObfuscation"]], "setkeepyear() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setKeepYear"]], "setlanguage() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setLanguage"]], "setlazyannotator() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setLazyAnnotator"]], "setmaskingpolicy() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setMaskingPolicy"]], "setmode() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setMode"]], "setobfuscatedate() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscateDate"]], "setobfuscaterefsource() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscateRefSource"]], "setobfuscationequivalents() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setObfuscationEquivalents"]], "setoutputcol() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setOutputCol"]], "setparamvalue() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setParamValue"]], "setparams() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setParams"]], "setregion() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setRegion"]], "setsamelengthformattedentities() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSameLengthFormattedEntities"]], "setseed() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSeed"]], "setselectiveobfuscaterefsource() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSelectiveObfuscateRefSource"]], "setselectiveobfuscationmodes() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setSelectiveObfuscationModes"]], "setstaticobfuscationpairs() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setStaticObfuscationPairs"]], "setunnormalizeddatemode() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setUnnormalizedDateMode"]], "setuseshiftdays() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.setUseShiftDays"]], "skiplpinputcolsvalidation (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.light_deidentification": [[50, "module-sparknlp_jsl.annotator.deid.light_deIdentification"]], "transform() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.transform"]], "uid (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.uid"]], "unnormalizeddatemode (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.unnormalizedDateMode"]], "useshiftdays (lightdeidentification attribute)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.useShiftDays"]], "write() (lightdeidentification method)": [[50, "sparknlp_jsl.annotator.deid.light_deIdentification.LightDeIdentification.write"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "clear() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.clear"]], "clear() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.clear"]], "copy() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.copy"]], "copy() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.copy"]], "explainparam() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.explainParam"]], "explainparam() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.explainParam"]], "explainparams() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.explainParams"]], "explainparams() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.explainParams"]], "extractparammap() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.extractParamMap"]], "extractparammap() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.extractParamMap"]], "fit() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.fit"]], "fitmultiple() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.fitMultiple"]], "genderawareness (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "getinputcols() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getInputCols"]], "getinputcols() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getInputCols"]], "getlazyannotator() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getLazyAnnotator"]], "getlazyannotator() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getLazyAnnotator"]], "getordefault() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getOrDefault"]], "getordefault() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getOrDefault"]], "getoutputcol() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getOutputCol"]], "getoutputcol() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getOutputCol"]], "getparam() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getParam"]], "getparam() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getParam"]], "getparamvalue() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getParamValue"]], "getparamvalue() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getParamValue"]], "getter_attrs (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.getter_attrs"]], "getter_attrs (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.getter_attrs"]], "hasdefault() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.hasDefault"]], "hasdefault() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.hasDefault"]], "hasparam() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.hasParam"]], "hasparam() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.hasParam"]], "inputannotatortypes (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "inputcols (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputCols"]], "inputcols (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputCols"]], "inputcolsvalidation() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputColsValidation"]], "inputcolsvalidation() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputColsValidation"]], "isdefined() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.isDefined"]], "isdefined() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.isDefined"]], "isset() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.isSet"]], "isset() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.isSet"]], "language (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "lazyannotator (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.lazyAnnotator"]], "lazyannotator (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.lazyAnnotator"]], "load() (namechunkobfuscator class method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.load"]], "load() (namechunkobfuscatorapproach class method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.load"]], "nameentities (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "optionalinputannotatortypes (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.optionalInputAnnotatorTypes"]], "outputannotatortype (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "outputcol (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputCol"]], "outputcol (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputCol"]], "read() (namechunkobfuscator class method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.read"]], "read() (namechunkobfuscatorapproach class method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.read"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "save() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.save"]], "save() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.save"]], "seed (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "set() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.set"]], "set() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.set"]], "setforceinputtypevalidation() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setForceInputTypeValidation"]], "setforceinputtypevalidation() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setForceInputTypeValidation"]], "setgenderawareness() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setinputcols() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setInputCols"]], "setinputcols() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setInputCols"]], "setlanguage() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setlazyannotator() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLazyAnnotator"]], "setlazyannotator() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLazyAnnotator"]], "setnameentities() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setoutputcol() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setOutputCol"]], "setoutputcol() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setOutputCol"]], "setparamvalue() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setParamValue"]], "setparamvalue() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setParamValue"]], "setparams() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setParams"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "skiplpinputcolsvalidation (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[51, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "transform() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.transform"]], "uid (namechunkobfuscator attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.uid"]], "uid (namechunkobfuscatorapproach attribute)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.uid"]], "write() (namechunkobfuscator method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.write"]], "write() (namechunkobfuscatorapproach method)": [[51, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.write"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "clear() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.clear"]], "copy() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.copy"]], "explainparam() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.explainParam"]], "explainparams() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.explainParams"]], "extractparammap() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.extractParamMap"]], "getinputcols() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getInputCols"]], "getlazyannotator() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getLazyAnnotator"]], "getordefault() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getOrDefault"]], "getoutputcol() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getOutputCol"]], "getparam() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getParam"]], "getparamvalue() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getParamValue"]], "getter_attrs (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.getter_attrs"]], "hasdefault() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.hasDefault"]], "hasparam() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.hasParam"]], "inputannotatortypes (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "inputcols (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputCols"]], "inputcolsvalidation() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputColsValidation"]], "isdefined() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.isDefined"]], "isset() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.isSet"]], "lazyannotator (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.lazyAnnotator"]], "load() (reidentification class method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.load"]], "name (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "optionalinputannotatortypes (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.optionalInputAnnotatorTypes"]], "outputannotatortype (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "outputcol (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputCol"]], "read() (reidentification class method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.read"]], "save() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.save"]], "set() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.set"]], "setforceinputtypevalidation() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setForceInputTypeValidation"]], "setinputcols() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setInputCols"]], "setlazyannotator() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setLazyAnnotator"]], "setoutputcol() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setOutputCol"]], "setparamvalue() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setParamValue"]], "setparams() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.setParams"]], "skiplpinputcolsvalidation (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.reidentification": [[52, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "transform() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.transform"]], "uid (reidentification attribute)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.uid"]], "write() (reidentification method)": [[52, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.write"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "clear() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.clear"]], "copy() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.copy"]], "explainparam() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.explainParam"]], "explainparams() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.explainParams"]], "extractparammap() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.extractParamMap"]], "getinputcols() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getInputCols"]], "getlazyannotator() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getLazyAnnotator"]], "getordefault() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getOrDefault"]], "getoutputcol() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getOutputCol"]], "getparam() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getParam"]], "getparamvalue() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getParamValue"]], "getstaticentitymappings() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getStaticEntityMappings"]], "getusereplacement() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "getter_attrs (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.getter_attrs"]], "hasdefault() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.hasDefault"]], "hasparam() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.hasParam"]], "inputannotatortypes (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "inputcols (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputCols"]], "inputcolsvalidation() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputColsValidation"]], "isdefined() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.isDefined"]], "isset() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.isSet"]], "lazyannotator (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.lazyAnnotator"]], "load() (replacer class method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.load"]], "mappingscolumn (replacer attribute)": [[53, "id0"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.mappingsColumn"]], "name (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "nonevaluesto (replacer attribute)": [[53, "id1"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.noneValuesTo"]], "optionalinputannotatortypes (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.optionalInputAnnotatorTypes"]], "outputannotatortype (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "outputcol (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputCol"]], "placeholder (replacer attribute)": [[53, "id2"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.placeHolder"]], "placeholderdelimiters (replacer attribute)": [[53, "id3"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.placeHolderDelimiters"]], "read() (replacer class method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.read"]], "returnentitymappings (replacer attribute)": [[53, "id4"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.returnEntityMappings"]], "save() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.save"]], "set() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.set"]], "setforceinputtypevalidation() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setForceInputTypeValidation"]], "setinputcols() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setInputCols"]], "setlazyannotator() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setLazyAnnotator"]], "setmappingscolumn() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setMappingsColumn"]], "setnonevaluesto() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setNoneValuesTo"]], "setoutputcol() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setOutputCol"]], "setparamvalue() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setParamValue"]], "setparams() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setParams"]], "setplaceholder() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setPlaceHolder"]], "setplaceholderdelimiters() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setPlaceHolderDelimiters"]], "setreturnentitymappings() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setReturnEntityMappings"]], "setstaticentitymappings() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setStaticEntityMappings"]], "setstaticentitymappingsfallback() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setStaticEntityMappingsFallback"]], "setusereplacement() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "skiplpinputcolsvalidation (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.deid.replacer": [[53, "module-sparknlp_jsl.annotator.deid.replacer"]], "staticentitymappings (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.staticEntityMappings"]], "staticentitymappingsfallback (replacer attribute)": [[53, "id5"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.staticEntityMappingsFallback"]], "transform() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.transform"]], "uid (replacer attribute)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.uid"]], "usereplacement (replacer attribute)": [[53, "id6"], [53, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "write() (replacer method)": [[53, "sparknlp_jsl.annotator.deid.replacer.Replacer.write"]], "sparknlp_jsl.annotator.disambiguation": [[54, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "clear() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.clear"]], "clear() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.clear"]], "copy() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.copy"]], "copy() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.copy"]], "embeddingtypeparam (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "explainparam() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.explainParam"]], "explainparam() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.explainParam"]], "explainparams() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.explainParams"]], "explainparams() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.explainParams"]], "extractparammap() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.extractParamMap"]], "extractparammap() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.extractParamMap"]], "fit() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.fit"]], "fitmultiple() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.fitMultiple"]], "getinputcols() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getInputCols"]], "getinputcols() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getInputCols"]], "getlazyannotator() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getLazyAnnotator"]], "getlazyannotator() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getLazyAnnotator"]], "getordefault() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getOrDefault"]], "getordefault() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getOrDefault"]], "getoutputcol() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getOutputCol"]], "getoutputcol() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getOutputCol"]], "getparam() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getParam"]], "getparam() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getParam"]], "getparamvalue() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getParamValue"]], "getparamvalue() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getParamValue"]], "getter_attrs (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.getter_attrs"]], "getter_attrs (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.getter_attrs"]], "hasdefault() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.hasDefault"]], "hasdefault() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.hasDefault"]], "hasparam() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.hasParam"]], "hasparam() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.hasParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "inputcols (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputCols"]], "inputcols (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputCols"]], "inputcolsvalidation() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputColsValidation"]], "inputcolsvalidation() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputColsValidation"]], "isdefined() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.isDefined"]], "isdefined() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.isDefined"]], "isset() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.isSet"]], "isset() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.isSet"]], "lazyannotator (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.lazyAnnotator"]], "lazyannotator (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.lazyAnnotator"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "load() (nerdisambiguator class method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.load"]], "load() (nerdisambiguatormodel class method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.load"]], "name (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "optionalinputannotatortypes (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "outputcol (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputCol"]], "outputcol (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputCol"]], "predictionslimit (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "read() (nerdisambiguator class method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.read"]], "read() (nerdisambiguatormodel class method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.read"]], "s3knowledgebasename (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "save() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.save"]], "save() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.save"]], "set() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.set"]], "set() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.set"]], "setembeddingtype() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setforceinputtypevalidation() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setForceInputTypeValidation"]], "setforceinputtypevalidation() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setForceInputTypeValidation"]], "setinputcols() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setInputCols"]], "setinputcols() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setInputCols"]], "setlazyannotator() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLazyAnnotator"]], "setlazyannotator() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLazyAnnotator"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setoutputcol() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setOutputCol"]], "setoutputcol() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setOutputCol"]], "setparamvalue() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setParamValue"]], "setparamvalue() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setParamValue"]], "setparams() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setParams"]], "setpredictionlimit() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "skiplpinputcolsvalidation (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[55, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "transform() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.transform"]], "uid (nerdisambiguator attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.uid"]], "uid (nerdisambiguatormodel attribute)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.uid"]], "write() (nerdisambiguator method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.write"]], "write() (nerdisambiguatormodel method)": [[55, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.write"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "clear() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.clear"]], "copy() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.copy"]], "explainparam() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.explainParam"]], "explainparams() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.explainParams"]], "extractparammap() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.extractParamMap"]], "failonmissing (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "getinputcols() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getInputCols"]], "getlazyannotator() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getLazyAnnotator"]], "getordefault() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getOrDefault"]], "getoutputcol() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getOutputCol"]], "getparam() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getParam"]], "getparamvalue() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getParamValue"]], "getter_attrs (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.getter_attrs"]], "hasdefault() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.hasDefault"]], "hasparam() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.hasParam"]], "inputannotatortypes (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "inputcols (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputCols"]], "inputcolsvalidation() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputColsValidation"]], "isarray (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "isdefined() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isDefined"]], "isset() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isSet"]], "lazyannotator (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lazyAnnotator"]], "load() (doc2chunkinternal class method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.load"]], "lowercase (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "optionalinputannotatortypes (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.outputAnnotatorType"]], "outputcol (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.outputCol"]], "read() (doc2chunkinternal class method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.read"]], "save() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.save"]], "set() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.set"]], "setchunkcol() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setinputcols() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setInputCols"]], "setisarray() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlazyannotator() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLazyAnnotator"]], "setlowercase() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setoutputcol() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setOutputCol"]], "setparamvalue() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParamValue"]], "setparams() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[56, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "transform() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.transform"]], "uid (doc2chunkinternal attribute)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.uid"]], "write() (doc2chunkinternal method)": [[56, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.write"]], "documentfiltererbyclassifier (class in sparknlp_jsl.annotator.document_filterer_by_classifier)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier"]], "blacklist (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.blackList"]], "casesensitive (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.caseSensitive"]], "clear() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.clear"]], "copy() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.copy"]], "explainparam() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.explainParam"]], "explainparams() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.explainParams"]], "extractparammap() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.extractParamMap"]], "getinputcols() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getInputCols"]], "getlazyannotator() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getLazyAnnotator"]], "getordefault() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getOrDefault"]], "getoutputcol() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getOutputCol"]], "getparam() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getParam"]], "getparamvalue() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getParamValue"]], "getter_attrs (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.getter_attrs"]], "hasdefault() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.hasDefault"]], "hasparam() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.hasParam"]], "inputannotatortypes (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputAnnotatorTypes"]], "inputcols (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputCols"]], "inputcolsvalidation() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.inputColsValidation"]], "isdefined() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.isDefined"]], "isset() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.isSet"]], "lazyannotator (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.lazyAnnotator"]], "load() (documentfiltererbyclassifier class method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.load"]], "name (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.name"]], "optionalinputannotatortypes (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.optionalInputAnnotatorTypes"]], "outputannotatortype (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputAnnotatorType"]], "outputcol (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.outputCol"]], "read() (documentfiltererbyclassifier class method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.read"]], "save() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.save"]], "set() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.set"]], "setblacklist() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setBlackList"]], "setcasesensitive() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setCaseSensitive"]], "setdenylist() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setDenyList"]], "setforceinputtypevalidation() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setForceInputTypeValidation"]], "setinputcols() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setInputCols"]], "setlazyannotator() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setLazyAnnotator"]], "setoutputcol() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setOutputCol"]], "setparamvalue() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setParamValue"]], "setparams() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setParams"]], "setwhitelist() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.setWhiteList"]], "skiplpinputcolsvalidation (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.document_filterer_by_classifier": [[57, "module-sparknlp_jsl.annotator.document_filterer_by_classifier"]], "transform() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.transform"]], "uid (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.uid"]], "whitelist (documentfiltererbyclassifier attribute)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.whiteList"]], "write() (documentfiltererbyclassifier method)": [[57, "sparknlp_jsl.annotator.document_filterer_by_classifier.DocumentFiltererByClassifier.write"]], "documentfiltererbyner (class in sparknlp_jsl.annotator.document_filterer_by_ner)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER"]], "blacklist (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.blackList"]], "casesensitive (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.caseSensitive"]], "clear() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.clear"]], "copy() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.copy"]], "explainparam() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.explainParam"]], "explainparams() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.explainParams"]], "extractparammap() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.extractParamMap"]], "getinputcols() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getInputCols"]], "getlazyannotator() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getLazyAnnotator"]], "getordefault() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getOrDefault"]], "getoutputcol() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getOutputCol"]], "getparam() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getParam"]], "getparamvalue() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getParamValue"]], "getter_attrs (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.getter_attrs"]], "hasdefault() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.hasDefault"]], "hasparam() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.hasParam"]], "inputannotatortypes (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputAnnotatorTypes"]], "inputcols (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputCols"]], "inputcolsvalidation() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.inputColsValidation"]], "isdefined() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.isDefined"]], "isset() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.isSet"]], "joinstring (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.joinString"]], "lazyannotator (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.lazyAnnotator"]], "load() (documentfiltererbyner class method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.load"]], "name (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.name"]], "optionalinputannotatortypes (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.optionalInputAnnotatorTypes"]], "outputannotatortype (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputAnnotatorType"]], "outputasdocument (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputAsDocument"]], "outputcol (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.outputCol"]], "read() (documentfiltererbyner class method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.read"]], "save() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.save"]], "set() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.set"]], "setblacklist() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setBlackList"]], "setcasesensitive() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setCaseSensitive"]], "setdenylist() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setDenyList"]], "setforceinputtypevalidation() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setForceInputTypeValidation"]], "setinputcols() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setInputCols"]], "setlazyannotator() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setLazyAnnotator"]], "setoutputcol() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setOutputCol"]], "setparamvalue() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setParamValue"]], "setparams() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setParams"]], "setwhitelist() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.setWhiteList"]], "skiplpinputcolsvalidation (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.document_filterer_by_ner": [[58, "module-sparknlp_jsl.annotator.document_filterer_by_ner"]], "transform() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.transform"]], "uid (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.uid"]], "whitelist (documentfiltererbyner attribute)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.whiteList"]], "write() (documentfiltererbyner method)": [[58, "sparknlp_jsl.annotator.document_filterer_by_ner.DocumentFiltererByNER.write"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "clear() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.clear"]], "copy() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.copy"]], "explainparam() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.explainParam"]], "explainparams() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.explainParams"]], "extractparammap() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.extractParamMap"]], "getinputcols() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getInputCols"]], "getlazyannotator() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getLazyAnnotator"]], "getordefault() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getOrDefault"]], "getoutputcol() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getOutputCol"]], "getparam() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getParam"]], "getparamvalue() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getParamValue"]], "getter_attrs (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.getter_attrs"]], "hasdefault() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.hasDefault"]], "hasparam() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.hasParam"]], "inputannotatortypes (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "inputcols (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputCols"]], "inputcolsvalidation() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputColsValidation"]], "isdefined() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.isDefined"]], "isset() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.isSet"]], "lazyannotator (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.lazyAnnotator"]], "load() (averageembeddings class method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.load"]], "name (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "optionalinputannotatortypes (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "outputcol (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputCol"]], "read() (averageembeddings class method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.read"]], "save() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.save"]], "set() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.set"]], "setforceinputtypevalidation() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setForceInputTypeValidation"]], "setinputcols() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setInputCols"]], "setlazyannotator() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setLazyAnnotator"]], "setoutputcol() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setOutputCol"]], "setparamvalue() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setParamValue"]], "setparams() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.setParams"]], "skiplpinputcolsvalidation (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[59, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "transform() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.transform"]], "uid (averageembeddings attribute)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.uid"]], "write() (averageembeddings method)": [[59, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.write"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "batchsize (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.batchSize"]], "casesensitive (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.caseSensitive"]], "chunkweight (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "clear() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.clear"]], "configprotobytes (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.configProtoBytes"]], "copy() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.copy"]], "dimension (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.dimension"]], "explainparam() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.explainParam"]], "explainparams() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.explainParams"]], "extractparammap() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.extractParamMap"]], "getbatchsize() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getBatchSize"]], "getcasesensitive() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getCaseSensitive"]], "getdimension() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getDimension"]], "getinputcols() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getInputCols"]], "getlazyannotator() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getLazyAnnotator"]], "getordefault() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getOrDefault"]], "getoutputcol() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getOutputCol"]], "getparam() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getParam"]], "getparamvalue() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getParamValue"]], "getstorageref() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getStorageRef"]], "getter_attrs (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.getter_attrs"]], "hasdefault() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.hasDefault"]], "hasparam() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.hasParam"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "inputcols (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputCols"]], "inputcolsvalidation() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputColsValidation"]], "isdefined() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isDefined"]], "islong (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isLong"]], "isset() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.isSet"]], "lazyannotator (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.lazyAnnotator"]], "load() (bertsentencechunkembeddings static method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "loadsavedmodel() (bertsentencechunkembeddings static method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.loadSavedModel"]], "name (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "optionalinputannotatortypes (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "outputcol (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputCol"]], "pretrained() (bertsentencechunkembeddings static method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "read() (bertsentencechunkembeddings class method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.read"]], "save() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.save"]], "scopewindow (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.scopeWindow"]], "set() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.set"]], "setbatchsize() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setBatchSize"]], "setcasesensitive() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setCaseSensitive"]], "setchunkweight() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "setconfigprotobytes() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setConfigProtoBytes"]], "setdimension() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setDimension"]], "setinputcols() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setInputCols"]], "setislong() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setIsLong"]], "setlazyannotator() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setLazyAnnotator"]], "setoutputcol() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setOutputCol"]], "setparamvalue() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setParamValue"]], "setparams() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setParams"]], "setscopewindow() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setScopeWindow"]], "setstorageref() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setStorageRef"]], "setstrategy() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setStrategy"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[60, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "storageref (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.storageRef"]], "strategy (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.strategy"]], "transform() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.transform"]], "uid (bertsentencechunkembeddings attribute)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.uid"]], "write() (bertsentencechunkembeddings method)": [[60, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.write"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "batchsize (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.batchSize"]], "casesensitive (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.caseSensitive"]], "clear() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.clear"]], "configprotobytes (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.configProtoBytes"]], "copy() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.copy"]], "dimension (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.dimension"]], "entityweights (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "explainparam() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.explainParam"]], "explainparams() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.explainParams"]], "extractparammap() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.extractParamMap"]], "getbatchsize() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getBatchSize"]], "getcasesensitive() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getCaseSensitive"]], "getdimension() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getDimension"]], "getinputcols() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getInputCols"]], "getlazyannotator() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getLazyAnnotator"]], "getordefault() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getOrDefault"]], "getoutputcol() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getOutputCol"]], "getparam() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getParam"]], "getparamvalue() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getParamValue"]], "getstorageref() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getStorageRef"]], "getter_attrs (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.getter_attrs"]], "hasdefault() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.hasDefault"]], "hasparam() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.hasParam"]], "inputannotatortypes (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "inputcols (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputCols"]], "inputcolsvalidation() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputColsValidation"]], "isdefined() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isDefined"]], "islong (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isLong"]], "isset() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.isSet"]], "lazyannotator (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.lazyAnnotator"]], "load() (entitychunkembeddings class method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.load"]], "loadsavedmodel() (entitychunkembeddings static method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.loadSavedModel"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "optionalinputannotatortypes (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.optionalInputAnnotatorTypes"]], "outputannotatortype (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "outputcol (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputCol"]], "pretrained() (entitychunkembeddings static method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "read() (entitychunkembeddings class method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.read"]], "save() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.save"]], "set() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.set"]], "setbatchsize() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setBatchSize"]], "setcasesensitive() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setCaseSensitive"]], "setconfigprotobytes() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setConfigProtoBytes"]], "setdimension() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setDimension"]], "setentityweights() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setinputcols() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setInputCols"]], "setislong() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setIsLong"]], "setlazyannotator() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setLazyAnnotator"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "setoutputcol() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setOutputCol"]], "setparamvalue() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setParamValue"]], "setparams() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setParams"]], "setstorageref() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setStorageRef"]], "settargetentities() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[61, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "storageref (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.storageRef"]], "targetentities (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "transform() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.transform"]], "uid (entitychunkembeddings attribute)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.uid"]], "write() (entitychunkembeddings method)": [[61, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.write"]], "extractivesummarization (class in sparknlp_jsl.annotator.embeddings.extractive_summarization)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization"]], "clear() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.clear"]], "copy() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.copy"]], "explainparam() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.explainParam"]], "explainparams() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.explainParams"]], "extractparammap() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.extractParamMap"]], "getinputcols() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getInputCols"]], "getlazyannotator() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getLazyAnnotator"]], "getordefault() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getOrDefault"]], "getoutputcol() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getOutputCol"]], "getparam() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getParam"]], "getparamvalue() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getParamValue"]], "getter_attrs (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.getter_attrs"]], "hasdefault() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.hasDefault"]], "hasparam() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.hasParam"]], "inputannotatortypes (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputAnnotatorTypes"]], "inputcols (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputCols"]], "inputcolsvalidation() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputColsValidation"]], "isdefined() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.isDefined"]], "isset() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.isSet"]], "lazyannotator (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.lazyAnnotator"]], "load() (extractivesummarization class method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.load"]], "name (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.name"]], "optionalinputannotatortypes (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.optionalInputAnnotatorTypes"]], "outputannotatortype (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputAnnotatorType"]], "outputcol (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputCol"]], "read() (extractivesummarization class method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.read"]], "returnsingledocument (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.returnSingleDocument"]], "save() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.save"]], "set() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.set"]], "setforceinputtypevalidation() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setForceInputTypeValidation"]], "setinputcols() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setInputCols"]], "setlazyannotator() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setLazyAnnotator"]], "setoutputcol() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setOutputCol"]], "setparamvalue() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setParamValue"]], "setparams() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setParams"]], "setreturnsingledocument() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setReturnSingleDocument"]], "setsimilaritythreshold() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSimilarityThreshold"]], "setsummarysize() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSummarySize"]], "similaritythreshold (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.similarityThreshold"]], "skiplpinputcolsvalidation (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[62, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "summarysize (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.summarySize"]], "transform() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.transform"]], "uid (extractivesummarization attribute)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.uid"]], "write() (extractivesummarization method)": [[62, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.write"]], "sparknlp_jsl.annotator.embeddings": [[63, "module-sparknlp_jsl.annotator.embeddings"]], "entityrulerinternalapproach (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach"]], "entityrulerinternalmodel (class in sparknlp_jsl.annotator.er.entity_ruler_internal)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel"]], "alphabet (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.alphabet"]], "casesensitive (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.caseSensitive"]], "casesensitive (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.caseSensitive"]], "clear() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.clear"]], "clear() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.clear"]], "copy() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.copy"]], "copy() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.copy"]], "database (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.database"]], "enableinmemorystorage (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.enableInMemoryStorage"]], "explainparam() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.explainParam"]], "explainparam() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.explainParam"]], "explainparams() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.explainParams"]], "explainparams() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.explainParams"]], "extractparammap() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.extractParamMap"]], "extractparammap() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.extractParamMap"]], "fit() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.fit"]], "fitmultiple() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.fitMultiple"]], "getcasesensitive() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getCaseSensitive"]], "getcasesensitive() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getCaseSensitive"]], "getenableinmemorystorage() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getEnableInMemoryStorage"]], "getincludestorage() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getIncludeStorage"]], "getinputcols() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getInputCols"]], "getinputcols() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getInputCols"]], "getlazyannotator() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getLazyAnnotator"]], "getlazyannotator() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getLazyAnnotator"]], "getordefault() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getOrDefault"]], "getordefault() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getOrDefault"]], "getoutputcol() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getOutputCol"]], "getoutputcol() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getOutputCol"]], "getparam() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getParam"]], "getparam() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getParam"]], "getparamvalue() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getParamValue"]], "getparamvalue() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getParamValue"]], "getstoragepath() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getStoragePath"]], "getstorageref() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getStorageRef"]], "getstorageref() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getStorageRef"]], "getter_attrs (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.getter_attrs"]], "getter_attrs (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.getter_attrs"]], "hasdefault() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.hasDefault"]], "hasdefault() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.hasDefault"]], "hasparam() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.hasParam"]], "hasparam() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.hasParam"]], "includestorage (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.includeStorage"]], "inputannotatortypes (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputAnnotatorTypes"]], "inputannotatortypes (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputAnnotatorTypes"]], "inputcols (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputCols"]], "inputcols (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputCols"]], "inputcolsvalidation() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.inputColsValidation"]], "inputcolsvalidation() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.inputColsValidation"]], "isdefined() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.isDefined"]], "isdefined() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.isDefined"]], "isset() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.isSet"]], "isset() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.isSet"]], "lazyannotator (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.lazyAnnotator"]], "lazyannotator (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.lazyAnnotator"]], "load() (entityrulerinternalapproach class method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.load"]], "load() (entityrulerinternalmodel class method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.load"]], "loadstorage() (entityrulerinternalmodel static method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorage"]], "loadstorages() (entityrulerinternalmodel static method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.loadStorages"]], "name (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.name"]], "name (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.name"]], "optionalinputannotatortypes (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputAnnotatorType"]], "outputannotatortype (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputAnnotatorType"]], "outputcol (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.outputCol"]], "outputcol (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.outputCol"]], "patternsresource (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.patternsResource"]], "pretrained() (entityrulerinternalmodel static method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.pretrained"]], "read() (entityrulerinternalapproach class method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.read"]], "read() (entityrulerinternalmodel class method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.read"]], "save() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.save"]], "save() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.save"]], "savestorage() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.saveStorage"]], "sentencematch (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.sentenceMatch"]], "set() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.set"]], "set() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.set"]], "setalphabetresource() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setAlphabetResource"]], "setcasesensitive() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setCaseSensitive"]], "setcasesensitive() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setCaseSensitive"]], "setenableinmemorystorage() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setEnableInMemoryStorage"]], "setforceinputtypevalidation() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setForceInputTypeValidation"]], "setincludestorage() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setIncludeStorage"]], "setinputcols() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setInputCols"]], "setinputcols() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setInputCols"]], "setlazyannotator() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setLazyAnnotator"]], "setlazyannotator() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setLazyAnnotator"]], "setoutputcol() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setOutputCol"]], "setoutputcol() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setOutputCol"]], "setparamvalue() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setParamValue"]], "setparamvalue() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setParamValue"]], "setparams() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setParams"]], "setpatternsresource() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setPatternsResource"]], "setsentencematch() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setSentenceMatch"]], "setstoragepath() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setStoragePath"]], "setstorageref() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setStorageRef"]], "setstorageref() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.setStorageRef"]], "setusestorage() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.setUseStorage"]], "skiplpinputcolsvalidation (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.er.entity_ruler_internal": [[64, "module-sparknlp_jsl.annotator.er.entity_ruler_internal"]], "storagepath (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.storagePath"]], "storageref (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.storageRef"]], "storageref (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.storageRef"]], "transform() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.transform"]], "uid (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.uid"]], "uid (entityrulerinternalmodel attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.uid"]], "usestorage (entityrulerinternalapproach attribute)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.useStorage"]], "write() (entityrulerinternalapproach method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalApproach.write"]], "write() (entityrulerinternalmodel method)": [[64, "sparknlp_jsl.annotator.er.entity_ruler_internal.EntityRulerInternalModel.write"]], "sparknlp_jsl.annotator.er": [[65, "module-sparknlp_jsl.annotator.er"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "clear() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.clear"]], "copy() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.copy"]], "explainparam() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.explainParam"]], "explainparams() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.explainParams"]], "extractparammap() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.extractParamMap"]], "getinputcols() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getInputCols"]], "getlazyannotator() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getLazyAnnotator"]], "getordefault() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getOrDefault"]], "getoutputcol() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getOutputCol"]], "getparam() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getParam"]], "getparamvalue() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getParamValue"]], "getter_attrs (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.getter_attrs"]], "hasdefault() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.hasDefault"]], "hasparam() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.hasParam"]], "inputannotatortypes (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "inputcolsvalidation() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputColsValidation"]], "isdefined() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.isDefined"]], "isset() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.isSet"]], "lazyannotator (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.lazyAnnotator"]], "load() (featuresassembler class method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.load"]], "name (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "optionalinputannotatortypes (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.optionalInputAnnotatorTypes"]], "outputannotatortype (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "read() (featuresassembler class method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.read"]], "save() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.save"]], "set() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.set"]], "setforceinputtypevalidation() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setForceInputTypeValidation"]], "setinputcols() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setlazyannotator() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setLazyAnnotator"]], "setoutputcol() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparamvalue() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParamValue"]], "setparams() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[66, "module-sparknlp_jsl.annotator.feature_assembler"]], "transform() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.transform"]], "uid (featuresassembler attribute)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.uid"]], "write() (featuresassembler method)": [[66, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.write"]], "fhirdeidentification (class in sparknlp_jsl.annotator.fhir.fhir_deidentification)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification"]], "ageranges (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.ageRanges"]], "clear() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.clear"]], "copy() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.copy"]], "dateentities (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.dateEntities"]], "dateformats (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.dateFormats"]], "days (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.days"]], "deidentify() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.deidentify"]], "deidentify_list() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.deidentify_list"]], "deidentify_str() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.deidentify_str"]], "explainparam() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.explainParam"]], "explainparams() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.explainParams"]], "extractparammap() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.extractParamMap"]], "fhirversion (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.fhirVersion"]], "fixedmasklength (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.fixedMaskLength"]], "genderawareness (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.genderAwareness"]], "getinputcol() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getInputCol"]], "getmappingrules() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getMappingRules"]], "getordefault() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getOrDefault"]], "getoutputcol() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getOutputCol"]], "getparam() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getParam"]], "getparamvalue() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getParamValue"]], "getter_attrs (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.getter_attrs"]], "hasdefault() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.hasDefault"]], "hasparam() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.hasParam"]], "inputcol (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.inputCol"]], "isdefined() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.isDefined"]], "isset() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.isSet"]], "keepmonth (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.keepMonth"]], "keepyear (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.keepYear"]], "language (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.language"]], "load() (fhirdeidentification class method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.load"]], "maskingpolicy (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.maskingPolicy"]], "mode (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.mode"]], "name (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.name"]], "obfuscaterefsource (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.obfuscateRefSource"]], "outputannotatortype (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.outputAnnotatorType"]], "outputcol (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.outputCol"]], "parsertype (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.parserType"]], "pretrained() (fhirdeidentification static method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.pretrained"]], "read() (fhirdeidentification class method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.read"]], "samelengthformattedentities (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.sameLengthFormattedEntities"]], "save() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.save"]], "seed (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.seed"]], "set() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.set"]], "setageranges() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setAgeRanges"]], "setcustomfakers() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setCustomFakers"]], "setdateentities() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setDateEntities"]], "setdateformats() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setDateFormats"]], "setdays() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setDays"]], "setfhirversion() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setFhirVersion"]], "setfixedmasklength() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setFixedMaskLength"]], "setgenderawareness() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setGenderAwareness"]], "setinputcol() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setInputCol"]], "setkeepmonth() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setKeepMonth"]], "setkeepyear() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setKeepYear"]], "setlanguage() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setLanguage"]], "setmappingrules() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setMappingRules"]], "setmaskingpolicy() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setMaskingPolicy"]], "setmode() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setMode"]], "setobfuscaterefsource() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setObfuscateRefSource"]], "setoutputcol() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setOutputCol"]], "setparamvalue() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setParamValue"]], "setparams() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setParams"]], "setparsertype() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setParserType"]], "setsamelengthformattedentities() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setSameLengthFormattedEntities"]], "setseed() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setSeed"]], "setselectiveobfuscationmodes() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.setUnnormalizedDateMode"]], "sparknlp_jsl.annotator.fhir.fhir_deidentification": [[67, "module-sparknlp_jsl.annotator.fhir.fhir_deIdentification"]], "transform() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.transform"]], "uid (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.uid"]], "unnormalizeddatemode (fhirdeidentification attribute)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.unnormalizedDateMode"]], "write() (fhirdeidentification method)": [[67, "sparknlp_jsl.annotator.fhir.fhir_deIdentification.FhirDeIdentification.write"]], "sparknlp_jsl.annotator.fhir": [[68, "module-sparknlp_jsl.annotator.fhir"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "blacklist (filteringparams attribute)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.blackList"]], "casesensitive (filteringparams attribute)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.caseSensitive"]], "criteria (filteringparams attribute)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "filtervalue (filteringparams attribute)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setblacklist() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setBlackList"]], "setcasesensitive() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCaseSensitive"]], "setcriteria() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setdenylist() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setDenyList"]], "setfiltervalue() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "setwhitelist() (filteringparams method)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setWhiteList"]], "sparknlp_jsl.annotator.filtering_params": [[69, "module-sparknlp_jsl.annotator.filtering_params"]], "whitelist (filteringparams attribute)": [[69, "sparknlp_jsl.annotator.filtering_params.FilteringParams.whiteList"]], "flattener (class in sparknlp_jsl.annotator.flattener)": [[70, "sparknlp_jsl.annotator.flattener.Flattener"]], "cleanannotations (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.cleanAnnotations"]], "clear() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.clear"]], "copy() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.copy"]], "explainparam() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.explainParam"]], "explainparams() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.explainParams"]], "extractparammap() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.extractParamMap"]], "flattenexplodedcolumns (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.flattenExplodedColumns"]], "getinputcols() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.getInputCols"]], "getordefault() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.getOrDefault"]], "getparam() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.getParam"]], "getparamvalue() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.getParamValue"]], "getter_attrs (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.getter_attrs"]], "hasdefault() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.hasDefault"]], "hasparam() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.hasParam"]], "inputcols (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.inputCols"]], "isdefined() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.isDefined"]], "isset() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.isSet"]], "keeporiginalcolumns (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.keepOriginalColumns"]], "load() (flattener class method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.load"]], "name (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.name"]], "orderbycolumn (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.orderByColumn"]], "orderdescending (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.orderDescending"]], "outputannotatortype (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.outputAnnotatorType"]], "read() (flattener class method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.read"]], "save() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.save"]], "set() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.set"]], "setcleanannotations() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setCleanAnnotations"]], "setexplodeselectedfields() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setExplodeSelectedFields"]], "setflattenexplodedcolumns() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setFlattenExplodedColumns"]], "setinputcols() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setInputCols"]], "setkeeporiginalcolumns() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setKeepOriginalColumns"]], "setorderbycolumn() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setOrderByColumn"]], "setorderdescending() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setOrderDescending"]], "setparamvalue() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setParamValue"]], "setparams() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.setParams"]], "sparknlp_jsl.annotator.flattener": [[70, "module-sparknlp_jsl.annotator.flattener"]], "transform() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.transform"]], "uid (flattener attribute)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.uid"]], "write() (flattener method)": [[70, "sparknlp_jsl.annotator.flattener.Flattener.write"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "clear() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.clear"]], "clear() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.clear"]], "copy() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.copy"]], "copy() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.copy"]], "datasetinfo (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.datasetInfo"]], "datasetinfo (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.datasetInfo"]], "doexceptionhandling (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.doExceptionHandling"]], "doexceptionhandling (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.doExceptionHandling"]], "dropout (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "engine (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.engine"]], "epochsn (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "explainparam() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.explainParam"]], "explainparam() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.explainParam"]], "explainparams() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.explainParams"]], "explainparams() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.explainParams"]], "extractparammap() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.extractParamMap"]], "extractparammap() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.extractParamMap"]], "featurescaling (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "featurescaling (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.featureScaling"]], "fit() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fit"]], "fitmultiple() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fitMultiple"]], "fiximbalance (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "getengine() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getEngine"]], "getinputcols() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getInputCols"]], "getinputcols() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getInputCols"]], "getlazyannotator() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getLazyAnnotator"]], "getordefault() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getOrDefault"]], "getordefault() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getOrDefault"]], "getoutputcol() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getOutputCol"]], "getoutputcol() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getOutputCol"]], "getparam() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getParam"]], "getparam() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getParam"]], "getparamvalue() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getParamValue"]], "getparamvalue() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getParamValue"]], "getter_attrs (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.getter_attrs"]], "getter_attrs (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.getter_attrs"]], "hasdefault() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.hasDefault"]], "hasdefault() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.hasDefault"]], "hasparam() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.hasParam"]], "hasparam() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.hasParam"]], "inputannotatortypes (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "inputcols (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputCols"]], "inputcols (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputCols"]], "inputcolsvalidation() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputColsValidation"]], "isdefined() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.isDefined"]], "isdefined() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.isDefined"]], "isset() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.isSet"]], "isset() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.isSet"]], "labelcolumn (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "lazyannotator (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.lazyAnnotator"]], "lazyannotator (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.lazyAnnotator"]], "learningrate (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "load() (genericclassifierapproach class method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.load"]], "load() (genericclassifiermodel class method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.load"]], "modelfile (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "optionalinputannotatortypes (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputcol (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputCol"]], "outputcol (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputCol"]], "outputlogspath (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "read() (genericclassifierapproach class method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.read"]], "read() (genericclassifiermodel class method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.read"]], "save() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.save"]], "save() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.save"]], "set() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.set"]], "set() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.set"]], "setbatchsize() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdatasetinfo() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setDoExceptionHandling"]], "setdropout() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setForceInputTypeValidation"]], "setinputcols() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setInputCols"]], "setinputcols() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setInputCols"]], "setlabelcol() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlazyannotator() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setLazyAnnotator"]], "setlearningrate() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputcol() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputCol"]], "setoutputcol() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setOutputCol"]], "setoutputlogspath() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setparamvalue() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setParamValue"]], "setparamvalue() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setParamValue"]], "setparams() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setParams"]], "setvalidationsplit() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[71, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "transform() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.transform"]], "uid (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.uid"]], "uid (genericclassifiermodel attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.uid"]], "validationsplit (genericclassifierapproach attribute)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "write() (genericclassifierapproach method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.write"]], "write() (genericclassifiermodel method)": [[71, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.write"]], "sparknlp_jsl.annotator.generic_classifier": [[72, "module-sparknlp_jsl.annotator.generic_classifier"]], "handleexceptionparams (class in sparknlp_jsl.annotator.handle_exception_params)": [[73, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams"]], "doexceptionhandling (handleexceptionparams attribute)": [[73, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.doExceptionHandling"]], "setdoexceptionhandling() (handleexceptionparams method)": [[73, "sparknlp_jsl.annotator.handle_exception_params.HandleExceptionParams.setDoExceptionHandling"]], "sparknlp_jsl.annotator.handle_exception_params": [[73, "module-sparknlp_jsl.annotator.handle_exception_params"]], "assertion (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.disambiguation"]], "embeddings (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.embeddings"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.ner"]], "parser (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.parser"]], "qa (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.qa"]], "rag (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.rag"]], "re (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.re"]], "regex (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.regex"]], "resolution (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.seq2seq"]], "splitter (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.splitter"]], "windowed (in module sparknlp_jsl.annotator)": [[74, "sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.matcher": [[75, "module-sparknlp_jsl.annotator.matcher"]], "textmatcherinternal (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal"]], "textmatcherinternalmodel (class in sparknlp_jsl.annotator.matcher.text_matcher_internal)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel"]], "buildfromtokens (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.buildFromTokens"]], "buildfromtokens (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.buildFromTokens"]], "casesensitive (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.caseSensitive"]], "casesensitive (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.caseSensitive"]], "cleankeywords (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.cleanKeywords"]], "cleankeywords (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.cleanKeywords"]], "cleanstopwords (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.cleanStopWords"]], "cleanstopwords (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.cleanStopWords"]], "clear() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.clear"]], "clear() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.clear"]], "copy() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.copy"]], "copy() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.copy"]], "delimiter (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.delimiter"]], "delimiter (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.delimiter"]], "enablelemmatizer (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.enableLemmatizer"]], "enablelemmatizer (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.enableLemmatizer"]], "enablestemmer (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.enableStemmer"]], "enablestemmer (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.enableStemmer"]], "entities (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entities"]], "entityvalue (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.entityValue"]], "entityvalue (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.entityValue"]], "excludepunctuation (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.excludePunctuation"]], "excludepunctuation (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.excludePunctuation"]], "excluderegexpatterns (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.excludeRegexPatterns"]], "excluderegexpatterns (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.excludeRegexPatterns"]], "explainparam() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.explainParam"]], "explainparam() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.explainParam"]], "explainparams() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.explainParams"]], "explainparams() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.explainParams"]], "extractparammap() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.extractParamMap"]], "extractparammap() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.extractParamMap"]], "fit() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.fit"]], "fitmultiple() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.fitMultiple"]], "getcasesensitive() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getCaseSensitive"]], "getcleankeywords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getCleanKeywords"]], "getcleankeywords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getCleanKeywords"]], "getdelimiter() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getDelimiter"]], "getexcluderegexpatterns() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getExcludeRegexPatterns"]], "getexcluderegexpatterns() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getExcludeRegexPatterns"]], "getinputcols() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getInputCols"]], "getinputcols() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getInputCols"]], "getlazyannotator() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getLazyAnnotator"]], "getlazyannotator() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getLazyAnnotator"]], "getordefault() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getOrDefault"]], "getordefault() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getOrDefault"]], "getoutputcol() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getOutputCol"]], "getoutputcol() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getOutputCol"]], "getparam() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getParam"]], "getparam() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getParam"]], "getparamvalue() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getParamValue"]], "getparamvalue() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getParamValue"]], "getreturnchunks() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getReturnChunks"]], "getreturnchunks() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getReturnChunks"]], "getsafekeywords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getSafeKeywords"]], "getsafekeywords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getSafeKeywords"]], "getstopwords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getStopWords"]], "getstopwords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getStopWords"]], "getter_attrs (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.getter_attrs"]], "getter_attrs (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.getter_attrs"]], "hasdefault() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.hasDefault"]], "hasdefault() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.hasDefault"]], "hasparam() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.hasParam"]], "hasparam() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.hasParam"]], "inputannotatortypes (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputAnnotatorTypes"]], "inputcols (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputCols"]], "inputcols (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputCols"]], "inputcolsvalidation() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.inputColsValidation"]], "inputcolsvalidation() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.inputColsValidation"]], "isdefined() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.isDefined"]], "isdefined() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.isDefined"]], "isset() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.isSet"]], "isset() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.isSet"]], "lazyannotator (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.lazyAnnotator"]], "lazyannotator (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.lazyAnnotator"]], "lemmatizerdictionary (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.lemmatizerDictionary"]], "load() (textmatcherinternal class method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.load"]], "load() (textmatcherinternalmodel class method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.load"]], "mergeoverlapping (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.mergeOverlapping"]], "mergeoverlapping (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.mergeOverlapping"]], "name (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.name"]], "optionalinputannotatortypes (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputAnnotatorType"]], "outputannotatortype (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputAnnotatorType"]], "outputcol (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.outputCol"]], "outputcol (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.outputCol"]], "pretrained() (textmatcherinternalmodel static method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.pretrained"]], "read() (textmatcherinternal class method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.read"]], "read() (textmatcherinternalmodel class method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.read"]], "returnchunks (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.returnChunks"]], "returnchunks (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.returnChunks"]], "safekeywords (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.safeKeywords"]], "safekeywords (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.safeKeywords"]], "save() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.save"]], "save() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.save"]], "searchtrie (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.searchTrie"]], "searchtrieinternal (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.searchTrieInternal"]], "set() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.set"]], "set() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.set"]], "setbuildfromtokens() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setBuildFromTokens"]], "setbuildfromtokens() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setBuildFromTokens"]], "setcasesensitive() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setCaseSensitive"]], "setcleankeywords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setCleanKeywords"]], "setcleankeywords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setCleanKeywords"]], "setcleanstopwords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setCleanStopWords"]], "setcleanstopwords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setCleanStopWords"]], "setdelimiter() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setDelimiter"]], "setdelimiter() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setDelimiter"]], "setenablelemmatizer() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEnableLemmatizer"]], "setenablelemmatizer() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setEnableLemmatizer"]], "setenablestemmer() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEnableStemmer"]], "setenablestemmer() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setEnableStemmer"]], "setentities() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntities"]], "setentityvalue() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setEntityValue"]], "setentityvalue() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setEntityValue"]], "setexcludepunctuation() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setExcludePunctuation"]], "setexcludepunctuation() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setExcludePunctuation"]], "setexcluderegexpatterns() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setExcludeRegexPatterns"]], "setexcluderegexpatterns() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setExcludeRegexPatterns"]], "setforceinputtypevalidation() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setForceInputTypeValidation"]], "setforceinputtypevalidation() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setForceInputTypeValidation"]], "setinputcols() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setInputCols"]], "setinputcols() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setInputCols"]], "setlazyannotator() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setLazyAnnotator"]], "setlazyannotator() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setLazyAnnotator"]], "setlemmatizerdictionary() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setLemmatizerDictionary"]], "setmergeoverlapping() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setMergeOverlapping"]], "setoutputcol() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setOutputCol"]], "setoutputcol() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setOutputCol"]], "setparamvalue() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setParamValue"]], "setparamvalue() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setParamValue"]], "setparams() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setParams"]], "setreturnchunks() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setReturnChunks"]], "setreturnchunks() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setReturnChunks"]], "setsafekeywords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setSafeKeywords"]], "setsafekeywords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setSafeKeywords"]], "setshuffleentitysubtokens() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setShuffleEntitySubTokens"]], "setskipmatcheraugmentation() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setSkipMatcherAugmentation"]], "setskipmatcheraugmentation() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setSkipMatcherAugmentation"]], "setskipsourcetextaugmentation() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setSkipSourceTextAugmentation"]], "setskipsourcetextaugmentation() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setSkipSourceTextAugmentation"]], "setstopwords() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.setStopWords"]], "setstopwords() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.setStopWords"]], "shuffleentitysubtokens (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.shuffleEntitySubTokens"]], "skiplpinputcolsvalidation (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.skipLPInputColsValidation"]], "skipmatcheraugmentation (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.skipMatcherAugmentation"]], "skipmatcheraugmentation (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.skipMatcherAugmentation"]], "skipsourcetextaugmentation (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.skipSourceTextAugmentation"]], "skipsourcetextaugmentation (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.skipSourceTextAugmentation"]], "sparknlp_jsl.annotator.matcher.text_matcher_internal": [[76, "module-sparknlp_jsl.annotator.matcher.text_matcher_internal"]], "stopwords (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.stopWords"]], "stopwords (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.stopWords"]], "transform() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.transform"]], "uid (textmatcherinternal attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.uid"]], "uid (textmatcherinternalmodel attribute)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.uid"]], "write() (textmatcherinternal method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternal.write"]], "write() (textmatcherinternalmodel method)": [[76, "sparknlp_jsl.annotator.matcher.text_matcher_internal.TextMatcherInternalModel.write"]], "textmatcherparams (class in sparknlp_jsl.annotator.matcher.text_matcher_params)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams"]], "cleankeywords (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.cleanKeywords"]], "cleanstopwords (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.cleanStopWords"]], "enablelemmatizer (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.enableLemmatizer"]], "enablestemmer (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.enableStemmer"]], "excludepunctuation (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.excludePunctuation"]], "excluderegexpatterns (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.excludeRegexPatterns"]], "getcleankeywords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.getCleanKeywords"]], "getexcluderegexpatterns() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.getExcludeRegexPatterns"]], "getreturnchunks() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.getReturnChunks"]], "getsafekeywords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.getSafeKeywords"]], "getstopwords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.getStopWords"]], "returnchunks (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.returnChunks"]], "safekeywords (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.safeKeywords"]], "setcleankeywords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setCleanKeywords"]], "setcleanstopwords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setCleanStopWords"]], "setenablelemmatizer() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setEnableLemmatizer"]], "setenablestemmer() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setEnableStemmer"]], "setexcludepunctuation() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setExcludePunctuation"]], "setexcluderegexpatterns() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setExcludeRegexPatterns"]], "setreturnchunks() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setReturnChunks"]], "setsafekeywords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setSafeKeywords"]], "setskipmatcheraugmentation() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setSkipMatcherAugmentation"]], "setskipsourcetextaugmentation() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setSkipSourceTextAugmentation"]], "setstopwords() (textmatcherparams method)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.setStopWords"]], "skipmatcheraugmentation (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.skipMatcherAugmentation"]], "skipsourcetextaugmentation (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.skipSourceTextAugmentation"]], "sparknlp_jsl.annotator.matcher.text_matcher_params": [[77, "module-sparknlp_jsl.annotator.matcher.text_matcher_params"]], "stopwords (textmatcherparams attribute)": [[77, "sparknlp_jsl.annotator.matcher.text_matcher_params.TextMatcherParams.stopWords"]], "sparknlp_jsl.annotator.medical_llm": [[78, "module-sparknlp_jsl.annotator.medical_llm"]], "medicalllm (class in sparknlp_jsl.annotator.medical_llm.medical_llm)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM"]], "batchsize (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.batchSize"]], "cacheprompt (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.cachePrompt"]], "chattemplate (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.chatTemplate"]], "clear() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.clear"]], "copy() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.copy"]], "defragmentationthreshold (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.defragmentationThreshold"]], "disabletokenids (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.disableTokenIds"]], "dynamictemperatureexponent (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.dynamicTemperatureExponent"]], "dynamictemperaturerange (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.dynamicTemperatureRange"]], "embedding (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.embedding"]], "explainparam() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.explainParam"]], "explainparams() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.explainParams"]], "extractparammap() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.extractParamMap"]], "flashattention (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.flashAttention"]], "frequencypenalty (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.frequencyPenalty"]], "getbatchsize() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getBatchSize"]], "getinputcols() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getInputCols"]], "getlazyannotator() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getLazyAnnotator"]], "getmetadata() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getMetadata"]], "getordefault() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getOrDefault"]], "getoutputcol() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getOutputCol"]], "getparam() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getParam"]], "getparamvalue() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getParamValue"]], "getter_attrs (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.getter_attrs"]], "gpusplitmode (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.gpuSplitMode"]], "grammar (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.grammar"]], "grpattnn (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.grpAttnN"]], "grpattnw (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.grpAttnW"]], "hasdefault() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.hasDefault"]], "hasparam() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.hasParam"]], "ignoreeos (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.ignoreEos"]], "inputannotatortypes (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.inputAnnotatorTypes"]], "inputcols (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.inputCols"]], "inputcolsvalidation() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.inputColsValidation"]], "inputprefix (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.inputPrefix"]], "inputprefixbos (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.inputPrefixBos"]], "inputsuffix (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.inputSuffix"]], "isdefined() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.isDefined"]], "isset() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.isSet"]], "lazyannotator (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.lazyAnnotator"]], "load() (medicalllm class method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.load"]], "loadsavedmodel() (medicalllm static method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.loadSavedModel"]], "lookupcachedynamicfilepath (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.lookupCacheDynamicFilePath"]], "lookupcachestaticfilepath (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.lookupCacheStaticFilePath"]], "maingpu (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.mainGpu"]], "minkeep (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.minKeep"]], "minp (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.minP"]], "mirostat (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.miroStat"]], "mirostateta (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.miroStatEta"]], "mirostattau (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.miroStatTau"]], "modelalias (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.modelAlias"]], "modeldraft (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.modelDraft"]], "nbatch (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nBatch"]], "nchunks (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nChunks"]], "nctx (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nCtx"]], "ndraft (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nDraft"]], "ngpulayers (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nGpuLayers"]], "ngpulayersdraft (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nGpuLayersDraft"]], "nkeep (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nKeep"]], "npredict (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nPredict"]], "nprobs (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nProbs"]], "nsequences (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nSequences"]], "nthreads (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nThreads"]], "nthreadsbatch (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nThreadsBatch"]], "nthreadsbatchdraft (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nThreadsBatchDraft"]], "nthreadsdraft (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nThreadsDraft"]], "nubatch (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.nUbatch"]], "name (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.name"]], "nokvoffload (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.noKvOffload"]], "numastrategy (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.numaStrategy"]], "optionalinputannotatortypes (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.outputAnnotatorType"]], "outputcol (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.outputCol"]], "psplit (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.pSplit"]], "penalizenl (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.penalizeNl"]], "penaltyprompt (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.penaltyPrompt"]], "poolingtype (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.poolingType"]], "presencepenalty (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.presencePenalty"]], "pretrained() (medicalllm static method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.pretrained"]], "read() (medicalllm class method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.read"]], "repeatlastn (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.repeatLastN"]], "repeatpenalty (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.repeatPenalty"]], "ropefreqbase (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.ropeFreqBase"]], "ropefreqscale (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.ropeFreqScale"]], "ropescalingtype (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.ropeScalingType"]], "samplers (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.samplers"]], "save() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.save"]], "seed (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.seed"]], "set() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.set"]], "setbatchsize() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setBatchSize"]], "setcacheprompt() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setCachePrompt"]], "setchattemplate() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setChatTemplate"]], "setdefragmentationthreshold() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setDefragmentationThreshold"]], "setdisabletokenids() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setDisableTokenIds"]], "setdynamictemperatureexponent() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setDynamicTemperatureRange"]], "setembedding() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setEmbedding"]], "setflashattention() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setFlashAttention"]], "setfrequencypenalty() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setFrequencyPenalty"]], "setgpusplitmode() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setGpuSplitMode"]], "setgrammar() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setGrammar"]], "setgrpattnn() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setGrpAttnN"]], "setgrpattnw() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setGrpAttnW"]], "setignoreeos() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setIgnoreEos"]], "setinputcols() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setInputCols"]], "setinputprefix() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setInputPrefix"]], "setinputprefixbos() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setInputPrefixBos"]], "setinputsuffix() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setInputSuffix"]], "setlazyannotator() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setLazyAnnotator"]], "setlookupcachedynamicfilepath() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setLookupCacheDynamicFilePath"]], "setlookupcachestaticfilepath() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setLookupCacheStaticFilePath"]], "setloraadapters() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setLoraAdapters"]], "setmaingpu() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setMainGpu"]], "setminkeep() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setMinKeep"]], "setminp() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setMinP"]], "setmirostat() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setMiroStat"]], "setmirostateta() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setMiroStatEta"]], "setmirostattau() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setMiroStatTau"]], "setmodelalias() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setModelAlias"]], "setmodeldraft() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setModelDraft"]], "setnbatch() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNBatch"]], "setnchunks() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNChunks"]], "setnctx() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNCtx"]], "setndraft() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNDraft"]], "setngpulayers() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNGpuLayers"]], "setngpulayersdraft() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNGpuLayersDraft"]], "setnkeep() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNKeep"]], "setnparallel() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNParallel"]], "setnpredict() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNPredict"]], "setnprobs() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNProbs"]], "setnsequences() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNSequences"]], "setnthreads() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNThreads"]], "setnthreadsbatch() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNThreadsBatch"]], "setnthreadsbatchdraft() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNThreadsBatchDraft"]], "setnthreadsdraft() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNThreadsDraft"]], "setnubatch() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNUbatch"]], "setnokvoffload() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNoKvOffload"]], "setnumastrategy() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setNumaStrategy"]], "setoutputcol() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setOutputCol"]], "setpsplit() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setPSplit"]], "setparamvalue() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setParamValue"]], "setparams() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setParams"]], "setpenalizenl() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setPenalizeNl"]], "setpenaltyprompt() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setPenaltyPrompt"]], "setpoolingtype() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setPoolingType"]], "setpresencepenalty() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setPresencePenalty"]], "setrepeatlastn() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setRepeatLastN"]], "setrepeatpenalty() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setRepeatPenalty"]], "setropefreqbase() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setRopeFreqBase"]], "setropefreqscale() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setRopeFreqScale"]], "setropescalingtype() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setRopeScalingType"]], "setsamplers() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setSamplers"]], "setseed() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setSeed"]], "setstopstrings() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setStopStrings"]], "setsystemprompt() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setSystemPrompt"]], "settemperature() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTemperature"]], "settensorsplit() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTensorSplit"]], "settfsz() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTfsZ"]], "settokenbias() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTokenBias"]], "settokenidbias() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTokenIdBias"]], "settopk() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTopK"]], "settopp() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTopP"]], "settypicalp() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setTypicalP"]], "setusechattemplate() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setUseChatTemplate"]], "setusemlock() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setUseMlock"]], "setusemmap() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setUseMmap"]], "setyarnattnfactor() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setYarnAttnFactor"]], "setyarnbetafast() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setYarnBetaFast"]], "setyarnbetaslow() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setYarnBetaSlow"]], "setyarnextfactor() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setYarnExtFactor"]], "setyarnorigctx() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.setYarnOrigCtx"]], "sparknlp_jsl.annotator.medical_llm.medical_llm": [[79, "module-sparknlp_jsl.annotator.medical_llm.medical_llm"]], "stopstrings (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.stopStrings"]], "systemprompt (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.systemPrompt"]], "temperature (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.temperature"]], "tensorsplit (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.tensorSplit"]], "tfsz (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.tfsZ"]], "topk (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.topK"]], "topp (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.topP"]], "transform() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.transform"]], "typicalp (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.typicalP"]], "uid (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.uid"]], "usechattemplate (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.useChatTemplate"]], "usemlock (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.useMlock"]], "usemmap (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.useMmap"]], "write() (medicalllm method)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.write"]], "yarnattnfactor (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.yarnAttnFactor"]], "yarnbetafast (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.yarnBetaFast"]], "yarnbetaslow (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.yarnBetaSlow"]], "yarnextfactor (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.yarnExtFactor"]], "yarnorigctx (medicalllm attribute)": [[79, "sparknlp_jsl.annotator.medical_llm.medical_llm.MedicalLLM.yarnOrigCtx"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergefeatureparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "blacklist (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.blackList"]], "blacklist (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.blackList"]], "casesensitive (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.caseSensitive"]], "casesensitive (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.caseSensitive"]], "chunkprecedence (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.chunkPrecedence"]], "chunkprecedence (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.chunkPrecedence"]], "chunkprecedence (mergeprioritizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.chunkPrecedenceValuePrioritization"]], "chunkprecedencevalueprioritization (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.chunkPrecedenceValuePrioritization"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "clear() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.clear"]], "clear() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.clear"]], "copy() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.copy"]], "copy() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.copy"]], "criteria (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.criteria"]], "criteria (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.criteria"]], "defaultconfidence (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.defaultConfidence"]], "defaultconfidence (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.defaultConfidence"]], "defaultconfidence (mergeprioritizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "doexceptionhandling (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.doExceptionHandling"]], "entitiesconfidenceresource (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.entitiesConfidenceResource"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "explainparam() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.explainParam"]], "explainparam() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.explainParam"]], "explainparams() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.explainParams"]], "explainparams() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.explainParams"]], "extractparammap() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.extractParamMap"]], "extractparammap() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.extractParamMap"]], "falsepositivesresource (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.falsePositivesResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "filtervalue (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.filterValue"]], "filtervalue (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.filterValue"]], "fit() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.fit"]], "fitmultiple() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.fitMultiple"]], "getinputcols() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getInputCols"]], "getinputcols() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getInputCols"]], "getlazyannotator() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getLazyAnnotator"]], "getlazyannotator() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getLazyAnnotator"]], "getordefault() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getOrDefault"]], "getordefault() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getOrDefault"]], "getoutputcol() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getOutputCol"]], "getoutputcol() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getOutputCol"]], "getparam() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getParam"]], "getparam() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getParam"]], "getparamvalue() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getParamValue"]], "getparamvalue() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getParamValue"]], "getreplacedict() (mergefeatureparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.getReplaceDict"]], "getter_attrs (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.getter_attrs"]], "getter_attrs (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.getter_attrs"]], "hasdefault() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.hasDefault"]], "hasdefault() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.hasDefault"]], "hasparam() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.hasParam"]], "hasparam() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.hasParam"]], "inputannotatortypes (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "inputcols (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputCols"]], "inputcols (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputCols"]], "inputcolsvalidation() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputColsValidation"]], "inputcolsvalidation() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputColsValidation"]], "isdefined() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.isDefined"]], "isdefined() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.isDefined"]], "isset() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.isSet"]], "isset() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.isSet"]], "lazyannotator (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.lazyAnnotator"]], "lazyannotator (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.lazyAnnotator"]], "load() (chunkmergeapproach class method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.load"]], "load() (chunkmergemodel class method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.load"]], "mergeoverlapping (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.mergeOverlapping"]], "mergeoverlapping (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.mergeOverlapping"]], "mergeoverlapping (mergecommonparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "optionalinputannotatortypes (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.optionalInputAnnotatorTypes"]], "orderingfeatures (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.orderingFeatures"]], "orderingfeatures (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.orderingFeatures"]], "orderingfeatures (mergeprioritizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "outputcol (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputCol"]], "outputcol (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputCol"]], "pretrained() (chunkmergemodel static method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "read() (chunkmergeapproach class method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.read"]], "read() (chunkmergemodel class method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.read"]], "regex (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.regex"]], "regex (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.regex"]], "replacedictresource (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.replaceDictResource"]], "replacedictresource (mergeresourceparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "resetsentenceindices (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.resetSentenceIndices"]], "save() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.save"]], "save() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.save"]], "selectionstrategy (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.selectionStrategy"]], "selectionstrategy (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.selectionStrategy"]], "selectionstrategy (mergeprioritizationparams attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "set() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.set"]], "set() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.set"]], "setblacklist() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setBlackList"]], "setblacklist() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setBlackList"]], "setcasesensitive() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setCaseSensitive"]], "setcasesensitive() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setCaseSensitive"]], "setchunkprecedence() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setChunkPrecedence"]], "setchunkprecedence() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setChunkPrecedence"]], "setchunkprecedence() (mergeprioritizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setChunkPrecedenceValuePrioritization"]], "setchunkprecedencevalueprioritization() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setChunkPrecedenceValuePrioritization"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setcriteria() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setCriteria"]], "setcriteria() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setCriteria"]], "setdefaultconfidence() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDefaultConfidence"]], "setdefaultconfidence() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setDefaultConfidence"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setdenylist() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDenyList"]], "setdenylist() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setDenyList"]], "setdoexceptionhandling() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setDoExceptionHandling"]], "setentitiesconfidence() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setEntitiesConfidenceResource"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositives() (mergefeatureparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setFalsePositives"]], "setfalsepositivesresource() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFalsePositivesResource"]], "setfalsepositivesresource() (mergeresourceparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setfiltervalue() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFilterValue"]], "setfiltervalue() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setFilterValue"]], "setforceinputtypevalidation() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setForceInputTypeValidation"]], "setinputcols() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setlazyannotator() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setLazyAnnotator"]], "setlazyannotator() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setLazyAnnotator"]], "setmergeoverlapping() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setMergeOverlapping"]], "setmergeoverlapping() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setMergeOverlapping"]], "setmergeoverlapping() (mergecommonparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setOrderingFeatures"]], "setorderingfeatures() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setOrderingFeatures"]], "setorderingfeatures() (mergeprioritizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setoutputcol() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setOutputCol"]], "setoutputcol() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setOutputCol"]], "setparamvalue() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setParamValue"]], "setparamvalue() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setParamValue"]], "setparams() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setParams"]], "setregex() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setRegex"]], "setregex() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setRegex"]], "setreplacedict() (mergefeatureparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeFeatureParams.setReplaceDict"]], "setreplacedictresource() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setReplaceDictResource"]], "setreplacedictresource() (mergeresourceparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setresetsentenceindices() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setResetSentenceIndices"]], "setselectionstrategy() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setSelectionStrategy"]], "setselectionstrategy() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setSelectionStrategy"]], "setselectionstrategy() (mergeprioritizationparams method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "setwhitelist() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setWhiteList"]], "setwhitelist() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setWhiteList"]], "skiplpinputcolsvalidation (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[80, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "transform() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.transform"]], "uid (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.uid"]], "uid (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.uid"]], "whitelist (chunkmergeapproach attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.whiteList"]], "whitelist (chunkmergemodel attribute)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.whiteList"]], "write() (chunkmergeapproach method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.write"]], "write() (chunkmergemodel method)": [[80, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.write"]], "sparknlp_jsl.annotator.merge": [[81, "module-sparknlp_jsl.annotator.merge"]], "rechunkmerger (class in sparknlp_jsl.annotator.merge.re_chunk_merger)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger"]], "clear() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.clear"]], "copy() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.copy"]], "explainparam() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.explainParam"]], "explainparams() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.explainParams"]], "extractparammap() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.extractParamMap"]], "getinputcols() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getInputCols"]], "getlazyannotator() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getLazyAnnotator"]], "getordefault() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getOrDefault"]], "getoutputcol() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getOutputCol"]], "getparam() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getParam"]], "getparamvalue() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getParamValue"]], "getter_attrs (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.getter_attrs"]], "hasdefault() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.hasDefault"]], "hasparam() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.hasParam"]], "inputannotatortypes (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.inputAnnotatorTypes"]], "inputcols (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.inputCols"]], "inputcolsvalidation() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.inputColsValidation"]], "isdefined() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.isDefined"]], "isset() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.isSet"]], "lazyannotator (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.lazyAnnotator"]], "load() (rechunkmerger class method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.load"]], "name (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.name"]], "optionalinputannotatortypes (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.outputAnnotatorType"]], "outputcol (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.outputCol"]], "read() (rechunkmerger class method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.read"]], "save() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.save"]], "separator (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.separator"]], "set() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.set"]], "setforceinputtypevalidation() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setForceInputTypeValidation"]], "setinputcols() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setInputCols"]], "setlazyannotator() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setLazyAnnotator"]], "setoutputcol() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setOutputCol"]], "setparamvalue() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setParamValue"]], "setparams() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setParams"]], "setseparator() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.setSeparator"]], "skiplpinputcolsvalidation (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.merge.re_chunk_merger": [[82, "module-sparknlp_jsl.annotator.merge.re_chunk_merger"]], "transform() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.transform"]], "uid (rechunkmerger attribute)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.uid"]], "write() (rechunkmerger method)": [[82, "sparknlp_jsl.annotator.merge.re_chunk_merger.REChunkMerger.write"]], "metadataannotationconverter (class in sparknlp_jsl.annotator.metadata_annotation_converter)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter"]], "beginfield (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.beginField"]], "clear() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.clear"]], "copy() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.copy"]], "endfield (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.endField"]], "explainparam() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.explainParam"]], "explainparams() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.explainParams"]], "extractparammap() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.extractParamMap"]], "getinputcols() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getInputCols"]], "getlazyannotator() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getLazyAnnotator"]], "getordefault() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getOrDefault"]], "getoutputcol() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getOutputCol"]], "getparam() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getParam"]], "getparamvalue() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getParamValue"]], "getter_attrs (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.getter_attrs"]], "hasdefault() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.hasDefault"]], "hasparam() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.hasParam"]], "inputannotatortypes (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.inputAnnotatorTypes"]], "inputcols (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.inputCols"]], "inputcolsvalidation() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.inputColsValidation"]], "inputtype (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.inputType"]], "isdefined() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.isDefined"]], "isset() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.isSet"]], "lazyannotator (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.lazyAnnotator"]], "load() (metadataannotationconverter class method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.load"]], "name (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.name"]], "optionalinputannotatortypes (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.optionalInputAnnotatorTypes"]], "outputannotatortype (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.outputAnnotatorType"]], "outputcol (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.outputCol"]], "read() (metadataannotationconverter class method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.read"]], "resultfield (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.resultField"]], "save() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.save"]], "set() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.set"]], "setbeginfield() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setBeginField"]], "setendfield() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setEndField"]], "setforceinputtypevalidation() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setForceInputTypeValidation"]], "setinputcols() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setInputCols"]], "setinputtype() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setInputType"]], "setlazyannotator() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setLazyAnnotator"]], "setoutputcol() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setOutputCol"]], "setparamvalue() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setParamValue"]], "setparams() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setParams"]], "setresultfield() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.setResultField"]], "skiplpinputcolsvalidation (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.metadata_annotation_converter": [[83, "module-sparknlp_jsl.annotator.metadata_annotation_converter"]], "transform() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.transform"]], "uid (metadataannotationconverter attribute)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.uid"]], "write() (metadataannotationconverter method)": [[83, "sparknlp_jsl.annotator.metadata_annotation_converter.MetadataAnnotationConverter.write"]], "multichunk2doc (class in sparknlp_jsl.annotator.multi_chunk2_doc)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc"]], "blacklist (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.blackList"]], "casesensitive (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.caseSensitive"]], "clear() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.clear"]], "copy() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.copy"]], "explainparam() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.explainParam"]], "explainparams() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.explainParams"]], "extractparammap() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.extractParamMap"]], "getinputcols() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getInputCols"]], "getlazyannotator() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getLazyAnnotator"]], "getordefault() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getOrDefault"]], "getoutputcol() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getOutputCol"]], "getparam() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getParam"]], "getparamvalue() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getParamValue"]], "getter_attrs (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.getter_attrs"]], "hasdefault() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.hasDefault"]], "hasparam() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.hasParam"]], "inputannotatortypes (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputAnnotatorTypes"]], "inputcols (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputCols"]], "inputcolsvalidation() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.inputColsValidation"]], "isdefined() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.isDefined"]], "isset() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.isSet"]], "lazyannotator (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.lazyAnnotator"]], "load() (multichunk2doc class method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.load"]], "name (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.name"]], "optionalinputannotatortypes (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.optionalInputAnnotatorTypes"]], "outputannotatortype (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.outputAnnotatorType"]], "outputcol (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.outputCol"]], "prefix (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.prefix"]], "read() (multichunk2doc class method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.read"]], "save() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.save"]], "separator (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.separator"]], "set() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.set"]], "setblacklist() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setBlackList"]], "setcasesensitive() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setCaseSensitive"]], "setdenylist() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setDenyList"]], "setforceinputtypevalidation() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setForceInputTypeValidation"]], "setinputcols() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setInputCols"]], "setlazyannotator() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setLazyAnnotator"]], "setoutputcol() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setOutputCol"]], "setparamvalue() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setParamValue"]], "setparams() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setParams"]], "setprefix() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setPrefix"]], "setseparator() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setSeparator"]], "setsuffix() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setSuffix"]], "setwhitelist() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.setWhiteList"]], "skiplpinputcolsvalidation (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.multi_chunk2_doc": [[84, "module-sparknlp_jsl.annotator.multi_chunk2_doc"]], "suffix (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.suffix"]], "transform() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.transform"]], "uid (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.uid"]], "whitelist (multichunk2doc attribute)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.whiteList"]], "write() (multichunk2doc method)": [[84, "sparknlp_jsl.annotator.multi_chunk2_doc.MultiChunk2Doc.write"]], "sparknlp_jsl.annotator.ner": [[85, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "clear() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.clear"]], "copy() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.copy"]], "explainparam() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.explainParam"]], "explainparams() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.explainParams"]], "extractparammap() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.extractParamMap"]], "getinputcols() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getInputCols"]], "getlazyannotator() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getLazyAnnotator"]], "getordefault() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getOrDefault"]], "getoutputcol() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getOutputCol"]], "getparam() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getParam"]], "getparamvalue() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getParamValue"]], "getter_attrs (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.getter_attrs"]], "hasdefault() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.hasDefault"]], "hasparam() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.hasParam"]], "inputannotatortypes (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "inputcols (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputCols"]], "inputcolsvalidation() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputColsValidation"]], "isdefined() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.isDefined"]], "isset() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.isSet"]], "lazyannotator (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.lazyAnnotator"]], "load() (iobtagger class method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.load"]], "name (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "optionalinputannotatortypes (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.optionalInputAnnotatorTypes"]], "outputannotatortype (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "outputcol (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputCol"]], "read() (iobtagger class method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.read"]], "save() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.save"]], "scheme (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "set() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.set"]], "setforceinputtypevalidation() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setForceInputTypeValidation"]], "setinputcols() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setInputCols"]], "setlazyannotator() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setLazyAnnotator"]], "setoutputcol() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setOutputCol"]], "setparamvalue() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setParamValue"]], "setparams() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setParams"]], "setscheme() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "skiplpinputcolsvalidation (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[86, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "transform() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.transform"]], "uid (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.uid"]], "write() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.write"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "clear() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.clear"]], "clear() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.clear"]], "configprotobytes (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "copy() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.copy"]], "copy() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.copy"]], "datasetinfo (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.datasetInfo"]], "datasetinfo (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.datasetInfo"]], "doexceptionhandling (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.doExceptionHandling"]], "dropout (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableOutputLogs"]], "engine (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.engine"]], "entities (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.entities"]], "evaluationlogextended (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.evaluationLogExtended"]], "explainparam() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.explainParam"]], "explainparam() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.explainParam"]], "explainparams() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.explainParams"]], "explainparams() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.explainParams"]], "extractparammap() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.extractParamMap"]], "extractparammap() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.extractParamMap"]], "fit() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.fit"]], "fitmultiple() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.fitMultiple"]], "getclasses() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "getengine() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getEngine"]], "getinputcols() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getInputCols"]], "getinputcols() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getInputCols"]], "getlabelcolumn() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getLabelColumn"]], "getlazyannotator() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getLazyAnnotator"]], "getlazyannotator() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getLazyAnnotator"]], "getordefault() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getOrDefault"]], "getordefault() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getOrDefault"]], "getoutputcol() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getOutputCol"]], "getoutputcol() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getOutputCol"]], "getparam() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getParam"]], "getparam() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getParam"]], "getparamvalue() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getParamValue"]], "getparamvalue() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getParamValue"]], "getstorageref() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getStorageRef"]], "gettrainingclassdistribution() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "getter_attrs (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.getter_attrs"]], "getter_attrs (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getter_attrs"]], "graphfile (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "hasdefault() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.hasDefault"]], "hasdefault() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.hasDefault"]], "hasparam() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.hasParam"]], "hasparam() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.hasParam"]], "includeallconfidencescores (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "inputcols (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputCols"]], "inputcols (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputCols"]], "inputcolsvalidation() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputColsValidation"]], "inputcolsvalidation() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputColsValidation"]], "isdefined() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.isDefined"]], "isdefined() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.isDefined"]], "isset() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.isSet"]], "isset() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.isSet"]], "labelcasing (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "labelcolumn (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.labelColumn"]], "lazyannotator (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lazyAnnotator"]], "lazyannotator (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.lazyAnnotator"]], "load() (medicalnerapproach class method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.load"]], "load() (medicalnermodel class method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.load"]], "loadsavedmodel() (medicalnermodel static method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "maxepochs (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.maxEpochs"]], "minepochs (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.minEpochs"]], "name (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "optionalinputannotatortypes (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "outputcol (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputCol"]], "outputcol (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputCol"]], "outputlogspath (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputLogsPath"]], "overrideexistingtags (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomseed (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomSeed"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "read() (medicalnerapproach class method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.read"]], "read() (medicalnermodel class method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.read"]], "save() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.save"]], "save() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.save"]], "sentencetokenindex (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "set() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.set"]], "set() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.set"]], "setbatchsize() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdatasetinfo() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDatasetInfo"]], "setdatasetinfo() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setDatasetInfo"]], "setdoexceptionhandling() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDoExceptionHandling"]], "setdropout() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableOutputLogs"]], "setentities() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEntities"]], "setevaluationlogextended() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setForceInputTypeValidation"]], "setgraphfile() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setinputcols() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setInputCols"]], "setinputcols() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInputCols"]], "setlabelcasing() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlabelcolumn() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLabelColumn"]], "setlazyannotator() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLazyAnnotator"]], "setlazyannotator() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLazyAnnotator"]], "setlogprefix() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setmaxepochs() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setMaxEpochs"]], "setminepochs() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setMinEpochs"]], "setoutputcol() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOutputCol"]], "setoutputcol() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setOutputCol"]], "setoutputlogspath() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setparamvalue() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setParamValue"]], "setparamvalue() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setParamValue"]], "setparams() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setParams"]], "setpo() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomseed() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "setstorageref() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setStorageRef"]], "settagsmapping() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "settestdataset() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTestDataset"]], "setusebestmodel() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "setverbose() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setVerbose"]], "skiplpinputcolsvalidation (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.medical_ner": [[87, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "storageref (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.storageRef"]], "testdataset (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.testDataset"]], "trainingclassdistribution (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "transform() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.transform"]], "uid (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.uid"]], "uid (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.uid"]], "usebestmodel (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "validationsplit (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.validationSplit"]], "verbose (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.verbose"]], "write() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.write"]], "write() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.write"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "clear() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.clear"]], "copy() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.copy"]], "explainparam() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.explainParam"]], "explainparams() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.explainParams"]], "extractparammap() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.extractParamMap"]], "getinputcols() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getInputCols"]], "getlazyannotator() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getLazyAnnotator"]], "getordefault() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getOrDefault"]], "getoutputcol() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getOutputCol"]], "getparam() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getParam"]], "getparamvalue() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getParamValue"]], "getter_attrs (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.getter_attrs"]], "hasdefault() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.hasDefault"]], "hasparam() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.hasParam"]], "inputannotatortypes (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "inputcols (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputCols"]], "inputcolsvalidation() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputColsValidation"]], "isdefined() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.isDefined"]], "isset() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.isSet"]], "lazyannotator (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.lazyAnnotator"]], "load() (nerchunker class method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.load"]], "name (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "optionalinputannotatortypes (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.optionalInputAnnotatorTypes"]], "outputannotatortype (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "outputcol (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputCol"]], "read() (nerchunker class method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.read"]], "regexparsers (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "save() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.save"]], "set() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.set"]], "setforceinputtypevalidation() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setForceInputTypeValidation"]], "setinputcols() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setInputCols"]], "setlazyannotator() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setLazyAnnotator"]], "setoutputcol() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setOutputCol"]], "setparamvalue() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setParamValue"]], "setparams() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setParams"]], "setregexparsers() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "skiplpinputcolsvalidation (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[88, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "transform() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.transform"]], "uid (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.uid"]], "write() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.write"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "allpossiblefieldstostandardize (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.allPossibleFieldsToStandardize"]], "blacklist (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.blackList"]], "blacklist (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.blackList"]], "blacklist (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.blackList"]], "casesensitive (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.caseSensitive"]], "casesensitive (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.caseSensitive"]], "casesensitive (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.caseSensitive"]], "clear() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.clear"]], "clear() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.clear"]], "copy() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.copy"]], "copy() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.copy"]], "criteria (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.criteria"]], "criteria (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.criteria"]], "criteria (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.criteria"]], "doexceptionhandling (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.doExceptionHandling"]], "doexceptionhandling (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.doExceptionHandling"]], "doexceptionhandling (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.doExceptionHandling"]], "explainparam() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.explainParam"]], "explainparam() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.explainParam"]], "explainparams() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.explainParams"]], "explainparams() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.explainParams"]], "extractparammap() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.extractParamMap"]], "extractparammap() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.extractParamMap"]], "filtervalue (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.filterValue"]], "filtervalue (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.filterValue"]], "filtervalue (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.filterValue"]], "fit() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.fit"]], "fitmultiple() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.fitMultiple"]], "getinputcols() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getInputCols"]], "getinputcols() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getInputCols"]], "getlazyannotator() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getLazyAnnotator"]], "getlazyannotator() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getLazyAnnotator"]], "getordefault() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getOrDefault"]], "getordefault() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getOrDefault"]], "getoutputcol() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getOutputCol"]], "getoutputcol() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getOutputCol"]], "getparam() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getParam"]], "getparam() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getParam"]], "getparamvalue() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getParamValue"]], "getparamvalue() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getParamValue"]], "getter_attrs (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.getter_attrs"]], "getter_attrs (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.getter_attrs"]], "greedymode (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "greedymode (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.greedyMode"]], "greedymode (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.greedyMode"]], "hasdefault() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.hasDefault"]], "hasdefault() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.hasDefault"]], "hasparam() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.hasParam"]], "hasparam() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.hasParam"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "ignorestopwords (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.ignoreStopWords"]], "ignorestopwords (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.ignoreStopWords"]], "includeoutputcolumn (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.includeOutputColumn"]], "includestandardfield (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.includeStandardField"]], "inputannotatortypes (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "inputcols (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputCols"]], "inputcols (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputCols"]], "inputcolsvalidation() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputColsValidation"]], "inputcolsvalidation() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputColsValidation"]], "isdefined() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.isDefined"]], "isdefined() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.isDefined"]], "isset() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.isSet"]], "isset() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.isSet"]], "lazyannotator (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.lazyAnnotator"]], "lazyannotator (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.lazyAnnotator"]], "load() (nerconverterinternal class method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.load"]], "load() (nerconverterinternalmodel class method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.load"]], "name (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "optionalinputannotatortypes (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "outputcol (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputCol"]], "outputcol (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputCol"]], "outputcolumnkey (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputColumnKey"]], "preserveposition (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "preserveposition (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.preservePosition"]], "preserveposition (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.preservePosition"]], "read() (nerconverterinternal class method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.read"]], "read() (nerconverterinternalmodel class method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.read"]], "regex (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.regex"]], "regex (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.regex"]], "regex (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.regex"]], "replacedictresource (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "resetsentenceindices (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.resetSentenceIndices"]], "save() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.save"]], "save() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.save"]], "set() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.set"]], "set() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.set"]], "setallpossiblefieldstostandardize() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setAllPossibleFieldsToStandardize"]], "setallowlist() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setallowlist() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setAllowList"]], "setallowlist() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setAllowList"]], "setblacklist() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setBlackList"]], "setblacklist() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setBlackList"]], "setblacklist() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setBlackList"]], "setcasesensitive() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setCaseSensitive"]], "setcasesensitive() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setCaseSensitive"]], "setcasesensitive() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setCaseSensitive"]], "setcriteria() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setCriteria"]], "setcriteria() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setCriteria"]], "setcriteria() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setCriteria"]], "setdenylist() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setdenylist() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setDenyList"]], "setdenylist() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setDenyList"]], "setdoexceptionhandling() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDoExceptionHandling"]], "setdoexceptionhandling() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setDoExceptionHandling"]], "setdoexceptionhandling() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setDoExceptionHandling"]], "setfiltervalue() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setFilterValue"]], "setfiltervalue() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setFilterValue"]], "setfiltervalue() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setFilterValue"]], "setforceinputtypevalidation() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setForceInputTypeValidation"]], "setgreedymode() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setgreedymode() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setGreedyMode"]], "setgreedymode() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIgnoreStopWords"]], "setignorestopwords() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setIgnoreStopWords"]], "setincludeoutputcolumn() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIncludeOutputColumn"]], "setincludestandardfield() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setIncludeStandardField"]], "setinputcols() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setInputCols"]], "setinputcols() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setInputCols"]], "setlazyannotator() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setLazyAnnotator"]], "setlazyannotator() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setLazyAnnotator"]], "setoutputcol() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setOutputCol"]], "setoutputcol() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setOutputCol"]], "setoutputcolumnkey() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setOutputColumnKey"]], "setparamvalue() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setParamValue"]], "setparamvalue() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setParamValue"]], "setparams() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setParams"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setpreserveposition() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setPreservePosition"]], "setpreserveposition() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setPreservePosition"]], "setregex() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setRegex"]], "setregex() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setRegex"]], "setregex() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setRegex"]], "setreplacedictresource() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setresetsentenceindices() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setResetSentenceIndices"]], "setstandardfieldkey() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setStandardFieldKey"]], "setthreshold() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "setthreshold() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setThreshold"]], "setthreshold() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setThreshold"]], "setwhitelist() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setWhiteList"]], "setwhitelist() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setWhiteList"]], "setwhitelist() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.setWhiteList"]], "skiplpinputcolsvalidation (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[89, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "standardfieldkey (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.standardFieldKey"]], "threshold (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "threshold (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.threshold"]], "threshold (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.threshold"]], "transform() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.transform"]], "uid (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.uid"]], "uid (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.uid"]], "whitelist (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.whiteList"]], "whitelist (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.whiteList"]], "whitelist (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.whiteList"]], "write() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.write"]], "write() (nerconverterinternalmodel method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.write"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "clear() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.clear"]], "combineentities (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "copy() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.copy"]], "entityscopes (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "explainparam() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.explainParam"]], "explainparams() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.explainParams"]], "extractparammap() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.extractParamMap"]], "getinputcols() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getInputCols"]], "getlazyannotator() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getLazyAnnotator"]], "getordefault() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getOrDefault"]], "getoutputcol() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getOutputCol"]], "getparam() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getParam"]], "getparamvalue() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getParamValue"]], "getter_attrs (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.getter_attrs"]], "hasdefault() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.hasDefault"]], "hasparam() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.hasParam"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "inputcols (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputCols"]], "inputcolsvalidation() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputColsValidation"]], "isdefined() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.isDefined"]], "isset() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.isSet"]], "lazyannotator (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.lazyAnnotator"]], "load() (nertemplaterendermodel class method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.load"]], "optionalinputannotatortypes (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.optionalInputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "outputcol (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputCol"]], "permuteentities (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "read() (nertemplaterendermodel class method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.read"]], "resampleentities (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "save() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.save"]], "set() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.set"]], "setcombineentities() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setforceinputtypevalidation() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setForceInputTypeValidation"]], "setinputcols() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setInputCols"]], "setlazyannotator() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setLazyAnnotator"]], "setoutputcol() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setOutputCol"]], "setparamvalue() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setParamValue"]], "setparams() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setParams"]], "setpermuteentities() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "skiplpinputcolsvalidation (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[90, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "transform() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.transform"]], "uid (nertemplaterendermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.uid"]], "write() (nertemplaterendermodel method)": [[90, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.write"]], "pretrainedzeroshotner (class in sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER"]], "batchsize (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.batchSize"]], "clear() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.clear"]], "copy() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.copy"]], "explainparam() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.explainParam"]], "explainparams() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.explainParams"]], "extractparammap() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.extractParamMap"]], "getbatchsize() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getBatchSize"]], "getinputcols() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getInputCols"]], "getlabels() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getLabels"]], "getlazyannotator() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getLazyAnnotator"]], "getordefault() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getOrDefault"]], "getoutputcol() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getOutputCol"]], "getparam() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getParam"]], "getparamvalue() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getParamValue"]], "getter_attrs (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.getter_attrs"]], "hasdefault() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.hasDefault"]], "hasparam() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.hasParam"]], "inputannotatortypes (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.inputAnnotatorTypes"]], "inputcols (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.inputCols"]], "inputcolsvalidation() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.inputColsValidation"]], "isdefined() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.isDefined"]], "isset() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.isSet"]], "labels (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.labels"]], "lazyannotator (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.lazyAnnotator"]], "load() (pretrainedzeroshotner class method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.load"]], "loadsavedmodel() (pretrainedzeroshotner static method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.loadSavedModel"]], "name (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.name"]], "optionalinputannotatortypes (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.optionalInputAnnotatorTypes"]], "outputannotatortype (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.outputAnnotatorType"]], "outputcol (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.outputCol"]], "predictionthreshold (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.predictionThreshold"]], "pretrained() (pretrainedzeroshotner static method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.pretrained"]], "read() (pretrainedzeroshotner class method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.read"]], "save() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.save"]], "set() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.set"]], "setbatchsize() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setBatchSize"]], "setforceinputtypevalidation() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setForceInputTypeValidation"]], "setinputcols() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setInputCols"]], "setlabels() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setLabels"]], "setlazyannotator() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setLazyAnnotator"]], "setoutputcol() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setOutputCol"]], "setparamvalue() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setParamValue"]], "setparams() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setParams"]], "setpredictionthreshold() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.setPredictionThreshold"]], "skiplpinputcolsvalidation (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner": [[91, "module-sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner"]], "transform() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.transform"]], "uid (pretrainedzeroshotner attribute)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.uid"]], "write() (pretrainedzeroshotner method)": [[91, "sparknlp_jsl.annotator.ner.pretrained_zero_shot_ner.PretrainedZeroShotNER.write"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "batchsize (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.batchSize"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.batchSize"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.batchSize"]], "casesensitive (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.caseSensitive"]], "clear() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.clear"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.clear"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.clear"]], "coalescesentences (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.coalesceSentences"]], "configprotobytes (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.configProtoBytes"]], "copy() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.copy"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.copy"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.copy"]], "engine (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.engine"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.engine"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.engine"]], "explainparam() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.explainParam"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParam"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParam"]], "explainparams() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.explainParams"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParams"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.explainParams"]], "extractparammap() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.extractParamMap"]], "getbatchsize() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getBatchSize"]], "getcasesensitive() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getCaseSensitive"]], "getclasses() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getClasses"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "getengine() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getEngine"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getEngine"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getEngine"]], "getinputcols() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getInputCols"]], "getlazyannotator() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getLazyAnnotator"]], "getmaxsentencelength() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getMaxSentenceLength"]], "getordefault() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOrDefault"]], "getoutputcol() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getOutputCol"]], "getparam() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getParam"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParam"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParam"]], "getparamvalue() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getParamValue"]], "getter_attrs (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.getter_attrs"]], "hasdefault() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasDefault"]], "hasparam() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.hasParam"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasParam"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.hasParam"]], "ignoreentities (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "inputcols (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputCols"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputCols"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputCols"]], "inputcolsvalidation() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.inputColsValidation"]], "isdefined() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.isDefined"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isDefined"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isDefined"]], "isset() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.isSet"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isSet"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.isSet"]], "lazyannotator (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.lazyAnnotator"]], "load() (zeroshotnermodel static method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "loadsavedmodel() (zeroshotnermodel static method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.loadSavedModel"]], "maxsentencelength (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.maxSentenceLength"]], "max_length_limit (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.max_length_limit"]], "name (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "optionalinputannotatortypes (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "outputcol (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputCol"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputCol"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.outputCol"]], "predictionthreshold (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "read() (zeroshotnermodel class method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.read"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.read"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.read"]], "save() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.save"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.save"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.save"]], "set() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.set"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.set"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.set"]], "setbatchsize() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setBatchSize"]], "setcasesensitive() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setCaseSensitive"]], "setconfigprotobytes() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setConfigProtoBytes"]], "setentitydefinitions() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setinputcols() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setInputCols"]], "setlazyannotator() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setLazyAnnotator"]], "setmaxsentencelength() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setMaxSentenceLength"]], "setoutputcol() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setOutputCol"]], "setparamvalue() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParamValue"]], "setparams() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setParams"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParams"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setParams"]], "setpredictionthreshold() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[92, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "transform() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.transform"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.transform"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.transform"]], "uid (zeroshotnermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.uid"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.uid"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.uid"]], "write() (zeroshotnermodel method)": [[92, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.write"], [170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.write"], [204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.write"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "clear() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.clear"]], "copy() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.copy"]], "defaultreplacementday (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "explainparam() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.explainParam"]], "explainparams() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.explainParams"]], "extractparammap() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.extractParamMap"]], "getinputcols() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getInputCols"]], "getlazyannotator() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getLazyAnnotator"]], "getordefault() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getOrDefault"]], "getoutputcol() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getOutputCol"]], "getparam() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getParam"]], "getparamvalue() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getParamValue"]], "getter_attrs (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.getter_attrs"]], "hasdefault() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.hasDefault"]], "hasparam() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.hasParam"]], "inputannotatortypes (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "inputcols (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputCols"]], "inputcolsvalidation() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputColsValidation"]], "isdefined() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.isDefined"]], "isset() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.isSet"]], "lazyannotator (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.lazyAnnotator"]], "load() (datenormalizer class method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.load"]], "name (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "optionalinputannotatortypes (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.optionalInputAnnotatorTypes"]], "outputannotatortype (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputcol (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputCol"]], "outputdateformat (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "read() (datenormalizer class method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.read"]], "save() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.save"]], "set() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.set"]], "setanchordateday() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setforceinputtypevalidation() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setForceInputTypeValidation"]], "setinputcols() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setInputCols"]], "setlazyannotator() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setLazyAnnotator"]], "setoutputcol() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputCol"]], "setoutputdateformat() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "setparamvalue() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setParamValue"]], "setparams() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setParams"]], "skiplpinputcolsvalidation (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[93, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "transform() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.transform"]], "uid (datenormalizer attribute)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.uid"]], "write() (datenormalizer method)": [[93, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.write"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "clear() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.clear"]], "copy() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.copy"]], "explainparam() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.explainParam"]], "explainparams() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.explainParams"]], "extractparammap() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.extractParamMap"]], "getinputcols() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getInputCols"]], "getlazyannotator() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getLazyAnnotator"]], "getordefault() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getOrDefault"]], "getoutputcol() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getOutputCol"]], "getparam() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getParam"]], "getparamvalue() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getParamValue"]], "getter_attrs (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.getter_attrs"]], "hasdefault() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.hasDefault"]], "hasparam() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.hasParam"]], "inputannotatortypes (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "inputcols (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputCols"]], "inputcolsvalidation() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputColsValidation"]], "isdefined() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.isDefined"]], "isset() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.isSet"]], "lazyannotator (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lazyAnnotator"]], "load() (drugnormalizer class method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.load"]], "lowercase (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "optionalinputannotatortypes (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.optionalInputAnnotatorTypes"]], "outputannotatortype (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "outputcol (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputCol"]], "policy (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "read() (drugnormalizer class method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.read"]], "save() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.save"]], "set() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.set"]], "setforceinputtypevalidation() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setForceInputTypeValidation"]], "setinputcols() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setInputCols"]], "setlazyannotator() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLazyAnnotator"]], "setlowercase() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setoutputcol() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setOutputCol"]], "setparamvalue() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setParamValue"]], "setparams() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setParams"]], "setpolicy() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "skiplpinputcolsvalidation (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[94, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "transform() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.transform"]], "uid (drugnormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.uid"]], "write() (drugnormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.write"]], "sparknlp_jsl.annotator.normalizer": [[95, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.params": [[96, "module-sparknlp_jsl.annotator.params"]], "resetsentenceindicesparam (class in sparknlp_jsl.annotator.params.reset_sentence_indices_param)": [[97, "sparknlp_jsl.annotator.params.reset_sentence_indices_param.ResetSentenceIndicesParam"]], "resetsentenceindices (resetsentenceindicesparam attribute)": [[97, "sparknlp_jsl.annotator.params.reset_sentence_indices_param.ResetSentenceIndicesParam.resetSentenceIndices"]], "setresetsentenceindices() (resetsentenceindicesparam method)": [[97, "sparknlp_jsl.annotator.params.reset_sentence_indices_param.ResetSentenceIndicesParam.setResetSentenceIndices"]], "sparknlp_jsl.annotator.params.reset_sentence_indices_param": [[97, "module-sparknlp_jsl.annotator.params.reset_sentence_indices_param"]], "sparknlp_jsl.annotator.parser": [[98, "module-sparknlp_jsl.annotator.parser"]], "structuredjsonconverter (class in sparknlp_jsl.annotator.parser.structured_json_converter)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter"]], "cleanannotations (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.cleanAnnotations"]], "clear() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.clear"]], "copy() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.copy"]], "explainparam() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.explainParam"]], "explainparams() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.explainParams"]], "extractparammap() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.extractParamMap"]], "getordefault() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.getOrDefault"]], "getparam() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.getParam"]], "getparamvalue() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.getParamValue"]], "getter_attrs (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.getter_attrs"]], "hasdefault() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.hasDefault"]], "hasparam() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.hasParam"]], "isdefined() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.isDefined"]], "isset() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.isSet"]], "load() (structuredjsonconverter class method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.load"]], "name (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.name"]], "outputannotatortype (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.outputAnnotatorType"]], "outputasstr (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.outputAsStr"]], "outputcol (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.outputCol"]], "parentsource (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.parentSource"]], "read() (structuredjsonconverter class method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.read"]], "returnrelationentities (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.returnRelationEntities"]], "save() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.save"]], "sentencecolumn (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.sentenceColumn"]], "set() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.set"]], "setcleanannotations() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setCleanAnnotations"]], "setconverterschema() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setConverterSchema"]], "setconverterschemaasstr() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setConverterSchemaAsStr"]], "setoutputasstr() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setOutputAsStr"]], "setoutputcol() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setOutputCol"]], "setparamvalue() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setParamValue"]], "setparams() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setParams"]], "setparentsource() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setParentSource"]], "setreturnrelationentities() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setReturnRelationEntities"]], "setsentencecolumn() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.setSentenceColumn"]], "sparknlp_jsl.annotator.parser.structured_json_converter": [[99, "module-sparknlp_jsl.annotator.parser.structured_json_converter"]], "transform() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.transform"]], "uid (structuredjsonconverter attribute)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.uid"]], "write() (structuredjsonconverter method)": [[99, "sparknlp_jsl.annotator.parser.structured_json_converter.StructuredJsonConverter.write"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[100, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[100, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[101, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "batchsize (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.batchSize"]], "clear() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.clear"]], "configprotobytes (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "copy() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.copy"]], "customprompt (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "dosample (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.doSample"]], "explainparam() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.explainParam"]], "explainparams() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.explainParams"]], "extractparammap() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.extractParamMap"]], "getbatchsize() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getBatchSize"]], "getinputcols() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getInputCols"]], "getlazyannotator() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getLazyAnnotator"]], "getordefault() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getOrDefault"]], "getoutputcol() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getOutputCol"]], "getparam() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getParam"]], "getparamvalue() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getParamValue"]], "getquestiontypes() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "getter_attrs (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getter_attrs"]], "hasdefault() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.hasDefault"]], "hasparam() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.hasParam"]], "ignoretokenids (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "inputcols (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputCols"]], "inputcolsvalidation() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputColsValidation"]], "isdefined() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.isDefined"]], "isset() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.isSet"]], "lazyannotator (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.lazyAnnotator"]], "load() (medicalquestionanswering class method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.load"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "maxcontextlength (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.maxContextLength"]], "maxnewtokens (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.maxNewTokens"]], "mlframeworktype (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.mlFrameworkType"]], "modeltype (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.modelType"]], "name (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "norepeatngramsize (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "outputcol (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputCol"]], "pretrained() (medicalquestionanswering static method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "read() (medicalquestionanswering class method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.read"]], "save() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.save"]], "set() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.set"]], "setbatchsize() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setBatchSize"]], "setconfigprotobytes() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setdosample() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setInputCols"]], "setlazyannotator() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setOutputCol"]], "setparamvalue() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setParamValue"]], "setparams() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setParams"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setrandomseed() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setRandomSeed"]], "settopk() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setTopK"]], "setusecache() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.qa.medical_qa": [[102, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "topk (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.topK"]], "transform() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.transform"]], "uid (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.uid"]], "usecache (medicalquestionanswering attribute)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "write() (medicalquestionanswering method)": [[102, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.write"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "clear() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.clear"]], "copy() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.copy"]], "entities1 (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "explainparam() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.explainParam"]], "explainparams() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.explainParams"]], "extractparammap() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.extractParamMap"]], "getinputcols() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getInputCols"]], "getlazyannotator() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getLazyAnnotator"]], "getordefault() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getOrDefault"]], "getoutputcol() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getOutputCol"]], "getparam() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getParam"]], "getparamvalue() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getParamValue"]], "getter_attrs (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.getter_attrs"]], "hasdefault() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.hasDefault"]], "hasparam() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.hasParam"]], "inputannotatortypes (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputCols"]], "inputcolsvalidation() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputColsValidation"]], "isdefined() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.isDefined"]], "isset() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.isSet"]], "lazyannotator (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.lazyAnnotator"]], "load() (nerquestiongenerator class method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.load"]], "name (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "optionalinputannotatortypes (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "outputcol (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputCol"]], "questionmark (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "read() (nerquestiongenerator class method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.read"]], "save() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.save"]], "set() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.set"]], "setentities1() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setInputCols"]], "setlazyannotator() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setOutputCol"]], "setparamvalue() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setParamValue"]], "setparams() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setParams"]], "setquestionmark() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[103, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "transform() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.transform"]], "uid (nerquestiongenerator attribute)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.uid"]], "write() (nerquestiongenerator method)": [[103, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.write"]], "contextsplitassembler (class in sparknlp_jsl.annotator.rag.context_split_assembler)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler"]], "clear() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.clear"]], "copy() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.copy"]], "explainparam() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explainParam"]], "explainparams() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explainParams"]], "explodesplits (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.explodeSplits"]], "extractparammap() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.extractParamMap"]], "getinputcols() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getInputCols"]], "getlazyannotator() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getLazyAnnotator"]], "getordefault() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getOrDefault"]], "getoutputcol() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getOutputCol"]], "getparam() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getParam"]], "getparamvalue() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getParamValue"]], "getter_attrs (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.getter_attrs"]], "hasdefault() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.hasDefault"]], "hasparam() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.hasParam"]], "inputannotatortypes (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputAnnotatorTypes"]], "inputcols (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputCols"]], "inputcolsvalidation() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.inputColsValidation"]], "isdefined() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.isDefined"]], "isset() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.isSet"]], "joinstring (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.joinString"]], "lazyannotator (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.lazyAnnotator"]], "load() (contextsplitassembler class method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.load"]], "name (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.name"]], "optionalinputannotatortypes (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.optionalInputAnnotatorTypes"]], "outputannotatortype (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.outputAnnotatorType"]], "outputcol (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.outputCol"]], "read() (contextsplitassembler class method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.read"]], "save() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.save"]], "set() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.set"]], "setexplodesplits() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setExplodeSplits"]], "setforceinputtypevalidation() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setForceInputTypeValidation"]], "setinputcols() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setInputCols"]], "setjoinstring() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setJoinString"]], "setlazyannotator() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setLazyAnnotator"]], "setoutputcol() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setOutputCol"]], "setparamvalue() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setParamValue"]], "setparams() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.setParams"]], "skiplpinputcolsvalidation (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.rag.context_split_assembler": [[104, "module-sparknlp_jsl.annotator.rag.context_split_assembler"]], "transform() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.transform"]], "uid (contextsplitassembler attribute)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.uid"]], "write() (contextsplitassembler method)": [[104, "sparknlp_jsl.annotator.rag.context_split_assembler.ContextSplitAssembler.write"]], "sparknlp_jsl.annotator.rag": [[105, "module-sparknlp_jsl.annotator.rag"]], "vectordbpostprocessor (class in sparknlp_jsl.annotator.rag.vectordb_post_processor)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor"]], "allowzerocontentafterfiltering (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.allowZeroContentAfterFiltering"]], "casesensitive (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.caseSensitive"]], "clear() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.clear"]], "copy() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.copy"]], "diversitythreshold (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.diversityThreshold"]], "explainparam() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.explainParam"]], "explainparams() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.explainParams"]], "extractparammap() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.extractParamMap"]], "filterby (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.filterBy"]], "getinputcols() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getInputCols"]], "getlazyannotator() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getLazyAnnotator"]], "getordefault() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getOrDefault"]], "getoutputcol() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getOutputCol"]], "getparam() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getParam"]], "getparamvalue() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getParamValue"]], "getter_attrs (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.getter_attrs"]], "hasdefault() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.hasDefault"]], "hasparam() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.hasParam"]], "inputannotatortypes (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputAnnotatorTypes"]], "inputcols (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputCols"]], "inputcolsvalidation() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.inputColsValidation"]], "isdefined() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.isDefined"]], "isset() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.isSet"]], "lazyannotator (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.lazyAnnotator"]], "load() (vectordbpostprocessor class method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.load"]], "maxtopkafterfiltering (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.maxTopKAfterFiltering"]], "name (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.name"]], "optionalinputannotatortypes (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.optionalInputAnnotatorTypes"]], "outputannotatortype (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.outputAnnotatorType"]], "outputcol (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.outputCol"]], "read() (vectordbpostprocessor class method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.read"]], "save() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.save"]], "set() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.set"]], "setallowzerocontentafterfiltering() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setAllowZeroContentAfterFiltering"]], "setcasesensitive() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setCaseSensitive"]], "setdiversitythreshold() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setDiversityThreshold"]], "setfilterby() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setFilterBy"]], "setforceinputtypevalidation() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setForceInputTypeValidation"]], "setinputcols() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setInputCols"]], "setlazyannotator() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setLazyAnnotator"]], "setmaxtopkafterfiltering() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMaxTopKAfterFiltering"]], "setmetadatacriteria() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMetadataCriteria"]], "setmetadatacriteriaasstr() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setMetadataCriteriaAsStr"]], "setoutputcol() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setOutputCol"]], "setparamvalue() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setParamValue"]], "setparams() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setParams"]], "setsortby() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.setSortBy"]], "skiplpinputcolsvalidation (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.skipLPInputColsValidation"]], "sortby (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.sortBy"]], "sparknlp_jsl.annotator.rag.vectordb_post_processor": [[106, "module-sparknlp_jsl.annotator.rag.vectordb_post_processor"]], "transform() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.transform"]], "uid (vectordbpostprocessor attribute)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.uid"]], "write() (vectordbpostprocessor method)": [[106, "sparknlp_jsl.annotator.rag.vectordb_post_processor.VectorDBPostProcessor.write"]], "sparknlp_jsl.annotator.re": [[107, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "batchsize (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.batchSize"]], "classes (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.classes"]], "classes (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.classes"]], "classes (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "clear() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.clear"]], "clear() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.clear"]], "clear() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.clear"]], "clear() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.clear"]], "copy() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.copy"]], "copy() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.copy"]], "copy() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.copy"]], "copy() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.copy"]], "customlabels (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.customLabels"]], "customlabels (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.customLabels"]], "customlabels (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "datasetinfo (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.datasetInfo"]], "datasetinfo (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.datasetInfo"]], "datasetinfo (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.datasetInfo"]], "datasetinfo (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.datasetInfo"]], "directionsensitive (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.directionSensitive"]], "directionsensitive (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.directionSensitive"]], "directionsensitive (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.directionSensitive"]], "directionsensitive (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.directionSensitive"]], "doexceptionhandling (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.doExceptionHandling"]], "doexceptionhandling (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.doExceptionHandling"]], "doexceptionhandling (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.doExceptionHandling"]], "doexceptionhandling (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.doExceptionHandling"]], "dropout (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.dropout"]], "engine (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.engine"]], "epochsn (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.epochsN"]], "explainparam() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.explainParam"]], "explainparam() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.explainParam"]], "explainparam() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.explainParam"]], "explainparam() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.explainParam"]], "explainparams() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.explainParams"]], "explainparams() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.explainParams"]], "explainparams() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.explainParams"]], "explainparams() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.explainParams"]], "extractparammap() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.extractParamMap"]], "extractparammap() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.extractParamMap"]], "extractparammap() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.extractParamMap"]], "extractparammap() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.extractParamMap"]], "featurescaling (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.featureScaling"]], "featurescaling (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.featureScaling"]], "featurescaling (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.featureScaling"]], "featurescaling (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.featureScaling"]], "filterbytokendistance (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.filterByTokenDistance"]], "filterbytokendistance (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.filterByTokenDistance"]], "filterbytokendistance (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.filterByTokenDistance"]], "filterbytokendistance (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.filterByTokenDistance"]], "fit() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fit"]], "fitmultiple() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fitMultiple"]], "fiximbalance (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fixImbalance"]], "fromentitybegincol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getClasses"]], "getclasses() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getClasses"]], "getclasses() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getengine() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getEngine"]], "getinputcols() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getInputCols"]], "getinputcols() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getInputCols"]], "getinputcols() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getInputCols"]], "getinputcols() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getInputCols"]], "getlazyannotator() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getLazyAnnotator"]], "getlazyannotator() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getLazyAnnotator"]], "getlazyannotator() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getLazyAnnotator"]], "getlazyannotator() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getLazyAnnotator"]], "getordefault() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getOrDefault"]], "getordefault() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getOrDefault"]], "getordefault() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getOrDefault"]], "getordefault() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getOrDefault"]], "getoutputcol() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getOutputCol"]], "getoutputcol() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getOutputCol"]], "getoutputcol() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getOutputCol"]], "getoutputcol() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getOutputCol"]], "getparam() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getParam"]], "getparam() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getParam"]], "getparam() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getParam"]], "getparam() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getParam"]], "getparamvalue() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getParamValue"]], "getparamvalue() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getParamValue"]], "getparamvalue() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getParamValue"]], "getparamvalue() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getParamValue"]], "getrelationtypeperpair() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getRelationTypePerPair"]], "getrelationtypeperpair() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getRelationTypePerPair"]], "getrelationtypeperpair() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "getter_attrs (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.getter_attrs"]], "getter_attrs (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.getter_attrs"]], "getter_attrs (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.getter_attrs"]], "getter_attrs (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getter_attrs"]], "hasdefault() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.hasDefault"]], "hasdefault() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.hasDefault"]], "hasdefault() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.hasDefault"]], "hasdefault() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.hasDefault"]], "hasparam() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.hasParam"]], "hasparam() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.hasParam"]], "hasparam() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.hasParam"]], "hasparam() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.hasParam"]], "inputannotatortypes (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputAnnotatorTypes"]], "inputannotatortypes (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "inputcols (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputCols"]], "inputcols (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputCols"]], "inputcols (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputCols"]], "inputcols (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputCols"]], "inputcolsvalidation() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.inputColsValidation"]], "inputcolsvalidation() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.inputColsValidation"]], "inputcolsvalidation() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputColsValidation"]], "inputcolsvalidation() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputColsValidation"]], "isdefined() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.isDefined"]], "isdefined() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.isDefined"]], "isdefined() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.isDefined"]], "isdefined() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.isDefined"]], "isset() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.isSet"]], "isset() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.isSet"]], "isset() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.isSet"]], "isset() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.isSet"]], "labelcolumn (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.labelColumn"]], "lazyannotator (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.lazyAnnotator"]], "lazyannotator (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.lazyAnnotator"]], "lazyannotator (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.lazyAnnotator"]], "lazyannotator (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.lazyAnnotator"]], "learningrate (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.learningRate"]], "load() (genericremodel class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.load"]], "load() (posologyremodel class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.load"]], "load() (relationextractionapproach class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.load"]], "load() (relationextractionmodel class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.load"]], "maxsyntacticdistance (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.maxSyntacticDistance"]], "maxsyntacticdistance (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "modelfile (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.modelFile"]], "multiclass (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.multiClass"]], "multiclass (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.multiClass"]], "multiclass (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.multiClass"]], "multiclass (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.multiClass"]], "name (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.name"]], "name (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.name"]], "name (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "optionalinputannotatortypes (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.optionalInputAnnotatorTypes"]], "outputannotatortype (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.outputAnnotatorType"]], "outputannotatortype (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.outputAnnotatorType"]], "outputannotatortype (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "outputcol (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.outputCol"]], "outputcol (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.outputCol"]], "outputcol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputCol"]], "outputcol (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputCol"]], "outputlogspath (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputLogsPath"]], "overrideexistinglabels (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.predictionThreshold"]], "predictionthreshold (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.predictionThreshold"]], "predictionthreshold (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (genericremodel static method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.pretrained"]], "pretrained() (posologyremodel static method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.pretrained"]], "pretrained() (relationextractionmodel static method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "read() (genericremodel class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.read"]], "read() (posologyremodel class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.read"]], "read() (relationextractionapproach class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.read"]], "read() (relationextractionmodel class method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.read"]], "relationdirectioncol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.relationPairs"]], "relationpairs (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.relationPairs"]], "relationpairs (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.relationPairsCaseSensitive"]], "relationpairscasesensitive (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.relationPairsCaseSensitive"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "save() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.save"]], "save() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.save"]], "save() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.save"]], "save() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.save"]], "scopewindow (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.scopeWindow"]], "scopewindow (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.scopeWindow"]], "scopewindow (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.scopeWindow"]], "scopewindow (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.scopeWindow"]], "set() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.set"]], "set() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.set"]], "set() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.set"]], "set() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.set"]], "setbatchsize() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setBatchSize"]], "setcustomlabels() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setCustomLabels"]], "setcustomlabels() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setCustomLabels"]], "setcustomlabels() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setdatasetinfo() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDatasetInfo"]], "setdatasetinfo() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDatasetInfo"]], "setdatasetinfo() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDatasetInfo"]], "setdatasetinfo() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDatasetInfo"]], "setdirectionsensitive() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDirectionSensitive"]], "setdirectionsensitive() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDirectionSensitive"]], "setdirectionsensitive() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDirectionSensitive"]], "setdirectionsensitive() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDirectionSensitive"]], "setdoexceptionhandling() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setDoExceptionHandling"]], "setdoexceptionhandling() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setDoExceptionHandling"]], "setdoexceptionhandling() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setDoExceptionHandling"]], "setdropout() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setDropout"]], "setepochsnumber() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setEpochsNumber"]], "setfeaturescaling() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setFeatureScaling"]], "setfeaturescaling() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setFeatureScaling"]], "setfeaturescaling() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFeatureScaling"]], "setfeaturescaling() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFeatureScaling"]], "setfilterbytokendistance() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setFilterByTokenDistance"]], "setfilterbytokendistance() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setFilterByTokenDistance"]], "setfilterbytokendistance() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFilterByTokenDistance"]], "setfilterbytokendistance() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setFilterByTokenDistance"]], "setfiximbalance() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFixImbalance"]], "setforceinputtypevalidation() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setForceInputTypeValidation"]], "setforceinputtypevalidation() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setForceInputTypeValidation"]], "setforceinputtypevalidation() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setForceInputTypeValidation"]], "setfromentity() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setinputcols() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setInputCols"]], "setinputcols() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setInputCols"]], "setinputcols() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setInputCols"]], "setinputcols() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setInputCols"]], "setlabelcol() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLabelCol"]], "setlazyannotator() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setLazyAnnotator"]], "setlazyannotator() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setLazyAnnotator"]], "setlazyannotator() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLazyAnnotator"]], "setlazyannotator() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setLazyAnnotator"]], "setlearningrate() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setLearningRate"]], "setmaxsyntacticdistance() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setmodelfile() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setModelFile"]], "setmulticlass() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setMultiClass"]], "setmulticlass() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setMultiClass"]], "setmulticlass() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMultiClass"]], "setmulticlass() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMultiClass"]], "setoutputcol() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setOutputCol"]], "setoutputcol() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setOutputCol"]], "setoutputcol() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setOutputCol"]], "setoutputcol() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setOutputCol"]], "setoutputlogspath() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setOutputLogsPath"]], "setparamvalue() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setParamValue"]], "setparamvalue() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setParamValue"]], "setparamvalue() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setParamValue"]], "setparamvalue() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setParamValue"]], "setparams() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setParams"]], "setparams() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setParams"]], "setparams() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setParams"]], "setpredictionthreshold() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setPredictionThreshold"]], "setpredictionthreshold() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setPredictionThreshold"]], "setpredictionthreshold() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationPairs"]], "setrelationpairs() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationPairs"]], "setrelationpairs() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationPairsCaseSensitive"]], "setrelationpairscasesensitive() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationPairsCaseSensitive"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setRelationTypePerPair"]], "setrelationtypeperpair() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setRelationTypePerPair"]], "setrelationtypeperpair() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "setscopewindow() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.setScopeWindow"]], "setscopewindow() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.setScopeWindow"]], "setscopewindow() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setScopeWindow"]], "setscopewindow() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setScopeWindow"]], "settoentity() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "setvalidationsplit() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setValidationSplit"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "skiplpinputcolsvalidation (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.relation_extraction": [[108, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "transform() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.transform"]], "transform() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.transform"]], "transform() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.transform"]], "uid (genericremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.uid"]], "uid (posologyremodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.uid"]], "uid (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.uid"]], "uid (relationextractionmodel attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.uid"]], "validationsplit (relationextractionapproach attribute)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.validationSplit"]], "write() (genericremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel.write"]], "write() (posologyremodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel.write"]], "write() (relationextractionapproach method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.write"]], "write() (relationextractionmodel method)": [[108, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.write"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.batchSize"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.classes"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.classes"]], "clear() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.clear"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.clear"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.clear"]], "copy() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.copy"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.copy"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.copy"]], "customlabels (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.customLabels"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "doexceptionhandling (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.doExceptionHandling"]], "explainparam() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.explainParam"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParam"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParam"]], "explainparams() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.explainParams"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParams"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.explainParams"]], "extractparammap() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.extractParamMap"]], "getclasses() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getClasses"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "getinputcols() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getInputCols"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getInputCols"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getInputCols"]], "getlazyannotator() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getLazyAnnotator"]], "getordefault() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOrDefault"]], "getoutputcol() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getOutputCol"]], "getparam() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getParam"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParam"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParam"]], "getparamvalue() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getParamValue"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParamValue"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getParamValue"]], "getrelationtypeperpair() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getRelationTypePerPair"]], "getter_attrs (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.getter_attrs"]], "hasdefault() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.hasDefault"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasDefault"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasDefault"]], "hasparam() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.hasParam"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasParam"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.hasParam"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "inputcols (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputCols"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputCols"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputCols"]], "inputcolsvalidation() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.inputColsValidation"]], "isdefined() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.isDefined"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isDefined"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isDefined"]], "isset() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.isSet"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isSet"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.isSet"]], "lazyannotator (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.lazyAnnotator"]], "load() (relationextractiondlmodel class method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.load"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.load"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.load"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "optionalinputannotatortypes (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "outputcol (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputCol"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputCol"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.outputCol"]], "predictionthreshold (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "read() (relationextractiondlmodel class method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.read"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.read"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.read"]], "relationpairscasesensitive (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.relationPairsCaseSensitive"]], "save() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.save"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.save"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.save"]], "set() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.set"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.set"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.set"]], "setbatchsize() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setdoexceptionhandling() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setDoExceptionHandling"]], "setforceinputtypevalidation() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setForceInputTypeValidation"]], "setinputcols() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setInputCols"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setInputCols"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setInputCols"]], "setlazyannotator() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setLazyAnnotator"]], "setoutputcol() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setOutputCol"]], "setparamvalue() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setParamValue"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParamValue"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParamValue"]], "setparams() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setParams"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParams"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setParams"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "setrelationpairscasesensitive() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.setRelationTypePerPair"]], "skiplpinputcolsvalidation (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[109, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "transform() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.transform"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.transform"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.transform"]], "uid (relationextractiondlmodel attribute)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.uid"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.uid"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.uid"]], "write() (relationextractiondlmodel method)": [[109, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.write"], [152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.write"], [186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.write"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "clear() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.clear"]], "copy() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.copy"]], "directionsensitive (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.directionSensitive"]], "doclevelrelations (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "explainparam() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.explainParam"]], "explainparams() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.explainParams"]], "extractparammap() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.extractParamMap"]], "filterbytokendistance (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.filterByTokenDistance"]], "getinputcols() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getInputCols"]], "getlazyannotator() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getLazyAnnotator"]], "getordefault() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getOrDefault"]], "getoutputcol() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getOutputCol"]], "getparam() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getParam"]], "getparamvalue() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getParamValue"]], "getter_attrs (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.getter_attrs"]], "hasdefault() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.hasDefault"]], "hasparam() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.hasParam"]], "inputannotatortypes (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "inputcols (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputCols"]], "inputcolsvalidation() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputColsValidation"]], "isdefined() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.isDefined"]], "isset() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.isSet"]], "lazyannotator (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.lazyAnnotator"]], "load() (renerchunksfilter class method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.load"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "optionalinputannotatortypes (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.optionalInputAnnotatorTypes"]], "outputannotatortype (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "outputcol (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputCol"]], "read() (renerchunksfilter class method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.read"]], "relationpairs (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "save() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.save"]], "set() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.set"]], "setdirectionsensitive() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDirectionSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setfilterbytokendistance() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setFilterByTokenDistance"]], "setinputcols() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setInputCols"]], "setlazyannotator() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setLazyAnnotator"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setoutputcol() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setOutputCol"]], "setparamvalue() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setParamValue"]], "setparams() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setParams"]], "setrelationpairs() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[110, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "transform() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.transform"]], "uid (renerchunksfilter attribute)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.uid"]], "write() (renerchunksfilter method)": [[110, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.write"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "casesensitive (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.caseSensitive"]], "clear() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.clear"]], "coalescesentences (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.coalesceSentences"]], "configprotobytes (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.configProtoBytes"]], "copy() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.copy"]], "explainparam() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParam"]], "explainparams() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.explainParams"]], "extractparammap() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.extractParamMap"]], "getcasesensitive() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getCaseSensitive"]], "getclasses() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "getinputcols() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getInputCols"]], "getlazyannotator() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getLazyAnnotator"]], "getordefault() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOrDefault"]], "getoutputcol() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getOutputCol"]], "getparam() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParam"]], "getparamvalue() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getParamValue"]], "getter_attrs (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getter_attrs"]], "hasdefault() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasDefault"]], "hasparam() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.hasParam"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "inputcols (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputCols"]], "inputcolsvalidation() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputColsValidation"]], "isdefined() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isDefined"]], "isset() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.isSet"]], "lazyannotator (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.lazyAnnotator"]], "load() (zeroshotrelationextractionmodel class method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.load"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "loadsavedmodelopensource() (zeroshotrelationextractionmodel static method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModelOpenSource"]], "maxsentencelength (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.maxSentenceLength"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "name (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.name"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "optionalinputannotatortypes (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.optionalInputAnnotatorTypes"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "outputcol (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputCol"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "read() (zeroshotrelationextractionmodel class method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.read"]], "save() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.save"]], "set() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.set"]], "setcasesensitive() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCaseSensitive"]], "setcoalescesentences() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setCoalesceSentences"]], "setconfigprotobytes() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setConfigProtoBytes"]], "setforceinputtypevalidation() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setForceInputTypeValidation"]], "setinputcols() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setInputCols"]], "setlazyannotator() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setLazyAnnotator"]], "setmaxsentencelength() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setMaxSentenceLength"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setoutputcol() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setOutputCol"]], "setparamvalue() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParamValue"]], "setparams() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setParams"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "skiplpinputcolsvalidation (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[111, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "transform() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.transform"]], "uid (zeroshotrelationextractionmodel attribute)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.uid"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.uid"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.uid"]], "write() (zeroshotrelationextractionmodel method)": [[111, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"], [153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"], [187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.write"]], "sparknlp_jsl.annotator.regex": [[112, "module-sparknlp_jsl.annotator.regex"]], "regexmatcherinternal (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal"]], "regexmatcherinternalmodel (class in sparknlp_jsl.annotator.regex.regex_matcher)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel"]], "clear() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.clear"]], "clear() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.clear"]], "copy() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.copy"]], "copy() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.copy"]], "delimiter (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.delimiter"]], "explainparam() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.explainParam"]], "explainparam() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.explainParam"]], "explainparams() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.explainParams"]], "explainparams() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.explainParams"]], "externalrules (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.externalRules"]], "extractparammap() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.extractParamMap"]], "extractparammap() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.extractParamMap"]], "fit() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.fit"]], "fitmultiple() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.fitMultiple"]], "getinputcols() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getInputCols"]], "getinputcols() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getInputCols"]], "getlazyannotator() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getLazyAnnotator"]], "getlazyannotator() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getLazyAnnotator"]], "getordefault() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getOrDefault"]], "getordefault() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getOrDefault"]], "getoutputcol() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getOutputCol"]], "getoutputcol() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getOutputCol"]], "getparam() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getParam"]], "getparam() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getParam"]], "getparamvalue() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getParamValue"]], "getparamvalue() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getParamValue"]], "getter_attrs (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.getter_attrs"]], "getter_attrs (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.getter_attrs"]], "hasdefault() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.hasDefault"]], "hasdefault() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.hasDefault"]], "hasparam() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.hasParam"]], "hasparam() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.hasParam"]], "inputannotatortypes (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputAnnotatorTypes"]], "inputannotatortypes (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputAnnotatorTypes"]], "inputcols (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputCols"]], "inputcols (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputCols"]], "inputcolsvalidation() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.inputColsValidation"]], "inputcolsvalidation() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.inputColsValidation"]], "isdefined() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.isDefined"]], "isdefined() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.isDefined"]], "isset() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.isSet"]], "isset() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.isSet"]], "lazyannotator (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.lazyAnnotator"]], "lazyannotator (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.lazyAnnotator"]], "load() (regexmatcherinternal class method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.load"]], "load() (regexmatcherinternalmodel class method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.load"]], "mergeoverlapping (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.mergeOverlapping"]], "mergeoverlapping (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.mergeOverlapping"]], "name (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.name"]], "optionalinputannotatortypes (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.optionalInputAnnotatorTypes"]], "outputannotatortype (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputAnnotatorType"]], "outputannotatortype (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputAnnotatorType"]], "outputcol (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.outputCol"]], "outputcol (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.outputCol"]], "pretrained() (regexmatcherinternalmodel static method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.pretrained"]], "read() (regexmatcherinternal class method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.read"]], "read() (regexmatcherinternalmodel class method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.read"]], "rules (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.rules"]], "save() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.save"]], "save() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.save"]], "set() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.set"]], "set() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.set"]], "setdelimiter() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setDelimiter"]], "setexternalrules() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setExternalRules"]], "setforceinputtypevalidation() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setForceInputTypeValidation"]], "setinputcols() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setInputCols"]], "setinputcols() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setInputCols"]], "setlazyannotator() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setLazyAnnotator"]], "setlazyannotator() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setLazyAnnotator"]], "setmergeoverlapping() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setMergeOverlapping"]], "setmergeoverlapping() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setMergeOverlapping"]], "setoutputcol() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setOutputCol"]], "setoutputcol() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setOutputCol"]], "setparamvalue() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setParamValue"]], "setparamvalue() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setParamValue"]], "setparams() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.setParams"]], "setrules() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setRules"]], "setstrategy() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.setStrategy"]], "skiplpinputcolsvalidation (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.regex.regex_matcher": [[113, "module-sparknlp_jsl.annotator.regex.regex_matcher"]], "strategy (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.strategy"]], "transform() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.transform"]], "uid (regexmatcherinternal attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.uid"]], "uid (regexmatcherinternalmodel attribute)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.uid"]], "write() (regexmatcherinternal method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternal.write"]], "write() (regexmatcherinternalmodel method)": [[113, "sparknlp_jsl.annotator.regex.regex_matcher.RegexMatcherInternalModel.write"]], "sparknlp_jsl.annotator.resolution": [[114, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "clear() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.clear"]], "copy() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.copy"]], "explainparam() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.explainParam"]], "explainparams() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.explainParams"]], "extractparammap() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.extractParamMap"]], "getinputcols() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getInputCols"]], "getlazyannotator() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getLazyAnnotator"]], "getordefault() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getOrDefault"]], "getoutputcol() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getOutputCol"]], "getparam() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getParam"]], "getparamvalue() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getParamValue"]], "getter_attrs (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.getter_attrs"]], "hasdefault() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.hasDefault"]], "hasparam() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.hasParam"]], "inputannotatortypes (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "inputcols (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputCols"]], "inputcolsvalidation() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputColsValidation"]], "isdefined() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.isDefined"]], "isset() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.isSet"]], "lazyannotator (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.lazyAnnotator"]], "load() (resolvermerger class method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.load"]], "name (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "optionalinputannotatortypes (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.optionalInputAnnotatorTypes"]], "outputannotatortype (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "outputcol (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputCol"]], "read() (resolvermerger class method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.read"]], "save() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.save"]], "set() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.set"]], "setforceinputtypevalidation() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setForceInputTypeValidation"]], "setinputcols() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setInputCols"]], "setlazyannotator() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setLazyAnnotator"]], "setoutputcol() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setOutputCol"]], "setparamvalue() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setParamValue"]], "setparams() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.setParams"]], "skiplpinputcolsvalidation (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[115, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "transform() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.transform"]], "uid (resolvermerger attribute)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.uid"]], "write() (resolvermerger method)": [[115, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.write"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "casesensitive (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.caseSensitive"]], "casesensitive (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.caseSensitive"]], "clear() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.clear"]], "clear() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.clear"]], "confidencefunction (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.confidenceFunction"]], "confidencefunction (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "copy() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.copy"]], "copy() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.copy"]], "datasetinfo (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.datasetInfo"]], "datasetinfo (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.datasetInfo"]], "dimension (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.dimension"]], "distancefunction (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.distanceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "doexceptionhandling (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.doExceptionHandling"]], "doexceptionhandling (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.doExceptionHandling"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "engine (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.engine"]], "explainparam() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParam"]], "explainparam() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParam"]], "explainparams() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.explainParams"]], "explainparams() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.explainParams"]], "extractparammap() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.extractParamMap"]], "extractparammap() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.extractParamMap"]], "fit() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fit"]], "fitmultiple() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.fitMultiple"]], "getcasesensitive() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getCaseSensitive"]], "getcasesensitive() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.getCaseSensitive"]], "getdimension() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getDimension"]], "getengine() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getEngine"]], "getinputcols() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getInputCols"]], "getinputcols() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getInputCols"]], "getlazyannotator() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getLazyAnnotator"]], "getlazyannotator() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getLazyAnnotator"]], "getordefault() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOrDefault"]], "getordefault() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOrDefault"]], "getoutputcol() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getOutputCol"]], "getoutputcol() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getOutputCol"]], "getparam() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParam"]], "getparam() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParam"]], "getparamvalue() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getParamValue"]], "getparamvalue() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getParamValue"]], "getter_attrs (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.getter_attrs"]], "getter_attrs (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.getter_attrs"]], "hasdefault() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasDefault"]], "hasdefault() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasDefault"]], "hasparam() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.hasParam"]], "hasparam() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.hasParam"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "inputcols (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputCols"]], "inputcols (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputCols"]], "inputcolsvalidation() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputColsValidation"]], "inputcolsvalidation() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputColsValidation"]], "isdefined() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isDefined"]], "isdefined() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isDefined"]], "isset() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.isSet"]], "isset() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.isSet"]], "labelcol (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "lazyannotator (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.lazyAnnotator"]], "lazyannotator (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.lazyAnnotator"]], "load() (sentenceentityresolverapproach class method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.load"]], "load() (sentenceentityresolvermodel class method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.load"]], "missasempty (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.missAsEmpty"]], "missasempty (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.neighbours"]], "neighbours (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "optionalinputannotatortypes (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.optionalInputAnnotatorTypes"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "outputcol (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputCol"]], "outputcol (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputCol"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "read() (sentenceentityresolverapproach class method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.read"]], "read() (sentenceentityresolvermodel class method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.read"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "returnresolvedtextembeddings (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnResolvedTextEmbeddings"]], "returnresolvedtextembeddings (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.returnResolvedTextEmbeddings"]], "save() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.save"]], "save() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.save"]], "searchtree (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "set() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.set"]], "set() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.set"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setcasesensitive() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setCaseSensitive"]], "setcasesensitive() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setCaseSensitive"]], "setconfidencefunction() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setConfidenceFunction"]], "setconfidencefunction() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdatasetinfo() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDatasetInfo"]], "setdatasetinfo() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDatasetInfo"]], "setdimension() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setDimension"]], "setdistancefunction() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDistanceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdoexceptionhandling() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDoExceptionHandling"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setforceinputtypevalidation() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setForceInputTypeValidation"]], "setinputcols() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setInputCols"]], "setinputcols() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setInputCols"]], "setlabelcol() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setlazyannotator() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLazyAnnotator"]], "setlazyannotator() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setLazyAnnotator"]], "setmissasempty() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setMissAsEmpty"]], "setmissasempty() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNeighbours"]], "setneighbours() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoutputcol() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOutputCol"]], "setoutputcol() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setOutputCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setparamvalue() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setParamValue"]], "setparamvalue() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParamValue"]], "setparams() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setParams"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setreturnresolvedtextembeddings() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setReturnResolvedTextEmbeddings"]], "setreturnresolvedtextembeddings() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setReturnResolvedTextEmbeddings"]], "setsearchtree() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setThreshold"]], "setthreshold() (sentenceresolverparams method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "skiplpinputcolsvalidation (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[116, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.threshold"]], "threshold (sentenceresolverparams attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "transform() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.transform"]], "uid (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.uid"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.uid"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.uid"]], "uid (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.uid"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.uid"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.uid"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "write() (sentenceentityresolverapproach method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.write"]], "write() (sentenceentityresolvermodel method)": [[116, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"], [149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"], [183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.write"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "clear() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.clear"]], "copy() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.copy"]], "explainparam() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.explainParam"]], "explainparams() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.explainParams"]], "extractparammap() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.extractParamMap"]], "getinputcols() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getInputCols"]], "getlazyannotator() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getLazyAnnotator"]], "getordefault() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getOrDefault"]], "getoutputcol() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getOutputCol"]], "getparam() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getParam"]], "getparamvalue() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getParamValue"]], "getter_attrs (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.getter_attrs"]], "hasdefault() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.hasDefault"]], "hasparam() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.hasParam"]], "inputannotatortypes (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "inputcols (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputCols"]], "inputcolsvalidation() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputColsValidation"]], "isdefined() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.isDefined"]], "isset() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.isSet"]], "lazyannotator (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.lazyAnnotator"]], "load() (resolution2chunk class method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.load"]], "name (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "optionalinputannotatortypes (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.optionalInputAnnotatorTypes"]], "outputannotatortype (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "outputcol (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputCol"]], "read() (resolution2chunk class method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.read"]], "save() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.save"]], "set() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.set"]], "setinputcols() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setInputCols"]], "setlazyannotator() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setLazyAnnotator"]], "setoutputcol() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setOutputCol"]], "setparamvalue() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParamValue"]], "setparams() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[117, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "transform() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.transform"]], "uid (resolution2chunk attribute)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.uid"]], "write() (resolution2chunk method)": [[117, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.write"]], "router (class in sparknlp_jsl.annotator.router)": [[118, "sparknlp_jsl.annotator.router.Router"]], "clear() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.clear"]], "copy() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.copy"]], "explainparam() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.explainParam"]], "explainparams() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.explainParams"]], "extractparammap() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.extractParamMap"]], "filterfieldselements (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "getinputcols() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.getInputCols"]], "getlazyannotator() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.getLazyAnnotator"]], "getordefault() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.getOrDefault"]], "getoutputcol() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.getOutputCol"]], "getparam() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.getParam"]], "getparamvalue() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.getParamValue"]], "getter_attrs (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.getter_attrs"]], "hasdefault() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.hasDefault"]], "hasparam() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.hasParam"]], "inputannotatortypes (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputcols (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.inputCols"]], "inputcolsvalidation() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.inputColsValidation"]], "inputtype (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.inputType"]], "isdefined() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.isDefined"]], "isset() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.isSet"]], "lazyannotator (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.lazyAnnotator"]], "load() (router class method)": [[118, "sparknlp_jsl.annotator.router.Router.load"]], "metadatafield (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.name"]], "optionalinputannotatortypes (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.optionalInputAnnotatorTypes"]], "outputannotatortype (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "outputcol (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.outputCol"]], "read() (router class method)": [[118, "sparknlp_jsl.annotator.router.Router.read"]], "save() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.save"]], "set() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.set"]], "setfilterfieldselements() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setforceinputtypevalidation() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setForceInputTypeValidation"]], "setinputcols() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setlazyannotator() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setLazyAnnotator"]], "setmetadatafield() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "setoutputcol() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setOutputCol"]], "setparamvalue() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setParamValue"]], "setparams() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.setParams"]], "skiplpinputcolsvalidation (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[118, "module-sparknlp_jsl.annotator.router"]], "transform() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.transform"]], "uid (router attribute)": [[118, "sparknlp_jsl.annotator.router.Router.uid"]], "write() (router method)": [[118, "sparknlp_jsl.annotator.router.Router.write"]], "sparknlp_jsl.annotator.seq2seq": [[119, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "batchsize (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.batchSize"]], "clear() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.clear"]], "configprotobytes (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "copy() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.copy"]], "dosample (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "explainparam() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.explainParam"]], "explainparams() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.explainParams"]], "extractparammap() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.extractParamMap"]], "getbatchsize() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getBatchSize"]], "getinputcols() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getInputCols"]], "getlazyannotator() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getLazyAnnotator"]], "getordefault() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getOrDefault"]], "getoutputcol() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getOutputCol"]], "getparam() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getParam"]], "getparamvalue() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getParamValue"]], "getter_attrs (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.getter_attrs"]], "hasdefault() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.hasDefault"]], "hasparam() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.hasParam"]], "ignoretokenids (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "inputcols (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputCols"]], "inputcolsvalidation() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputColsValidation"]], "isdefined() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.isDefined"]], "isset() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.isSet"]], "lazyannotator (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.lazyAnnotator"]], "load() (medicalencoderdecoder class method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.load"]], "maxnewtokens (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "mlframeworktype (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.mlFrameworkType"]], "name (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "outputcol (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputCol"]], "randomseed (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "read() (medicalencoderdecoder class method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.read"]], "refinechunksize (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "save() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.save"]], "set() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.set"]], "setbatchsize() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setBatchSize"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setInputCols"]], "setlazyannotator() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setOutputCol"]], "setparamvalue() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setParamValue"]], "setparams() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setParams"]], "setrandomseed() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[120, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "transform() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.transform"]], "uid (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.uid"]], "usecache (medicalencoderdecoder attribute)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "write() (medicalencoderdecoder method)": [[120, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.write"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "batchsize (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.batchSize"]], "clear() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.clear"]], "configprotobytes (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.configProtoBytes"]], "copy() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.copy"]], "dosample (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.doSample"]], "explainparam() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.explainParam"]], "explainparams() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.explainParams"]], "extractparammap() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.extractParamMap"]], "getbatchsize() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getBatchSize"]], "getinputcols() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getInputCols"]], "getlazyannotator() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getLazyAnnotator"]], "getordefault() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getOrDefault"]], "getoutputcol() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getOutputCol"]], "getparam() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getParam"]], "getparamvalue() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getParamValue"]], "getter_attrs (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.getter_attrs"]], "hasdefault() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.hasDefault"]], "hasparam() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.hasParam"]], "ignoretokenids (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.ignoreTokenIds"]], "inputannotatortypes (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputAnnotatorTypes"]], "inputcols (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputCols"]], "inputcolsvalidation() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.inputColsValidation"]], "isdefined() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.isDefined"]], "isset() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.isSet"]], "lazyannotator (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.lazyAnnotator"]], "load() (medicalsummarizer class method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.load"]], "loadsavedmodel() (medicalsummarizer static method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "maxnewtokens (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.maxNewTokens"]], "maxtextlength (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.maxTextLength"]], "mlframeworktype (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.mlFrameworkType"]], "name (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "norepeatngramsize (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.outputAnnotatorType"]], "outputcol (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.outputCol"]], "pretrained() (medicalsummarizer static method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "randomseed (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.randomSeed"]], "read() (medicalsummarizer class method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.read"]], "refinechunksize (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineChunkSize"]], "refinemaxattempts (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineMaxAttempts"]], "refinesummary (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineSummary"]], "refinesummarytargetlength (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.refineSummaryTargetLength"]], "save() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.save"]], "set() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.set"]], "setbatchsize() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setBatchSize"]], "setconfigprotobytes() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setConfigProtoBytes"]], "setdosample() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setDoSample"]], "setforceinputtypevalidation() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setIgnoreTokenIds"]], "setinputcols() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setInputCols"]], "setlazyannotator() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setMaxNewTokens"]], "setmaxtextlength() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setOutputCol"]], "setparamvalue() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setParamValue"]], "setparams() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setParams"]], "setrandomseed() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRandomSeed"]], "setrefinechunksize() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setStopAtEos"]], "settopk() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.setTopK"]], "skiplpinputcolsvalidation (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[121, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "stopateos (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.stopAtEos"]], "task (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.task"]], "topk (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.topK"]], "transform() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.transform"]], "uid (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.uid"]], "usecache (medicalsummarizer attribute)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.useCache"]], "write() (medicalsummarizer method)": [[121, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.write"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "batchsize (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.batchSize"]], "clear() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.clear"]], "configprotobytes (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "copy() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.copy"]], "customprompt (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.customPrompt"]], "dosample (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.doSample"]], "explainparam() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.explainParam"]], "explainparams() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.explainParams"]], "extractparammap() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.extractParamMap"]], "getadditionaltokens() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getAdditionalTokens"]], "getbatchsize() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getBatchSize"]], "getinputcols() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getInputCols"]], "getlazyannotator() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getLazyAnnotator"]], "getordefault() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getOrDefault"]], "getoutputcol() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getOutputCol"]], "getparam() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getParam"]], "getparamvalue() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getParamValue"]], "getter_attrs (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.getter_attrs"]], "hasdefault() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.hasDefault"]], "hasparam() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.hasParam"]], "ignoretokenids (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.ignoreTokenIds"]], "inputannotatortypes (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "inputcols (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputCols"]], "inputcolsvalidation() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputColsValidation"]], "isdefined() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.isDefined"]], "isset() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.isSet"]], "lazyannotator (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.lazyAnnotator"]], "load() (medicaltextgenerator class method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.load"]], "loadsavedmodel() (medicaltextgenerator static method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxcontextlength (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxContextLength"]], "maxnewtokens (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxNewTokens"]], "maxtextlength (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "mlframeworktype (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.mlFrameworkType"]], "modeltype (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "norepeatngramsize (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "outputcol (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputCol"]], "pretrained() (medicaltextgenerator static method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "read() (medicaltextgenerator class method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.read"]], "save() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.save"]], "set() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.set"]], "setadditionaltokens() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setAdditionalTokens"]], "setbatchsize() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setBatchSize"]], "setconfigprotobytes() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCustomPrompt"]], "setdosample() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setDoSample"]], "setforceinputtypevalidation() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setIgnoreTokenIds"]], "setinputcols() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setInputCols"]], "setlazyannotator() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setOutputCol"]], "setparamvalue() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setParamValue"]], "setparams() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setParams"]], "setrandomseed() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setRandomSeed"]], "setstopateos() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "settopk() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setTopK"]], "setusecache() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[122, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "topk (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.topK"]], "transform() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.transform"]], "uid (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.uid"]], "usecache (medicaltextgenerator attribute)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "write() (medicaltextgenerator method)": [[122, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.write"]], "text2sql (class in sparknlp_jsl.annotator.seq2seq.text2sql)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL"]], "batchsize (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.batchSize"]], "clear() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.clear"]], "configprotobytes (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.configProtoBytes"]], "copy() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.copy"]], "customprompt (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.customPrompt"]], "dosample (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.doSample"]], "explainparam() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.explainParam"]], "explainparams() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.explainParams"]], "extractparammap() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.extractParamMap"]], "getadditionaltokens() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getAdditionalTokens"]], "getbatchsize() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getBatchSize"]], "getinputcols() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getInputCols"]], "getlazyannotator() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getLazyAnnotator"]], "getordefault() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getOrDefault"]], "getoutputcol() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getOutputCol"]], "getparam() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getParam"]], "getparamvalue() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getParamValue"]], "getpostprocessingsubstitutions() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getPostProcessingSubstitutions"]], "getschema() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getSchema"]], "getter_attrs (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.getter_attrs"]], "hasdefault() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.hasDefault"]], "hasparam() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.hasParam"]], "ignoretokenids (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.ignoreTokenIds"]], "inputannotatortypes (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputAnnotatorTypes"]], "inputcols (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputCols"]], "inputcolsvalidation() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.inputColsValidation"]], "isdefined() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.isDefined"]], "isset() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.isSet"]], "lazyannotator (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.lazyAnnotator"]], "load() (text2sql class method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.load"]], "loadsavedmodel() (text2sql static method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.loadSavedModel"]], "maxcontextlength (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxContextLength"]], "maxnewtokens (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxNewTokens"]], "maxtextlength (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.maxTextLength"]], "mlframeworktype (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.mlFrameworkType"]], "modeltype (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.modelType"]], "name (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.name"]], "norepeatngramsize (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.noRepeatNgramSize"]], "optionalinputannotatortypes (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.optionalInputAnnotatorTypes"]], "outputannotatortype (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.outputAnnotatorType"]], "outputcol (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.outputCol"]], "pretrained() (text2sql static method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.pretrained"]], "read() (text2sql class method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.read"]], "save() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.save"]], "set() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.set"]], "setadditionaltokens() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setAdditionalTokens"]], "setbatchsize() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setBatchSize"]], "setconfigprotobytes() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setConfigProtoBytes"]], "setcustomprompt() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setCustomPrompt"]], "setdosample() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setDoSample"]], "setforceinputtypevalidation() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setForceInputTypeValidation"]], "setignoretokenids() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setIgnoreTokenIds"]], "setinputcols() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setInputCols"]], "setlazyannotator() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setLazyAnnotator"]], "setmaxcontextlength() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxContextLength"]], "setmaxnewtokens() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxNewTokens"]], "setmaxtextlength() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setMaxTextLength"]], "setnorepeatngramsize() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setNoRepeatNgramSize"]], "setoutputcol() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setOutputCol"]], "setparamvalue() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setParamValue"]], "setparams() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setParams"]], "setpostprocessingsubstitutions() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setPostProcessingSubstitutions"]], "setrandomseed() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setRandomSeed"]], "setschema() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setSchema"]], "setstopateos() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setStopAtEos"]], "settablelimit() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTableLimit"]], "settopk() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setTopK"]], "setusecache() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.setUseCache"]], "skiplpinputcolsvalidation (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq.text2sql": [[123, "module-sparknlp_jsl.annotator.seq2seq.text2sql"]], "stopateos (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.stopAtEos"]], "tablelimit (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.tableLimit"]], "topk (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.topK"]], "transform() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.transform"]], "uid (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.uid"]], "usecache (text2sql attribute)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.useCache"]], "write() (text2sql method)": [[123, "sparknlp_jsl.annotator.seq2seq.text2sql.Text2SQL.write"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "resetsentenceindices (sourcetrackingmetadataparams attribute)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.resetSentenceIndices"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setresetsentenceindices() (sourcetrackingmetadataparams method)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setResetSentenceIndices"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[124, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[124, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "sparknlp_jsl.annotator.splitter": [[125, "module-sparknlp_jsl.annotator.splitter"]], "internaldocumentsplitter (class in sparknlp_jsl.annotator.splitter.internal_document_splitter)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter"]], "casesensitive (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.caseSensitive"]], "chunkoverlap (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.chunkOverlap"]], "chunksize (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.chunkSize"]], "clear() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.clear"]], "copy() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.copy"]], "customboundsstrategy (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.customBoundsStrategy"]], "enablesentenceincrement (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.enableSentenceIncrement"]], "explainparam() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explainParam"]], "explainparams() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explainParams"]], "explodesplits (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.explodeSplits"]], "extractparammap() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.extractParamMap"]], "getinputcols() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getInputCols"]], "getlazyannotator() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getLazyAnnotator"]], "getordefault() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getOrDefault"]], "getoutputcol() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getOutputCol"]], "getparam() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getParam"]], "getparamvalue() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getParamValue"]], "getter_attrs (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.getter_attrs"]], "hasdefault() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.hasDefault"]], "hasparam() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.hasParam"]], "inputannotatortypes (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputAnnotatorTypes"]], "inputcols (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputCols"]], "inputcolsvalidation() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.inputColsValidation"]], "isdefined() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.isDefined"]], "isset() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.isSet"]], "keepseparators (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.keepSeparators"]], "lazyannotator (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.lazyAnnotator"]], "load() (internaldocumentsplitter class method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.load"]], "maxlength (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.maxLength"]], "metadatafields (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.metaDataFields"]], "name (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.name"]], "optionalinputannotatortypes (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.optionalInputAnnotatorTypes"]], "outputannotatortype (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputAnnotatorType"]], "outputcol (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.outputCol"]], "patternsareregex (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.patternsAreRegex"]], "pretrained() (internaldocumentsplitter static method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.pretrained"]], "read() (internaldocumentsplitter class method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.read"]], "save() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.save"]], "sentenceawareness (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.sentenceAwareness"]], "set() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.set"]], "setcasesensitive() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCaseSensitive"]], "setchunkoverlap() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setChunkOverlap"]], "setchunksize() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setChunkSize"]], "setcustomboundsstrategy() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setCustomBoundsStrategy"]], "setenablesentenceincrement() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setEnableSentenceIncrement"]], "setexplodesplits() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setExplodeSplits"]], "setforceinputtypevalidation() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setForceInputTypeValidation"]], "setinputcols() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setInputCols"]], "setkeepseparators() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setKeepSeparators"]], "setlazyannotator() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setLazyAnnotator"]], "setmaxlength() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMaxLength"]], "setmetadatafields() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setMetaDataFields"]], "setoutputcol() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setOutputCol"]], "setparamvalue() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setParamValue"]], "setparams() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setParams"]], "setpatternsareregex() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setPatternsAreRegex"]], "setsentenceawareness() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSentenceAwareness"]], "setsplitmode() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitMode"]], "setsplitpatterns() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setSplitPatterns"]], "settrimwhitespace() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.setTrimWhitespace"]], "skiplpinputcolsvalidation (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.splitter.internal_document_splitter": [[126, "module-sparknlp_jsl.annotator.splitter.internal_document_splitter"]], "splitmode (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitMode"]], "splitpatterns (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.splitPatterns"]], "transform() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.transform"]], "trimwhitespace (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.trimWhitespace"]], "uid (internaldocumentsplitter attribute)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.uid"]], "write() (internaldocumentsplitter method)": [[126, "sparknlp_jsl.annotator.splitter.internal_document_splitter.InternalDocumentSplitter.write"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "clear() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.clear"]], "clear() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.clear"]], "copy() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.copy"]], "copy() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.copy"]], "explainparam() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.explainParam"]], "explainparam() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.explainParam"]], "explainparams() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.explainParams"]], "explainparams() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.explainParams"]], "extractparammap() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.extractParamMap"]], "extractparammap() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.extractParamMap"]], "fit() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.fit"]], "fitmultiple() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.fitMultiple"]], "getbatchnorm() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getordefault() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOrDefault"]], "getordefault() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.getOrDefault"]], "getoutputact() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getparam() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getParam"]], "getparam() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.getParam"]], "getuserelationdirection() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hasdefault() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hasDefault"]], "hasdefault() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.hasDefault"]], "hasparam() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hasParam"]], "hasparam() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.hasParam"]], "hiddenact (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "isdefined() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isDefined"]], "isdefined() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.isDefined"]], "islicensed (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "isset() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isSet"]], "isset() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.isSet"]], "labelcolumn (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "load() (tfgraphbuilder class method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.load"]], "load() (tfgraphbuildermodel class method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.load"]], "maxsequencelength (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "read() (tfgraphbuilder class method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.read"]], "read() (tfgraphbuildermodel class method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.read"]], "save() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.save"]], "save() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.save"]], "set() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.set"]], "set() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.set"]], "setbatchnorm() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[127, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "transform() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.transform"]], "uid (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.uid"]], "uid (tfgraphbuildermodel attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.uid"]], "userelationdirection (tfgraphbuilder attribute)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "write() (tfgraphbuilder method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.write"]], "write() (tfgraphbuildermodel method)": [[127, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel.write"]], "whiteblacklistparams (class in sparknlp_jsl.annotator.white_black_list_params)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams"]], "blacklist (whiteblacklistparams attribute)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.blackList"]], "casesensitive (whiteblacklistparams attribute)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.caseSensitive"]], "setblacklist() (whiteblacklistparams method)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setBlackList"]], "setcasesensitive() (whiteblacklistparams method)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setCaseSensitive"]], "setdenylist() (whiteblacklistparams method)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setDenyList"]], "setwhitelist() (whiteblacklistparams method)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.setWhiteList"]], "sparknlp_jsl.annotator.white_black_list_params": [[128, "module-sparknlp_jsl.annotator.white_black_list_params"]], "whitelist (whiteblacklistparams attribute)": [[128, "sparknlp_jsl.annotator.white_black_list_params.WhiteBlackListParams.whiteList"]], "sparknlp_jsl.annotator.windowed": [[129, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "clear() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.clear"]], "copy() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.copy"]], "explainparam() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.explainParam"]], "explainparams() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.explainParams"]], "extractparammap() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.extractParamMap"]], "getinputcols() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getInputCols"]], "getlazyannotator() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getLazyAnnotator"]], "getordefault() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getOrDefault"]], "getoutputcol() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getOutputCol"]], "getparam() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getParam"]], "getparamvalue() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getParamValue"]], "getter_attrs (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.getter_attrs"]], "gluestring (windowedparams attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "gluestring (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.glueString"]], "hasdefault() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.hasDefault"]], "hasparam() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.hasParam"]], "inputannotatortypes (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "inputcols (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputCols"]], "inputcolsvalidation() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputColsValidation"]], "isdefined() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.isDefined"]], "isset() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.isSet"]], "lazyannotator (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.lazyAnnotator"]], "load() (windowedsentencemodel class method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.load"]], "optionalinputannotatortypes (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.optionalInputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "outputcol (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputCol"]], "read() (windowedsentencemodel class method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.read"]], "save() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.save"]], "set() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.set"]], "setforceinputtypevalidation() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setForceInputTypeValidation"]], "setgluestring() (windowedparams method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setgluestring() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setGlueString"]], "setinputcols() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setInputCols"]], "setlazyannotator() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setLazyAnnotator"]], "setoutputcol() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setOutputCol"]], "setparamvalue() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setParamValue"]], "setparams() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setParams"]], "setwindowsize() (windowedparams method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "setwindowsize() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.setWindowSize"]], "skiplpinputcolsvalidation (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[130, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "transform() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.transform"]], "uid (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.uid"]], "windowsize (windowedparams attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "windowsize (windowedsentencemodel attribute)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.windowSize"]], "write() (windowedsentencemodel method)": [[130, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.write"]], "sparknlp_jsl.base": [[131, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "clear() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.clear"]], "copy() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.copy"]], "explainparam() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.explainParam"]], "explainparams() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.explainParams"]], "extractparammap() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.extractParamMap"]], "fit() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.fit"]], "fitmultiple() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.fitMultiple"]], "getinputcols() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getInputCols"]], "getlazyannotator() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getLazyAnnotator"]], "getordefault() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getOrDefault"]], "getoutputcol() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getOutputCol"]], "getparam() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getParam"]], "getparamvalue() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getParamValue"]], "getter_attrs (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.getter_attrs"]], "hasdefault() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.hasDefault"]], "hasparam() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.hasParam"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "inputcols (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputCols"]], "inputcolsvalidation() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputColsValidation"]], "isdefined() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.isDefined"]], "isset() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.isSet"]], "lazyannotator (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.lazyAnnotator"]], "load() (annotatorapproachinternal class method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.load"]], "optionalinputannotatortypes (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "outputcol (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputCol"]], "read() (annotatorapproachinternal class method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.read"]], "save() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.save"]], "set() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.set"]], "setforceinputtypevalidation() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setForceInputTypeValidation"]], "setinputcols() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setInputCols"]], "setlazyannotator() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setLazyAnnotator"]], "setoutputcol() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setOutputCol"]], "setparamvalue() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.setParamValue"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[132, "module-sparknlp_jsl.common.annotator_approach_internal"]], "uid (annotatorapproachinternal attribute)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.uid"]], "write() (annotatorapproachinternal method)": [[132, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.write"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "clear() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.clear"]], "copy() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.copy"]], "explainparam() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.explainParam"]], "explainparams() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.explainParams"]], "extractparammap() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.extractParamMap"]], "getinputcols() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getInputCols"]], "getlazyannotator() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getLazyAnnotator"]], "getordefault() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getOrDefault"]], "getoutputcol() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getOutputCol"]], "getparam() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getParam"]], "getparamvalue() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getParamValue"]], "getter_attrs (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.getter_attrs"]], "hasdefault() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.hasDefault"]], "hasparam() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.hasParam"]], "inputannotatortypes (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "inputcols (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputCols"]], "inputcolsvalidation() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputColsValidation"]], "isdefined() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.isDefined"]], "isset() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.isSet"]], "lazyannotator (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.lazyAnnotator"]], "load() (annotatormodelinternal class method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.load"]], "optionalinputannotatortypes (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "outputcol (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputCol"]], "read() (annotatormodelinternal class method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.read"]], "save() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.save"]], "set() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.set"]], "setforceinputtypevalidation() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setForceInputTypeValidation"]], "setinputcols() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setInputCols"]], "setlazyannotator() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setLazyAnnotator"]], "setoutputcol() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setOutputCol"]], "setparamvalue() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParamValue"]], "setparams() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[133, "module-sparknlp_jsl.common.annotator_model_internal"]], "transform() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.transform"]], "uid (annotatormodelinternal attribute)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.uid"]], "write() (annotatormodelinternal method)": [[133, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.write"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "clear() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.clear"]], "copy() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.copy"]], "explainparam() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.explainParam"]], "explainparams() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.explainParams"]], "extractparammap() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.extractParamMap"]], "getinputcols() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getInputCols"]], "getlazyannotator() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getLazyAnnotator"]], "getordefault() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getOrDefault"]], "getoutputcol() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getOutputCol"]], "getparam() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.getParam"]], "hasdefault() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.hasDefault"]], "hasparam() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.hasParam"]], "inputannotatortypes (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputAnnotatorTypes"]], "inputcols (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputCols"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "isdefined() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.isDefined"]], "isset() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.isSet"]], "lazyannotator (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.lazyAnnotator"]], "optionalinputannotatortypes (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.optionalInputAnnotatorTypes"]], "outputannotatortype (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.outputAnnotatorType"]], "outputcol (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.outputCol"]], "set() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.set"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "setinputcols() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setInputCols"]], "setlazyannotator() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setLazyAnnotator"]], "setoutputcol() (annotatorpropertiesinternal method)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setOutputCol"]], "sparknlp_jsl.common.annotator_properties_internal": [[134, "module-sparknlp_jsl.common.annotator_properties_internal"]], "uid (annotatorpropertiesinternal attribute)": [[134, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.uid"]], "sparknlp_jsl.common": [[135, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[136, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[136, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "instance (compatibility attribute)": [[136, "sparknlp_jsl.compatibility.Compatibility.instance"]], "showversion() (compatibility method)": [[136, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "spark (compatibility attribute)": [[136, "sparknlp_jsl.compatibility.Compatibility.spark"]], "sparknlp_jsl.compatibility": [[136, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "clear() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.clear"]], "copy() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.copy"]], "explainparam() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.explainParam"]], "explainparams() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.explainParams"]], "extractparammap() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.extractParamMap"]], "f (customtransformer attribute)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "getinputcol() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.getInputCol"]], "getordefault() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.getOrDefault"]], "getoutputcol() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.getOutputCol"]], "getparam() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.getParam"]], "hasdefault() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.hasDefault"]], "hasparam() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.hasParam"]], "inputcol (customtransformer attribute)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.inputCol"]], "isdefined() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.isDefined"]], "isset() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.isSet"]], "load() (customtransformer class method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.load"]], "outputcol (customtransformer attribute)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.outputCol"]], "read() (customtransformer class method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.read"]], "save() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.save"]], "set() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.set"]], "setinputcol() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[137, "module-sparknlp_jsl.custom_transformer"]], "transform() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.transform"]], "uid (customtransformer attribute)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.uid"]], "write() (customtransformer method)": [[137, "sparknlp_jsl.custom_transformer.CustomTransformer.write"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier"]], "age_group_obfuscation (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.age_group_obfuscation"]], "age_ranges (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.age_ranges"]], "custom_pipeline (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.custom_pipeline"]], "date_shift_column_name (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.date_shift_column_name"]], "date_tag (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.date_tag"]], "deid_with_custom_pipeline() (deidentifier method)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "document (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.document"]], "documenthashcoder_col_name (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.documenthashcoder_col_name"]], "domain (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.domain"]], "fields (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.fields"]], "fixed_mask_length (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.fixed_mask_length"]], "id_column_name (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.id_column_name"]], "input_file_path (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.input_file_path"]], "language (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.language"]], "masking_policy (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.masking_policy"]], "multi_mode_file_path (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.multi_mode_file_path"]], "ner_chunk (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.ner_chunk"]], "number_of_days (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.number_of_days"]], "obfuscate_date (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_date"]], "obfuscate_ref_file_path (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_ref_file_path"]], "obfuscate_ref_source (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.obfuscate_ref_source"]], "output_file_path (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.output_file_path"]], "region (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.region"]], "sentence (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.sentence"]], "separator (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.separator"]], "shift_days (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.shift_days"]], "spark (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.spark"]], "sparknlp_jsl.deidentification_module": [[138, "module-sparknlp_jsl.deidentification_module"]], "token (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.token"]], "unnormalized_date (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.unnormalized_date"]], "unnormalized_mode (deidentifier attribute)": [[138, "sparknlp_jsl.deidentification_module.Deidentifier.unnormalized_mode"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[139, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[139, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[139, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation"]], "apply() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.apply"]], "apply() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.apply"]], "apply() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.apply"]], "apply() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.apply"]], "apply() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.apply"]], "apply() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.apply"]], "computeaccuracyannotator() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "getdataframe() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.getDataFrame"]], "getdataframe() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.getDataFrame"]], "getdataframe() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.getDataFrame"]], "getdataframe() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.getDataFrame"]], "getdataframe() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.getDataFrame"]], "getdataframe() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.getDataFrame"]], "java_obj (nercrfevaluation attribute)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.java_obj"]], "java_obj (nerdlevaluation attribute)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.java_obj"]], "java_obj (nerdlmetrics attribute)": [[139, "sparknlp_jsl.eval.NerDLMetrics.java_obj"]], "java_obj (norvigspellevaluation attribute)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.java_obj"]], "java_obj (posevaluation attribute)": [[139, "sparknlp_jsl.eval.POSEvaluation.java_obj"]], "java_obj (symspellevaluation attribute)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.java_obj"]], "new_java_array() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array"]], "new_java_array() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array"]], "new_java_array() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.new_java_array"]], "new_java_array() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array"]], "new_java_array() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.new_java_array"]], "new_java_array() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array"]], "new_java_array_integer() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array_integer"]], "new_java_array_integer() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array_integer"]], "new_java_array_integer() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.new_java_array_integer"]], "new_java_array_integer() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array_integer"]], "new_java_array_integer() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.new_java_array_integer"]], "new_java_array_integer() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array_integer"]], "new_java_array_string() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_array_string"]], "new_java_array_string() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.new_java_array_string"]], "new_java_array_string() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.new_java_array_string"]], "new_java_array_string() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_array_string"]], "new_java_array_string() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.new_java_array_string"]], "new_java_array_string() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_array_string"]], "new_java_obj() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.new_java_obj"]], "new_java_obj() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.new_java_obj"]], "new_java_obj() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.new_java_obj"]], "new_java_obj() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.new_java_obj"]], "new_java_obj() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.new_java_obj"]], "new_java_obj() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.new_java_obj"]], "sc (nercrfevaluation attribute)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.sc"]], "sc (nerdlevaluation attribute)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.sc"]], "sc (nerdlmetrics attribute)": [[139, "sparknlp_jsl.eval.NerDLMetrics.sc"]], "sc (norvigspellevaluation attribute)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.sc"]], "sc (posevaluation attribute)": [[139, "sparknlp_jsl.eval.POSEvaluation.sc"]], "sc (symspellevaluation attribute)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.sc"]], "spark_version() (nercrfevaluation method)": [[139, "sparknlp_jsl.eval.NerCrfEvaluation.spark_version"]], "spark_version() (nerdlevaluation method)": [[139, "sparknlp_jsl.eval.NerDLEvaluation.spark_version"]], "spark_version() (nerdlmetrics method)": [[139, "sparknlp_jsl.eval.NerDLMetrics.spark_version"]], "spark_version() (norvigspellevaluation method)": [[139, "sparknlp_jsl.eval.NorvigSpellEvaluation.spark_version"]], "spark_version() (posevaluation method)": [[139, "sparknlp_jsl.eval.POSEvaluation.spark_version"]], "spark_version() (symspellevaluation method)": [[139, "sparknlp_jsl.eval.SymSpellEvaluation.spark_version"]], "sparknlp_jsl.eval": [[139, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[140, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[140, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[141, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[142, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[142, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "clear() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.clear"]], "copy() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.copy"]], "dateshiftcolumn (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.dateShiftColumn"]], "explainparam() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.explainParam"]], "explainparams() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.explainParams"]], "extractparammap() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.extractParamMap"]], "getinputcols() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getInputCols"]], "getlazyannotator() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getLazyAnnotator"]], "getordefault() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getOrDefault"]], "getoutputcol() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getOutputCol"]], "getparam() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getParam"]], "getparamvalue() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getParamValue"]], "getter_attrs (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.getter_attrs"]], "hasdefault() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.hasDefault"]], "hasparam() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.hasParam"]], "inputannotatortypes (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputAnnotatorTypes"]], "inputcols (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputCols"]], "inputcolsvalidation() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.inputColsValidation"]], "isdefined() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.isDefined"]], "isset() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.isSet"]], "lazyannotator (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.lazyAnnotator"]], "load() (financedocumenthashcoder class method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.load"]], "name (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.name"]], "newdateshift (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.outputAnnotatorType"]], "outputcol (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.outputCol"]], "patientidcolumn (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.patientIdColumn"]], "rangedays (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.rangeDays"]], "read() (financedocumenthashcoder class method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.read"]], "save() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.save"]], "seed (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.seed"]], "set() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.set"]], "setdateshiftcolumn() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setDateShiftColumn"]], "setidcolumn() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "setinputcols() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setInputCols"]], "setlazyannotator() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setNewDateShift"]], "setoutputcol() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setOutputCol"]], "setparamvalue() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setParamValue"]], "setparams() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setParams"]], "setpatientidcolumn() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setPatientIdColumn"]], "setrangedays() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setRangeDays"]], "setseed() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setSeed"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[143, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "transform() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.transform"]], "uid (financedocumenthashcoder attribute)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.uid"]], "write() (financedocumenthashcoder method)": [[143, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.write"]], "sparknlp_jsl.finance.chunk_classification.deid": [[144, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[145, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[146, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[146, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[147, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[147, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[148, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[149, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[149, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[150, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[151, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[152, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[152, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[153, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[153, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "casesensitive (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.caseSensitive"]], "clear() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.clear"]], "coalescesentences (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.coalesceSentences"]], "configprotobytes (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.configProtoBytes"]], "copy() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.copy"]], "explainparam() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.explainParam"]], "explainparams() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.explainParams"]], "extractparammap() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getCaseSensitive"]], "getclasses() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getClasses"]], "getinputcols() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getInputCols"]], "getlazyannotator() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getOrDefault"]], "getoutputcol() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getOutputCol"]], "getparam() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getParam"]], "getparamvalue() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getParamValue"]], "getter_attrs (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.getter_attrs"]], "hasdefault() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.hasDefault"]], "hasparam() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.hasParam"]], "inputannotatortypes (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.inputColsValidation"]], "isdefined() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.isDefined"]], "isset() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.isSet"]], "lazyannotator (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.lazyAnnotator"]], "load() (financebertforsequenceclassification class method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.load"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.maxSentenceLength"]], "name (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "optionalinputannotatortypes (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.outputAnnotatorType"]], "outputcol (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.outputCol"]], "pretrained() (financebertforsequenceclassification static method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "read() (financebertforsequenceclassification class method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.read"]], "save() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.save"]], "set() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.set"]], "setcasesensitive() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setInputCols"]], "setlazyannotator() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setOutputCol"]], "setparamvalue() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setParamValue"]], "setparams() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[155, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "transform() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.transform"]], "uid (financebertforsequenceclassification attribute)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.uid"]], "write() (financebertforsequenceclassification method)": [[155, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.write"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "batchsize (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.batchSize"]], "classes (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.classes"]], "clear() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.clear"]], "clear() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.clear"]], "configprotobytes (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.configProtoBytes"]], "configprotobytes (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.configProtoBytes"]], "copy() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.copy"]], "copy() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.copy"]], "dropout (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.dropout"]], "enableoutputlogs (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.enableOutputLogs"]], "engine (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.engine"]], "evaluationlogextended (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.evaluationLogExtended"]], "explainparam() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.explainParam"]], "explainparam() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.explainParam"]], "explainparams() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.explainParams"]], "explainparams() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.explainParams"]], "extractparammap() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.extractParamMap"]], "extractparammap() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.extractParamMap"]], "fit() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.fit"]], "fitmultiple() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.fitMultiple"]], "getengine() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getEngine"]], "getinputcols() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getInputCols"]], "getinputcols() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getInputCols"]], "getlazyannotator() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getLazyAnnotator"]], "getlazyannotator() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getLazyAnnotator"]], "getordefault() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getOrDefault"]], "getordefault() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getOrDefault"]], "getoutputcol() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getOutputCol"]], "getoutputcol() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getOutputCol"]], "getparam() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getParam"]], "getparam() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getParam"]], "getparamvalue() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getParamValue"]], "getparamvalue() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getParamValue"]], "getstorageref() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getStorageRef"]], "getter_attrs (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.getter_attrs"]], "getter_attrs (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.getter_attrs"]], "hasdefault() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.hasDefault"]], "hasdefault() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.hasDefault"]], "hasparam() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.hasParam"]], "hasparam() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.hasParam"]], "inputannotatortypes (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputAnnotatorTypes"]], "inputcols (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputCols"]], "inputcols (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputCols"]], "inputcolsvalidation() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.inputColsValidation"]], "inputcolsvalidation() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.inputColsValidation"]], "isdefined() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.isDefined"]], "isdefined() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.isDefined"]], "isset() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.isSet"]], "isset() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.isSet"]], "labelcolumn (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.labelColumn"]], "lazyannotator (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.lazyAnnotator"]], "lazyannotator (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.lazyAnnotator"]], "load() (financeclassifierdlapproach class method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.load"]], "load() (financeclassifierdlmodel class method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.load"]], "lr (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.lr"]], "maxepochs (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.maxEpochs"]], "name (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "optionalinputannotatortypes (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.outputAnnotatorType"]], "outputcol (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputCol"]], "outputcol (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.outputCol"]], "outputlogspath (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.outputLogsPath"]], "pretrained() (financeclassifierdlmodel static method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "randomseed (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.randomSeed"]], "read() (financeclassifierdlapproach class method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.read"]], "read() (financeclassifierdlmodel class method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.read"]], "save() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.save"]], "save() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.save"]], "set() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.set"]], "set() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.set"]], "setbatchsize() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setBatchSize"]], "setconfigprotobytes() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setConfigProtoBytes"]], "setdropout() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setDropout"]], "setenableoutputlogs() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setEnableOutputLogs"]], "setevaluationlogextended() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setEvaluationLogExtended"]], "setinputcols() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setInputCols"]], "setinputcols() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setInputCols"]], "setlabelcolumn() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLabelColumn"]], "setlazyannotator() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLazyAnnotator"]], "setlazyannotator() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setLazyAnnotator"]], "setlr() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setLr"]], "setmaxepochs() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setMaxEpochs"]], "setoutputcol() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setOutputCol"]], "setoutputcol() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setOutputCol"]], "setoutputlogspath() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setOutputLogsPath"]], "setparamvalue() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setParamValue"]], "setparamvalue() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setParamValue"]], "setparams() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setParams"]], "setrandomseed() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setRandomSeed"]], "setstorageref() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.setStorageRef"]], "settestdataset() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setTestDataset"]], "setvalidationsplit() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setValidationSplit"]], "setverbose() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.setVerbose"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[156, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "storageref (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.storageRef"]], "testdataset (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.testDataset"]], "transform() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.transform"]], "uid (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.uid"]], "uid (financeclassifierdlmodel attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.uid"]], "validationsplit (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.validationSplit"]], "verbose (financeclassifierdlapproach attribute)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.verbose"]], "write() (financeclassifierdlapproach method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach.write"]], "write() (financeclassifierdlmodel method)": [[156, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.write"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "classificationmodel (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.classificationModelPath"]], "clear() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.clear"]], "clear() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.clear"]], "copy() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.copy"]], "copy() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.copy"]], "explainparam() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.explainParam"]], "explainparam() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.explainParam"]], "explainparams() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.explainParams"]], "explainparams() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.explainParams"]], "extractparammap() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.extractParamMap"]], "fit() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fit"]], "fitintercept (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getInputCols"]], "getinputcols() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getOrDefault"]], "getordefault() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getOutputCol"]], "getparam() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getParam"]], "getparam() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getParam"]], "getparamvalue() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getParamValue"]], "getter_attrs (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.getter_attrs"]], "hasdefault() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.hasDefault"]], "hasdefault() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.hasDefault"]], "hasparam() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.hasParam"]], "hasparam() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.hasParam"]], "inputannotatortypes (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputCols"]], "inputcols (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.inputColsValidation"]], "isdefined() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.isDefined"]], "isdefined() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.isDefined"]], "isset() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.isSet"]], "isset() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.isSet"]], "labelcol (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.labelCol"]], "labels (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.labels"]], "labels (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.labels"]], "lazyannotator (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.lazyAnnotator"]], "load() (financedocumentmlclassifierapproach class method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.load"]], "load() (financedocumentmlclassifiermodel class method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.load"]], "maxiter (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.maxIter"]], "maxtokenngram (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.maxTokenNgram"]], "mergechunks (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.mergeChunks"]], "mergechunks (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.mergeChunks"]], "mintokenngram (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.minTokenNgram"]], "name (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "optionalinputannotatortypes (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.outputCol"]], "outputcol (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.outputCol"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "read() (financedocumentmlclassifierapproach class method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.read"]], "read() (financedocumentmlclassifiermodel class method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.read"]], "save() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.save"]], "save() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.save"]], "set() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.set"]], "set() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.set"]], "setclassificationmodel() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setInputCols"]], "setinputcols() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setInputCols"]], "setlabelcol() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLabelCol"]], "setlabels() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLabels"]], "setlabels() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setLabels"]], "setlazyannotator() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setMergeChunks"]], "setmintokenngram() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setParamValue"]], "setparams() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setParams"]], "settol() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[157, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "tol (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.tol"]], "transform() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.transform"]], "uid (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.uid"]], "uid (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.uid"]], "vectorizationmodel (financedocumentmlclassifiermodel attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (financedocumentmlclassifierapproach attribute)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.vectorizationModelPath"]], "write() (financedocumentmlclassifierapproach method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach.write"]], "write() (financedocumentmlclassifiermodel method)": [[157, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.write"]], "financefewshotclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach"]], "financefewshotclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel"]], "batchsize (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.batchSize"]], "classes (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.classes"]], "clear() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.clear"]], "clear() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.clear"]], "copy() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.copy"]], "copy() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.copy"]], "datasetinfo (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.datasetInfo"]], "datasetinfo (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.datasetInfo"]], "doexceptionhandling (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.doExceptionHandling"]], "dropout (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.dropout"]], "engine (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.engine"]], "epochsn (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.epochsN"]], "explainparam() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.explainParam"]], "explainparam() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.explainParam"]], "explainparams() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.explainParams"]], "explainparams() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.explainParams"]], "extractparammap() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.extractParamMap"]], "extractparammap() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.extractParamMap"]], "featurescaling (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.featureScaling"]], "featurescaling (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.featureScaling"]], "fit() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fit"]], "fitmultiple() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fitMultiple"]], "fiximbalance (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.fixImbalance"]], "getengine() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getEngine"]], "getinputcols() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getInputCols"]], "getinputcols() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getInputCols"]], "getlazyannotator() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getOrDefault"]], "getordefault() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getOrDefault"]], "getoutputcol() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getOutputCol"]], "getoutputcol() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getOutputCol"]], "getparam() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getParam"]], "getparam() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getParam"]], "getparamvalue() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getParamValue"]], "getparamvalue() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getParamValue"]], "getter_attrs (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.getter_attrs"]], "getter_attrs (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.getter_attrs"]], "hasdefault() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.hasDefault"]], "hasdefault() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.hasDefault"]], "hasparam() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.hasParam"]], "hasparam() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.hasParam"]], "inputannotatortypes (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputCols"]], "inputcols (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.inputColsValidation"]], "isdefined() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.isDefined"]], "isdefined() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.isDefined"]], "isset() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.isSet"]], "isset() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.isSet"]], "labelcolumn (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.labelColumn"]], "lazyannotator (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.lazyAnnotator"]], "learningrate (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.learningRate"]], "load() (financefewshotclassifierapproach class method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.load"]], "load() (financefewshotclassifiermodel class method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.load"]], "modelfile (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.modelFile"]], "multiclass (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.multiClass"]], "multiclass (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.multiClass"]], "name (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.name"]], "name (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.name"]], "optionalinputannotatortypes (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.outputAnnotatorType"]], "outputcol (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputCol"]], "outputcol (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.outputCol"]], "outputlogspath (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.outputLogsPath"]], "pretrained() (financefewshotclassifiermodel static method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.pretrained"]], "read() (financefewshotclassifierapproach class method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.read"]], "read() (financefewshotclassifiermodel class method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.read"]], "save() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.save"]], "save() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.save"]], "set() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.set"]], "set() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.set"]], "setbatchsize() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setDropout"]], "setepochsnumber() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setInputCols"]], "setinputcols() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setInputCols"]], "setlabelcol() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setLearningRate"]], "setmodelfile() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setModelFile"]], "setmulticlass() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setMultiClass"]], "setmulticlass() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setMultiClass"]], "setoutputcol() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setOutputCol"]], "setoutputcol() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setParamValue"]], "setparamvalue() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setParamValue"]], "setparams() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.setParams"]], "setvalidationsplit() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier": [[158, "module-sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier"]], "transform() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.transform"]], "uid (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.uid"]], "uid (financefewshotclassifiermodel attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.uid"]], "validationsplit (financefewshotclassifierapproach attribute)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.validationSplit"]], "write() (financefewshotclassifierapproach method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierApproach.write"]], "write() (financefewshotclassifiermodel method)": [[158, "sparknlp_jsl.finance.sequence_classification.finance_few_shot_classifier.FinanceFewShotClassifierModel.write"]], "sparknlp_jsl.finance.sequence_classification": [[159, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "batchsize (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.batchSize"]], "clear() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.clear"]], "configprotobytes (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.configProtoBytes"]], "copy() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.copy"]], "dosample (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.doSample"]], "explainparam() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.explainParam"]], "explainparams() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.explainParams"]], "extractparammap() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.extractParamMap"]], "getbatchsize() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getBatchSize"]], "getinputcols() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getInputCols"]], "getlazyannotator() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getLazyAnnotator"]], "getordefault() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getOrDefault"]], "getoutputcol() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getOutputCol"]], "getparam() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getParam"]], "getparamvalue() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getParamValue"]], "getter_attrs (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.getter_attrs"]], "hasdefault() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.hasDefault"]], "hasparam() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.hasParam"]], "ignoretokenids (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputAnnotatorTypes"]], "inputcols (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputCols"]], "inputcolsvalidation() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.inputColsValidation"]], "isdefined() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.isDefined"]], "isset() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.isSet"]], "lazyannotator (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.lazyAnnotator"]], "load() (financeencoderdecoder class method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.load"]], "maxnewtokens (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.maxNewTokens"]], "maxtextlength (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.maxTextLength"]], "mlframeworktype (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.mlFrameworkType"]], "name (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "norepeatngramsize (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.outputAnnotatorType"]], "outputcol (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.outputCol"]], "randomseed (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.randomSeed"]], "read() (financeencoderdecoder class method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.read"]], "refinechunksize (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineChunkSize"]], "refinemaxattempts (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineMaxAttempts"]], "refinesummary (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineSummary"]], "refinesummarytargetlength (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.refineSummaryTargetLength"]], "save() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.save"]], "set() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.set"]], "setbatchsize() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setBatchSize"]], "setconfigprotobytes() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setConfigProtoBytes"]], "setdosample() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setInputCols"]], "setlazyannotator() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setOutputCol"]], "setparamvalue() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setParamValue"]], "setparams() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setParams"]], "setrandomseed() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setStopAtEos"]], "settopk() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[160, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "stopateos (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.stopAtEos"]], "task (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.task"]], "topk (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.topK"]], "transform() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.transform"]], "uid (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.uid"]], "usecache (financeencoderdecoder attribute)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.useCache"]], "write() (financeencoderdecoder method)": [[160, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.write"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "batchsize (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.batchSize"]], "clear() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.clear"]], "configprotobytes (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.configProtoBytes"]], "copy() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.copy"]], "customprompt (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.customPrompt"]], "dosample (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.doSample"]], "explainparam() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.explainParam"]], "explainparams() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.explainParams"]], "extractparammap() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.extractParamMap"]], "getbatchsize() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getBatchSize"]], "getinputcols() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getInputCols"]], "getlazyannotator() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getLazyAnnotator"]], "getordefault() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getOrDefault"]], "getoutputcol() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getOutputCol"]], "getparam() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getParam"]], "getparamvalue() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getParamValue"]], "getquestiontypes() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getQuestionTypes"]], "getter_attrs (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.getter_attrs"]], "hasdefault() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.hasDefault"]], "hasparam() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.hasParam"]], "ignoretokenids (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputAnnotatorTypes"]], "inputcols (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputCols"]], "inputcolsvalidation() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.inputColsValidation"]], "isdefined() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.isDefined"]], "isset() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.isSet"]], "lazyannotator (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.lazyAnnotator"]], "load() (financequestionanswering class method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.load"]], "loadmedicaltextgenerator() (financequestionanswering static method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (financequestionanswering static method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "maxcontextlength (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.maxContextLength"]], "maxnewtokens (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.maxNewTokens"]], "mlframeworktype (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.mlFrameworkType"]], "modeltype (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.modelType"]], "name (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "norepeatngramsize (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.outputAnnotatorType"]], "outputcol (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.outputCol"]], "pretrained() (financequestionanswering static method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "questiontype (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.questionType"]], "read() (financequestionanswering class method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.read"]], "save() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.save"]], "set() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.set"]], "setbatchsize() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setBatchSize"]], "setconfigprotobytes() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setCustomPrompt"]], "setdosample() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setInputCols"]], "setlazyannotator() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setOutputCol"]], "setparamvalue() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setParamValue"]], "setparams() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setParams"]], "setquestionanswerterminals() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setQuestionType"]], "setrandomseed() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setRandomSeed"]], "settopk() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setTopK"]], "setusecache() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[161, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "topk (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.topK"]], "transform() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.transform"]], "uid (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.uid"]], "usecache (financequestionanswering attribute)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.useCache"]], "write() (financequestionanswering method)": [[161, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.write"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "batchsize (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.batchSize"]], "clear() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.clear"]], "configprotobytes (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.configProtoBytes"]], "copy() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.copy"]], "dosample (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.doSample"]], "explainparam() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.explainParam"]], "explainparams() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.explainParams"]], "extractparammap() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.extractParamMap"]], "getbatchsize() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getBatchSize"]], "getinputcols() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getInputCols"]], "getlazyannotator() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getLazyAnnotator"]], "getordefault() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getOrDefault"]], "getoutputcol() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getOutputCol"]], "getparam() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getParam"]], "getparamvalue() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getParamValue"]], "getter_attrs (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.getter_attrs"]], "hasdefault() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.hasDefault"]], "hasparam() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.hasParam"]], "ignoretokenids (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.ignoreTokenIds"]], "inputannotatortypes (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputAnnotatorTypes"]], "inputcols (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputCols"]], "inputcolsvalidation() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.inputColsValidation"]], "isdefined() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.isDefined"]], "isset() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.isSet"]], "lazyannotator (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.lazyAnnotator"]], "load() (financesummarizer class method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.load"]], "loadsavedmodel() (financesummarizer static method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "maxnewtokens (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.maxNewTokens"]], "maxtextlength (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.maxTextLength"]], "mlframeworktype (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.mlFrameworkType"]], "name (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "norepeatngramsize (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.outputAnnotatorType"]], "outputcol (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.outputCol"]], "pretrained() (financesummarizer static method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "randomseed (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.randomSeed"]], "read() (financesummarizer class method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.read"]], "refinechunksize (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineChunkSize"]], "refinemaxattempts (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineMaxAttempts"]], "refinesummary (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineSummary"]], "refinesummarytargetlength (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.refineSummaryTargetLength"]], "save() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.save"]], "set() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.set"]], "setbatchsize() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setBatchSize"]], "setconfigprotobytes() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setConfigProtoBytes"]], "setdosample() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setDoSample"]], "setforceinputtypevalidation() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setIgnoreTokenIds"]], "setinputcols() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setInputCols"]], "setlazyannotator() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setMaxNewTokens"]], "setmaxtextlength() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setOutputCol"]], "setparamvalue() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setParamValue"]], "setparams() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setParams"]], "setrandomseed() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRandomSeed"]], "setrefinechunksize() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setStopAtEos"]], "settopk() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.setTopK"]], "skiplpinputcolsvalidation (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[162, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "stopateos (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.stopAtEos"]], "task (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.task"]], "topk (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.topK"]], "transform() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.transform"]], "uid (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.uid"]], "usecache (financesummarizer attribute)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.useCache"]], "write() (financesummarizer method)": [[162, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.write"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "batchsize (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.batchSize"]], "clear() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.clear"]], "configprotobytes (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.configProtoBytes"]], "copy() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.copy"]], "customprompt (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.customPrompt"]], "dosample (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.doSample"]], "explainparam() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.explainParam"]], "explainparams() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.explainParams"]], "extractparammap() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.extractParamMap"]], "getadditionaltokens() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getAdditionalTokens"]], "getbatchsize() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getBatchSize"]], "getinputcols() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getInputCols"]], "getlazyannotator() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getLazyAnnotator"]], "getordefault() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getOrDefault"]], "getoutputcol() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getOutputCol"]], "getparam() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getParam"]], "getparamvalue() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getParamValue"]], "getter_attrs (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.getter_attrs"]], "hasdefault() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.hasDefault"]], "hasparam() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.hasParam"]], "ignoretokenids (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.ignoreTokenIds"]], "inputannotatortypes (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputAnnotatorTypes"]], "inputcols (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputCols"]], "inputcolsvalidation() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.inputColsValidation"]], "isdefined() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.isDefined"]], "isset() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.isSet"]], "lazyannotator (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.lazyAnnotator"]], "load() (financetextgenerator class method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.load"]], "loadsavedmodel() (financetextgenerator static method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "maxcontextlength (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxContextLength"]], "maxnewtokens (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxNewTokens"]], "maxtextlength (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.maxTextLength"]], "mlframeworktype (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.mlFrameworkType"]], "modeltype (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.modelType"]], "name (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "norepeatngramsize (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.outputAnnotatorType"]], "outputcol (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.outputCol"]], "pretrained() (financetextgenerator static method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "read() (financetextgenerator class method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.read"]], "save() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.save"]], "set() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.set"]], "setadditionaltokens() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setAdditionalTokens"]], "setbatchsize() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setBatchSize"]], "setconfigprotobytes() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setCustomPrompt"]], "setdosample() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setDoSample"]], "setforceinputtypevalidation() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setIgnoreTokenIds"]], "setinputcols() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setInputCols"]], "setlazyannotator() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setOutputCol"]], "setparamvalue() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setParamValue"]], "setparams() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setParams"]], "setrandomseed() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setRandomSeed"]], "setstopateos() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setStopAtEos"]], "settopk() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setTopK"]], "setusecache() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[163, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "stopateos (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.stopAtEos"]], "topk (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.topK"]], "transform() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.transform"]], "uid (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.uid"]], "usecache (financetextgenerator attribute)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.useCache"]], "write() (financetextgenerator method)": [[163, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.write"]], "sparknlp_jsl.finance.sequence_generation": [[164, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "clear() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.clear"]], "copy() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.copy"]], "entities1 (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.entities1"]], "entities2 (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.entities2"]], "explainparam() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.explainParam"]], "explainparams() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.explainParams"]], "extractparammap() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.extractParamMap"]], "getinputcols() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getInputCols"]], "getlazyannotator() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getLazyAnnotator"]], "getordefault() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getOrDefault"]], "getoutputcol() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getOutputCol"]], "getparam() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getParam"]], "getparamvalue() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getParamValue"]], "getter_attrs (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.getter_attrs"]], "hasdefault() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.hasDefault"]], "hasparam() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.hasParam"]], "inputannotatortypes (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputCols"]], "inputcolsvalidation() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.inputColsValidation"]], "isdefined() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.isDefined"]], "isset() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.isSet"]], "lazyannotator (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.lazyAnnotator"]], "load() (financenerquestiongenerator class method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.load"]], "name (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.name"]], "optionalinputannotatortypes (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.outputAnnotatorType"]], "outputcol (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.outputCol"]], "questionmark (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.questionMark"]], "questionpronoun (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.questionPronoun"]], "read() (financenerquestiongenerator class method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.read"]], "save() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.save"]], "set() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.set"]], "setentities1() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setEntities1"]], "setentities2() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setInputCols"]], "setlazyannotator() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setOutputCol"]], "setparamvalue() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setParamValue"]], "setparams() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setParams"]], "setquestionmark() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[165, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "strategytype (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.strategyType"]], "transform() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.transform"]], "uid (financenerquestiongenerator attribute)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.uid"]], "write() (financenerquestiongenerator method)": [[165, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator.write"]], "sparknlp_jsl.finance.token_classification": [[166, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "casesensitive (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.caseSensitive"]], "clear() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.clear"]], "configprotobytes (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.configProtoBytes"]], "copy() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.copy"]], "explainparam() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.explainParam"]], "explainparams() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.explainParams"]], "extractparammap() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.extractParamMap"]], "getcasesensitive() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getCaseSensitive"]], "getclasses() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getClasses"]], "getinputcols() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getInputCols"]], "getlazyannotator() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getLazyAnnotator"]], "getordefault() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getOrDefault"]], "getoutputcol() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getOutputCol"]], "getparam() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getParam"]], "getparamvalue() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getParamValue"]], "getter_attrs (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.getter_attrs"]], "hasdefault() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.hasDefault"]], "hasparam() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.hasParam"]], "inputannotatortypes (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputAnnotatorTypes"]], "inputcols (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputCols"]], "inputcolsvalidation() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.inputColsValidation"]], "isdefined() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.isDefined"]], "isset() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.isSet"]], "lazyannotator (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.lazyAnnotator"]], "load() (financebertfortokenclassification class method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.load"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "maxsentencelength (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.maxSentenceLength"]], "name (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "optionalinputannotatortypes (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.outputAnnotatorType"]], "outputcol (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.outputCol"]], "pretrained() (financebertfortokenclassification static method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "read() (financebertfortokenclassification class method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.read"]], "save() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.save"]], "set() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.set"]], "setcasesensitive() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setCaseSensitive"]], "setconfigprotobytes() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setForceInputTypeValidation"]], "setinputcols() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setInputCols"]], "setlazyannotator() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setLazyAnnotator"]], "setmaxsentencelength() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setMaxSentenceLength"]], "setoutputcol() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setOutputCol"]], "setparamvalue() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setParamValue"]], "setparams() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.setParams"]], "skiplpinputcolsvalidation (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.skipLPInputColsValidation"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[167, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "transform() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.transform"]], "uid (financebertfortokenclassification attribute)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.uid"]], "write() (financebertfortokenclassification method)": [[167, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.write"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "batchsize (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.batchSize"]], "classes (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.classes"]], "clear() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.clear"]], "clear() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.clear"]], "configprotobytes (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.configProtoBytes"]], "configprotobytes (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.configProtoBytes"]], "copy() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.copy"]], "copy() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.copy"]], "datasetinfo (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.datasetInfo"]], "datasetinfo (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.datasetInfo"]], "doexceptionhandling (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.doExceptionHandling"]], "dropout (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.dropout"]], "earlystoppingcriterion (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.enableOutputLogs"]], "engine (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.engine"]], "entities (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.entities"]], "evaluationlogextended (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.evaluationLogExtended"]], "explainparam() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.explainParam"]], "explainparam() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.explainParam"]], "explainparams() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.explainParams"]], "explainparams() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.explainParams"]], "extractparammap() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.extractParamMap"]], "extractparammap() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.extractParamMap"]], "fit() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.fit"]], "fitmultiple() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.fitMultiple"]], "getclasses() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getClasses"]], "getengine() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getEngine"]], "getinputcols() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getInputCols"]], "getinputcols() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getInputCols"]], "getlabelcolumn() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getLabelColumn"]], "getlazyannotator() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getLazyAnnotator"]], "getlazyannotator() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getLazyAnnotator"]], "getordefault() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getOrDefault"]], "getordefault() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getOrDefault"]], "getoutputcol() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getOutputCol"]], "getoutputcol() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getOutputCol"]], "getparam() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getParam"]], "getparam() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getParam"]], "getparamvalue() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getParamValue"]], "getparamvalue() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getParamValue"]], "getstorageref() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getStorageRef"]], "gettrainingclassdistribution() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getTrainingClassDistribution"]], "getter_attrs (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.getter_attrs"]], "getter_attrs (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.getter_attrs"]], "graphfile (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.graphFile"]], "graphfolder (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.graphFolder"]], "hasdefault() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.hasDefault"]], "hasdefault() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.hasDefault"]], "hasparam() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.hasParam"]], "hasparam() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.hasParam"]], "includeallconfidencescores (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.includeAllConfidenceScores"]], "includeconfidence (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.includeConfidence"]], "includeconfidence (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.includeConfidence"]], "inferencebatchsize (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inferenceBatchSize"]], "inputannotatortypes (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputAnnotatorTypes"]], "inputcols (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputCols"]], "inputcols (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputCols"]], "inputcolsvalidation() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.inputColsValidation"]], "inputcolsvalidation() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.inputColsValidation"]], "isdefined() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.isDefined"]], "isdefined() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.isDefined"]], "isset() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.isSet"]], "isset() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.isSet"]], "labelcasing (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.labelCasing"]], "labelcolumn (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.labelColumn"]], "lazyannotator (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.lazyAnnotator"]], "lazyannotator (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.lazyAnnotator"]], "load() (financenerapproach class method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.load"]], "load() (financenermodel class method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.load"]], "loadsavedmodel() (financenermodel static method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "logprefix (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.logPrefix"]], "lr (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.lr"]], "maxepochs (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.maxEpochs"]], "minepochs (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.minEpochs"]], "name (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "optionalinputannotatortypes (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputAnnotatorType"]], "outputannotatortype (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.outputAnnotatorType"]], "outputcol (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputCol"]], "outputcol (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.outputCol"]], "outputlogspath (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.outputLogsPath"]], "overrideexistingtags (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.overrideExistingTags"]], "po (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.po"]], "pretrained() (financenermodel static method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "pretrainedmodelpath (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.pretrainedModelPath"]], "randomseed (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.randomSeed"]], "randomvalidationsplitperepoch (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.randomValidationSplitPerEpoch"]], "read() (financenerapproach class method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.read"]], "read() (financenermodel class method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.read"]], "save() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.save"]], "save() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.save"]], "sentencetokenindex (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.sentenceTokenIndex"]], "sentencetokenindex (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.sentenceTokenIndex"]], "set() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.set"]], "set() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.set"]], "setbatchsize() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setBatchSize"]], "setconfigprotobytes() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setConfigProtoBytes"]], "setdatasetinfo() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDatasetInfo"]], "setdatasetinfo() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setDatasetInfo"]], "setdoexceptionhandling() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDoExceptionHandling"]], "setdropout() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setDropout"]], "setearlystoppingcriterion() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEnableOutputLogs"]], "setentities() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEntities"]], "setevaluationlogextended() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setForceInputTypeValidation"]], "setgraphfile() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setGraphFile"]], "setgraphfolder() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setIncludeConfidence"]], "setincludeconfidence() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setIncludeConfidence"]], "setinferencebatchsize() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setInferenceBatchSize"]], "setinputcols() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setInputCols"]], "setinputcols() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setInputCols"]], "setlabelcasing() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setLabelCasing"]], "setlabelcolumn() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLabelColumn"]], "setlazyannotator() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLazyAnnotator"]], "setlazyannotator() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setLazyAnnotator"]], "setlogprefix() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLogPrefix"]], "setlr() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setLr"]], "setmaxepochs() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setMaxEpochs"]], "setminepochs() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setMinEpochs"]], "setoutputcol() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOutputCol"]], "setoutputcol() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setOutputCol"]], "setoutputlogspath() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setOverrideExistingTags"]], "setparamvalue() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setParamValue"]], "setparamvalue() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setParamValue"]], "setparams() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setParams"]], "setpo() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setPo"]], "setpretrainedmodelpath() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setPretrainedModelPath"]], "setrandomseed() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setSentenceTokenIndex"]], "setstorageref() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.setStorageRef"]], "settagsmapping() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setTagsMapping"]], "settestdataset() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setTestDataset"]], "setusebestmodel() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setUseBestModel"]], "setusecontrib() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setUseContrib"]], "setvalidationsplit() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setValidationSplit"]], "setverbose() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.setVerbose"]], "skiplpinputcolsvalidation (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[168, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "storageref (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.storageRef"]], "testdataset (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.testDataset"]], "trainingclassdistribution (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.trainingClassDistribution"]], "transform() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.transform"]], "uid (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.uid"]], "uid (financenermodel attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.uid"]], "usebestmodel (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.useBestModel"]], "usecontrib (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.useContrib"]], "validationsplit (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.validationSplit"]], "verbose (financenerapproach attribute)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.verbose"]], "write() (financenerapproach method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach.write"]], "write() (financenermodel method)": [[168, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.write"]], "sparknlp_jsl.finance.token_classification.ner": [[169, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[170, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[170, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profile"]], "profileesrdv21y19() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileESRDV21Y19"]], "profilerxhccv05y20() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileRxHCCV05Y20"]], "profilerxhccv05y21() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileRxHCCV05Y21"]], "profilerxhccv05y22() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileRxHCCV05Y22"]], "profilerxhccv05y23() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileRxHCCV05Y23"]], "profilerxhccv08y22() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileRxHCCV08Y22"]], "profilerxhccv08y23() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileRxHCCV08Y23"]], "profilev22() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV24"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV24Y22"]], "profilev28() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV28"]], "profilev28y24() (in module sparknlp_jsl.functions)": [[171, "sparknlp_jsl.functions.profileV28Y24"]], "sparknlp_jsl.functions": [[171, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[172, "sparknlp_jsl.annotators"]], "load_license_validator() (in module sparknlp_jsl)": [[172, "sparknlp_jsl.load_license_validator"]], "size_regex (in module sparknlp_jsl)": [[172, "sparknlp_jsl.size_regex"]], "transformer_seq_classification (in module sparknlp_jsl)": [[172, "sparknlp_jsl.transformer_seq_classification"]], "version_regex (in module sparknlp_jsl)": [[172, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[173, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[173, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[173, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[173, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[173, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[174, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[174, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[175, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[176, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[176, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "clear() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.clear"]], "copy() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.copy"]], "dateshiftcolumn (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.dateShiftColumn"]], "explainparam() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.explainParam"]], "explainparams() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.explainParams"]], "extractparammap() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.extractParamMap"]], "getinputcols() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getInputCols"]], "getlazyannotator() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getLazyAnnotator"]], "getordefault() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getOrDefault"]], "getoutputcol() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getOutputCol"]], "getparam() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getParam"]], "getparamvalue() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getParamValue"]], "getter_attrs (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.getter_attrs"]], "hasdefault() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.hasDefault"]], "hasparam() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.hasParam"]], "inputannotatortypes (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputAnnotatorTypes"]], "inputcols (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputCols"]], "inputcolsvalidation() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.inputColsValidation"]], "isdefined() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.isDefined"]], "isset() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.isSet"]], "lazyannotator (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.lazyAnnotator"]], "load() (legaldocumenthashcoder class method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.load"]], "name (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.name"]], "newdateshift (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.newDateShift"]], "optionalinputannotatortypes (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.optionalInputAnnotatorTypes"]], "outputannotatortype (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.outputAnnotatorType"]], "outputcol (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.outputCol"]], "patientidcolumn (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.patientIdColumn"]], "rangedays (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.rangeDays"]], "read() (legaldocumenthashcoder class method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.read"]], "save() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.save"]], "seed (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.seed"]], "set() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.set"]], "setdateshiftcolumn() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setDateShiftColumn"]], "setidcolumn() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "setinputcols() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setInputCols"]], "setlazyannotator() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setLazyAnnotator"]], "setnewdateshift() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setNewDateShift"]], "setoutputcol() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setOutputCol"]], "setparamvalue() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setParamValue"]], "setparams() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setParams"]], "setpatientidcolumn() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setPatientIdColumn"]], "setrangedays() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setRangeDays"]], "setseed() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setSeed"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[177, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "transform() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.transform"]], "uid (legaldocumenthashcoder attribute)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.uid"]], "write() (legaldocumenthashcoder method)": [[177, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.write"]], "sparknlp_jsl.legal.chunk_classification.deid": [[178, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[179, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[180, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[180, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[181, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[181, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[182, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[183, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[183, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[184, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[185, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[186, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[186, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[187, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[187, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal.sequence_classification": [[189, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "casesensitive (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.caseSensitive"]], "clear() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.clear"]], "coalescesentences (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.configProtoBytes"]], "copy() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.copy"]], "explainparam() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.explainParam"]], "explainparams() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.explainParams"]], "extractparammap() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.extractParamMap"]], "getcasesensitive() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getCaseSensitive"]], "getclasses() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getClasses"]], "getinputcols() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getInputCols"]], "getlazyannotator() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getLazyAnnotator"]], "getordefault() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getOrDefault"]], "getoutputcol() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getOutputCol"]], "getparam() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getParam"]], "getparamvalue() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getParamValue"]], "getter_attrs (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.getter_attrs"]], "hasdefault() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.hasDefault"]], "hasparam() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.hasParam"]], "inputannotatortypes (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputAnnotatorTypes"]], "inputcols (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputCols"]], "inputcolsvalidation() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.inputColsValidation"]], "isdefined() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.isDefined"]], "isset() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.isSet"]], "lazyannotator (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.lazyAnnotator"]], "load() (legalbertforsequenceclassification class method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.load"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.maxSentenceLength"]], "name (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "optionalinputannotatortypes (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.outputAnnotatorType"]], "outputcol (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.outputCol"]], "pretrained() (legalbertforsequenceclassification static method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "read() (legalbertforsequenceclassification class method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.read"]], "save() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.save"]], "set() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.set"]], "setcasesensitive() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setCaseSensitive"]], "setcoalescesentences() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setForceInputTypeValidation"]], "setinputcols() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setInputCols"]], "setlazyannotator() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setLazyAnnotator"]], "setmaxsentencelength() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setMaxSentenceLength"]], "setoutputcol() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setOutputCol"]], "setparamvalue() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setParamValue"]], "setparams() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.setParams"]], "skiplpinputcolsvalidation (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[190, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "transform() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.transform"]], "uid (legalbertforsequenceclassification attribute)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.uid"]], "write() (legalbertforsequenceclassification method)": [[190, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.write"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "batchsize (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.batchSize"]], "classes (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.classes"]], "clear() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.clear"]], "clear() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.clear"]], "configprotobytes (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.configProtoBytes"]], "configprotobytes (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.configProtoBytes"]], "copy() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.copy"]], "copy() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.copy"]], "dropout (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.dropout"]], "enableoutputlogs (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.enableOutputLogs"]], "engine (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.engine"]], "evaluationlogextended (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.evaluationLogExtended"]], "explainparam() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.explainParam"]], "explainparam() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.explainParam"]], "explainparams() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.explainParams"]], "explainparams() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.explainParams"]], "extractparammap() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.extractParamMap"]], "extractparammap() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.extractParamMap"]], "fit() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.fit"]], "fitmultiple() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.fitMultiple"]], "getengine() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getEngine"]], "getinputcols() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getInputCols"]], "getinputcols() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getInputCols"]], "getlazyannotator() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getLazyAnnotator"]], "getlazyannotator() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getLazyAnnotator"]], "getordefault() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getOrDefault"]], "getordefault() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getOrDefault"]], "getoutputcol() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getOutputCol"]], "getoutputcol() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getOutputCol"]], "getparam() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getParam"]], "getparam() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getParam"]], "getparamvalue() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getParamValue"]], "getparamvalue() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getParamValue"]], "getstorageref() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getStorageRef"]], "getter_attrs (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.getter_attrs"]], "getter_attrs (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.getter_attrs"]], "hasdefault() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.hasDefault"]], "hasdefault() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.hasDefault"]], "hasparam() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.hasParam"]], "hasparam() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.hasParam"]], "inputannotatortypes (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputAnnotatorTypes"]], "inputcols (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputCols"]], "inputcols (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputCols"]], "inputcolsvalidation() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.inputColsValidation"]], "inputcolsvalidation() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.inputColsValidation"]], "isdefined() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.isDefined"]], "isdefined() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.isDefined"]], "isset() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.isSet"]], "isset() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.isSet"]], "labelcolumn (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.labelColumn"]], "lazyannotator (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.lazyAnnotator"]], "lazyannotator (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.lazyAnnotator"]], "load() (legalclassifierdlapproach class method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.load"]], "load() (legalclassifierdlmodel class method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.load"]], "lr (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.lr"]], "maxepochs (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.maxEpochs"]], "name (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "optionalinputannotatortypes (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputAnnotatorType"]], "outputannotatortype (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.outputAnnotatorType"]], "outputcol (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputCol"]], "outputcol (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.outputCol"]], "outputlogspath (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.outputLogsPath"]], "pretrained() (legalclassifierdlmodel static method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "randomseed (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.randomSeed"]], "read() (legalclassifierdlapproach class method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.read"]], "read() (legalclassifierdlmodel class method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.read"]], "save() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.save"]], "save() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.save"]], "set() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.set"]], "set() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.set"]], "setbatchsize() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setBatchSize"]], "setconfigprotobytes() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setConfigProtoBytes"]], "setdropout() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setDropout"]], "setenableoutputlogs() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setEnableOutputLogs"]], "setevaluationlogextended() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setEvaluationLogExtended"]], "setinputcols() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setInputCols"]], "setinputcols() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setInputCols"]], "setlabelcolumn() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLabelColumn"]], "setlazyannotator() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLazyAnnotator"]], "setlazyannotator() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setLazyAnnotator"]], "setlr() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setLr"]], "setmaxepochs() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setMaxEpochs"]], "setoutputcol() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setOutputCol"]], "setoutputcol() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setOutputCol"]], "setoutputlogspath() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setOutputLogsPath"]], "setparamvalue() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setParamValue"]], "setparamvalue() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setParamValue"]], "setparams() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setParams"]], "setrandomseed() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setRandomSeed"]], "setstorageref() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.setStorageRef"]], "settestdataset() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setTestDataset"]], "setvalidationsplit() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setValidationSplit"]], "setverbose() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.setVerbose"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[191, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "storageref (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.storageRef"]], "testdataset (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.testDataset"]], "transform() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.transform"]], "uid (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.uid"]], "uid (legalclassifierdlmodel attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.uid"]], "validationsplit (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.validationSplit"]], "verbose (legalclassifierdlapproach attribute)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.verbose"]], "write() (legalclassifierdlapproach method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach.write"]], "write() (legalclassifierdlmodel method)": [[191, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.write"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "classificationmodel (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.classificationModelPath"]], "clear() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.clear"]], "clear() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.clear"]], "copy() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.copy"]], "copy() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.copy"]], "explainparam() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.explainParam"]], "explainparam() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.explainParam"]], "explainparams() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.explainParams"]], "explainparams() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.explainParams"]], "extractparammap() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.extractParamMap"]], "extractparammap() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.extractParamMap"]], "fit() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fit"]], "fitintercept (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fitIntercept"]], "fitmultiple() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.fitMultiple"]], "getinputcols() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getInputCols"]], "getinputcols() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getInputCols"]], "getlazyannotator() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getLazyAnnotator"]], "getordefault() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getOrDefault"]], "getordefault() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getOrDefault"]], "getoutputcol() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getOutputCol"]], "getoutputcol() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getOutputCol"]], "getparam() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getParam"]], "getparam() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getParam"]], "getparamvalue() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getParamValue"]], "getparamvalue() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getParamValue"]], "getter_attrs (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.getter_attrs"]], "getter_attrs (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.getter_attrs"]], "hasdefault() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.hasDefault"]], "hasdefault() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.hasDefault"]], "hasparam() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.hasParam"]], "hasparam() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.hasParam"]], "inputannotatortypes (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputAnnotatorTypes"]], "inputcols (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputCols"]], "inputcols (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputCols"]], "inputcolsvalidation() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.inputColsValidation"]], "isdefined() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.isDefined"]], "isdefined() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.isDefined"]], "isset() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.isSet"]], "isset() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.isSet"]], "labelcol (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.labelCol"]], "labels (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.labels"]], "labels (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.labels"]], "lazyannotator (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.lazyAnnotator"]], "lazyannotator (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.lazyAnnotator"]], "load() (legaldocumentmlclassifierapproach class method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.load"]], "load() (legaldocumentmlclassifiermodel class method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.load"]], "maxiter (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.maxIter"]], "maxtokenngram (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.maxTokenNgram"]], "maxtokenngram (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.maxTokenNgram"]], "mergechunks (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.mergeChunks"]], "mergechunks (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.mergeChunks"]], "mintokenngram (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.minTokenNgram"]], "mintokenngram (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.minTokenNgram"]], "name (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "optionalinputannotatortypes (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.outputAnnotatorType"]], "outputcol (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.outputCol"]], "outputcol (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.outputCol"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "read() (legaldocumentmlclassifierapproach class method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.read"]], "read() (legaldocumentmlclassifiermodel class method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.read"]], "save() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.save"]], "save() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.save"]], "set() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.set"]], "set() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.set"]], "setclassificationmodel() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setFitIntercept"]], "setforceinputtypevalidation() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setForceInputTypeValidation"]], "setinputcols() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setInputCols"]], "setinputcols() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setInputCols"]], "setlabelcol() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLabelCol"]], "setlabels() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLabels"]], "setlabels() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setLabels"]], "setlazyannotator() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setLazyAnnotator"]], "setmaxiter() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMergeChunks"]], "setmergechunks() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setMergeChunks"]], "setmintokenngram() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setMinTokenNgram"]], "setoutputcol() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setOutputCol"]], "setoutputcol() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setOutputCol"]], "setparamvalue() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setParamValue"]], "setparamvalue() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setParamValue"]], "setparams() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setParams"]], "settol() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.setVectorizationModelPath"]], "skiplpinputcolsvalidation (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[192, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "tol (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.tol"]], "transform() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.transform"]], "uid (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.uid"]], "uid (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.uid"]], "vectorizationmodel (legaldocumentmlclassifiermodel attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (legaldocumentmlclassifierapproach attribute)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.vectorizationModelPath"]], "write() (legaldocumentmlclassifierapproach method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach.write"]], "write() (legaldocumentmlclassifiermodel method)": [[192, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.write"]], "legalfewshotclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach"]], "legalfewshotclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel"]], "batchsize (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.batchSize"]], "classes (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.classes"]], "clear() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.clear"]], "clear() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.clear"]], "copy() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.copy"]], "copy() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.copy"]], "datasetinfo (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.datasetInfo"]], "datasetinfo (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.datasetInfo"]], "doexceptionhandling (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.doExceptionHandling"]], "doexceptionhandling (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.doExceptionHandling"]], "dropout (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.dropout"]], "engine (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.engine"]], "epochsn (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.epochsN"]], "explainparam() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.explainParam"]], "explainparam() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.explainParam"]], "explainparams() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.explainParams"]], "explainparams() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.explainParams"]], "extractparammap() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.extractParamMap"]], "extractparammap() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.extractParamMap"]], "featurescaling (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.featureScaling"]], "featurescaling (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.featureScaling"]], "fit() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fit"]], "fitmultiple() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fitMultiple"]], "fiximbalance (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.fixImbalance"]], "getengine() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getEngine"]], "getinputcols() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getInputCols"]], "getinputcols() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getInputCols"]], "getlazyannotator() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getLazyAnnotator"]], "getlazyannotator() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getLazyAnnotator"]], "getordefault() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getOrDefault"]], "getordefault() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getOrDefault"]], "getoutputcol() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getOutputCol"]], "getoutputcol() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getOutputCol"]], "getparam() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getParam"]], "getparam() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getParam"]], "getparamvalue() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getParamValue"]], "getparamvalue() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getParamValue"]], "getter_attrs (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.getter_attrs"]], "getter_attrs (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.getter_attrs"]], "hasdefault() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.hasDefault"]], "hasdefault() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.hasDefault"]], "hasparam() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.hasParam"]], "hasparam() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.hasParam"]], "inputannotatortypes (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputAnnotatorTypes"]], "inputcols (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputCols"]], "inputcols (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputCols"]], "inputcolsvalidation() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.inputColsValidation"]], "inputcolsvalidation() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.inputColsValidation"]], "isdefined() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.isDefined"]], "isdefined() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.isDefined"]], "isset() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.isSet"]], "isset() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.isSet"]], "labelcolumn (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.labelColumn"]], "lazyannotator (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.lazyAnnotator"]], "lazyannotator (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.lazyAnnotator"]], "learningrate (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.learningRate"]], "load() (legalfewshotclassifierapproach class method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.load"]], "load() (legalfewshotclassifiermodel class method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.load"]], "modelfile (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.modelFile"]], "multiclass (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.multiClass"]], "multiclass (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.multiClass"]], "name (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.name"]], "name (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.name"]], "optionalinputannotatortypes (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputAnnotatorType"]], "outputannotatortype (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.outputAnnotatorType"]], "outputcol (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputCol"]], "outputcol (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.outputCol"]], "outputlogspath (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.outputLogsPath"]], "pretrained() (legalfewshotclassifiermodel static method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.pretrained"]], "read() (legalfewshotclassifierapproach class method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.read"]], "read() (legalfewshotclassifiermodel class method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.read"]], "save() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.save"]], "save() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.save"]], "set() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.set"]], "set() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.set"]], "setbatchsize() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setBatchSize"]], "setdatasetinfo() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDatasetInfo"]], "setdatasetinfo() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setDatasetInfo"]], "setdoexceptionhandling() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDoExceptionHandling"]], "setdoexceptionhandling() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setDoExceptionHandling"]], "setdropout() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setDropout"]], "setepochsnumber() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setFeatureScaling"]], "setfeaturescaling() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setFeatureScaling"]], "setfiximbalance() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setFixImbalance"]], "setforceinputtypevalidation() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setForceInputTypeValidation"]], "setinputcols() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setInputCols"]], "setinputcols() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setInputCols"]], "setlabelcol() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLabelCol"]], "setlazyannotator() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLazyAnnotator"]], "setlazyannotator() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setLazyAnnotator"]], "setlearningrate() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setLearningRate"]], "setmodelfile() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setModelFile"]], "setmulticlass() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setMultiClass"]], "setmulticlass() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setMultiClass"]], "setoutputcol() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setOutputCol"]], "setoutputcol() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setOutputCol"]], "setoutputlogspath() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setOutputLogsPath"]], "setparamvalue() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setParamValue"]], "setparamvalue() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setParamValue"]], "setparams() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.setParams"]], "setvalidationsplit() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.setValidationSplit"]], "skiplpinputcolsvalidation (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier": [[193, "module-sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier"]], "transform() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.transform"]], "uid (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.uid"]], "uid (legalfewshotclassifiermodel attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.uid"]], "validationsplit (legalfewshotclassifierapproach attribute)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.validationSplit"]], "write() (legalfewshotclassifierapproach method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierApproach.write"]], "write() (legalfewshotclassifiermodel method)": [[193, "sparknlp_jsl.legal.sequence_classification.legal_few_shot_classifier.LegalFewShotClassifierModel.write"]], "sparknlp_jsl.legal.sequence_generation": [[194, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "batchsize (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.batchSize"]], "clear() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.clear"]], "configprotobytes (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.configProtoBytes"]], "copy() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.copy"]], "dosample (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.doSample"]], "explainparam() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.explainParam"]], "explainparams() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.explainParams"]], "extractparammap() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.extractParamMap"]], "getbatchsize() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getBatchSize"]], "getinputcols() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getInputCols"]], "getlazyannotator() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getLazyAnnotator"]], "getordefault() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getOrDefault"]], "getoutputcol() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getOutputCol"]], "getparam() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getParam"]], "getparamvalue() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getParamValue"]], "getter_attrs (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.getter_attrs"]], "hasdefault() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.hasDefault"]], "hasparam() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.hasParam"]], "ignoretokenids (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputAnnotatorTypes"]], "inputcols (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputCols"]], "inputcolsvalidation() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.inputColsValidation"]], "isdefined() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.isDefined"]], "isset() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.isSet"]], "lazyannotator (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.lazyAnnotator"]], "load() (legalencoderdecoder class method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.load"]], "maxnewtokens (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.maxNewTokens"]], "maxtextlength (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.maxTextLength"]], "mlframeworktype (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.mlFrameworkType"]], "name (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "norepeatngramsize (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.noRepeatNgramSize"]], "optionalinputannotatortypes (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.optionalInputAnnotatorTypes"]], "outputannotatortype (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.outputAnnotatorType"]], "outputcol (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.outputCol"]], "randomseed (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.randomSeed"]], "read() (legalencoderdecoder class method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.read"]], "refinechunksize (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineMaxAttempts"]], "refinesummary (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.refineSummaryTargetLength"]], "save() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.save"]], "set() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.set"]], "setbatchsize() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setBatchSize"]], "setconfigprotobytes() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setDoSample"]], "setforceinputtypevalidation() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setForceInputTypeValidation"]], "setignoretokenids() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setIgnoreTokenIds"]], "setinputcols() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setInputCols"]], "setlazyannotator() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setLazyAnnotator"]], "setmaxnewtokens() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setNoRepeatNgramSize"]], "setoutputcol() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setOutputCol"]], "setparamvalue() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setParamValue"]], "setparams() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setParams"]], "setrandomseed() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setStopAtEos"]], "settopk() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.setTopK"]], "skiplpinputcolsvalidation (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[195, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "stopateos (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.stopAtEos"]], "task (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.task"]], "topk (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.topK"]], "transform() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.transform"]], "uid (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.uid"]], "usecache (legalencoderdecoder attribute)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.useCache"]], "write() (legalencoderdecoder method)": [[195, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.write"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "batchsize (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.batchSize"]], "clear() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.clear"]], "configprotobytes (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.configProtoBytes"]], "copy() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.copy"]], "customprompt (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.customPrompt"]], "dosample (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.doSample"]], "explainparam() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.explainParam"]], "explainparams() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.explainParams"]], "extractparammap() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.extractParamMap"]], "getbatchsize() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getBatchSize"]], "getinputcols() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getInputCols"]], "getlazyannotator() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getLazyAnnotator"]], "getordefault() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getOrDefault"]], "getoutputcol() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getOutputCol"]], "getparam() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getParam"]], "getparamvalue() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getParamValue"]], "getquestiontypes() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getQuestionTypes"]], "getter_attrs (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.getter_attrs"]], "hasdefault() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.hasDefault"]], "hasparam() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.hasParam"]], "ignoretokenids (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.ignoreTokenIds"]], "inputannotatortypes (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputAnnotatorTypes"]], "inputcols (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputCols"]], "inputcolsvalidation() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.inputColsValidation"]], "isdefined() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.isDefined"]], "isset() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.isSet"]], "lazyannotator (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.lazyAnnotator"]], "load() (legalquestionanswering class method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.load"]], "loadmedicaltextgenerator() (legalquestionanswering static method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (legalquestionanswering static method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "maxcontextlength (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.maxContextLength"]], "maxnewtokens (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.maxNewTokens"]], "mlframeworktype (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.mlFrameworkType"]], "modeltype (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.modelType"]], "name (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "norepeatngramsize (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.noRepeatNgramSize"]], "optionalinputannotatortypes (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.optionalInputAnnotatorTypes"]], "outputannotatortype (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.outputAnnotatorType"]], "outputcol (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.outputCol"]], "pretrained() (legalquestionanswering static method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "questiontype (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.questionType"]], "read() (legalquestionanswering class method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.read"]], "save() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.save"]], "set() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.set"]], "setbatchsize() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setBatchSize"]], "setconfigprotobytes() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setCustomPrompt"]], "setdosample() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setDoSample"]], "setforceinputtypevalidation() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setForceInputTypeValidation"]], "setignoretokenids() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setIgnoreTokenIds"]], "setinputcols() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setInputCols"]], "setlazyannotator() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setLazyAnnotator"]], "setmaxcontextlength() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setMaxContextLength"]], "setmaxnewtokens() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setMaxNewTokens"]], "setnorepeatngramsize() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setNoRepeatNgramSize"]], "setoutputcol() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setOutputCol"]], "setparamvalue() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setParamValue"]], "setparams() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setParams"]], "setquestionanswerterminals() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setQuestionType"]], "setrandomseed() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setRandomSeed"]], "settopk() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setTopK"]], "setusecache() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.setUseCache"]], "skiplpinputcolsvalidation (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[196, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "topk (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.topK"]], "transform() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.transform"]], "uid (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.uid"]], "usecache (legalquestionanswering attribute)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.useCache"]], "write() (legalquestionanswering method)": [[196, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.write"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "batchsize (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.batchSize"]], "clear() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.clear"]], "configprotobytes (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.configProtoBytes"]], "copy() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.copy"]], "dosample (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.doSample"]], "explainparam() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.explainParam"]], "explainparams() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.explainParams"]], "extractparammap() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.extractParamMap"]], "getbatchsize() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getBatchSize"]], "getinputcols() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getInputCols"]], "getlazyannotator() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getLazyAnnotator"]], "getordefault() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getOrDefault"]], "getoutputcol() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getOutputCol"]], "getparam() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getParam"]], "getparamvalue() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getParamValue"]], "getter_attrs (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.getter_attrs"]], "hasdefault() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.hasDefault"]], "hasparam() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.hasParam"]], "ignoretokenids (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.ignoreTokenIds"]], "inputannotatortypes (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputAnnotatorTypes"]], "inputcols (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputCols"]], "inputcolsvalidation() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.inputColsValidation"]], "isdefined() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.isDefined"]], "isset() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.isSet"]], "lazyannotator (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.lazyAnnotator"]], "load() (legalsummarizer class method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.load"]], "loadsavedmodel() (legalsummarizer static method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "maxnewtokens (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.maxNewTokens"]], "maxtextlength (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.maxTextLength"]], "mlframeworktype (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.mlFrameworkType"]], "name (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "norepeatngramsize (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.noRepeatNgramSize"]], "optionalinputannotatortypes (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.optionalInputAnnotatorTypes"]], "outputannotatortype (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.outputAnnotatorType"]], "outputcol (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.outputCol"]], "pretrained() (legalsummarizer static method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "randomseed (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.randomSeed"]], "read() (legalsummarizer class method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.read"]], "refinechunksize (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineChunkSize"]], "refinemaxattempts (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineMaxAttempts"]], "refinesummary (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineSummary"]], "refinesummarytargetlength (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.refineSummaryTargetLength"]], "save() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.save"]], "set() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.set"]], "setbatchsize() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setBatchSize"]], "setconfigprotobytes() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setConfigProtoBytes"]], "setdosample() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setDoSample"]], "setforceinputtypevalidation() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setForceInputTypeValidation"]], "setignoretokenids() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setIgnoreTokenIds"]], "setinputcols() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setInputCols"]], "setlazyannotator() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setLazyAnnotator"]], "setmaxnewtokens() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setMaxNewTokens"]], "setmaxtextlength() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setMaxTextLength"]], "setnorepeatngramsize() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setNoRepeatNgramSize"]], "setoutputcol() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setOutputCol"]], "setparamvalue() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setParamValue"]], "setparams() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setParams"]], "setrandomseed() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRandomSeed"]], "setrefinechunksize() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineChunkSize"]], "setrefinemaxattempts() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineMaxAttempts"]], "setrefinesummary() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineSummary"]], "setrefinesummarytargetlength() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setRefineSummaryTargetLength"]], "setstopateos() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setStopAtEos"]], "settopk() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.setTopK"]], "skiplpinputcolsvalidation (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[197, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "stopateos (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.stopAtEos"]], "task (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.task"]], "topk (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.topK"]], "transform() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.transform"]], "uid (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.uid"]], "usecache (legalsummarizer attribute)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.useCache"]], "write() (legalsummarizer method)": [[197, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.write"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "batchsize (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.batchSize"]], "clear() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.clear"]], "configprotobytes (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.configProtoBytes"]], "copy() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.copy"]], "customprompt (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.customPrompt"]], "dosample (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.doSample"]], "explainparam() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.explainParam"]], "explainparams() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.explainParams"]], "extractparammap() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.extractParamMap"]], "getadditionaltokens() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getAdditionalTokens"]], "getbatchsize() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getBatchSize"]], "getinputcols() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getInputCols"]], "getlazyannotator() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getLazyAnnotator"]], "getordefault() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getOrDefault"]], "getoutputcol() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getOutputCol"]], "getparam() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getParam"]], "getparamvalue() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getParamValue"]], "getter_attrs (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.getter_attrs"]], "hasdefault() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.hasDefault"]], "hasparam() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.hasParam"]], "ignoretokenids (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.ignoreTokenIds"]], "inputannotatortypes (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputAnnotatorTypes"]], "inputcols (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputCols"]], "inputcolsvalidation() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.inputColsValidation"]], "isdefined() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.isDefined"]], "isset() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.isSet"]], "lazyannotator (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.lazyAnnotator"]], "load() (legaltextgenerator class method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.load"]], "loadsavedmodel() (legaltextgenerator static method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "maxcontextlength (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxContextLength"]], "maxnewtokens (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxNewTokens"]], "maxtextlength (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.maxTextLength"]], "mlframeworktype (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.mlFrameworkType"]], "modeltype (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.modelType"]], "name (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "norepeatngramsize (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.noRepeatNgramSize"]], "optionalinputannotatortypes (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.outputAnnotatorType"]], "outputcol (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.outputCol"]], "pretrained() (legaltextgenerator static method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "read() (legaltextgenerator class method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.read"]], "save() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.save"]], "set() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.set"]], "setadditionaltokens() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setAdditionalTokens"]], "setbatchsize() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setBatchSize"]], "setconfigprotobytes() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setCustomPrompt"]], "setdosample() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setDoSample"]], "setforceinputtypevalidation() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setForceInputTypeValidation"]], "setignoretokenids() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setIgnoreTokenIds"]], "setinputcols() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setInputCols"]], "setlazyannotator() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setLazyAnnotator"]], "setmaxcontextlength() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxContextLength"]], "setmaxnewtokens() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxNewTokens"]], "setmaxtextlength() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setMaxTextLength"]], "setnorepeatngramsize() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setNoRepeatNgramSize"]], "setoutputcol() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setOutputCol"]], "setparamvalue() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setParamValue"]], "setparams() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setParams"]], "setrandomseed() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setRandomSeed"]], "setstopateos() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setStopAtEos"]], "settopk() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setTopK"]], "setusecache() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.setUseCache"]], "skiplpinputcolsvalidation (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[198, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "stopateos (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.stopAtEos"]], "topk (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.topK"]], "transform() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.transform"]], "uid (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.uid"]], "usecache (legaltextgenerator attribute)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.useCache"]], "write() (legaltextgenerator method)": [[198, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.write"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "clear() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.clear"]], "copy() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.copy"]], "entities1 (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.entities1"]], "entities2 (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.entities2"]], "explainparam() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.explainParam"]], "explainparams() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.explainParams"]], "extractparammap() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.extractParamMap"]], "getinputcols() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getInputCols"]], "getlazyannotator() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getLazyAnnotator"]], "getordefault() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getOrDefault"]], "getoutputcol() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getOutputCol"]], "getparam() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getParam"]], "getparamvalue() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getParamValue"]], "getter_attrs (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.getter_attrs"]], "hasdefault() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.hasDefault"]], "hasparam() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.hasParam"]], "inputannotatortypes (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputAnnotatorTypes"]], "inputcols (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputCols"]], "inputcolsvalidation() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.inputColsValidation"]], "isdefined() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.isDefined"]], "isset() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.isSet"]], "lazyannotator (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.lazyAnnotator"]], "load() (legalnerquestiongenerator class method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.load"]], "name (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.name"]], "optionalinputannotatortypes (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.optionalInputAnnotatorTypes"]], "outputannotatortype (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.outputAnnotatorType"]], "outputcol (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.outputCol"]], "questionmark (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.questionMark"]], "questionpronoun (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.questionPronoun"]], "read() (legalnerquestiongenerator class method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.read"]], "save() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.save"]], "set() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.set"]], "setentities1() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setEntities1"]], "setentities2() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setEntities2"]], "setforceinputtypevalidation() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setForceInputTypeValidation"]], "setinputcols() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setInputCols"]], "setlazyannotator() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setLazyAnnotator"]], "setoutputcol() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setOutputCol"]], "setparamvalue() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setParamValue"]], "setparams() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setParams"]], "setquestionmark() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.setStrategyType"]], "skiplpinputcolsvalidation (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.skipLPInputColsValidation"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[199, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "strategytype (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.strategyType"]], "transform() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.transform"]], "uid (legalnerquestiongenerator attribute)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.uid"]], "write() (legalnerquestiongenerator method)": [[199, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator.write"]], "sparknlp_jsl.legal.token_classification": [[200, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[201, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "casesensitive (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.caseSensitive"]], "clear() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.clear"]], "configprotobytes (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.configProtoBytes"]], "copy() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.copy"]], "explainparam() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.explainParam"]], "explainparams() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.explainParams"]], "extractparammap() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.extractParamMap"]], "getcasesensitive() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getCaseSensitive"]], "getclasses() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getClasses"]], "getinputcols() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getInputCols"]], "getlazyannotator() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getLazyAnnotator"]], "getordefault() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getOrDefault"]], "getoutputcol() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getOutputCol"]], "getparam() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getParam"]], "getparamvalue() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getParamValue"]], "getter_attrs (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.getter_attrs"]], "hasdefault() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.hasDefault"]], "hasparam() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.hasParam"]], "inputannotatortypes (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputAnnotatorTypes"]], "inputcols (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputCols"]], "inputcolsvalidation() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.inputColsValidation"]], "isdefined() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.isDefined"]], "isset() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.isSet"]], "lazyannotator (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.lazyAnnotator"]], "load() (legalbertfortokenclassification class method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.load"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "maxsentencelength (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.maxSentenceLength"]], "name (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "optionalinputannotatortypes (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.optionalInputAnnotatorTypes"]], "outputannotatortype (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.outputAnnotatorType"]], "outputcol (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.outputCol"]], "pretrained() (legalbertfortokenclassification static method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "read() (legalbertfortokenclassification class method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.read"]], "save() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.save"]], "set() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.set"]], "setcasesensitive() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setCaseSensitive"]], "setconfigprotobytes() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setConfigProtoBytes"]], "setforceinputtypevalidation() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setForceInputTypeValidation"]], "setinputcols() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setInputCols"]], "setlazyannotator() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setLazyAnnotator"]], "setmaxsentencelength() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setMaxSentenceLength"]], "setoutputcol() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setOutputCol"]], "setparamvalue() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setParamValue"]], "setparams() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.setParams"]], "skiplpinputcolsvalidation (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.skipLPInputColsValidation"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[202, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "transform() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.transform"]], "uid (legalbertfortokenclassification attribute)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.uid"]], "write() (legalbertfortokenclassification method)": [[202, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.write"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "batchsize (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.batchSize"]], "classes (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.classes"]], "clear() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.clear"]], "clear() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.clear"]], "configprotobytes (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.configProtoBytes"]], "configprotobytes (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.configProtoBytes"]], "copy() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.copy"]], "copy() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.copy"]], "datasetinfo (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.datasetInfo"]], "datasetinfo (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.datasetInfo"]], "doexceptionhandling (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.doExceptionHandling"]], "dropout (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.dropout"]], "earlystoppingcriterion (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.enableMemoryOptimizer"]], "enableoutputlogs (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.enableOutputLogs"]], "engine (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.engine"]], "entities (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.entities"]], "evaluationlogextended (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.evaluationLogExtended"]], "explainparam() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.explainParam"]], "explainparam() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.explainParam"]], "explainparams() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.explainParams"]], "explainparams() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.explainParams"]], "extractparammap() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.extractParamMap"]], "extractparammap() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.extractParamMap"]], "fit() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.fit"]], "fitmultiple() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.fitMultiple"]], "getclasses() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getClasses"]], "getengine() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getEngine"]], "getinputcols() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getInputCols"]], "getinputcols() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getInputCols"]], "getlabelcolumn() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getLabelColumn"]], "getlazyannotator() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getLazyAnnotator"]], "getlazyannotator() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getLazyAnnotator"]], "getordefault() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getOrDefault"]], "getordefault() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getOrDefault"]], "getoutputcol() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getOutputCol"]], "getoutputcol() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getOutputCol"]], "getparam() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getParam"]], "getparam() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getParam"]], "getparamvalue() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getParamValue"]], "getparamvalue() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getParamValue"]], "getstorageref() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getStorageRef"]], "gettrainingclassdistribution() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getTrainingClassDistribution"]], "getter_attrs (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.getter_attrs"]], "getter_attrs (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.getter_attrs"]], "graphfile (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.graphFile"]], "graphfolder (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.graphFolder"]], "hasdefault() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.hasDefault"]], "hasdefault() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.hasDefault"]], "hasparam() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.hasParam"]], "hasparam() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.hasParam"]], "includeallconfidencescores (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.includeAllConfidenceScores"]], "includeconfidence (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.includeConfidence"]], "includeconfidence (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.includeConfidence"]], "inferencebatchsize (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inferenceBatchSize"]], "inputannotatortypes (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputAnnotatorTypes"]], "inputcols (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputCols"]], "inputcols (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputCols"]], "inputcolsvalidation() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.inputColsValidation"]], "inputcolsvalidation() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.inputColsValidation"]], "isdefined() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.isDefined"]], "isdefined() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.isDefined"]], "isset() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.isSet"]], "isset() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.isSet"]], "labelcasing (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.labelCasing"]], "labelcolumn (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.labelColumn"]], "lazyannotator (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.lazyAnnotator"]], "lazyannotator (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.lazyAnnotator"]], "load() (legalnerapproach class method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.load"]], "load() (legalnermodel class method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.load"]], "loadsavedmodel() (legalnermodel static method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "logprefix (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.logPrefix"]], "lr (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.lr"]], "maxepochs (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.maxEpochs"]], "minepochs (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.minEpochs"]], "name (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "optionalinputannotatortypes (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.optionalInputAnnotatorTypes"]], "optionalinputannotatortypes (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.optionalInputAnnotatorTypes"]], "outputannotatortype (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputAnnotatorType"]], "outputannotatortype (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.outputAnnotatorType"]], "outputcol (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputCol"]], "outputcol (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.outputCol"]], "outputlogspath (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.outputLogsPath"]], "overrideexistingtags (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.overrideExistingTags"]], "po (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.po"]], "pretrained() (legalnermodel static method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "pretrainedmodelpath (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.pretrainedModelPath"]], "randomseed (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.randomSeed"]], "randomvalidationsplitperepoch (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.randomValidationSplitPerEpoch"]], "read() (legalnerapproach class method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.read"]], "read() (legalnermodel class method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.read"]], "save() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.save"]], "save() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.save"]], "sentencetokenindex (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.sentenceTokenIndex"]], "set() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.set"]], "set() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.set"]], "setbatchsize() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setBatchSize"]], "setconfigprotobytes() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setConfigProtoBytes"]], "setdatasetinfo() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDatasetInfo"]], "setdatasetinfo() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setDatasetInfo"]], "setdoexceptionhandling() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDoExceptionHandling"]], "setdropout() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setDropout"]], "setearlystoppingcriterion() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEnableMemoryOptimizer"]], "setenableoutputlogs() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEnableOutputLogs"]], "setentities() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEntities"]], "setevaluationlogextended() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setEvaluationLogExtended"]], "setforceinputtypevalidation() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setForceInputTypeValidation"]], "setforceinputtypevalidation() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setForceInputTypeValidation"]], "setgraphfile() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setGraphFile"]], "setgraphfolder() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setInferenceBatchSize"]], "setinputcols() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setInputCols"]], "setinputcols() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setInputCols"]], "setlabelcasing() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setLabelCasing"]], "setlabelcolumn() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLabelColumn"]], "setlazyannotator() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLazyAnnotator"]], "setlazyannotator() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setLazyAnnotator"]], "setlogprefix() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLogPrefix"]], "setlr() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setLr"]], "setmaxepochs() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setMaxEpochs"]], "setminepochs() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setMinEpochs"]], "setoutputcol() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOutputCol"]], "setoutputcol() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setOutputCol"]], "setoutputlogspath() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOutputLogsPath"]], "setoverrideexistingtags() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setOverrideExistingTags"]], "setparamvalue() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setParamValue"]], "setparamvalue() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setParamValue"]], "setparams() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setParams"]], "setpo() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setPo"]], "setpretrainedmodelpath() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setPretrainedModelPath"]], "setrandomseed() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setRandomSeed"]], "setrandomvalidationsplitperepoch() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setSentenceTokenIndex"]], "setstorageref() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.setStorageRef"]], "settagsmapping() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setTagsMapping"]], "settestdataset() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setTestDataset"]], "setusebestmodel() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setUseBestModel"]], "setusecontrib() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setUseContrib"]], "setvalidationsplit() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setValidationSplit"]], "setverbose() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.setVerbose"]], "skiplpinputcolsvalidation (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.skipLPInputColsValidation"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[203, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "storageref (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.storageRef"]], "testdataset (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.testDataset"]], "trainingclassdistribution (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.trainingClassDistribution"]], "transform() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.transform"]], "uid (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.uid"]], "uid (legalnermodel attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.uid"]], "usebestmodel (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.useBestModel"]], "usecontrib (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.useContrib"]], "validationsplit (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.validationSplit"]], "verbose (legalnerapproach attribute)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.verbose"]], "write() (legalnerapproach method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach.write"]], "write() (legalnermodel method)": [[203, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.write"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[204, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[204, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.llm": [[205, "module-sparknlp_jsl.llm"]], "llmloader (class in sparknlp_jsl.llm.llm_loader)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader"]], "clear() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.clear"]], "copy() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.copy"]], "encodemodel() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.encodeModel"]], "explainparam() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.explainParam"]], "explainparams() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.explainParams"]], "extractparammap() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.extractParamMap"]], "generate() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.generate"]], "getmetadata() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.getMetadata"]], "getmetadataentry() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.getMetadataEntry"]], "getordefault() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.getOrDefault"]], "getparam() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.getParam"]], "hasdefault() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.hasDefault"]], "hasparam() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.hasParam"]], "isdefined() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.isDefined"]], "isset() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.isSet"]], "load() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.load"]], "loadgguf() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.loadGGUF"]], "pretrained() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.pretrained"]], "set() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.set"]], "setcacheprompt() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setCachePrompt"]], "setdynamictemperatureexponent() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setDynamicTemperatureExponent"]], "setdynamictemperaturerange() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setDynamicTemperatureRange"]], "setfrequencypenalty() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setFrequencyPenalty"]], "setgrammar() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setGrammar"]], "setignoreeos() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setIgnoreEos"]], "setinputprefix() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setInputPrefix"]], "setinputsuffix() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setInputSuffix"]], "setminkeep() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMinKeep"]], "setminp() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMinP"]], "setmirostateta() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMiroStatEta"]], "setmirostattau() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setMiroStatTau"]], "setnkeep() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNKeep"]], "setnpredict() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNPredict"]], "setnprobs() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setNProbs"]], "setpenalizenl() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPenalizeNl"]], "setpenaltyprompt() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPenaltyPrompt"]], "setpresencepenalty() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setPresencePenalty"]], "setrepeatlastn() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setRepeatLastN"]], "setrepeatpenalty() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setRepeatPenalty"]], "setseed() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setSeed"]], "setstopstrings() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setStopStrings"]], "settemperature() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTemperature"]], "settfsz() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTfsZ"]], "settopk() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTopK"]], "settopp() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTopP"]], "settypicalp() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setTypicalP"]], "setusechattemplate() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.setUseChatTemplate"]], "sparknlp_jsl.llm.llm_loader": [[206, "module-sparknlp_jsl.llm.llm_loader"]], "transform() (llmloader method)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.transform"]], "uid (llmloader attribute)": [[206, "sparknlp_jsl.llm.llm_loader.LLMLoader.uid"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[207, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[207, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[207, "module-sparknlp_jsl.modelTracer"]], "pipelineoutputparser (class in sparknlp_jsl.pipeline_output_parser)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser"]], "check_column_mapping_dict() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.check_column_mapping_dict"]], "check_unique_id() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.check_unique_id"]], "get_assertions() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_assertions"]], "get_classification() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_classification"]], "get_deidentification() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_deidentification"]], "get_documents() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_documents"]], "get_entities() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_entities"]], "get_relations() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_relations"]], "get_resolutions() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_resolutions"]], "get_summary() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_summary"]], "get_unique_id() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.get_unique_id"]], "run() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.run"]], "sparknlp_jsl.pipeline_output_parser": [[208, "module-sparknlp_jsl.pipeline_output_parser"]], "update_columns_maps() (pipelineoutputparser method)": [[208, "sparknlp_jsl.pipeline_output_parser.PipelineOutputParser.update_columns_maps"]], "pipelinestage (class in sparknlp_jsl.pipeline_tracer)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage"]], "pipelinetracer (class in sparknlp_jsl.pipeline_tracer)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer"]], "stagefield (class in sparknlp_jsl.pipeline_tracer)": [[209, "sparknlp_jsl.pipeline_tracer.StageField"]], "createparserdictionary() (pipelinetracer method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.createParserDictionary"]], "fieldtype (stagefield attribute)": [[209, "sparknlp_jsl.pipeline_tracer.StageField.fieldType"]], "getparserdictdirectly() (pipelinetracer static method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getParserDictDirectly"]], "getpipelinestages() (pipelinetracer method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPipelineStages"]], "getpossibleassertions() (pipelinetracer method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleAssertions"]], "getpossibleentities() (pipelinetracer method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleEntities"]], "getpossiblerelations() (pipelinetracer method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.getPossibleRelations"]], "index (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.index"]], "inputannotatortype (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.inputAnnotatorType"]], "inputcol (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.inputCol"]], "listavailablemodels() (pipelinetracer static method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.listAvailableModels"]], "name (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.name"]], "name (stagefield attribute)": [[209, "sparknlp_jsl.pipeline_tracer.StageField.name"]], "outputannotatortype (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.outputAnnotatorType"]], "outputcol (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.outputCol"]], "printpipelineschema() (pipelinetracer method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.printPipelineSchema"]], "showavailablemodels() (pipelinetracer static method)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineTracer.showAvailableModels"]], "sparknlp_jsl.pipeline_tracer": [[209, "module-sparknlp_jsl.pipeline_tracer"]], "stage (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.stage"]], "uid (pipelinestage attribute)": [[209, "sparknlp_jsl.pipeline_tracer.PipelineStage.uid"]], "value (stagefield attribute)": [[209, "sparknlp_jsl.pipeline_tracer.StageField.value"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "downloadmodeldirectly() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModelDirectly"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[210, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[210, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[210, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[211, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "columns (structureddeidentification attribute)": [[211, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.columns"]], "instance (structureddeidentification attribute)": [[211, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.instance"]], "obfuscatecolumns() (structureddeidentification method)": [[211, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "obfuscatereffile (structureddeidentification attribute)": [[211, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateRefFile"]], "spark (structureddeidentification attribute)": [[211, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.spark"]], "sparknlp_jsl.structured_deidentification": [[211, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "columns (texttodocumentscolumns attribute)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.columns"]], "instance (texttodocumentscolumns attribute)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.instance"]], "spark (texttodocumentscolumns attribute)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.spark"]], "sparknlp_jsl.text_to_documents_columns": [[212, "module-sparknlp_jsl.text_to_documents_columns"]], "suffix (texttodocumentscolumns attribute)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.suffix"]], "todocumentscolumns() (texttodocumentscolumns method)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "todocumentscolumnswithid() (texttodocumentscolumns method)": [[212, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumnsWithId"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "annotation_schema (redatasethelper attribute)": [[213, "sparknlp_jsl.training.REDatasetHelper.annotation_schema"]], "apply() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.apply"]], "apply() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.apply"]], "apply() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.apply"]], "apply() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.apply"]], "augmentcsv() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[213, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "data (redatasethelper attribute)": [[213, "sparknlp_jsl.training.REDatasetHelper.data"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "getdataframe() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.getDataFrame"]], "getdataframe() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.getDataFrame"]], "getdataframe() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.getDataFrame"]], "getdataframe() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.getDataFrame"]], "java_obj (annotationtooljsonreader attribute)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.java_obj"]], "java_obj (cantemistreader attribute)": [[213, "sparknlp_jsl.training.CantemistReader.java_obj"]], "java_obj (codiespreader attribute)": [[213, "sparknlp_jsl.training.CodiEspReader.java_obj"]], "java_obj (synonymaugmentationumls attribute)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.java_obj"]], "new_java_array() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array"]], "new_java_array() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.new_java_array"]], "new_java_array() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.new_java_array"]], "new_java_array() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array"]], "new_java_array_integer() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array_integer"]], "new_java_array_integer() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.new_java_array_integer"]], "new_java_array_integer() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.new_java_array_integer"]], "new_java_array_integer() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array_integer"]], "new_java_array_string() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_array_string"]], "new_java_array_string() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.new_java_array_string"]], "new_java_array_string() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.new_java_array_string"]], "new_java_array_string() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_array_string"]], "new_java_obj() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.new_java_obj"]], "new_java_obj() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.new_java_obj"]], "new_java_obj() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.new_java_obj"]], "new_java_obj() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.new_java_obj"]], "readdataset() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sc (annotationtooljsonreader attribute)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.sc"]], "sc (cantemistreader attribute)": [[213, "sparknlp_jsl.training.CantemistReader.sc"]], "sc (codiespreader attribute)": [[213, "sparknlp_jsl.training.CodiEspReader.sc"]], "sc (synonymaugmentationumls attribute)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.sc"]], "spark_version() (annotationtooljsonreader method)": [[213, "sparknlp_jsl.training.AnnotationToolJsonReader.spark_version"]], "spark_version() (cantemistreader method)": [[213, "sparknlp_jsl.training.CantemistReader.spark_version"]], "spark_version() (codiespreader method)": [[213, "sparknlp_jsl.training.CodiEspReader.spark_version"]], "spark_version() (synonymaugmentationumls method)": [[213, "sparknlp_jsl.training.SynonymAugmentationUMLS.spark_version"]], "sparknlp_jsl.training": [[213, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[213, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[214, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[214, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[214, "module-sparknlp_jsl.training_log_parser"]], "build_python_code() (in module sparknlp_jsl.transpiler.builder)": [[215, "sparknlp_jsl.transpiler.builder.build_python_code"]], "build_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[215, "sparknlp_jsl.transpiler.builder.build_scala_code"]], "compile_scala_code() (in module sparknlp_jsl.transpiler.builder)": [[215, "sparknlp_jsl.transpiler.builder.compile_scala_code"]], "prepare_python_code() (in module sparknlp_jsl.transpiler.builder)": [[215, "sparknlp_jsl.transpiler.builder.prepare_python_code"]], "sparknlp_jsl.transpiler.builder": [[215, "module-sparknlp_jsl.transpiler.builder"]], "classnames (class in sparknlp_jsl.transpiler.class_names)": [[216, "sparknlp_jsl.transpiler.class_names.ClassNames"]], "classes (classnames attribute)": [[216, "sparknlp_jsl.transpiler.class_names.ClassNames.classes"]], "internal_classes (classnames attribute)": [[216, "sparknlp_jsl.transpiler.class_names.ClassNames.internal_classes"]], "opensource_classes (classnames attribute)": [[216, "sparknlp_jsl.transpiler.class_names.ClassNames.openSource_classes"]], "sparknlp_jsl.transpiler.class_names": [[216, "module-sparknlp_jsl.transpiler.class_names"]], "run_converter() (in module sparknlp_jsl.transpiler.converter)": [[217, "sparknlp_jsl.transpiler.converter.run_converter"]], "sparknlp_jsl.transpiler.converter": [[217, "module-sparknlp_jsl.transpiler.converter"]], "sparknlp_jsl.transpiler.externalsources": [[218, "module-sparknlp_jsl.transpiler.externalSources"]], "sparknlp_jsl.transpiler": [[219, "module-sparknlp_jsl.transpiler"]], "bucket() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.bucket"]], "convert_nlu_component_to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.convert_nlu_component_to_python"]], "is_component_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.is_component_finance"]], "is_component_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.is_component_legal"]], "is_component_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.is_component_medical"]], "is_component_ocr() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.is_component_ocr"]], "is_component_open_source() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.is_component_open_source"]], "is_component_pretrained() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.is_component_pretrained"]], "medical_annotators_set (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.medical_annotators_set"]], "nlu_component_to_spark_nlp_code() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.nlu_component_to_spark_nlp_code"]], "open_source_annotator_set_final (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.open_source_annotator_set_final"]], "sparknlp_jsl.transpiler.nlu_2_python": [[220, "module-sparknlp_jsl.transpiler.nlu_2_python"]], "starts_with_finance() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_finance"]], "starts_with_legal() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_legal"]], "starts_with_medical() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.starts_with_medical"]], "to_python() (in module sparknlp_jsl.transpiler.nlu_2_python)": [[220, "sparknlp_jsl.transpiler.nlu_2_python.to_python"]], "anonymize_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.anonymize_script"]], "break_line_after_backslash() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.break_line_after_backslash"]], "convert() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.convert"]], "convert_class_name() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.convert_class_name"]], "convert_python_dict_to_scala_script() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.convert_python_dict_to_scala_script"]], "find_key_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.find_key_values"]], "get_data_dict() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.get_data_dict"]], "get_import_section() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.get_import_section"]], "prepare_scala_code() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.prepare_scala_code"]], "remove_blank_lines() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.remove_blank_lines"]], "restore_sensitive_values() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.restore_sensitive_values"]], "run_transpiler() (in module sparknlp_jsl.transpiler.python_2_scala)": [[221, "sparknlp_jsl.transpiler.python_2_scala.run_transpiler"]], "sparknlp_jsl.transpiler.python_2_scala": [[221, "module-sparknlp_jsl.transpiler.python_2_scala"]], "get_python_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[222, "sparknlp_jsl.transpiler.source_loader.get_python_code_from_md"]], "get_scala_code_from_md() (in module sparknlp_jsl.transpiler.source_loader)": [[222, "sparknlp_jsl.transpiler.source_loader.get_scala_code_from_md"]], "load_file_as_dict() (in module sparknlp_jsl.transpiler.source_loader)": [[222, "sparknlp_jsl.transpiler.source_loader.load_file_as_dict"]], "process_python_code() (in module sparknlp_jsl.transpiler.source_loader)": [[222, "sparknlp_jsl.transpiler.source_loader.process_python_code"]], "sparknlp_jsl.transpiler.source_loader": [[222, "module-sparknlp_jsl.transpiler.source_loader"]], "update_md_file() (in module sparknlp_jsl.transpiler.source_loader)": [[222, "sparknlp_jsl.transpiler.source_loader.update_md_file"]], "update_md_file_for_working_scala_code() (in module sparknlp_jsl.transpiler.source_loader)": [[222, "sparknlp_jsl.transpiler.source_loader.update_md_file_for_working_scala_code"]], "apply_method_to_all_md_files() (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.apply_method_to_all_md_files"]], "generated_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.generated_code_failed"]], "generated_code_works (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.generated_code_works"]], "python_code_failed (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.python_code_failed"]], "results_list (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.results_list"]], "scala_code_works (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.scala_code_works"]], "scala_generated (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.scala_generated"]], "sparknlp_jsl.transpiler.uploader": [[223, "module-sparknlp_jsl.transpiler.uploader"]], "upload_scala_code_in_md_file() (in module sparknlp_jsl.transpiler.uploader)": [[223, "sparknlp_jsl.transpiler.uploader.upload_scala_code_in_md_file"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[224, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[224, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[224, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[224, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[225, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[225, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[226, "module-sparknlp_jsl.utils.alab_utils"]], "strip_json_entities() (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.strip_json_entities"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[226, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[227, "module-sparknlp_jsl.utils.conll_parse"]], "relationaldbdeidentification (class in sparknlp_jsl.utils.database_deidentification)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification"]], "age_groups (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.age_groups"]], "config (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.config"]], "connect_to_db() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.connect_to_db"]], "create_obfuscate_age_udf() (in module sparknlp_jsl.utils.database_deidentification)": [[228, "sparknlp_jsl.utils.database_deidentification.create_obfuscate_age_udf"]], "days_to_shift (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.days_to_shift"]], "deidentify() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.deidentify"]], "detect_sensitive_columns() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.detect_sensitive_columns"]], "get_all_tables() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.get_all_tables"]], "get_schema_info() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.get_schema_info"]], "mask_other_sensitive_columns() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.mask_other_sensitive_columns"]], "obfuscate_age() (in module sparknlp_jsl.utils.database_deidentification)": [[228, "sparknlp_jsl.utils.database_deidentification.obfuscate_age"]], "obfuscate_ages() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.obfuscate_ages"]], "obfuscate_dates() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.obfuscate_dates"]], "obfuscate_primary_foreign_keys() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.obfuscate_primary_foreign_keys"]], "phi_keywords (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.phi_keywords"]], "pk_fk_shift_value (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.pk_fk_shift_value"]], "setup_logging() (relationaldbdeidentification method)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.setup_logging"]], "spark (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.spark"]], "sparknlp_jsl.utils.database_deidentification": [[228, "module-sparknlp_jsl.utils.database_deidentification"]], "use_hipaa (relationaldbdeidentification attribute)": [[228, "sparknlp_jsl.utils.database_deidentification.RelationalDBDeidentification.use_hipaa"]], "dateshiftfiller (class in sparknlp_jsl.utils.date_shift_filler)": [[229, "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller"]], "fill_missing_shifts() (dateshiftfiller method)": [[229, "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller.fill_missing_shifts"]], "instance (dateshiftfiller attribute)": [[229, "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller.instance"]], "max_shift_days (dateshiftfiller attribute)": [[229, "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller.max_shift_days"]], "seed (dateshiftfiller attribute)": [[229, "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller.seed"]], "spark (dateshiftfiller attribute)": [[229, "sparknlp_jsl.utils.date_shift_filler.DateShiftFiller.spark"]], "sparknlp_jsl.utils.date_shift_filler": [[229, "module-sparknlp_jsl.utils.date_shift_filler"]], "dict_to_annotation_converter() (in module sparknlp_jsl.utils.deidentification_utils)": [[230, "sparknlp_jsl.utils.deidentification_utils.dict_to_annotation_converter"]], "sparknlp_jsl.utils.deidentification_utils": [[230, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[230, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "apply_exception_handling() (in module sparknlp_jsl.utils.exception_handling_utils)": [[231, "sparknlp_jsl.utils.exception_handling_utils.apply_exception_handling"]], "sparknlp_jsl.utils.exception_handling_utils": [[231, "module-sparknlp_jsl.utils.exception_handling_utils"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[232, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[232, "module-sparknlp_jsl.utils.imports"]], "parse_str_to_dict() (in module sparknlp_jsl.utils.java_helper)": [[234, "sparknlp_jsl.utils.java_helper.parse_str_to_dict"]], "sparknlp_jsl.utils.java_helper": [[234, "module-sparknlp_jsl.utils.java_helper"]], "assertion (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "vector_similarity_rankings (internalannotatortype attribute)": [[235, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.VECTOR_SIMILARITY_RANKINGS"]], "sparknlp_jsl.utils.licensed_annotator_type": [[235, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[236, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[237, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[237, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[237, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[237, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[237, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[238, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[238, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[238, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "draw_boxes_on_image_handwritten_region() (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.draw_boxes_on_image_handwritten_region"]], "get_handwritten_regions() (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.get_handwritten_regions"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "pretrained_model (in module sparknlp_jsl.utils.ocr_utils)": [[239, "sparknlp_jsl.utils.ocr_utils.pretrained_model"]], "sparknlp_jsl.utils.ocr_utils": [[239, "module-sparknlp_jsl.utils.ocr_utils"]], "hcc_from_icd() (riskadjustmentutil static method)": [[240, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_from_ICD"]], "hcc_labels() (riskadjustmentutil static method)": [[240, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.HCC_labels"]], "riskadjustmentutil (class in sparknlp_jsl.utils.risk_adjustment_utils)": [[240, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil"]], "diff_between_hccs() (riskadjustmentutil static method)": [[240, "sparknlp_jsl.utils.risk_adjustment_utils.RiskAdjustmentUtil.diff_between_HCCs"]], "sparknlp_jsl.utils.risk_adjustment_utils": [[240, "module-sparknlp_jsl.utils.risk_adjustment_utils"]], "runtranspiledcode (class in sparknlp_jsl.utils.run_transpiled_code)": [[241, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode"]], "build_scala_code() (runtranspiledcode static method)": [[241, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.build_scala_code"]], "compile_scala_code() (runtranspiledcode static method)": [[241, "sparknlp_jsl.utils.run_transpiled_code.RunTranspiledCode.compile_scala_code"]], "sparknlp_jsl.utils.run_transpiled_code": [[241, "module-sparknlp_jsl.utils.run_transpiled_code"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[242, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[242, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]], "convert_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[243, "sparknlp_jsl.utils.visualner_annotations_parser.convert_to_CONLL"]], "get_tokens() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[243, "sparknlp_jsl.utils.visualner_annotations_parser.get_tokens"]], "pdfs_to_visualner_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[243, "sparknlp_jsl.utils.visualner_annotations_parser.pdfs_to_visualner_to_conll"]], "sparknlp_jsl.utils.visualner_annotations_parser": [[243, "module-sparknlp_jsl.utils.visualner_annotations_parser"]], "visualner_annotations_to_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[243, "sparknlp_jsl.utils.visualner_annotations_parser.visualner_annotations_to_conll"]], "write_conll() (in module sparknlp_jsl.utils.visualner_annotations_parser)": [[243, "sparknlp_jsl.utils.visualner_annotations_parser.write_CONLL"]]}})